
Test_Swarm_001_G031K8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a74  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  08005b30  08005b30  00015b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d5c  08005d5c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005d5c  08005d5c  00015d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d64  08005d64  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d64  08005d64  00015d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d68  08005d68  00015d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005d6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000394  20000070  08005ddc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  08005ddc  00020404  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014e09  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029b0  00000000  00000000  00034ea1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  00037858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010b8  00000000  00000000  00038a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e59  00000000  00000000  00039ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000147c8  00000000  00000000  00051929  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099fd9  00000000  00000000  000660f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001000ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004458  00000000  00000000  0010011c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005b18 	.word	0x08005b18

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	08005b18 	.word	0x08005b18

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	469b      	mov	fp, r3
 800048a:	d433      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048c:	465a      	mov	r2, fp
 800048e:	4653      	mov	r3, sl
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83a      	bhi.n	8000516 <__udivmoddi4+0xc2>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e078      	b.n	8000598 <__udivmoddi4+0x144>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e075      	b.n	800059e <__udivmoddi4+0x14a>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e028      	b.n	800051e <__udivmoddi4+0xca>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	2320      	movs	r3, #32
 80004f8:	1a9b      	subs	r3, r3, r2
 80004fa:	4652      	mov	r2, sl
 80004fc:	40da      	lsrs	r2, r3
 80004fe:	4641      	mov	r1, r8
 8000500:	0013      	movs	r3, r2
 8000502:	464a      	mov	r2, r9
 8000504:	408a      	lsls	r2, r1
 8000506:	0017      	movs	r7, r2
 8000508:	4642      	mov	r2, r8
 800050a:	431f      	orrs	r7, r3
 800050c:	4653      	mov	r3, sl
 800050e:	4093      	lsls	r3, r2
 8000510:	001e      	movs	r6, r3
 8000512:	42af      	cmp	r7, r5
 8000514:	d9c4      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000516:	2200      	movs	r2, #0
 8000518:	2300      	movs	r3, #0
 800051a:	9200      	str	r2, [sp, #0]
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	4643      	mov	r3, r8
 8000520:	2b00      	cmp	r3, #0
 8000522:	d0d9      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000524:	07fb      	lsls	r3, r7, #31
 8000526:	0872      	lsrs	r2, r6, #1
 8000528:	431a      	orrs	r2, r3
 800052a:	4646      	mov	r6, r8
 800052c:	087b      	lsrs	r3, r7, #1
 800052e:	e00e      	b.n	800054e <__udivmoddi4+0xfa>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d101      	bne.n	8000538 <__udivmoddi4+0xe4>
 8000534:	42a2      	cmp	r2, r4
 8000536:	d80c      	bhi.n	8000552 <__udivmoddi4+0xfe>
 8000538:	1aa4      	subs	r4, r4, r2
 800053a:	419d      	sbcs	r5, r3
 800053c:	2001      	movs	r0, #1
 800053e:	1924      	adds	r4, r4, r4
 8000540:	416d      	adcs	r5, r5
 8000542:	2100      	movs	r1, #0
 8000544:	3e01      	subs	r6, #1
 8000546:	1824      	adds	r4, r4, r0
 8000548:	414d      	adcs	r5, r1
 800054a:	2e00      	cmp	r6, #0
 800054c:	d006      	beq.n	800055c <__udivmoddi4+0x108>
 800054e:	42ab      	cmp	r3, r5
 8000550:	d9ee      	bls.n	8000530 <__udivmoddi4+0xdc>
 8000552:	3e01      	subs	r6, #1
 8000554:	1924      	adds	r4, r4, r4
 8000556:	416d      	adcs	r5, r5
 8000558:	2e00      	cmp	r6, #0
 800055a:	d1f8      	bne.n	800054e <__udivmoddi4+0xfa>
 800055c:	9800      	ldr	r0, [sp, #0]
 800055e:	9901      	ldr	r1, [sp, #4]
 8000560:	465b      	mov	r3, fp
 8000562:	1900      	adds	r0, r0, r4
 8000564:	4169      	adcs	r1, r5
 8000566:	2b00      	cmp	r3, #0
 8000568:	db24      	blt.n	80005b4 <__udivmoddi4+0x160>
 800056a:	002b      	movs	r3, r5
 800056c:	465a      	mov	r2, fp
 800056e:	4644      	mov	r4, r8
 8000570:	40d3      	lsrs	r3, r2
 8000572:	002a      	movs	r2, r5
 8000574:	40e2      	lsrs	r2, r4
 8000576:	001c      	movs	r4, r3
 8000578:	465b      	mov	r3, fp
 800057a:	0015      	movs	r5, r2
 800057c:	2b00      	cmp	r3, #0
 800057e:	db2a      	blt.n	80005d6 <__udivmoddi4+0x182>
 8000580:	0026      	movs	r6, r4
 8000582:	409e      	lsls	r6, r3
 8000584:	0033      	movs	r3, r6
 8000586:	0026      	movs	r6, r4
 8000588:	4647      	mov	r7, r8
 800058a:	40be      	lsls	r6, r7
 800058c:	0032      	movs	r2, r6
 800058e:	1a80      	subs	r0, r0, r2
 8000590:	4199      	sbcs	r1, r3
 8000592:	9000      	str	r0, [sp, #0]
 8000594:	9101      	str	r1, [sp, #4]
 8000596:	e79f      	b.n	80004d8 <__udivmoddi4+0x84>
 8000598:	42a3      	cmp	r3, r4
 800059a:	d8bc      	bhi.n	8000516 <__udivmoddi4+0xc2>
 800059c:	e783      	b.n	80004a6 <__udivmoddi4+0x52>
 800059e:	4642      	mov	r2, r8
 80005a0:	2320      	movs	r3, #32
 80005a2:	2100      	movs	r1, #0
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	2200      	movs	r2, #0
 80005a8:	9100      	str	r1, [sp, #0]
 80005aa:	9201      	str	r2, [sp, #4]
 80005ac:	2201      	movs	r2, #1
 80005ae:	40da      	lsrs	r2, r3
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	e786      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	2320      	movs	r3, #32
 80005b8:	1a9b      	subs	r3, r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	4646      	mov	r6, r8
 80005be:	409a      	lsls	r2, r3
 80005c0:	0023      	movs	r3, r4
 80005c2:	40f3      	lsrs	r3, r6
 80005c4:	4644      	mov	r4, r8
 80005c6:	4313      	orrs	r3, r2
 80005c8:	002a      	movs	r2, r5
 80005ca:	40e2      	lsrs	r2, r4
 80005cc:	001c      	movs	r4, r3
 80005ce:	465b      	mov	r3, fp
 80005d0:	0015      	movs	r5, r2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	dad4      	bge.n	8000580 <__udivmoddi4+0x12c>
 80005d6:	4642      	mov	r2, r8
 80005d8:	002f      	movs	r7, r5
 80005da:	2320      	movs	r3, #32
 80005dc:	0026      	movs	r6, r4
 80005de:	4097      	lsls	r7, r2
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	40de      	lsrs	r6, r3
 80005e4:	003b      	movs	r3, r7
 80005e6:	4333      	orrs	r3, r6
 80005e8:	e7cd      	b.n	8000586 <__udivmoddi4+0x132>
 80005ea:	46c0      	nop			; (mov r8, r8)

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000644:	f3bf 8f4f 	dsb	sy
}
 8000648:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800064a:	4b04      	ldr	r3, [pc, #16]	; (800065c <__NVIC_SystemReset+0x1c>)
 800064c:	4a04      	ldr	r2, [pc, #16]	; (8000660 <__NVIC_SystemReset+0x20>)
 800064e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000650:	f3bf 8f4f 	dsb	sy
}
 8000654:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	e7fd      	b.n	8000656 <__NVIC_SystemReset+0x16>
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	e000ed00 	.word	0xe000ed00
 8000660:	05fa0004 	.word	0x05fa0004

08000664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000668:	f000 fdce 	bl	8001208 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066c:	f000 f92a 	bl	80008c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000670:	f000 fa88 	bl	8000b84 <MX_GPIO_Init>
  MX_DMA_Init();
 8000674:	f000 fa68 	bl	8000b48 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000678:	f000 fa18 	bl	8000aac <MX_USART1_UART_Init>
  MX_RTC_Init();
 800067c:	f000 f978 	bl	8000970 <MX_RTC_Init>
  MX_TIM14_Init();
 8000680:	f000 f9ec 	bl	8000a5c <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  __HAL_TIM_CLEAR_IT ( &htim14 , TIM_IT_UPDATE ) ; // żeby nie generować przerwania TIM6 od razu: https://stackoverflow.com/questions/71099885/why-hal-tim-periodelapsedcallback-gets-called-immediately-after-hal-tim-base-sta
 8000684:	4b65      	ldr	r3, [pc, #404]	; (800081c <main+0x1b8>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2202      	movs	r2, #2
 800068a:	4252      	negs	r2, r2
 800068c:	611a      	str	r2, [r3, #16]
  //uart_status = HAL_UART_Transmit ( &huart2 , (const uint8_t *) hello , strlen ( hello ) , UART_TX_TIMEOUT ) ;
  HAL_Delay ( 15000 ) ; // Wait for Swarm boot
 800068e:	4b64      	ldr	r3, [pc, #400]	; (8000820 <main+0x1bc>)
 8000690:	0018      	movs	r0, r3
 8000692:	f000 fe3f 	bl	8001314 <HAL_Delay>
  HAL_UARTEx_ReceiveToIdle_DMA ( &huart1 , rx_buff , sizeof ( rx_buff ) ) ;
 8000696:	23fa      	movs	r3, #250	; 0xfa
 8000698:	005a      	lsls	r2, r3, #1
 800069a:	4962      	ldr	r1, [pc, #392]	; (8000824 <main+0x1c0>)
 800069c:	4b62      	ldr	r3, [pc, #392]	; (8000828 <main+0x1c4>)
 800069e:	0018      	movs	r0, r3
 80006a0:	f004 fcc6 	bl	8005030 <HAL_UARTEx_ReceiveToIdle_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  send2swarm_at_command ( cs_at_comm , cs_answer , 1 ) ;
 80006a4:	4961      	ldr	r1, [pc, #388]	; (800082c <main+0x1c8>)
 80006a6:	4b62      	ldr	r3, [pc, #392]	; (8000830 <main+0x1cc>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	0018      	movs	r0, r3
 80006ac:	f000 faea 	bl	8000c84 <send2swarm_at_command>
	  if ( checklist == 1 )
 80006b0:	4b60      	ldr	r3, [pc, #384]	; (8000834 <main+0x1d0>)
 80006b2:	881b      	ldrh	r3, [r3, #0]
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d105      	bne.n	80006c4 <main+0x60>
		  send2swarm_at_command ( rt_0_at_comm , rt_ok_answer , 2 ) ;
 80006b8:	495f      	ldr	r1, [pc, #380]	; (8000838 <main+0x1d4>)
 80006ba:	4b60      	ldr	r3, [pc, #384]	; (800083c <main+0x1d8>)
 80006bc:	2202      	movs	r2, #2
 80006be:	0018      	movs	r0, r3
 80006c0:	f000 fae0 	bl	8000c84 <send2swarm_at_command>
	  if ( checklist == 2 )
 80006c4:	4b5b      	ldr	r3, [pc, #364]	; (8000834 <main+0x1d0>)
 80006c6:	881b      	ldrh	r3, [r3, #0]
 80006c8:	2b02      	cmp	r3, #2
 80006ca:	d105      	bne.n	80006d8 <main+0x74>
	  	  send2swarm_at_command ( rt_q_rate_at_comm , rt_0_answer , 3 ) ; // Query RT rate
 80006cc:	495c      	ldr	r1, [pc, #368]	; (8000840 <main+0x1dc>)
 80006ce:	4b5d      	ldr	r3, [pc, #372]	; (8000844 <main+0x1e0>)
 80006d0:	2203      	movs	r2, #3
 80006d2:	0018      	movs	r0, r3
 80006d4:	f000 fad6 	bl	8000c84 <send2swarm_at_command>
	  if ( checklist == 3 )
 80006d8:	4b56      	ldr	r3, [pc, #344]	; (8000834 <main+0x1d0>)
 80006da:	881b      	ldrh	r3, [r3, #0]
 80006dc:	2b03      	cmp	r3, #3
 80006de:	d105      	bne.n	80006ec <main+0x88>
		  send2swarm_at_command ( pw_0_at_comm , pw_ok_answer , 4 ) ;
 80006e0:	4959      	ldr	r1, [pc, #356]	; (8000848 <main+0x1e4>)
 80006e2:	4b5a      	ldr	r3, [pc, #360]	; (800084c <main+0x1e8>)
 80006e4:	2204      	movs	r2, #4
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 facc 	bl	8000c84 <send2swarm_at_command>
	  if ( checklist == 4 )
 80006ec:	4b51      	ldr	r3, [pc, #324]	; (8000834 <main+0x1d0>)
 80006ee:	881b      	ldrh	r3, [r3, #0]
 80006f0:	2b04      	cmp	r3, #4
 80006f2:	d105      	bne.n	8000700 <main+0x9c>
	  	  send2swarm_at_command ( pw_q_rate_at_comm , pw_0_answer , 5 ) ;
 80006f4:	4956      	ldr	r1, [pc, #344]	; (8000850 <main+0x1ec>)
 80006f6:	4b57      	ldr	r3, [pc, #348]	; (8000854 <main+0x1f0>)
 80006f8:	2205      	movs	r2, #5
 80006fa:	0018      	movs	r0, r3
 80006fc:	f000 fac2 	bl	8000c84 <send2swarm_at_command>
	  if ( checklist == 5 )
 8000700:	4b4c      	ldr	r3, [pc, #304]	; (8000834 <main+0x1d0>)
 8000702:	881b      	ldrh	r3, [r3, #0]
 8000704:	2b05      	cmp	r3, #5
 8000706:	d107      	bne.n	8000718 <main+0xb4>
	  {
	  	  send2swarm_at_command ( pw_mostrecent_at_comm , pw_mostrecent_answer , 6 ) ;
 8000708:	4953      	ldr	r1, [pc, #332]	; (8000858 <main+0x1f4>)
 800070a:	4b54      	ldr	r3, [pc, #336]	; (800085c <main+0x1f8>)
 800070c:	2206      	movs	r2, #6
 800070e:	0018      	movs	r0, r3
 8000710:	f000 fab8 	bl	8000c84 <send2swarm_at_command>
	  	  pw2payload () ;
 8000714:	f000 fb32 	bl	8000d7c <pw2payload>
	  }
	  if ( checklist == 6 )
 8000718:	4b46      	ldr	r3, [pc, #280]	; (8000834 <main+0x1d0>)
 800071a:	881b      	ldrh	r3, [r3, #0]
 800071c:	2b06      	cmp	r3, #6
 800071e:	d105      	bne.n	800072c <main+0xc8>
		  send2swarm_at_command ( dt_0_at_comm , dt_ok_answer , 7 ) ;
 8000720:	494f      	ldr	r1, [pc, #316]	; (8000860 <main+0x1fc>)
 8000722:	4b50      	ldr	r3, [pc, #320]	; (8000864 <main+0x200>)
 8000724:	2207      	movs	r2, #7
 8000726:	0018      	movs	r0, r3
 8000728:	f000 faac 	bl	8000c84 <send2swarm_at_command>
	  if ( checklist == 7 )
 800072c:	4b41      	ldr	r3, [pc, #260]	; (8000834 <main+0x1d0>)
 800072e:	881b      	ldrh	r3, [r3, #0]
 8000730:	2b07      	cmp	r3, #7
 8000732:	d105      	bne.n	8000740 <main+0xdc>
		  send2swarm_at_command ( dt_q_rate_at_comm , dt_0_answer , 8 ) ;
 8000734:	494c      	ldr	r1, [pc, #304]	; (8000868 <main+0x204>)
 8000736:	4b4d      	ldr	r3, [pc, #308]	; (800086c <main+0x208>)
 8000738:	2208      	movs	r2, #8
 800073a:	0018      	movs	r0, r3
 800073c:	f000 faa2 	bl	8000c84 <send2swarm_at_command>
	  if ( checklist == 8 )
 8000740:	4b3c      	ldr	r3, [pc, #240]	; (8000834 <main+0x1d0>)
 8000742:	881b      	ldrh	r3, [r3, #0]
 8000744:	2b08      	cmp	r3, #8
 8000746:	d105      	bne.n	8000754 <main+0xf0>
		  send2swarm_at_command ( gs_0_at_comm , gs_ok_answer , 9 ) ;
 8000748:	4949      	ldr	r1, [pc, #292]	; (8000870 <main+0x20c>)
 800074a:	4b4a      	ldr	r3, [pc, #296]	; (8000874 <main+0x210>)
 800074c:	2209      	movs	r2, #9
 800074e:	0018      	movs	r0, r3
 8000750:	f000 fa98 	bl	8000c84 <send2swarm_at_command>
	  if ( checklist == 9 )
 8000754:	4b37      	ldr	r3, [pc, #220]	; (8000834 <main+0x1d0>)
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	2b09      	cmp	r3, #9
 800075a:	d105      	bne.n	8000768 <main+0x104>
		  send2swarm_at_command ( gs_q_rate_at_comm , gs_0_answer , 10 ) ;
 800075c:	4946      	ldr	r1, [pc, #280]	; (8000878 <main+0x214>)
 800075e:	4b47      	ldr	r3, [pc, #284]	; (800087c <main+0x218>)
 8000760:	220a      	movs	r2, #10
 8000762:	0018      	movs	r0, r3
 8000764:	f000 fa8e 	bl	8000c84 <send2swarm_at_command>
	  if ( checklist == 10 )
 8000768:	4b32      	ldr	r3, [pc, #200]	; (8000834 <main+0x1d0>)
 800076a:	881b      	ldrh	r3, [r3, #0]
 800076c:	2b0a      	cmp	r3, #10
 800076e:	d105      	bne.n	800077c <main+0x118>
	  	  send2swarm_at_command ( gj_0_at_comm , gj_ok_answer , 11 ) ;
 8000770:	4943      	ldr	r1, [pc, #268]	; (8000880 <main+0x21c>)
 8000772:	4b44      	ldr	r3, [pc, #272]	; (8000884 <main+0x220>)
 8000774:	220b      	movs	r2, #11
 8000776:	0018      	movs	r0, r3
 8000778:	f000 fa84 	bl	8000c84 <send2swarm_at_command>
	  if ( checklist == 11 )
 800077c:	4b2d      	ldr	r3, [pc, #180]	; (8000834 <main+0x1d0>)
 800077e:	881b      	ldrh	r3, [r3, #0]
 8000780:	2b0b      	cmp	r3, #11
 8000782:	d105      	bne.n	8000790 <main+0x12c>
	  	  send2swarm_at_command ( gj_q_rate_at_comm , gj_0_answer , 12 ) ;
 8000784:	4940      	ldr	r1, [pc, #256]	; (8000888 <main+0x224>)
 8000786:	4b41      	ldr	r3, [pc, #260]	; (800088c <main+0x228>)
 8000788:	220c      	movs	r2, #12
 800078a:	0018      	movs	r0, r3
 800078c:	f000 fa7a 	bl	8000c84 <send2swarm_at_command>
	  if ( checklist == 12 )
 8000790:	4b28      	ldr	r3, [pc, #160]	; (8000834 <main+0x1d0>)
 8000792:	881b      	ldrh	r3, [r3, #0]
 8000794:	2b0c      	cmp	r3, #12
 8000796:	d105      	bne.n	80007a4 <main+0x140>
	  	  send2swarm_at_command ( gn_0_at_comm , gn_ok_answer , 13 ) ;
 8000798:	493d      	ldr	r1, [pc, #244]	; (8000890 <main+0x22c>)
 800079a:	4b3e      	ldr	r3, [pc, #248]	; (8000894 <main+0x230>)
 800079c:	220d      	movs	r2, #13
 800079e:	0018      	movs	r0, r3
 80007a0:	f000 fa70 	bl	8000c84 <send2swarm_at_command>
	  if ( checklist == 13 )
 80007a4:	4b23      	ldr	r3, [pc, #140]	; (8000834 <main+0x1d0>)
 80007a6:	881b      	ldrh	r3, [r3, #0]
 80007a8:	2b0d      	cmp	r3, #13
 80007aa:	d105      	bne.n	80007b8 <main+0x154>
		  send2swarm_at_command ( gn_q_rate_at_comm , gn_0_answer , 14 ) ;
 80007ac:	493a      	ldr	r1, [pc, #232]	; (8000898 <main+0x234>)
 80007ae:	4b3b      	ldr	r3, [pc, #236]	; (800089c <main+0x238>)
 80007b0:	220e      	movs	r2, #14
 80007b2:	0018      	movs	r0, r3
 80007b4:	f000 fa66 	bl	8000c84 <send2swarm_at_command>
	  if ( checklist == 14 )
 80007b8:	4b1e      	ldr	r3, [pc, #120]	; (8000834 <main+0x1d0>)
 80007ba:	881b      	ldrh	r3, [r3, #0]
 80007bc:	2b0e      	cmp	r3, #14
 80007be:	d107      	bne.n	80007d0 <main+0x16c>
	  {
		  send2swarm_at_command ( gn_mostrecent_at_comm , gn_mostrecent_answer , 15 ) ;
 80007c0:	4937      	ldr	r1, [pc, #220]	; (80008a0 <main+0x23c>)
 80007c2:	4b38      	ldr	r3, [pc, #224]	; (80008a4 <main+0x240>)
 80007c4:	220f      	movs	r2, #15
 80007c6:	0018      	movs	r0, r3
 80007c8:	f000 fa5c 	bl	8000c84 <send2swarm_at_command>
		  gn2payload () ;
 80007cc:	f000 fadc 	bl	8000d88 <gn2payload>
	  }
	  if ( checklist == 15 )
 80007d0:	4b18      	ldr	r3, [pc, #96]	; (8000834 <main+0x1d0>)
 80007d2:	881b      	ldrh	r3, [r3, #0]
 80007d4:	2b0f      	cmp	r3, #15
 80007d6:	d105      	bne.n	80007e4 <main+0x180>
		  send2swarm_at_command ( mt_del_all_at_comm , mt_del_all_answer , 16 ) ;
 80007d8:	4933      	ldr	r1, [pc, #204]	; (80008a8 <main+0x244>)
 80007da:	4b34      	ldr	r3, [pc, #208]	; (80008ac <main+0x248>)
 80007dc:	2210      	movs	r2, #16
 80007de:	0018      	movs	r0, r3
 80007e0:	f000 fa50 	bl	8000c84 <send2swarm_at_command>
	  if ( checklist == 16 )
 80007e4:	4b13      	ldr	r3, [pc, #76]	; (8000834 <main+0x1d0>)
 80007e6:	881b      	ldrh	r3, [r3, #0]
 80007e8:	2b10      	cmp	r3, #16
 80007ea:	d105      	bne.n	80007f8 <main+0x194>
	  	  send2swarm_at_command ( td_mzo_at_comm , td_ok_answer , 17 ) ;
 80007ec:	4930      	ldr	r1, [pc, #192]	; (80008b0 <main+0x24c>)
 80007ee:	4b31      	ldr	r3, [pc, #196]	; (80008b4 <main+0x250>)
 80007f0:	2211      	movs	r2, #17
 80007f2:	0018      	movs	r0, r3
 80007f4:	f000 fa46 	bl	8000c84 <send2swarm_at_command>
	  if ( checklist == 17 )
 80007f8:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <main+0x1d0>)
 80007fa:	881b      	ldrh	r3, [r3, #0]
 80007fc:	2b11      	cmp	r3, #17
 80007fe:	d100      	bne.n	8000802 <main+0x19e>
		  __NOP () ;
 8000800:	46c0      	nop			; (mov r8, r8)
	  	  //uart_status = HAL_UART_Transmit ( &huart2 , (const uint8_t *) good , strlen ( good ) , UART_TX_TIMEOUT ) ;
	  HAL_Delay ( 310000) ; // 5min. i 10 sekund obejmujące 5 minut na wysłanie wiadomości
 8000802:	4b2d      	ldr	r3, [pc, #180]	; (80008b8 <main+0x254>)
 8000804:	0018      	movs	r0, r3
 8000806:	f000 fd85 	bl	8001314 <HAL_Delay>
	  send2swarm_at_command ( sl_3ks_at_comm , sl_ok_answer , 18 ) ; // Swarm sleep for 50 minutes
 800080a:	492c      	ldr	r1, [pc, #176]	; (80008bc <main+0x258>)
 800080c:	4b2c      	ldr	r3, [pc, #176]	; (80008c0 <main+0x25c>)
 800080e:	2212      	movs	r2, #18
 8000810:	0018      	movs	r0, r3
 8000812:	f000 fa37 	bl	8000c84 <send2swarm_at_command>
	  //uart_status = HAL_UART_Transmit ( &huart2 , (const uint8_t *) stm32_shutdown , strlen ( stm32_shutdown ) , UART_TX_TIMEOUT ) ;
	  HAL_PWREx_EnterSHUTDOWNMode () ; // Enter the SHUTDOWN mode
 8000816:	f001 fba1 	bl	8001f5c <HAL_PWREx_EnterSHUTDOWNMode>
	  send2swarm_at_command ( cs_at_comm , cs_answer , 1 ) ;
 800081a:	e743      	b.n	80006a4 <main+0x40>
 800081c:	200000b8 	.word	0x200000b8
 8000820:	00003a98 	.word	0x00003a98
 8000824:	200001f8 	.word	0x200001f8
 8000828:	20000104 	.word	0x20000104
 800082c:	08005bd8 	.word	0x08005bd8
 8000830:	08005b3c 	.word	0x08005b3c
 8000834:	200001f4 	.word	0x200001f4
 8000838:	08005be4 	.word	0x08005be4
 800083c:	08005b40 	.word	0x08005b40
 8000840:	08005bf0 	.word	0x08005bf0
 8000844:	08005b48 	.word	0x08005b48
 8000848:	08005bfc 	.word	0x08005bfc
 800084c:	08005b50 	.word	0x08005b50
 8000850:	08005c08 	.word	0x08005c08
 8000854:	08005b58 	.word	0x08005b58
 8000858:	08005c14 	.word	0x08005c14
 800085c:	08005b60 	.word	0x08005b60
 8000860:	08005c1c 	.word	0x08005c1c
 8000864:	08005b68 	.word	0x08005b68
 8000868:	08005c28 	.word	0x08005c28
 800086c:	08005b70 	.word	0x08005b70
 8000870:	08005c34 	.word	0x08005c34
 8000874:	08005b78 	.word	0x08005b78
 8000878:	08005c40 	.word	0x08005c40
 800087c:	08005b80 	.word	0x08005b80
 8000880:	08005c4c 	.word	0x08005c4c
 8000884:	08005b88 	.word	0x08005b88
 8000888:	08005c58 	.word	0x08005c58
 800088c:	08005b90 	.word	0x08005b90
 8000890:	08005c64 	.word	0x08005c64
 8000894:	08005b98 	.word	0x08005b98
 8000898:	08005c70 	.word	0x08005c70
 800089c:	08005ba0 	.word	0x08005ba0
 80008a0:	08005c7c 	.word	0x08005c7c
 80008a4:	08005ba8 	.word	0x08005ba8
 80008a8:	08005c84 	.word	0x08005c84
 80008ac:	08005bb0 	.word	0x08005bb0
 80008b0:	08005c8c 	.word	0x08005c8c
 80008b4:	08005bb8 	.word	0x08005bb8
 80008b8:	0004baf0 	.word	0x0004baf0
 80008bc:	08005c94 	.word	0x08005c94
 80008c0:	08005bcc 	.word	0x08005bcc

080008c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c4:	b590      	push	{r4, r7, lr}
 80008c6:	b093      	sub	sp, #76	; 0x4c
 80008c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ca:	2410      	movs	r4, #16
 80008cc:	193b      	adds	r3, r7, r4
 80008ce:	0018      	movs	r0, r3
 80008d0:	2338      	movs	r3, #56	; 0x38
 80008d2:	001a      	movs	r2, r3
 80008d4:	2100      	movs	r1, #0
 80008d6:	f004 fc9b 	bl	8005210 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008da:	003b      	movs	r3, r7
 80008dc:	0018      	movs	r0, r3
 80008de:	2310      	movs	r3, #16
 80008e0:	001a      	movs	r2, r3
 80008e2:	2100      	movs	r1, #0
 80008e4:	f004 fc94 	bl	8005210 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008e8:	2380      	movs	r3, #128	; 0x80
 80008ea:	009b      	lsls	r3, r3, #2
 80008ec:	0018      	movs	r0, r3
 80008ee:	f001 faf5 	bl	8001edc <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008f2:	f001 fae5 	bl	8001ec0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80008f6:	4b1d      	ldr	r3, [pc, #116]	; (800096c <SystemClock_Config+0xa8>)
 80008f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80008fa:	4b1c      	ldr	r3, [pc, #112]	; (800096c <SystemClock_Config+0xa8>)
 80008fc:	2118      	movs	r1, #24
 80008fe:	438a      	bics	r2, r1
 8000900:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000902:	193b      	adds	r3, r7, r4
 8000904:	2206      	movs	r2, #6
 8000906:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000908:	193b      	adds	r3, r7, r4
 800090a:	2201      	movs	r2, #1
 800090c:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800090e:	193b      	adds	r3, r7, r4
 8000910:	2280      	movs	r2, #128	; 0x80
 8000912:	0052      	lsls	r2, r2, #1
 8000914:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000916:	193b      	adds	r3, r7, r4
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800091c:	193b      	adds	r3, r7, r4
 800091e:	2240      	movs	r2, #64	; 0x40
 8000920:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000922:	193b      	adds	r3, r7, r4
 8000924:	2200      	movs	r2, #0
 8000926:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000928:	193b      	adds	r3, r7, r4
 800092a:	0018      	movs	r0, r3
 800092c:	f001 fb3c 	bl	8001fa8 <HAL_RCC_OscConfig>
 8000930:	1e03      	subs	r3, r0, #0
 8000932:	d001      	beq.n	8000938 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000934:	f000 fa82 	bl	8000e3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000938:	003b      	movs	r3, r7
 800093a:	2207      	movs	r2, #7
 800093c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800093e:	003b      	movs	r3, r7
 8000940:	2200      	movs	r2, #0
 8000942:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000944:	003b      	movs	r3, r7
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800094a:	003b      	movs	r3, r7
 800094c:	2200      	movs	r2, #0
 800094e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000950:	003b      	movs	r3, r7
 8000952:	2100      	movs	r1, #0
 8000954:	0018      	movs	r0, r3
 8000956:	f001 fe41 	bl	80025dc <HAL_RCC_ClockConfig>
 800095a:	1e03      	subs	r3, r0, #0
 800095c:	d001      	beq.n	8000962 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800095e:	f000 fa6d 	bl	8000e3c <Error_Handler>
  }
}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	46bd      	mov	sp, r7
 8000966:	b013      	add	sp, #76	; 0x4c
 8000968:	bd90      	pop	{r4, r7, pc}
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	40021000 	.word	0x40021000

08000970 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	0018      	movs	r0, r3
 800097a:	2314      	movs	r3, #20
 800097c:	001a      	movs	r2, r3
 800097e:	2100      	movs	r1, #0
 8000980:	f004 fc46 	bl	8005210 <memset>
  RTC_DateTypeDef sDate = {0};
 8000984:	003b      	movs	r3, r7
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800098a:	4b32      	ldr	r3, [pc, #200]	; (8000a54 <MX_RTC_Init+0xe4>)
 800098c:	4a32      	ldr	r2, [pc, #200]	; (8000a58 <MX_RTC_Init+0xe8>)
 800098e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000990:	4b30      	ldr	r3, [pc, #192]	; (8000a54 <MX_RTC_Init+0xe4>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000996:	4b2f      	ldr	r3, [pc, #188]	; (8000a54 <MX_RTC_Init+0xe4>)
 8000998:	227f      	movs	r2, #127	; 0x7f
 800099a:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800099c:	4b2d      	ldr	r3, [pc, #180]	; (8000a54 <MX_RTC_Init+0xe4>)
 800099e:	22ff      	movs	r2, #255	; 0xff
 80009a0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009a2:	4b2c      	ldr	r3, [pc, #176]	; (8000a54 <MX_RTC_Init+0xe4>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80009a8:	4b2a      	ldr	r3, [pc, #168]	; (8000a54 <MX_RTC_Init+0xe4>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009ae:	4b29      	ldr	r3, [pc, #164]	; (8000a54 <MX_RTC_Init+0xe4>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009b4:	4b27      	ldr	r3, [pc, #156]	; (8000a54 <MX_RTC_Init+0xe4>)
 80009b6:	2280      	movs	r2, #128	; 0x80
 80009b8:	05d2      	lsls	r2, r2, #23
 80009ba:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80009bc:	4b25      	ldr	r3, [pc, #148]	; (8000a54 <MX_RTC_Init+0xe4>)
 80009be:	2200      	movs	r2, #0
 80009c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009c2:	4b24      	ldr	r3, [pc, #144]	; (8000a54 <MX_RTC_Init+0xe4>)
 80009c4:	0018      	movs	r0, r3
 80009c6:	f002 f92d 	bl	8002c24 <HAL_RTC_Init>
 80009ca:	1e03      	subs	r3, r0, #0
 80009cc:	d001      	beq.n	80009d2 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 80009ce:	f000 fa35 	bl	8000e3c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	2200      	movs	r2, #0
 80009d6:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	2200      	movs	r2, #0
 80009dc:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	2200      	movs	r2, #0
 80009e2:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 80009e4:	1d3b      	adds	r3, r7, #4
 80009e6:	2200      	movs	r2, #0
 80009e8:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	2200      	movs	r2, #0
 80009ee:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80009f6:	1d39      	adds	r1, r7, #4
 80009f8:	4b16      	ldr	r3, [pc, #88]	; (8000a54 <MX_RTC_Init+0xe4>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	0018      	movs	r0, r3
 80009fe:	f002 f9b3 	bl	8002d68 <HAL_RTC_SetTime>
 8000a02:	1e03      	subs	r3, r0, #0
 8000a04:	d001      	beq.n	8000a0a <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 8000a06:	f000 fa19 	bl	8000e3c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000a0a:	003b      	movs	r3, r7
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000a10:	003b      	movs	r3, r7
 8000a12:	2201      	movs	r2, #1
 8000a14:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000a16:	003b      	movs	r3, r7
 8000a18:	2201      	movs	r2, #1
 8000a1a:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000a1c:	003b      	movs	r3, r7
 8000a1e:	2200      	movs	r2, #0
 8000a20:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000a22:	0039      	movs	r1, r7
 8000a24:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <MX_RTC_Init+0xe4>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f002 fa45 	bl	8002eb8 <HAL_RTC_SetDate>
 8000a2e:	1e03      	subs	r3, r0, #0
 8000a30:	d001      	beq.n	8000a36 <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 8000a32:	f000 fa03 	bl	8000e3c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 3600, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8000a36:	23e1      	movs	r3, #225	; 0xe1
 8000a38:	0119      	lsls	r1, r3, #4
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <MX_RTC_Init+0xe4>)
 8000a3c:	2204      	movs	r2, #4
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f002 fba2 	bl	8003188 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000a44:	1e03      	subs	r3, r0, #0
 8000a46:	d001      	beq.n	8000a4c <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8000a48:	f000 f9f8 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a4c:	46c0      	nop			; (mov r8, r8)
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	b006      	add	sp, #24
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	2000008c 	.word	0x2000008c
 8000a58:	40002800 	.word	0x40002800

08000a5c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000a60:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <MX_TIM14_Init+0x40>)
 8000a62:	4a0f      	ldr	r2, [pc, #60]	; (8000aa0 <MX_TIM14_Init+0x44>)
 8000a64:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16000-1;
 8000a66:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <MX_TIM14_Init+0x40>)
 8000a68:	4a0e      	ldr	r2, [pc, #56]	; (8000aa4 <MX_TIM14_Init+0x48>)
 8000a6a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6c:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <MX_TIM14_Init+0x40>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2000-1;
 8000a72:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <MX_TIM14_Init+0x40>)
 8000a74:	4a0c      	ldr	r2, [pc, #48]	; (8000aa8 <MX_TIM14_Init+0x4c>)
 8000a76:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a78:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <MX_TIM14_Init+0x40>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a7e:	4b07      	ldr	r3, [pc, #28]	; (8000a9c <MX_TIM14_Init+0x40>)
 8000a80:	2280      	movs	r2, #128	; 0x80
 8000a82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <MX_TIM14_Init+0x40>)
 8000a86:	0018      	movs	r0, r3
 8000a88:	f002 fc3e 	bl	8003308 <HAL_TIM_Base_Init>
 8000a8c:	1e03      	subs	r3, r0, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000a90:	f000 f9d4 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000a94:	46c0      	nop			; (mov r8, r8)
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	200000b8 	.word	0x200000b8
 8000aa0:	40002000 	.word	0x40002000
 8000aa4:	00003e7f 	.word	0x00003e7f
 8000aa8:	000007cf 	.word	0x000007cf

08000aac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ab0:	4b23      	ldr	r3, [pc, #140]	; (8000b40 <MX_USART1_UART_Init+0x94>)
 8000ab2:	4a24      	ldr	r2, [pc, #144]	; (8000b44 <MX_USART1_UART_Init+0x98>)
 8000ab4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ab6:	4b22      	ldr	r3, [pc, #136]	; (8000b40 <MX_USART1_UART_Init+0x94>)
 8000ab8:	22e1      	movs	r2, #225	; 0xe1
 8000aba:	0252      	lsls	r2, r2, #9
 8000abc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000abe:	4b20      	ldr	r3, [pc, #128]	; (8000b40 <MX_USART1_UART_Init+0x94>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ac4:	4b1e      	ldr	r3, [pc, #120]	; (8000b40 <MX_USART1_UART_Init+0x94>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aca:	4b1d      	ldr	r3, [pc, #116]	; (8000b40 <MX_USART1_UART_Init+0x94>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ad0:	4b1b      	ldr	r3, [pc, #108]	; (8000b40 <MX_USART1_UART_Init+0x94>)
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad6:	4b1a      	ldr	r3, [pc, #104]	; (8000b40 <MX_USART1_UART_Init+0x94>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000adc:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <MX_USART1_UART_Init+0x94>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ae2:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <MX_USART1_UART_Init+0x94>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ae8:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <MX_USART1_UART_Init+0x94>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aee:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <MX_USART1_UART_Init+0x94>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000af4:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <MX_USART1_UART_Init+0x94>)
 8000af6:	0018      	movs	r0, r3
 8000af8:	f002 fec0 	bl	800387c <HAL_UART_Init>
 8000afc:	1e03      	subs	r3, r0, #0
 8000afe:	d001      	beq.n	8000b04 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b00:	f000 f99c 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b04:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <MX_USART1_UART_Init+0x94>)
 8000b06:	2100      	movs	r1, #0
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f004 fa0f 	bl	8004f2c <HAL_UARTEx_SetTxFifoThreshold>
 8000b0e:	1e03      	subs	r3, r0, #0
 8000b10:	d001      	beq.n	8000b16 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b12:	f000 f993 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b16:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <MX_USART1_UART_Init+0x94>)
 8000b18:	2100      	movs	r1, #0
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f004 fa46 	bl	8004fac <HAL_UARTEx_SetRxFifoThreshold>
 8000b20:	1e03      	subs	r3, r0, #0
 8000b22:	d001      	beq.n	8000b28 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b24:	f000 f98a 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b28:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <MX_USART1_UART_Init+0x94>)
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f004 f9c4 	bl	8004eb8 <HAL_UARTEx_DisableFifoMode>
 8000b30:	1e03      	subs	r3, r0, #0
 8000b32:	d001      	beq.n	8000b38 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b34:	f000 f982 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b38:	46c0      	nop			; (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	20000104 	.word	0x20000104
 8000b44:	40013800 	.word	0x40013800

08000b48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <MX_DMA_Init+0x38>)
 8000b50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <MX_DMA_Init+0x38>)
 8000b54:	2101      	movs	r1, #1
 8000b56:	430a      	orrs	r2, r1
 8000b58:	639a      	str	r2, [r3, #56]	; 0x38
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <MX_DMA_Init+0x38>)
 8000b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b5e:	2201      	movs	r2, #1
 8000b60:	4013      	ands	r3, r2
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2100      	movs	r1, #0
 8000b6a:	2009      	movs	r0, #9
 8000b6c:	f000 fca2 	bl	80014b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b70:	2009      	movs	r0, #9
 8000b72:	f000 fcb4 	bl	80014de <HAL_NVIC_EnableIRQ>

}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	b002      	add	sp, #8
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	40021000 	.word	0x40021000

08000b84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b84:	b590      	push	{r4, r7, lr}
 8000b86:	b089      	sub	sp, #36	; 0x24
 8000b88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8a:	240c      	movs	r4, #12
 8000b8c:	193b      	adds	r3, r7, r4
 8000b8e:	0018      	movs	r0, r3
 8000b90:	2314      	movs	r3, #20
 8000b92:	001a      	movs	r2, r3
 8000b94:	2100      	movs	r1, #0
 8000b96:	f004 fb3b 	bl	8005210 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b9a:	4b2c      	ldr	r3, [pc, #176]	; (8000c4c <MX_GPIO_Init+0xc8>)
 8000b9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b9e:	4b2b      	ldr	r3, [pc, #172]	; (8000c4c <MX_GPIO_Init+0xc8>)
 8000ba0:	2104      	movs	r1, #4
 8000ba2:	430a      	orrs	r2, r1
 8000ba4:	635a      	str	r2, [r3, #52]	; 0x34
 8000ba6:	4b29      	ldr	r3, [pc, #164]	; (8000c4c <MX_GPIO_Init+0xc8>)
 8000ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000baa:	2204      	movs	r2, #4
 8000bac:	4013      	ands	r3, r2
 8000bae:	60bb      	str	r3, [r7, #8]
 8000bb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bb2:	4b26      	ldr	r3, [pc, #152]	; (8000c4c <MX_GPIO_Init+0xc8>)
 8000bb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bb6:	4b25      	ldr	r3, [pc, #148]	; (8000c4c <MX_GPIO_Init+0xc8>)
 8000bb8:	2120      	movs	r1, #32
 8000bba:	430a      	orrs	r2, r1
 8000bbc:	635a      	str	r2, [r3, #52]	; 0x34
 8000bbe:	4b23      	ldr	r3, [pc, #140]	; (8000c4c <MX_GPIO_Init+0xc8>)
 8000bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bc2:	2220      	movs	r2, #32
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bca:	4b20      	ldr	r3, [pc, #128]	; (8000c4c <MX_GPIO_Init+0xc8>)
 8000bcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bce:	4b1f      	ldr	r3, [pc, #124]	; (8000c4c <MX_GPIO_Init+0xc8>)
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	635a      	str	r2, [r3, #52]	; 0x34
 8000bd6:	4b1d      	ldr	r3, [pc, #116]	; (8000c4c <MX_GPIO_Init+0xc8>)
 8000bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bda:	2201      	movs	r2, #1
 8000bdc:	4013      	ands	r3, r2
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_RESET);
 8000be2:	4b1b      	ldr	r3, [pc, #108]	; (8000c50 <MX_GPIO_Init+0xcc>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	2140      	movs	r1, #64	; 0x40
 8000be8:	0018      	movs	r0, r3
 8000bea:	f001 f917 	bl	8001e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000bee:	193b      	adds	r3, r7, r4
 8000bf0:	2204      	movs	r2, #4
 8000bf2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bf4:	193b      	adds	r3, r7, r4
 8000bf6:	2284      	movs	r2, #132	; 0x84
 8000bf8:	0392      	lsls	r2, r2, #14
 8000bfa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	193b      	adds	r3, r7, r4
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000c02:	193b      	adds	r3, r7, r4
 8000c04:	4a13      	ldr	r2, [pc, #76]	; (8000c54 <MX_GPIO_Init+0xd0>)
 8000c06:	0019      	movs	r1, r3
 8000c08:	0010      	movs	r0, r2
 8000c0a:	f000 ffa3 	bl	8001b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_Pin */
  GPIO_InitStruct.Pin = GREEN_Pin;
 8000c0e:	0021      	movs	r1, r4
 8000c10:	187b      	adds	r3, r7, r1
 8000c12:	2240      	movs	r2, #64	; 0x40
 8000c14:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c16:	187b      	adds	r3, r7, r1
 8000c18:	2201      	movs	r2, #1
 8000c1a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	187b      	adds	r3, r7, r1
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	187b      	adds	r3, r7, r1
 8000c24:	2200      	movs	r2, #0
 8000c26:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GREEN_GPIO_Port, &GPIO_InitStruct);
 8000c28:	187b      	adds	r3, r7, r1
 8000c2a:	4a09      	ldr	r2, [pc, #36]	; (8000c50 <MX_GPIO_Init+0xcc>)
 8000c2c:	0019      	movs	r1, r3
 8000c2e:	0010      	movs	r0, r2
 8000c30:	f000 ff90 	bl	8001b54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2100      	movs	r1, #0
 8000c38:	2006      	movs	r0, #6
 8000c3a:	f000 fc3b 	bl	80014b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000c3e:	2006      	movs	r0, #6
 8000c40:	f000 fc4d 	bl	80014de <HAL_NVIC_EnableIRQ>

}
 8000c44:	46c0      	nop			; (mov r8, r8)
 8000c46:	46bd      	mov	sp, r7
 8000c48:	b009      	add	sp, #36	; 0x24
 8000c4a:	bd90      	pop	{r4, r7, pc}
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	50000800 	.word	0x50000800
 8000c54:	50001400 	.word	0x50001400

08000c58 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback ( UART_HandleTypeDef *huart , uint16_t Size )
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	000a      	movs	r2, r1
 8000c62:	1cbb      	adds	r3, r7, #2
 8000c64:	801a      	strh	r2, [r3, #0]
    		}
    		//rx_buff[0] = 0 ;
    	}
    }
    */
    HAL_UARTEx_ReceiveToIdle_DMA ( &huart1 , rx_buff , sizeof ( rx_buff ) ) ;
 8000c66:	23fa      	movs	r3, #250	; 0xfa
 8000c68:	005a      	lsls	r2, r3, #1
 8000c6a:	4904      	ldr	r1, [pc, #16]	; (8000c7c <HAL_UARTEx_RxEventCallback+0x24>)
 8000c6c:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <HAL_UARTEx_RxEventCallback+0x28>)
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f004 f9de 	bl	8005030 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8000c74:	46c0      	nop			; (mov r8, r8)
 8000c76:	46bd      	mov	sp, r7
 8000c78:	b002      	add	sp, #8
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	200001f8 	.word	0x200001f8
 8000c80:	20000104 	.word	0x20000104

08000c84 <send2swarm_at_command>:
void send2swarm_at_command ( const char* at_command , const char* answer , uint16_t step )
{
 8000c84:	b5b0      	push	{r4, r5, r7, lr}
 8000c86:	b0c4      	sub	sp, #272	; 0x110
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	4b26      	ldr	r3, [pc, #152]	; (8000d28 <send2swarm_at_command+0xa4>)
 8000c90:	2188      	movs	r1, #136	; 0x88
 8000c92:	0049      	lsls	r1, r1, #1
 8000c94:	185b      	adds	r3, r3, r1
 8000c96:	19db      	adds	r3, r3, r7
 8000c98:	801a      	strh	r2, [r3, #0]
	uint8_t cs = nmea_checksum ( at_command , strlen ( at_command ) ) ;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	f7ff fa31 	bl	8000104 <strlen>
 8000ca2:	0002      	movs	r2, r0
 8000ca4:	2510      	movs	r5, #16
 8000ca6:	35ff      	adds	r5, #255	; 0xff
 8000ca8:	197c      	adds	r4, r7, r5
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	0011      	movs	r1, r2
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f000 f870 	bl	8000d94 <nmea_checksum>
 8000cb4:	0003      	movs	r3, r0
 8000cb6:	7023      	strb	r3, [r4, #0]
	char uart_tx_buff[250] ;

	sprintf ( (char*) uart_tx_buff , "%s*%02x\n" , at_command , cs ) ;
 8000cb8:	197b      	adds	r3, r7, r5
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	68fa      	ldr	r2, [r7, #12]
 8000cbe:	491b      	ldr	r1, [pc, #108]	; (8000d2c <send2swarm_at_command+0xa8>)
 8000cc0:	2414      	movs	r4, #20
 8000cc2:	1938      	adds	r0, r7, r4
 8000cc4:	f004 faac 	bl	8005220 <siprintf>
	uart_status = HAL_UART_Transmit ( &huart1 , (const uint8_t *) uart_tx_buff ,  strlen ( (char*) uart_tx_buff ) , UART_TX_TIMEOUT ) ;
 8000cc8:	193b      	adds	r3, r7, r4
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f7ff fa1a 	bl	8000104 <strlen>
 8000cd0:	0003      	movs	r3, r0
 8000cd2:	b29a      	uxth	r2, r3
 8000cd4:	1939      	adds	r1, r7, r4
 8000cd6:	4816      	ldr	r0, [pc, #88]	; (8000d30 <send2swarm_at_command+0xac>)
 8000cd8:	2364      	movs	r3, #100	; 0x64
 8000cda:	f002 fe25 	bl	8003928 <HAL_UART_Transmit>
 8000cde:	0003      	movs	r3, r0
 8000ce0:	001a      	movs	r2, r3
 8000ce2:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <send2swarm_at_command+0xb0>)
 8000ce4:	701a      	strb	r2, [r3, #0]
	waiting_for_answer = 1 ;
 8000ce6:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <send2swarm_at_command+0xb4>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &htim14 ) ;
 8000cec:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <send2swarm_at_command+0xb8>)
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f002 fb62 	bl	80033b8 <HAL_TIM_Base_Start_IT>
	while ( waiting_for_answer )
 8000cf4:	e00e      	b.n	8000d14 <send2swarm_at_command+0x90>
	{
		if ( check_answer ( answer ) )
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	f000 f823 	bl	8000d44 <check_answer>
 8000cfe:	1e03      	subs	r3, r0, #0
 8000d00:	d008      	beq.n	8000d14 <send2swarm_at_command+0x90>
		{
			checklist = step ;
 8000d02:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <send2swarm_at_command+0xbc>)
 8000d04:	4a08      	ldr	r2, [pc, #32]	; (8000d28 <send2swarm_at_command+0xa4>)
 8000d06:	2188      	movs	r1, #136	; 0x88
 8000d08:	0049      	lsls	r1, r1, #1
 8000d0a:	1852      	adds	r2, r2, r1
 8000d0c:	19d2      	adds	r2, r2, r7
 8000d0e:	8812      	ldrh	r2, [r2, #0]
 8000d10:	801a      	strh	r2, [r3, #0]
			break ;
 8000d12:	e004      	b.n	8000d1e <send2swarm_at_command+0x9a>
	while ( waiting_for_answer )
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <send2swarm_at_command+0xb4>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d1ec      	bne.n	8000cf6 <send2swarm_at_command+0x72>
		}
	}
}
 8000d1c:	46c0      	nop			; (mov r8, r8)
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	46bd      	mov	sp, r7
 8000d22:	b044      	add	sp, #272	; 0x110
 8000d24:	bdb0      	pop	{r4, r5, r7, pc}
 8000d26:	46c0      	nop			; (mov r8, r8)
 8000d28:	fffffef6 	.word	0xfffffef6
 8000d2c:	08005b30 	.word	0x08005b30
 8000d30:	20000104 	.word	0x20000104
 8000d34:	200001f7 	.word	0x200001f7
 8000d38:	200001f6 	.word	0x200001f6
 8000d3c:	200000b8 	.word	0x200000b8
 8000d40:	200001f4 	.word	0x200001f4

08000d44 <check_answer>:
uint8_t check_answer ( const char* answer )
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
	if ( strncmp ( (char*) rx_buff , answer , strlen ( answer ) ) == 0 )
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f7ff f9d8 	bl	8000104 <strlen>
 8000d54:	0002      	movs	r2, r0
 8000d56:	6879      	ldr	r1, [r7, #4]
 8000d58:	4b07      	ldr	r3, [pc, #28]	; (8000d78 <check_answer+0x34>)
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f004 fa80 	bl	8005260 <strncmp>
 8000d60:	1e03      	subs	r3, r0, #0
 8000d62:	d104      	bne.n	8000d6e <check_answer+0x2a>
	{
		rx_buff[0] = 0 ;
 8000d64:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <check_answer+0x34>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	701a      	strb	r2, [r3, #0]
		return 1 ;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e000      	b.n	8000d70 <check_answer+0x2c>
	}
	else
		return 0 ;
 8000d6e:	2300      	movs	r3, #0
}
 8000d70:	0018      	movs	r0, r3
 8000d72:	46bd      	mov	sp, r7
 8000d74:	b002      	add	sp, #8
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	200001f8 	.word	0x200001f8

08000d7c <pw2payload>:
void pw2payload ()
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
	__NOP () ;
 8000d80:	46c0      	nop			; (mov r8, r8)
}
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <gn2payload>:
void gn2payload ()
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
	__NOP () ;
 8000d8c:	46c0      	nop			; (mov r8, r8)
}
 8000d8e:	46c0      	nop			; (mov r8, r8)
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <nmea_checksum>:
uint8_t nmea_checksum ( const char *sz , size_t len )
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]
	size_t i = 0 ;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
	uint8_t cs ;
	if ( sz [0] == '$' )
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	2b24      	cmp	r3, #36	; 0x24
 8000da8:	d102      	bne.n	8000db0 <nmea_checksum+0x1c>
		i++ ;
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	3301      	adds	r3, #1
 8000dae:	60fb      	str	r3, [r7, #12]
	for ( cs = 0 ; ( i < len ) && sz [i] ; i++ )
 8000db0:	230b      	movs	r3, #11
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	2200      	movs	r2, #0
 8000db6:	701a      	strb	r2, [r3, #0]
 8000db8:	e00c      	b.n	8000dd4 <nmea_checksum+0x40>
		cs ^= ( (uint8_t) sz [i] ) ;
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	18d3      	adds	r3, r2, r3
 8000dc0:	7819      	ldrb	r1, [r3, #0]
 8000dc2:	220b      	movs	r2, #11
 8000dc4:	18bb      	adds	r3, r7, r2
 8000dc6:	18ba      	adds	r2, r7, r2
 8000dc8:	7812      	ldrb	r2, [r2, #0]
 8000dca:	404a      	eors	r2, r1
 8000dcc:	701a      	strb	r2, [r3, #0]
	for ( cs = 0 ; ( i < len ) && sz [i] ; i++ )
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fa      	ldr	r2, [r7, #12]
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d205      	bcs.n	8000de8 <nmea_checksum+0x54>
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	18d3      	adds	r3, r2, r3
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d1e8      	bne.n	8000dba <nmea_checksum+0x26>
	return cs;
 8000de8:	230b      	movs	r3, #11
 8000dea:	18fb      	adds	r3, r7, r3
 8000dec:	781b      	ldrb	r3, [r3, #0]
}
 8000dee:	0018      	movs	r0, r3
 8000df0:	46bd      	mov	sp, r7
 8000df2:	b004      	add	sp, #16
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM14 )
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a06      	ldr	r2, [pc, #24]	; (8000e20 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d106      	bne.n	8000e18 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		waiting_for_answer = 0 ;
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT ( &htim14 ) ;
 8000e10:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000e12:	0018      	movs	r0, r3
 8000e14:	f002 fb24 	bl	8003460 <HAL_TIM_Base_Stop_IT>
	}
}
 8000e18:	46c0      	nop			; (mov r8, r8)
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	b002      	add	sp, #8
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40002000 	.word	0x40002000
 8000e24:	200001f6 	.word	0x200001f6
 8000e28:	200000b8 	.word	0x200000b8

08000e2c <HAL_GPIO_EXTI_Falling_Callback>:
void HAL_GPIO_EXTI_Falling_Callback ( uint16_t GPIO_Pin )
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	0002      	movs	r2, r0
 8000e34:	1dbb      	adds	r3, r7, #6
 8000e36:	801a      	strh	r2, [r3, #0]
	NVIC_SystemReset () ;
 8000e38:	f7ff fc02 	bl	8000640 <__NVIC_SystemReset>

08000e3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e40:	b672      	cpsid	i
}
 8000e42:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <Error_Handler+0x8>
	...

08000e48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4e:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <HAL_MspInit+0x44>)
 8000e50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <HAL_MspInit+0x44>)
 8000e54:	2101      	movs	r1, #1
 8000e56:	430a      	orrs	r2, r1
 8000e58:	641a      	str	r2, [r3, #64]	; 0x40
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <HAL_MspInit+0x44>)
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	2201      	movs	r2, #1
 8000e60:	4013      	ands	r3, r2
 8000e62:	607b      	str	r3, [r7, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <HAL_MspInit+0x44>)
 8000e68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e6a:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <HAL_MspInit+0x44>)
 8000e6c:	2180      	movs	r1, #128	; 0x80
 8000e6e:	0549      	lsls	r1, r1, #21
 8000e70:	430a      	orrs	r2, r1
 8000e72:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e74:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <HAL_MspInit+0x44>)
 8000e76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e78:	2380      	movs	r3, #128	; 0x80
 8000e7a:	055b      	lsls	r3, r3, #21
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	603b      	str	r3, [r7, #0]
 8000e80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e82:	46c0      	nop			; (mov r8, r8)
 8000e84:	46bd      	mov	sp, r7
 8000e86:	b002      	add	sp, #8
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	40021000 	.word	0x40021000

08000e90 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000e90:	b590      	push	{r4, r7, lr}
 8000e92:	b08f      	sub	sp, #60	; 0x3c
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e98:	2410      	movs	r4, #16
 8000e9a:	193b      	adds	r3, r7, r4
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	2328      	movs	r3, #40	; 0x28
 8000ea0:	001a      	movs	r2, r3
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	f004 f9b4 	bl	8005210 <memset>
  if(hrtc->Instance==RTC)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a19      	ldr	r2, [pc, #100]	; (8000f14 <HAL_RTC_MspInit+0x84>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d12c      	bne.n	8000f0c <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000eb2:	193b      	adds	r3, r7, r4
 8000eb4:	2280      	movs	r2, #128	; 0x80
 8000eb6:	0292      	lsls	r2, r2, #10
 8000eb8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000eba:	193b      	adds	r3, r7, r4
 8000ebc:	2280      	movs	r2, #128	; 0x80
 8000ebe:	0052      	lsls	r2, r2, #1
 8000ec0:	625a      	str	r2, [r3, #36]	; 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ec2:	193b      	adds	r3, r7, r4
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f001 fd33 	bl	8002930 <HAL_RCCEx_PeriphCLKConfig>
 8000eca:	1e03      	subs	r3, r0, #0
 8000ecc:	d001      	beq.n	8000ed2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000ece:	f7ff ffb5 	bl	8000e3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000ed2:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <HAL_RTC_MspInit+0x88>)
 8000ed4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000ed6:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <HAL_RTC_MspInit+0x88>)
 8000ed8:	2180      	movs	r1, #128	; 0x80
 8000eda:	0209      	lsls	r1, r1, #8
 8000edc:	430a      	orrs	r2, r1
 8000ede:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000ee0:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <HAL_RTC_MspInit+0x88>)
 8000ee2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <HAL_RTC_MspInit+0x88>)
 8000ee6:	2180      	movs	r1, #128	; 0x80
 8000ee8:	00c9      	lsls	r1, r1, #3
 8000eea:	430a      	orrs	r2, r1
 8000eec:	63da      	str	r2, [r3, #60]	; 0x3c
 8000eee:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <HAL_RTC_MspInit+0x88>)
 8000ef0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ef2:	2380      	movs	r3, #128	; 0x80
 8000ef4:	00db      	lsls	r3, r3, #3
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8000efc:	2200      	movs	r2, #0
 8000efe:	2100      	movs	r1, #0
 8000f00:	2002      	movs	r0, #2
 8000f02:	f000 fad7 	bl	80014b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8000f06:	2002      	movs	r0, #2
 8000f08:	f000 fae9 	bl	80014de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000f0c:	46c0      	nop			; (mov r8, r8)
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	b00f      	add	sp, #60	; 0x3c
 8000f12:	bd90      	pop	{r4, r7, pc}
 8000f14:	40002800 	.word	0x40002800
 8000f18:	40021000 	.word	0x40021000

08000f1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a0e      	ldr	r2, [pc, #56]	; (8000f64 <HAL_TIM_Base_MspInit+0x48>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d115      	bne.n	8000f5a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <HAL_TIM_Base_MspInit+0x4c>)
 8000f30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f32:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <HAL_TIM_Base_MspInit+0x4c>)
 8000f34:	2180      	movs	r1, #128	; 0x80
 8000f36:	0209      	lsls	r1, r1, #8
 8000f38:	430a      	orrs	r2, r1
 8000f3a:	641a      	str	r2, [r3, #64]	; 0x40
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <HAL_TIM_Base_MspInit+0x4c>)
 8000f3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f40:	2380      	movs	r3, #128	; 0x80
 8000f42:	021b      	lsls	r3, r3, #8
 8000f44:	4013      	ands	r3, r2
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	2013      	movs	r0, #19
 8000f50:	f000 fab0 	bl	80014b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000f54:	2013      	movs	r0, #19
 8000f56:	f000 fac2 	bl	80014de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	b004      	add	sp, #16
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	40002000 	.word	0x40002000
 8000f68:	40021000 	.word	0x40021000

08000f6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f6c:	b590      	push	{r4, r7, lr}
 8000f6e:	b095      	sub	sp, #84	; 0x54
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	233c      	movs	r3, #60	; 0x3c
 8000f76:	18fb      	adds	r3, r7, r3
 8000f78:	0018      	movs	r0, r3
 8000f7a:	2314      	movs	r3, #20
 8000f7c:	001a      	movs	r2, r3
 8000f7e:	2100      	movs	r1, #0
 8000f80:	f004 f946 	bl	8005210 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f84:	2414      	movs	r4, #20
 8000f86:	193b      	adds	r3, r7, r4
 8000f88:	0018      	movs	r0, r3
 8000f8a:	2328      	movs	r3, #40	; 0x28
 8000f8c:	001a      	movs	r2, r3
 8000f8e:	2100      	movs	r1, #0
 8000f90:	f004 f93e 	bl	8005210 <memset>
  if(huart->Instance==USART1)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a3c      	ldr	r2, [pc, #240]	; (800108c <HAL_UART_MspInit+0x120>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d171      	bne.n	8001082 <HAL_UART_MspInit+0x116>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f9e:	193b      	adds	r3, r7, r4
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000fa4:	193b      	adds	r3, r7, r4
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000faa:	193b      	adds	r3, r7, r4
 8000fac:	0018      	movs	r0, r3
 8000fae:	f001 fcbf 	bl	8002930 <HAL_RCCEx_PeriphCLKConfig>
 8000fb2:	1e03      	subs	r3, r0, #0
 8000fb4:	d001      	beq.n	8000fba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000fb6:	f7ff ff41 	bl	8000e3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fba:	4b35      	ldr	r3, [pc, #212]	; (8001090 <HAL_UART_MspInit+0x124>)
 8000fbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fbe:	4b34      	ldr	r3, [pc, #208]	; (8001090 <HAL_UART_MspInit+0x124>)
 8000fc0:	2180      	movs	r1, #128	; 0x80
 8000fc2:	01c9      	lsls	r1, r1, #7
 8000fc4:	430a      	orrs	r2, r1
 8000fc6:	641a      	str	r2, [r3, #64]	; 0x40
 8000fc8:	4b31      	ldr	r3, [pc, #196]	; (8001090 <HAL_UART_MspInit+0x124>)
 8000fca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fcc:	2380      	movs	r3, #128	; 0x80
 8000fce:	01db      	lsls	r3, r3, #7
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd6:	4b2e      	ldr	r3, [pc, #184]	; (8001090 <HAL_UART_MspInit+0x124>)
 8000fd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fda:	4b2d      	ldr	r3, [pc, #180]	; (8001090 <HAL_UART_MspInit+0x124>)
 8000fdc:	2101      	movs	r1, #1
 8000fde:	430a      	orrs	r2, r1
 8000fe0:	635a      	str	r2, [r3, #52]	; 0x34
 8000fe2:	4b2b      	ldr	r3, [pc, #172]	; (8001090 <HAL_UART_MspInit+0x124>)
 8000fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	4013      	ands	r3, r2
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fee:	213c      	movs	r1, #60	; 0x3c
 8000ff0:	187b      	adds	r3, r7, r1
 8000ff2:	22c0      	movs	r2, #192	; 0xc0
 8000ff4:	00d2      	lsls	r2, r2, #3
 8000ff6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff8:	187b      	adds	r3, r7, r1
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	187b      	adds	r3, r7, r1
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001004:	187b      	adds	r3, r7, r1
 8001006:	2200      	movs	r2, #0
 8001008:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800100a:	187b      	adds	r3, r7, r1
 800100c:	2201      	movs	r2, #1
 800100e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001010:	187a      	adds	r2, r7, r1
 8001012:	23a0      	movs	r3, #160	; 0xa0
 8001014:	05db      	lsls	r3, r3, #23
 8001016:	0011      	movs	r1, r2
 8001018:	0018      	movs	r0, r3
 800101a:	f000 fd9b 	bl	8001b54 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 800101e:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <HAL_UART_MspInit+0x128>)
 8001020:	4a1d      	ldr	r2, [pc, #116]	; (8001098 <HAL_UART_MspInit+0x12c>)
 8001022:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001024:	4b1b      	ldr	r3, [pc, #108]	; (8001094 <HAL_UART_MspInit+0x128>)
 8001026:	2232      	movs	r2, #50	; 0x32
 8001028:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800102a:	4b1a      	ldr	r3, [pc, #104]	; (8001094 <HAL_UART_MspInit+0x128>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001030:	4b18      	ldr	r3, [pc, #96]	; (8001094 <HAL_UART_MspInit+0x128>)
 8001032:	2200      	movs	r2, #0
 8001034:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001036:	4b17      	ldr	r3, [pc, #92]	; (8001094 <HAL_UART_MspInit+0x128>)
 8001038:	2280      	movs	r2, #128	; 0x80
 800103a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800103c:	4b15      	ldr	r3, [pc, #84]	; (8001094 <HAL_UART_MspInit+0x128>)
 800103e:	2200      	movs	r2, #0
 8001040:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001042:	4b14      	ldr	r3, [pc, #80]	; (8001094 <HAL_UART_MspInit+0x128>)
 8001044:	2200      	movs	r2, #0
 8001046:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <HAL_UART_MspInit+0x128>)
 800104a:	2200      	movs	r2, #0
 800104c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800104e:	4b11      	ldr	r3, [pc, #68]	; (8001094 <HAL_UART_MspInit+0x128>)
 8001050:	2200      	movs	r2, #0
 8001052:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001054:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <HAL_UART_MspInit+0x128>)
 8001056:	0018      	movs	r0, r3
 8001058:	f000 fa5e 	bl	8001518 <HAL_DMA_Init>
 800105c:	1e03      	subs	r3, r0, #0
 800105e:	d001      	beq.n	8001064 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8001060:	f7ff feec 	bl	8000e3c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2180      	movs	r1, #128	; 0x80
 8001068:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <HAL_UART_MspInit+0x128>)
 800106a:	505a      	str	r2, [r3, r1]
 800106c:	4b09      	ldr	r3, [pc, #36]	; (8001094 <HAL_UART_MspInit+0x128>)
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	2100      	movs	r1, #0
 8001076:	201b      	movs	r0, #27
 8001078:	f000 fa1c 	bl	80014b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800107c:	201b      	movs	r0, #27
 800107e:	f000 fa2e 	bl	80014de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001082:	46c0      	nop			; (mov r8, r8)
 8001084:	46bd      	mov	sp, r7
 8001086:	b015      	add	sp, #84	; 0x54
 8001088:	bd90      	pop	{r4, r7, pc}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	40013800 	.word	0x40013800
 8001090:	40021000 	.word	0x40021000
 8001094:	20000198 	.word	0x20000198
 8001098:	40020008 	.word	0x40020008

0800109c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <NMI_Handler+0x4>

080010a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a6:	e7fe      	b.n	80010a6 <HardFault_Handler+0x4>

080010a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80010ac:	46c0      	nop			; (mov r8, r8)
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010b6:	46c0      	nop			; (mov r8, r8)
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010c0:	f000 f90c 	bl	80012dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c4:	46c0      	nop			; (mov r8, r8)
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80010d0:	4b03      	ldr	r3, [pc, #12]	; (80010e0 <RTC_TAMP_IRQHandler+0x14>)
 80010d2:	0018      	movs	r0, r3
 80010d4:	f002 f8f2 	bl	80032bc <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 80010d8:	46c0      	nop			; (mov r8, r8)
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	46c0      	nop			; (mov r8, r8)
 80010e0:	2000008c 	.word	0x2000008c

080010e4 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 80010e8:	2004      	movs	r0, #4
 80010ea:	f000 feb5 	bl	8001e58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80010f8:	4b03      	ldr	r3, [pc, #12]	; (8001108 <DMA1_Channel1_IRQHandler+0x14>)
 80010fa:	0018      	movs	r0, r3
 80010fc:	f000 fbe8 	bl	80018d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001100:	46c0      	nop			; (mov r8, r8)
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	46c0      	nop			; (mov r8, r8)
 8001108:	20000198 	.word	0x20000198

0800110c <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001110:	4b03      	ldr	r3, [pc, #12]	; (8001120 <TIM14_IRQHandler+0x14>)
 8001112:	0018      	movs	r0, r3
 8001114:	f002 f9d2 	bl	80034bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001118:	46c0      	nop			; (mov r8, r8)
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	46c0      	nop			; (mov r8, r8)
 8001120:	200000b8 	.word	0x200000b8

08001124 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001128:	4b03      	ldr	r3, [pc, #12]	; (8001138 <USART1_IRQHandler+0x14>)
 800112a:	0018      	movs	r0, r3
 800112c:	f002 fc98 	bl	8003a60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001130:	46c0      	nop			; (mov r8, r8)
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	46c0      	nop			; (mov r8, r8)
 8001138:	20000104 	.word	0x20000104

0800113c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001144:	4a14      	ldr	r2, [pc, #80]	; (8001198 <_sbrk+0x5c>)
 8001146:	4b15      	ldr	r3, [pc, #84]	; (800119c <_sbrk+0x60>)
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001150:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <_sbrk+0x64>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d102      	bne.n	800115e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001158:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <_sbrk+0x64>)
 800115a:	4a12      	ldr	r2, [pc, #72]	; (80011a4 <_sbrk+0x68>)
 800115c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800115e:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <_sbrk+0x64>)
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	18d3      	adds	r3, r2, r3
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	429a      	cmp	r2, r3
 800116a:	d207      	bcs.n	800117c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800116c:	f004 f826 	bl	80051bc <__errno>
 8001170:	0003      	movs	r3, r0
 8001172:	220c      	movs	r2, #12
 8001174:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001176:	2301      	movs	r3, #1
 8001178:	425b      	negs	r3, r3
 800117a:	e009      	b.n	8001190 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800117c:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <_sbrk+0x64>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001182:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <_sbrk+0x64>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	18d2      	adds	r2, r2, r3
 800118a:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <_sbrk+0x64>)
 800118c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800118e:	68fb      	ldr	r3, [r7, #12]
}
 8001190:	0018      	movs	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	b006      	add	sp, #24
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20002000 	.word	0x20002000
 800119c:	00000400 	.word	0x00000400
 80011a0:	200003ec 	.word	0x200003ec
 80011a4:	20000408 	.word	0x20000408

080011a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011ac:	46c0      	nop			; (mov r8, r8)
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011b4:	480d      	ldr	r0, [pc, #52]	; (80011ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011b6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011b8:	f7ff fff6 	bl	80011a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011bc:	480c      	ldr	r0, [pc, #48]	; (80011f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80011be:	490d      	ldr	r1, [pc, #52]	; (80011f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011c0:	4a0d      	ldr	r2, [pc, #52]	; (80011f8 <LoopForever+0xe>)
  movs r3, #0
 80011c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c4:	e002      	b.n	80011cc <LoopCopyDataInit>

080011c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ca:	3304      	adds	r3, #4

080011cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d0:	d3f9      	bcc.n	80011c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011d2:	4a0a      	ldr	r2, [pc, #40]	; (80011fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80011d4:	4c0a      	ldr	r4, [pc, #40]	; (8001200 <LoopForever+0x16>)
  movs r3, #0
 80011d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d8:	e001      	b.n	80011de <LoopFillZerobss>

080011da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011dc:	3204      	adds	r2, #4

080011de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e0:	d3fb      	bcc.n	80011da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80011e2:	f003 fff1 	bl	80051c8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80011e6:	f7ff fa3d 	bl	8000664 <main>

080011ea <LoopForever>:

LoopForever:
  b LoopForever
 80011ea:	e7fe      	b.n	80011ea <LoopForever>
  ldr   r0, =_estack
 80011ec:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80011f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80011f8:	08005d6c 	.word	0x08005d6c
  ldr r2, =_sbss
 80011fc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001200:	20000404 	.word	0x20000404

08001204 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001204:	e7fe      	b.n	8001204 <ADC1_IRQHandler>
	...

08001208 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800120e:	1dfb      	adds	r3, r7, #7
 8001210:	2200      	movs	r2, #0
 8001212:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <HAL_Init+0x3c>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <HAL_Init+0x3c>)
 800121a:	2180      	movs	r1, #128	; 0x80
 800121c:	0049      	lsls	r1, r1, #1
 800121e:	430a      	orrs	r2, r1
 8001220:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001222:	2000      	movs	r0, #0
 8001224:	f000 f810 	bl	8001248 <HAL_InitTick>
 8001228:	1e03      	subs	r3, r0, #0
 800122a:	d003      	beq.n	8001234 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800122c:	1dfb      	adds	r3, r7, #7
 800122e:	2201      	movs	r2, #1
 8001230:	701a      	strb	r2, [r3, #0]
 8001232:	e001      	b.n	8001238 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001234:	f7ff fe08 	bl	8000e48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001238:	1dfb      	adds	r3, r7, #7
 800123a:	781b      	ldrb	r3, [r3, #0]
}
 800123c:	0018      	movs	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	b002      	add	sp, #8
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40022000 	.word	0x40022000

08001248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001248:	b590      	push	{r4, r7, lr}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001250:	230f      	movs	r3, #15
 8001252:	18fb      	adds	r3, r7, r3
 8001254:	2200      	movs	r2, #0
 8001256:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001258:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <HAL_InitTick+0x88>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d02b      	beq.n	80012b8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001260:	4b1c      	ldr	r3, [pc, #112]	; (80012d4 <HAL_InitTick+0x8c>)
 8001262:	681c      	ldr	r4, [r3, #0]
 8001264:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <HAL_InitTick+0x88>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	0019      	movs	r1, r3
 800126a:	23fa      	movs	r3, #250	; 0xfa
 800126c:	0098      	lsls	r0, r3, #2
 800126e:	f7fe ff5b 	bl	8000128 <__udivsi3>
 8001272:	0003      	movs	r3, r0
 8001274:	0019      	movs	r1, r3
 8001276:	0020      	movs	r0, r4
 8001278:	f7fe ff56 	bl	8000128 <__udivsi3>
 800127c:	0003      	movs	r3, r0
 800127e:	0018      	movs	r0, r3
 8001280:	f000 f93d 	bl	80014fe <HAL_SYSTICK_Config>
 8001284:	1e03      	subs	r3, r0, #0
 8001286:	d112      	bne.n	80012ae <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b03      	cmp	r3, #3
 800128c:	d80a      	bhi.n	80012a4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	2301      	movs	r3, #1
 8001292:	425b      	negs	r3, r3
 8001294:	2200      	movs	r2, #0
 8001296:	0018      	movs	r0, r3
 8001298:	f000 f90c 	bl	80014b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800129c:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <HAL_InitTick+0x90>)
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	e00d      	b.n	80012c0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80012a4:	230f      	movs	r3, #15
 80012a6:	18fb      	adds	r3, r7, r3
 80012a8:	2201      	movs	r2, #1
 80012aa:	701a      	strb	r2, [r3, #0]
 80012ac:	e008      	b.n	80012c0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012ae:	230f      	movs	r3, #15
 80012b0:	18fb      	adds	r3, r7, r3
 80012b2:	2201      	movs	r2, #1
 80012b4:	701a      	strb	r2, [r3, #0]
 80012b6:	e003      	b.n	80012c0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012b8:	230f      	movs	r3, #15
 80012ba:	18fb      	adds	r3, r7, r3
 80012bc:	2201      	movs	r2, #1
 80012be:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80012c0:	230f      	movs	r3, #15
 80012c2:	18fb      	adds	r3, r7, r3
 80012c4:	781b      	ldrb	r3, [r3, #0]
}
 80012c6:	0018      	movs	r0, r3
 80012c8:	46bd      	mov	sp, r7
 80012ca:	b005      	add	sp, #20
 80012cc:	bd90      	pop	{r4, r7, pc}
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	20000008 	.word	0x20000008
 80012d4:	20000000 	.word	0x20000000
 80012d8:	20000004 	.word	0x20000004

080012dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <HAL_IncTick+0x1c>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	001a      	movs	r2, r3
 80012e6:	4b05      	ldr	r3, [pc, #20]	; (80012fc <HAL_IncTick+0x20>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	18d2      	adds	r2, r2, r3
 80012ec:	4b03      	ldr	r3, [pc, #12]	; (80012fc <HAL_IncTick+0x20>)
 80012ee:	601a      	str	r2, [r3, #0]
}
 80012f0:	46c0      	nop			; (mov r8, r8)
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	46c0      	nop			; (mov r8, r8)
 80012f8:	20000008 	.word	0x20000008
 80012fc:	200003f0 	.word	0x200003f0

08001300 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  return uwTick;
 8001304:	4b02      	ldr	r3, [pc, #8]	; (8001310 <HAL_GetTick+0x10>)
 8001306:	681b      	ldr	r3, [r3, #0]
}
 8001308:	0018      	movs	r0, r3
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	46c0      	nop			; (mov r8, r8)
 8001310:	200003f0 	.word	0x200003f0

08001314 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800131c:	f7ff fff0 	bl	8001300 <HAL_GetTick>
 8001320:	0003      	movs	r3, r0
 8001322:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	3301      	adds	r3, #1
 800132c:	d005      	beq.n	800133a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800132e:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <HAL_Delay+0x44>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	001a      	movs	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	189b      	adds	r3, r3, r2
 8001338:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800133a:	46c0      	nop			; (mov r8, r8)
 800133c:	f7ff ffe0 	bl	8001300 <HAL_GetTick>
 8001340:	0002      	movs	r2, r0
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	68fa      	ldr	r2, [r7, #12]
 8001348:	429a      	cmp	r2, r3
 800134a:	d8f7      	bhi.n	800133c <HAL_Delay+0x28>
  {
  }
}
 800134c:	46c0      	nop			; (mov r8, r8)
 800134e:	46c0      	nop			; (mov r8, r8)
 8001350:	46bd      	mov	sp, r7
 8001352:	b004      	add	sp, #16
 8001354:	bd80      	pop	{r7, pc}
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	20000008 	.word	0x20000008

0800135c <__NVIC_EnableIRQ>:
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	0002      	movs	r2, r0
 8001364:	1dfb      	adds	r3, r7, #7
 8001366:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001368:	1dfb      	adds	r3, r7, #7
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b7f      	cmp	r3, #127	; 0x7f
 800136e:	d809      	bhi.n	8001384 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001370:	1dfb      	adds	r3, r7, #7
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	001a      	movs	r2, r3
 8001376:	231f      	movs	r3, #31
 8001378:	401a      	ands	r2, r3
 800137a:	4b04      	ldr	r3, [pc, #16]	; (800138c <__NVIC_EnableIRQ+0x30>)
 800137c:	2101      	movs	r1, #1
 800137e:	4091      	lsls	r1, r2
 8001380:	000a      	movs	r2, r1
 8001382:	601a      	str	r2, [r3, #0]
}
 8001384:	46c0      	nop			; (mov r8, r8)
 8001386:	46bd      	mov	sp, r7
 8001388:	b002      	add	sp, #8
 800138a:	bd80      	pop	{r7, pc}
 800138c:	e000e100 	.word	0xe000e100

08001390 <__NVIC_SetPriority>:
{
 8001390:	b590      	push	{r4, r7, lr}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	0002      	movs	r2, r0
 8001398:	6039      	str	r1, [r7, #0]
 800139a:	1dfb      	adds	r3, r7, #7
 800139c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800139e:	1dfb      	adds	r3, r7, #7
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b7f      	cmp	r3, #127	; 0x7f
 80013a4:	d828      	bhi.n	80013f8 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013a6:	4a2f      	ldr	r2, [pc, #188]	; (8001464 <__NVIC_SetPriority+0xd4>)
 80013a8:	1dfb      	adds	r3, r7, #7
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	b25b      	sxtb	r3, r3
 80013ae:	089b      	lsrs	r3, r3, #2
 80013b0:	33c0      	adds	r3, #192	; 0xc0
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	589b      	ldr	r3, [r3, r2]
 80013b6:	1dfa      	adds	r2, r7, #7
 80013b8:	7812      	ldrb	r2, [r2, #0]
 80013ba:	0011      	movs	r1, r2
 80013bc:	2203      	movs	r2, #3
 80013be:	400a      	ands	r2, r1
 80013c0:	00d2      	lsls	r2, r2, #3
 80013c2:	21ff      	movs	r1, #255	; 0xff
 80013c4:	4091      	lsls	r1, r2
 80013c6:	000a      	movs	r2, r1
 80013c8:	43d2      	mvns	r2, r2
 80013ca:	401a      	ands	r2, r3
 80013cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	019b      	lsls	r3, r3, #6
 80013d2:	22ff      	movs	r2, #255	; 0xff
 80013d4:	401a      	ands	r2, r3
 80013d6:	1dfb      	adds	r3, r7, #7
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	0018      	movs	r0, r3
 80013dc:	2303      	movs	r3, #3
 80013de:	4003      	ands	r3, r0
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013e4:	481f      	ldr	r0, [pc, #124]	; (8001464 <__NVIC_SetPriority+0xd4>)
 80013e6:	1dfb      	adds	r3, r7, #7
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	b25b      	sxtb	r3, r3
 80013ec:	089b      	lsrs	r3, r3, #2
 80013ee:	430a      	orrs	r2, r1
 80013f0:	33c0      	adds	r3, #192	; 0xc0
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	501a      	str	r2, [r3, r0]
}
 80013f6:	e031      	b.n	800145c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013f8:	4a1b      	ldr	r2, [pc, #108]	; (8001468 <__NVIC_SetPriority+0xd8>)
 80013fa:	1dfb      	adds	r3, r7, #7
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	0019      	movs	r1, r3
 8001400:	230f      	movs	r3, #15
 8001402:	400b      	ands	r3, r1
 8001404:	3b08      	subs	r3, #8
 8001406:	089b      	lsrs	r3, r3, #2
 8001408:	3306      	adds	r3, #6
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	18d3      	adds	r3, r2, r3
 800140e:	3304      	adds	r3, #4
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	1dfa      	adds	r2, r7, #7
 8001414:	7812      	ldrb	r2, [r2, #0]
 8001416:	0011      	movs	r1, r2
 8001418:	2203      	movs	r2, #3
 800141a:	400a      	ands	r2, r1
 800141c:	00d2      	lsls	r2, r2, #3
 800141e:	21ff      	movs	r1, #255	; 0xff
 8001420:	4091      	lsls	r1, r2
 8001422:	000a      	movs	r2, r1
 8001424:	43d2      	mvns	r2, r2
 8001426:	401a      	ands	r2, r3
 8001428:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	019b      	lsls	r3, r3, #6
 800142e:	22ff      	movs	r2, #255	; 0xff
 8001430:	401a      	ands	r2, r3
 8001432:	1dfb      	adds	r3, r7, #7
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	0018      	movs	r0, r3
 8001438:	2303      	movs	r3, #3
 800143a:	4003      	ands	r3, r0
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001440:	4809      	ldr	r0, [pc, #36]	; (8001468 <__NVIC_SetPriority+0xd8>)
 8001442:	1dfb      	adds	r3, r7, #7
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	001c      	movs	r4, r3
 8001448:	230f      	movs	r3, #15
 800144a:	4023      	ands	r3, r4
 800144c:	3b08      	subs	r3, #8
 800144e:	089b      	lsrs	r3, r3, #2
 8001450:	430a      	orrs	r2, r1
 8001452:	3306      	adds	r3, #6
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	18c3      	adds	r3, r0, r3
 8001458:	3304      	adds	r3, #4
 800145a:	601a      	str	r2, [r3, #0]
}
 800145c:	46c0      	nop			; (mov r8, r8)
 800145e:	46bd      	mov	sp, r7
 8001460:	b003      	add	sp, #12
 8001462:	bd90      	pop	{r4, r7, pc}
 8001464:	e000e100 	.word	0xe000e100
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	1e5a      	subs	r2, r3, #1
 8001478:	2380      	movs	r3, #128	; 0x80
 800147a:	045b      	lsls	r3, r3, #17
 800147c:	429a      	cmp	r2, r3
 800147e:	d301      	bcc.n	8001484 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001480:	2301      	movs	r3, #1
 8001482:	e010      	b.n	80014a6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001484:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <SysTick_Config+0x44>)
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	3a01      	subs	r2, #1
 800148a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800148c:	2301      	movs	r3, #1
 800148e:	425b      	negs	r3, r3
 8001490:	2103      	movs	r1, #3
 8001492:	0018      	movs	r0, r3
 8001494:	f7ff ff7c 	bl	8001390 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001498:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <SysTick_Config+0x44>)
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800149e:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <SysTick_Config+0x44>)
 80014a0:	2207      	movs	r2, #7
 80014a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	0018      	movs	r0, r3
 80014a8:	46bd      	mov	sp, r7
 80014aa:	b002      	add	sp, #8
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	46c0      	nop			; (mov r8, r8)
 80014b0:	e000e010 	.word	0xe000e010

080014b4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60b9      	str	r1, [r7, #8]
 80014bc:	607a      	str	r2, [r7, #4]
 80014be:	210f      	movs	r1, #15
 80014c0:	187b      	adds	r3, r7, r1
 80014c2:	1c02      	adds	r2, r0, #0
 80014c4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80014c6:	68ba      	ldr	r2, [r7, #8]
 80014c8:	187b      	adds	r3, r7, r1
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	b25b      	sxtb	r3, r3
 80014ce:	0011      	movs	r1, r2
 80014d0:	0018      	movs	r0, r3
 80014d2:	f7ff ff5d 	bl	8001390 <__NVIC_SetPriority>
}
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	46bd      	mov	sp, r7
 80014da:	b004      	add	sp, #16
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	0002      	movs	r2, r0
 80014e6:	1dfb      	adds	r3, r7, #7
 80014e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014ea:	1dfb      	adds	r3, r7, #7
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	b25b      	sxtb	r3, r3
 80014f0:	0018      	movs	r0, r3
 80014f2:	f7ff ff33 	bl	800135c <__NVIC_EnableIRQ>
}
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	46bd      	mov	sp, r7
 80014fa:	b002      	add	sp, #8
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	0018      	movs	r0, r3
 800150a:	f7ff ffaf 	bl	800146c <SysTick_Config>
 800150e:	0003      	movs	r3, r0
}
 8001510:	0018      	movs	r0, r3
 8001512:	46bd      	mov	sp, r7
 8001514:	b002      	add	sp, #8
 8001516:	bd80      	pop	{r7, pc}

08001518 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e077      	b.n	800161a <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a3d      	ldr	r2, [pc, #244]	; (8001624 <HAL_DMA_Init+0x10c>)
 8001530:	4694      	mov	ip, r2
 8001532:	4463      	add	r3, ip
 8001534:	2114      	movs	r1, #20
 8001536:	0018      	movs	r0, r3
 8001538:	f7fe fdf6 	bl	8000128 <__udivsi3>
 800153c:	0003      	movs	r3, r0
 800153e:	009a      	lsls	r2, r3, #2
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2225      	movs	r2, #37	; 0x25
 8001548:	2102      	movs	r1, #2
 800154a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4934      	ldr	r1, [pc, #208]	; (8001628 <HAL_DMA_Init+0x110>)
 8001558:	400a      	ands	r2, r1
 800155a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6819      	ldr	r1, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689a      	ldr	r2, [r3, #8]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	431a      	orrs	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	691b      	ldr	r3, [r3, #16]
 8001570:	431a      	orrs	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	431a      	orrs	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	431a      	orrs	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	431a      	orrs	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a1b      	ldr	r3, [r3, #32]
 8001588:	431a      	orrs	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	430a      	orrs	r2, r1
 8001590:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	0018      	movs	r0, r3
 8001596:	f000 fa8d 	bl	8001ab4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	689a      	ldr	r2, [r3, #8]
 800159e:	2380      	movs	r3, #128	; 0x80
 80015a0:	01db      	lsls	r3, r3, #7
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d102      	bne.n	80015ac <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685a      	ldr	r2, [r3, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b4:	213f      	movs	r1, #63	; 0x3f
 80015b6:	400a      	ands	r2, r1
 80015b8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80015c2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d011      	beq.n	80015f0 <HAL_DMA_Init+0xd8>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	2b04      	cmp	r3, #4
 80015d2:	d80d      	bhi.n	80015f0 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	0018      	movs	r0, r3
 80015d8:	f000 fa98 	bl	8001b0c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	e008      	b.n	8001602 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2225      	movs	r2, #37	; 0x25
 800160c:	2101      	movs	r1, #1
 800160e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2224      	movs	r2, #36	; 0x24
 8001614:	2100      	movs	r1, #0
 8001616:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	0018      	movs	r0, r3
 800161c:	46bd      	mov	sp, r7
 800161e:	b002      	add	sp, #8
 8001620:	bd80      	pop	{r7, pc}
 8001622:	46c0      	nop			; (mov r8, r8)
 8001624:	bffdfff8 	.word	0xbffdfff8
 8001628:	ffff800f 	.word	0xffff800f

0800162c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
 8001638:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800163a:	2317      	movs	r3, #23
 800163c:	18fb      	adds	r3, r7, r3
 800163e:	2200      	movs	r2, #0
 8001640:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2224      	movs	r2, #36	; 0x24
 8001646:	5c9b      	ldrb	r3, [r3, r2]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d101      	bne.n	8001650 <HAL_DMA_Start_IT+0x24>
 800164c:	2302      	movs	r3, #2
 800164e:	e06f      	b.n	8001730 <HAL_DMA_Start_IT+0x104>
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2224      	movs	r2, #36	; 0x24
 8001654:	2101      	movs	r1, #1
 8001656:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2225      	movs	r2, #37	; 0x25
 800165c:	5c9b      	ldrb	r3, [r3, r2]
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b01      	cmp	r3, #1
 8001662:	d157      	bne.n	8001714 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2225      	movs	r2, #37	; 0x25
 8001668:	2102      	movs	r1, #2
 800166a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2200      	movs	r2, #0
 8001670:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2101      	movs	r1, #1
 800167e:	438a      	bics	r2, r1
 8001680:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	68b9      	ldr	r1, [r7, #8]
 8001688:	68f8      	ldr	r0, [r7, #12]
 800168a:	f000 f9d3 	bl	8001a34 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	2b00      	cmp	r3, #0
 8001694:	d008      	beq.n	80016a8 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	210e      	movs	r1, #14
 80016a2:	430a      	orrs	r2, r1
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	e00f      	b.n	80016c8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2104      	movs	r1, #4
 80016b4:	438a      	bics	r2, r1
 80016b6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	210a      	movs	r1, #10
 80016c4:	430a      	orrs	r2, r1
 80016c6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	2380      	movs	r3, #128	; 0x80
 80016d0:	025b      	lsls	r3, r3, #9
 80016d2:	4013      	ands	r3, r2
 80016d4:	d008      	beq.n	80016e8 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e0:	2180      	movs	r1, #128	; 0x80
 80016e2:	0049      	lsls	r1, r1, #1
 80016e4:	430a      	orrs	r2, r1
 80016e6:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d008      	beq.n	8001702 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016fa:	2180      	movs	r1, #128	; 0x80
 80016fc:	0049      	lsls	r1, r1, #1
 80016fe:	430a      	orrs	r2, r1
 8001700:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2101      	movs	r1, #1
 800170e:	430a      	orrs	r2, r1
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	e00a      	b.n	800172a <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2280      	movs	r2, #128	; 0x80
 8001718:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2224      	movs	r2, #36	; 0x24
 800171e:	2100      	movs	r1, #0
 8001720:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8001722:	2317      	movs	r3, #23
 8001724:	18fb      	adds	r3, r7, r3
 8001726:	2201      	movs	r2, #1
 8001728:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800172a:	2317      	movs	r3, #23
 800172c:	18fb      	adds	r3, r7, r3
 800172e:	781b      	ldrb	r3, [r3, #0]
}
 8001730:	0018      	movs	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	b006      	add	sp, #24
 8001736:	bd80      	pop	{r7, pc}

08001738 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d101      	bne.n	800174a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e050      	b.n	80017ec <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2225      	movs	r2, #37	; 0x25
 800174e:	5c9b      	ldrb	r3, [r3, r2]
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d008      	beq.n	8001768 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2204      	movs	r2, #4
 800175a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2224      	movs	r2, #36	; 0x24
 8001760:	2100      	movs	r1, #0
 8001762:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e041      	b.n	80017ec <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	210e      	movs	r1, #14
 8001774:	438a      	bics	r2, r1
 8001776:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001782:	491c      	ldr	r1, [pc, #112]	; (80017f4 <HAL_DMA_Abort+0xbc>)
 8001784:	400a      	ands	r2, r1
 8001786:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2101      	movs	r1, #1
 8001794:	438a      	bics	r2, r1
 8001796:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8001798:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <HAL_DMA_Abort+0xc0>)
 800179a:	6859      	ldr	r1, [r3, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a0:	221c      	movs	r2, #28
 80017a2:	4013      	ands	r3, r2
 80017a4:	2201      	movs	r2, #1
 80017a6:	409a      	lsls	r2, r3
 80017a8:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <HAL_DMA_Abort+0xc0>)
 80017aa:	430a      	orrs	r2, r1
 80017ac:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80017b6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d00c      	beq.n	80017da <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017ca:	490a      	ldr	r1, [pc, #40]	; (80017f4 <HAL_DMA_Abort+0xbc>)
 80017cc:	400a      	ands	r2, r1
 80017ce:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80017d8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2225      	movs	r2, #37	; 0x25
 80017de:	2101      	movs	r1, #1
 80017e0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2224      	movs	r2, #36	; 0x24
 80017e6:	2100      	movs	r1, #0
 80017e8:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	0018      	movs	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	b002      	add	sp, #8
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	fffffeff 	.word	0xfffffeff
 80017f8:	40020000 	.word	0x40020000

080017fc <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001804:	210f      	movs	r1, #15
 8001806:	187b      	adds	r3, r7, r1
 8001808:	2200      	movs	r2, #0
 800180a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2225      	movs	r2, #37	; 0x25
 8001810:	5c9b      	ldrb	r3, [r3, r2]
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d006      	beq.n	8001826 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2204      	movs	r2, #4
 800181c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800181e:	187b      	adds	r3, r7, r1
 8001820:	2201      	movs	r2, #1
 8001822:	701a      	strb	r2, [r3, #0]
 8001824:	e049      	b.n	80018ba <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	210e      	movs	r1, #14
 8001832:	438a      	bics	r2, r1
 8001834:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2101      	movs	r1, #1
 8001842:	438a      	bics	r2, r1
 8001844:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001850:	491d      	ldr	r1, [pc, #116]	; (80018c8 <HAL_DMA_Abort_IT+0xcc>)
 8001852:	400a      	ands	r2, r1
 8001854:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001856:	4b1d      	ldr	r3, [pc, #116]	; (80018cc <HAL_DMA_Abort_IT+0xd0>)
 8001858:	6859      	ldr	r1, [r3, #4]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	221c      	movs	r2, #28
 8001860:	4013      	ands	r3, r2
 8001862:	2201      	movs	r2, #1
 8001864:	409a      	lsls	r2, r3
 8001866:	4b19      	ldr	r3, [pc, #100]	; (80018cc <HAL_DMA_Abort_IT+0xd0>)
 8001868:	430a      	orrs	r2, r1
 800186a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001874:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800187a:	2b00      	cmp	r3, #0
 800187c:	d00c      	beq.n	8001898 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001888:	490f      	ldr	r1, [pc, #60]	; (80018c8 <HAL_DMA_Abort_IT+0xcc>)
 800188a:	400a      	ands	r2, r1
 800188c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001896:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2225      	movs	r2, #37	; 0x25
 800189c:	2101      	movs	r1, #1
 800189e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2224      	movs	r2, #36	; 0x24
 80018a4:	2100      	movs	r1, #0
 80018a6:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d004      	beq.n	80018ba <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	0010      	movs	r0, r2
 80018b8:	4798      	blx	r3
    }
  }
  return status;
 80018ba:	230f      	movs	r3, #15
 80018bc:	18fb      	adds	r3, r7, r3
 80018be:	781b      	ldrb	r3, [r3, #0]
}
 80018c0:	0018      	movs	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	b004      	add	sp, #16
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	fffffeff 	.word	0xfffffeff
 80018cc:	40020000 	.word	0x40020000

080018d0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80018d8:	4b55      	ldr	r3, [pc, #340]	; (8001a30 <HAL_DMA_IRQHandler+0x160>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	221c      	movs	r2, #28
 80018ec:	4013      	ands	r3, r2
 80018ee:	2204      	movs	r2, #4
 80018f0:	409a      	lsls	r2, r3
 80018f2:	0013      	movs	r3, r2
 80018f4:	68fa      	ldr	r2, [r7, #12]
 80018f6:	4013      	ands	r3, r2
 80018f8:	d027      	beq.n	800194a <HAL_DMA_IRQHandler+0x7a>
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	2204      	movs	r2, #4
 80018fe:	4013      	ands	r3, r2
 8001900:	d023      	beq.n	800194a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2220      	movs	r2, #32
 800190a:	4013      	ands	r3, r2
 800190c:	d107      	bne.n	800191e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2104      	movs	r1, #4
 800191a:	438a      	bics	r2, r1
 800191c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800191e:	4b44      	ldr	r3, [pc, #272]	; (8001a30 <HAL_DMA_IRQHandler+0x160>)
 8001920:	6859      	ldr	r1, [r3, #4]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	221c      	movs	r2, #28
 8001928:	4013      	ands	r3, r2
 800192a:	2204      	movs	r2, #4
 800192c:	409a      	lsls	r2, r3
 800192e:	4b40      	ldr	r3, [pc, #256]	; (8001a30 <HAL_DMA_IRQHandler+0x160>)
 8001930:	430a      	orrs	r2, r1
 8001932:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001938:	2b00      	cmp	r3, #0
 800193a:	d100      	bne.n	800193e <HAL_DMA_IRQHandler+0x6e>
 800193c:	e073      	b.n	8001a26 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	0010      	movs	r0, r2
 8001946:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001948:	e06d      	b.n	8001a26 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	221c      	movs	r2, #28
 8001950:	4013      	ands	r3, r2
 8001952:	2202      	movs	r2, #2
 8001954:	409a      	lsls	r2, r3
 8001956:	0013      	movs	r3, r2
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	4013      	ands	r3, r2
 800195c:	d02e      	beq.n	80019bc <HAL_DMA_IRQHandler+0xec>
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	2202      	movs	r2, #2
 8001962:	4013      	ands	r3, r2
 8001964:	d02a      	beq.n	80019bc <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2220      	movs	r2, #32
 800196e:	4013      	ands	r3, r2
 8001970:	d10b      	bne.n	800198a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	210a      	movs	r1, #10
 800197e:	438a      	bics	r2, r1
 8001980:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2225      	movs	r2, #37	; 0x25
 8001986:	2101      	movs	r1, #1
 8001988:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800198a:	4b29      	ldr	r3, [pc, #164]	; (8001a30 <HAL_DMA_IRQHandler+0x160>)
 800198c:	6859      	ldr	r1, [r3, #4]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	221c      	movs	r2, #28
 8001994:	4013      	ands	r3, r2
 8001996:	2202      	movs	r2, #2
 8001998:	409a      	lsls	r2, r3
 800199a:	4b25      	ldr	r3, [pc, #148]	; (8001a30 <HAL_DMA_IRQHandler+0x160>)
 800199c:	430a      	orrs	r2, r1
 800199e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2224      	movs	r2, #36	; 0x24
 80019a4:	2100      	movs	r1, #0
 80019a6:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d03a      	beq.n	8001a26 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	0010      	movs	r0, r2
 80019b8:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80019ba:	e034      	b.n	8001a26 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	221c      	movs	r2, #28
 80019c2:	4013      	ands	r3, r2
 80019c4:	2208      	movs	r2, #8
 80019c6:	409a      	lsls	r2, r3
 80019c8:	0013      	movs	r3, r2
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	4013      	ands	r3, r2
 80019ce:	d02b      	beq.n	8001a28 <HAL_DMA_IRQHandler+0x158>
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	2208      	movs	r2, #8
 80019d4:	4013      	ands	r3, r2
 80019d6:	d027      	beq.n	8001a28 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	210e      	movs	r1, #14
 80019e4:	438a      	bics	r2, r1
 80019e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80019e8:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <HAL_DMA_IRQHandler+0x160>)
 80019ea:	6859      	ldr	r1, [r3, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f0:	221c      	movs	r2, #28
 80019f2:	4013      	ands	r3, r2
 80019f4:	2201      	movs	r2, #1
 80019f6:	409a      	lsls	r2, r3
 80019f8:	4b0d      	ldr	r3, [pc, #52]	; (8001a30 <HAL_DMA_IRQHandler+0x160>)
 80019fa:	430a      	orrs	r2, r1
 80019fc:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2201      	movs	r2, #1
 8001a02:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2225      	movs	r2, #37	; 0x25
 8001a08:	2101      	movs	r1, #1
 8001a0a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2224      	movs	r2, #36	; 0x24
 8001a10:	2100      	movs	r1, #0
 8001a12:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d005      	beq.n	8001a28 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	0010      	movs	r0, r2
 8001a24:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001a26:	46c0      	nop			; (mov r8, r8)
 8001a28:	46c0      	nop			; (mov r8, r8)
}
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	b004      	add	sp, #16
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40020000 	.word	0x40020000

08001a34 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
 8001a40:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001a4a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d004      	beq.n	8001a5e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001a5c:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001a5e:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <DMA_SetConfig+0x7c>)
 8001a60:	6859      	ldr	r1, [r3, #4]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	221c      	movs	r2, #28
 8001a68:	4013      	ands	r3, r2
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	409a      	lsls	r2, r3
 8001a6e:	4b10      	ldr	r3, [pc, #64]	; (8001ab0 <DMA_SetConfig+0x7c>)
 8001a70:	430a      	orrs	r2, r1
 8001a72:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	2b10      	cmp	r3, #16
 8001a82:	d108      	bne.n	8001a96 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	68ba      	ldr	r2, [r7, #8]
 8001a92:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001a94:	e007      	b.n	8001aa6 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68ba      	ldr	r2, [r7, #8]
 8001a9c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	60da      	str	r2, [r3, #12]
}
 8001aa6:	46c0      	nop			; (mov r8, r8)
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	b004      	add	sp, #16
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	46c0      	nop			; (mov r8, r8)
 8001ab0:	40020000 	.word	0x40020000

08001ab4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac0:	089b      	lsrs	r3, r3, #2
 8001ac2:	4a10      	ldr	r2, [pc, #64]	; (8001b04 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001ac4:	4694      	mov	ip, r2
 8001ac6:	4463      	add	r3, ip
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	001a      	movs	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	001a      	movs	r2, r3
 8001ad6:	23ff      	movs	r3, #255	; 0xff
 8001ad8:	4013      	ands	r3, r2
 8001ada:	3b08      	subs	r3, #8
 8001adc:	2114      	movs	r1, #20
 8001ade:	0018      	movs	r0, r3
 8001ae0:	f7fe fb22 	bl	8000128 <__udivsi3>
 8001ae4:	0003      	movs	r3, r0
 8001ae6:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4a07      	ldr	r2, [pc, #28]	; (8001b08 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001aec:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	221f      	movs	r2, #31
 8001af2:	4013      	ands	r3, r2
 8001af4:	2201      	movs	r2, #1
 8001af6:	409a      	lsls	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001afc:	46c0      	nop			; (mov r8, r8)
 8001afe:	46bd      	mov	sp, r7
 8001b00:	b004      	add	sp, #16
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	10008200 	.word	0x10008200
 8001b08:	40020880 	.word	0x40020880

08001b0c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	223f      	movs	r2, #63	; 0x3f
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	4a0a      	ldr	r2, [pc, #40]	; (8001b4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001b22:	4694      	mov	ip, r2
 8001b24:	4463      	add	r3, ip
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	001a      	movs	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a07      	ldr	r2, [pc, #28]	; (8001b50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001b32:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	2203      	movs	r2, #3
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	409a      	lsls	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001b44:	46c0      	nop			; (mov r8, r8)
 8001b46:	46bd      	mov	sp, r7
 8001b48:	b004      	add	sp, #16
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	1000823f 	.word	0x1000823f
 8001b50:	40020940 	.word	0x40020940

08001b54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b62:	e147      	b.n	8001df4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2101      	movs	r1, #1
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	4091      	lsls	r1, r2
 8001b6e:	000a      	movs	r2, r1
 8001b70:	4013      	ands	r3, r2
 8001b72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d100      	bne.n	8001b7c <HAL_GPIO_Init+0x28>
 8001b7a:	e138      	b.n	8001dee <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	2203      	movs	r2, #3
 8001b82:	4013      	ands	r3, r2
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d005      	beq.n	8001b94 <HAL_GPIO_Init+0x40>
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2203      	movs	r2, #3
 8001b8e:	4013      	ands	r3, r2
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d130      	bne.n	8001bf6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	2203      	movs	r2, #3
 8001ba0:	409a      	lsls	r2, r3
 8001ba2:	0013      	movs	r3, r2
 8001ba4:	43da      	mvns	r2, r3
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	68da      	ldr	r2, [r3, #12]
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	409a      	lsls	r2, r3
 8001bb6:	0013      	movs	r3, r2
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bca:	2201      	movs	r2, #1
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	409a      	lsls	r2, r3
 8001bd0:	0013      	movs	r3, r2
 8001bd2:	43da      	mvns	r2, r3
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	091b      	lsrs	r3, r3, #4
 8001be0:	2201      	movs	r2, #1
 8001be2:	401a      	ands	r2, r3
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	409a      	lsls	r2, r3
 8001be8:	0013      	movs	r3, r2
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2203      	movs	r2, #3
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	2b03      	cmp	r3, #3
 8001c00:	d017      	beq.n	8001c32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	2203      	movs	r2, #3
 8001c0e:	409a      	lsls	r2, r3
 8001c10:	0013      	movs	r3, r2
 8001c12:	43da      	mvns	r2, r3
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	4013      	ands	r3, r2
 8001c18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	689a      	ldr	r2, [r3, #8]
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	409a      	lsls	r2, r3
 8001c24:	0013      	movs	r3, r2
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2203      	movs	r2, #3
 8001c38:	4013      	ands	r3, r2
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d123      	bne.n	8001c86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	08da      	lsrs	r2, r3, #3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	3208      	adds	r2, #8
 8001c46:	0092      	lsls	r2, r2, #2
 8001c48:	58d3      	ldr	r3, [r2, r3]
 8001c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	2207      	movs	r2, #7
 8001c50:	4013      	ands	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	220f      	movs	r2, #15
 8001c56:	409a      	lsls	r2, r3
 8001c58:	0013      	movs	r3, r2
 8001c5a:	43da      	mvns	r2, r3
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	691a      	ldr	r2, [r3, #16]
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	2107      	movs	r1, #7
 8001c6a:	400b      	ands	r3, r1
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	409a      	lsls	r2, r3
 8001c70:	0013      	movs	r3, r2
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	08da      	lsrs	r2, r3, #3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3208      	adds	r2, #8
 8001c80:	0092      	lsls	r2, r2, #2
 8001c82:	6939      	ldr	r1, [r7, #16]
 8001c84:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	2203      	movs	r2, #3
 8001c92:	409a      	lsls	r2, r3
 8001c94:	0013      	movs	r3, r2
 8001c96:	43da      	mvns	r2, r3
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2203      	movs	r2, #3
 8001ca4:	401a      	ands	r2, r3
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	409a      	lsls	r2, r3
 8001cac:	0013      	movs	r3, r2
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	23c0      	movs	r3, #192	; 0xc0
 8001cc0:	029b      	lsls	r3, r3, #10
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d100      	bne.n	8001cc8 <HAL_GPIO_Init+0x174>
 8001cc6:	e092      	b.n	8001dee <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001cc8:	4a50      	ldr	r2, [pc, #320]	; (8001e0c <HAL_GPIO_Init+0x2b8>)
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	089b      	lsrs	r3, r3, #2
 8001cce:	3318      	adds	r3, #24
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	589b      	ldr	r3, [r3, r2]
 8001cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	2203      	movs	r2, #3
 8001cda:	4013      	ands	r3, r2
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	220f      	movs	r2, #15
 8001ce0:	409a      	lsls	r2, r3
 8001ce2:	0013      	movs	r3, r2
 8001ce4:	43da      	mvns	r2, r3
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	23a0      	movs	r3, #160	; 0xa0
 8001cf0:	05db      	lsls	r3, r3, #23
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d013      	beq.n	8001d1e <HAL_GPIO_Init+0x1ca>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a45      	ldr	r2, [pc, #276]	; (8001e10 <HAL_GPIO_Init+0x2bc>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d00d      	beq.n	8001d1a <HAL_GPIO_Init+0x1c6>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a44      	ldr	r2, [pc, #272]	; (8001e14 <HAL_GPIO_Init+0x2c0>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d007      	beq.n	8001d16 <HAL_GPIO_Init+0x1c2>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a43      	ldr	r2, [pc, #268]	; (8001e18 <HAL_GPIO_Init+0x2c4>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d101      	bne.n	8001d12 <HAL_GPIO_Init+0x1be>
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e006      	b.n	8001d20 <HAL_GPIO_Init+0x1cc>
 8001d12:	2305      	movs	r3, #5
 8001d14:	e004      	b.n	8001d20 <HAL_GPIO_Init+0x1cc>
 8001d16:	2302      	movs	r3, #2
 8001d18:	e002      	b.n	8001d20 <HAL_GPIO_Init+0x1cc>
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e000      	b.n	8001d20 <HAL_GPIO_Init+0x1cc>
 8001d1e:	2300      	movs	r3, #0
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	2103      	movs	r1, #3
 8001d24:	400a      	ands	r2, r1
 8001d26:	00d2      	lsls	r2, r2, #3
 8001d28:	4093      	lsls	r3, r2
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001d30:	4936      	ldr	r1, [pc, #216]	; (8001e0c <HAL_GPIO_Init+0x2b8>)
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	089b      	lsrs	r3, r3, #2
 8001d36:	3318      	adds	r3, #24
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d3e:	4b33      	ldr	r3, [pc, #204]	; (8001e0c <HAL_GPIO_Init+0x2b8>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	43da      	mvns	r2, r3
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	2380      	movs	r3, #128	; 0x80
 8001d54:	035b      	lsls	r3, r3, #13
 8001d56:	4013      	ands	r3, r2
 8001d58:	d003      	beq.n	8001d62 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d62:	4b2a      	ldr	r3, [pc, #168]	; (8001e0c <HAL_GPIO_Init+0x2b8>)
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001d68:	4b28      	ldr	r3, [pc, #160]	; (8001e0c <HAL_GPIO_Init+0x2b8>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	43da      	mvns	r2, r3
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	4013      	ands	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685a      	ldr	r2, [r3, #4]
 8001d7c:	2380      	movs	r3, #128	; 0x80
 8001d7e:	039b      	lsls	r3, r3, #14
 8001d80:	4013      	ands	r3, r2
 8001d82:	d003      	beq.n	8001d8c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d8c:	4b1f      	ldr	r3, [pc, #124]	; (8001e0c <HAL_GPIO_Init+0x2b8>)
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d92:	4a1e      	ldr	r2, [pc, #120]	; (8001e0c <HAL_GPIO_Init+0x2b8>)
 8001d94:	2384      	movs	r3, #132	; 0x84
 8001d96:	58d3      	ldr	r3, [r2, r3]
 8001d98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	43da      	mvns	r2, r3
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	4013      	ands	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685a      	ldr	r2, [r3, #4]
 8001da8:	2380      	movs	r3, #128	; 0x80
 8001daa:	029b      	lsls	r3, r3, #10
 8001dac:	4013      	ands	r3, r2
 8001dae:	d003      	beq.n	8001db8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001db8:	4914      	ldr	r1, [pc, #80]	; (8001e0c <HAL_GPIO_Init+0x2b8>)
 8001dba:	2284      	movs	r2, #132	; 0x84
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001dc0:	4a12      	ldr	r2, [pc, #72]	; (8001e0c <HAL_GPIO_Init+0x2b8>)
 8001dc2:	2380      	movs	r3, #128	; 0x80
 8001dc4:	58d3      	ldr	r3, [r2, r3]
 8001dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	43da      	mvns	r2, r3
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	2380      	movs	r3, #128	; 0x80
 8001dd8:	025b      	lsls	r3, r3, #9
 8001dda:	4013      	ands	r3, r2
 8001ddc:	d003      	beq.n	8001de6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001de6:	4909      	ldr	r1, [pc, #36]	; (8001e0c <HAL_GPIO_Init+0x2b8>)
 8001de8:	2280      	movs	r2, #128	; 0x80
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	3301      	adds	r3, #1
 8001df2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	40da      	lsrs	r2, r3
 8001dfc:	1e13      	subs	r3, r2, #0
 8001dfe:	d000      	beq.n	8001e02 <HAL_GPIO_Init+0x2ae>
 8001e00:	e6b0      	b.n	8001b64 <HAL_GPIO_Init+0x10>
  }
}
 8001e02:	46c0      	nop			; (mov r8, r8)
 8001e04:	46c0      	nop			; (mov r8, r8)
 8001e06:	46bd      	mov	sp, r7
 8001e08:	b006      	add	sp, #24
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40021800 	.word	0x40021800
 8001e10:	50000400 	.word	0x50000400
 8001e14:	50000800 	.word	0x50000800
 8001e18:	50000c00 	.word	0x50000c00

08001e1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	0008      	movs	r0, r1
 8001e26:	0011      	movs	r1, r2
 8001e28:	1cbb      	adds	r3, r7, #2
 8001e2a:	1c02      	adds	r2, r0, #0
 8001e2c:	801a      	strh	r2, [r3, #0]
 8001e2e:	1c7b      	adds	r3, r7, #1
 8001e30:	1c0a      	adds	r2, r1, #0
 8001e32:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e34:	1c7b      	adds	r3, r7, #1
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d004      	beq.n	8001e46 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e3c:	1cbb      	adds	r3, r7, #2
 8001e3e:	881a      	ldrh	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e44:	e003      	b.n	8001e4e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e46:	1cbb      	adds	r3, r7, #2
 8001e48:	881a      	ldrh	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e4e:	46c0      	nop			; (mov r8, r8)
 8001e50:	46bd      	mov	sp, r7
 8001e52:	b002      	add	sp, #8
 8001e54:	bd80      	pop	{r7, pc}
	...

08001e58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	0002      	movs	r2, r0
 8001e60:	1dbb      	adds	r3, r7, #6
 8001e62:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8001e64:	4b10      	ldr	r3, [pc, #64]	; (8001ea8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	1dba      	adds	r2, r7, #6
 8001e6a:	8812      	ldrh	r2, [r2, #0]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	d008      	beq.n	8001e82 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001e70:	4b0d      	ldr	r3, [pc, #52]	; (8001ea8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001e72:	1dba      	adds	r2, r7, #6
 8001e74:	8812      	ldrh	r2, [r2, #0]
 8001e76:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001e78:	1dbb      	adds	r3, r7, #6
 8001e7a:	881b      	ldrh	r3, [r3, #0]
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	f000 f815 	bl	8001eac <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8001e82:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	1dba      	adds	r2, r7, #6
 8001e88:	8812      	ldrh	r2, [r2, #0]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	d008      	beq.n	8001ea0 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001e8e:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001e90:	1dba      	adds	r2, r7, #6
 8001e92:	8812      	ldrh	r2, [r2, #0]
 8001e94:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001e96:	1dbb      	adds	r3, r7, #6
 8001e98:	881b      	ldrh	r3, [r3, #0]
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	f7fe ffc6 	bl	8000e2c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001ea0:	46c0      	nop			; (mov r8, r8)
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	b002      	add	sp, #8
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40021800 	.word	0x40021800

08001eac <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	0002      	movs	r2, r0
 8001eb4:	1dbb      	adds	r3, r7, #6
 8001eb6:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8001eb8:	46c0      	nop			; (mov r8, r8)
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	b002      	add	sp, #8
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ec4:	4b04      	ldr	r3, [pc, #16]	; (8001ed8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4b03      	ldr	r3, [pc, #12]	; (8001ed8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001eca:	2180      	movs	r1, #128	; 0x80
 8001ecc:	0049      	lsls	r1, r1, #1
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	601a      	str	r2, [r3, #0]
}
 8001ed2:	46c0      	nop			; (mov r8, r8)
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40007000 	.word	0x40007000

08001edc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001ee4:	4b19      	ldr	r3, [pc, #100]	; (8001f4c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a19      	ldr	r2, [pc, #100]	; (8001f50 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001eea:	4013      	ands	r3, r2
 8001eec:	0019      	movs	r1, r3
 8001eee:	4b17      	ldr	r3, [pc, #92]	; (8001f4c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	2380      	movs	r3, #128	; 0x80
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d11f      	bne.n	8001f40 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001f00:	4b14      	ldr	r3, [pc, #80]	; (8001f54 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	0013      	movs	r3, r2
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	189b      	adds	r3, r3, r2
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	4912      	ldr	r1, [pc, #72]	; (8001f58 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001f0e:	0018      	movs	r0, r3
 8001f10:	f7fe f90a 	bl	8000128 <__udivsi3>
 8001f14:	0003      	movs	r3, r0
 8001f16:	3301      	adds	r3, #1
 8001f18:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f1a:	e008      	b.n	8001f2e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	3b01      	subs	r3, #1
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	e001      	b.n	8001f2e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e009      	b.n	8001f42 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f2e:	4b07      	ldr	r3, [pc, #28]	; (8001f4c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001f30:	695a      	ldr	r2, [r3, #20]
 8001f32:	2380      	movs	r3, #128	; 0x80
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	401a      	ands	r2, r3
 8001f38:	2380      	movs	r3, #128	; 0x80
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d0ed      	beq.n	8001f1c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	0018      	movs	r0, r3
 8001f44:	46bd      	mov	sp, r7
 8001f46:	b004      	add	sp, #16
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	46c0      	nop			; (mov r8, r8)
 8001f4c:	40007000 	.word	0x40007000
 8001f50:	fffff9ff 	.word	0xfffff9ff
 8001f54:	20000000 	.word	0x20000000
 8001f58:	000f4240 	.word	0x000f4240

08001f5c <HAL_PWREx_EnterSHUTDOWNMode>:
  * @retval None

  * @retval None
  */
void HAL_PWREx_EnterSHUTDOWNMode(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* Set Shutdown mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_SHUTDOWN);
 8001f60:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2207      	movs	r2, #7
 8001f66:	4393      	bics	r3, r2
 8001f68:	001a      	movs	r2, r3
 8001f6a:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8001f6c:	2104      	movs	r1, #4
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001f72:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 8001f74:	691a      	ldr	r2, [r3, #16]
 8001f76:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 8001f78:	2104      	movs	r1, #4
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	611a      	str	r2, [r3, #16]
#if defined ( __CC_ARM)
  __force_stores();
#endif /* __CC_ARM */

  /* Request Wait For Interrupt */
  __WFI();
 8001f7e:	bf30      	wfi
}
 8001f80:	46c0      	nop			; (mov r8, r8)
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	46c0      	nop			; (mov r8, r8)
 8001f88:	40007000 	.word	0x40007000
 8001f8c:	e000ed00 	.word	0xe000ed00

08001f90 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001f94:	4b03      	ldr	r3, [pc, #12]	; (8001fa4 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	23e0      	movs	r3, #224	; 0xe0
 8001f9a:	01db      	lsls	r3, r3, #7
 8001f9c:	4013      	ands	r3, r2
}
 8001f9e:	0018      	movs	r0, r3
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40021000 	.word	0x40021000

08001fa8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b088      	sub	sp, #32
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e2fe      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d100      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x1e>
 8001fc4:	e07c      	b.n	80020c0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fc6:	4bc3      	ldr	r3, [pc, #780]	; (80022d4 <HAL_RCC_OscConfig+0x32c>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	2238      	movs	r2, #56	; 0x38
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fd0:	4bc0      	ldr	r3, [pc, #768]	; (80022d4 <HAL_RCC_OscConfig+0x32c>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	2203      	movs	r2, #3
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	2b10      	cmp	r3, #16
 8001fde:	d102      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x3e>
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	2b03      	cmp	r3, #3
 8001fe4:	d002      	beq.n	8001fec <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	2b08      	cmp	r3, #8
 8001fea:	d10b      	bne.n	8002004 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fec:	4bb9      	ldr	r3, [pc, #740]	; (80022d4 <HAL_RCC_OscConfig+0x32c>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	2380      	movs	r3, #128	; 0x80
 8001ff2:	029b      	lsls	r3, r3, #10
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d062      	beq.n	80020be <HAL_RCC_OscConfig+0x116>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d15e      	bne.n	80020be <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e2d9      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	2380      	movs	r3, #128	; 0x80
 800200a:	025b      	lsls	r3, r3, #9
 800200c:	429a      	cmp	r2, r3
 800200e:	d107      	bne.n	8002020 <HAL_RCC_OscConfig+0x78>
 8002010:	4bb0      	ldr	r3, [pc, #704]	; (80022d4 <HAL_RCC_OscConfig+0x32c>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	4baf      	ldr	r3, [pc, #700]	; (80022d4 <HAL_RCC_OscConfig+0x32c>)
 8002016:	2180      	movs	r1, #128	; 0x80
 8002018:	0249      	lsls	r1, r1, #9
 800201a:	430a      	orrs	r2, r1
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	e020      	b.n	8002062 <HAL_RCC_OscConfig+0xba>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	23a0      	movs	r3, #160	; 0xa0
 8002026:	02db      	lsls	r3, r3, #11
 8002028:	429a      	cmp	r2, r3
 800202a:	d10e      	bne.n	800204a <HAL_RCC_OscConfig+0xa2>
 800202c:	4ba9      	ldr	r3, [pc, #676]	; (80022d4 <HAL_RCC_OscConfig+0x32c>)
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	4ba8      	ldr	r3, [pc, #672]	; (80022d4 <HAL_RCC_OscConfig+0x32c>)
 8002032:	2180      	movs	r1, #128	; 0x80
 8002034:	02c9      	lsls	r1, r1, #11
 8002036:	430a      	orrs	r2, r1
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	4ba6      	ldr	r3, [pc, #664]	; (80022d4 <HAL_RCC_OscConfig+0x32c>)
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	4ba5      	ldr	r3, [pc, #660]	; (80022d4 <HAL_RCC_OscConfig+0x32c>)
 8002040:	2180      	movs	r1, #128	; 0x80
 8002042:	0249      	lsls	r1, r1, #9
 8002044:	430a      	orrs	r2, r1
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	e00b      	b.n	8002062 <HAL_RCC_OscConfig+0xba>
 800204a:	4ba2      	ldr	r3, [pc, #648]	; (80022d4 <HAL_RCC_OscConfig+0x32c>)
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	4ba1      	ldr	r3, [pc, #644]	; (80022d4 <HAL_RCC_OscConfig+0x32c>)
 8002050:	49a1      	ldr	r1, [pc, #644]	; (80022d8 <HAL_RCC_OscConfig+0x330>)
 8002052:	400a      	ands	r2, r1
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	4b9f      	ldr	r3, [pc, #636]	; (80022d4 <HAL_RCC_OscConfig+0x32c>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	4b9e      	ldr	r3, [pc, #632]	; (80022d4 <HAL_RCC_OscConfig+0x32c>)
 800205c:	499f      	ldr	r1, [pc, #636]	; (80022dc <HAL_RCC_OscConfig+0x334>)
 800205e:	400a      	ands	r2, r1
 8002060:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d014      	beq.n	8002094 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206a:	f7ff f949 	bl	8001300 <HAL_GetTick>
 800206e:	0003      	movs	r3, r0
 8002070:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002074:	f7ff f944 	bl	8001300 <HAL_GetTick>
 8002078:	0002      	movs	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b64      	cmp	r3, #100	; 0x64
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e298      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002086:	4b93      	ldr	r3, [pc, #588]	; (80022d4 <HAL_RCC_OscConfig+0x32c>)
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	2380      	movs	r3, #128	; 0x80
 800208c:	029b      	lsls	r3, r3, #10
 800208e:	4013      	ands	r3, r2
 8002090:	d0f0      	beq.n	8002074 <HAL_RCC_OscConfig+0xcc>
 8002092:	e015      	b.n	80020c0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002094:	f7ff f934 	bl	8001300 <HAL_GetTick>
 8002098:	0003      	movs	r3, r0
 800209a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800209c:	e008      	b.n	80020b0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800209e:	f7ff f92f 	bl	8001300 <HAL_GetTick>
 80020a2:	0002      	movs	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b64      	cmp	r3, #100	; 0x64
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e283      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020b0:	4b88      	ldr	r3, [pc, #544]	; (80022d4 <HAL_RCC_OscConfig+0x32c>)
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	2380      	movs	r3, #128	; 0x80
 80020b6:	029b      	lsls	r3, r3, #10
 80020b8:	4013      	ands	r3, r2
 80020ba:	d1f0      	bne.n	800209e <HAL_RCC_OscConfig+0xf6>
 80020bc:	e000      	b.n	80020c0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020be:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2202      	movs	r2, #2
 80020c6:	4013      	ands	r3, r2
 80020c8:	d100      	bne.n	80020cc <HAL_RCC_OscConfig+0x124>
 80020ca:	e099      	b.n	8002200 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020cc:	4b81      	ldr	r3, [pc, #516]	; (80022d4 <HAL_RCC_OscConfig+0x32c>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	2238      	movs	r2, #56	; 0x38
 80020d2:	4013      	ands	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020d6:	4b7f      	ldr	r3, [pc, #508]	; (80022d4 <HAL_RCC_OscConfig+0x32c>)
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	2203      	movs	r2, #3
 80020dc:	4013      	ands	r3, r2
 80020de:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	2b10      	cmp	r3, #16
 80020e4:	d102      	bne.n	80020ec <HAL_RCC_OscConfig+0x144>
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d002      	beq.n	80020f2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d135      	bne.n	800215e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020f2:	4b78      	ldr	r3, [pc, #480]	; (80022d4 <HAL_RCC_OscConfig+0x32c>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	2380      	movs	r3, #128	; 0x80
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	4013      	ands	r3, r2
 80020fc:	d005      	beq.n	800210a <HAL_RCC_OscConfig+0x162>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e256      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800210a:	4b72      	ldr	r3, [pc, #456]	; (80022d4 <HAL_RCC_OscConfig+0x32c>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	4a74      	ldr	r2, [pc, #464]	; (80022e0 <HAL_RCC_OscConfig+0x338>)
 8002110:	4013      	ands	r3, r2
 8002112:	0019      	movs	r1, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	021a      	lsls	r2, r3, #8
 800211a:	4b6e      	ldr	r3, [pc, #440]	; (80022d4 <HAL_RCC_OscConfig+0x32c>)
 800211c:	430a      	orrs	r2, r1
 800211e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d112      	bne.n	800214c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002126:	4b6b      	ldr	r3, [pc, #428]	; (80022d4 <HAL_RCC_OscConfig+0x32c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a6e      	ldr	r2, [pc, #440]	; (80022e4 <HAL_RCC_OscConfig+0x33c>)
 800212c:	4013      	ands	r3, r2
 800212e:	0019      	movs	r1, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	691a      	ldr	r2, [r3, #16]
 8002134:	4b67      	ldr	r3, [pc, #412]	; (80022d4 <HAL_RCC_OscConfig+0x32c>)
 8002136:	430a      	orrs	r2, r1
 8002138:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800213a:	4b66      	ldr	r3, [pc, #408]	; (80022d4 <HAL_RCC_OscConfig+0x32c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	0adb      	lsrs	r3, r3, #11
 8002140:	2207      	movs	r2, #7
 8002142:	4013      	ands	r3, r2
 8002144:	4a68      	ldr	r2, [pc, #416]	; (80022e8 <HAL_RCC_OscConfig+0x340>)
 8002146:	40da      	lsrs	r2, r3
 8002148:	4b68      	ldr	r3, [pc, #416]	; (80022ec <HAL_RCC_OscConfig+0x344>)
 800214a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800214c:	4b68      	ldr	r3, [pc, #416]	; (80022f0 <HAL_RCC_OscConfig+0x348>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	0018      	movs	r0, r3
 8002152:	f7ff f879 	bl	8001248 <HAL_InitTick>
 8002156:	1e03      	subs	r3, r0, #0
 8002158:	d051      	beq.n	80021fe <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e22c      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d030      	beq.n	80021c8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002166:	4b5b      	ldr	r3, [pc, #364]	; (80022d4 <HAL_RCC_OscConfig+0x32c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a5e      	ldr	r2, [pc, #376]	; (80022e4 <HAL_RCC_OscConfig+0x33c>)
 800216c:	4013      	ands	r3, r2
 800216e:	0019      	movs	r1, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	691a      	ldr	r2, [r3, #16]
 8002174:	4b57      	ldr	r3, [pc, #348]	; (80022d4 <HAL_RCC_OscConfig+0x32c>)
 8002176:	430a      	orrs	r2, r1
 8002178:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800217a:	4b56      	ldr	r3, [pc, #344]	; (80022d4 <HAL_RCC_OscConfig+0x32c>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	4b55      	ldr	r3, [pc, #340]	; (80022d4 <HAL_RCC_OscConfig+0x32c>)
 8002180:	2180      	movs	r1, #128	; 0x80
 8002182:	0049      	lsls	r1, r1, #1
 8002184:	430a      	orrs	r2, r1
 8002186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002188:	f7ff f8ba 	bl	8001300 <HAL_GetTick>
 800218c:	0003      	movs	r3, r0
 800218e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002192:	f7ff f8b5 	bl	8001300 <HAL_GetTick>
 8002196:	0002      	movs	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e209      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021a4:	4b4b      	ldr	r3, [pc, #300]	; (80022d4 <HAL_RCC_OscConfig+0x32c>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	2380      	movs	r3, #128	; 0x80
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	4013      	ands	r3, r2
 80021ae:	d0f0      	beq.n	8002192 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b0:	4b48      	ldr	r3, [pc, #288]	; (80022d4 <HAL_RCC_OscConfig+0x32c>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	4a4a      	ldr	r2, [pc, #296]	; (80022e0 <HAL_RCC_OscConfig+0x338>)
 80021b6:	4013      	ands	r3, r2
 80021b8:	0019      	movs	r1, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	021a      	lsls	r2, r3, #8
 80021c0:	4b44      	ldr	r3, [pc, #272]	; (80022d4 <HAL_RCC_OscConfig+0x32c>)
 80021c2:	430a      	orrs	r2, r1
 80021c4:	605a      	str	r2, [r3, #4]
 80021c6:	e01b      	b.n	8002200 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80021c8:	4b42      	ldr	r3, [pc, #264]	; (80022d4 <HAL_RCC_OscConfig+0x32c>)
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	4b41      	ldr	r3, [pc, #260]	; (80022d4 <HAL_RCC_OscConfig+0x32c>)
 80021ce:	4949      	ldr	r1, [pc, #292]	; (80022f4 <HAL_RCC_OscConfig+0x34c>)
 80021d0:	400a      	ands	r2, r1
 80021d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d4:	f7ff f894 	bl	8001300 <HAL_GetTick>
 80021d8:	0003      	movs	r3, r0
 80021da:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021dc:	e008      	b.n	80021f0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021de:	f7ff f88f 	bl	8001300 <HAL_GetTick>
 80021e2:	0002      	movs	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e1e3      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021f0:	4b38      	ldr	r3, [pc, #224]	; (80022d4 <HAL_RCC_OscConfig+0x32c>)
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	2380      	movs	r3, #128	; 0x80
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	4013      	ands	r3, r2
 80021fa:	d1f0      	bne.n	80021de <HAL_RCC_OscConfig+0x236>
 80021fc:	e000      	b.n	8002200 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021fe:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2208      	movs	r2, #8
 8002206:	4013      	ands	r3, r2
 8002208:	d047      	beq.n	800229a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800220a:	4b32      	ldr	r3, [pc, #200]	; (80022d4 <HAL_RCC_OscConfig+0x32c>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	2238      	movs	r2, #56	; 0x38
 8002210:	4013      	ands	r3, r2
 8002212:	2b18      	cmp	r3, #24
 8002214:	d10a      	bne.n	800222c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002216:	4b2f      	ldr	r3, [pc, #188]	; (80022d4 <HAL_RCC_OscConfig+0x32c>)
 8002218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800221a:	2202      	movs	r2, #2
 800221c:	4013      	ands	r3, r2
 800221e:	d03c      	beq.n	800229a <HAL_RCC_OscConfig+0x2f2>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d138      	bne.n	800229a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e1c5      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d019      	beq.n	8002268 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002234:	4b27      	ldr	r3, [pc, #156]	; (80022d4 <HAL_RCC_OscConfig+0x32c>)
 8002236:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002238:	4b26      	ldr	r3, [pc, #152]	; (80022d4 <HAL_RCC_OscConfig+0x32c>)
 800223a:	2101      	movs	r1, #1
 800223c:	430a      	orrs	r2, r1
 800223e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002240:	f7ff f85e 	bl	8001300 <HAL_GetTick>
 8002244:	0003      	movs	r3, r0
 8002246:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800224a:	f7ff f859 	bl	8001300 <HAL_GetTick>
 800224e:	0002      	movs	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e1ad      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800225c:	4b1d      	ldr	r3, [pc, #116]	; (80022d4 <HAL_RCC_OscConfig+0x32c>)
 800225e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002260:	2202      	movs	r2, #2
 8002262:	4013      	ands	r3, r2
 8002264:	d0f1      	beq.n	800224a <HAL_RCC_OscConfig+0x2a2>
 8002266:	e018      	b.n	800229a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002268:	4b1a      	ldr	r3, [pc, #104]	; (80022d4 <HAL_RCC_OscConfig+0x32c>)
 800226a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800226c:	4b19      	ldr	r3, [pc, #100]	; (80022d4 <HAL_RCC_OscConfig+0x32c>)
 800226e:	2101      	movs	r1, #1
 8002270:	438a      	bics	r2, r1
 8002272:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002274:	f7ff f844 	bl	8001300 <HAL_GetTick>
 8002278:	0003      	movs	r3, r0
 800227a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800227c:	e008      	b.n	8002290 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800227e:	f7ff f83f 	bl	8001300 <HAL_GetTick>
 8002282:	0002      	movs	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e193      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002290:	4b10      	ldr	r3, [pc, #64]	; (80022d4 <HAL_RCC_OscConfig+0x32c>)
 8002292:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002294:	2202      	movs	r2, #2
 8002296:	4013      	ands	r3, r2
 8002298:	d1f1      	bne.n	800227e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2204      	movs	r2, #4
 80022a0:	4013      	ands	r3, r2
 80022a2:	d100      	bne.n	80022a6 <HAL_RCC_OscConfig+0x2fe>
 80022a4:	e0c6      	b.n	8002434 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022a6:	231f      	movs	r3, #31
 80022a8:	18fb      	adds	r3, r7, r3
 80022aa:	2200      	movs	r2, #0
 80022ac:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80022ae:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <HAL_RCC_OscConfig+0x32c>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	2238      	movs	r2, #56	; 0x38
 80022b4:	4013      	ands	r3, r2
 80022b6:	2b20      	cmp	r3, #32
 80022b8:	d11e      	bne.n	80022f8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80022ba:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <HAL_RCC_OscConfig+0x32c>)
 80022bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022be:	2202      	movs	r2, #2
 80022c0:	4013      	ands	r3, r2
 80022c2:	d100      	bne.n	80022c6 <HAL_RCC_OscConfig+0x31e>
 80022c4:	e0b6      	b.n	8002434 <HAL_RCC_OscConfig+0x48c>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d000      	beq.n	80022d0 <HAL_RCC_OscConfig+0x328>
 80022ce:	e0b1      	b.n	8002434 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e171      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
 80022d4:	40021000 	.word	0x40021000
 80022d8:	fffeffff 	.word	0xfffeffff
 80022dc:	fffbffff 	.word	0xfffbffff
 80022e0:	ffff80ff 	.word	0xffff80ff
 80022e4:	ffffc7ff 	.word	0xffffc7ff
 80022e8:	00f42400 	.word	0x00f42400
 80022ec:	20000000 	.word	0x20000000
 80022f0:	20000004 	.word	0x20000004
 80022f4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022f8:	4bb1      	ldr	r3, [pc, #708]	; (80025c0 <HAL_RCC_OscConfig+0x618>)
 80022fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022fc:	2380      	movs	r3, #128	; 0x80
 80022fe:	055b      	lsls	r3, r3, #21
 8002300:	4013      	ands	r3, r2
 8002302:	d101      	bne.n	8002308 <HAL_RCC_OscConfig+0x360>
 8002304:	2301      	movs	r3, #1
 8002306:	e000      	b.n	800230a <HAL_RCC_OscConfig+0x362>
 8002308:	2300      	movs	r3, #0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d011      	beq.n	8002332 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800230e:	4bac      	ldr	r3, [pc, #688]	; (80025c0 <HAL_RCC_OscConfig+0x618>)
 8002310:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002312:	4bab      	ldr	r3, [pc, #684]	; (80025c0 <HAL_RCC_OscConfig+0x618>)
 8002314:	2180      	movs	r1, #128	; 0x80
 8002316:	0549      	lsls	r1, r1, #21
 8002318:	430a      	orrs	r2, r1
 800231a:	63da      	str	r2, [r3, #60]	; 0x3c
 800231c:	4ba8      	ldr	r3, [pc, #672]	; (80025c0 <HAL_RCC_OscConfig+0x618>)
 800231e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002320:	2380      	movs	r3, #128	; 0x80
 8002322:	055b      	lsls	r3, r3, #21
 8002324:	4013      	ands	r3, r2
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800232a:	231f      	movs	r3, #31
 800232c:	18fb      	adds	r3, r7, r3
 800232e:	2201      	movs	r2, #1
 8002330:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002332:	4ba4      	ldr	r3, [pc, #656]	; (80025c4 <HAL_RCC_OscConfig+0x61c>)
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	2380      	movs	r3, #128	; 0x80
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	4013      	ands	r3, r2
 800233c:	d11a      	bne.n	8002374 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800233e:	4ba1      	ldr	r3, [pc, #644]	; (80025c4 <HAL_RCC_OscConfig+0x61c>)
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	4ba0      	ldr	r3, [pc, #640]	; (80025c4 <HAL_RCC_OscConfig+0x61c>)
 8002344:	2180      	movs	r1, #128	; 0x80
 8002346:	0049      	lsls	r1, r1, #1
 8002348:	430a      	orrs	r2, r1
 800234a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800234c:	f7fe ffd8 	bl	8001300 <HAL_GetTick>
 8002350:	0003      	movs	r3, r0
 8002352:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002354:	e008      	b.n	8002368 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002356:	f7fe ffd3 	bl	8001300 <HAL_GetTick>
 800235a:	0002      	movs	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e127      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002368:	4b96      	ldr	r3, [pc, #600]	; (80025c4 <HAL_RCC_OscConfig+0x61c>)
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	2380      	movs	r3, #128	; 0x80
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	4013      	ands	r3, r2
 8002372:	d0f0      	beq.n	8002356 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d106      	bne.n	800238a <HAL_RCC_OscConfig+0x3e2>
 800237c:	4b90      	ldr	r3, [pc, #576]	; (80025c0 <HAL_RCC_OscConfig+0x618>)
 800237e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002380:	4b8f      	ldr	r3, [pc, #572]	; (80025c0 <HAL_RCC_OscConfig+0x618>)
 8002382:	2101      	movs	r1, #1
 8002384:	430a      	orrs	r2, r1
 8002386:	65da      	str	r2, [r3, #92]	; 0x5c
 8002388:	e01c      	b.n	80023c4 <HAL_RCC_OscConfig+0x41c>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	2b05      	cmp	r3, #5
 8002390:	d10c      	bne.n	80023ac <HAL_RCC_OscConfig+0x404>
 8002392:	4b8b      	ldr	r3, [pc, #556]	; (80025c0 <HAL_RCC_OscConfig+0x618>)
 8002394:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002396:	4b8a      	ldr	r3, [pc, #552]	; (80025c0 <HAL_RCC_OscConfig+0x618>)
 8002398:	2104      	movs	r1, #4
 800239a:	430a      	orrs	r2, r1
 800239c:	65da      	str	r2, [r3, #92]	; 0x5c
 800239e:	4b88      	ldr	r3, [pc, #544]	; (80025c0 <HAL_RCC_OscConfig+0x618>)
 80023a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80023a2:	4b87      	ldr	r3, [pc, #540]	; (80025c0 <HAL_RCC_OscConfig+0x618>)
 80023a4:	2101      	movs	r1, #1
 80023a6:	430a      	orrs	r2, r1
 80023a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80023aa:	e00b      	b.n	80023c4 <HAL_RCC_OscConfig+0x41c>
 80023ac:	4b84      	ldr	r3, [pc, #528]	; (80025c0 <HAL_RCC_OscConfig+0x618>)
 80023ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80023b0:	4b83      	ldr	r3, [pc, #524]	; (80025c0 <HAL_RCC_OscConfig+0x618>)
 80023b2:	2101      	movs	r1, #1
 80023b4:	438a      	bics	r2, r1
 80023b6:	65da      	str	r2, [r3, #92]	; 0x5c
 80023b8:	4b81      	ldr	r3, [pc, #516]	; (80025c0 <HAL_RCC_OscConfig+0x618>)
 80023ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80023bc:	4b80      	ldr	r3, [pc, #512]	; (80025c0 <HAL_RCC_OscConfig+0x618>)
 80023be:	2104      	movs	r1, #4
 80023c0:	438a      	bics	r2, r1
 80023c2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d014      	beq.n	80023f6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023cc:	f7fe ff98 	bl	8001300 <HAL_GetTick>
 80023d0:	0003      	movs	r3, r0
 80023d2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023d4:	e009      	b.n	80023ea <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023d6:	f7fe ff93 	bl	8001300 <HAL_GetTick>
 80023da:	0002      	movs	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	4a79      	ldr	r2, [pc, #484]	; (80025c8 <HAL_RCC_OscConfig+0x620>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e0e6      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023ea:	4b75      	ldr	r3, [pc, #468]	; (80025c0 <HAL_RCC_OscConfig+0x618>)
 80023ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ee:	2202      	movs	r2, #2
 80023f0:	4013      	ands	r3, r2
 80023f2:	d0f0      	beq.n	80023d6 <HAL_RCC_OscConfig+0x42e>
 80023f4:	e013      	b.n	800241e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f6:	f7fe ff83 	bl	8001300 <HAL_GetTick>
 80023fa:	0003      	movs	r3, r0
 80023fc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023fe:	e009      	b.n	8002414 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002400:	f7fe ff7e 	bl	8001300 <HAL_GetTick>
 8002404:	0002      	movs	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	4a6f      	ldr	r2, [pc, #444]	; (80025c8 <HAL_RCC_OscConfig+0x620>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e0d1      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002414:	4b6a      	ldr	r3, [pc, #424]	; (80025c0 <HAL_RCC_OscConfig+0x618>)
 8002416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002418:	2202      	movs	r2, #2
 800241a:	4013      	ands	r3, r2
 800241c:	d1f0      	bne.n	8002400 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800241e:	231f      	movs	r3, #31
 8002420:	18fb      	adds	r3, r7, r3
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d105      	bne.n	8002434 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002428:	4b65      	ldr	r3, [pc, #404]	; (80025c0 <HAL_RCC_OscConfig+0x618>)
 800242a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800242c:	4b64      	ldr	r3, [pc, #400]	; (80025c0 <HAL_RCC_OscConfig+0x618>)
 800242e:	4967      	ldr	r1, [pc, #412]	; (80025cc <HAL_RCC_OscConfig+0x624>)
 8002430:	400a      	ands	r2, r1
 8002432:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	69db      	ldr	r3, [r3, #28]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d100      	bne.n	800243e <HAL_RCC_OscConfig+0x496>
 800243c:	e0bb      	b.n	80025b6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800243e:	4b60      	ldr	r3, [pc, #384]	; (80025c0 <HAL_RCC_OscConfig+0x618>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	2238      	movs	r2, #56	; 0x38
 8002444:	4013      	ands	r3, r2
 8002446:	2b10      	cmp	r3, #16
 8002448:	d100      	bne.n	800244c <HAL_RCC_OscConfig+0x4a4>
 800244a:	e07b      	b.n	8002544 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	69db      	ldr	r3, [r3, #28]
 8002450:	2b02      	cmp	r3, #2
 8002452:	d156      	bne.n	8002502 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002454:	4b5a      	ldr	r3, [pc, #360]	; (80025c0 <HAL_RCC_OscConfig+0x618>)
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	4b59      	ldr	r3, [pc, #356]	; (80025c0 <HAL_RCC_OscConfig+0x618>)
 800245a:	495d      	ldr	r1, [pc, #372]	; (80025d0 <HAL_RCC_OscConfig+0x628>)
 800245c:	400a      	ands	r2, r1
 800245e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002460:	f7fe ff4e 	bl	8001300 <HAL_GetTick>
 8002464:	0003      	movs	r3, r0
 8002466:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800246a:	f7fe ff49 	bl	8001300 <HAL_GetTick>
 800246e:	0002      	movs	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e09d      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800247c:	4b50      	ldr	r3, [pc, #320]	; (80025c0 <HAL_RCC_OscConfig+0x618>)
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	2380      	movs	r3, #128	; 0x80
 8002482:	049b      	lsls	r3, r3, #18
 8002484:	4013      	ands	r3, r2
 8002486:	d1f0      	bne.n	800246a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002488:	4b4d      	ldr	r3, [pc, #308]	; (80025c0 <HAL_RCC_OscConfig+0x618>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	4a51      	ldr	r2, [pc, #324]	; (80025d4 <HAL_RCC_OscConfig+0x62c>)
 800248e:	4013      	ands	r3, r2
 8002490:	0019      	movs	r1, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a1a      	ldr	r2, [r3, #32]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	431a      	orrs	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a0:	021b      	lsls	r3, r3, #8
 80024a2:	431a      	orrs	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a8:	431a      	orrs	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	431a      	orrs	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b4:	431a      	orrs	r2, r3
 80024b6:	4b42      	ldr	r3, [pc, #264]	; (80025c0 <HAL_RCC_OscConfig+0x618>)
 80024b8:	430a      	orrs	r2, r1
 80024ba:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024bc:	4b40      	ldr	r3, [pc, #256]	; (80025c0 <HAL_RCC_OscConfig+0x618>)
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	4b3f      	ldr	r3, [pc, #252]	; (80025c0 <HAL_RCC_OscConfig+0x618>)
 80024c2:	2180      	movs	r1, #128	; 0x80
 80024c4:	0449      	lsls	r1, r1, #17
 80024c6:	430a      	orrs	r2, r1
 80024c8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80024ca:	4b3d      	ldr	r3, [pc, #244]	; (80025c0 <HAL_RCC_OscConfig+0x618>)
 80024cc:	68da      	ldr	r2, [r3, #12]
 80024ce:	4b3c      	ldr	r3, [pc, #240]	; (80025c0 <HAL_RCC_OscConfig+0x618>)
 80024d0:	2180      	movs	r1, #128	; 0x80
 80024d2:	0549      	lsls	r1, r1, #21
 80024d4:	430a      	orrs	r2, r1
 80024d6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d8:	f7fe ff12 	bl	8001300 <HAL_GetTick>
 80024dc:	0003      	movs	r3, r0
 80024de:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e2:	f7fe ff0d 	bl	8001300 <HAL_GetTick>
 80024e6:	0002      	movs	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e061      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024f4:	4b32      	ldr	r3, [pc, #200]	; (80025c0 <HAL_RCC_OscConfig+0x618>)
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	2380      	movs	r3, #128	; 0x80
 80024fa:	049b      	lsls	r3, r3, #18
 80024fc:	4013      	ands	r3, r2
 80024fe:	d0f0      	beq.n	80024e2 <HAL_RCC_OscConfig+0x53a>
 8002500:	e059      	b.n	80025b6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002502:	4b2f      	ldr	r3, [pc, #188]	; (80025c0 <HAL_RCC_OscConfig+0x618>)
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	4b2e      	ldr	r3, [pc, #184]	; (80025c0 <HAL_RCC_OscConfig+0x618>)
 8002508:	4931      	ldr	r1, [pc, #196]	; (80025d0 <HAL_RCC_OscConfig+0x628>)
 800250a:	400a      	ands	r2, r1
 800250c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250e:	f7fe fef7 	bl	8001300 <HAL_GetTick>
 8002512:	0003      	movs	r3, r0
 8002514:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002518:	f7fe fef2 	bl	8001300 <HAL_GetTick>
 800251c:	0002      	movs	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e046      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800252a:	4b25      	ldr	r3, [pc, #148]	; (80025c0 <HAL_RCC_OscConfig+0x618>)
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	2380      	movs	r3, #128	; 0x80
 8002530:	049b      	lsls	r3, r3, #18
 8002532:	4013      	ands	r3, r2
 8002534:	d1f0      	bne.n	8002518 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002536:	4b22      	ldr	r3, [pc, #136]	; (80025c0 <HAL_RCC_OscConfig+0x618>)
 8002538:	68da      	ldr	r2, [r3, #12]
 800253a:	4b21      	ldr	r3, [pc, #132]	; (80025c0 <HAL_RCC_OscConfig+0x618>)
 800253c:	4926      	ldr	r1, [pc, #152]	; (80025d8 <HAL_RCC_OscConfig+0x630>)
 800253e:	400a      	ands	r2, r1
 8002540:	60da      	str	r2, [r3, #12]
 8002542:	e038      	b.n	80025b6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d101      	bne.n	8002550 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e033      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002550:	4b1b      	ldr	r3, [pc, #108]	; (80025c0 <HAL_RCC_OscConfig+0x618>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	2203      	movs	r2, #3
 800255a:	401a      	ands	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a1b      	ldr	r3, [r3, #32]
 8002560:	429a      	cmp	r2, r3
 8002562:	d126      	bne.n	80025b2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	2270      	movs	r2, #112	; 0x70
 8002568:	401a      	ands	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800256e:	429a      	cmp	r2, r3
 8002570:	d11f      	bne.n	80025b2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	23fe      	movs	r3, #254	; 0xfe
 8002576:	01db      	lsls	r3, r3, #7
 8002578:	401a      	ands	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002580:	429a      	cmp	r2, r3
 8002582:	d116      	bne.n	80025b2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002584:	697a      	ldr	r2, [r7, #20]
 8002586:	23f8      	movs	r3, #248	; 0xf8
 8002588:	039b      	lsls	r3, r3, #14
 800258a:	401a      	ands	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002590:	429a      	cmp	r2, r3
 8002592:	d10e      	bne.n	80025b2 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	23e0      	movs	r3, #224	; 0xe0
 8002598:	051b      	lsls	r3, r3, #20
 800259a:	401a      	ands	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d106      	bne.n	80025b2 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	0f5b      	lsrs	r3, r3, #29
 80025a8:	075a      	lsls	r2, r3, #29
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d001      	beq.n	80025b6 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e000      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	0018      	movs	r0, r3
 80025ba:	46bd      	mov	sp, r7
 80025bc:	b008      	add	sp, #32
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40021000 	.word	0x40021000
 80025c4:	40007000 	.word	0x40007000
 80025c8:	00001388 	.word	0x00001388
 80025cc:	efffffff 	.word	0xefffffff
 80025d0:	feffffff 	.word	0xfeffffff
 80025d4:	11c1808c 	.word	0x11c1808c
 80025d8:	eefefffc 	.word	0xeefefffc

080025dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e0e9      	b.n	80027c4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025f0:	4b76      	ldr	r3, [pc, #472]	; (80027cc <HAL_RCC_ClockConfig+0x1f0>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2207      	movs	r2, #7
 80025f6:	4013      	ands	r3, r2
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d91e      	bls.n	800263c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025fe:	4b73      	ldr	r3, [pc, #460]	; (80027cc <HAL_RCC_ClockConfig+0x1f0>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2207      	movs	r2, #7
 8002604:	4393      	bics	r3, r2
 8002606:	0019      	movs	r1, r3
 8002608:	4b70      	ldr	r3, [pc, #448]	; (80027cc <HAL_RCC_ClockConfig+0x1f0>)
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	430a      	orrs	r2, r1
 800260e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002610:	f7fe fe76 	bl	8001300 <HAL_GetTick>
 8002614:	0003      	movs	r3, r0
 8002616:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002618:	e009      	b.n	800262e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800261a:	f7fe fe71 	bl	8001300 <HAL_GetTick>
 800261e:	0002      	movs	r2, r0
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	4a6a      	ldr	r2, [pc, #424]	; (80027d0 <HAL_RCC_ClockConfig+0x1f4>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d901      	bls.n	800262e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e0ca      	b.n	80027c4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800262e:	4b67      	ldr	r3, [pc, #412]	; (80027cc <HAL_RCC_ClockConfig+0x1f0>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2207      	movs	r2, #7
 8002634:	4013      	ands	r3, r2
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	429a      	cmp	r2, r3
 800263a:	d1ee      	bne.n	800261a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2202      	movs	r2, #2
 8002642:	4013      	ands	r3, r2
 8002644:	d015      	beq.n	8002672 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2204      	movs	r2, #4
 800264c:	4013      	ands	r3, r2
 800264e:	d006      	beq.n	800265e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002650:	4b60      	ldr	r3, [pc, #384]	; (80027d4 <HAL_RCC_ClockConfig+0x1f8>)
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	4b5f      	ldr	r3, [pc, #380]	; (80027d4 <HAL_RCC_ClockConfig+0x1f8>)
 8002656:	21e0      	movs	r1, #224	; 0xe0
 8002658:	01c9      	lsls	r1, r1, #7
 800265a:	430a      	orrs	r2, r1
 800265c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800265e:	4b5d      	ldr	r3, [pc, #372]	; (80027d4 <HAL_RCC_ClockConfig+0x1f8>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	4a5d      	ldr	r2, [pc, #372]	; (80027d8 <HAL_RCC_ClockConfig+0x1fc>)
 8002664:	4013      	ands	r3, r2
 8002666:	0019      	movs	r1, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	4b59      	ldr	r3, [pc, #356]	; (80027d4 <HAL_RCC_ClockConfig+0x1f8>)
 800266e:	430a      	orrs	r2, r1
 8002670:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2201      	movs	r2, #1
 8002678:	4013      	ands	r3, r2
 800267a:	d057      	beq.n	800272c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d107      	bne.n	8002694 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002684:	4b53      	ldr	r3, [pc, #332]	; (80027d4 <HAL_RCC_ClockConfig+0x1f8>)
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	2380      	movs	r3, #128	; 0x80
 800268a:	029b      	lsls	r3, r3, #10
 800268c:	4013      	ands	r3, r2
 800268e:	d12b      	bne.n	80026e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e097      	b.n	80027c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	2b02      	cmp	r3, #2
 800269a:	d107      	bne.n	80026ac <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800269c:	4b4d      	ldr	r3, [pc, #308]	; (80027d4 <HAL_RCC_ClockConfig+0x1f8>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	2380      	movs	r3, #128	; 0x80
 80026a2:	049b      	lsls	r3, r3, #18
 80026a4:	4013      	ands	r3, r2
 80026a6:	d11f      	bne.n	80026e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e08b      	b.n	80027c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d107      	bne.n	80026c4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026b4:	4b47      	ldr	r3, [pc, #284]	; (80027d4 <HAL_RCC_ClockConfig+0x1f8>)
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	2380      	movs	r3, #128	; 0x80
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	4013      	ands	r3, r2
 80026be:	d113      	bne.n	80026e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e07f      	b.n	80027c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	2b03      	cmp	r3, #3
 80026ca:	d106      	bne.n	80026da <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026cc:	4b41      	ldr	r3, [pc, #260]	; (80027d4 <HAL_RCC_ClockConfig+0x1f8>)
 80026ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026d0:	2202      	movs	r2, #2
 80026d2:	4013      	ands	r3, r2
 80026d4:	d108      	bne.n	80026e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e074      	b.n	80027c4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026da:	4b3e      	ldr	r3, [pc, #248]	; (80027d4 <HAL_RCC_ClockConfig+0x1f8>)
 80026dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026de:	2202      	movs	r2, #2
 80026e0:	4013      	ands	r3, r2
 80026e2:	d101      	bne.n	80026e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e06d      	b.n	80027c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026e8:	4b3a      	ldr	r3, [pc, #232]	; (80027d4 <HAL_RCC_ClockConfig+0x1f8>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	2207      	movs	r2, #7
 80026ee:	4393      	bics	r3, r2
 80026f0:	0019      	movs	r1, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685a      	ldr	r2, [r3, #4]
 80026f6:	4b37      	ldr	r3, [pc, #220]	; (80027d4 <HAL_RCC_ClockConfig+0x1f8>)
 80026f8:	430a      	orrs	r2, r1
 80026fa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026fc:	f7fe fe00 	bl	8001300 <HAL_GetTick>
 8002700:	0003      	movs	r3, r0
 8002702:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002704:	e009      	b.n	800271a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002706:	f7fe fdfb 	bl	8001300 <HAL_GetTick>
 800270a:	0002      	movs	r2, r0
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	4a2f      	ldr	r2, [pc, #188]	; (80027d0 <HAL_RCC_ClockConfig+0x1f4>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d901      	bls.n	800271a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e054      	b.n	80027c4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800271a:	4b2e      	ldr	r3, [pc, #184]	; (80027d4 <HAL_RCC_ClockConfig+0x1f8>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	2238      	movs	r2, #56	; 0x38
 8002720:	401a      	ands	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	429a      	cmp	r2, r3
 800272a:	d1ec      	bne.n	8002706 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800272c:	4b27      	ldr	r3, [pc, #156]	; (80027cc <HAL_RCC_ClockConfig+0x1f0>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2207      	movs	r2, #7
 8002732:	4013      	ands	r3, r2
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	429a      	cmp	r2, r3
 8002738:	d21e      	bcs.n	8002778 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800273a:	4b24      	ldr	r3, [pc, #144]	; (80027cc <HAL_RCC_ClockConfig+0x1f0>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2207      	movs	r2, #7
 8002740:	4393      	bics	r3, r2
 8002742:	0019      	movs	r1, r3
 8002744:	4b21      	ldr	r3, [pc, #132]	; (80027cc <HAL_RCC_ClockConfig+0x1f0>)
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800274c:	f7fe fdd8 	bl	8001300 <HAL_GetTick>
 8002750:	0003      	movs	r3, r0
 8002752:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002754:	e009      	b.n	800276a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002756:	f7fe fdd3 	bl	8001300 <HAL_GetTick>
 800275a:	0002      	movs	r2, r0
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	4a1b      	ldr	r2, [pc, #108]	; (80027d0 <HAL_RCC_ClockConfig+0x1f4>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d901      	bls.n	800276a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e02c      	b.n	80027c4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800276a:	4b18      	ldr	r3, [pc, #96]	; (80027cc <HAL_RCC_ClockConfig+0x1f0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2207      	movs	r2, #7
 8002770:	4013      	ands	r3, r2
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	429a      	cmp	r2, r3
 8002776:	d1ee      	bne.n	8002756 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2204      	movs	r2, #4
 800277e:	4013      	ands	r3, r2
 8002780:	d009      	beq.n	8002796 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002782:	4b14      	ldr	r3, [pc, #80]	; (80027d4 <HAL_RCC_ClockConfig+0x1f8>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	4a15      	ldr	r2, [pc, #84]	; (80027dc <HAL_RCC_ClockConfig+0x200>)
 8002788:	4013      	ands	r3, r2
 800278a:	0019      	movs	r1, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68da      	ldr	r2, [r3, #12]
 8002790:	4b10      	ldr	r3, [pc, #64]	; (80027d4 <HAL_RCC_ClockConfig+0x1f8>)
 8002792:	430a      	orrs	r2, r1
 8002794:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002796:	f000 f829 	bl	80027ec <HAL_RCC_GetSysClockFreq>
 800279a:	0001      	movs	r1, r0
 800279c:	4b0d      	ldr	r3, [pc, #52]	; (80027d4 <HAL_RCC_ClockConfig+0x1f8>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	0a1b      	lsrs	r3, r3, #8
 80027a2:	220f      	movs	r2, #15
 80027a4:	401a      	ands	r2, r3
 80027a6:	4b0e      	ldr	r3, [pc, #56]	; (80027e0 <HAL_RCC_ClockConfig+0x204>)
 80027a8:	0092      	lsls	r2, r2, #2
 80027aa:	58d3      	ldr	r3, [r2, r3]
 80027ac:	221f      	movs	r2, #31
 80027ae:	4013      	ands	r3, r2
 80027b0:	000a      	movs	r2, r1
 80027b2:	40da      	lsrs	r2, r3
 80027b4:	4b0b      	ldr	r3, [pc, #44]	; (80027e4 <HAL_RCC_ClockConfig+0x208>)
 80027b6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80027b8:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <HAL_RCC_ClockConfig+0x20c>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	0018      	movs	r0, r3
 80027be:	f7fe fd43 	bl	8001248 <HAL_InitTick>
 80027c2:	0003      	movs	r3, r0
}
 80027c4:	0018      	movs	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	b004      	add	sp, #16
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40022000 	.word	0x40022000
 80027d0:	00001388 	.word	0x00001388
 80027d4:	40021000 	.word	0x40021000
 80027d8:	fffff0ff 	.word	0xfffff0ff
 80027dc:	ffff8fff 	.word	0xffff8fff
 80027e0:	08005ca0 	.word	0x08005ca0
 80027e4:	20000000 	.word	0x20000000
 80027e8:	20000004 	.word	0x20000004

080027ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027f2:	4b3c      	ldr	r3, [pc, #240]	; (80028e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	2238      	movs	r2, #56	; 0x38
 80027f8:	4013      	ands	r3, r2
 80027fa:	d10f      	bne.n	800281c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80027fc:	4b39      	ldr	r3, [pc, #228]	; (80028e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	0adb      	lsrs	r3, r3, #11
 8002802:	2207      	movs	r2, #7
 8002804:	4013      	ands	r3, r2
 8002806:	2201      	movs	r2, #1
 8002808:	409a      	lsls	r2, r3
 800280a:	0013      	movs	r3, r2
 800280c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800280e:	6839      	ldr	r1, [r7, #0]
 8002810:	4835      	ldr	r0, [pc, #212]	; (80028e8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002812:	f7fd fc89 	bl	8000128 <__udivsi3>
 8002816:	0003      	movs	r3, r0
 8002818:	613b      	str	r3, [r7, #16]
 800281a:	e05d      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800281c:	4b31      	ldr	r3, [pc, #196]	; (80028e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	2238      	movs	r2, #56	; 0x38
 8002822:	4013      	ands	r3, r2
 8002824:	2b08      	cmp	r3, #8
 8002826:	d102      	bne.n	800282e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002828:	4b30      	ldr	r3, [pc, #192]	; (80028ec <HAL_RCC_GetSysClockFreq+0x100>)
 800282a:	613b      	str	r3, [r7, #16]
 800282c:	e054      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800282e:	4b2d      	ldr	r3, [pc, #180]	; (80028e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	2238      	movs	r2, #56	; 0x38
 8002834:	4013      	ands	r3, r2
 8002836:	2b10      	cmp	r3, #16
 8002838:	d138      	bne.n	80028ac <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800283a:	4b2a      	ldr	r3, [pc, #168]	; (80028e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	2203      	movs	r2, #3
 8002840:	4013      	ands	r3, r2
 8002842:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002844:	4b27      	ldr	r3, [pc, #156]	; (80028e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	091b      	lsrs	r3, r3, #4
 800284a:	2207      	movs	r2, #7
 800284c:	4013      	ands	r3, r2
 800284e:	3301      	adds	r3, #1
 8002850:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2b03      	cmp	r3, #3
 8002856:	d10d      	bne.n	8002874 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002858:	68b9      	ldr	r1, [r7, #8]
 800285a:	4824      	ldr	r0, [pc, #144]	; (80028ec <HAL_RCC_GetSysClockFreq+0x100>)
 800285c:	f7fd fc64 	bl	8000128 <__udivsi3>
 8002860:	0003      	movs	r3, r0
 8002862:	0019      	movs	r1, r3
 8002864:	4b1f      	ldr	r3, [pc, #124]	; (80028e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	0a1b      	lsrs	r3, r3, #8
 800286a:	227f      	movs	r2, #127	; 0x7f
 800286c:	4013      	ands	r3, r2
 800286e:	434b      	muls	r3, r1
 8002870:	617b      	str	r3, [r7, #20]
        break;
 8002872:	e00d      	b.n	8002890 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002874:	68b9      	ldr	r1, [r7, #8]
 8002876:	481c      	ldr	r0, [pc, #112]	; (80028e8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002878:	f7fd fc56 	bl	8000128 <__udivsi3>
 800287c:	0003      	movs	r3, r0
 800287e:	0019      	movs	r1, r3
 8002880:	4b18      	ldr	r3, [pc, #96]	; (80028e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	0a1b      	lsrs	r3, r3, #8
 8002886:	227f      	movs	r2, #127	; 0x7f
 8002888:	4013      	ands	r3, r2
 800288a:	434b      	muls	r3, r1
 800288c:	617b      	str	r3, [r7, #20]
        break;
 800288e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002890:	4b14      	ldr	r3, [pc, #80]	; (80028e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	0f5b      	lsrs	r3, r3, #29
 8002896:	2207      	movs	r2, #7
 8002898:	4013      	ands	r3, r2
 800289a:	3301      	adds	r3, #1
 800289c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	6978      	ldr	r0, [r7, #20]
 80028a2:	f7fd fc41 	bl	8000128 <__udivsi3>
 80028a6:	0003      	movs	r3, r0
 80028a8:	613b      	str	r3, [r7, #16]
 80028aa:	e015      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80028ac:	4b0d      	ldr	r3, [pc, #52]	; (80028e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	2238      	movs	r2, #56	; 0x38
 80028b2:	4013      	ands	r3, r2
 80028b4:	2b20      	cmp	r3, #32
 80028b6:	d103      	bne.n	80028c0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80028b8:	2380      	movs	r3, #128	; 0x80
 80028ba:	021b      	lsls	r3, r3, #8
 80028bc:	613b      	str	r3, [r7, #16]
 80028be:	e00b      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80028c0:	4b08      	ldr	r3, [pc, #32]	; (80028e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	2238      	movs	r2, #56	; 0x38
 80028c6:	4013      	ands	r3, r2
 80028c8:	2b18      	cmp	r3, #24
 80028ca:	d103      	bne.n	80028d4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80028cc:	23fa      	movs	r3, #250	; 0xfa
 80028ce:	01db      	lsls	r3, r3, #7
 80028d0:	613b      	str	r3, [r7, #16]
 80028d2:	e001      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80028d8:	693b      	ldr	r3, [r7, #16]
}
 80028da:	0018      	movs	r0, r3
 80028dc:	46bd      	mov	sp, r7
 80028de:	b006      	add	sp, #24
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	46c0      	nop			; (mov r8, r8)
 80028e4:	40021000 	.word	0x40021000
 80028e8:	00f42400 	.word	0x00f42400
 80028ec:	007a1200 	.word	0x007a1200

080028f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028f4:	4b02      	ldr	r3, [pc, #8]	; (8002900 <HAL_RCC_GetHCLKFreq+0x10>)
 80028f6:	681b      	ldr	r3, [r3, #0]
}
 80028f8:	0018      	movs	r0, r3
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	46c0      	nop			; (mov r8, r8)
 8002900:	20000000 	.word	0x20000000

08002904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002904:	b5b0      	push	{r4, r5, r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002908:	f7ff fff2 	bl	80028f0 <HAL_RCC_GetHCLKFreq>
 800290c:	0004      	movs	r4, r0
 800290e:	f7ff fb3f 	bl	8001f90 <LL_RCC_GetAPB1Prescaler>
 8002912:	0003      	movs	r3, r0
 8002914:	0b1a      	lsrs	r2, r3, #12
 8002916:	4b05      	ldr	r3, [pc, #20]	; (800292c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002918:	0092      	lsls	r2, r2, #2
 800291a:	58d3      	ldr	r3, [r2, r3]
 800291c:	221f      	movs	r2, #31
 800291e:	4013      	ands	r3, r2
 8002920:	40dc      	lsrs	r4, r3
 8002922:	0023      	movs	r3, r4
}
 8002924:	0018      	movs	r0, r3
 8002926:	46bd      	mov	sp, r7
 8002928:	bdb0      	pop	{r4, r5, r7, pc}
 800292a:	46c0      	nop			; (mov r8, r8)
 800292c:	08005ce0 	.word	0x08005ce0

08002930 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002938:	2313      	movs	r3, #19
 800293a:	18fb      	adds	r3, r7, r3
 800293c:	2200      	movs	r2, #0
 800293e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002940:	2312      	movs	r3, #18
 8002942:	18fb      	adds	r3, r7, r3
 8002944:	2200      	movs	r2, #0
 8002946:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	2380      	movs	r3, #128	; 0x80
 800294e:	029b      	lsls	r3, r3, #10
 8002950:	4013      	ands	r3, r2
 8002952:	d100      	bne.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002954:	e0a3      	b.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002956:	2011      	movs	r0, #17
 8002958:	183b      	adds	r3, r7, r0
 800295a:	2200      	movs	r2, #0
 800295c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800295e:	4ba5      	ldr	r3, [pc, #660]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002960:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002962:	2380      	movs	r3, #128	; 0x80
 8002964:	055b      	lsls	r3, r3, #21
 8002966:	4013      	ands	r3, r2
 8002968:	d110      	bne.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800296a:	4ba2      	ldr	r3, [pc, #648]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800296c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800296e:	4ba1      	ldr	r3, [pc, #644]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002970:	2180      	movs	r1, #128	; 0x80
 8002972:	0549      	lsls	r1, r1, #21
 8002974:	430a      	orrs	r2, r1
 8002976:	63da      	str	r2, [r3, #60]	; 0x3c
 8002978:	4b9e      	ldr	r3, [pc, #632]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800297a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800297c:	2380      	movs	r3, #128	; 0x80
 800297e:	055b      	lsls	r3, r3, #21
 8002980:	4013      	ands	r3, r2
 8002982:	60bb      	str	r3, [r7, #8]
 8002984:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002986:	183b      	adds	r3, r7, r0
 8002988:	2201      	movs	r2, #1
 800298a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800298c:	4b9a      	ldr	r3, [pc, #616]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	4b99      	ldr	r3, [pc, #612]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002992:	2180      	movs	r1, #128	; 0x80
 8002994:	0049      	lsls	r1, r1, #1
 8002996:	430a      	orrs	r2, r1
 8002998:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800299a:	f7fe fcb1 	bl	8001300 <HAL_GetTick>
 800299e:	0003      	movs	r3, r0
 80029a0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029a2:	e00b      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029a4:	f7fe fcac 	bl	8001300 <HAL_GetTick>
 80029a8:	0002      	movs	r2, r0
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d904      	bls.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80029b2:	2313      	movs	r3, #19
 80029b4:	18fb      	adds	r3, r7, r3
 80029b6:	2203      	movs	r2, #3
 80029b8:	701a      	strb	r2, [r3, #0]
        break;
 80029ba:	e005      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029bc:	4b8e      	ldr	r3, [pc, #568]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	2380      	movs	r3, #128	; 0x80
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	4013      	ands	r3, r2
 80029c6:	d0ed      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80029c8:	2313      	movs	r3, #19
 80029ca:	18fb      	adds	r3, r7, r3
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d154      	bne.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80029d2:	4b88      	ldr	r3, [pc, #544]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029d6:	23c0      	movs	r3, #192	; 0xc0
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4013      	ands	r3, r2
 80029dc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d019      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d014      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029ee:	4b81      	ldr	r3, [pc, #516]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f2:	4a82      	ldr	r2, [pc, #520]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80029f4:	4013      	ands	r3, r2
 80029f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029f8:	4b7e      	ldr	r3, [pc, #504]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029fc:	4b7d      	ldr	r3, [pc, #500]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029fe:	2180      	movs	r1, #128	; 0x80
 8002a00:	0249      	lsls	r1, r1, #9
 8002a02:	430a      	orrs	r2, r1
 8002a04:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a06:	4b7b      	ldr	r3, [pc, #492]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a08:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a0a:	4b7a      	ldr	r3, [pc, #488]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a0c:	497c      	ldr	r1, [pc, #496]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8002a0e:	400a      	ands	r2, r1
 8002a10:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a12:	4b78      	ldr	r3, [pc, #480]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a14:	697a      	ldr	r2, [r7, #20]
 8002a16:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	d016      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a20:	f7fe fc6e 	bl	8001300 <HAL_GetTick>
 8002a24:	0003      	movs	r3, r0
 8002a26:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a28:	e00c      	b.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a2a:	f7fe fc69 	bl	8001300 <HAL_GetTick>
 8002a2e:	0002      	movs	r2, r0
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	4a73      	ldr	r2, [pc, #460]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d904      	bls.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002a3a:	2313      	movs	r3, #19
 8002a3c:	18fb      	adds	r3, r7, r3
 8002a3e:	2203      	movs	r2, #3
 8002a40:	701a      	strb	r2, [r3, #0]
            break;
 8002a42:	e004      	b.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a44:	4b6b      	ldr	r3, [pc, #428]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a48:	2202      	movs	r2, #2
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	d0ed      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002a4e:	2313      	movs	r3, #19
 8002a50:	18fb      	adds	r3, r7, r3
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d10a      	bne.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a58:	4b66      	ldr	r3, [pc, #408]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5c:	4a67      	ldr	r2, [pc, #412]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002a5e:	4013      	ands	r3, r2
 8002a60:	0019      	movs	r1, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a66:	4b63      	ldr	r3, [pc, #396]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a6c:	e00c      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a6e:	2312      	movs	r3, #18
 8002a70:	18fb      	adds	r3, r7, r3
 8002a72:	2213      	movs	r2, #19
 8002a74:	18ba      	adds	r2, r7, r2
 8002a76:	7812      	ldrb	r2, [r2, #0]
 8002a78:	701a      	strb	r2, [r3, #0]
 8002a7a:	e005      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a7c:	2312      	movs	r3, #18
 8002a7e:	18fb      	adds	r3, r7, r3
 8002a80:	2213      	movs	r2, #19
 8002a82:	18ba      	adds	r2, r7, r2
 8002a84:	7812      	ldrb	r2, [r2, #0]
 8002a86:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a88:	2311      	movs	r3, #17
 8002a8a:	18fb      	adds	r3, r7, r3
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d105      	bne.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a92:	4b58      	ldr	r3, [pc, #352]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a96:	4b57      	ldr	r3, [pc, #348]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a98:	495b      	ldr	r1, [pc, #364]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002a9a:	400a      	ands	r2, r1
 8002a9c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	d009      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002aa8:	4b52      	ldr	r3, [pc, #328]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aac:	2203      	movs	r2, #3
 8002aae:	4393      	bics	r3, r2
 8002ab0:	0019      	movs	r1, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	4b4f      	ldr	r3, [pc, #316]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2210      	movs	r2, #16
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	d009      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ac6:	4b4b      	ldr	r3, [pc, #300]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aca:	4a50      	ldr	r2, [pc, #320]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002acc:	4013      	ands	r3, r2
 8002ace:	0019      	movs	r1, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	4b47      	ldr	r3, [pc, #284]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	2380      	movs	r3, #128	; 0x80
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	d009      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ae6:	4b43      	ldr	r3, [pc, #268]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aea:	4a49      	ldr	r2, [pc, #292]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002aec:	4013      	ands	r3, r2
 8002aee:	0019      	movs	r1, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	695a      	ldr	r2, [r3, #20]
 8002af4:	4b3f      	ldr	r3, [pc, #252]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002af6:	430a      	orrs	r2, r1
 8002af8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	2380      	movs	r3, #128	; 0x80
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	4013      	ands	r3, r2
 8002b04:	d009      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b06:	4b3b      	ldr	r3, [pc, #236]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0a:	4a42      	ldr	r2, [pc, #264]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	0019      	movs	r1, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	699a      	ldr	r2, [r3, #24]
 8002b14:	4b37      	ldr	r3, [pc, #220]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b16:	430a      	orrs	r2, r1
 8002b18:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	4013      	ands	r3, r2
 8002b22:	d009      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b24:	4b33      	ldr	r3, [pc, #204]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b28:	4a3b      	ldr	r2, [pc, #236]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	0019      	movs	r1, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68da      	ldr	r2, [r3, #12]
 8002b32:	4b30      	ldr	r3, [pc, #192]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b34:	430a      	orrs	r2, r1
 8002b36:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	2380      	movs	r3, #128	; 0x80
 8002b3e:	01db      	lsls	r3, r3, #7
 8002b40:	4013      	ands	r3, r2
 8002b42:	d015      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b44:	4b2b      	ldr	r3, [pc, #172]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	0899      	lsrs	r1, r3, #2
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	69da      	ldr	r2, [r3, #28]
 8002b50:	4b28      	ldr	r3, [pc, #160]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b52:	430a      	orrs	r2, r1
 8002b54:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69da      	ldr	r2, [r3, #28]
 8002b5a:	2380      	movs	r3, #128	; 0x80
 8002b5c:	05db      	lsls	r3, r3, #23
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d106      	bne.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002b62:	4b24      	ldr	r3, [pc, #144]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b64:	68da      	ldr	r2, [r3, #12]
 8002b66:	4b23      	ldr	r3, [pc, #140]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b68:	2180      	movs	r1, #128	; 0x80
 8002b6a:	0249      	lsls	r1, r1, #9
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	2380      	movs	r3, #128	; 0x80
 8002b76:	039b      	lsls	r3, r3, #14
 8002b78:	4013      	ands	r3, r2
 8002b7a:	d016      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002b7c:	4b1d      	ldr	r3, [pc, #116]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b80:	4a26      	ldr	r2, [pc, #152]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002b82:	4013      	ands	r3, r2
 8002b84:	0019      	movs	r1, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a1a      	ldr	r2, [r3, #32]
 8002b8a:	4b1a      	ldr	r3, [pc, #104]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a1a      	ldr	r2, [r3, #32]
 8002b94:	2380      	movs	r3, #128	; 0x80
 8002b96:	03db      	lsls	r3, r3, #15
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d106      	bne.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002b9c:	4b15      	ldr	r3, [pc, #84]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b9e:	68da      	ldr	r2, [r3, #12]
 8002ba0:	4b14      	ldr	r3, [pc, #80]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ba2:	2180      	movs	r1, #128	; 0x80
 8002ba4:	0449      	lsls	r1, r1, #17
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	2380      	movs	r3, #128	; 0x80
 8002bb0:	011b      	lsls	r3, r3, #4
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	d016      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002bb6:	4b0f      	ldr	r3, [pc, #60]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bba:	4a19      	ldr	r2, [pc, #100]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	0019      	movs	r1, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	691a      	ldr	r2, [r3, #16]
 8002bc4:	4b0b      	ldr	r3, [pc, #44]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	691a      	ldr	r2, [r3, #16]
 8002bce:	2380      	movs	r3, #128	; 0x80
 8002bd0:	01db      	lsls	r3, r3, #7
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d106      	bne.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002bd6:	4b07      	ldr	r3, [pc, #28]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002bd8:	68da      	ldr	r2, [r3, #12]
 8002bda:	4b06      	ldr	r3, [pc, #24]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002bdc:	2180      	movs	r1, #128	; 0x80
 8002bde:	0249      	lsls	r1, r1, #9
 8002be0:	430a      	orrs	r2, r1
 8002be2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002be4:	2312      	movs	r3, #18
 8002be6:	18fb      	adds	r3, r7, r3
 8002be8:	781b      	ldrb	r3, [r3, #0]
}
 8002bea:	0018      	movs	r0, r3
 8002bec:	46bd      	mov	sp, r7
 8002bee:	b006      	add	sp, #24
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	46c0      	nop			; (mov r8, r8)
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	40007000 	.word	0x40007000
 8002bfc:	fffffcff 	.word	0xfffffcff
 8002c00:	fffeffff 	.word	0xfffeffff
 8002c04:	00001388 	.word	0x00001388
 8002c08:	efffffff 	.word	0xefffffff
 8002c0c:	fffff3ff 	.word	0xfffff3ff
 8002c10:	fff3ffff 	.word	0xfff3ffff
 8002c14:	ffcfffff 	.word	0xffcfffff
 8002c18:	ffffcfff 	.word	0xffffcfff
 8002c1c:	ffbfffff 	.word	0xffbfffff
 8002c20:	ffff3fff 	.word	0xffff3fff

08002c24 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002c24:	b5b0      	push	{r4, r5, r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002c2c:	230f      	movs	r3, #15
 8002c2e:	18fb      	adds	r3, r7, r3
 8002c30:	2201      	movs	r2, #1
 8002c32:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d100      	bne.n	8002c3c <HAL_RTC_Init+0x18>
 8002c3a:	e08c      	b.n	8002d56 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2229      	movs	r2, #41	; 0x29
 8002c40:	5c9b      	ldrb	r3, [r3, r2]
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d10b      	bne.n	8002c60 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2228      	movs	r2, #40	; 0x28
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2288      	movs	r2, #136	; 0x88
 8002c54:	0212      	lsls	r2, r2, #8
 8002c56:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	f7fe f918 	bl	8000e90 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2229      	movs	r2, #41	; 0x29
 8002c64:	2102      	movs	r1, #2
 8002c66:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	2210      	movs	r2, #16
 8002c70:	4013      	ands	r3, r2
 8002c72:	2b10      	cmp	r3, #16
 8002c74:	d062      	beq.n	8002d3c <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	22ca      	movs	r2, #202	; 0xca
 8002c7c:	625a      	str	r2, [r3, #36]	; 0x24
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2253      	movs	r2, #83	; 0x53
 8002c84:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002c86:	250f      	movs	r5, #15
 8002c88:	197c      	adds	r4, r7, r5
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	f000 f9cc 	bl	800302a <RTC_EnterInitMode>
 8002c92:	0003      	movs	r3, r0
 8002c94:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8002c96:	0028      	movs	r0, r5
 8002c98:	183b      	adds	r3, r7, r0
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d12c      	bne.n	8002cfa <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	699a      	ldr	r2, [r3, #24]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	492e      	ldr	r1, [pc, #184]	; (8002d64 <HAL_RTC_Init+0x140>)
 8002cac:	400a      	ands	r2, r1
 8002cae:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6999      	ldr	r1, [r3, #24]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	689a      	ldr	r2, [r3, #8]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	69db      	ldr	r3, [r3, #28]
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	6912      	ldr	r2, [r2, #16]
 8002cd6:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6919      	ldr	r1, [r3, #16]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	041a      	lsls	r2, r3, #16
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002cec:	183c      	adds	r4, r7, r0
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	f000 f9dd 	bl	80030b0 <RTC_ExitInitMode>
 8002cf6:	0003      	movs	r3, r0
 8002cf8:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8002cfa:	230f      	movs	r3, #15
 8002cfc:	18fb      	adds	r3, r7, r3
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d116      	bne.n	8002d32 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	699a      	ldr	r2, [r3, #24]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	00d2      	lsls	r2, r2, #3
 8002d10:	08d2      	lsrs	r2, r2, #3
 8002d12:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6999      	ldr	r1, [r3, #24]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	22ff      	movs	r2, #255	; 0xff
 8002d38:	625a      	str	r2, [r3, #36]	; 0x24
 8002d3a:	e003      	b.n	8002d44 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002d3c:	230f      	movs	r3, #15
 8002d3e:	18fb      	adds	r3, r7, r3
 8002d40:	2200      	movs	r2, #0
 8002d42:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8002d44:	230f      	movs	r3, #15
 8002d46:	18fb      	adds	r3, r7, r3
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d103      	bne.n	8002d56 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2229      	movs	r2, #41	; 0x29
 8002d52:	2101      	movs	r1, #1
 8002d54:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8002d56:	230f      	movs	r3, #15
 8002d58:	18fb      	adds	r3, r7, r3
 8002d5a:	781b      	ldrb	r3, [r3, #0]
}
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	b004      	add	sp, #16
 8002d62:	bdb0      	pop	{r4, r5, r7, pc}
 8002d64:	fb8fffbf 	.word	0xfb8fffbf

08002d68 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002d68:	b5b0      	push	{r4, r5, r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2228      	movs	r2, #40	; 0x28
 8002d78:	5c9b      	ldrb	r3, [r3, r2]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d101      	bne.n	8002d82 <HAL_RTC_SetTime+0x1a>
 8002d7e:	2302      	movs	r3, #2
 8002d80:	e092      	b.n	8002ea8 <HAL_RTC_SetTime+0x140>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2228      	movs	r2, #40	; 0x28
 8002d86:	2101      	movs	r1, #1
 8002d88:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2229      	movs	r2, #41	; 0x29
 8002d8e:	2102      	movs	r1, #2
 8002d90:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	22ca      	movs	r2, #202	; 0xca
 8002d98:	625a      	str	r2, [r3, #36]	; 0x24
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2253      	movs	r2, #83	; 0x53
 8002da0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002da2:	2513      	movs	r5, #19
 8002da4:	197c      	adds	r4, r7, r5
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	0018      	movs	r0, r3
 8002daa:	f000 f93e 	bl	800302a <RTC_EnterInitMode>
 8002dae:	0003      	movs	r3, r0
 8002db0:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8002db2:	197b      	adds	r3, r7, r5
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d162      	bne.n	8002e80 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d125      	bne.n	8002e0c <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	2240      	movs	r2, #64	; 0x40
 8002dc8:	4013      	ands	r3, r2
 8002dca:	d102      	bne.n	8002dd2 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	f000 f9ae 	bl	8003138 <RTC_ByteToBcd2>
 8002ddc:	0003      	movs	r3, r0
 8002dde:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	785b      	ldrb	r3, [r3, #1]
 8002de4:	0018      	movs	r0, r3
 8002de6:	f000 f9a7 	bl	8003138 <RTC_ByteToBcd2>
 8002dea:	0003      	movs	r3, r0
 8002dec:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002dee:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	789b      	ldrb	r3, [r3, #2]
 8002df4:	0018      	movs	r0, r3
 8002df6:	f000 f99f 	bl	8003138 <RTC_ByteToBcd2>
 8002dfa:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002dfc:	0022      	movs	r2, r4
 8002dfe:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	78db      	ldrb	r3, [r3, #3]
 8002e04:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002e06:	4313      	orrs	r3, r2
 8002e08:	617b      	str	r3, [r7, #20]
 8002e0a:	e017      	b.n	8002e3c <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	2240      	movs	r2, #64	; 0x40
 8002e14:	4013      	ands	r3, r2
 8002e16:	d102      	bne.n	8002e1e <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	785b      	ldrb	r3, [r3, #1]
 8002e28:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002e2a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002e30:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	78db      	ldrb	r3, [r3, #3]
 8002e36:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	491b      	ldr	r1, [pc, #108]	; (8002eb0 <HAL_RTC_SetTime+0x148>)
 8002e44:	400a      	ands	r2, r1
 8002e46:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	699a      	ldr	r2, [r3, #24]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4918      	ldr	r1, [pc, #96]	; (8002eb4 <HAL_RTC_SetTime+0x14c>)
 8002e54:	400a      	ands	r2, r1
 8002e56:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6999      	ldr	r1, [r3, #24]
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	68da      	ldr	r2, [r3, #12]
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	431a      	orrs	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002e70:	2313      	movs	r3, #19
 8002e72:	18fc      	adds	r4, r7, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	0018      	movs	r0, r3
 8002e78:	f000 f91a 	bl	80030b0 <RTC_ExitInitMode>
 8002e7c:	0003      	movs	r3, r0
 8002e7e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	22ff      	movs	r2, #255	; 0xff
 8002e86:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8002e88:	2313      	movs	r3, #19
 8002e8a:	18fb      	adds	r3, r7, r3
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d103      	bne.n	8002e9a <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2229      	movs	r2, #41	; 0x29
 8002e96:	2101      	movs	r1, #1
 8002e98:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2228      	movs	r2, #40	; 0x28
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	5499      	strb	r1, [r3, r2]

  return status;
 8002ea2:	2313      	movs	r3, #19
 8002ea4:	18fb      	adds	r3, r7, r3
 8002ea6:	781b      	ldrb	r3, [r3, #0]
}
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	b006      	add	sp, #24
 8002eae:	bdb0      	pop	{r4, r5, r7, pc}
 8002eb0:	007f7f7f 	.word	0x007f7f7f
 8002eb4:	fffbffff 	.word	0xfffbffff

08002eb8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002eb8:	b5b0      	push	{r4, r5, r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2228      	movs	r2, #40	; 0x28
 8002ec8:	5c9b      	ldrb	r3, [r3, r2]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d101      	bne.n	8002ed2 <HAL_RTC_SetDate+0x1a>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	e07e      	b.n	8002fd0 <HAL_RTC_SetDate+0x118>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2228      	movs	r2, #40	; 0x28
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2229      	movs	r2, #41	; 0x29
 8002ede:	2102      	movs	r1, #2
 8002ee0:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d10e      	bne.n	8002f06 <HAL_RTC_SetDate+0x4e>
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	785b      	ldrb	r3, [r3, #1]
 8002eec:	001a      	movs	r2, r3
 8002eee:	2310      	movs	r3, #16
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	d008      	beq.n	8002f06 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	785b      	ldrb	r3, [r3, #1]
 8002ef8:	2210      	movs	r2, #16
 8002efa:	4393      	bics	r3, r2
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	330a      	adds	r3, #10
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d11c      	bne.n	8002f46 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	78db      	ldrb	r3, [r3, #3]
 8002f10:	0018      	movs	r0, r3
 8002f12:	f000 f911 	bl	8003138 <RTC_ByteToBcd2>
 8002f16:	0003      	movs	r3, r0
 8002f18:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	785b      	ldrb	r3, [r3, #1]
 8002f1e:	0018      	movs	r0, r3
 8002f20:	f000 f90a 	bl	8003138 <RTC_ByteToBcd2>
 8002f24:	0003      	movs	r3, r0
 8002f26:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002f28:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	789b      	ldrb	r3, [r3, #2]
 8002f2e:	0018      	movs	r0, r3
 8002f30:	f000 f902 	bl	8003138 <RTC_ByteToBcd2>
 8002f34:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002f36:	0022      	movs	r2, r4
 8002f38:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002f40:	4313      	orrs	r3, r2
 8002f42:	617b      	str	r3, [r7, #20]
 8002f44:	e00e      	b.n	8002f64 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	78db      	ldrb	r3, [r3, #3]
 8002f4a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	785b      	ldrb	r3, [r3, #1]
 8002f50:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002f52:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002f58:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002f60:	4313      	orrs	r3, r2
 8002f62:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	22ca      	movs	r2, #202	; 0xca
 8002f6a:	625a      	str	r2, [r3, #36]	; 0x24
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2253      	movs	r2, #83	; 0x53
 8002f72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002f74:	2513      	movs	r5, #19
 8002f76:	197c      	adds	r4, r7, r5
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	0018      	movs	r0, r3
 8002f7c:	f000 f855 	bl	800302a <RTC_EnterInitMode>
 8002f80:	0003      	movs	r3, r0
 8002f82:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8002f84:	0028      	movs	r0, r5
 8002f86:	183b      	adds	r3, r7, r0
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10c      	bne.n	8002fa8 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	4910      	ldr	r1, [pc, #64]	; (8002fd8 <HAL_RTC_SetDate+0x120>)
 8002f96:	400a      	ands	r2, r1
 8002f98:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002f9a:	183c      	adds	r4, r7, r0
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	0018      	movs	r0, r3
 8002fa0:	f000 f886 	bl	80030b0 <RTC_ExitInitMode>
 8002fa4:	0003      	movs	r3, r0
 8002fa6:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	22ff      	movs	r2, #255	; 0xff
 8002fae:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002fb0:	2313      	movs	r3, #19
 8002fb2:	18fb      	adds	r3, r7, r3
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d103      	bne.n	8002fc2 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2229      	movs	r2, #41	; 0x29
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2228      	movs	r2, #40	; 0x28
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	5499      	strb	r1, [r3, r2]

  return status;
 8002fca:	2313      	movs	r3, #19
 8002fcc:	18fb      	adds	r3, r7, r3
 8002fce:	781b      	ldrb	r3, [r3, #0]
}
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	b006      	add	sp, #24
 8002fd6:	bdb0      	pop	{r4, r5, r7, pc}
 8002fd8:	00ffff3f 	.word	0x00ffff3f

08002fdc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68da      	ldr	r2, [r3, #12]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	21a0      	movs	r1, #160	; 0xa0
 8002ff0:	438a      	bics	r2, r1
 8002ff2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002ff4:	f7fe f984 	bl	8001300 <HAL_GetTick>
 8002ff8:	0003      	movs	r3, r0
 8002ffa:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002ffc:	e00a      	b.n	8003014 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002ffe:	f7fe f97f 	bl	8001300 <HAL_GetTick>
 8003002:	0002      	movs	r2, r0
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	1ad2      	subs	r2, r2, r3
 8003008:	23fa      	movs	r3, #250	; 0xfa
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	429a      	cmp	r2, r3
 800300e:	d901      	bls.n	8003014 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e006      	b.n	8003022 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	2220      	movs	r2, #32
 800301c:	4013      	ands	r3, r2
 800301e:	d0ee      	beq.n	8002ffe <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	0018      	movs	r0, r3
 8003024:	46bd      	mov	sp, r7
 8003026:	b004      	add	sp, #16
 8003028:	bd80      	pop	{r7, pc}

0800302a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b084      	sub	sp, #16
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8003032:	230f      	movs	r3, #15
 8003034:	18fb      	adds	r3, r7, r3
 8003036:	2200      	movs	r2, #0
 8003038:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	2240      	movs	r2, #64	; 0x40
 8003042:	4013      	ands	r3, r2
 8003044:	d12c      	bne.n	80030a0 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68da      	ldr	r2, [r3, #12]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2180      	movs	r1, #128	; 0x80
 8003052:	430a      	orrs	r2, r1
 8003054:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003056:	f7fe f953 	bl	8001300 <HAL_GetTick>
 800305a:	0003      	movs	r3, r0
 800305c:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800305e:	e014      	b.n	800308a <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8003060:	f7fe f94e 	bl	8001300 <HAL_GetTick>
 8003064:	0002      	movs	r2, r0
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	1ad2      	subs	r2, r2, r3
 800306a:	200f      	movs	r0, #15
 800306c:	183b      	adds	r3, r7, r0
 800306e:	1839      	adds	r1, r7, r0
 8003070:	7809      	ldrb	r1, [r1, #0]
 8003072:	7019      	strb	r1, [r3, #0]
 8003074:	23fa      	movs	r3, #250	; 0xfa
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	429a      	cmp	r2, r3
 800307a:	d906      	bls.n	800308a <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800307c:	183b      	adds	r3, r7, r0
 800307e:	2203      	movs	r2, #3
 8003080:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2229      	movs	r2, #41	; 0x29
 8003086:	2103      	movs	r1, #3
 8003088:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	2240      	movs	r2, #64	; 0x40
 8003092:	4013      	ands	r3, r2
 8003094:	d104      	bne.n	80030a0 <RTC_EnterInitMode+0x76>
 8003096:	230f      	movs	r3, #15
 8003098:	18fb      	adds	r3, r7, r3
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	2b03      	cmp	r3, #3
 800309e:	d1df      	bne.n	8003060 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80030a0:	230f      	movs	r3, #15
 80030a2:	18fb      	adds	r3, r7, r3
 80030a4:	781b      	ldrb	r3, [r3, #0]
}
 80030a6:	0018      	movs	r0, r3
 80030a8:	46bd      	mov	sp, r7
 80030aa:	b004      	add	sp, #16
 80030ac:	bd80      	pop	{r7, pc}
	...

080030b0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80030b0:	b590      	push	{r4, r7, lr}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030b8:	240f      	movs	r4, #15
 80030ba:	193b      	adds	r3, r7, r4
 80030bc:	2200      	movs	r2, #0
 80030be:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80030c0:	4b1c      	ldr	r3, [pc, #112]	; (8003134 <RTC_ExitInitMode+0x84>)
 80030c2:	68da      	ldr	r2, [r3, #12]
 80030c4:	4b1b      	ldr	r3, [pc, #108]	; (8003134 <RTC_ExitInitMode+0x84>)
 80030c6:	2180      	movs	r1, #128	; 0x80
 80030c8:	438a      	bics	r2, r1
 80030ca:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80030cc:	4b19      	ldr	r3, [pc, #100]	; (8003134 <RTC_ExitInitMode+0x84>)
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	2220      	movs	r2, #32
 80030d2:	4013      	ands	r3, r2
 80030d4:	d10d      	bne.n	80030f2 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	0018      	movs	r0, r3
 80030da:	f7ff ff7f 	bl	8002fdc <HAL_RTC_WaitForSynchro>
 80030de:	1e03      	subs	r3, r0, #0
 80030e0:	d021      	beq.n	8003126 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2229      	movs	r2, #41	; 0x29
 80030e6:	2103      	movs	r1, #3
 80030e8:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80030ea:	193b      	adds	r3, r7, r4
 80030ec:	2203      	movs	r2, #3
 80030ee:	701a      	strb	r2, [r3, #0]
 80030f0:	e019      	b.n	8003126 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80030f2:	4b10      	ldr	r3, [pc, #64]	; (8003134 <RTC_ExitInitMode+0x84>)
 80030f4:	699a      	ldr	r2, [r3, #24]
 80030f6:	4b0f      	ldr	r3, [pc, #60]	; (8003134 <RTC_ExitInitMode+0x84>)
 80030f8:	2120      	movs	r1, #32
 80030fa:	438a      	bics	r2, r1
 80030fc:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	0018      	movs	r0, r3
 8003102:	f7ff ff6b 	bl	8002fdc <HAL_RTC_WaitForSynchro>
 8003106:	1e03      	subs	r3, r0, #0
 8003108:	d007      	beq.n	800311a <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2229      	movs	r2, #41	; 0x29
 800310e:	2103      	movs	r1, #3
 8003110:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8003112:	230f      	movs	r3, #15
 8003114:	18fb      	adds	r3, r7, r3
 8003116:	2203      	movs	r2, #3
 8003118:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800311a:	4b06      	ldr	r3, [pc, #24]	; (8003134 <RTC_ExitInitMode+0x84>)
 800311c:	699a      	ldr	r2, [r3, #24]
 800311e:	4b05      	ldr	r3, [pc, #20]	; (8003134 <RTC_ExitInitMode+0x84>)
 8003120:	2120      	movs	r1, #32
 8003122:	430a      	orrs	r2, r1
 8003124:	619a      	str	r2, [r3, #24]
  }

  return status;
 8003126:	230f      	movs	r3, #15
 8003128:	18fb      	adds	r3, r7, r3
 800312a:	781b      	ldrb	r3, [r3, #0]
}
 800312c:	0018      	movs	r0, r3
 800312e:	46bd      	mov	sp, r7
 8003130:	b005      	add	sp, #20
 8003132:	bd90      	pop	{r4, r7, pc}
 8003134:	40002800 	.word	0x40002800

08003138 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	0002      	movs	r2, r0
 8003140:	1dfb      	adds	r3, r7, #7
 8003142:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8003144:	2300      	movs	r3, #0
 8003146:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8003148:	230b      	movs	r3, #11
 800314a:	18fb      	adds	r3, r7, r3
 800314c:	1dfa      	adds	r2, r7, #7
 800314e:	7812      	ldrb	r2, [r2, #0]
 8003150:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8003152:	e008      	b.n	8003166 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	3301      	adds	r3, #1
 8003158:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800315a:	220b      	movs	r2, #11
 800315c:	18bb      	adds	r3, r7, r2
 800315e:	18ba      	adds	r2, r7, r2
 8003160:	7812      	ldrb	r2, [r2, #0]
 8003162:	3a0a      	subs	r2, #10
 8003164:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8003166:	210b      	movs	r1, #11
 8003168:	187b      	adds	r3, r7, r1
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b09      	cmp	r3, #9
 800316e:	d8f1      	bhi.n	8003154 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	b2db      	uxtb	r3, r3
 8003174:	011b      	lsls	r3, r3, #4
 8003176:	b2da      	uxtb	r2, r3
 8003178:	187b      	adds	r3, r7, r1
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	4313      	orrs	r3, r2
 800317e:	b2db      	uxtb	r3, r3
}
 8003180:	0018      	movs	r0, r3
 8003182:	46bd      	mov	sp, r7
 8003184:	b004      	add	sp, #16
 8003186:	bd80      	pop	{r7, pc}

08003188 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2228      	movs	r2, #40	; 0x28
 8003198:	5c9b      	ldrb	r3, [r3, r2]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d101      	bne.n	80031a2 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800319e:	2302      	movs	r3, #2
 80031a0:	e082      	b.n	80032a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2228      	movs	r2, #40	; 0x28
 80031a6:	2101      	movs	r1, #1
 80031a8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2229      	movs	r2, #41	; 0x29
 80031ae:	2102      	movs	r1, #2
 80031b0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	22ca      	movs	r2, #202	; 0xca
 80031b8:	625a      	str	r2, [r3, #36]	; 0x24
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2253      	movs	r2, #83	; 0x53
 80031c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	699a      	ldr	r2, [r3, #24]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4938      	ldr	r1, [pc, #224]	; (80032b0 <HAL_RTCEx_SetWakeUpTimer_IT+0x128>)
 80031ce:	400a      	ands	r2, r1
 80031d0:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2104      	movs	r1, #4
 80031de:	430a      	orrs	r2, r1
 80031e0:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80031e2:	4b34      	ldr	r3, [pc, #208]	; (80032b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>)
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	2240      	movs	r2, #64	; 0x40
 80031e8:	4013      	ands	r3, r2
 80031ea:	d121      	bne.n	8003230 <HAL_RTCEx_SetWakeUpTimer_IT+0xa8>
  {
    tickstart = HAL_GetTick();
 80031ec:	f7fe f888 	bl	8001300 <HAL_GetTick>
 80031f0:	0003      	movs	r3, r0
 80031f2:	617b      	str	r3, [r7, #20]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80031f4:	e016      	b.n	8003224 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80031f6:	f7fe f883 	bl	8001300 <HAL_GetTick>
 80031fa:	0002      	movs	r2, r0
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	1ad2      	subs	r2, r2, r3
 8003200:	23fa      	movs	r3, #250	; 0xfa
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	429a      	cmp	r2, r3
 8003206:	d90d      	bls.n	8003224 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	22ff      	movs	r2, #255	; 0xff
 800320e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2229      	movs	r2, #41	; 0x29
 8003214:	2103      	movs	r1, #3
 8003216:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2228      	movs	r2, #40	; 0x28
 800321c:	2100      	movs	r1, #0
 800321e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e041      	b.n	80032a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	2204      	movs	r2, #4
 800322c:	4013      	ands	r3, r2
 800322e:	d0e2      	beq.n	80031f6 <HAL_RTCEx_SetWakeUpTimer_IT+0x6e>
      }
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68ba      	ldr	r2, [r7, #8]
 8003236:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	699a      	ldr	r2, [r3, #24]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2107      	movs	r1, #7
 8003244:	438a      	bics	r2, r1
 8003246:	619a      	str	r2, [r3, #24]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6999      	ldr	r1, [r3, #24]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	430a      	orrs	r2, r1
 8003256:	619a      	str	r2, [r3, #24]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003258:	4a17      	ldr	r2, [pc, #92]	; (80032b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 800325a:	2380      	movs	r3, #128	; 0x80
 800325c:	58d3      	ldr	r3, [r2, r3]
 800325e:	4916      	ldr	r1, [pc, #88]	; (80032b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 8003260:	2280      	movs	r2, #128	; 0x80
 8003262:	0312      	lsls	r2, r2, #12
 8003264:	4313      	orrs	r3, r2
 8003266:	2280      	movs	r2, #128	; 0x80
 8003268:	508b      	str	r3, [r1, r2]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	699a      	ldr	r2, [r3, #24]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2180      	movs	r1, #128	; 0x80
 8003276:	01c9      	lsls	r1, r1, #7
 8003278:	430a      	orrs	r2, r1
 800327a:	619a      	str	r2, [r3, #24]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	699a      	ldr	r2, [r3, #24]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2180      	movs	r1, #128	; 0x80
 8003288:	00c9      	lsls	r1, r1, #3
 800328a:	430a      	orrs	r2, r1
 800328c:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	22ff      	movs	r2, #255	; 0xff
 8003294:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2229      	movs	r2, #41	; 0x29
 800329a:	2101      	movs	r1, #1
 800329c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2228      	movs	r2, #40	; 0x28
 80032a2:	2100      	movs	r1, #0
 80032a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	0018      	movs	r0, r3
 80032aa:	46bd      	mov	sp, r7
 80032ac:	b006      	add	sp, #24
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	fffffbff 	.word	0xfffffbff
 80032b4:	40002800 	.word	0x40002800
 80032b8:	40021800 	.word	0x40021800

080032bc <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ca:	2204      	movs	r2, #4
 80032cc:	4013      	ands	r3, r2
 80032ce:	d00b      	beq.n	80032e8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2104      	movs	r1, #4
 80032dc:	430a      	orrs	r2, r1
 80032de:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	0018      	movs	r0, r3
 80032e4:	f000 f808 	bl	80032f8 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2229      	movs	r2, #41	; 0x29
 80032ec:	2101      	movs	r1, #1
 80032ee:	5499      	strb	r1, [r3, r2]
}
 80032f0:	46c0      	nop			; (mov r8, r8)
 80032f2:	46bd      	mov	sp, r7
 80032f4:	b002      	add	sp, #8
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8003300:	46c0      	nop			; (mov r8, r8)
 8003302:	46bd      	mov	sp, r7
 8003304:	b002      	add	sp, #8
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e04a      	b.n	80033b0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	223d      	movs	r2, #61	; 0x3d
 800331e:	5c9b      	ldrb	r3, [r3, r2]
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d107      	bne.n	8003336 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	223c      	movs	r2, #60	; 0x3c
 800332a:	2100      	movs	r1, #0
 800332c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	0018      	movs	r0, r3
 8003332:	f7fd fdf3 	bl	8000f1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	223d      	movs	r2, #61	; 0x3d
 800333a:	2102      	movs	r1, #2
 800333c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	3304      	adds	r3, #4
 8003346:	0019      	movs	r1, r3
 8003348:	0010      	movs	r0, r2
 800334a:	f000 fa09 	bl	8003760 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2248      	movs	r2, #72	; 0x48
 8003352:	2101      	movs	r1, #1
 8003354:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	223e      	movs	r2, #62	; 0x3e
 800335a:	2101      	movs	r1, #1
 800335c:	5499      	strb	r1, [r3, r2]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	223f      	movs	r2, #63	; 0x3f
 8003362:	2101      	movs	r1, #1
 8003364:	5499      	strb	r1, [r3, r2]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2240      	movs	r2, #64	; 0x40
 800336a:	2101      	movs	r1, #1
 800336c:	5499      	strb	r1, [r3, r2]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2241      	movs	r2, #65	; 0x41
 8003372:	2101      	movs	r1, #1
 8003374:	5499      	strb	r1, [r3, r2]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2242      	movs	r2, #66	; 0x42
 800337a:	2101      	movs	r1, #1
 800337c:	5499      	strb	r1, [r3, r2]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2243      	movs	r2, #67	; 0x43
 8003382:	2101      	movs	r1, #1
 8003384:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2244      	movs	r2, #68	; 0x44
 800338a:	2101      	movs	r1, #1
 800338c:	5499      	strb	r1, [r3, r2]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2245      	movs	r2, #69	; 0x45
 8003392:	2101      	movs	r1, #1
 8003394:	5499      	strb	r1, [r3, r2]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2246      	movs	r2, #70	; 0x46
 800339a:	2101      	movs	r1, #1
 800339c:	5499      	strb	r1, [r3, r2]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2247      	movs	r2, #71	; 0x47
 80033a2:	2101      	movs	r1, #1
 80033a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	223d      	movs	r2, #61	; 0x3d
 80033aa:	2101      	movs	r1, #1
 80033ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	0018      	movs	r0, r3
 80033b2:	46bd      	mov	sp, r7
 80033b4:	b002      	add	sp, #8
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	223d      	movs	r2, #61	; 0x3d
 80033c4:	5c9b      	ldrb	r3, [r3, r2]
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d001      	beq.n	80033d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e03d      	b.n	800344c <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	223d      	movs	r2, #61	; 0x3d
 80033d4:	2102      	movs	r1, #2
 80033d6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68da      	ldr	r2, [r3, #12]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2101      	movs	r1, #1
 80033e4:	430a      	orrs	r2, r1
 80033e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a19      	ldr	r2, [pc, #100]	; (8003454 <HAL_TIM_Base_Start_IT+0x9c>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d00a      	beq.n	8003408 <HAL_TIM_Base_Start_IT+0x50>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	2380      	movs	r3, #128	; 0x80
 80033f8:	05db      	lsls	r3, r3, #23
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d004      	beq.n	8003408 <HAL_TIM_Base_Start_IT+0x50>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a15      	ldr	r2, [pc, #84]	; (8003458 <HAL_TIM_Base_Start_IT+0xa0>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d116      	bne.n	8003436 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	4a13      	ldr	r2, [pc, #76]	; (800345c <HAL_TIM_Base_Start_IT+0xa4>)
 8003410:	4013      	ands	r3, r2
 8003412:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2b06      	cmp	r3, #6
 8003418:	d016      	beq.n	8003448 <HAL_TIM_Base_Start_IT+0x90>
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	2380      	movs	r3, #128	; 0x80
 800341e:	025b      	lsls	r3, r3, #9
 8003420:	429a      	cmp	r2, r3
 8003422:	d011      	beq.n	8003448 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2101      	movs	r1, #1
 8003430:	430a      	orrs	r2, r1
 8003432:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003434:	e008      	b.n	8003448 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2101      	movs	r1, #1
 8003442:	430a      	orrs	r2, r1
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	e000      	b.n	800344a <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003448:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	0018      	movs	r0, r3
 800344e:	46bd      	mov	sp, r7
 8003450:	b004      	add	sp, #16
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40012c00 	.word	0x40012c00
 8003458:	40000400 	.word	0x40000400
 800345c:	00010007 	.word	0x00010007

08003460 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68da      	ldr	r2, [r3, #12]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2101      	movs	r1, #1
 8003474:	438a      	bics	r2, r1
 8003476:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	4a0d      	ldr	r2, [pc, #52]	; (80034b4 <HAL_TIM_Base_Stop_IT+0x54>)
 8003480:	4013      	ands	r3, r2
 8003482:	d10d      	bne.n	80034a0 <HAL_TIM_Base_Stop_IT+0x40>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	4a0b      	ldr	r2, [pc, #44]	; (80034b8 <HAL_TIM_Base_Stop_IT+0x58>)
 800348c:	4013      	ands	r3, r2
 800348e:	d107      	bne.n	80034a0 <HAL_TIM_Base_Stop_IT+0x40>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2101      	movs	r1, #1
 800349c:	438a      	bics	r2, r1
 800349e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	223d      	movs	r2, #61	; 0x3d
 80034a4:	2101      	movs	r1, #1
 80034a6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	0018      	movs	r0, r3
 80034ac:	46bd      	mov	sp, r7
 80034ae:	b002      	add	sp, #8
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	46c0      	nop			; (mov r8, r8)
 80034b4:	00001111 	.word	0x00001111
 80034b8:	00000444 	.word	0x00000444

080034bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	2202      	movs	r2, #2
 80034cc:	4013      	ands	r3, r2
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d124      	bne.n	800351c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	2202      	movs	r2, #2
 80034da:	4013      	ands	r3, r2
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d11d      	bne.n	800351c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2203      	movs	r2, #3
 80034e6:	4252      	negs	r2, r2
 80034e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	2203      	movs	r2, #3
 80034f8:	4013      	ands	r3, r2
 80034fa:	d004      	beq.n	8003506 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	0018      	movs	r0, r3
 8003500:	f000 f916 	bl	8003730 <HAL_TIM_IC_CaptureCallback>
 8003504:	e007      	b.n	8003516 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	0018      	movs	r0, r3
 800350a:	f000 f909 	bl	8003720 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	0018      	movs	r0, r3
 8003512:	f000 f915 	bl	8003740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	2204      	movs	r2, #4
 8003524:	4013      	ands	r3, r2
 8003526:	2b04      	cmp	r3, #4
 8003528:	d125      	bne.n	8003576 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	2204      	movs	r2, #4
 8003532:	4013      	ands	r3, r2
 8003534:	2b04      	cmp	r3, #4
 8003536:	d11e      	bne.n	8003576 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2205      	movs	r2, #5
 800353e:	4252      	negs	r2, r2
 8003540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2202      	movs	r2, #2
 8003546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	699a      	ldr	r2, [r3, #24]
 800354e:	23c0      	movs	r3, #192	; 0xc0
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4013      	ands	r3, r2
 8003554:	d004      	beq.n	8003560 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	0018      	movs	r0, r3
 800355a:	f000 f8e9 	bl	8003730 <HAL_TIM_IC_CaptureCallback>
 800355e:	e007      	b.n	8003570 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	0018      	movs	r0, r3
 8003564:	f000 f8dc 	bl	8003720 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	0018      	movs	r0, r3
 800356c:	f000 f8e8 	bl	8003740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	2208      	movs	r2, #8
 800357e:	4013      	ands	r3, r2
 8003580:	2b08      	cmp	r3, #8
 8003582:	d124      	bne.n	80035ce <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	2208      	movs	r2, #8
 800358c:	4013      	ands	r3, r2
 800358e:	2b08      	cmp	r3, #8
 8003590:	d11d      	bne.n	80035ce <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2209      	movs	r2, #9
 8003598:	4252      	negs	r2, r2
 800359a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2204      	movs	r2, #4
 80035a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	69db      	ldr	r3, [r3, #28]
 80035a8:	2203      	movs	r2, #3
 80035aa:	4013      	ands	r3, r2
 80035ac:	d004      	beq.n	80035b8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	0018      	movs	r0, r3
 80035b2:	f000 f8bd 	bl	8003730 <HAL_TIM_IC_CaptureCallback>
 80035b6:	e007      	b.n	80035c8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	0018      	movs	r0, r3
 80035bc:	f000 f8b0 	bl	8003720 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	0018      	movs	r0, r3
 80035c4:	f000 f8bc 	bl	8003740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	2210      	movs	r2, #16
 80035d6:	4013      	ands	r3, r2
 80035d8:	2b10      	cmp	r3, #16
 80035da:	d125      	bne.n	8003628 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	2210      	movs	r2, #16
 80035e4:	4013      	ands	r3, r2
 80035e6:	2b10      	cmp	r3, #16
 80035e8:	d11e      	bne.n	8003628 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2211      	movs	r2, #17
 80035f0:	4252      	negs	r2, r2
 80035f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2208      	movs	r2, #8
 80035f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	69da      	ldr	r2, [r3, #28]
 8003600:	23c0      	movs	r3, #192	; 0xc0
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4013      	ands	r3, r2
 8003606:	d004      	beq.n	8003612 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	0018      	movs	r0, r3
 800360c:	f000 f890 	bl	8003730 <HAL_TIM_IC_CaptureCallback>
 8003610:	e007      	b.n	8003622 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	0018      	movs	r0, r3
 8003616:	f000 f883 	bl	8003720 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	0018      	movs	r0, r3
 800361e:	f000 f88f 	bl	8003740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	2201      	movs	r2, #1
 8003630:	4013      	ands	r3, r2
 8003632:	2b01      	cmp	r3, #1
 8003634:	d10f      	bne.n	8003656 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	2201      	movs	r2, #1
 800363e:	4013      	ands	r3, r2
 8003640:	2b01      	cmp	r3, #1
 8003642:	d108      	bne.n	8003656 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2202      	movs	r2, #2
 800364a:	4252      	negs	r2, r2
 800364c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	0018      	movs	r0, r3
 8003652:	f7fd fbd1 	bl	8000df8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	2280      	movs	r2, #128	; 0x80
 800365e:	4013      	ands	r3, r2
 8003660:	2b80      	cmp	r3, #128	; 0x80
 8003662:	d10f      	bne.n	8003684 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	2280      	movs	r2, #128	; 0x80
 800366c:	4013      	ands	r3, r2
 800366e:	2b80      	cmp	r3, #128	; 0x80
 8003670:	d108      	bne.n	8003684 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2281      	movs	r2, #129	; 0x81
 8003678:	4252      	negs	r2, r2
 800367a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	0018      	movs	r0, r3
 8003680:	f000 f8ec 	bl	800385c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	691a      	ldr	r2, [r3, #16]
 800368a:	2380      	movs	r3, #128	; 0x80
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	401a      	ands	r2, r3
 8003690:	2380      	movs	r3, #128	; 0x80
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	429a      	cmp	r2, r3
 8003696:	d10e      	bne.n	80036b6 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	2280      	movs	r2, #128	; 0x80
 80036a0:	4013      	ands	r3, r2
 80036a2:	2b80      	cmp	r3, #128	; 0x80
 80036a4:	d107      	bne.n	80036b6 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a1c      	ldr	r2, [pc, #112]	; (800371c <HAL_TIM_IRQHandler+0x260>)
 80036ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	0018      	movs	r0, r3
 80036b2:	f000 f8db 	bl	800386c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	2240      	movs	r2, #64	; 0x40
 80036be:	4013      	ands	r3, r2
 80036c0:	2b40      	cmp	r3, #64	; 0x40
 80036c2:	d10f      	bne.n	80036e4 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	2240      	movs	r2, #64	; 0x40
 80036cc:	4013      	ands	r3, r2
 80036ce:	2b40      	cmp	r3, #64	; 0x40
 80036d0:	d108      	bne.n	80036e4 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2241      	movs	r2, #65	; 0x41
 80036d8:	4252      	negs	r2, r2
 80036da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	0018      	movs	r0, r3
 80036e0:	f000 f836 	bl	8003750 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	2220      	movs	r2, #32
 80036ec:	4013      	ands	r3, r2
 80036ee:	2b20      	cmp	r3, #32
 80036f0:	d10f      	bne.n	8003712 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	2220      	movs	r2, #32
 80036fa:	4013      	ands	r3, r2
 80036fc:	2b20      	cmp	r3, #32
 80036fe:	d108      	bne.n	8003712 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2221      	movs	r2, #33	; 0x21
 8003706:	4252      	negs	r2, r2
 8003708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	0018      	movs	r0, r3
 800370e:	f000 f89d 	bl	800384c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003712:	46c0      	nop			; (mov r8, r8)
 8003714:	46bd      	mov	sp, r7
 8003716:	b002      	add	sp, #8
 8003718:	bd80      	pop	{r7, pc}
 800371a:	46c0      	nop			; (mov r8, r8)
 800371c:	fffffeff 	.word	0xfffffeff

08003720 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003728:	46c0      	nop			; (mov r8, r8)
 800372a:	46bd      	mov	sp, r7
 800372c:	b002      	add	sp, #8
 800372e:	bd80      	pop	{r7, pc}

08003730 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003738:	46c0      	nop			; (mov r8, r8)
 800373a:	46bd      	mov	sp, r7
 800373c:	b002      	add	sp, #8
 800373e:	bd80      	pop	{r7, pc}

08003740 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003748:	46c0      	nop			; (mov r8, r8)
 800374a:	46bd      	mov	sp, r7
 800374c:	b002      	add	sp, #8
 800374e:	bd80      	pop	{r7, pc}

08003750 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003758:	46c0      	nop			; (mov r8, r8)
 800375a:	46bd      	mov	sp, r7
 800375c:	b002      	add	sp, #8
 800375e:	bd80      	pop	{r7, pc}

08003760 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a30      	ldr	r2, [pc, #192]	; (8003834 <TIM_Base_SetConfig+0xd4>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d008      	beq.n	800378a <TIM_Base_SetConfig+0x2a>
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	2380      	movs	r3, #128	; 0x80
 800377c:	05db      	lsls	r3, r3, #23
 800377e:	429a      	cmp	r2, r3
 8003780:	d003      	beq.n	800378a <TIM_Base_SetConfig+0x2a>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a2c      	ldr	r2, [pc, #176]	; (8003838 <TIM_Base_SetConfig+0xd8>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d108      	bne.n	800379c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2270      	movs	r2, #112	; 0x70
 800378e:	4393      	bics	r3, r2
 8003790:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	4313      	orrs	r3, r2
 800379a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a25      	ldr	r2, [pc, #148]	; (8003834 <TIM_Base_SetConfig+0xd4>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d014      	beq.n	80037ce <TIM_Base_SetConfig+0x6e>
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	2380      	movs	r3, #128	; 0x80
 80037a8:	05db      	lsls	r3, r3, #23
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d00f      	beq.n	80037ce <TIM_Base_SetConfig+0x6e>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a21      	ldr	r2, [pc, #132]	; (8003838 <TIM_Base_SetConfig+0xd8>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d00b      	beq.n	80037ce <TIM_Base_SetConfig+0x6e>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a20      	ldr	r2, [pc, #128]	; (800383c <TIM_Base_SetConfig+0xdc>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d007      	beq.n	80037ce <TIM_Base_SetConfig+0x6e>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a1f      	ldr	r2, [pc, #124]	; (8003840 <TIM_Base_SetConfig+0xe0>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d003      	beq.n	80037ce <TIM_Base_SetConfig+0x6e>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a1e      	ldr	r2, [pc, #120]	; (8003844 <TIM_Base_SetConfig+0xe4>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d108      	bne.n	80037e0 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	4a1d      	ldr	r2, [pc, #116]	; (8003848 <TIM_Base_SetConfig+0xe8>)
 80037d2:	4013      	ands	r3, r2
 80037d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	4313      	orrs	r3, r2
 80037de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2280      	movs	r2, #128	; 0x80
 80037e4:	4393      	bics	r3, r2
 80037e6:	001a      	movs	r2, r3
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	689a      	ldr	r2, [r3, #8]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a0a      	ldr	r2, [pc, #40]	; (8003834 <TIM_Base_SetConfig+0xd4>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d007      	beq.n	800381e <TIM_Base_SetConfig+0xbe>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a0b      	ldr	r2, [pc, #44]	; (8003840 <TIM_Base_SetConfig+0xe0>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d003      	beq.n	800381e <TIM_Base_SetConfig+0xbe>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a0a      	ldr	r2, [pc, #40]	; (8003844 <TIM_Base_SetConfig+0xe4>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d103      	bne.n	8003826 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	691a      	ldr	r2, [r3, #16]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	615a      	str	r2, [r3, #20]
}
 800382c:	46c0      	nop			; (mov r8, r8)
 800382e:	46bd      	mov	sp, r7
 8003830:	b004      	add	sp, #16
 8003832:	bd80      	pop	{r7, pc}
 8003834:	40012c00 	.word	0x40012c00
 8003838:	40000400 	.word	0x40000400
 800383c:	40002000 	.word	0x40002000
 8003840:	40014400 	.word	0x40014400
 8003844:	40014800 	.word	0x40014800
 8003848:	fffffcff 	.word	0xfffffcff

0800384c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003854:	46c0      	nop			; (mov r8, r8)
 8003856:	46bd      	mov	sp, r7
 8003858:	b002      	add	sp, #8
 800385a:	bd80      	pop	{r7, pc}

0800385c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003864:	46c0      	nop			; (mov r8, r8)
 8003866:	46bd      	mov	sp, r7
 8003868:	b002      	add	sp, #8
 800386a:	bd80      	pop	{r7, pc}

0800386c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003874:	46c0      	nop			; (mov r8, r8)
 8003876:	46bd      	mov	sp, r7
 8003878:	b002      	add	sp, #8
 800387a:	bd80      	pop	{r7, pc}

0800387c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e046      	b.n	800391c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2288      	movs	r2, #136	; 0x88
 8003892:	589b      	ldr	r3, [r3, r2]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d107      	bne.n	80038a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2284      	movs	r2, #132	; 0x84
 800389c:	2100      	movs	r1, #0
 800389e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	0018      	movs	r0, r3
 80038a4:	f7fd fb62 	bl	8000f6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2288      	movs	r2, #136	; 0x88
 80038ac:	2124      	movs	r1, #36	; 0x24
 80038ae:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2101      	movs	r1, #1
 80038bc:	438a      	bics	r2, r1
 80038be:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	0018      	movs	r0, r3
 80038c4:	f000 fc12 	bl	80040ec <UART_SetConfig>
 80038c8:	0003      	movs	r3, r0
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d101      	bne.n	80038d2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e024      	b.n	800391c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	0018      	movs	r0, r3
 80038de:	f000 fe7d 	bl	80045dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	685a      	ldr	r2, [r3, #4]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	490d      	ldr	r1, [pc, #52]	; (8003924 <HAL_UART_Init+0xa8>)
 80038ee:	400a      	ands	r2, r1
 80038f0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689a      	ldr	r2, [r3, #8]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	212a      	movs	r1, #42	; 0x2a
 80038fe:	438a      	bics	r2, r1
 8003900:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2101      	movs	r1, #1
 800390e:	430a      	orrs	r2, r1
 8003910:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	0018      	movs	r0, r3
 8003916:	f000 ff15 	bl	8004744 <UART_CheckIdleState>
 800391a:	0003      	movs	r3, r0
}
 800391c:	0018      	movs	r0, r3
 800391e:	46bd      	mov	sp, r7
 8003920:	b002      	add	sp, #8
 8003922:	bd80      	pop	{r7, pc}
 8003924:	ffffb7ff 	.word	0xffffb7ff

08003928 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b08a      	sub	sp, #40	; 0x28
 800392c:	af02      	add	r7, sp, #8
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	603b      	str	r3, [r7, #0]
 8003934:	1dbb      	adds	r3, r7, #6
 8003936:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2288      	movs	r2, #136	; 0x88
 800393c:	589b      	ldr	r3, [r3, r2]
 800393e:	2b20      	cmp	r3, #32
 8003940:	d000      	beq.n	8003944 <HAL_UART_Transmit+0x1c>
 8003942:	e088      	b.n	8003a56 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <HAL_UART_Transmit+0x2a>
 800394a:	1dbb      	adds	r3, r7, #6
 800394c:	881b      	ldrh	r3, [r3, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e080      	b.n	8003a58 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	689a      	ldr	r2, [r3, #8]
 800395a:	2380      	movs	r3, #128	; 0x80
 800395c:	015b      	lsls	r3, r3, #5
 800395e:	429a      	cmp	r2, r3
 8003960:	d109      	bne.n	8003976 <HAL_UART_Transmit+0x4e>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d105      	bne.n	8003976 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	2201      	movs	r2, #1
 800396e:	4013      	ands	r3, r2
 8003970:	d001      	beq.n	8003976 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e070      	b.n	8003a58 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2290      	movs	r2, #144	; 0x90
 800397a:	2100      	movs	r1, #0
 800397c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2288      	movs	r2, #136	; 0x88
 8003982:	2121      	movs	r1, #33	; 0x21
 8003984:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003986:	f7fd fcbb 	bl	8001300 <HAL_GetTick>
 800398a:	0003      	movs	r3, r0
 800398c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	1dba      	adds	r2, r7, #6
 8003992:	2154      	movs	r1, #84	; 0x54
 8003994:	8812      	ldrh	r2, [r2, #0]
 8003996:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	1dba      	adds	r2, r7, #6
 800399c:	2156      	movs	r1, #86	; 0x56
 800399e:	8812      	ldrh	r2, [r2, #0]
 80039a0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	689a      	ldr	r2, [r3, #8]
 80039a6:	2380      	movs	r3, #128	; 0x80
 80039a8:	015b      	lsls	r3, r3, #5
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d108      	bne.n	80039c0 <HAL_UART_Transmit+0x98>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d104      	bne.n	80039c0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80039b6:	2300      	movs	r3, #0
 80039b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	61bb      	str	r3, [r7, #24]
 80039be:	e003      	b.n	80039c8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039c4:	2300      	movs	r3, #0
 80039c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039c8:	e02c      	b.n	8003a24 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	0013      	movs	r3, r2
 80039d4:	2200      	movs	r2, #0
 80039d6:	2180      	movs	r1, #128	; 0x80
 80039d8:	f000 ff02 	bl	80047e0 <UART_WaitOnFlagUntilTimeout>
 80039dc:	1e03      	subs	r3, r0, #0
 80039de:	d001      	beq.n	80039e4 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e039      	b.n	8003a58 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10b      	bne.n	8003a02 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	881b      	ldrh	r3, [r3, #0]
 80039ee:	001a      	movs	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	05d2      	lsls	r2, r2, #23
 80039f6:	0dd2      	lsrs	r2, r2, #23
 80039f8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	3302      	adds	r3, #2
 80039fe:	61bb      	str	r3, [r7, #24]
 8003a00:	e007      	b.n	8003a12 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	781a      	ldrb	r2, [r3, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2256      	movs	r2, #86	; 0x56
 8003a16:	5a9b      	ldrh	r3, [r3, r2]
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	b299      	uxth	r1, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2256      	movs	r2, #86	; 0x56
 8003a22:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2256      	movs	r2, #86	; 0x56
 8003a28:	5a9b      	ldrh	r3, [r3, r2]
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1cc      	bne.n	80039ca <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	9300      	str	r3, [sp, #0]
 8003a38:	0013      	movs	r3, r2
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	2140      	movs	r1, #64	; 0x40
 8003a3e:	f000 fecf 	bl	80047e0 <UART_WaitOnFlagUntilTimeout>
 8003a42:	1e03      	subs	r3, r0, #0
 8003a44:	d001      	beq.n	8003a4a <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e006      	b.n	8003a58 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2288      	movs	r2, #136	; 0x88
 8003a4e:	2120      	movs	r1, #32
 8003a50:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003a52:	2300      	movs	r3, #0
 8003a54:	e000      	b.n	8003a58 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8003a56:	2302      	movs	r3, #2
  }
}
 8003a58:	0018      	movs	r0, r3
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	b008      	add	sp, #32
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a60:	b5b0      	push	{r4, r5, r7, lr}
 8003a62:	b0aa      	sub	sp, #168	; 0xa8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	22a4      	movs	r2, #164	; 0xa4
 8003a70:	18b9      	adds	r1, r7, r2
 8003a72:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	20a0      	movs	r0, #160	; 0xa0
 8003a7c:	1839      	adds	r1, r7, r0
 8003a7e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	249c      	movs	r4, #156	; 0x9c
 8003a88:	1939      	adds	r1, r7, r4
 8003a8a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003a8c:	0011      	movs	r1, r2
 8003a8e:	18bb      	adds	r3, r7, r2
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4aa2      	ldr	r2, [pc, #648]	; (8003d1c <HAL_UART_IRQHandler+0x2bc>)
 8003a94:	4013      	ands	r3, r2
 8003a96:	2298      	movs	r2, #152	; 0x98
 8003a98:	18bd      	adds	r5, r7, r2
 8003a9a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8003a9c:	18bb      	adds	r3, r7, r2
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d11a      	bne.n	8003ada <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003aa4:	187b      	adds	r3, r7, r1
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2220      	movs	r2, #32
 8003aaa:	4013      	ands	r3, r2
 8003aac:	d015      	beq.n	8003ada <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003aae:	183b      	adds	r3, r7, r0
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2220      	movs	r2, #32
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	d105      	bne.n	8003ac4 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003ab8:	193b      	adds	r3, r7, r4
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	2380      	movs	r3, #128	; 0x80
 8003abe:	055b      	lsls	r3, r3, #21
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	d00a      	beq.n	8003ada <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d100      	bne.n	8003ace <HAL_UART_IRQHandler+0x6e>
 8003acc:	e2dc      	b.n	8004088 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	0010      	movs	r0, r2
 8003ad6:	4798      	blx	r3
      }
      return;
 8003ad8:	e2d6      	b.n	8004088 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003ada:	2398      	movs	r3, #152	; 0x98
 8003adc:	18fb      	adds	r3, r7, r3
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d100      	bne.n	8003ae6 <HAL_UART_IRQHandler+0x86>
 8003ae4:	e122      	b.n	8003d2c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003ae6:	239c      	movs	r3, #156	; 0x9c
 8003ae8:	18fb      	adds	r3, r7, r3
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a8c      	ldr	r2, [pc, #560]	; (8003d20 <HAL_UART_IRQHandler+0x2c0>)
 8003aee:	4013      	ands	r3, r2
 8003af0:	d106      	bne.n	8003b00 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003af2:	23a0      	movs	r3, #160	; 0xa0
 8003af4:	18fb      	adds	r3, r7, r3
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a8a      	ldr	r2, [pc, #552]	; (8003d24 <HAL_UART_IRQHandler+0x2c4>)
 8003afa:	4013      	ands	r3, r2
 8003afc:	d100      	bne.n	8003b00 <HAL_UART_IRQHandler+0xa0>
 8003afe:	e115      	b.n	8003d2c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003b00:	23a4      	movs	r3, #164	; 0xa4
 8003b02:	18fb      	adds	r3, r7, r3
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2201      	movs	r2, #1
 8003b08:	4013      	ands	r3, r2
 8003b0a:	d012      	beq.n	8003b32 <HAL_UART_IRQHandler+0xd2>
 8003b0c:	23a0      	movs	r3, #160	; 0xa0
 8003b0e:	18fb      	adds	r3, r7, r3
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	2380      	movs	r3, #128	; 0x80
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	4013      	ands	r3, r2
 8003b18:	d00b      	beq.n	8003b32 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2290      	movs	r2, #144	; 0x90
 8003b26:	589b      	ldr	r3, [r3, r2]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2190      	movs	r1, #144	; 0x90
 8003b30:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b32:	23a4      	movs	r3, #164	; 0xa4
 8003b34:	18fb      	adds	r3, r7, r3
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2202      	movs	r2, #2
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	d011      	beq.n	8003b62 <HAL_UART_IRQHandler+0x102>
 8003b3e:	239c      	movs	r3, #156	; 0x9c
 8003b40:	18fb      	adds	r3, r7, r3
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2201      	movs	r2, #1
 8003b46:	4013      	ands	r3, r2
 8003b48:	d00b      	beq.n	8003b62 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2202      	movs	r2, #2
 8003b50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2290      	movs	r2, #144	; 0x90
 8003b56:	589b      	ldr	r3, [r3, r2]
 8003b58:	2204      	movs	r2, #4
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2190      	movs	r1, #144	; 0x90
 8003b60:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b62:	23a4      	movs	r3, #164	; 0xa4
 8003b64:	18fb      	adds	r3, r7, r3
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2204      	movs	r2, #4
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	d011      	beq.n	8003b92 <HAL_UART_IRQHandler+0x132>
 8003b6e:	239c      	movs	r3, #156	; 0x9c
 8003b70:	18fb      	adds	r3, r7, r3
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2201      	movs	r2, #1
 8003b76:	4013      	ands	r3, r2
 8003b78:	d00b      	beq.n	8003b92 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2204      	movs	r2, #4
 8003b80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2290      	movs	r2, #144	; 0x90
 8003b86:	589b      	ldr	r3, [r3, r2]
 8003b88:	2202      	movs	r2, #2
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2190      	movs	r1, #144	; 0x90
 8003b90:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003b92:	23a4      	movs	r3, #164	; 0xa4
 8003b94:	18fb      	adds	r3, r7, r3
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2208      	movs	r2, #8
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	d017      	beq.n	8003bce <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003b9e:	23a0      	movs	r3, #160	; 0xa0
 8003ba0:	18fb      	adds	r3, r7, r3
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2220      	movs	r2, #32
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	d105      	bne.n	8003bb6 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003baa:	239c      	movs	r3, #156	; 0x9c
 8003bac:	18fb      	adds	r3, r7, r3
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a5b      	ldr	r2, [pc, #364]	; (8003d20 <HAL_UART_IRQHandler+0x2c0>)
 8003bb2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003bb4:	d00b      	beq.n	8003bce <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2208      	movs	r2, #8
 8003bbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2290      	movs	r2, #144	; 0x90
 8003bc2:	589b      	ldr	r3, [r3, r2]
 8003bc4:	2208      	movs	r2, #8
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2190      	movs	r1, #144	; 0x90
 8003bcc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003bce:	23a4      	movs	r3, #164	; 0xa4
 8003bd0:	18fb      	adds	r3, r7, r3
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	2380      	movs	r3, #128	; 0x80
 8003bd6:	011b      	lsls	r3, r3, #4
 8003bd8:	4013      	ands	r3, r2
 8003bda:	d013      	beq.n	8003c04 <HAL_UART_IRQHandler+0x1a4>
 8003bdc:	23a0      	movs	r3, #160	; 0xa0
 8003bde:	18fb      	adds	r3, r7, r3
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	2380      	movs	r3, #128	; 0x80
 8003be4:	04db      	lsls	r3, r3, #19
 8003be6:	4013      	ands	r3, r2
 8003be8:	d00c      	beq.n	8003c04 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2280      	movs	r2, #128	; 0x80
 8003bf0:	0112      	lsls	r2, r2, #4
 8003bf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2290      	movs	r2, #144	; 0x90
 8003bf8:	589b      	ldr	r3, [r3, r2]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2190      	movs	r1, #144	; 0x90
 8003c02:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2290      	movs	r2, #144	; 0x90
 8003c08:	589b      	ldr	r3, [r3, r2]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d100      	bne.n	8003c10 <HAL_UART_IRQHandler+0x1b0>
 8003c0e:	e23d      	b.n	800408c <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003c10:	23a4      	movs	r3, #164	; 0xa4
 8003c12:	18fb      	adds	r3, r7, r3
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2220      	movs	r2, #32
 8003c18:	4013      	ands	r3, r2
 8003c1a:	d015      	beq.n	8003c48 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003c1c:	23a0      	movs	r3, #160	; 0xa0
 8003c1e:	18fb      	adds	r3, r7, r3
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2220      	movs	r2, #32
 8003c24:	4013      	ands	r3, r2
 8003c26:	d106      	bne.n	8003c36 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003c28:	239c      	movs	r3, #156	; 0x9c
 8003c2a:	18fb      	adds	r3, r7, r3
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	2380      	movs	r3, #128	; 0x80
 8003c30:	055b      	lsls	r3, r3, #21
 8003c32:	4013      	ands	r3, r2
 8003c34:	d008      	beq.n	8003c48 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d004      	beq.n	8003c48 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	0010      	movs	r0, r2
 8003c46:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2290      	movs	r2, #144	; 0x90
 8003c4c:	589b      	ldr	r3, [r3, r2]
 8003c4e:	2194      	movs	r1, #148	; 0x94
 8003c50:	187a      	adds	r2, r7, r1
 8003c52:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	2240      	movs	r2, #64	; 0x40
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	2b40      	cmp	r3, #64	; 0x40
 8003c60:	d004      	beq.n	8003c6c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003c62:	187b      	adds	r3, r7, r1
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2228      	movs	r2, #40	; 0x28
 8003c68:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c6a:	d04c      	beq.n	8003d06 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	0018      	movs	r0, r3
 8003c70:	f000 ff64 	bl	8004b3c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	2240      	movs	r2, #64	; 0x40
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	2b40      	cmp	r3, #64	; 0x40
 8003c80:	d13c      	bne.n	8003cfc <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c82:	f3ef 8310 	mrs	r3, PRIMASK
 8003c86:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003c88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c8a:	2090      	movs	r0, #144	; 0x90
 8003c8c:	183a      	adds	r2, r7, r0
 8003c8e:	6013      	str	r3, [r2, #0]
 8003c90:	2301      	movs	r3, #1
 8003c92:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c96:	f383 8810 	msr	PRIMASK, r3
}
 8003c9a:	46c0      	nop			; (mov r8, r8)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689a      	ldr	r2, [r3, #8]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2140      	movs	r1, #64	; 0x40
 8003ca8:	438a      	bics	r2, r1
 8003caa:	609a      	str	r2, [r3, #8]
 8003cac:	183b      	adds	r3, r7, r0
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003cb4:	f383 8810 	msr	PRIMASK, r3
}
 8003cb8:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2280      	movs	r2, #128	; 0x80
 8003cbe:	589b      	ldr	r3, [r3, r2]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d016      	beq.n	8003cf2 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2280      	movs	r2, #128	; 0x80
 8003cc8:	589b      	ldr	r3, [r3, r2]
 8003cca:	4a17      	ldr	r2, [pc, #92]	; (8003d28 <HAL_UART_IRQHandler+0x2c8>)
 8003ccc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2280      	movs	r2, #128	; 0x80
 8003cd2:	589b      	ldr	r3, [r3, r2]
 8003cd4:	0018      	movs	r0, r3
 8003cd6:	f7fd fd91 	bl	80017fc <HAL_DMA_Abort_IT>
 8003cda:	1e03      	subs	r3, r0, #0
 8003cdc:	d01c      	beq.n	8003d18 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2280      	movs	r2, #128	; 0x80
 8003ce2:	589b      	ldr	r3, [r3, r2]
 8003ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	2180      	movs	r1, #128	; 0x80
 8003cea:	5852      	ldr	r2, [r2, r1]
 8003cec:	0010      	movs	r0, r2
 8003cee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cf0:	e012      	b.n	8003d18 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	0018      	movs	r0, r3
 8003cf6:	f000 f9f1 	bl	80040dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cfa:	e00d      	b.n	8003d18 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	0018      	movs	r0, r3
 8003d00:	f000 f9ec 	bl	80040dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d04:	e008      	b.n	8003d18 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	0018      	movs	r0, r3
 8003d0a:	f000 f9e7 	bl	80040dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2290      	movs	r2, #144	; 0x90
 8003d12:	2100      	movs	r1, #0
 8003d14:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003d16:	e1b9      	b.n	800408c <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d18:	46c0      	nop			; (mov r8, r8)
    return;
 8003d1a:	e1b7      	b.n	800408c <HAL_UART_IRQHandler+0x62c>
 8003d1c:	0000080f 	.word	0x0000080f
 8003d20:	10000001 	.word	0x10000001
 8003d24:	04000120 	.word	0x04000120
 8003d28:	08004e01 	.word	0x08004e01

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d000      	beq.n	8003d36 <HAL_UART_IRQHandler+0x2d6>
 8003d34:	e13e      	b.n	8003fb4 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003d36:	23a4      	movs	r3, #164	; 0xa4
 8003d38:	18fb      	adds	r3, r7, r3
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2210      	movs	r2, #16
 8003d3e:	4013      	ands	r3, r2
 8003d40:	d100      	bne.n	8003d44 <HAL_UART_IRQHandler+0x2e4>
 8003d42:	e137      	b.n	8003fb4 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003d44:	23a0      	movs	r3, #160	; 0xa0
 8003d46:	18fb      	adds	r3, r7, r3
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2210      	movs	r2, #16
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	d100      	bne.n	8003d52 <HAL_UART_IRQHandler+0x2f2>
 8003d50:	e130      	b.n	8003fb4 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2210      	movs	r2, #16
 8003d58:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	2240      	movs	r2, #64	; 0x40
 8003d62:	4013      	ands	r3, r2
 8003d64:	2b40      	cmp	r3, #64	; 0x40
 8003d66:	d000      	beq.n	8003d6a <HAL_UART_IRQHandler+0x30a>
 8003d68:	e0a4      	b.n	8003eb4 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2280      	movs	r2, #128	; 0x80
 8003d6e:	589b      	ldr	r3, [r3, r2]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	217e      	movs	r1, #126	; 0x7e
 8003d76:	187b      	adds	r3, r7, r1
 8003d78:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003d7a:	187b      	adds	r3, r7, r1
 8003d7c:	881b      	ldrh	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d100      	bne.n	8003d84 <HAL_UART_IRQHandler+0x324>
 8003d82:	e185      	b.n	8004090 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	225c      	movs	r2, #92	; 0x5c
 8003d88:	5a9b      	ldrh	r3, [r3, r2]
 8003d8a:	187a      	adds	r2, r7, r1
 8003d8c:	8812      	ldrh	r2, [r2, #0]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d300      	bcc.n	8003d94 <HAL_UART_IRQHandler+0x334>
 8003d92:	e17d      	b.n	8004090 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	187a      	adds	r2, r7, r1
 8003d98:	215e      	movs	r1, #94	; 0x5e
 8003d9a:	8812      	ldrh	r2, [r2, #0]
 8003d9c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2280      	movs	r2, #128	; 0x80
 8003da2:	589b      	ldr	r3, [r3, r2]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2220      	movs	r2, #32
 8003daa:	4013      	ands	r3, r2
 8003dac:	d170      	bne.n	8003e90 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dae:	f3ef 8310 	mrs	r3, PRIMASK
 8003db2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003db6:	67bb      	str	r3, [r7, #120]	; 0x78
 8003db8:	2301      	movs	r3, #1
 8003dba:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dbe:	f383 8810 	msr	PRIMASK, r3
}
 8003dc2:	46c0      	nop			; (mov r8, r8)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	49b4      	ldr	r1, [pc, #720]	; (80040a0 <HAL_UART_IRQHandler+0x640>)
 8003dd0:	400a      	ands	r2, r1
 8003dd2:	601a      	str	r2, [r3, #0]
 8003dd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dd6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dda:	f383 8810 	msr	PRIMASK, r3
}
 8003dde:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003de0:	f3ef 8310 	mrs	r3, PRIMASK
 8003de4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003de8:	677b      	str	r3, [r7, #116]	; 0x74
 8003dea:	2301      	movs	r3, #1
 8003dec:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003df0:	f383 8810 	msr	PRIMASK, r3
}
 8003df4:	46c0      	nop			; (mov r8, r8)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2101      	movs	r1, #1
 8003e02:	438a      	bics	r2, r1
 8003e04:	609a      	str	r2, [r3, #8]
 8003e06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e08:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e0c:	f383 8810 	msr	PRIMASK, r3
}
 8003e10:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e12:	f3ef 8310 	mrs	r3, PRIMASK
 8003e16:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003e18:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e1a:	673b      	str	r3, [r7, #112]	; 0x70
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e22:	f383 8810 	msr	PRIMASK, r3
}
 8003e26:	46c0      	nop			; (mov r8, r8)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	689a      	ldr	r2, [r3, #8]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2140      	movs	r1, #64	; 0x40
 8003e34:	438a      	bics	r2, r1
 8003e36:	609a      	str	r2, [r3, #8]
 8003e38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e3a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e3e:	f383 8810 	msr	PRIMASK, r3
}
 8003e42:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	228c      	movs	r2, #140	; 0x8c
 8003e48:	2120      	movs	r1, #32
 8003e4a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e52:	f3ef 8310 	mrs	r3, PRIMASK
 8003e56:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003e58:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e62:	f383 8810 	msr	PRIMASK, r3
}
 8003e66:	46c0      	nop			; (mov r8, r8)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2110      	movs	r1, #16
 8003e74:	438a      	bics	r2, r1
 8003e76:	601a      	str	r2, [r3, #0]
 8003e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e7a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e7e:	f383 8810 	msr	PRIMASK, r3
}
 8003e82:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2280      	movs	r2, #128	; 0x80
 8003e88:	589b      	ldr	r3, [r3, r2]
 8003e8a:	0018      	movs	r0, r3
 8003e8c:	f7fd fc54 	bl	8001738 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2202      	movs	r2, #2
 8003e94:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	225c      	movs	r2, #92	; 0x5c
 8003e9a:	5a9a      	ldrh	r2, [r3, r2]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	215e      	movs	r1, #94	; 0x5e
 8003ea0:	5a5b      	ldrh	r3, [r3, r1]
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	0011      	movs	r1, r2
 8003eac:	0018      	movs	r0, r3
 8003eae:	f7fc fed3 	bl	8000c58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003eb2:	e0ed      	b.n	8004090 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	225c      	movs	r2, #92	; 0x5c
 8003eb8:	5a99      	ldrh	r1, [r3, r2]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	225e      	movs	r2, #94	; 0x5e
 8003ebe:	5a9b      	ldrh	r3, [r3, r2]
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	208e      	movs	r0, #142	; 0x8e
 8003ec4:	183b      	adds	r3, r7, r0
 8003ec6:	1a8a      	subs	r2, r1, r2
 8003ec8:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	225e      	movs	r2, #94	; 0x5e
 8003ece:	5a9b      	ldrh	r3, [r3, r2]
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d100      	bne.n	8003ed8 <HAL_UART_IRQHandler+0x478>
 8003ed6:	e0dd      	b.n	8004094 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8003ed8:	183b      	adds	r3, r7, r0
 8003eda:	881b      	ldrh	r3, [r3, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d100      	bne.n	8003ee2 <HAL_UART_IRQHandler+0x482>
 8003ee0:	e0d8      	b.n	8004094 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ee2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ee6:	60fb      	str	r3, [r7, #12]
  return(result);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003eea:	2488      	movs	r4, #136	; 0x88
 8003eec:	193a      	adds	r2, r7, r4
 8003eee:	6013      	str	r3, [r2, #0]
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	f383 8810 	msr	PRIMASK, r3
}
 8003efa:	46c0      	nop			; (mov r8, r8)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4967      	ldr	r1, [pc, #412]	; (80040a4 <HAL_UART_IRQHandler+0x644>)
 8003f08:	400a      	ands	r2, r1
 8003f0a:	601a      	str	r2, [r3, #0]
 8003f0c:	193b      	adds	r3, r7, r4
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f383 8810 	msr	PRIMASK, r3
}
 8003f18:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f1a:	f3ef 8310 	mrs	r3, PRIMASK
 8003f1e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003f20:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003f22:	2484      	movs	r4, #132	; 0x84
 8003f24:	193a      	adds	r2, r7, r4
 8003f26:	6013      	str	r3, [r2, #0]
 8003f28:	2301      	movs	r3, #1
 8003f2a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	f383 8810 	msr	PRIMASK, r3
}
 8003f32:	46c0      	nop			; (mov r8, r8)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	689a      	ldr	r2, [r3, #8]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	495a      	ldr	r1, [pc, #360]	; (80040a8 <HAL_UART_IRQHandler+0x648>)
 8003f40:	400a      	ands	r2, r1
 8003f42:	609a      	str	r2, [r3, #8]
 8003f44:	193b      	adds	r3, r7, r4
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f4a:	6a3b      	ldr	r3, [r7, #32]
 8003f4c:	f383 8810 	msr	PRIMASK, r3
}
 8003f50:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	228c      	movs	r2, #140	; 0x8c
 8003f56:	2120      	movs	r1, #32
 8003f58:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f66:	f3ef 8310 	mrs	r3, PRIMASK
 8003f6a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f6e:	2480      	movs	r4, #128	; 0x80
 8003f70:	193a      	adds	r2, r7, r4
 8003f72:	6013      	str	r3, [r2, #0]
 8003f74:	2301      	movs	r3, #1
 8003f76:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f7a:	f383 8810 	msr	PRIMASK, r3
}
 8003f7e:	46c0      	nop			; (mov r8, r8)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2110      	movs	r1, #16
 8003f8c:	438a      	bics	r2, r1
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	193b      	adds	r3, r7, r4
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f98:	f383 8810 	msr	PRIMASK, r3
}
 8003f9c:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2202      	movs	r2, #2
 8003fa2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003fa4:	183b      	adds	r3, r7, r0
 8003fa6:	881a      	ldrh	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	0011      	movs	r1, r2
 8003fac:	0018      	movs	r0, r3
 8003fae:	f7fc fe53 	bl	8000c58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003fb2:	e06f      	b.n	8004094 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003fb4:	23a4      	movs	r3, #164	; 0xa4
 8003fb6:	18fb      	adds	r3, r7, r3
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	2380      	movs	r3, #128	; 0x80
 8003fbc:	035b      	lsls	r3, r3, #13
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	d010      	beq.n	8003fe4 <HAL_UART_IRQHandler+0x584>
 8003fc2:	239c      	movs	r3, #156	; 0x9c
 8003fc4:	18fb      	adds	r3, r7, r3
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	2380      	movs	r3, #128	; 0x80
 8003fca:	03db      	lsls	r3, r3, #15
 8003fcc:	4013      	ands	r3, r2
 8003fce:	d009      	beq.n	8003fe4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2280      	movs	r2, #128	; 0x80
 8003fd6:	0352      	lsls	r2, r2, #13
 8003fd8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	0018      	movs	r0, r3
 8003fde:	f000 ff52 	bl	8004e86 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003fe2:	e05a      	b.n	800409a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003fe4:	23a4      	movs	r3, #164	; 0xa4
 8003fe6:	18fb      	adds	r3, r7, r3
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2280      	movs	r2, #128	; 0x80
 8003fec:	4013      	ands	r3, r2
 8003fee:	d016      	beq.n	800401e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003ff0:	23a0      	movs	r3, #160	; 0xa0
 8003ff2:	18fb      	adds	r3, r7, r3
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2280      	movs	r2, #128	; 0x80
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	d106      	bne.n	800400a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003ffc:	239c      	movs	r3, #156	; 0x9c
 8003ffe:	18fb      	adds	r3, r7, r3
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	2380      	movs	r3, #128	; 0x80
 8004004:	041b      	lsls	r3, r3, #16
 8004006:	4013      	ands	r3, r2
 8004008:	d009      	beq.n	800401e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800400e:	2b00      	cmp	r3, #0
 8004010:	d042      	beq.n	8004098 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	0010      	movs	r0, r2
 800401a:	4798      	blx	r3
    }
    return;
 800401c:	e03c      	b.n	8004098 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800401e:	23a4      	movs	r3, #164	; 0xa4
 8004020:	18fb      	adds	r3, r7, r3
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2240      	movs	r2, #64	; 0x40
 8004026:	4013      	ands	r3, r2
 8004028:	d00a      	beq.n	8004040 <HAL_UART_IRQHandler+0x5e0>
 800402a:	23a0      	movs	r3, #160	; 0xa0
 800402c:	18fb      	adds	r3, r7, r3
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2240      	movs	r2, #64	; 0x40
 8004032:	4013      	ands	r3, r2
 8004034:	d004      	beq.n	8004040 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	0018      	movs	r0, r3
 800403a:	f000 fef8 	bl	8004e2e <UART_EndTransmit_IT>
    return;
 800403e:	e02c      	b.n	800409a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004040:	23a4      	movs	r3, #164	; 0xa4
 8004042:	18fb      	adds	r3, r7, r3
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	2380      	movs	r3, #128	; 0x80
 8004048:	041b      	lsls	r3, r3, #16
 800404a:	4013      	ands	r3, r2
 800404c:	d00b      	beq.n	8004066 <HAL_UART_IRQHandler+0x606>
 800404e:	23a0      	movs	r3, #160	; 0xa0
 8004050:	18fb      	adds	r3, r7, r3
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	2380      	movs	r3, #128	; 0x80
 8004056:	05db      	lsls	r3, r3, #23
 8004058:	4013      	ands	r3, r2
 800405a:	d004      	beq.n	8004066 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	0018      	movs	r0, r3
 8004060:	f000 ff21 	bl	8004ea6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004064:	e019      	b.n	800409a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004066:	23a4      	movs	r3, #164	; 0xa4
 8004068:	18fb      	adds	r3, r7, r3
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	2380      	movs	r3, #128	; 0x80
 800406e:	045b      	lsls	r3, r3, #17
 8004070:	4013      	ands	r3, r2
 8004072:	d012      	beq.n	800409a <HAL_UART_IRQHandler+0x63a>
 8004074:	23a0      	movs	r3, #160	; 0xa0
 8004076:	18fb      	adds	r3, r7, r3
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2b00      	cmp	r3, #0
 800407c:	da0d      	bge.n	800409a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	0018      	movs	r0, r3
 8004082:	f000 ff08 	bl	8004e96 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004086:	e008      	b.n	800409a <HAL_UART_IRQHandler+0x63a>
      return;
 8004088:	46c0      	nop			; (mov r8, r8)
 800408a:	e006      	b.n	800409a <HAL_UART_IRQHandler+0x63a>
    return;
 800408c:	46c0      	nop			; (mov r8, r8)
 800408e:	e004      	b.n	800409a <HAL_UART_IRQHandler+0x63a>
      return;
 8004090:	46c0      	nop			; (mov r8, r8)
 8004092:	e002      	b.n	800409a <HAL_UART_IRQHandler+0x63a>
      return;
 8004094:	46c0      	nop			; (mov r8, r8)
 8004096:	e000      	b.n	800409a <HAL_UART_IRQHandler+0x63a>
    return;
 8004098:	46c0      	nop			; (mov r8, r8)
  }
}
 800409a:	46bd      	mov	sp, r7
 800409c:	b02a      	add	sp, #168	; 0xa8
 800409e:	bdb0      	pop	{r4, r5, r7, pc}
 80040a0:	fffffeff 	.word	0xfffffeff
 80040a4:	fffffedf 	.word	0xfffffedf
 80040a8:	effffffe 	.word	0xeffffffe

080040ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80040b4:	46c0      	nop			; (mov r8, r8)
 80040b6:	46bd      	mov	sp, r7
 80040b8:	b002      	add	sp, #8
 80040ba:	bd80      	pop	{r7, pc}

080040bc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80040c4:	46c0      	nop			; (mov r8, r8)
 80040c6:	46bd      	mov	sp, r7
 80040c8:	b002      	add	sp, #8
 80040ca:	bd80      	pop	{r7, pc}

080040cc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80040d4:	46c0      	nop			; (mov r8, r8)
 80040d6:	46bd      	mov	sp, r7
 80040d8:	b002      	add	sp, #8
 80040da:	bd80      	pop	{r7, pc}

080040dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80040e4:	46c0      	nop			; (mov r8, r8)
 80040e6:	46bd      	mov	sp, r7
 80040e8:	b002      	add	sp, #8
 80040ea:	bd80      	pop	{r7, pc}

080040ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040ec:	b5b0      	push	{r4, r5, r7, lr}
 80040ee:	b090      	sub	sp, #64	; 0x40
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040f4:	231a      	movs	r3, #26
 80040f6:	2220      	movs	r2, #32
 80040f8:	189b      	adds	r3, r3, r2
 80040fa:	19db      	adds	r3, r3, r7
 80040fc:	2200      	movs	r2, #0
 80040fe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004102:	689a      	ldr	r2, [r3, #8]
 8004104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	431a      	orrs	r2, r3
 800410a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	431a      	orrs	r2, r3
 8004110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004112:	69db      	ldr	r3, [r3, #28]
 8004114:	4313      	orrs	r3, r2
 8004116:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4ac4      	ldr	r2, [pc, #784]	; (8004430 <UART_SetConfig+0x344>)
 8004120:	4013      	ands	r3, r2
 8004122:	0019      	movs	r1, r3
 8004124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800412a:	430b      	orrs	r3, r1
 800412c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	4abf      	ldr	r2, [pc, #764]	; (8004434 <UART_SetConfig+0x348>)
 8004136:	4013      	ands	r3, r2
 8004138:	0018      	movs	r0, r3
 800413a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413c:	68d9      	ldr	r1, [r3, #12]
 800413e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	0003      	movs	r3, r0
 8004144:	430b      	orrs	r3, r1
 8004146:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800414e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4ab9      	ldr	r2, [pc, #740]	; (8004438 <UART_SetConfig+0x34c>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d004      	beq.n	8004162 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800415e:	4313      	orrs	r3, r2
 8004160:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	4ab4      	ldr	r2, [pc, #720]	; (800443c <UART_SetConfig+0x350>)
 800416a:	4013      	ands	r3, r2
 800416c:	0019      	movs	r1, r3
 800416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004174:	430b      	orrs	r3, r1
 8004176:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417e:	220f      	movs	r2, #15
 8004180:	4393      	bics	r3, r2
 8004182:	0018      	movs	r0, r3
 8004184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004186:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	0003      	movs	r3, r0
 800418e:	430b      	orrs	r3, r1
 8004190:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4aaa      	ldr	r2, [pc, #680]	; (8004440 <UART_SetConfig+0x354>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d131      	bne.n	8004200 <UART_SetConfig+0x114>
 800419c:	4ba9      	ldr	r3, [pc, #676]	; (8004444 <UART_SetConfig+0x358>)
 800419e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a0:	2203      	movs	r2, #3
 80041a2:	4013      	ands	r3, r2
 80041a4:	2b03      	cmp	r3, #3
 80041a6:	d01d      	beq.n	80041e4 <UART_SetConfig+0xf8>
 80041a8:	d823      	bhi.n	80041f2 <UART_SetConfig+0x106>
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d00c      	beq.n	80041c8 <UART_SetConfig+0xdc>
 80041ae:	d820      	bhi.n	80041f2 <UART_SetConfig+0x106>
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d002      	beq.n	80041ba <UART_SetConfig+0xce>
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d00e      	beq.n	80041d6 <UART_SetConfig+0xea>
 80041b8:	e01b      	b.n	80041f2 <UART_SetConfig+0x106>
 80041ba:	231b      	movs	r3, #27
 80041bc:	2220      	movs	r2, #32
 80041be:	189b      	adds	r3, r3, r2
 80041c0:	19db      	adds	r3, r3, r7
 80041c2:	2200      	movs	r2, #0
 80041c4:	701a      	strb	r2, [r3, #0]
 80041c6:	e071      	b.n	80042ac <UART_SetConfig+0x1c0>
 80041c8:	231b      	movs	r3, #27
 80041ca:	2220      	movs	r2, #32
 80041cc:	189b      	adds	r3, r3, r2
 80041ce:	19db      	adds	r3, r3, r7
 80041d0:	2202      	movs	r2, #2
 80041d2:	701a      	strb	r2, [r3, #0]
 80041d4:	e06a      	b.n	80042ac <UART_SetConfig+0x1c0>
 80041d6:	231b      	movs	r3, #27
 80041d8:	2220      	movs	r2, #32
 80041da:	189b      	adds	r3, r3, r2
 80041dc:	19db      	adds	r3, r3, r7
 80041de:	2204      	movs	r2, #4
 80041e0:	701a      	strb	r2, [r3, #0]
 80041e2:	e063      	b.n	80042ac <UART_SetConfig+0x1c0>
 80041e4:	231b      	movs	r3, #27
 80041e6:	2220      	movs	r2, #32
 80041e8:	189b      	adds	r3, r3, r2
 80041ea:	19db      	adds	r3, r3, r7
 80041ec:	2208      	movs	r2, #8
 80041ee:	701a      	strb	r2, [r3, #0]
 80041f0:	e05c      	b.n	80042ac <UART_SetConfig+0x1c0>
 80041f2:	231b      	movs	r3, #27
 80041f4:	2220      	movs	r2, #32
 80041f6:	189b      	adds	r3, r3, r2
 80041f8:	19db      	adds	r3, r3, r7
 80041fa:	2210      	movs	r2, #16
 80041fc:	701a      	strb	r2, [r3, #0]
 80041fe:	e055      	b.n	80042ac <UART_SetConfig+0x1c0>
 8004200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a90      	ldr	r2, [pc, #576]	; (8004448 <UART_SetConfig+0x35c>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d106      	bne.n	8004218 <UART_SetConfig+0x12c>
 800420a:	231b      	movs	r3, #27
 800420c:	2220      	movs	r2, #32
 800420e:	189b      	adds	r3, r3, r2
 8004210:	19db      	adds	r3, r3, r7
 8004212:	2200      	movs	r2, #0
 8004214:	701a      	strb	r2, [r3, #0]
 8004216:	e049      	b.n	80042ac <UART_SetConfig+0x1c0>
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a86      	ldr	r2, [pc, #536]	; (8004438 <UART_SetConfig+0x34c>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d13e      	bne.n	80042a0 <UART_SetConfig+0x1b4>
 8004222:	4b88      	ldr	r3, [pc, #544]	; (8004444 <UART_SetConfig+0x358>)
 8004224:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004226:	23c0      	movs	r3, #192	; 0xc0
 8004228:	011b      	lsls	r3, r3, #4
 800422a:	4013      	ands	r3, r2
 800422c:	22c0      	movs	r2, #192	; 0xc0
 800422e:	0112      	lsls	r2, r2, #4
 8004230:	4293      	cmp	r3, r2
 8004232:	d027      	beq.n	8004284 <UART_SetConfig+0x198>
 8004234:	22c0      	movs	r2, #192	; 0xc0
 8004236:	0112      	lsls	r2, r2, #4
 8004238:	4293      	cmp	r3, r2
 800423a:	d82a      	bhi.n	8004292 <UART_SetConfig+0x1a6>
 800423c:	2280      	movs	r2, #128	; 0x80
 800423e:	0112      	lsls	r2, r2, #4
 8004240:	4293      	cmp	r3, r2
 8004242:	d011      	beq.n	8004268 <UART_SetConfig+0x17c>
 8004244:	2280      	movs	r2, #128	; 0x80
 8004246:	0112      	lsls	r2, r2, #4
 8004248:	4293      	cmp	r3, r2
 800424a:	d822      	bhi.n	8004292 <UART_SetConfig+0x1a6>
 800424c:	2b00      	cmp	r3, #0
 800424e:	d004      	beq.n	800425a <UART_SetConfig+0x16e>
 8004250:	2280      	movs	r2, #128	; 0x80
 8004252:	00d2      	lsls	r2, r2, #3
 8004254:	4293      	cmp	r3, r2
 8004256:	d00e      	beq.n	8004276 <UART_SetConfig+0x18a>
 8004258:	e01b      	b.n	8004292 <UART_SetConfig+0x1a6>
 800425a:	231b      	movs	r3, #27
 800425c:	2220      	movs	r2, #32
 800425e:	189b      	adds	r3, r3, r2
 8004260:	19db      	adds	r3, r3, r7
 8004262:	2200      	movs	r2, #0
 8004264:	701a      	strb	r2, [r3, #0]
 8004266:	e021      	b.n	80042ac <UART_SetConfig+0x1c0>
 8004268:	231b      	movs	r3, #27
 800426a:	2220      	movs	r2, #32
 800426c:	189b      	adds	r3, r3, r2
 800426e:	19db      	adds	r3, r3, r7
 8004270:	2202      	movs	r2, #2
 8004272:	701a      	strb	r2, [r3, #0]
 8004274:	e01a      	b.n	80042ac <UART_SetConfig+0x1c0>
 8004276:	231b      	movs	r3, #27
 8004278:	2220      	movs	r2, #32
 800427a:	189b      	adds	r3, r3, r2
 800427c:	19db      	adds	r3, r3, r7
 800427e:	2204      	movs	r2, #4
 8004280:	701a      	strb	r2, [r3, #0]
 8004282:	e013      	b.n	80042ac <UART_SetConfig+0x1c0>
 8004284:	231b      	movs	r3, #27
 8004286:	2220      	movs	r2, #32
 8004288:	189b      	adds	r3, r3, r2
 800428a:	19db      	adds	r3, r3, r7
 800428c:	2208      	movs	r2, #8
 800428e:	701a      	strb	r2, [r3, #0]
 8004290:	e00c      	b.n	80042ac <UART_SetConfig+0x1c0>
 8004292:	231b      	movs	r3, #27
 8004294:	2220      	movs	r2, #32
 8004296:	189b      	adds	r3, r3, r2
 8004298:	19db      	adds	r3, r3, r7
 800429a:	2210      	movs	r2, #16
 800429c:	701a      	strb	r2, [r3, #0]
 800429e:	e005      	b.n	80042ac <UART_SetConfig+0x1c0>
 80042a0:	231b      	movs	r3, #27
 80042a2:	2220      	movs	r2, #32
 80042a4:	189b      	adds	r3, r3, r2
 80042a6:	19db      	adds	r3, r3, r7
 80042a8:	2210      	movs	r2, #16
 80042aa:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80042ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a61      	ldr	r2, [pc, #388]	; (8004438 <UART_SetConfig+0x34c>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d000      	beq.n	80042b8 <UART_SetConfig+0x1cc>
 80042b6:	e092      	b.n	80043de <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80042b8:	231b      	movs	r3, #27
 80042ba:	2220      	movs	r2, #32
 80042bc:	189b      	adds	r3, r3, r2
 80042be:	19db      	adds	r3, r3, r7
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	2b08      	cmp	r3, #8
 80042c4:	d015      	beq.n	80042f2 <UART_SetConfig+0x206>
 80042c6:	dc18      	bgt.n	80042fa <UART_SetConfig+0x20e>
 80042c8:	2b04      	cmp	r3, #4
 80042ca:	d00d      	beq.n	80042e8 <UART_SetConfig+0x1fc>
 80042cc:	dc15      	bgt.n	80042fa <UART_SetConfig+0x20e>
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d002      	beq.n	80042d8 <UART_SetConfig+0x1ec>
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d005      	beq.n	80042e2 <UART_SetConfig+0x1f6>
 80042d6:	e010      	b.n	80042fa <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042d8:	f7fe fb14 	bl	8002904 <HAL_RCC_GetPCLK1Freq>
 80042dc:	0003      	movs	r3, r0
 80042de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80042e0:	e014      	b.n	800430c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042e2:	4b5a      	ldr	r3, [pc, #360]	; (800444c <UART_SetConfig+0x360>)
 80042e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80042e6:	e011      	b.n	800430c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042e8:	f7fe fa80 	bl	80027ec <HAL_RCC_GetSysClockFreq>
 80042ec:	0003      	movs	r3, r0
 80042ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80042f0:	e00c      	b.n	800430c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042f2:	2380      	movs	r3, #128	; 0x80
 80042f4:	021b      	lsls	r3, r3, #8
 80042f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80042f8:	e008      	b.n	800430c <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 80042fa:	2300      	movs	r3, #0
 80042fc:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80042fe:	231a      	movs	r3, #26
 8004300:	2220      	movs	r2, #32
 8004302:	189b      	adds	r3, r3, r2
 8004304:	19db      	adds	r3, r3, r7
 8004306:	2201      	movs	r2, #1
 8004308:	701a      	strb	r2, [r3, #0]
        break;
 800430a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800430c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800430e:	2b00      	cmp	r3, #0
 8004310:	d100      	bne.n	8004314 <UART_SetConfig+0x228>
 8004312:	e147      	b.n	80045a4 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004316:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004318:	4b4d      	ldr	r3, [pc, #308]	; (8004450 <UART_SetConfig+0x364>)
 800431a:	0052      	lsls	r2, r2, #1
 800431c:	5ad3      	ldrh	r3, [r2, r3]
 800431e:	0019      	movs	r1, r3
 8004320:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004322:	f7fb ff01 	bl	8000128 <__udivsi3>
 8004326:	0003      	movs	r3, r0
 8004328:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800432a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432c:	685a      	ldr	r2, [r3, #4]
 800432e:	0013      	movs	r3, r2
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	189b      	adds	r3, r3, r2
 8004334:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004336:	429a      	cmp	r2, r3
 8004338:	d305      	bcc.n	8004346 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004340:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004342:	429a      	cmp	r2, r3
 8004344:	d906      	bls.n	8004354 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8004346:	231a      	movs	r3, #26
 8004348:	2220      	movs	r2, #32
 800434a:	189b      	adds	r3, r3, r2
 800434c:	19db      	adds	r3, r3, r7
 800434e:	2201      	movs	r2, #1
 8004350:	701a      	strb	r2, [r3, #0]
 8004352:	e127      	b.n	80045a4 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004356:	61bb      	str	r3, [r7, #24]
 8004358:	2300      	movs	r3, #0
 800435a:	61fb      	str	r3, [r7, #28]
 800435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004360:	4b3b      	ldr	r3, [pc, #236]	; (8004450 <UART_SetConfig+0x364>)
 8004362:	0052      	lsls	r2, r2, #1
 8004364:	5ad3      	ldrh	r3, [r2, r3]
 8004366:	613b      	str	r3, [r7, #16]
 8004368:	2300      	movs	r3, #0
 800436a:	617b      	str	r3, [r7, #20]
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	69b8      	ldr	r0, [r7, #24]
 8004372:	69f9      	ldr	r1, [r7, #28]
 8004374:	f7fc f84e 	bl	8000414 <__aeabi_uldivmod>
 8004378:	0002      	movs	r2, r0
 800437a:	000b      	movs	r3, r1
 800437c:	0e11      	lsrs	r1, r2, #24
 800437e:	021d      	lsls	r5, r3, #8
 8004380:	430d      	orrs	r5, r1
 8004382:	0214      	lsls	r4, r2, #8
 8004384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	085b      	lsrs	r3, r3, #1
 800438a:	60bb      	str	r3, [r7, #8]
 800438c:	2300      	movs	r3, #0
 800438e:	60fb      	str	r3, [r7, #12]
 8004390:	68b8      	ldr	r0, [r7, #8]
 8004392:	68f9      	ldr	r1, [r7, #12]
 8004394:	1900      	adds	r0, r0, r4
 8004396:	4169      	adcs	r1, r5
 8004398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	603b      	str	r3, [r7, #0]
 800439e:	2300      	movs	r3, #0
 80043a0:	607b      	str	r3, [r7, #4]
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f7fc f835 	bl	8000414 <__aeabi_uldivmod>
 80043aa:	0002      	movs	r2, r0
 80043ac:	000b      	movs	r3, r1
 80043ae:	0013      	movs	r3, r2
 80043b0:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80043b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043b4:	23c0      	movs	r3, #192	; 0xc0
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d309      	bcc.n	80043d0 <UART_SetConfig+0x2e4>
 80043bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043be:	2380      	movs	r3, #128	; 0x80
 80043c0:	035b      	lsls	r3, r3, #13
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d204      	bcs.n	80043d0 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 80043c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043cc:	60da      	str	r2, [r3, #12]
 80043ce:	e0e9      	b.n	80045a4 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 80043d0:	231a      	movs	r3, #26
 80043d2:	2220      	movs	r2, #32
 80043d4:	189b      	adds	r3, r3, r2
 80043d6:	19db      	adds	r3, r3, r7
 80043d8:	2201      	movs	r2, #1
 80043da:	701a      	strb	r2, [r3, #0]
 80043dc:	e0e2      	b.n	80045a4 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e0:	69da      	ldr	r2, [r3, #28]
 80043e2:	2380      	movs	r3, #128	; 0x80
 80043e4:	021b      	lsls	r3, r3, #8
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d000      	beq.n	80043ec <UART_SetConfig+0x300>
 80043ea:	e083      	b.n	80044f4 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80043ec:	231b      	movs	r3, #27
 80043ee:	2220      	movs	r2, #32
 80043f0:	189b      	adds	r3, r3, r2
 80043f2:	19db      	adds	r3, r3, r7
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	2b08      	cmp	r3, #8
 80043f8:	d015      	beq.n	8004426 <UART_SetConfig+0x33a>
 80043fa:	dc2b      	bgt.n	8004454 <UART_SetConfig+0x368>
 80043fc:	2b04      	cmp	r3, #4
 80043fe:	d00d      	beq.n	800441c <UART_SetConfig+0x330>
 8004400:	dc28      	bgt.n	8004454 <UART_SetConfig+0x368>
 8004402:	2b00      	cmp	r3, #0
 8004404:	d002      	beq.n	800440c <UART_SetConfig+0x320>
 8004406:	2b02      	cmp	r3, #2
 8004408:	d005      	beq.n	8004416 <UART_SetConfig+0x32a>
 800440a:	e023      	b.n	8004454 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800440c:	f7fe fa7a 	bl	8002904 <HAL_RCC_GetPCLK1Freq>
 8004410:	0003      	movs	r3, r0
 8004412:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004414:	e027      	b.n	8004466 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004416:	4b0d      	ldr	r3, [pc, #52]	; (800444c <UART_SetConfig+0x360>)
 8004418:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800441a:	e024      	b.n	8004466 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800441c:	f7fe f9e6 	bl	80027ec <HAL_RCC_GetSysClockFreq>
 8004420:	0003      	movs	r3, r0
 8004422:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004424:	e01f      	b.n	8004466 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004426:	2380      	movs	r3, #128	; 0x80
 8004428:	021b      	lsls	r3, r3, #8
 800442a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800442c:	e01b      	b.n	8004466 <UART_SetConfig+0x37a>
 800442e:	46c0      	nop			; (mov r8, r8)
 8004430:	cfff69f3 	.word	0xcfff69f3
 8004434:	ffffcfff 	.word	0xffffcfff
 8004438:	40008000 	.word	0x40008000
 800443c:	11fff4ff 	.word	0x11fff4ff
 8004440:	40013800 	.word	0x40013800
 8004444:	40021000 	.word	0x40021000
 8004448:	40004400 	.word	0x40004400
 800444c:	00f42400 	.word	0x00f42400
 8004450:	08005d00 	.word	0x08005d00
      default:
        pclk = 0U;
 8004454:	2300      	movs	r3, #0
 8004456:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004458:	231a      	movs	r3, #26
 800445a:	2220      	movs	r2, #32
 800445c:	189b      	adds	r3, r3, r2
 800445e:	19db      	adds	r3, r3, r7
 8004460:	2201      	movs	r2, #1
 8004462:	701a      	strb	r2, [r3, #0]
        break;
 8004464:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004468:	2b00      	cmp	r3, #0
 800446a:	d100      	bne.n	800446e <UART_SetConfig+0x382>
 800446c:	e09a      	b.n	80045a4 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800446e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004470:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004472:	4b58      	ldr	r3, [pc, #352]	; (80045d4 <UART_SetConfig+0x4e8>)
 8004474:	0052      	lsls	r2, r2, #1
 8004476:	5ad3      	ldrh	r3, [r2, r3]
 8004478:	0019      	movs	r1, r3
 800447a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800447c:	f7fb fe54 	bl	8000128 <__udivsi3>
 8004480:	0003      	movs	r3, r0
 8004482:	005a      	lsls	r2, r3, #1
 8004484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	085b      	lsrs	r3, r3, #1
 800448a:	18d2      	adds	r2, r2, r3
 800448c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	0019      	movs	r1, r3
 8004492:	0010      	movs	r0, r2
 8004494:	f7fb fe48 	bl	8000128 <__udivsi3>
 8004498:	0003      	movs	r3, r0
 800449a:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800449c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449e:	2b0f      	cmp	r3, #15
 80044a0:	d921      	bls.n	80044e6 <UART_SetConfig+0x3fa>
 80044a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044a4:	2380      	movs	r3, #128	; 0x80
 80044a6:	025b      	lsls	r3, r3, #9
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d21c      	bcs.n	80044e6 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	200e      	movs	r0, #14
 80044b2:	2420      	movs	r4, #32
 80044b4:	1903      	adds	r3, r0, r4
 80044b6:	19db      	adds	r3, r3, r7
 80044b8:	210f      	movs	r1, #15
 80044ba:	438a      	bics	r2, r1
 80044bc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c0:	085b      	lsrs	r3, r3, #1
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	2207      	movs	r2, #7
 80044c6:	4013      	ands	r3, r2
 80044c8:	b299      	uxth	r1, r3
 80044ca:	1903      	adds	r3, r0, r4
 80044cc:	19db      	adds	r3, r3, r7
 80044ce:	1902      	adds	r2, r0, r4
 80044d0:	19d2      	adds	r2, r2, r7
 80044d2:	8812      	ldrh	r2, [r2, #0]
 80044d4:	430a      	orrs	r2, r1
 80044d6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80044d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	1902      	adds	r2, r0, r4
 80044de:	19d2      	adds	r2, r2, r7
 80044e0:	8812      	ldrh	r2, [r2, #0]
 80044e2:	60da      	str	r2, [r3, #12]
 80044e4:	e05e      	b.n	80045a4 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 80044e6:	231a      	movs	r3, #26
 80044e8:	2220      	movs	r2, #32
 80044ea:	189b      	adds	r3, r3, r2
 80044ec:	19db      	adds	r3, r3, r7
 80044ee:	2201      	movs	r2, #1
 80044f0:	701a      	strb	r2, [r3, #0]
 80044f2:	e057      	b.n	80045a4 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044f4:	231b      	movs	r3, #27
 80044f6:	2220      	movs	r2, #32
 80044f8:	189b      	adds	r3, r3, r2
 80044fa:	19db      	adds	r3, r3, r7
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	2b08      	cmp	r3, #8
 8004500:	d015      	beq.n	800452e <UART_SetConfig+0x442>
 8004502:	dc18      	bgt.n	8004536 <UART_SetConfig+0x44a>
 8004504:	2b04      	cmp	r3, #4
 8004506:	d00d      	beq.n	8004524 <UART_SetConfig+0x438>
 8004508:	dc15      	bgt.n	8004536 <UART_SetConfig+0x44a>
 800450a:	2b00      	cmp	r3, #0
 800450c:	d002      	beq.n	8004514 <UART_SetConfig+0x428>
 800450e:	2b02      	cmp	r3, #2
 8004510:	d005      	beq.n	800451e <UART_SetConfig+0x432>
 8004512:	e010      	b.n	8004536 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004514:	f7fe f9f6 	bl	8002904 <HAL_RCC_GetPCLK1Freq>
 8004518:	0003      	movs	r3, r0
 800451a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800451c:	e014      	b.n	8004548 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800451e:	4b2e      	ldr	r3, [pc, #184]	; (80045d8 <UART_SetConfig+0x4ec>)
 8004520:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004522:	e011      	b.n	8004548 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004524:	f7fe f962 	bl	80027ec <HAL_RCC_GetSysClockFreq>
 8004528:	0003      	movs	r3, r0
 800452a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800452c:	e00c      	b.n	8004548 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800452e:	2380      	movs	r3, #128	; 0x80
 8004530:	021b      	lsls	r3, r3, #8
 8004532:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004534:	e008      	b.n	8004548 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8004536:	2300      	movs	r3, #0
 8004538:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800453a:	231a      	movs	r3, #26
 800453c:	2220      	movs	r2, #32
 800453e:	189b      	adds	r3, r3, r2
 8004540:	19db      	adds	r3, r3, r7
 8004542:	2201      	movs	r2, #1
 8004544:	701a      	strb	r2, [r3, #0]
        break;
 8004546:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800454a:	2b00      	cmp	r3, #0
 800454c:	d02a      	beq.n	80045a4 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004552:	4b20      	ldr	r3, [pc, #128]	; (80045d4 <UART_SetConfig+0x4e8>)
 8004554:	0052      	lsls	r2, r2, #1
 8004556:	5ad3      	ldrh	r3, [r2, r3]
 8004558:	0019      	movs	r1, r3
 800455a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800455c:	f7fb fde4 	bl	8000128 <__udivsi3>
 8004560:	0003      	movs	r3, r0
 8004562:	001a      	movs	r2, r3
 8004564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	085b      	lsrs	r3, r3, #1
 800456a:	18d2      	adds	r2, r2, r3
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	0019      	movs	r1, r3
 8004572:	0010      	movs	r0, r2
 8004574:	f7fb fdd8 	bl	8000128 <__udivsi3>
 8004578:	0003      	movs	r3, r0
 800457a:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800457c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457e:	2b0f      	cmp	r3, #15
 8004580:	d90a      	bls.n	8004598 <UART_SetConfig+0x4ac>
 8004582:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004584:	2380      	movs	r3, #128	; 0x80
 8004586:	025b      	lsls	r3, r3, #9
 8004588:	429a      	cmp	r2, r3
 800458a:	d205      	bcs.n	8004598 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800458c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458e:	b29a      	uxth	r2, r3
 8004590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	60da      	str	r2, [r3, #12]
 8004596:	e005      	b.n	80045a4 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8004598:	231a      	movs	r3, #26
 800459a:	2220      	movs	r2, #32
 800459c:	189b      	adds	r3, r3, r2
 800459e:	19db      	adds	r3, r3, r7
 80045a0:	2201      	movs	r2, #1
 80045a2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80045a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a6:	226a      	movs	r2, #106	; 0x6a
 80045a8:	2101      	movs	r1, #1
 80045aa:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80045ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ae:	2268      	movs	r2, #104	; 0x68
 80045b0:	2101      	movs	r1, #1
 80045b2:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b6:	2200      	movs	r2, #0
 80045b8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80045ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045bc:	2200      	movs	r2, #0
 80045be:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80045c0:	231a      	movs	r3, #26
 80045c2:	2220      	movs	r2, #32
 80045c4:	189b      	adds	r3, r3, r2
 80045c6:	19db      	adds	r3, r3, r7
 80045c8:	781b      	ldrb	r3, [r3, #0]
}
 80045ca:	0018      	movs	r0, r3
 80045cc:	46bd      	mov	sp, r7
 80045ce:	b010      	add	sp, #64	; 0x40
 80045d0:	bdb0      	pop	{r4, r5, r7, pc}
 80045d2:	46c0      	nop			; (mov r8, r8)
 80045d4:	08005d00 	.word	0x08005d00
 80045d8:	00f42400 	.word	0x00f42400

080045dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e8:	2201      	movs	r2, #1
 80045ea:	4013      	ands	r3, r2
 80045ec:	d00b      	beq.n	8004606 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	4a4a      	ldr	r2, [pc, #296]	; (8004720 <UART_AdvFeatureConfig+0x144>)
 80045f6:	4013      	ands	r3, r2
 80045f8:	0019      	movs	r1, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460a:	2202      	movs	r2, #2
 800460c:	4013      	ands	r3, r2
 800460e:	d00b      	beq.n	8004628 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	4a43      	ldr	r2, [pc, #268]	; (8004724 <UART_AdvFeatureConfig+0x148>)
 8004618:	4013      	ands	r3, r2
 800461a:	0019      	movs	r1, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	430a      	orrs	r2, r1
 8004626:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462c:	2204      	movs	r2, #4
 800462e:	4013      	ands	r3, r2
 8004630:	d00b      	beq.n	800464a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	4a3b      	ldr	r2, [pc, #236]	; (8004728 <UART_AdvFeatureConfig+0x14c>)
 800463a:	4013      	ands	r3, r2
 800463c:	0019      	movs	r1, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	430a      	orrs	r2, r1
 8004648:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464e:	2208      	movs	r2, #8
 8004650:	4013      	ands	r3, r2
 8004652:	d00b      	beq.n	800466c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	4a34      	ldr	r2, [pc, #208]	; (800472c <UART_AdvFeatureConfig+0x150>)
 800465c:	4013      	ands	r3, r2
 800465e:	0019      	movs	r1, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	430a      	orrs	r2, r1
 800466a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004670:	2210      	movs	r2, #16
 8004672:	4013      	ands	r3, r2
 8004674:	d00b      	beq.n	800468e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	4a2c      	ldr	r2, [pc, #176]	; (8004730 <UART_AdvFeatureConfig+0x154>)
 800467e:	4013      	ands	r3, r2
 8004680:	0019      	movs	r1, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	430a      	orrs	r2, r1
 800468c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004692:	2220      	movs	r2, #32
 8004694:	4013      	ands	r3, r2
 8004696:	d00b      	beq.n	80046b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	4a25      	ldr	r2, [pc, #148]	; (8004734 <UART_AdvFeatureConfig+0x158>)
 80046a0:	4013      	ands	r3, r2
 80046a2:	0019      	movs	r1, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b4:	2240      	movs	r2, #64	; 0x40
 80046b6:	4013      	ands	r3, r2
 80046b8:	d01d      	beq.n	80046f6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	4a1d      	ldr	r2, [pc, #116]	; (8004738 <UART_AdvFeatureConfig+0x15c>)
 80046c2:	4013      	ands	r3, r2
 80046c4:	0019      	movs	r1, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	430a      	orrs	r2, r1
 80046d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046d6:	2380      	movs	r3, #128	; 0x80
 80046d8:	035b      	lsls	r3, r3, #13
 80046da:	429a      	cmp	r2, r3
 80046dc:	d10b      	bne.n	80046f6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	4a15      	ldr	r2, [pc, #84]	; (800473c <UART_AdvFeatureConfig+0x160>)
 80046e6:	4013      	ands	r3, r2
 80046e8:	0019      	movs	r1, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	430a      	orrs	r2, r1
 80046f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fa:	2280      	movs	r2, #128	; 0x80
 80046fc:	4013      	ands	r3, r2
 80046fe:	d00b      	beq.n	8004718 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	4a0e      	ldr	r2, [pc, #56]	; (8004740 <UART_AdvFeatureConfig+0x164>)
 8004708:	4013      	ands	r3, r2
 800470a:	0019      	movs	r1, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	430a      	orrs	r2, r1
 8004716:	605a      	str	r2, [r3, #4]
  }
}
 8004718:	46c0      	nop			; (mov r8, r8)
 800471a:	46bd      	mov	sp, r7
 800471c:	b002      	add	sp, #8
 800471e:	bd80      	pop	{r7, pc}
 8004720:	fffdffff 	.word	0xfffdffff
 8004724:	fffeffff 	.word	0xfffeffff
 8004728:	fffbffff 	.word	0xfffbffff
 800472c:	ffff7fff 	.word	0xffff7fff
 8004730:	ffffefff 	.word	0xffffefff
 8004734:	ffffdfff 	.word	0xffffdfff
 8004738:	ffefffff 	.word	0xffefffff
 800473c:	ff9fffff 	.word	0xff9fffff
 8004740:	fff7ffff 	.word	0xfff7ffff

08004744 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b086      	sub	sp, #24
 8004748:	af02      	add	r7, sp, #8
 800474a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2290      	movs	r2, #144	; 0x90
 8004750:	2100      	movs	r1, #0
 8004752:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004754:	f7fc fdd4 	bl	8001300 <HAL_GetTick>
 8004758:	0003      	movs	r3, r0
 800475a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2208      	movs	r2, #8
 8004764:	4013      	ands	r3, r2
 8004766:	2b08      	cmp	r3, #8
 8004768:	d10c      	bne.n	8004784 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2280      	movs	r2, #128	; 0x80
 800476e:	0391      	lsls	r1, r2, #14
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	4a1a      	ldr	r2, [pc, #104]	; (80047dc <UART_CheckIdleState+0x98>)
 8004774:	9200      	str	r2, [sp, #0]
 8004776:	2200      	movs	r2, #0
 8004778:	f000 f832 	bl	80047e0 <UART_WaitOnFlagUntilTimeout>
 800477c:	1e03      	subs	r3, r0, #0
 800477e:	d001      	beq.n	8004784 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e026      	b.n	80047d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2204      	movs	r2, #4
 800478c:	4013      	ands	r3, r2
 800478e:	2b04      	cmp	r3, #4
 8004790:	d10c      	bne.n	80047ac <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2280      	movs	r2, #128	; 0x80
 8004796:	03d1      	lsls	r1, r2, #15
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	4a10      	ldr	r2, [pc, #64]	; (80047dc <UART_CheckIdleState+0x98>)
 800479c:	9200      	str	r2, [sp, #0]
 800479e:	2200      	movs	r2, #0
 80047a0:	f000 f81e 	bl	80047e0 <UART_WaitOnFlagUntilTimeout>
 80047a4:	1e03      	subs	r3, r0, #0
 80047a6:	d001      	beq.n	80047ac <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e012      	b.n	80047d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2288      	movs	r2, #136	; 0x88
 80047b0:	2120      	movs	r1, #32
 80047b2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	228c      	movs	r2, #140	; 0x8c
 80047b8:	2120      	movs	r1, #32
 80047ba:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2284      	movs	r2, #132	; 0x84
 80047cc:	2100      	movs	r1, #0
 80047ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	0018      	movs	r0, r3
 80047d4:	46bd      	mov	sp, r7
 80047d6:	b004      	add	sp, #16
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	46c0      	nop			; (mov r8, r8)
 80047dc:	01ffffff 	.word	0x01ffffff

080047e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b094      	sub	sp, #80	; 0x50
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	603b      	str	r3, [r7, #0]
 80047ec:	1dfb      	adds	r3, r7, #7
 80047ee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047f0:	e0a7      	b.n	8004942 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047f4:	3301      	adds	r3, #1
 80047f6:	d100      	bne.n	80047fa <UART_WaitOnFlagUntilTimeout+0x1a>
 80047f8:	e0a3      	b.n	8004942 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047fa:	f7fc fd81 	bl	8001300 <HAL_GetTick>
 80047fe:	0002      	movs	r2, r0
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004806:	429a      	cmp	r2, r3
 8004808:	d302      	bcc.n	8004810 <UART_WaitOnFlagUntilTimeout+0x30>
 800480a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800480c:	2b00      	cmp	r3, #0
 800480e:	d13f      	bne.n	8004890 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004810:	f3ef 8310 	mrs	r3, PRIMASK
 8004814:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004816:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004818:	647b      	str	r3, [r7, #68]	; 0x44
 800481a:	2301      	movs	r3, #1
 800481c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800481e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004820:	f383 8810 	msr	PRIMASK, r3
}
 8004824:	46c0      	nop			; (mov r8, r8)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	494e      	ldr	r1, [pc, #312]	; (800496c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004832:	400a      	ands	r2, r1
 8004834:	601a      	str	r2, [r3, #0]
 8004836:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004838:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800483a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483c:	f383 8810 	msr	PRIMASK, r3
}
 8004840:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004842:	f3ef 8310 	mrs	r3, PRIMASK
 8004846:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800484a:	643b      	str	r3, [r7, #64]	; 0x40
 800484c:	2301      	movs	r3, #1
 800484e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004852:	f383 8810 	msr	PRIMASK, r3
}
 8004856:	46c0      	nop			; (mov r8, r8)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689a      	ldr	r2, [r3, #8]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2101      	movs	r1, #1
 8004864:	438a      	bics	r2, r1
 8004866:	609a      	str	r2, [r3, #8]
 8004868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800486a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800486c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800486e:	f383 8810 	msr	PRIMASK, r3
}
 8004872:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2288      	movs	r2, #136	; 0x88
 8004878:	2120      	movs	r1, #32
 800487a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	228c      	movs	r2, #140	; 0x8c
 8004880:	2120      	movs	r1, #32
 8004882:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2284      	movs	r2, #132	; 0x84
 8004888:	2100      	movs	r1, #0
 800488a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e069      	b.n	8004964 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2204      	movs	r2, #4
 8004898:	4013      	ands	r3, r2
 800489a:	d052      	beq.n	8004942 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	69da      	ldr	r2, [r3, #28]
 80048a2:	2380      	movs	r3, #128	; 0x80
 80048a4:	011b      	lsls	r3, r3, #4
 80048a6:	401a      	ands	r2, r3
 80048a8:	2380      	movs	r3, #128	; 0x80
 80048aa:	011b      	lsls	r3, r3, #4
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d148      	bne.n	8004942 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2280      	movs	r2, #128	; 0x80
 80048b6:	0112      	lsls	r2, r2, #4
 80048b8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048ba:	f3ef 8310 	mrs	r3, PRIMASK
 80048be:	613b      	str	r3, [r7, #16]
  return(result);
 80048c0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80048c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048c4:	2301      	movs	r3, #1
 80048c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	f383 8810 	msr	PRIMASK, r3
}
 80048ce:	46c0      	nop			; (mov r8, r8)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4924      	ldr	r1, [pc, #144]	; (800496c <UART_WaitOnFlagUntilTimeout+0x18c>)
 80048dc:	400a      	ands	r2, r1
 80048de:	601a      	str	r2, [r3, #0]
 80048e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048e2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	f383 8810 	msr	PRIMASK, r3
}
 80048ea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048ec:	f3ef 8310 	mrs	r3, PRIMASK
 80048f0:	61fb      	str	r3, [r7, #28]
  return(result);
 80048f2:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80048f6:	2301      	movs	r3, #1
 80048f8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048fa:	6a3b      	ldr	r3, [r7, #32]
 80048fc:	f383 8810 	msr	PRIMASK, r3
}
 8004900:	46c0      	nop			; (mov r8, r8)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	689a      	ldr	r2, [r3, #8]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2101      	movs	r1, #1
 800490e:	438a      	bics	r2, r1
 8004910:	609a      	str	r2, [r3, #8]
 8004912:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004914:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004918:	f383 8810 	msr	PRIMASK, r3
}
 800491c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2288      	movs	r2, #136	; 0x88
 8004922:	2120      	movs	r1, #32
 8004924:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	228c      	movs	r2, #140	; 0x8c
 800492a:	2120      	movs	r1, #32
 800492c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2290      	movs	r2, #144	; 0x90
 8004932:	2120      	movs	r1, #32
 8004934:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2284      	movs	r2, #132	; 0x84
 800493a:	2100      	movs	r1, #0
 800493c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e010      	b.n	8004964 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	69db      	ldr	r3, [r3, #28]
 8004948:	68ba      	ldr	r2, [r7, #8]
 800494a:	4013      	ands	r3, r2
 800494c:	68ba      	ldr	r2, [r7, #8]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	425a      	negs	r2, r3
 8004952:	4153      	adcs	r3, r2
 8004954:	b2db      	uxtb	r3, r3
 8004956:	001a      	movs	r2, r3
 8004958:	1dfb      	adds	r3, r7, #7
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	429a      	cmp	r2, r3
 800495e:	d100      	bne.n	8004962 <UART_WaitOnFlagUntilTimeout+0x182>
 8004960:	e747      	b.n	80047f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	0018      	movs	r0, r3
 8004966:	46bd      	mov	sp, r7
 8004968:	b014      	add	sp, #80	; 0x50
 800496a:	bd80      	pop	{r7, pc}
 800496c:	fffffe5f 	.word	0xfffffe5f

08004970 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b090      	sub	sp, #64	; 0x40
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	1dbb      	adds	r3, r7, #6
 800497c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	68ba      	ldr	r2, [r7, #8]
 8004982:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	1dba      	adds	r2, r7, #6
 8004988:	215c      	movs	r1, #92	; 0x5c
 800498a:	8812      	ldrh	r2, [r2, #0]
 800498c:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2290      	movs	r2, #144	; 0x90
 8004992:	2100      	movs	r1, #0
 8004994:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	228c      	movs	r2, #140	; 0x8c
 800499a:	2122      	movs	r1, #34	; 0x22
 800499c:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2280      	movs	r2, #128	; 0x80
 80049a2:	589b      	ldr	r3, [r3, r2]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d02d      	beq.n	8004a04 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2280      	movs	r2, #128	; 0x80
 80049ac:	589b      	ldr	r3, [r3, r2]
 80049ae:	4a40      	ldr	r2, [pc, #256]	; (8004ab0 <UART_Start_Receive_DMA+0x140>)
 80049b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2280      	movs	r2, #128	; 0x80
 80049b6:	589b      	ldr	r3, [r3, r2]
 80049b8:	4a3e      	ldr	r2, [pc, #248]	; (8004ab4 <UART_Start_Receive_DMA+0x144>)
 80049ba:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2280      	movs	r2, #128	; 0x80
 80049c0:	589b      	ldr	r3, [r3, r2]
 80049c2:	4a3d      	ldr	r2, [pc, #244]	; (8004ab8 <UART_Start_Receive_DMA+0x148>)
 80049c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2280      	movs	r2, #128	; 0x80
 80049ca:	589b      	ldr	r3, [r3, r2]
 80049cc:	2200      	movs	r2, #0
 80049ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2280      	movs	r2, #128	; 0x80
 80049d4:	5898      	ldr	r0, [r3, r2]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	3324      	adds	r3, #36	; 0x24
 80049dc:	0019      	movs	r1, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049e2:	001a      	movs	r2, r3
 80049e4:	1dbb      	adds	r3, r7, #6
 80049e6:	881b      	ldrh	r3, [r3, #0]
 80049e8:	f7fc fe20 	bl	800162c <HAL_DMA_Start_IT>
 80049ec:	1e03      	subs	r3, r0, #0
 80049ee:	d009      	beq.n	8004a04 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2290      	movs	r2, #144	; 0x90
 80049f4:	2110      	movs	r1, #16
 80049f6:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	228c      	movs	r2, #140	; 0x8c
 80049fc:	2120      	movs	r1, #32
 80049fe:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e050      	b.n	8004aa6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d019      	beq.n	8004a40 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a0c:	f3ef 8310 	mrs	r3, PRIMASK
 8004a10:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a16:	2301      	movs	r3, #1
 8004a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a1c:	f383 8810 	msr	PRIMASK, r3
}
 8004a20:	46c0      	nop			; (mov r8, r8)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2180      	movs	r1, #128	; 0x80
 8004a2e:	0049      	lsls	r1, r1, #1
 8004a30:	430a      	orrs	r2, r1
 8004a32:	601a      	str	r2, [r3, #0]
 8004a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a36:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3a:	f383 8810 	msr	PRIMASK, r3
}
 8004a3e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a40:	f3ef 8310 	mrs	r3, PRIMASK
 8004a44:	613b      	str	r3, [r7, #16]
  return(result);
 8004a46:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a48:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	f383 8810 	msr	PRIMASK, r3
}
 8004a54:	46c0      	nop			; (mov r8, r8)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	689a      	ldr	r2, [r3, #8]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2101      	movs	r1, #1
 8004a62:	430a      	orrs	r2, r1
 8004a64:	609a      	str	r2, [r3, #8]
 8004a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a68:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	f383 8810 	msr	PRIMASK, r3
}
 8004a70:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a72:	f3ef 8310 	mrs	r3, PRIMASK
 8004a76:	61fb      	str	r3, [r7, #28]
  return(result);
 8004a78:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a7a:	637b      	str	r3, [r7, #52]	; 0x34
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a80:	6a3b      	ldr	r3, [r7, #32]
 8004a82:	f383 8810 	msr	PRIMASK, r3
}
 8004a86:	46c0      	nop			; (mov r8, r8)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	689a      	ldr	r2, [r3, #8]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2140      	movs	r1, #64	; 0x40
 8004a94:	430a      	orrs	r2, r1
 8004a96:	609a      	str	r2, [r3, #8]
 8004a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a9a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9e:	f383 8810 	msr	PRIMASK, r3
}
 8004aa2:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	0018      	movs	r0, r3
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	b010      	add	sp, #64	; 0x40
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	46c0      	nop			; (mov r8, r8)
 8004ab0:	08004c09 	.word	0x08004c09
 8004ab4:	08004d39 	.word	0x08004d39
 8004ab8:	08004d7b 	.word	0x08004d7b

08004abc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b08a      	sub	sp, #40	; 0x28
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ac4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ac8:	60bb      	str	r3, [r7, #8]
  return(result);
 8004aca:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004acc:	627b      	str	r3, [r7, #36]	; 0x24
 8004ace:	2301      	movs	r3, #1
 8004ad0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f383 8810 	msr	PRIMASK, r3
}
 8004ad8:	46c0      	nop			; (mov r8, r8)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	21c0      	movs	r1, #192	; 0xc0
 8004ae6:	438a      	bics	r2, r1
 8004ae8:	601a      	str	r2, [r3, #0]
 8004aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	f383 8810 	msr	PRIMASK, r3
}
 8004af4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004af6:	f3ef 8310 	mrs	r3, PRIMASK
 8004afa:	617b      	str	r3, [r7, #20]
  return(result);
 8004afc:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004afe:	623b      	str	r3, [r7, #32]
 8004b00:	2301      	movs	r3, #1
 8004b02:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	f383 8810 	msr	PRIMASK, r3
}
 8004b0a:	46c0      	nop			; (mov r8, r8)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	689a      	ldr	r2, [r3, #8]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4908      	ldr	r1, [pc, #32]	; (8004b38 <UART_EndTxTransfer+0x7c>)
 8004b18:	400a      	ands	r2, r1
 8004b1a:	609a      	str	r2, [r3, #8]
 8004b1c:	6a3b      	ldr	r3, [r7, #32]
 8004b1e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	f383 8810 	msr	PRIMASK, r3
}
 8004b26:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2288      	movs	r2, #136	; 0x88
 8004b2c:	2120      	movs	r1, #32
 8004b2e:	5099      	str	r1, [r3, r2]
}
 8004b30:	46c0      	nop			; (mov r8, r8)
 8004b32:	46bd      	mov	sp, r7
 8004b34:	b00a      	add	sp, #40	; 0x28
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	ff7fffff 	.word	0xff7fffff

08004b3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b08e      	sub	sp, #56	; 0x38
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b44:	f3ef 8310 	mrs	r3, PRIMASK
 8004b48:	617b      	str	r3, [r7, #20]
  return(result);
 8004b4a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b4c:	637b      	str	r3, [r7, #52]	; 0x34
 8004b4e:	2301      	movs	r3, #1
 8004b50:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	f383 8810 	msr	PRIMASK, r3
}
 8004b58:	46c0      	nop			; (mov r8, r8)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4926      	ldr	r1, [pc, #152]	; (8004c00 <UART_EndRxTransfer+0xc4>)
 8004b66:	400a      	ands	r2, r1
 8004b68:	601a      	str	r2, [r3, #0]
 8004b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b6c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	f383 8810 	msr	PRIMASK, r3
}
 8004b74:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b76:	f3ef 8310 	mrs	r3, PRIMASK
 8004b7a:	623b      	str	r3, [r7, #32]
  return(result);
 8004b7c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004b7e:	633b      	str	r3, [r7, #48]	; 0x30
 8004b80:	2301      	movs	r3, #1
 8004b82:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b86:	f383 8810 	msr	PRIMASK, r3
}
 8004b8a:	46c0      	nop			; (mov r8, r8)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689a      	ldr	r2, [r3, #8]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	491b      	ldr	r1, [pc, #108]	; (8004c04 <UART_EndRxTransfer+0xc8>)
 8004b98:	400a      	ands	r2, r1
 8004b9a:	609a      	str	r2, [r3, #8]
 8004b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba2:	f383 8810 	msr	PRIMASK, r3
}
 8004ba6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d118      	bne.n	8004be2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bb0:	f3ef 8310 	mrs	r3, PRIMASK
 8004bb4:	60bb      	str	r3, [r7, #8]
  return(result);
 8004bb6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bba:	2301      	movs	r3, #1
 8004bbc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f383 8810 	msr	PRIMASK, r3
}
 8004bc4:	46c0      	nop			; (mov r8, r8)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2110      	movs	r1, #16
 8004bd2:	438a      	bics	r2, r1
 8004bd4:	601a      	str	r2, [r3, #0]
 8004bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	f383 8810 	msr	PRIMASK, r3
}
 8004be0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	228c      	movs	r2, #140	; 0x8c
 8004be6:	2120      	movs	r1, #32
 8004be8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004bf6:	46c0      	nop			; (mov r8, r8)
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	b00e      	add	sp, #56	; 0x38
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	46c0      	nop			; (mov r8, r8)
 8004c00:	fffffedf 	.word	0xfffffedf
 8004c04:	effffffe 	.word	0xeffffffe

08004c08 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b094      	sub	sp, #80	; 0x50
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c14:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2220      	movs	r2, #32
 8004c1e:	4013      	ands	r3, r2
 8004c20:	d16f      	bne.n	8004d02 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8004c22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c24:	225e      	movs	r2, #94	; 0x5e
 8004c26:	2100      	movs	r1, #0
 8004c28:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c2a:	f3ef 8310 	mrs	r3, PRIMASK
 8004c2e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004c30:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c32:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c34:	2301      	movs	r3, #1
 8004c36:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	f383 8810 	msr	PRIMASK, r3
}
 8004c3e:	46c0      	nop			; (mov r8, r8)
 8004c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	493a      	ldr	r1, [pc, #232]	; (8004d34 <UART_DMAReceiveCplt+0x12c>)
 8004c4c:	400a      	ands	r2, r1
 8004c4e:	601a      	str	r2, [r3, #0]
 8004c50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c52:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c54:	6a3b      	ldr	r3, [r7, #32]
 8004c56:	f383 8810 	msr	PRIMASK, r3
}
 8004c5a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c5c:	f3ef 8310 	mrs	r3, PRIMASK
 8004c60:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c64:	647b      	str	r3, [r7, #68]	; 0x44
 8004c66:	2301      	movs	r3, #1
 8004c68:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6c:	f383 8810 	msr	PRIMASK, r3
}
 8004c70:	46c0      	nop			; (mov r8, r8)
 8004c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	689a      	ldr	r2, [r3, #8]
 8004c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	438a      	bics	r2, r1
 8004c80:	609a      	str	r2, [r3, #8]
 8004c82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c88:	f383 8810 	msr	PRIMASK, r3
}
 8004c8c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c8e:	f3ef 8310 	mrs	r3, PRIMASK
 8004c92:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c96:	643b      	str	r3, [r7, #64]	; 0x40
 8004c98:	2301      	movs	r3, #1
 8004c9a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c9e:	f383 8810 	msr	PRIMASK, r3
}
 8004ca2:	46c0      	nop			; (mov r8, r8)
 8004ca4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	689a      	ldr	r2, [r3, #8]
 8004caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2140      	movs	r1, #64	; 0x40
 8004cb0:	438a      	bics	r2, r1
 8004cb2:	609a      	str	r2, [r3, #8]
 8004cb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cb6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cba:	f383 8810 	msr	PRIMASK, r3
}
 8004cbe:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004cc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cc2:	228c      	movs	r2, #140	; 0x8c
 8004cc4:	2120      	movs	r1, #32
 8004cc6:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d118      	bne.n	8004d02 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cd0:	f3ef 8310 	mrs	r3, PRIMASK
 8004cd4:	60fb      	str	r3, [r7, #12]
  return(result);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cda:	2301      	movs	r3, #1
 8004cdc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	f383 8810 	msr	PRIMASK, r3
}
 8004ce4:	46c0      	nop			; (mov r8, r8)
 8004ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2110      	movs	r1, #16
 8004cf2:	438a      	bics	r2, r1
 8004cf4:	601a      	str	r2, [r3, #0]
 8004cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cf8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	f383 8810 	msr	PRIMASK, r3
}
 8004d00:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d04:	2200      	movs	r2, #0
 8004d06:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d108      	bne.n	8004d22 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d12:	225c      	movs	r2, #92	; 0x5c
 8004d14:	5a9a      	ldrh	r2, [r3, r2]
 8004d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d18:	0011      	movs	r1, r2
 8004d1a:	0018      	movs	r0, r3
 8004d1c:	f7fb ff9c 	bl	8000c58 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d20:	e003      	b.n	8004d2a <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8004d22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d24:	0018      	movs	r0, r3
 8004d26:	f7ff f9c9 	bl	80040bc <HAL_UART_RxCpltCallback>
}
 8004d2a:	46c0      	nop			; (mov r8, r8)
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	b014      	add	sp, #80	; 0x50
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	46c0      	nop			; (mov r8, r8)
 8004d34:	fffffeff 	.word	0xfffffeff

08004d38 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d44:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d10a      	bne.n	8004d6a <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	225c      	movs	r2, #92	; 0x5c
 8004d58:	5a9b      	ldrh	r3, [r3, r2]
 8004d5a:	085b      	lsrs	r3, r3, #1
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	0011      	movs	r1, r2
 8004d62:	0018      	movs	r0, r3
 8004d64:	f7fb ff78 	bl	8000c58 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d68:	e003      	b.n	8004d72 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	0018      	movs	r0, r3
 8004d6e:	f7ff f9ad 	bl	80040cc <HAL_UART_RxHalfCpltCallback>
}
 8004d72:	46c0      	nop			; (mov r8, r8)
 8004d74:	46bd      	mov	sp, r7
 8004d76:	b004      	add	sp, #16
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b086      	sub	sp, #24
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d86:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	2288      	movs	r2, #136	; 0x88
 8004d8c:	589b      	ldr	r3, [r3, r2]
 8004d8e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	228c      	movs	r2, #140	; 0x8c
 8004d94:	589b      	ldr	r3, [r3, r2]
 8004d96:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	2280      	movs	r2, #128	; 0x80
 8004da0:	4013      	ands	r3, r2
 8004da2:	2b80      	cmp	r3, #128	; 0x80
 8004da4:	d10a      	bne.n	8004dbc <UART_DMAError+0x42>
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	2b21      	cmp	r3, #33	; 0x21
 8004daa:	d107      	bne.n	8004dbc <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	2256      	movs	r2, #86	; 0x56
 8004db0:	2100      	movs	r1, #0
 8004db2:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	0018      	movs	r0, r3
 8004db8:	f7ff fe80 	bl	8004abc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	2240      	movs	r2, #64	; 0x40
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	2b40      	cmp	r3, #64	; 0x40
 8004dc8:	d10a      	bne.n	8004de0 <UART_DMAError+0x66>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2b22      	cmp	r3, #34	; 0x22
 8004dce:	d107      	bne.n	8004de0 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	225e      	movs	r2, #94	; 0x5e
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	0018      	movs	r0, r3
 8004ddc:	f7ff feae 	bl	8004b3c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	2290      	movs	r2, #144	; 0x90
 8004de4:	589b      	ldr	r3, [r3, r2]
 8004de6:	2210      	movs	r2, #16
 8004de8:	431a      	orrs	r2, r3
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	2190      	movs	r1, #144	; 0x90
 8004dee:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	0018      	movs	r0, r3
 8004df4:	f7ff f972 	bl	80040dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004df8:	46c0      	nop			; (mov r8, r8)
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	b006      	add	sp, #24
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	225e      	movs	r2, #94	; 0x5e
 8004e12:	2100      	movs	r1, #0
 8004e14:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2256      	movs	r2, #86	; 0x56
 8004e1a:	2100      	movs	r1, #0
 8004e1c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	0018      	movs	r0, r3
 8004e22:	f7ff f95b 	bl	80040dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e26:	46c0      	nop			; (mov r8, r8)
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	b004      	add	sp, #16
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b086      	sub	sp, #24
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e36:	f3ef 8310 	mrs	r3, PRIMASK
 8004e3a:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e3c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e3e:	617b      	str	r3, [r7, #20]
 8004e40:	2301      	movs	r3, #1
 8004e42:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f383 8810 	msr	PRIMASK, r3
}
 8004e4a:	46c0      	nop			; (mov r8, r8)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2140      	movs	r1, #64	; 0x40
 8004e58:	438a      	bics	r2, r1
 8004e5a:	601a      	str	r2, [r3, #0]
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	f383 8810 	msr	PRIMASK, r3
}
 8004e66:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2288      	movs	r2, #136	; 0x88
 8004e6c:	2120      	movs	r1, #32
 8004e6e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	0018      	movs	r0, r3
 8004e7a:	f7ff f917 	bl	80040ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e7e:	46c0      	nop			; (mov r8, r8)
 8004e80:	46bd      	mov	sp, r7
 8004e82:	b006      	add	sp, #24
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b082      	sub	sp, #8
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004e8e:	46c0      	nop			; (mov r8, r8)
 8004e90:	46bd      	mov	sp, r7
 8004e92:	b002      	add	sp, #8
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b082      	sub	sp, #8
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004e9e:	46c0      	nop			; (mov r8, r8)
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	b002      	add	sp, #8
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b082      	sub	sp, #8
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004eae:	46c0      	nop			; (mov r8, r8)
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	b002      	add	sp, #8
 8004eb4:	bd80      	pop	{r7, pc}
	...

08004eb8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2284      	movs	r2, #132	; 0x84
 8004ec4:	5c9b      	ldrb	r3, [r3, r2]
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d101      	bne.n	8004ece <HAL_UARTEx_DisableFifoMode+0x16>
 8004eca:	2302      	movs	r3, #2
 8004ecc:	e027      	b.n	8004f1e <HAL_UARTEx_DisableFifoMode+0x66>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2284      	movs	r2, #132	; 0x84
 8004ed2:	2101      	movs	r1, #1
 8004ed4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2288      	movs	r2, #136	; 0x88
 8004eda:	2124      	movs	r1, #36	; 0x24
 8004edc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2101      	movs	r1, #1
 8004ef2:	438a      	bics	r2, r1
 8004ef4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	4a0b      	ldr	r2, [pc, #44]	; (8004f28 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004efa:	4013      	ands	r3, r2
 8004efc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2288      	movs	r2, #136	; 0x88
 8004f10:	2120      	movs	r1, #32
 8004f12:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2284      	movs	r2, #132	; 0x84
 8004f18:	2100      	movs	r1, #0
 8004f1a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	0018      	movs	r0, r3
 8004f20:	46bd      	mov	sp, r7
 8004f22:	b004      	add	sp, #16
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	46c0      	nop			; (mov r8, r8)
 8004f28:	dfffffff 	.word	0xdfffffff

08004f2c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2284      	movs	r2, #132	; 0x84
 8004f3a:	5c9b      	ldrb	r3, [r3, r2]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d101      	bne.n	8004f44 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004f40:	2302      	movs	r3, #2
 8004f42:	e02e      	b.n	8004fa2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2284      	movs	r2, #132	; 0x84
 8004f48:	2101      	movs	r1, #1
 8004f4a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2288      	movs	r2, #136	; 0x88
 8004f50:	2124      	movs	r1, #36	; 0x24
 8004f52:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2101      	movs	r1, #1
 8004f68:	438a      	bics	r2, r1
 8004f6a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	00db      	lsls	r3, r3, #3
 8004f74:	08d9      	lsrs	r1, r3, #3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	683a      	ldr	r2, [r7, #0]
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	0018      	movs	r0, r3
 8004f84:	f000 f8bc 	bl	8005100 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2288      	movs	r2, #136	; 0x88
 8004f94:	2120      	movs	r1, #32
 8004f96:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2284      	movs	r2, #132	; 0x84
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	0018      	movs	r0, r3
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	b004      	add	sp, #16
 8004fa8:	bd80      	pop	{r7, pc}
	...

08004fac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2284      	movs	r2, #132	; 0x84
 8004fba:	5c9b      	ldrb	r3, [r3, r2]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d101      	bne.n	8004fc4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004fc0:	2302      	movs	r3, #2
 8004fc2:	e02f      	b.n	8005024 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2284      	movs	r2, #132	; 0x84
 8004fc8:	2101      	movs	r1, #1
 8004fca:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2288      	movs	r2, #136	; 0x88
 8004fd0:	2124      	movs	r1, #36	; 0x24
 8004fd2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2101      	movs	r1, #1
 8004fe8:	438a      	bics	r2, r1
 8004fea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	4a0e      	ldr	r2, [pc, #56]	; (800502c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	0019      	movs	r1, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	683a      	ldr	r2, [r7, #0]
 8004ffe:	430a      	orrs	r2, r1
 8005000:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	0018      	movs	r0, r3
 8005006:	f000 f87b 	bl	8005100 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2288      	movs	r2, #136	; 0x88
 8005016:	2120      	movs	r1, #32
 8005018:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2284      	movs	r2, #132	; 0x84
 800501e:	2100      	movs	r1, #0
 8005020:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	0018      	movs	r0, r3
 8005026:	46bd      	mov	sp, r7
 8005028:	b004      	add	sp, #16
 800502a:	bd80      	pop	{r7, pc}
 800502c:	f1ffffff 	.word	0xf1ffffff

08005030 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005030:	b5b0      	push	{r4, r5, r7, lr}
 8005032:	b08a      	sub	sp, #40	; 0x28
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	1dbb      	adds	r3, r7, #6
 800503c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	228c      	movs	r2, #140	; 0x8c
 8005042:	589b      	ldr	r3, [r3, r2]
 8005044:	2b20      	cmp	r3, #32
 8005046:	d156      	bne.n	80050f6 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d003      	beq.n	8005056 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800504e:	1dbb      	adds	r3, r7, #6
 8005050:	881b      	ldrh	r3, [r3, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d101      	bne.n	800505a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e04e      	b.n	80050f8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	689a      	ldr	r2, [r3, #8]
 800505e:	2380      	movs	r3, #128	; 0x80
 8005060:	015b      	lsls	r3, r3, #5
 8005062:	429a      	cmp	r2, r3
 8005064:	d109      	bne.n	800507a <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d105      	bne.n	800507a <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	2201      	movs	r2, #1
 8005072:	4013      	ands	r3, r2
 8005074:	d001      	beq.n	800507a <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e03e      	b.n	80050f8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2201      	movs	r2, #1
 800507e:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005086:	2527      	movs	r5, #39	; 0x27
 8005088:	197c      	adds	r4, r7, r5
 800508a:	1dbb      	adds	r3, r7, #6
 800508c:	881a      	ldrh	r2, [r3, #0]
 800508e:	68b9      	ldr	r1, [r7, #8]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	0018      	movs	r0, r3
 8005094:	f7ff fc6c 	bl	8004970 <UART_Start_Receive_DMA>
 8005098:	0003      	movs	r3, r0
 800509a:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800509c:	197b      	adds	r3, r7, r5
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d124      	bne.n	80050ee <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d11c      	bne.n	80050e6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2210      	movs	r2, #16
 80050b2:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050b4:	f3ef 8310 	mrs	r3, PRIMASK
 80050b8:	617b      	str	r3, [r7, #20]
  return(result);
 80050ba:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050bc:	623b      	str	r3, [r7, #32]
 80050be:	2301      	movs	r3, #1
 80050c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	f383 8810 	msr	PRIMASK, r3
}
 80050c8:	46c0      	nop			; (mov r8, r8)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2110      	movs	r1, #16
 80050d6:	430a      	orrs	r2, r1
 80050d8:	601a      	str	r2, [r3, #0]
 80050da:	6a3b      	ldr	r3, [r7, #32]
 80050dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	f383 8810 	msr	PRIMASK, r3
}
 80050e4:	e003      	b.n	80050ee <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80050e6:	2327      	movs	r3, #39	; 0x27
 80050e8:	18fb      	adds	r3, r7, r3
 80050ea:	2201      	movs	r2, #1
 80050ec:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 80050ee:	2327      	movs	r3, #39	; 0x27
 80050f0:	18fb      	adds	r3, r7, r3
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	e000      	b.n	80050f8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 80050f6:	2302      	movs	r3, #2
  }
}
 80050f8:	0018      	movs	r0, r3
 80050fa:	46bd      	mov	sp, r7
 80050fc:	b00a      	add	sp, #40	; 0x28
 80050fe:	bdb0      	pop	{r4, r5, r7, pc}

08005100 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800510c:	2b00      	cmp	r3, #0
 800510e:	d108      	bne.n	8005122 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	226a      	movs	r2, #106	; 0x6a
 8005114:	2101      	movs	r1, #1
 8005116:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2268      	movs	r2, #104	; 0x68
 800511c:	2101      	movs	r1, #1
 800511e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005120:	e043      	b.n	80051aa <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005122:	260f      	movs	r6, #15
 8005124:	19bb      	adds	r3, r7, r6
 8005126:	2208      	movs	r2, #8
 8005128:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800512a:	200e      	movs	r0, #14
 800512c:	183b      	adds	r3, r7, r0
 800512e:	2208      	movs	r2, #8
 8005130:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	0e5b      	lsrs	r3, r3, #25
 800513a:	b2da      	uxtb	r2, r3
 800513c:	240d      	movs	r4, #13
 800513e:	193b      	adds	r3, r7, r4
 8005140:	2107      	movs	r1, #7
 8005142:	400a      	ands	r2, r1
 8005144:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	0f5b      	lsrs	r3, r3, #29
 800514e:	b2da      	uxtb	r2, r3
 8005150:	250c      	movs	r5, #12
 8005152:	197b      	adds	r3, r7, r5
 8005154:	2107      	movs	r1, #7
 8005156:	400a      	ands	r2, r1
 8005158:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800515a:	183b      	adds	r3, r7, r0
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	197a      	adds	r2, r7, r5
 8005160:	7812      	ldrb	r2, [r2, #0]
 8005162:	4914      	ldr	r1, [pc, #80]	; (80051b4 <UARTEx_SetNbDataToProcess+0xb4>)
 8005164:	5c8a      	ldrb	r2, [r1, r2]
 8005166:	435a      	muls	r2, r3
 8005168:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800516a:	197b      	adds	r3, r7, r5
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	4a12      	ldr	r2, [pc, #72]	; (80051b8 <UARTEx_SetNbDataToProcess+0xb8>)
 8005170:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005172:	0019      	movs	r1, r3
 8005174:	f7fb f862 	bl	800023c <__divsi3>
 8005178:	0003      	movs	r3, r0
 800517a:	b299      	uxth	r1, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	226a      	movs	r2, #106	; 0x6a
 8005180:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005182:	19bb      	adds	r3, r7, r6
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	193a      	adds	r2, r7, r4
 8005188:	7812      	ldrb	r2, [r2, #0]
 800518a:	490a      	ldr	r1, [pc, #40]	; (80051b4 <UARTEx_SetNbDataToProcess+0xb4>)
 800518c:	5c8a      	ldrb	r2, [r1, r2]
 800518e:	435a      	muls	r2, r3
 8005190:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005192:	193b      	adds	r3, r7, r4
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	4a08      	ldr	r2, [pc, #32]	; (80051b8 <UARTEx_SetNbDataToProcess+0xb8>)
 8005198:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800519a:	0019      	movs	r1, r3
 800519c:	f7fb f84e 	bl	800023c <__divsi3>
 80051a0:	0003      	movs	r3, r0
 80051a2:	b299      	uxth	r1, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2268      	movs	r2, #104	; 0x68
 80051a8:	5299      	strh	r1, [r3, r2]
}
 80051aa:	46c0      	nop			; (mov r8, r8)
 80051ac:	46bd      	mov	sp, r7
 80051ae:	b005      	add	sp, #20
 80051b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051b2:	46c0      	nop			; (mov r8, r8)
 80051b4:	08005d18 	.word	0x08005d18
 80051b8:	08005d20 	.word	0x08005d20

080051bc <__errno>:
 80051bc:	4b01      	ldr	r3, [pc, #4]	; (80051c4 <__errno+0x8>)
 80051be:	6818      	ldr	r0, [r3, #0]
 80051c0:	4770      	bx	lr
 80051c2:	46c0      	nop			; (mov r8, r8)
 80051c4:	2000000c 	.word	0x2000000c

080051c8 <__libc_init_array>:
 80051c8:	b570      	push	{r4, r5, r6, lr}
 80051ca:	2600      	movs	r6, #0
 80051cc:	4d0c      	ldr	r5, [pc, #48]	; (8005200 <__libc_init_array+0x38>)
 80051ce:	4c0d      	ldr	r4, [pc, #52]	; (8005204 <__libc_init_array+0x3c>)
 80051d0:	1b64      	subs	r4, r4, r5
 80051d2:	10a4      	asrs	r4, r4, #2
 80051d4:	42a6      	cmp	r6, r4
 80051d6:	d109      	bne.n	80051ec <__libc_init_array+0x24>
 80051d8:	2600      	movs	r6, #0
 80051da:	f000 fc9d 	bl	8005b18 <_init>
 80051de:	4d0a      	ldr	r5, [pc, #40]	; (8005208 <__libc_init_array+0x40>)
 80051e0:	4c0a      	ldr	r4, [pc, #40]	; (800520c <__libc_init_array+0x44>)
 80051e2:	1b64      	subs	r4, r4, r5
 80051e4:	10a4      	asrs	r4, r4, #2
 80051e6:	42a6      	cmp	r6, r4
 80051e8:	d105      	bne.n	80051f6 <__libc_init_array+0x2e>
 80051ea:	bd70      	pop	{r4, r5, r6, pc}
 80051ec:	00b3      	lsls	r3, r6, #2
 80051ee:	58eb      	ldr	r3, [r5, r3]
 80051f0:	4798      	blx	r3
 80051f2:	3601      	adds	r6, #1
 80051f4:	e7ee      	b.n	80051d4 <__libc_init_array+0xc>
 80051f6:	00b3      	lsls	r3, r6, #2
 80051f8:	58eb      	ldr	r3, [r5, r3]
 80051fa:	4798      	blx	r3
 80051fc:	3601      	adds	r6, #1
 80051fe:	e7f2      	b.n	80051e6 <__libc_init_array+0x1e>
 8005200:	08005d64 	.word	0x08005d64
 8005204:	08005d64 	.word	0x08005d64
 8005208:	08005d64 	.word	0x08005d64
 800520c:	08005d68 	.word	0x08005d68

08005210 <memset>:
 8005210:	0003      	movs	r3, r0
 8005212:	1882      	adds	r2, r0, r2
 8005214:	4293      	cmp	r3, r2
 8005216:	d100      	bne.n	800521a <memset+0xa>
 8005218:	4770      	bx	lr
 800521a:	7019      	strb	r1, [r3, #0]
 800521c:	3301      	adds	r3, #1
 800521e:	e7f9      	b.n	8005214 <memset+0x4>

08005220 <siprintf>:
 8005220:	b40e      	push	{r1, r2, r3}
 8005222:	b500      	push	{lr}
 8005224:	490b      	ldr	r1, [pc, #44]	; (8005254 <siprintf+0x34>)
 8005226:	b09c      	sub	sp, #112	; 0x70
 8005228:	ab1d      	add	r3, sp, #116	; 0x74
 800522a:	9002      	str	r0, [sp, #8]
 800522c:	9006      	str	r0, [sp, #24]
 800522e:	9107      	str	r1, [sp, #28]
 8005230:	9104      	str	r1, [sp, #16]
 8005232:	4809      	ldr	r0, [pc, #36]	; (8005258 <siprintf+0x38>)
 8005234:	4909      	ldr	r1, [pc, #36]	; (800525c <siprintf+0x3c>)
 8005236:	cb04      	ldmia	r3!, {r2}
 8005238:	9105      	str	r1, [sp, #20]
 800523a:	6800      	ldr	r0, [r0, #0]
 800523c:	a902      	add	r1, sp, #8
 800523e:	9301      	str	r3, [sp, #4]
 8005240:	f000 f882 	bl	8005348 <_svfiprintf_r>
 8005244:	2300      	movs	r3, #0
 8005246:	9a02      	ldr	r2, [sp, #8]
 8005248:	7013      	strb	r3, [r2, #0]
 800524a:	b01c      	add	sp, #112	; 0x70
 800524c:	bc08      	pop	{r3}
 800524e:	b003      	add	sp, #12
 8005250:	4718      	bx	r3
 8005252:	46c0      	nop			; (mov r8, r8)
 8005254:	7fffffff 	.word	0x7fffffff
 8005258:	2000000c 	.word	0x2000000c
 800525c:	ffff0208 	.word	0xffff0208

08005260 <strncmp>:
 8005260:	b530      	push	{r4, r5, lr}
 8005262:	0005      	movs	r5, r0
 8005264:	1e10      	subs	r0, r2, #0
 8005266:	d008      	beq.n	800527a <strncmp+0x1a>
 8005268:	2400      	movs	r4, #0
 800526a:	3a01      	subs	r2, #1
 800526c:	5d2b      	ldrb	r3, [r5, r4]
 800526e:	5d08      	ldrb	r0, [r1, r4]
 8005270:	4283      	cmp	r3, r0
 8005272:	d101      	bne.n	8005278 <strncmp+0x18>
 8005274:	4294      	cmp	r4, r2
 8005276:	d101      	bne.n	800527c <strncmp+0x1c>
 8005278:	1a18      	subs	r0, r3, r0
 800527a:	bd30      	pop	{r4, r5, pc}
 800527c:	3401      	adds	r4, #1
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1f4      	bne.n	800526c <strncmp+0xc>
 8005282:	e7f9      	b.n	8005278 <strncmp+0x18>

08005284 <__ssputs_r>:
 8005284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005286:	688e      	ldr	r6, [r1, #8]
 8005288:	b085      	sub	sp, #20
 800528a:	0007      	movs	r7, r0
 800528c:	000c      	movs	r4, r1
 800528e:	9203      	str	r2, [sp, #12]
 8005290:	9301      	str	r3, [sp, #4]
 8005292:	429e      	cmp	r6, r3
 8005294:	d83c      	bhi.n	8005310 <__ssputs_r+0x8c>
 8005296:	2390      	movs	r3, #144	; 0x90
 8005298:	898a      	ldrh	r2, [r1, #12]
 800529a:	00db      	lsls	r3, r3, #3
 800529c:	421a      	tst	r2, r3
 800529e:	d034      	beq.n	800530a <__ssputs_r+0x86>
 80052a0:	6909      	ldr	r1, [r1, #16]
 80052a2:	6823      	ldr	r3, [r4, #0]
 80052a4:	6960      	ldr	r0, [r4, #20]
 80052a6:	1a5b      	subs	r3, r3, r1
 80052a8:	9302      	str	r3, [sp, #8]
 80052aa:	2303      	movs	r3, #3
 80052ac:	4343      	muls	r3, r0
 80052ae:	0fdd      	lsrs	r5, r3, #31
 80052b0:	18ed      	adds	r5, r5, r3
 80052b2:	9b01      	ldr	r3, [sp, #4]
 80052b4:	9802      	ldr	r0, [sp, #8]
 80052b6:	3301      	adds	r3, #1
 80052b8:	181b      	adds	r3, r3, r0
 80052ba:	106d      	asrs	r5, r5, #1
 80052bc:	42ab      	cmp	r3, r5
 80052be:	d900      	bls.n	80052c2 <__ssputs_r+0x3e>
 80052c0:	001d      	movs	r5, r3
 80052c2:	0553      	lsls	r3, r2, #21
 80052c4:	d532      	bpl.n	800532c <__ssputs_r+0xa8>
 80052c6:	0029      	movs	r1, r5
 80052c8:	0038      	movs	r0, r7
 80052ca:	f000 fb53 	bl	8005974 <_malloc_r>
 80052ce:	1e06      	subs	r6, r0, #0
 80052d0:	d109      	bne.n	80052e6 <__ssputs_r+0x62>
 80052d2:	230c      	movs	r3, #12
 80052d4:	603b      	str	r3, [r7, #0]
 80052d6:	2340      	movs	r3, #64	; 0x40
 80052d8:	2001      	movs	r0, #1
 80052da:	89a2      	ldrh	r2, [r4, #12]
 80052dc:	4240      	negs	r0, r0
 80052de:	4313      	orrs	r3, r2
 80052e0:	81a3      	strh	r3, [r4, #12]
 80052e2:	b005      	add	sp, #20
 80052e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052e6:	9a02      	ldr	r2, [sp, #8]
 80052e8:	6921      	ldr	r1, [r4, #16]
 80052ea:	f000 faba 	bl	8005862 <memcpy>
 80052ee:	89a3      	ldrh	r3, [r4, #12]
 80052f0:	4a14      	ldr	r2, [pc, #80]	; (8005344 <__ssputs_r+0xc0>)
 80052f2:	401a      	ands	r2, r3
 80052f4:	2380      	movs	r3, #128	; 0x80
 80052f6:	4313      	orrs	r3, r2
 80052f8:	81a3      	strh	r3, [r4, #12]
 80052fa:	9b02      	ldr	r3, [sp, #8]
 80052fc:	6126      	str	r6, [r4, #16]
 80052fe:	18f6      	adds	r6, r6, r3
 8005300:	6026      	str	r6, [r4, #0]
 8005302:	6165      	str	r5, [r4, #20]
 8005304:	9e01      	ldr	r6, [sp, #4]
 8005306:	1aed      	subs	r5, r5, r3
 8005308:	60a5      	str	r5, [r4, #8]
 800530a:	9b01      	ldr	r3, [sp, #4]
 800530c:	429e      	cmp	r6, r3
 800530e:	d900      	bls.n	8005312 <__ssputs_r+0x8e>
 8005310:	9e01      	ldr	r6, [sp, #4]
 8005312:	0032      	movs	r2, r6
 8005314:	9903      	ldr	r1, [sp, #12]
 8005316:	6820      	ldr	r0, [r4, #0]
 8005318:	f000 faac 	bl	8005874 <memmove>
 800531c:	68a3      	ldr	r3, [r4, #8]
 800531e:	2000      	movs	r0, #0
 8005320:	1b9b      	subs	r3, r3, r6
 8005322:	60a3      	str	r3, [r4, #8]
 8005324:	6823      	ldr	r3, [r4, #0]
 8005326:	199e      	adds	r6, r3, r6
 8005328:	6026      	str	r6, [r4, #0]
 800532a:	e7da      	b.n	80052e2 <__ssputs_r+0x5e>
 800532c:	002a      	movs	r2, r5
 800532e:	0038      	movs	r0, r7
 8005330:	f000 fb96 	bl	8005a60 <_realloc_r>
 8005334:	1e06      	subs	r6, r0, #0
 8005336:	d1e0      	bne.n	80052fa <__ssputs_r+0x76>
 8005338:	0038      	movs	r0, r7
 800533a:	6921      	ldr	r1, [r4, #16]
 800533c:	f000 faae 	bl	800589c <_free_r>
 8005340:	e7c7      	b.n	80052d2 <__ssputs_r+0x4e>
 8005342:	46c0      	nop			; (mov r8, r8)
 8005344:	fffffb7f 	.word	0xfffffb7f

08005348 <_svfiprintf_r>:
 8005348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800534a:	b0a1      	sub	sp, #132	; 0x84
 800534c:	9003      	str	r0, [sp, #12]
 800534e:	001d      	movs	r5, r3
 8005350:	898b      	ldrh	r3, [r1, #12]
 8005352:	000f      	movs	r7, r1
 8005354:	0016      	movs	r6, r2
 8005356:	061b      	lsls	r3, r3, #24
 8005358:	d511      	bpl.n	800537e <_svfiprintf_r+0x36>
 800535a:	690b      	ldr	r3, [r1, #16]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d10e      	bne.n	800537e <_svfiprintf_r+0x36>
 8005360:	2140      	movs	r1, #64	; 0x40
 8005362:	f000 fb07 	bl	8005974 <_malloc_r>
 8005366:	6038      	str	r0, [r7, #0]
 8005368:	6138      	str	r0, [r7, #16]
 800536a:	2800      	cmp	r0, #0
 800536c:	d105      	bne.n	800537a <_svfiprintf_r+0x32>
 800536e:	230c      	movs	r3, #12
 8005370:	9a03      	ldr	r2, [sp, #12]
 8005372:	3801      	subs	r0, #1
 8005374:	6013      	str	r3, [r2, #0]
 8005376:	b021      	add	sp, #132	; 0x84
 8005378:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800537a:	2340      	movs	r3, #64	; 0x40
 800537c:	617b      	str	r3, [r7, #20]
 800537e:	2300      	movs	r3, #0
 8005380:	ac08      	add	r4, sp, #32
 8005382:	6163      	str	r3, [r4, #20]
 8005384:	3320      	adds	r3, #32
 8005386:	7663      	strb	r3, [r4, #25]
 8005388:	3310      	adds	r3, #16
 800538a:	76a3      	strb	r3, [r4, #26]
 800538c:	9507      	str	r5, [sp, #28]
 800538e:	0035      	movs	r5, r6
 8005390:	782b      	ldrb	r3, [r5, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <_svfiprintf_r+0x52>
 8005396:	2b25      	cmp	r3, #37	; 0x25
 8005398:	d147      	bne.n	800542a <_svfiprintf_r+0xe2>
 800539a:	1bab      	subs	r3, r5, r6
 800539c:	9305      	str	r3, [sp, #20]
 800539e:	42b5      	cmp	r5, r6
 80053a0:	d00c      	beq.n	80053bc <_svfiprintf_r+0x74>
 80053a2:	0032      	movs	r2, r6
 80053a4:	0039      	movs	r1, r7
 80053a6:	9803      	ldr	r0, [sp, #12]
 80053a8:	f7ff ff6c 	bl	8005284 <__ssputs_r>
 80053ac:	1c43      	adds	r3, r0, #1
 80053ae:	d100      	bne.n	80053b2 <_svfiprintf_r+0x6a>
 80053b0:	e0ae      	b.n	8005510 <_svfiprintf_r+0x1c8>
 80053b2:	6962      	ldr	r2, [r4, #20]
 80053b4:	9b05      	ldr	r3, [sp, #20]
 80053b6:	4694      	mov	ip, r2
 80053b8:	4463      	add	r3, ip
 80053ba:	6163      	str	r3, [r4, #20]
 80053bc:	782b      	ldrb	r3, [r5, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d100      	bne.n	80053c4 <_svfiprintf_r+0x7c>
 80053c2:	e0a5      	b.n	8005510 <_svfiprintf_r+0x1c8>
 80053c4:	2201      	movs	r2, #1
 80053c6:	2300      	movs	r3, #0
 80053c8:	4252      	negs	r2, r2
 80053ca:	6062      	str	r2, [r4, #4]
 80053cc:	a904      	add	r1, sp, #16
 80053ce:	3254      	adds	r2, #84	; 0x54
 80053d0:	1852      	adds	r2, r2, r1
 80053d2:	1c6e      	adds	r6, r5, #1
 80053d4:	6023      	str	r3, [r4, #0]
 80053d6:	60e3      	str	r3, [r4, #12]
 80053d8:	60a3      	str	r3, [r4, #8]
 80053da:	7013      	strb	r3, [r2, #0]
 80053dc:	65a3      	str	r3, [r4, #88]	; 0x58
 80053de:	2205      	movs	r2, #5
 80053e0:	7831      	ldrb	r1, [r6, #0]
 80053e2:	4854      	ldr	r0, [pc, #336]	; (8005534 <_svfiprintf_r+0x1ec>)
 80053e4:	f000 fa32 	bl	800584c <memchr>
 80053e8:	1c75      	adds	r5, r6, #1
 80053ea:	2800      	cmp	r0, #0
 80053ec:	d11f      	bne.n	800542e <_svfiprintf_r+0xe6>
 80053ee:	6822      	ldr	r2, [r4, #0]
 80053f0:	06d3      	lsls	r3, r2, #27
 80053f2:	d504      	bpl.n	80053fe <_svfiprintf_r+0xb6>
 80053f4:	2353      	movs	r3, #83	; 0x53
 80053f6:	a904      	add	r1, sp, #16
 80053f8:	185b      	adds	r3, r3, r1
 80053fa:	2120      	movs	r1, #32
 80053fc:	7019      	strb	r1, [r3, #0]
 80053fe:	0713      	lsls	r3, r2, #28
 8005400:	d504      	bpl.n	800540c <_svfiprintf_r+0xc4>
 8005402:	2353      	movs	r3, #83	; 0x53
 8005404:	a904      	add	r1, sp, #16
 8005406:	185b      	adds	r3, r3, r1
 8005408:	212b      	movs	r1, #43	; 0x2b
 800540a:	7019      	strb	r1, [r3, #0]
 800540c:	7833      	ldrb	r3, [r6, #0]
 800540e:	2b2a      	cmp	r3, #42	; 0x2a
 8005410:	d016      	beq.n	8005440 <_svfiprintf_r+0xf8>
 8005412:	0035      	movs	r5, r6
 8005414:	2100      	movs	r1, #0
 8005416:	200a      	movs	r0, #10
 8005418:	68e3      	ldr	r3, [r4, #12]
 800541a:	782a      	ldrb	r2, [r5, #0]
 800541c:	1c6e      	adds	r6, r5, #1
 800541e:	3a30      	subs	r2, #48	; 0x30
 8005420:	2a09      	cmp	r2, #9
 8005422:	d94e      	bls.n	80054c2 <_svfiprintf_r+0x17a>
 8005424:	2900      	cmp	r1, #0
 8005426:	d111      	bne.n	800544c <_svfiprintf_r+0x104>
 8005428:	e017      	b.n	800545a <_svfiprintf_r+0x112>
 800542a:	3501      	adds	r5, #1
 800542c:	e7b0      	b.n	8005390 <_svfiprintf_r+0x48>
 800542e:	4b41      	ldr	r3, [pc, #260]	; (8005534 <_svfiprintf_r+0x1ec>)
 8005430:	6822      	ldr	r2, [r4, #0]
 8005432:	1ac0      	subs	r0, r0, r3
 8005434:	2301      	movs	r3, #1
 8005436:	4083      	lsls	r3, r0
 8005438:	4313      	orrs	r3, r2
 800543a:	002e      	movs	r6, r5
 800543c:	6023      	str	r3, [r4, #0]
 800543e:	e7ce      	b.n	80053de <_svfiprintf_r+0x96>
 8005440:	9b07      	ldr	r3, [sp, #28]
 8005442:	1d19      	adds	r1, r3, #4
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	9107      	str	r1, [sp, #28]
 8005448:	2b00      	cmp	r3, #0
 800544a:	db01      	blt.n	8005450 <_svfiprintf_r+0x108>
 800544c:	930b      	str	r3, [sp, #44]	; 0x2c
 800544e:	e004      	b.n	800545a <_svfiprintf_r+0x112>
 8005450:	425b      	negs	r3, r3
 8005452:	60e3      	str	r3, [r4, #12]
 8005454:	2302      	movs	r3, #2
 8005456:	4313      	orrs	r3, r2
 8005458:	6023      	str	r3, [r4, #0]
 800545a:	782b      	ldrb	r3, [r5, #0]
 800545c:	2b2e      	cmp	r3, #46	; 0x2e
 800545e:	d10a      	bne.n	8005476 <_svfiprintf_r+0x12e>
 8005460:	786b      	ldrb	r3, [r5, #1]
 8005462:	2b2a      	cmp	r3, #42	; 0x2a
 8005464:	d135      	bne.n	80054d2 <_svfiprintf_r+0x18a>
 8005466:	9b07      	ldr	r3, [sp, #28]
 8005468:	3502      	adds	r5, #2
 800546a:	1d1a      	adds	r2, r3, #4
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	9207      	str	r2, [sp, #28]
 8005470:	2b00      	cmp	r3, #0
 8005472:	db2b      	blt.n	80054cc <_svfiprintf_r+0x184>
 8005474:	9309      	str	r3, [sp, #36]	; 0x24
 8005476:	4e30      	ldr	r6, [pc, #192]	; (8005538 <_svfiprintf_r+0x1f0>)
 8005478:	2203      	movs	r2, #3
 800547a:	0030      	movs	r0, r6
 800547c:	7829      	ldrb	r1, [r5, #0]
 800547e:	f000 f9e5 	bl	800584c <memchr>
 8005482:	2800      	cmp	r0, #0
 8005484:	d006      	beq.n	8005494 <_svfiprintf_r+0x14c>
 8005486:	2340      	movs	r3, #64	; 0x40
 8005488:	1b80      	subs	r0, r0, r6
 800548a:	4083      	lsls	r3, r0
 800548c:	6822      	ldr	r2, [r4, #0]
 800548e:	3501      	adds	r5, #1
 8005490:	4313      	orrs	r3, r2
 8005492:	6023      	str	r3, [r4, #0]
 8005494:	7829      	ldrb	r1, [r5, #0]
 8005496:	2206      	movs	r2, #6
 8005498:	4828      	ldr	r0, [pc, #160]	; (800553c <_svfiprintf_r+0x1f4>)
 800549a:	1c6e      	adds	r6, r5, #1
 800549c:	7621      	strb	r1, [r4, #24]
 800549e:	f000 f9d5 	bl	800584c <memchr>
 80054a2:	2800      	cmp	r0, #0
 80054a4:	d03c      	beq.n	8005520 <_svfiprintf_r+0x1d8>
 80054a6:	4b26      	ldr	r3, [pc, #152]	; (8005540 <_svfiprintf_r+0x1f8>)
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d125      	bne.n	80054f8 <_svfiprintf_r+0x1b0>
 80054ac:	2207      	movs	r2, #7
 80054ae:	9b07      	ldr	r3, [sp, #28]
 80054b0:	3307      	adds	r3, #7
 80054b2:	4393      	bics	r3, r2
 80054b4:	3308      	adds	r3, #8
 80054b6:	9307      	str	r3, [sp, #28]
 80054b8:	6963      	ldr	r3, [r4, #20]
 80054ba:	9a04      	ldr	r2, [sp, #16]
 80054bc:	189b      	adds	r3, r3, r2
 80054be:	6163      	str	r3, [r4, #20]
 80054c0:	e765      	b.n	800538e <_svfiprintf_r+0x46>
 80054c2:	4343      	muls	r3, r0
 80054c4:	0035      	movs	r5, r6
 80054c6:	2101      	movs	r1, #1
 80054c8:	189b      	adds	r3, r3, r2
 80054ca:	e7a6      	b.n	800541a <_svfiprintf_r+0xd2>
 80054cc:	2301      	movs	r3, #1
 80054ce:	425b      	negs	r3, r3
 80054d0:	e7d0      	b.n	8005474 <_svfiprintf_r+0x12c>
 80054d2:	2300      	movs	r3, #0
 80054d4:	200a      	movs	r0, #10
 80054d6:	001a      	movs	r2, r3
 80054d8:	3501      	adds	r5, #1
 80054da:	6063      	str	r3, [r4, #4]
 80054dc:	7829      	ldrb	r1, [r5, #0]
 80054de:	1c6e      	adds	r6, r5, #1
 80054e0:	3930      	subs	r1, #48	; 0x30
 80054e2:	2909      	cmp	r1, #9
 80054e4:	d903      	bls.n	80054ee <_svfiprintf_r+0x1a6>
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d0c5      	beq.n	8005476 <_svfiprintf_r+0x12e>
 80054ea:	9209      	str	r2, [sp, #36]	; 0x24
 80054ec:	e7c3      	b.n	8005476 <_svfiprintf_r+0x12e>
 80054ee:	4342      	muls	r2, r0
 80054f0:	0035      	movs	r5, r6
 80054f2:	2301      	movs	r3, #1
 80054f4:	1852      	adds	r2, r2, r1
 80054f6:	e7f1      	b.n	80054dc <_svfiprintf_r+0x194>
 80054f8:	ab07      	add	r3, sp, #28
 80054fa:	9300      	str	r3, [sp, #0]
 80054fc:	003a      	movs	r2, r7
 80054fe:	0021      	movs	r1, r4
 8005500:	4b10      	ldr	r3, [pc, #64]	; (8005544 <_svfiprintf_r+0x1fc>)
 8005502:	9803      	ldr	r0, [sp, #12]
 8005504:	e000      	b.n	8005508 <_svfiprintf_r+0x1c0>
 8005506:	bf00      	nop
 8005508:	9004      	str	r0, [sp, #16]
 800550a:	9b04      	ldr	r3, [sp, #16]
 800550c:	3301      	adds	r3, #1
 800550e:	d1d3      	bne.n	80054b8 <_svfiprintf_r+0x170>
 8005510:	89bb      	ldrh	r3, [r7, #12]
 8005512:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005514:	065b      	lsls	r3, r3, #25
 8005516:	d400      	bmi.n	800551a <_svfiprintf_r+0x1d2>
 8005518:	e72d      	b.n	8005376 <_svfiprintf_r+0x2e>
 800551a:	2001      	movs	r0, #1
 800551c:	4240      	negs	r0, r0
 800551e:	e72a      	b.n	8005376 <_svfiprintf_r+0x2e>
 8005520:	ab07      	add	r3, sp, #28
 8005522:	9300      	str	r3, [sp, #0]
 8005524:	003a      	movs	r2, r7
 8005526:	0021      	movs	r1, r4
 8005528:	4b06      	ldr	r3, [pc, #24]	; (8005544 <_svfiprintf_r+0x1fc>)
 800552a:	9803      	ldr	r0, [sp, #12]
 800552c:	f000 f87c 	bl	8005628 <_printf_i>
 8005530:	e7ea      	b.n	8005508 <_svfiprintf_r+0x1c0>
 8005532:	46c0      	nop			; (mov r8, r8)
 8005534:	08005d28 	.word	0x08005d28
 8005538:	08005d2e 	.word	0x08005d2e
 800553c:	08005d32 	.word	0x08005d32
 8005540:	00000000 	.word	0x00000000
 8005544:	08005285 	.word	0x08005285

08005548 <_printf_common>:
 8005548:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800554a:	0015      	movs	r5, r2
 800554c:	9301      	str	r3, [sp, #4]
 800554e:	688a      	ldr	r2, [r1, #8]
 8005550:	690b      	ldr	r3, [r1, #16]
 8005552:	000c      	movs	r4, r1
 8005554:	9000      	str	r0, [sp, #0]
 8005556:	4293      	cmp	r3, r2
 8005558:	da00      	bge.n	800555c <_printf_common+0x14>
 800555a:	0013      	movs	r3, r2
 800555c:	0022      	movs	r2, r4
 800555e:	602b      	str	r3, [r5, #0]
 8005560:	3243      	adds	r2, #67	; 0x43
 8005562:	7812      	ldrb	r2, [r2, #0]
 8005564:	2a00      	cmp	r2, #0
 8005566:	d001      	beq.n	800556c <_printf_common+0x24>
 8005568:	3301      	adds	r3, #1
 800556a:	602b      	str	r3, [r5, #0]
 800556c:	6823      	ldr	r3, [r4, #0]
 800556e:	069b      	lsls	r3, r3, #26
 8005570:	d502      	bpl.n	8005578 <_printf_common+0x30>
 8005572:	682b      	ldr	r3, [r5, #0]
 8005574:	3302      	adds	r3, #2
 8005576:	602b      	str	r3, [r5, #0]
 8005578:	6822      	ldr	r2, [r4, #0]
 800557a:	2306      	movs	r3, #6
 800557c:	0017      	movs	r7, r2
 800557e:	401f      	ands	r7, r3
 8005580:	421a      	tst	r2, r3
 8005582:	d027      	beq.n	80055d4 <_printf_common+0x8c>
 8005584:	0023      	movs	r3, r4
 8005586:	3343      	adds	r3, #67	; 0x43
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	1e5a      	subs	r2, r3, #1
 800558c:	4193      	sbcs	r3, r2
 800558e:	6822      	ldr	r2, [r4, #0]
 8005590:	0692      	lsls	r2, r2, #26
 8005592:	d430      	bmi.n	80055f6 <_printf_common+0xae>
 8005594:	0022      	movs	r2, r4
 8005596:	9901      	ldr	r1, [sp, #4]
 8005598:	9800      	ldr	r0, [sp, #0]
 800559a:	9e08      	ldr	r6, [sp, #32]
 800559c:	3243      	adds	r2, #67	; 0x43
 800559e:	47b0      	blx	r6
 80055a0:	1c43      	adds	r3, r0, #1
 80055a2:	d025      	beq.n	80055f0 <_printf_common+0xa8>
 80055a4:	2306      	movs	r3, #6
 80055a6:	6820      	ldr	r0, [r4, #0]
 80055a8:	682a      	ldr	r2, [r5, #0]
 80055aa:	68e1      	ldr	r1, [r4, #12]
 80055ac:	2500      	movs	r5, #0
 80055ae:	4003      	ands	r3, r0
 80055b0:	2b04      	cmp	r3, #4
 80055b2:	d103      	bne.n	80055bc <_printf_common+0x74>
 80055b4:	1a8d      	subs	r5, r1, r2
 80055b6:	43eb      	mvns	r3, r5
 80055b8:	17db      	asrs	r3, r3, #31
 80055ba:	401d      	ands	r5, r3
 80055bc:	68a3      	ldr	r3, [r4, #8]
 80055be:	6922      	ldr	r2, [r4, #16]
 80055c0:	4293      	cmp	r3, r2
 80055c2:	dd01      	ble.n	80055c8 <_printf_common+0x80>
 80055c4:	1a9b      	subs	r3, r3, r2
 80055c6:	18ed      	adds	r5, r5, r3
 80055c8:	2700      	movs	r7, #0
 80055ca:	42bd      	cmp	r5, r7
 80055cc:	d120      	bne.n	8005610 <_printf_common+0xc8>
 80055ce:	2000      	movs	r0, #0
 80055d0:	e010      	b.n	80055f4 <_printf_common+0xac>
 80055d2:	3701      	adds	r7, #1
 80055d4:	68e3      	ldr	r3, [r4, #12]
 80055d6:	682a      	ldr	r2, [r5, #0]
 80055d8:	1a9b      	subs	r3, r3, r2
 80055da:	42bb      	cmp	r3, r7
 80055dc:	ddd2      	ble.n	8005584 <_printf_common+0x3c>
 80055de:	0022      	movs	r2, r4
 80055e0:	2301      	movs	r3, #1
 80055e2:	9901      	ldr	r1, [sp, #4]
 80055e4:	9800      	ldr	r0, [sp, #0]
 80055e6:	9e08      	ldr	r6, [sp, #32]
 80055e8:	3219      	adds	r2, #25
 80055ea:	47b0      	blx	r6
 80055ec:	1c43      	adds	r3, r0, #1
 80055ee:	d1f0      	bne.n	80055d2 <_printf_common+0x8a>
 80055f0:	2001      	movs	r0, #1
 80055f2:	4240      	negs	r0, r0
 80055f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80055f6:	2030      	movs	r0, #48	; 0x30
 80055f8:	18e1      	adds	r1, r4, r3
 80055fa:	3143      	adds	r1, #67	; 0x43
 80055fc:	7008      	strb	r0, [r1, #0]
 80055fe:	0021      	movs	r1, r4
 8005600:	1c5a      	adds	r2, r3, #1
 8005602:	3145      	adds	r1, #69	; 0x45
 8005604:	7809      	ldrb	r1, [r1, #0]
 8005606:	18a2      	adds	r2, r4, r2
 8005608:	3243      	adds	r2, #67	; 0x43
 800560a:	3302      	adds	r3, #2
 800560c:	7011      	strb	r1, [r2, #0]
 800560e:	e7c1      	b.n	8005594 <_printf_common+0x4c>
 8005610:	0022      	movs	r2, r4
 8005612:	2301      	movs	r3, #1
 8005614:	9901      	ldr	r1, [sp, #4]
 8005616:	9800      	ldr	r0, [sp, #0]
 8005618:	9e08      	ldr	r6, [sp, #32]
 800561a:	321a      	adds	r2, #26
 800561c:	47b0      	blx	r6
 800561e:	1c43      	adds	r3, r0, #1
 8005620:	d0e6      	beq.n	80055f0 <_printf_common+0xa8>
 8005622:	3701      	adds	r7, #1
 8005624:	e7d1      	b.n	80055ca <_printf_common+0x82>
	...

08005628 <_printf_i>:
 8005628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800562a:	b08b      	sub	sp, #44	; 0x2c
 800562c:	9206      	str	r2, [sp, #24]
 800562e:	000a      	movs	r2, r1
 8005630:	3243      	adds	r2, #67	; 0x43
 8005632:	9307      	str	r3, [sp, #28]
 8005634:	9005      	str	r0, [sp, #20]
 8005636:	9204      	str	r2, [sp, #16]
 8005638:	7e0a      	ldrb	r2, [r1, #24]
 800563a:	000c      	movs	r4, r1
 800563c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800563e:	2a78      	cmp	r2, #120	; 0x78
 8005640:	d807      	bhi.n	8005652 <_printf_i+0x2a>
 8005642:	2a62      	cmp	r2, #98	; 0x62
 8005644:	d809      	bhi.n	800565a <_printf_i+0x32>
 8005646:	2a00      	cmp	r2, #0
 8005648:	d100      	bne.n	800564c <_printf_i+0x24>
 800564a:	e0c1      	b.n	80057d0 <_printf_i+0x1a8>
 800564c:	2a58      	cmp	r2, #88	; 0x58
 800564e:	d100      	bne.n	8005652 <_printf_i+0x2a>
 8005650:	e08c      	b.n	800576c <_printf_i+0x144>
 8005652:	0026      	movs	r6, r4
 8005654:	3642      	adds	r6, #66	; 0x42
 8005656:	7032      	strb	r2, [r6, #0]
 8005658:	e022      	b.n	80056a0 <_printf_i+0x78>
 800565a:	0010      	movs	r0, r2
 800565c:	3863      	subs	r0, #99	; 0x63
 800565e:	2815      	cmp	r0, #21
 8005660:	d8f7      	bhi.n	8005652 <_printf_i+0x2a>
 8005662:	f7fa fd57 	bl	8000114 <__gnu_thumb1_case_shi>
 8005666:	0016      	.short	0x0016
 8005668:	fff6001f 	.word	0xfff6001f
 800566c:	fff6fff6 	.word	0xfff6fff6
 8005670:	001ffff6 	.word	0x001ffff6
 8005674:	fff6fff6 	.word	0xfff6fff6
 8005678:	fff6fff6 	.word	0xfff6fff6
 800567c:	003600a8 	.word	0x003600a8
 8005680:	fff6009a 	.word	0xfff6009a
 8005684:	00b9fff6 	.word	0x00b9fff6
 8005688:	0036fff6 	.word	0x0036fff6
 800568c:	fff6fff6 	.word	0xfff6fff6
 8005690:	009e      	.short	0x009e
 8005692:	0026      	movs	r6, r4
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	3642      	adds	r6, #66	; 0x42
 8005698:	1d11      	adds	r1, r2, #4
 800569a:	6019      	str	r1, [r3, #0]
 800569c:	6813      	ldr	r3, [r2, #0]
 800569e:	7033      	strb	r3, [r6, #0]
 80056a0:	2301      	movs	r3, #1
 80056a2:	e0a7      	b.n	80057f4 <_printf_i+0x1cc>
 80056a4:	6808      	ldr	r0, [r1, #0]
 80056a6:	6819      	ldr	r1, [r3, #0]
 80056a8:	1d0a      	adds	r2, r1, #4
 80056aa:	0605      	lsls	r5, r0, #24
 80056ac:	d50b      	bpl.n	80056c6 <_printf_i+0x9e>
 80056ae:	680d      	ldr	r5, [r1, #0]
 80056b0:	601a      	str	r2, [r3, #0]
 80056b2:	2d00      	cmp	r5, #0
 80056b4:	da03      	bge.n	80056be <_printf_i+0x96>
 80056b6:	232d      	movs	r3, #45	; 0x2d
 80056b8:	9a04      	ldr	r2, [sp, #16]
 80056ba:	426d      	negs	r5, r5
 80056bc:	7013      	strb	r3, [r2, #0]
 80056be:	4b61      	ldr	r3, [pc, #388]	; (8005844 <_printf_i+0x21c>)
 80056c0:	270a      	movs	r7, #10
 80056c2:	9303      	str	r3, [sp, #12]
 80056c4:	e01b      	b.n	80056fe <_printf_i+0xd6>
 80056c6:	680d      	ldr	r5, [r1, #0]
 80056c8:	601a      	str	r2, [r3, #0]
 80056ca:	0641      	lsls	r1, r0, #25
 80056cc:	d5f1      	bpl.n	80056b2 <_printf_i+0x8a>
 80056ce:	b22d      	sxth	r5, r5
 80056d0:	e7ef      	b.n	80056b2 <_printf_i+0x8a>
 80056d2:	680d      	ldr	r5, [r1, #0]
 80056d4:	6819      	ldr	r1, [r3, #0]
 80056d6:	1d08      	adds	r0, r1, #4
 80056d8:	6018      	str	r0, [r3, #0]
 80056da:	062e      	lsls	r6, r5, #24
 80056dc:	d501      	bpl.n	80056e2 <_printf_i+0xba>
 80056de:	680d      	ldr	r5, [r1, #0]
 80056e0:	e003      	b.n	80056ea <_printf_i+0xc2>
 80056e2:	066d      	lsls	r5, r5, #25
 80056e4:	d5fb      	bpl.n	80056de <_printf_i+0xb6>
 80056e6:	680d      	ldr	r5, [r1, #0]
 80056e8:	b2ad      	uxth	r5, r5
 80056ea:	4b56      	ldr	r3, [pc, #344]	; (8005844 <_printf_i+0x21c>)
 80056ec:	2708      	movs	r7, #8
 80056ee:	9303      	str	r3, [sp, #12]
 80056f0:	2a6f      	cmp	r2, #111	; 0x6f
 80056f2:	d000      	beq.n	80056f6 <_printf_i+0xce>
 80056f4:	3702      	adds	r7, #2
 80056f6:	0023      	movs	r3, r4
 80056f8:	2200      	movs	r2, #0
 80056fa:	3343      	adds	r3, #67	; 0x43
 80056fc:	701a      	strb	r2, [r3, #0]
 80056fe:	6863      	ldr	r3, [r4, #4]
 8005700:	60a3      	str	r3, [r4, #8]
 8005702:	2b00      	cmp	r3, #0
 8005704:	db03      	blt.n	800570e <_printf_i+0xe6>
 8005706:	2204      	movs	r2, #4
 8005708:	6821      	ldr	r1, [r4, #0]
 800570a:	4391      	bics	r1, r2
 800570c:	6021      	str	r1, [r4, #0]
 800570e:	2d00      	cmp	r5, #0
 8005710:	d102      	bne.n	8005718 <_printf_i+0xf0>
 8005712:	9e04      	ldr	r6, [sp, #16]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00c      	beq.n	8005732 <_printf_i+0x10a>
 8005718:	9e04      	ldr	r6, [sp, #16]
 800571a:	0028      	movs	r0, r5
 800571c:	0039      	movs	r1, r7
 800571e:	f7fa fd89 	bl	8000234 <__aeabi_uidivmod>
 8005722:	9b03      	ldr	r3, [sp, #12]
 8005724:	3e01      	subs	r6, #1
 8005726:	5c5b      	ldrb	r3, [r3, r1]
 8005728:	7033      	strb	r3, [r6, #0]
 800572a:	002b      	movs	r3, r5
 800572c:	0005      	movs	r5, r0
 800572e:	429f      	cmp	r7, r3
 8005730:	d9f3      	bls.n	800571a <_printf_i+0xf2>
 8005732:	2f08      	cmp	r7, #8
 8005734:	d109      	bne.n	800574a <_printf_i+0x122>
 8005736:	6823      	ldr	r3, [r4, #0]
 8005738:	07db      	lsls	r3, r3, #31
 800573a:	d506      	bpl.n	800574a <_printf_i+0x122>
 800573c:	6863      	ldr	r3, [r4, #4]
 800573e:	6922      	ldr	r2, [r4, #16]
 8005740:	4293      	cmp	r3, r2
 8005742:	dc02      	bgt.n	800574a <_printf_i+0x122>
 8005744:	2330      	movs	r3, #48	; 0x30
 8005746:	3e01      	subs	r6, #1
 8005748:	7033      	strb	r3, [r6, #0]
 800574a:	9b04      	ldr	r3, [sp, #16]
 800574c:	1b9b      	subs	r3, r3, r6
 800574e:	6123      	str	r3, [r4, #16]
 8005750:	9b07      	ldr	r3, [sp, #28]
 8005752:	0021      	movs	r1, r4
 8005754:	9300      	str	r3, [sp, #0]
 8005756:	9805      	ldr	r0, [sp, #20]
 8005758:	9b06      	ldr	r3, [sp, #24]
 800575a:	aa09      	add	r2, sp, #36	; 0x24
 800575c:	f7ff fef4 	bl	8005548 <_printf_common>
 8005760:	1c43      	adds	r3, r0, #1
 8005762:	d14c      	bne.n	80057fe <_printf_i+0x1d6>
 8005764:	2001      	movs	r0, #1
 8005766:	4240      	negs	r0, r0
 8005768:	b00b      	add	sp, #44	; 0x2c
 800576a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800576c:	3145      	adds	r1, #69	; 0x45
 800576e:	700a      	strb	r2, [r1, #0]
 8005770:	4a34      	ldr	r2, [pc, #208]	; (8005844 <_printf_i+0x21c>)
 8005772:	9203      	str	r2, [sp, #12]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	6821      	ldr	r1, [r4, #0]
 8005778:	ca20      	ldmia	r2!, {r5}
 800577a:	601a      	str	r2, [r3, #0]
 800577c:	0608      	lsls	r0, r1, #24
 800577e:	d516      	bpl.n	80057ae <_printf_i+0x186>
 8005780:	07cb      	lsls	r3, r1, #31
 8005782:	d502      	bpl.n	800578a <_printf_i+0x162>
 8005784:	2320      	movs	r3, #32
 8005786:	4319      	orrs	r1, r3
 8005788:	6021      	str	r1, [r4, #0]
 800578a:	2710      	movs	r7, #16
 800578c:	2d00      	cmp	r5, #0
 800578e:	d1b2      	bne.n	80056f6 <_printf_i+0xce>
 8005790:	2320      	movs	r3, #32
 8005792:	6822      	ldr	r2, [r4, #0]
 8005794:	439a      	bics	r2, r3
 8005796:	6022      	str	r2, [r4, #0]
 8005798:	e7ad      	b.n	80056f6 <_printf_i+0xce>
 800579a:	2220      	movs	r2, #32
 800579c:	6809      	ldr	r1, [r1, #0]
 800579e:	430a      	orrs	r2, r1
 80057a0:	6022      	str	r2, [r4, #0]
 80057a2:	0022      	movs	r2, r4
 80057a4:	2178      	movs	r1, #120	; 0x78
 80057a6:	3245      	adds	r2, #69	; 0x45
 80057a8:	7011      	strb	r1, [r2, #0]
 80057aa:	4a27      	ldr	r2, [pc, #156]	; (8005848 <_printf_i+0x220>)
 80057ac:	e7e1      	b.n	8005772 <_printf_i+0x14a>
 80057ae:	0648      	lsls	r0, r1, #25
 80057b0:	d5e6      	bpl.n	8005780 <_printf_i+0x158>
 80057b2:	b2ad      	uxth	r5, r5
 80057b4:	e7e4      	b.n	8005780 <_printf_i+0x158>
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	680d      	ldr	r5, [r1, #0]
 80057ba:	1d10      	adds	r0, r2, #4
 80057bc:	6949      	ldr	r1, [r1, #20]
 80057be:	6018      	str	r0, [r3, #0]
 80057c0:	6813      	ldr	r3, [r2, #0]
 80057c2:	062e      	lsls	r6, r5, #24
 80057c4:	d501      	bpl.n	80057ca <_printf_i+0x1a2>
 80057c6:	6019      	str	r1, [r3, #0]
 80057c8:	e002      	b.n	80057d0 <_printf_i+0x1a8>
 80057ca:	066d      	lsls	r5, r5, #25
 80057cc:	d5fb      	bpl.n	80057c6 <_printf_i+0x19e>
 80057ce:	8019      	strh	r1, [r3, #0]
 80057d0:	2300      	movs	r3, #0
 80057d2:	9e04      	ldr	r6, [sp, #16]
 80057d4:	6123      	str	r3, [r4, #16]
 80057d6:	e7bb      	b.n	8005750 <_printf_i+0x128>
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	1d11      	adds	r1, r2, #4
 80057dc:	6019      	str	r1, [r3, #0]
 80057de:	6816      	ldr	r6, [r2, #0]
 80057e0:	2100      	movs	r1, #0
 80057e2:	0030      	movs	r0, r6
 80057e4:	6862      	ldr	r2, [r4, #4]
 80057e6:	f000 f831 	bl	800584c <memchr>
 80057ea:	2800      	cmp	r0, #0
 80057ec:	d001      	beq.n	80057f2 <_printf_i+0x1ca>
 80057ee:	1b80      	subs	r0, r0, r6
 80057f0:	6060      	str	r0, [r4, #4]
 80057f2:	6863      	ldr	r3, [r4, #4]
 80057f4:	6123      	str	r3, [r4, #16]
 80057f6:	2300      	movs	r3, #0
 80057f8:	9a04      	ldr	r2, [sp, #16]
 80057fa:	7013      	strb	r3, [r2, #0]
 80057fc:	e7a8      	b.n	8005750 <_printf_i+0x128>
 80057fe:	6923      	ldr	r3, [r4, #16]
 8005800:	0032      	movs	r2, r6
 8005802:	9906      	ldr	r1, [sp, #24]
 8005804:	9805      	ldr	r0, [sp, #20]
 8005806:	9d07      	ldr	r5, [sp, #28]
 8005808:	47a8      	blx	r5
 800580a:	1c43      	adds	r3, r0, #1
 800580c:	d0aa      	beq.n	8005764 <_printf_i+0x13c>
 800580e:	6823      	ldr	r3, [r4, #0]
 8005810:	079b      	lsls	r3, r3, #30
 8005812:	d415      	bmi.n	8005840 <_printf_i+0x218>
 8005814:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005816:	68e0      	ldr	r0, [r4, #12]
 8005818:	4298      	cmp	r0, r3
 800581a:	daa5      	bge.n	8005768 <_printf_i+0x140>
 800581c:	0018      	movs	r0, r3
 800581e:	e7a3      	b.n	8005768 <_printf_i+0x140>
 8005820:	0022      	movs	r2, r4
 8005822:	2301      	movs	r3, #1
 8005824:	9906      	ldr	r1, [sp, #24]
 8005826:	9805      	ldr	r0, [sp, #20]
 8005828:	9e07      	ldr	r6, [sp, #28]
 800582a:	3219      	adds	r2, #25
 800582c:	47b0      	blx	r6
 800582e:	1c43      	adds	r3, r0, #1
 8005830:	d098      	beq.n	8005764 <_printf_i+0x13c>
 8005832:	3501      	adds	r5, #1
 8005834:	68e3      	ldr	r3, [r4, #12]
 8005836:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005838:	1a9b      	subs	r3, r3, r2
 800583a:	42ab      	cmp	r3, r5
 800583c:	dcf0      	bgt.n	8005820 <_printf_i+0x1f8>
 800583e:	e7e9      	b.n	8005814 <_printf_i+0x1ec>
 8005840:	2500      	movs	r5, #0
 8005842:	e7f7      	b.n	8005834 <_printf_i+0x20c>
 8005844:	08005d39 	.word	0x08005d39
 8005848:	08005d4a 	.word	0x08005d4a

0800584c <memchr>:
 800584c:	b2c9      	uxtb	r1, r1
 800584e:	1882      	adds	r2, r0, r2
 8005850:	4290      	cmp	r0, r2
 8005852:	d101      	bne.n	8005858 <memchr+0xc>
 8005854:	2000      	movs	r0, #0
 8005856:	4770      	bx	lr
 8005858:	7803      	ldrb	r3, [r0, #0]
 800585a:	428b      	cmp	r3, r1
 800585c:	d0fb      	beq.n	8005856 <memchr+0xa>
 800585e:	3001      	adds	r0, #1
 8005860:	e7f6      	b.n	8005850 <memchr+0x4>

08005862 <memcpy>:
 8005862:	2300      	movs	r3, #0
 8005864:	b510      	push	{r4, lr}
 8005866:	429a      	cmp	r2, r3
 8005868:	d100      	bne.n	800586c <memcpy+0xa>
 800586a:	bd10      	pop	{r4, pc}
 800586c:	5ccc      	ldrb	r4, [r1, r3]
 800586e:	54c4      	strb	r4, [r0, r3]
 8005870:	3301      	adds	r3, #1
 8005872:	e7f8      	b.n	8005866 <memcpy+0x4>

08005874 <memmove>:
 8005874:	b510      	push	{r4, lr}
 8005876:	4288      	cmp	r0, r1
 8005878:	d902      	bls.n	8005880 <memmove+0xc>
 800587a:	188b      	adds	r3, r1, r2
 800587c:	4298      	cmp	r0, r3
 800587e:	d303      	bcc.n	8005888 <memmove+0x14>
 8005880:	2300      	movs	r3, #0
 8005882:	e007      	b.n	8005894 <memmove+0x20>
 8005884:	5c8b      	ldrb	r3, [r1, r2]
 8005886:	5483      	strb	r3, [r0, r2]
 8005888:	3a01      	subs	r2, #1
 800588a:	d2fb      	bcs.n	8005884 <memmove+0x10>
 800588c:	bd10      	pop	{r4, pc}
 800588e:	5ccc      	ldrb	r4, [r1, r3]
 8005890:	54c4      	strb	r4, [r0, r3]
 8005892:	3301      	adds	r3, #1
 8005894:	429a      	cmp	r2, r3
 8005896:	d1fa      	bne.n	800588e <memmove+0x1a>
 8005898:	e7f8      	b.n	800588c <memmove+0x18>
	...

0800589c <_free_r>:
 800589c:	b570      	push	{r4, r5, r6, lr}
 800589e:	0005      	movs	r5, r0
 80058a0:	2900      	cmp	r1, #0
 80058a2:	d010      	beq.n	80058c6 <_free_r+0x2a>
 80058a4:	1f0c      	subs	r4, r1, #4
 80058a6:	6823      	ldr	r3, [r4, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	da00      	bge.n	80058ae <_free_r+0x12>
 80058ac:	18e4      	adds	r4, r4, r3
 80058ae:	0028      	movs	r0, r5
 80058b0:	f000 f918 	bl	8005ae4 <__malloc_lock>
 80058b4:	4a1d      	ldr	r2, [pc, #116]	; (800592c <_free_r+0x90>)
 80058b6:	6813      	ldr	r3, [r2, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d105      	bne.n	80058c8 <_free_r+0x2c>
 80058bc:	6063      	str	r3, [r4, #4]
 80058be:	6014      	str	r4, [r2, #0]
 80058c0:	0028      	movs	r0, r5
 80058c2:	f000 f917 	bl	8005af4 <__malloc_unlock>
 80058c6:	bd70      	pop	{r4, r5, r6, pc}
 80058c8:	42a3      	cmp	r3, r4
 80058ca:	d908      	bls.n	80058de <_free_r+0x42>
 80058cc:	6821      	ldr	r1, [r4, #0]
 80058ce:	1860      	adds	r0, r4, r1
 80058d0:	4283      	cmp	r3, r0
 80058d2:	d1f3      	bne.n	80058bc <_free_r+0x20>
 80058d4:	6818      	ldr	r0, [r3, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	1841      	adds	r1, r0, r1
 80058da:	6021      	str	r1, [r4, #0]
 80058dc:	e7ee      	b.n	80058bc <_free_r+0x20>
 80058de:	001a      	movs	r2, r3
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d001      	beq.n	80058ea <_free_r+0x4e>
 80058e6:	42a3      	cmp	r3, r4
 80058e8:	d9f9      	bls.n	80058de <_free_r+0x42>
 80058ea:	6811      	ldr	r1, [r2, #0]
 80058ec:	1850      	adds	r0, r2, r1
 80058ee:	42a0      	cmp	r0, r4
 80058f0:	d10b      	bne.n	800590a <_free_r+0x6e>
 80058f2:	6820      	ldr	r0, [r4, #0]
 80058f4:	1809      	adds	r1, r1, r0
 80058f6:	1850      	adds	r0, r2, r1
 80058f8:	6011      	str	r1, [r2, #0]
 80058fa:	4283      	cmp	r3, r0
 80058fc:	d1e0      	bne.n	80058c0 <_free_r+0x24>
 80058fe:	6818      	ldr	r0, [r3, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	1841      	adds	r1, r0, r1
 8005904:	6011      	str	r1, [r2, #0]
 8005906:	6053      	str	r3, [r2, #4]
 8005908:	e7da      	b.n	80058c0 <_free_r+0x24>
 800590a:	42a0      	cmp	r0, r4
 800590c:	d902      	bls.n	8005914 <_free_r+0x78>
 800590e:	230c      	movs	r3, #12
 8005910:	602b      	str	r3, [r5, #0]
 8005912:	e7d5      	b.n	80058c0 <_free_r+0x24>
 8005914:	6821      	ldr	r1, [r4, #0]
 8005916:	1860      	adds	r0, r4, r1
 8005918:	4283      	cmp	r3, r0
 800591a:	d103      	bne.n	8005924 <_free_r+0x88>
 800591c:	6818      	ldr	r0, [r3, #0]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	1841      	adds	r1, r0, r1
 8005922:	6021      	str	r1, [r4, #0]
 8005924:	6063      	str	r3, [r4, #4]
 8005926:	6054      	str	r4, [r2, #4]
 8005928:	e7ca      	b.n	80058c0 <_free_r+0x24>
 800592a:	46c0      	nop			; (mov r8, r8)
 800592c:	200003f4 	.word	0x200003f4

08005930 <sbrk_aligned>:
 8005930:	b570      	push	{r4, r5, r6, lr}
 8005932:	4e0f      	ldr	r6, [pc, #60]	; (8005970 <sbrk_aligned+0x40>)
 8005934:	000d      	movs	r5, r1
 8005936:	6831      	ldr	r1, [r6, #0]
 8005938:	0004      	movs	r4, r0
 800593a:	2900      	cmp	r1, #0
 800593c:	d102      	bne.n	8005944 <sbrk_aligned+0x14>
 800593e:	f000 f8bf 	bl	8005ac0 <_sbrk_r>
 8005942:	6030      	str	r0, [r6, #0]
 8005944:	0029      	movs	r1, r5
 8005946:	0020      	movs	r0, r4
 8005948:	f000 f8ba 	bl	8005ac0 <_sbrk_r>
 800594c:	1c43      	adds	r3, r0, #1
 800594e:	d00a      	beq.n	8005966 <sbrk_aligned+0x36>
 8005950:	2303      	movs	r3, #3
 8005952:	1cc5      	adds	r5, r0, #3
 8005954:	439d      	bics	r5, r3
 8005956:	42a8      	cmp	r0, r5
 8005958:	d007      	beq.n	800596a <sbrk_aligned+0x3a>
 800595a:	1a29      	subs	r1, r5, r0
 800595c:	0020      	movs	r0, r4
 800595e:	f000 f8af 	bl	8005ac0 <_sbrk_r>
 8005962:	1c43      	adds	r3, r0, #1
 8005964:	d101      	bne.n	800596a <sbrk_aligned+0x3a>
 8005966:	2501      	movs	r5, #1
 8005968:	426d      	negs	r5, r5
 800596a:	0028      	movs	r0, r5
 800596c:	bd70      	pop	{r4, r5, r6, pc}
 800596e:	46c0      	nop			; (mov r8, r8)
 8005970:	200003f8 	.word	0x200003f8

08005974 <_malloc_r>:
 8005974:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005976:	2203      	movs	r2, #3
 8005978:	1ccb      	adds	r3, r1, #3
 800597a:	4393      	bics	r3, r2
 800597c:	3308      	adds	r3, #8
 800597e:	0006      	movs	r6, r0
 8005980:	001f      	movs	r7, r3
 8005982:	2b0c      	cmp	r3, #12
 8005984:	d232      	bcs.n	80059ec <_malloc_r+0x78>
 8005986:	270c      	movs	r7, #12
 8005988:	42b9      	cmp	r1, r7
 800598a:	d831      	bhi.n	80059f0 <_malloc_r+0x7c>
 800598c:	0030      	movs	r0, r6
 800598e:	f000 f8a9 	bl	8005ae4 <__malloc_lock>
 8005992:	4d32      	ldr	r5, [pc, #200]	; (8005a5c <_malloc_r+0xe8>)
 8005994:	682b      	ldr	r3, [r5, #0]
 8005996:	001c      	movs	r4, r3
 8005998:	2c00      	cmp	r4, #0
 800599a:	d12e      	bne.n	80059fa <_malloc_r+0x86>
 800599c:	0039      	movs	r1, r7
 800599e:	0030      	movs	r0, r6
 80059a0:	f7ff ffc6 	bl	8005930 <sbrk_aligned>
 80059a4:	0004      	movs	r4, r0
 80059a6:	1c43      	adds	r3, r0, #1
 80059a8:	d11e      	bne.n	80059e8 <_malloc_r+0x74>
 80059aa:	682c      	ldr	r4, [r5, #0]
 80059ac:	0025      	movs	r5, r4
 80059ae:	2d00      	cmp	r5, #0
 80059b0:	d14a      	bne.n	8005a48 <_malloc_r+0xd4>
 80059b2:	6823      	ldr	r3, [r4, #0]
 80059b4:	0029      	movs	r1, r5
 80059b6:	18e3      	adds	r3, r4, r3
 80059b8:	0030      	movs	r0, r6
 80059ba:	9301      	str	r3, [sp, #4]
 80059bc:	f000 f880 	bl	8005ac0 <_sbrk_r>
 80059c0:	9b01      	ldr	r3, [sp, #4]
 80059c2:	4283      	cmp	r3, r0
 80059c4:	d143      	bne.n	8005a4e <_malloc_r+0xda>
 80059c6:	6823      	ldr	r3, [r4, #0]
 80059c8:	3703      	adds	r7, #3
 80059ca:	1aff      	subs	r7, r7, r3
 80059cc:	2303      	movs	r3, #3
 80059ce:	439f      	bics	r7, r3
 80059d0:	3708      	adds	r7, #8
 80059d2:	2f0c      	cmp	r7, #12
 80059d4:	d200      	bcs.n	80059d8 <_malloc_r+0x64>
 80059d6:	270c      	movs	r7, #12
 80059d8:	0039      	movs	r1, r7
 80059da:	0030      	movs	r0, r6
 80059dc:	f7ff ffa8 	bl	8005930 <sbrk_aligned>
 80059e0:	1c43      	adds	r3, r0, #1
 80059e2:	d034      	beq.n	8005a4e <_malloc_r+0xda>
 80059e4:	6823      	ldr	r3, [r4, #0]
 80059e6:	19df      	adds	r7, r3, r7
 80059e8:	6027      	str	r7, [r4, #0]
 80059ea:	e013      	b.n	8005a14 <_malloc_r+0xa0>
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	dacb      	bge.n	8005988 <_malloc_r+0x14>
 80059f0:	230c      	movs	r3, #12
 80059f2:	2500      	movs	r5, #0
 80059f4:	6033      	str	r3, [r6, #0]
 80059f6:	0028      	movs	r0, r5
 80059f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80059fa:	6822      	ldr	r2, [r4, #0]
 80059fc:	1bd1      	subs	r1, r2, r7
 80059fe:	d420      	bmi.n	8005a42 <_malloc_r+0xce>
 8005a00:	290b      	cmp	r1, #11
 8005a02:	d917      	bls.n	8005a34 <_malloc_r+0xc0>
 8005a04:	19e2      	adds	r2, r4, r7
 8005a06:	6027      	str	r7, [r4, #0]
 8005a08:	42a3      	cmp	r3, r4
 8005a0a:	d111      	bne.n	8005a30 <_malloc_r+0xbc>
 8005a0c:	602a      	str	r2, [r5, #0]
 8005a0e:	6863      	ldr	r3, [r4, #4]
 8005a10:	6011      	str	r1, [r2, #0]
 8005a12:	6053      	str	r3, [r2, #4]
 8005a14:	0030      	movs	r0, r6
 8005a16:	0025      	movs	r5, r4
 8005a18:	f000 f86c 	bl	8005af4 <__malloc_unlock>
 8005a1c:	2207      	movs	r2, #7
 8005a1e:	350b      	adds	r5, #11
 8005a20:	1d23      	adds	r3, r4, #4
 8005a22:	4395      	bics	r5, r2
 8005a24:	1aea      	subs	r2, r5, r3
 8005a26:	429d      	cmp	r5, r3
 8005a28:	d0e5      	beq.n	80059f6 <_malloc_r+0x82>
 8005a2a:	1b5b      	subs	r3, r3, r5
 8005a2c:	50a3      	str	r3, [r4, r2]
 8005a2e:	e7e2      	b.n	80059f6 <_malloc_r+0x82>
 8005a30:	605a      	str	r2, [r3, #4]
 8005a32:	e7ec      	b.n	8005a0e <_malloc_r+0x9a>
 8005a34:	6862      	ldr	r2, [r4, #4]
 8005a36:	42a3      	cmp	r3, r4
 8005a38:	d101      	bne.n	8005a3e <_malloc_r+0xca>
 8005a3a:	602a      	str	r2, [r5, #0]
 8005a3c:	e7ea      	b.n	8005a14 <_malloc_r+0xa0>
 8005a3e:	605a      	str	r2, [r3, #4]
 8005a40:	e7e8      	b.n	8005a14 <_malloc_r+0xa0>
 8005a42:	0023      	movs	r3, r4
 8005a44:	6864      	ldr	r4, [r4, #4]
 8005a46:	e7a7      	b.n	8005998 <_malloc_r+0x24>
 8005a48:	002c      	movs	r4, r5
 8005a4a:	686d      	ldr	r5, [r5, #4]
 8005a4c:	e7af      	b.n	80059ae <_malloc_r+0x3a>
 8005a4e:	230c      	movs	r3, #12
 8005a50:	0030      	movs	r0, r6
 8005a52:	6033      	str	r3, [r6, #0]
 8005a54:	f000 f84e 	bl	8005af4 <__malloc_unlock>
 8005a58:	e7cd      	b.n	80059f6 <_malloc_r+0x82>
 8005a5a:	46c0      	nop			; (mov r8, r8)
 8005a5c:	200003f4 	.word	0x200003f4

08005a60 <_realloc_r>:
 8005a60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a62:	0007      	movs	r7, r0
 8005a64:	000e      	movs	r6, r1
 8005a66:	0014      	movs	r4, r2
 8005a68:	2900      	cmp	r1, #0
 8005a6a:	d105      	bne.n	8005a78 <_realloc_r+0x18>
 8005a6c:	0011      	movs	r1, r2
 8005a6e:	f7ff ff81 	bl	8005974 <_malloc_r>
 8005a72:	0005      	movs	r5, r0
 8005a74:	0028      	movs	r0, r5
 8005a76:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005a78:	2a00      	cmp	r2, #0
 8005a7a:	d103      	bne.n	8005a84 <_realloc_r+0x24>
 8005a7c:	f7ff ff0e 	bl	800589c <_free_r>
 8005a80:	0025      	movs	r5, r4
 8005a82:	e7f7      	b.n	8005a74 <_realloc_r+0x14>
 8005a84:	f000 f83e 	bl	8005b04 <_malloc_usable_size_r>
 8005a88:	9001      	str	r0, [sp, #4]
 8005a8a:	4284      	cmp	r4, r0
 8005a8c:	d803      	bhi.n	8005a96 <_realloc_r+0x36>
 8005a8e:	0035      	movs	r5, r6
 8005a90:	0843      	lsrs	r3, r0, #1
 8005a92:	42a3      	cmp	r3, r4
 8005a94:	d3ee      	bcc.n	8005a74 <_realloc_r+0x14>
 8005a96:	0021      	movs	r1, r4
 8005a98:	0038      	movs	r0, r7
 8005a9a:	f7ff ff6b 	bl	8005974 <_malloc_r>
 8005a9e:	1e05      	subs	r5, r0, #0
 8005aa0:	d0e8      	beq.n	8005a74 <_realloc_r+0x14>
 8005aa2:	9b01      	ldr	r3, [sp, #4]
 8005aa4:	0022      	movs	r2, r4
 8005aa6:	429c      	cmp	r4, r3
 8005aa8:	d900      	bls.n	8005aac <_realloc_r+0x4c>
 8005aaa:	001a      	movs	r2, r3
 8005aac:	0031      	movs	r1, r6
 8005aae:	0028      	movs	r0, r5
 8005ab0:	f7ff fed7 	bl	8005862 <memcpy>
 8005ab4:	0031      	movs	r1, r6
 8005ab6:	0038      	movs	r0, r7
 8005ab8:	f7ff fef0 	bl	800589c <_free_r>
 8005abc:	e7da      	b.n	8005a74 <_realloc_r+0x14>
	...

08005ac0 <_sbrk_r>:
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	b570      	push	{r4, r5, r6, lr}
 8005ac4:	4d06      	ldr	r5, [pc, #24]	; (8005ae0 <_sbrk_r+0x20>)
 8005ac6:	0004      	movs	r4, r0
 8005ac8:	0008      	movs	r0, r1
 8005aca:	602b      	str	r3, [r5, #0]
 8005acc:	f7fb fb36 	bl	800113c <_sbrk>
 8005ad0:	1c43      	adds	r3, r0, #1
 8005ad2:	d103      	bne.n	8005adc <_sbrk_r+0x1c>
 8005ad4:	682b      	ldr	r3, [r5, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d000      	beq.n	8005adc <_sbrk_r+0x1c>
 8005ada:	6023      	str	r3, [r4, #0]
 8005adc:	bd70      	pop	{r4, r5, r6, pc}
 8005ade:	46c0      	nop			; (mov r8, r8)
 8005ae0:	200003fc 	.word	0x200003fc

08005ae4 <__malloc_lock>:
 8005ae4:	b510      	push	{r4, lr}
 8005ae6:	4802      	ldr	r0, [pc, #8]	; (8005af0 <__malloc_lock+0xc>)
 8005ae8:	f000 f814 	bl	8005b14 <__retarget_lock_acquire_recursive>
 8005aec:	bd10      	pop	{r4, pc}
 8005aee:	46c0      	nop			; (mov r8, r8)
 8005af0:	20000400 	.word	0x20000400

08005af4 <__malloc_unlock>:
 8005af4:	b510      	push	{r4, lr}
 8005af6:	4802      	ldr	r0, [pc, #8]	; (8005b00 <__malloc_unlock+0xc>)
 8005af8:	f000 f80d 	bl	8005b16 <__retarget_lock_release_recursive>
 8005afc:	bd10      	pop	{r4, pc}
 8005afe:	46c0      	nop			; (mov r8, r8)
 8005b00:	20000400 	.word	0x20000400

08005b04 <_malloc_usable_size_r>:
 8005b04:	1f0b      	subs	r3, r1, #4
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	1f18      	subs	r0, r3, #4
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	da01      	bge.n	8005b12 <_malloc_usable_size_r+0xe>
 8005b0e:	580b      	ldr	r3, [r1, r0]
 8005b10:	18c0      	adds	r0, r0, r3
 8005b12:	4770      	bx	lr

08005b14 <__retarget_lock_acquire_recursive>:
 8005b14:	4770      	bx	lr

08005b16 <__retarget_lock_release_recursive>:
 8005b16:	4770      	bx	lr

08005b18 <_init>:
 8005b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b1a:	46c0      	nop			; (mov r8, r8)
 8005b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b1e:	bc08      	pop	{r3}
 8005b20:	469e      	mov	lr, r3
 8005b22:	4770      	bx	lr

08005b24 <_fini>:
 8005b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b26:	46c0      	nop			; (mov r8, r8)
 8005b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b2a:	bc08      	pop	{r3}
 8005b2c:	469e      	mov	lr, r3
 8005b2e:	4770      	bx	lr
