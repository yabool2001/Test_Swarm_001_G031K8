
Test_Swarm_001_G031K8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007278  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  08007334  08007334  00017334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077d0  080077d0  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  080077d0  080077d0  000177d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077d8  080077d8  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077d8  080077d8  000177d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077dc  080077dc  000177dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  080077e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f8  20000100  080078e0  00020100  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f8  080078e0  000204f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015308  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b15  00000000  00000000  00035430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001248  00000000  00000000  00037f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001130  00000000  00000000  00039190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188b8  00000000  00000000  0003a2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014f7d  00000000  00000000  00052b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b25b  00000000  00000000  00067af5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00102d50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050d4  00000000  00000000  00102da0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000100 	.word	0x20000100
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800731c 	.word	0x0800731c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000104 	.word	0x20000104
 8000100:	0800731c 	.word	0x0800731c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	469b      	mov	fp, r3
 800048a:	d433      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048c:	465a      	mov	r2, fp
 800048e:	4653      	mov	r3, sl
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83a      	bhi.n	8000516 <__udivmoddi4+0xc2>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e078      	b.n	8000598 <__udivmoddi4+0x144>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e075      	b.n	800059e <__udivmoddi4+0x14a>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e028      	b.n	800051e <__udivmoddi4+0xca>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	2320      	movs	r3, #32
 80004f8:	1a9b      	subs	r3, r3, r2
 80004fa:	4652      	mov	r2, sl
 80004fc:	40da      	lsrs	r2, r3
 80004fe:	4641      	mov	r1, r8
 8000500:	0013      	movs	r3, r2
 8000502:	464a      	mov	r2, r9
 8000504:	408a      	lsls	r2, r1
 8000506:	0017      	movs	r7, r2
 8000508:	4642      	mov	r2, r8
 800050a:	431f      	orrs	r7, r3
 800050c:	4653      	mov	r3, sl
 800050e:	4093      	lsls	r3, r2
 8000510:	001e      	movs	r6, r3
 8000512:	42af      	cmp	r7, r5
 8000514:	d9c4      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000516:	2200      	movs	r2, #0
 8000518:	2300      	movs	r3, #0
 800051a:	9200      	str	r2, [sp, #0]
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	4643      	mov	r3, r8
 8000520:	2b00      	cmp	r3, #0
 8000522:	d0d9      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000524:	07fb      	lsls	r3, r7, #31
 8000526:	0872      	lsrs	r2, r6, #1
 8000528:	431a      	orrs	r2, r3
 800052a:	4646      	mov	r6, r8
 800052c:	087b      	lsrs	r3, r7, #1
 800052e:	e00e      	b.n	800054e <__udivmoddi4+0xfa>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d101      	bne.n	8000538 <__udivmoddi4+0xe4>
 8000534:	42a2      	cmp	r2, r4
 8000536:	d80c      	bhi.n	8000552 <__udivmoddi4+0xfe>
 8000538:	1aa4      	subs	r4, r4, r2
 800053a:	419d      	sbcs	r5, r3
 800053c:	2001      	movs	r0, #1
 800053e:	1924      	adds	r4, r4, r4
 8000540:	416d      	adcs	r5, r5
 8000542:	2100      	movs	r1, #0
 8000544:	3e01      	subs	r6, #1
 8000546:	1824      	adds	r4, r4, r0
 8000548:	414d      	adcs	r5, r1
 800054a:	2e00      	cmp	r6, #0
 800054c:	d006      	beq.n	800055c <__udivmoddi4+0x108>
 800054e:	42ab      	cmp	r3, r5
 8000550:	d9ee      	bls.n	8000530 <__udivmoddi4+0xdc>
 8000552:	3e01      	subs	r6, #1
 8000554:	1924      	adds	r4, r4, r4
 8000556:	416d      	adcs	r5, r5
 8000558:	2e00      	cmp	r6, #0
 800055a:	d1f8      	bne.n	800054e <__udivmoddi4+0xfa>
 800055c:	9800      	ldr	r0, [sp, #0]
 800055e:	9901      	ldr	r1, [sp, #4]
 8000560:	465b      	mov	r3, fp
 8000562:	1900      	adds	r0, r0, r4
 8000564:	4169      	adcs	r1, r5
 8000566:	2b00      	cmp	r3, #0
 8000568:	db24      	blt.n	80005b4 <__udivmoddi4+0x160>
 800056a:	002b      	movs	r3, r5
 800056c:	465a      	mov	r2, fp
 800056e:	4644      	mov	r4, r8
 8000570:	40d3      	lsrs	r3, r2
 8000572:	002a      	movs	r2, r5
 8000574:	40e2      	lsrs	r2, r4
 8000576:	001c      	movs	r4, r3
 8000578:	465b      	mov	r3, fp
 800057a:	0015      	movs	r5, r2
 800057c:	2b00      	cmp	r3, #0
 800057e:	db2a      	blt.n	80005d6 <__udivmoddi4+0x182>
 8000580:	0026      	movs	r6, r4
 8000582:	409e      	lsls	r6, r3
 8000584:	0033      	movs	r3, r6
 8000586:	0026      	movs	r6, r4
 8000588:	4647      	mov	r7, r8
 800058a:	40be      	lsls	r6, r7
 800058c:	0032      	movs	r2, r6
 800058e:	1a80      	subs	r0, r0, r2
 8000590:	4199      	sbcs	r1, r3
 8000592:	9000      	str	r0, [sp, #0]
 8000594:	9101      	str	r1, [sp, #4]
 8000596:	e79f      	b.n	80004d8 <__udivmoddi4+0x84>
 8000598:	42a3      	cmp	r3, r4
 800059a:	d8bc      	bhi.n	8000516 <__udivmoddi4+0xc2>
 800059c:	e783      	b.n	80004a6 <__udivmoddi4+0x52>
 800059e:	4642      	mov	r2, r8
 80005a0:	2320      	movs	r3, #32
 80005a2:	2100      	movs	r1, #0
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	2200      	movs	r2, #0
 80005a8:	9100      	str	r1, [sp, #0]
 80005aa:	9201      	str	r2, [sp, #4]
 80005ac:	2201      	movs	r2, #1
 80005ae:	40da      	lsrs	r2, r3
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	e786      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	2320      	movs	r3, #32
 80005b8:	1a9b      	subs	r3, r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	4646      	mov	r6, r8
 80005be:	409a      	lsls	r2, r3
 80005c0:	0023      	movs	r3, r4
 80005c2:	40f3      	lsrs	r3, r6
 80005c4:	4644      	mov	r4, r8
 80005c6:	4313      	orrs	r3, r2
 80005c8:	002a      	movs	r2, r5
 80005ca:	40e2      	lsrs	r2, r4
 80005cc:	001c      	movs	r4, r3
 80005ce:	465b      	mov	r3, fp
 80005d0:	0015      	movs	r5, r2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	dad4      	bge.n	8000580 <__udivmoddi4+0x12c>
 80005d6:	4642      	mov	r2, r8
 80005d8:	002f      	movs	r7, r5
 80005da:	2320      	movs	r3, #32
 80005dc:	0026      	movs	r6, r4
 80005de:	4097      	lsls	r7, r2
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	40de      	lsrs	r6, r3
 80005e4:	003b      	movs	r3, r7
 80005e6:	4333      	orrs	r3, r6
 80005e8:	e7cd      	b.n	8000586 <__udivmoddi4+0x132>
 80005ea:	46c0      	nop			; (mov r8, r8)

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f000 fec9 	bl	80013dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064a:	f000 f965 	bl	8000918 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064e:	f000 fac3 	bl	8000bd8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000652:	f000 faa3 	bl	8000b9c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000656:	f000 fa53 	bl	8000b00 <MX_USART1_UART_Init>
  MX_RTC_Init();
 800065a:	f000 f9b3 	bl	80009c4 <MX_RTC_Init>
  MX_TIM14_Init();
 800065e:	f000 fa27 	bl	8000ab0 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  __HAL_TIM_CLEAR_IT ( &htim14 , TIM_IT_UPDATE ) ; // żeby nie generować przerwania TIM6 od razu: https://stackoverflow.com/questions/71099885/why-hal-tim-periodelapsedcallback-gets-called-immediately-after-hal-tim-base-sta
 8000662:	4b80      	ldr	r3, [pc, #512]	; (8000864 <main+0x224>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	2202      	movs	r2, #2
 8000668:	4252      	negs	r2, r2
 800066a:	611a      	str	r2, [r3, #16]
  //HAL_Delay ( 600000 ) ; // Nie potrzeba, bo tlyko by opozniało wszystko po shutdown
  HAL_UARTEx_ReceiveToIdle_DMA ( &huart1 , rx_buff , sizeof ( rx_buff ) ) ;
 800066c:	497e      	ldr	r1, [pc, #504]	; (8000868 <main+0x228>)
 800066e:	4b7f      	ldr	r3, [pc, #508]	; (800086c <main+0x22c>)
 8000670:	22c8      	movs	r2, #200	; 0xc8
 8000672:	0018      	movs	r0, r3
 8000674:	f004 fd92 	bl	800519c <HAL_UARTEx_ReceiveToIdle_DMA>

  send2swarm_at_command ( cs_at_comm , cs_answer , 1 ) ;
 8000678:	4b7d      	ldr	r3, [pc, #500]	; (8000870 <main+0x230>)
 800067a:	6818      	ldr	r0, [r3, #0]
 800067c:	4b7d      	ldr	r3, [pc, #500]	; (8000874 <main+0x234>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2201      	movs	r2, #1
 8000682:	0019      	movs	r1, r3
 8000684:	f000 fb08 	bl	8000c98 <send2swarm_at_command>
  if ( checklist == 1 )
 8000688:	4b7b      	ldr	r3, [pc, #492]	; (8000878 <main+0x238>)
 800068a:	881b      	ldrh	r3, [r3, #0]
 800068c:	2b01      	cmp	r3, #1
 800068e:	d107      	bne.n	80006a0 <main+0x60>
	  send2swarm_at_command ( rt_0_at_comm , rt_ok_answer , 2 ) ;
 8000690:	4b7a      	ldr	r3, [pc, #488]	; (800087c <main+0x23c>)
 8000692:	6818      	ldr	r0, [r3, #0]
 8000694:	4b7a      	ldr	r3, [pc, #488]	; (8000880 <main+0x240>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2202      	movs	r2, #2
 800069a:	0019      	movs	r1, r3
 800069c:	f000 fafc 	bl	8000c98 <send2swarm_at_command>
  if ( checklist == 2 )
 80006a0:	4b75      	ldr	r3, [pc, #468]	; (8000878 <main+0x238>)
 80006a2:	881b      	ldrh	r3, [r3, #0]
 80006a4:	2b02      	cmp	r3, #2
 80006a6:	d107      	bne.n	80006b8 <main+0x78>
	  send2swarm_at_command ( rt_q_rate_at_comm , rt_0_answer , 3 ) ; // Query RT rate
 80006a8:	4b76      	ldr	r3, [pc, #472]	; (8000884 <main+0x244>)
 80006aa:	6818      	ldr	r0, [r3, #0]
 80006ac:	4b76      	ldr	r3, [pc, #472]	; (8000888 <main+0x248>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2203      	movs	r2, #3
 80006b2:	0019      	movs	r1, r3
 80006b4:	f000 faf0 	bl	8000c98 <send2swarm_at_command>
  if ( checklist == 3 )
 80006b8:	4b6f      	ldr	r3, [pc, #444]	; (8000878 <main+0x238>)
 80006ba:	881b      	ldrh	r3, [r3, #0]
 80006bc:	2b03      	cmp	r3, #3
 80006be:	d107      	bne.n	80006d0 <main+0x90>
	  send2swarm_at_command ( pw_0_at_comm , pw_ok_answer , 4 ) ;
 80006c0:	4b72      	ldr	r3, [pc, #456]	; (800088c <main+0x24c>)
 80006c2:	6818      	ldr	r0, [r3, #0]
 80006c4:	4b72      	ldr	r3, [pc, #456]	; (8000890 <main+0x250>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2204      	movs	r2, #4
 80006ca:	0019      	movs	r1, r3
 80006cc:	f000 fae4 	bl	8000c98 <send2swarm_at_command>
  if ( checklist == 4 )
 80006d0:	4b69      	ldr	r3, [pc, #420]	; (8000878 <main+0x238>)
 80006d2:	881b      	ldrh	r3, [r3, #0]
 80006d4:	2b04      	cmp	r3, #4
 80006d6:	d107      	bne.n	80006e8 <main+0xa8>
	  send2swarm_at_command ( pw_q_rate_at_comm , pw_0_answer , 5 ) ;
 80006d8:	4b6e      	ldr	r3, [pc, #440]	; (8000894 <main+0x254>)
 80006da:	6818      	ldr	r0, [r3, #0]
 80006dc:	4b6e      	ldr	r3, [pc, #440]	; (8000898 <main+0x258>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2205      	movs	r2, #5
 80006e2:	0019      	movs	r1, r3
 80006e4:	f000 fad8 	bl	8000c98 <send2swarm_at_command>
  if ( checklist == 5 )
 80006e8:	4b63      	ldr	r3, [pc, #396]	; (8000878 <main+0x238>)
 80006ea:	881b      	ldrh	r3, [r3, #0]
 80006ec:	2b05      	cmp	r3, #5
 80006ee:	d107      	bne.n	8000700 <main+0xc0>
	  send2swarm_at_command ( dt_0_at_comm , dt_ok_answer , 6 ) ;
 80006f0:	4b6a      	ldr	r3, [pc, #424]	; (800089c <main+0x25c>)
 80006f2:	6818      	ldr	r0, [r3, #0]
 80006f4:	4b6a      	ldr	r3, [pc, #424]	; (80008a0 <main+0x260>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2206      	movs	r2, #6
 80006fa:	0019      	movs	r1, r3
 80006fc:	f000 facc 	bl	8000c98 <send2swarm_at_command>
  if ( checklist == 6 )
 8000700:	4b5d      	ldr	r3, [pc, #372]	; (8000878 <main+0x238>)
 8000702:	881b      	ldrh	r3, [r3, #0]
 8000704:	2b06      	cmp	r3, #6
 8000706:	d107      	bne.n	8000718 <main+0xd8>
	  send2swarm_at_command ( dt_q_rate_at_comm , dt_0_answer , 7 ) ;
 8000708:	4b66      	ldr	r3, [pc, #408]	; (80008a4 <main+0x264>)
 800070a:	6818      	ldr	r0, [r3, #0]
 800070c:	4b66      	ldr	r3, [pc, #408]	; (80008a8 <main+0x268>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2207      	movs	r2, #7
 8000712:	0019      	movs	r1, r3
 8000714:	f000 fac0 	bl	8000c98 <send2swarm_at_command>
  if ( checklist == 7 )
 8000718:	4b57      	ldr	r3, [pc, #348]	; (8000878 <main+0x238>)
 800071a:	881b      	ldrh	r3, [r3, #0]
 800071c:	2b07      	cmp	r3, #7
 800071e:	d107      	bne.n	8000730 <main+0xf0>
	  send2swarm_at_command ( gs_0_at_comm , gs_ok_answer , 8 ) ;
 8000720:	4b62      	ldr	r3, [pc, #392]	; (80008ac <main+0x26c>)
 8000722:	6818      	ldr	r0, [r3, #0]
 8000724:	4b62      	ldr	r3, [pc, #392]	; (80008b0 <main+0x270>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2208      	movs	r2, #8
 800072a:	0019      	movs	r1, r3
 800072c:	f000 fab4 	bl	8000c98 <send2swarm_at_command>
  if ( checklist == 8 )
 8000730:	4b51      	ldr	r3, [pc, #324]	; (8000878 <main+0x238>)
 8000732:	881b      	ldrh	r3, [r3, #0]
 8000734:	2b08      	cmp	r3, #8
 8000736:	d107      	bne.n	8000748 <main+0x108>
	  send2swarm_at_command ( gs_q_rate_at_comm , gs_0_answer , 9 ) ;
 8000738:	4b5e      	ldr	r3, [pc, #376]	; (80008b4 <main+0x274>)
 800073a:	6818      	ldr	r0, [r3, #0]
 800073c:	4b5e      	ldr	r3, [pc, #376]	; (80008b8 <main+0x278>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2209      	movs	r2, #9
 8000742:	0019      	movs	r1, r3
 8000744:	f000 faa8 	bl	8000c98 <send2swarm_at_command>
  if ( checklist == 9 )
 8000748:	4b4b      	ldr	r3, [pc, #300]	; (8000878 <main+0x238>)
 800074a:	881b      	ldrh	r3, [r3, #0]
 800074c:	2b09      	cmp	r3, #9
 800074e:	d107      	bne.n	8000760 <main+0x120>
	  send2swarm_at_command ( gj_0_at_comm , gj_ok_answer , 10 ) ;
 8000750:	4b5a      	ldr	r3, [pc, #360]	; (80008bc <main+0x27c>)
 8000752:	6818      	ldr	r0, [r3, #0]
 8000754:	4b5a      	ldr	r3, [pc, #360]	; (80008c0 <main+0x280>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	220a      	movs	r2, #10
 800075a:	0019      	movs	r1, r3
 800075c:	f000 fa9c 	bl	8000c98 <send2swarm_at_command>
  if ( checklist == 10 )
 8000760:	4b45      	ldr	r3, [pc, #276]	; (8000878 <main+0x238>)
 8000762:	881b      	ldrh	r3, [r3, #0]
 8000764:	2b0a      	cmp	r3, #10
 8000766:	d107      	bne.n	8000778 <main+0x138>
	  send2swarm_at_command ( gj_q_rate_at_comm , gj_0_answer , 11 ) ;
 8000768:	4b56      	ldr	r3, [pc, #344]	; (80008c4 <main+0x284>)
 800076a:	6818      	ldr	r0, [r3, #0]
 800076c:	4b56      	ldr	r3, [pc, #344]	; (80008c8 <main+0x288>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	220b      	movs	r2, #11
 8000772:	0019      	movs	r1, r3
 8000774:	f000 fa90 	bl	8000c98 <send2swarm_at_command>
  if ( checklist == 11 )
 8000778:	4b3f      	ldr	r3, [pc, #252]	; (8000878 <main+0x238>)
 800077a:	881b      	ldrh	r3, [r3, #0]
 800077c:	2b0b      	cmp	r3, #11
 800077e:	d107      	bne.n	8000790 <main+0x150>
	  send2swarm_at_command ( gn_0_at_comm , gn_ok_answer , 12 ) ;
 8000780:	4b52      	ldr	r3, [pc, #328]	; (80008cc <main+0x28c>)
 8000782:	6818      	ldr	r0, [r3, #0]
 8000784:	4b52      	ldr	r3, [pc, #328]	; (80008d0 <main+0x290>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	220c      	movs	r2, #12
 800078a:	0019      	movs	r1, r3
 800078c:	f000 fa84 	bl	8000c98 <send2swarm_at_command>
  if ( checklist == 12 )
 8000790:	4b39      	ldr	r3, [pc, #228]	; (8000878 <main+0x238>)
 8000792:	881b      	ldrh	r3, [r3, #0]
 8000794:	2b0c      	cmp	r3, #12
 8000796:	d107      	bne.n	80007a8 <main+0x168>
	  send2swarm_at_command ( gn_q_rate_at_comm , gn_0_answer , 13 ) ;
 8000798:	4b4e      	ldr	r3, [pc, #312]	; (80008d4 <main+0x294>)
 800079a:	6818      	ldr	r0, [r3, #0]
 800079c:	4b4e      	ldr	r3, [pc, #312]	; (80008d8 <main+0x298>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	220d      	movs	r2, #13
 80007a2:	0019      	movs	r1, r3
 80007a4:	f000 fa78 	bl	8000c98 <send2swarm_at_command>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if ( checklist == 13 )
 80007a8:	4b33      	ldr	r3, [pc, #204]	; (8000878 <main+0x238>)
 80007aa:	881b      	ldrh	r3, [r3, #0]
 80007ac:	2b0d      	cmp	r3, #13
 80007ae:	d107      	bne.n	80007c0 <main+0x180>
	  	  send2swarm_at_command ( pw_mostrecent_at_comm , pw_mostrecent_answer , 14 ) ;
 80007b0:	4b4a      	ldr	r3, [pc, #296]	; (80008dc <main+0x29c>)
 80007b2:	6818      	ldr	r0, [r3, #0]
 80007b4:	4b4a      	ldr	r3, [pc, #296]	; (80008e0 <main+0x2a0>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	220e      	movs	r2, #14
 80007ba:	0019      	movs	r1, r3
 80007bc:	f000 fa6c 	bl	8000c98 <send2swarm_at_command>
	  if ( checklist == 14 )
 80007c0:	4b2d      	ldr	r3, [pc, #180]	; (8000878 <main+0x238>)
 80007c2:	881b      	ldrh	r3, [r3, #0]
 80007c4:	2b0e      	cmp	r3, #14
 80007c6:	d107      	bne.n	80007d8 <main+0x198>
		  send2swarm_at_command ( gn_mostrecent_at_comm , gn_mostrecent_answer , 15 ) ;
 80007c8:	4b46      	ldr	r3, [pc, #280]	; (80008e4 <main+0x2a4>)
 80007ca:	6818      	ldr	r0, [r3, #0]
 80007cc:	4b46      	ldr	r3, [pc, #280]	; (80008e8 <main+0x2a8>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	220f      	movs	r2, #15
 80007d2:	0019      	movs	r1, r3
 80007d4:	f000 fa60 	bl	8000c98 <send2swarm_at_command>
	  if ( checklist == 15 )
 80007d8:	4b27      	ldr	r3, [pc, #156]	; (8000878 <main+0x238>)
 80007da:	881b      	ldrh	r3, [r3, #0]
 80007dc:	2b0f      	cmp	r3, #15
 80007de:	d107      	bne.n	80007f0 <main+0x1b0>
		  send2swarm_at_command ( mt_del_all_at_comm , mt_del_all_answer , 16 ) ;
 80007e0:	4b42      	ldr	r3, [pc, #264]	; (80008ec <main+0x2ac>)
 80007e2:	6818      	ldr	r0, [r3, #0]
 80007e4:	4b42      	ldr	r3, [pc, #264]	; (80008f0 <main+0x2b0>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2210      	movs	r2, #16
 80007ea:	0019      	movs	r1, r3
 80007ec:	f000 fa54 	bl	8000c98 <send2swarm_at_command>
	  if ( checklist == 16 )
 80007f0:	4b21      	ldr	r3, [pc, #132]	; (8000878 <main+0x238>)
 80007f2:	881b      	ldrh	r3, [r3, #0]
 80007f4:	2b10      	cmp	r3, #16
 80007f6:	d115      	bne.n	8000824 <main+0x1e4>
	  {
		  snprintf ( td_at_comm , TD_PAYLOAD_BUFF_SIZE , "$TD HD=300,\"%s;%s\"" , pw_buff , gn_buff ) ;
 80007f8:	493e      	ldr	r1, [pc, #248]	; (80008f4 <main+0x2b4>)
 80007fa:	4a3f      	ldr	r2, [pc, #252]	; (80008f8 <main+0x2b8>)
 80007fc:	483f      	ldr	r0, [pc, #252]	; (80008fc <main+0x2bc>)
 80007fe:	4b40      	ldr	r3, [pc, #256]	; (8000900 <main+0x2c0>)
 8000800:	9300      	str	r3, [sp, #0]
 8000802:	000b      	movs	r3, r1
 8000804:	215a      	movs	r1, #90	; 0x5a
 8000806:	f004 fdc1 	bl	800538c <sniprintf>
	  	  send2swarm_at_command ( td_at_comm , td_ok_answer , 17 ) ;
 800080a:	4b3e      	ldr	r3, [pc, #248]	; (8000904 <main+0x2c4>)
 800080c:	6819      	ldr	r1, [r3, #0]
 800080e:	4b3b      	ldr	r3, [pc, #236]	; (80008fc <main+0x2bc>)
 8000810:	2211      	movs	r2, #17
 8000812:	0018      	movs	r0, r3
 8000814:	f000 fa40 	bl	8000c98 <send2swarm_at_command>
	  	  pw_buff[0] = 0 ;
 8000818:	4b36      	ldr	r3, [pc, #216]	; (80008f4 <main+0x2b4>)
 800081a:	2200      	movs	r2, #0
 800081c:	701a      	strb	r2, [r3, #0]
	  	  gn_buff[0] = 0 ;
 800081e:	4b38      	ldr	r3, [pc, #224]	; (8000900 <main+0x2c0>)
 8000820:	2200      	movs	r2, #0
 8000822:	701a      	strb	r2, [r3, #0]
	  }
	  if ( checklist == 17 )
 8000824:	4b14      	ldr	r3, [pc, #80]	; (8000878 <main+0x238>)
 8000826:	881b      	ldrh	r3, [r3, #0]
 8000828:	2b11      	cmp	r3, #17
 800082a:	d10c      	bne.n	8000846 <main+0x206>
	  {
		  //__NOP ();
		  HAL_Delay ( 310000) ; // 5min. i 10 sekund obejmujące 5 minut na wysłanie wiadomości
 800082c:	4b36      	ldr	r3, [pc, #216]	; (8000908 <main+0x2c8>)
 800082e:	0018      	movs	r0, r3
 8000830:	f000 fe5a 	bl	80014e8 <HAL_Delay>
		  send2swarm_at_command ( sl_3ks_at_comm , sl_ok_answer , 18 ) ; // Swarm sleep for 50 minutes
 8000834:	4b35      	ldr	r3, [pc, #212]	; (800090c <main+0x2cc>)
 8000836:	6818      	ldr	r0, [r3, #0]
 8000838:	4b35      	ldr	r3, [pc, #212]	; (8000910 <main+0x2d0>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2212      	movs	r2, #18
 800083e:	0019      	movs	r1, r3
 8000840:	f000 fa2a 	bl	8000c98 <send2swarm_at_command>
 8000844:	e007      	b.n	8000856 <main+0x216>
	  }
	  else
	  {
		  //__NOP () ;
		  send2swarm_at_command ( sl_3c5ks_at_comm , sl_ok_answer , 18 ) ; // Swarm sleep for 50 minutes
 8000846:	4b33      	ldr	r3, [pc, #204]	; (8000914 <main+0x2d4>)
 8000848:	6818      	ldr	r0, [r3, #0]
 800084a:	4b31      	ldr	r3, [pc, #196]	; (8000910 <main+0x2d0>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	2212      	movs	r2, #18
 8000850:	0019      	movs	r1, r3
 8000852:	f000 fa21 	bl	8000c98 <send2swarm_at_command>
	  }
	  checklist = 13 ;
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <main+0x238>)
 8000858:	220d      	movs	r2, #13
 800085a:	801a      	strh	r2, [r3, #0]
	  //HAL_Delay(3000); // docelowo zamienić na poniższy sleep
	  HAL_PWREx_EnterSHUTDOWNMode () ; // Enter the SHUTDOWN mode
 800085c:	f001 fc34 	bl	80020c8 <HAL_PWREx_EnterSHUTDOWNMode>
	  if ( checklist == 13 )
 8000860:	e7a2      	b.n	80007a8 <main+0x168>
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	20000148 	.word	0x20000148
 8000868:	20000290 	.word	0x20000290
 800086c:	20000194 	.word	0x20000194
 8000870:	20000000 	.word	0x20000000
 8000874:	20000048 	.word	0x20000048
 8000878:	20000284 	.word	0x20000284
 800087c:	20000004 	.word	0x20000004
 8000880:	2000004c 	.word	0x2000004c
 8000884:	20000008 	.word	0x20000008
 8000888:	20000050 	.word	0x20000050
 800088c:	2000000c 	.word	0x2000000c
 8000890:	20000054 	.word	0x20000054
 8000894:	20000010 	.word	0x20000010
 8000898:	20000058 	.word	0x20000058
 800089c:	20000018 	.word	0x20000018
 80008a0:	20000060 	.word	0x20000060
 80008a4:	2000001c 	.word	0x2000001c
 80008a8:	20000064 	.word	0x20000064
 80008ac:	20000020 	.word	0x20000020
 80008b0:	20000068 	.word	0x20000068
 80008b4:	20000024 	.word	0x20000024
 80008b8:	2000006c 	.word	0x2000006c
 80008bc:	20000028 	.word	0x20000028
 80008c0:	20000070 	.word	0x20000070
 80008c4:	2000002c 	.word	0x2000002c
 80008c8:	20000074 	.word	0x20000074
 80008cc:	20000030 	.word	0x20000030
 80008d0:	20000078 	.word	0x20000078
 80008d4:	20000034 	.word	0x20000034
 80008d8:	2000007c 	.word	0x2000007c
 80008dc:	20000014 	.word	0x20000014
 80008e0:	2000005c 	.word	0x2000005c
 80008e4:	20000038 	.word	0x20000038
 80008e8:	20000080 	.word	0x20000080
 80008ec:	2000003c 	.word	0x2000003c
 80008f0:	20000084 	.word	0x20000084
 80008f4:	20000454 	.word	0x20000454
 80008f8:	080074a4 	.word	0x080074a4
 80008fc:	20000480 	.word	0x20000480
 8000900:	2000045c 	.word	0x2000045c
 8000904:	20000088 	.word	0x20000088
 8000908:	0004baf0 	.word	0x0004baf0
 800090c:	20000040 	.word	0x20000040
 8000910:	2000008c 	.word	0x2000008c
 8000914:	20000044 	.word	0x20000044

08000918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000918:	b590      	push	{r4, r7, lr}
 800091a:	b093      	sub	sp, #76	; 0x4c
 800091c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091e:	2410      	movs	r4, #16
 8000920:	193b      	adds	r3, r7, r4
 8000922:	0018      	movs	r0, r3
 8000924:	2338      	movs	r3, #56	; 0x38
 8000926:	001a      	movs	r2, r3
 8000928:	2100      	movs	r1, #0
 800092a:	f004 fd27 	bl	800537c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800092e:	003b      	movs	r3, r7
 8000930:	0018      	movs	r0, r3
 8000932:	2310      	movs	r3, #16
 8000934:	001a      	movs	r2, r3
 8000936:	2100      	movs	r1, #0
 8000938:	f004 fd20 	bl	800537c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800093c:	2380      	movs	r3, #128	; 0x80
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	0018      	movs	r0, r3
 8000942:	f001 fb81 	bl	8002048 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000946:	f001 fb71 	bl	800202c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800094a:	4b1d      	ldr	r3, [pc, #116]	; (80009c0 <SystemClock_Config+0xa8>)
 800094c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800094e:	4b1c      	ldr	r3, [pc, #112]	; (80009c0 <SystemClock_Config+0xa8>)
 8000950:	2118      	movs	r1, #24
 8000952:	438a      	bics	r2, r1
 8000954:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000956:	193b      	adds	r3, r7, r4
 8000958:	2206      	movs	r2, #6
 800095a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800095c:	193b      	adds	r3, r7, r4
 800095e:	2201      	movs	r2, #1
 8000960:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000962:	193b      	adds	r3, r7, r4
 8000964:	2280      	movs	r2, #128	; 0x80
 8000966:	0052      	lsls	r2, r2, #1
 8000968:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800096a:	193b      	adds	r3, r7, r4
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000970:	193b      	adds	r3, r7, r4
 8000972:	2240      	movs	r2, #64	; 0x40
 8000974:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000976:	193b      	adds	r3, r7, r4
 8000978:	2200      	movs	r2, #0
 800097a:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800097c:	193b      	adds	r3, r7, r4
 800097e:	0018      	movs	r0, r3
 8000980:	f001 fbc8 	bl	8002114 <HAL_RCC_OscConfig>
 8000984:	1e03      	subs	r3, r0, #0
 8000986:	d001      	beq.n	800098c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000988:	f000 fac2 	bl	8000f10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800098c:	003b      	movs	r3, r7
 800098e:	2207      	movs	r2, #7
 8000990:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000992:	003b      	movs	r3, r7
 8000994:	2200      	movs	r2, #0
 8000996:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000998:	003b      	movs	r3, r7
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800099e:	003b      	movs	r3, r7
 80009a0:	2200      	movs	r2, #0
 80009a2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009a4:	003b      	movs	r3, r7
 80009a6:	2100      	movs	r1, #0
 80009a8:	0018      	movs	r0, r3
 80009aa:	f001 fecd 	bl	8002748 <HAL_RCC_ClockConfig>
 80009ae:	1e03      	subs	r3, r0, #0
 80009b0:	d001      	beq.n	80009b6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80009b2:	f000 faad 	bl	8000f10 <Error_Handler>
  }
}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	46bd      	mov	sp, r7
 80009ba:	b013      	add	sp, #76	; 0x4c
 80009bc:	bd90      	pop	{r4, r7, pc}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	40021000 	.word	0x40021000

080009c4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	0018      	movs	r0, r3
 80009ce:	2314      	movs	r3, #20
 80009d0:	001a      	movs	r2, r3
 80009d2:	2100      	movs	r1, #0
 80009d4:	f004 fcd2 	bl	800537c <memset>
  RTC_DateTypeDef sDate = {0};
 80009d8:	003b      	movs	r3, r7
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009de:	4b32      	ldr	r3, [pc, #200]	; (8000aa8 <MX_RTC_Init+0xe4>)
 80009e0:	4a32      	ldr	r2, [pc, #200]	; (8000aac <MX_RTC_Init+0xe8>)
 80009e2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009e4:	4b30      	ldr	r3, [pc, #192]	; (8000aa8 <MX_RTC_Init+0xe4>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80009ea:	4b2f      	ldr	r3, [pc, #188]	; (8000aa8 <MX_RTC_Init+0xe4>)
 80009ec:	227f      	movs	r2, #127	; 0x7f
 80009ee:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80009f0:	4b2d      	ldr	r3, [pc, #180]	; (8000aa8 <MX_RTC_Init+0xe4>)
 80009f2:	22ff      	movs	r2, #255	; 0xff
 80009f4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009f6:	4b2c      	ldr	r3, [pc, #176]	; (8000aa8 <MX_RTC_Init+0xe4>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80009fc:	4b2a      	ldr	r3, [pc, #168]	; (8000aa8 <MX_RTC_Init+0xe4>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a02:	4b29      	ldr	r3, [pc, #164]	; (8000aa8 <MX_RTC_Init+0xe4>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a08:	4b27      	ldr	r3, [pc, #156]	; (8000aa8 <MX_RTC_Init+0xe4>)
 8000a0a:	2280      	movs	r2, #128	; 0x80
 8000a0c:	05d2      	lsls	r2, r2, #23
 8000a0e:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000a10:	4b25      	ldr	r3, [pc, #148]	; (8000aa8 <MX_RTC_Init+0xe4>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a16:	4b24      	ldr	r3, [pc, #144]	; (8000aa8 <MX_RTC_Init+0xe4>)
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f002 f9b9 	bl	8002d90 <HAL_RTC_Init>
 8000a1e:	1e03      	subs	r3, r0, #0
 8000a20:	d001      	beq.n	8000a26 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000a22:	f000 fa75 	bl	8000f10 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	2200      	movs	r2, #0
 8000a2a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8000a2c:	1d3b      	adds	r3, r7, #4
 8000a2e:	2200      	movs	r2, #0
 8000a30:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	2200      	movs	r2, #0
 8000a36:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	2200      	movs	r2, #0
 8000a42:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	2200      	movs	r2, #0
 8000a48:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000a4a:	1d39      	adds	r1, r7, #4
 8000a4c:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <MX_RTC_Init+0xe4>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	0018      	movs	r0, r3
 8000a52:	f002 fa3f 	bl	8002ed4 <HAL_RTC_SetTime>
 8000a56:	1e03      	subs	r3, r0, #0
 8000a58:	d001      	beq.n	8000a5e <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 8000a5a:	f000 fa59 	bl	8000f10 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000a5e:	003b      	movs	r3, r7
 8000a60:	2201      	movs	r2, #1
 8000a62:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000a64:	003b      	movs	r3, r7
 8000a66:	2201      	movs	r2, #1
 8000a68:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000a6a:	003b      	movs	r3, r7
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000a70:	003b      	movs	r3, r7
 8000a72:	2200      	movs	r2, #0
 8000a74:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000a76:	0039      	movs	r1, r7
 8000a78:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <MX_RTC_Init+0xe4>)
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f002 fad1 	bl	8003024 <HAL_RTC_SetDate>
 8000a82:	1e03      	subs	r3, r0, #0
 8000a84:	d001      	beq.n	8000a8a <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 8000a86:	f000 fa43 	bl	8000f10 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 3600, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8000a8a:	23e1      	movs	r3, #225	; 0xe1
 8000a8c:	0119      	lsls	r1, r3, #4
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <MX_RTC_Init+0xe4>)
 8000a90:	2204      	movs	r2, #4
 8000a92:	0018      	movs	r0, r3
 8000a94:	f002 fc2e 	bl	80032f4 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000a98:	1e03      	subs	r3, r0, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8000a9c:	f000 fa38 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000aa0:	46c0      	nop			; (mov r8, r8)
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	b006      	add	sp, #24
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	2000011c 	.word	0x2000011c
 8000aac:	40002800 	.word	0x40002800

08000ab0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000ab4:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <MX_TIM14_Init+0x40>)
 8000ab6:	4a0f      	ldr	r2, [pc, #60]	; (8000af4 <MX_TIM14_Init+0x44>)
 8000ab8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16000-1;
 8000aba:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <MX_TIM14_Init+0x40>)
 8000abc:	4a0e      	ldr	r2, [pc, #56]	; (8000af8 <MX_TIM14_Init+0x48>)
 8000abe:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac0:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <MX_TIM14_Init+0x40>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2000-1;
 8000ac6:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <MX_TIM14_Init+0x40>)
 8000ac8:	4a0c      	ldr	r2, [pc, #48]	; (8000afc <MX_TIM14_Init+0x4c>)
 8000aca:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000acc:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <MX_TIM14_Init+0x40>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ad2:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <MX_TIM14_Init+0x40>)
 8000ad4:	2280      	movs	r2, #128	; 0x80
 8000ad6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000ad8:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <MX_TIM14_Init+0x40>)
 8000ada:	0018      	movs	r0, r3
 8000adc:	f002 fcca 	bl	8003474 <HAL_TIM_Base_Init>
 8000ae0:	1e03      	subs	r3, r0, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000ae4:	f000 fa14 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000ae8:	46c0      	nop			; (mov r8, r8)
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	20000148 	.word	0x20000148
 8000af4:	40002000 	.word	0x40002000
 8000af8:	00003e7f 	.word	0x00003e7f
 8000afc:	000007cf 	.word	0x000007cf

08000b00 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b04:	4b23      	ldr	r3, [pc, #140]	; (8000b94 <MX_USART1_UART_Init+0x94>)
 8000b06:	4a24      	ldr	r2, [pc, #144]	; (8000b98 <MX_USART1_UART_Init+0x98>)
 8000b08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b0a:	4b22      	ldr	r3, [pc, #136]	; (8000b94 <MX_USART1_UART_Init+0x94>)
 8000b0c:	22e1      	movs	r2, #225	; 0xe1
 8000b0e:	0252      	lsls	r2, r2, #9
 8000b10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b12:	4b20      	ldr	r3, [pc, #128]	; (8000b94 <MX_USART1_UART_Init+0x94>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b18:	4b1e      	ldr	r3, [pc, #120]	; (8000b94 <MX_USART1_UART_Init+0x94>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b1e:	4b1d      	ldr	r3, [pc, #116]	; (8000b94 <MX_USART1_UART_Init+0x94>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b24:	4b1b      	ldr	r3, [pc, #108]	; (8000b94 <MX_USART1_UART_Init+0x94>)
 8000b26:	220c      	movs	r2, #12
 8000b28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2a:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <MX_USART1_UART_Init+0x94>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b30:	4b18      	ldr	r3, [pc, #96]	; (8000b94 <MX_USART1_UART_Init+0x94>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b36:	4b17      	ldr	r3, [pc, #92]	; (8000b94 <MX_USART1_UART_Init+0x94>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b3c:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <MX_USART1_UART_Init+0x94>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b42:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <MX_USART1_UART_Init+0x94>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <MX_USART1_UART_Init+0x94>)
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f002 ff4c 	bl	80039e8 <HAL_UART_Init>
 8000b50:	1e03      	subs	r3, r0, #0
 8000b52:	d001      	beq.n	8000b58 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b54:	f000 f9dc 	bl	8000f10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b58:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <MX_USART1_UART_Init+0x94>)
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f004 fa9b 	bl	8005098 <HAL_UARTEx_SetTxFifoThreshold>
 8000b62:	1e03      	subs	r3, r0, #0
 8000b64:	d001      	beq.n	8000b6a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b66:	f000 f9d3 	bl	8000f10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b6a:	4b0a      	ldr	r3, [pc, #40]	; (8000b94 <MX_USART1_UART_Init+0x94>)
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	0018      	movs	r0, r3
 8000b70:	f004 fad2 	bl	8005118 <HAL_UARTEx_SetRxFifoThreshold>
 8000b74:	1e03      	subs	r3, r0, #0
 8000b76:	d001      	beq.n	8000b7c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b78:	f000 f9ca 	bl	8000f10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b7c:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <MX_USART1_UART_Init+0x94>)
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f004 fa50 	bl	8005024 <HAL_UARTEx_DisableFifoMode>
 8000b84:	1e03      	subs	r3, r0, #0
 8000b86:	d001      	beq.n	8000b8c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b88:	f000 f9c2 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b8c:	46c0      	nop			; (mov r8, r8)
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	46c0      	nop			; (mov r8, r8)
 8000b94:	20000194 	.word	0x20000194
 8000b98:	40013800 	.word	0x40013800

08000b9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <MX_DMA_Init+0x38>)
 8000ba4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <MX_DMA_Init+0x38>)
 8000ba8:	2101      	movs	r1, #1
 8000baa:	430a      	orrs	r2, r1
 8000bac:	639a      	str	r2, [r3, #56]	; 0x38
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <MX_DMA_Init+0x38>)
 8000bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	2009      	movs	r0, #9
 8000bc0:	f000 fd62 	bl	8001688 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000bc4:	2009      	movs	r0, #9
 8000bc6:	f000 fd74 	bl	80016b2 <HAL_NVIC_EnableIRQ>

}
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	b002      	add	sp, #8
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	40021000 	.word	0x40021000

08000bd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd8:	b590      	push	{r4, r7, lr}
 8000bda:	b089      	sub	sp, #36	; 0x24
 8000bdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bde:	240c      	movs	r4, #12
 8000be0:	193b      	adds	r3, r7, r4
 8000be2:	0018      	movs	r0, r3
 8000be4:	2314      	movs	r3, #20
 8000be6:	001a      	movs	r2, r3
 8000be8:	2100      	movs	r1, #0
 8000bea:	f004 fbc7 	bl	800537c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bee:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <MX_GPIO_Init+0x80>)
 8000bf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bf2:	4b19      	ldr	r3, [pc, #100]	; (8000c58 <MX_GPIO_Init+0x80>)
 8000bf4:	2104      	movs	r1, #4
 8000bf6:	430a      	orrs	r2, r1
 8000bf8:	635a      	str	r2, [r3, #52]	; 0x34
 8000bfa:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <MX_GPIO_Init+0x80>)
 8000bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bfe:	2204      	movs	r2, #4
 8000c00:	4013      	ands	r3, r2
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <MX_GPIO_Init+0x80>)
 8000c08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c0a:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <MX_GPIO_Init+0x80>)
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	430a      	orrs	r2, r1
 8000c10:	635a      	str	r2, [r3, #52]	; 0x34
 8000c12:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <MX_GPIO_Init+0x80>)
 8000c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c16:	2201      	movs	r2, #1
 8000c18:	4013      	ands	r3, r2
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_RESET);
 8000c1e:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <MX_GPIO_Init+0x84>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	2140      	movs	r1, #64	; 0x40
 8000c24:	0018      	movs	r0, r3
 8000c26:	f001 f9e3 	bl	8001ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GREEN_Pin */
  GPIO_InitStruct.Pin = GREEN_Pin;
 8000c2a:	0021      	movs	r1, r4
 8000c2c:	187b      	adds	r3, r7, r1
 8000c2e:	2240      	movs	r2, #64	; 0x40
 8000c30:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c32:	187b      	adds	r3, r7, r1
 8000c34:	2201      	movs	r2, #1
 8000c36:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	187b      	adds	r3, r7, r1
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	187b      	adds	r3, r7, r1
 8000c40:	2200      	movs	r2, #0
 8000c42:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GREEN_GPIO_Port, &GPIO_InitStruct);
 8000c44:	187b      	adds	r3, r7, r1
 8000c46:	4a05      	ldr	r2, [pc, #20]	; (8000c5c <MX_GPIO_Init+0x84>)
 8000c48:	0019      	movs	r1, r3
 8000c4a:	0010      	movs	r0, r2
 8000c4c:	f001 f86c 	bl	8001d28 <HAL_GPIO_Init>

}
 8000c50:	46c0      	nop			; (mov r8, r8)
 8000c52:	46bd      	mov	sp, r7
 8000c54:	b009      	add	sp, #36	; 0x24
 8000c56:	bd90      	pop	{r4, r7, pc}
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	50000800 	.word	0x50000800

08000c60 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback ( UART_HandleTypeDef *huart , uint16_t Size )
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	000a      	movs	r2, r1
 8000c6a:	1cbb      	adds	r3, r7, #2
 8000c6c:	801a      	strh	r2, [r3, #0]
    if ( huart->Instance == USART1 )
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a06      	ldr	r2, [pc, #24]	; (8000c8c <HAL_UARTEx_RxEventCallback+0x2c>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d105      	bne.n	8000c84 <HAL_UARTEx_RxEventCallback+0x24>
    	HAL_UARTEx_ReceiveToIdle_DMA ( &huart1 , rx_buff , sizeof ( rx_buff ) ) ;
 8000c78:	4905      	ldr	r1, [pc, #20]	; (8000c90 <HAL_UARTEx_RxEventCallback+0x30>)
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_UARTEx_RxEventCallback+0x34>)
 8000c7c:	22c8      	movs	r2, #200	; 0xc8
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f004 fa8c 	bl	800519c <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8000c84:	46c0      	nop			; (mov r8, r8)
 8000c86:	46bd      	mov	sp, r7
 8000c88:	b002      	add	sp, #8
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40013800 	.word	0x40013800
 8000c90:	20000290 	.word	0x20000290
 8000c94:	20000194 	.word	0x20000194

08000c98 <send2swarm_at_command>:

void send2swarm_at_command ( const char* at_command , const char* answer , uint16_t step )
{
 8000c98:	b5b0      	push	{r4, r5, r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	1dbb      	adds	r3, r7, #6
 8000ca4:	801a      	strh	r2, [r3, #0]
	uint32_t temp_tickstart = HAL_GetTick () ; //temp
 8000ca6:	f000 fc15 	bl	80014d4 <HAL_GetTick>
 8000caa:	0003      	movs	r3, r0
 8000cac:	617b      	str	r3, [r7, #20]
	uint8_t cs = nmea_checksum ( at_command , strlen ( at_command ) ) ;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f7ff fa27 	bl	8000104 <strlen>
 8000cb6:	0002      	movs	r2, r0
 8000cb8:	2513      	movs	r5, #19
 8000cba:	197c      	adds	r4, r7, r5
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	0011      	movs	r1, r2
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f000 f8d9 	bl	8000e78 <nmea_checksum>
 8000cc6:	0003      	movs	r3, r0
 8000cc8:	7023      	strb	r3, [r4, #0]

	sprintf ( (char*) tx_buff , "%s*%02x\n" , at_command , cs ) ;
 8000cca:	197b      	adds	r3, r7, r5
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	68fa      	ldr	r2, [r7, #12]
 8000cd0:	4934      	ldr	r1, [pc, #208]	; (8000da4 <send2swarm_at_command+0x10c>)
 8000cd2:	4835      	ldr	r0, [pc, #212]	; (8000da8 <send2swarm_at_command+0x110>)
 8000cd4:	f004 fb8e 	bl	80053f4 <siprintf>
	uart_status = HAL_UART_Transmit ( &huart1 , (const uint8_t *) tx_buff ,  strlen ( (char*) tx_buff ) , UART_TX_TIMEOUT ) ;
 8000cd8:	4b33      	ldr	r3, [pc, #204]	; (8000da8 <send2swarm_at_command+0x110>)
 8000cda:	0018      	movs	r0, r3
 8000cdc:	f7ff fa12 	bl	8000104 <strlen>
 8000ce0:	0003      	movs	r3, r0
 8000ce2:	b29a      	uxth	r2, r3
 8000ce4:	23fa      	movs	r3, #250	; 0xfa
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	492f      	ldr	r1, [pc, #188]	; (8000da8 <send2swarm_at_command+0x110>)
 8000cea:	4830      	ldr	r0, [pc, #192]	; (8000dac <send2swarm_at_command+0x114>)
 8000cec:	f002 fed2 	bl	8003a94 <HAL_UART_Transmit>
 8000cf0:	0003      	movs	r3, r0
 8000cf2:	001a      	movs	r2, r3
 8000cf4:	4b2e      	ldr	r3, [pc, #184]	; (8000db0 <send2swarm_at_command+0x118>)
 8000cf6:	701a      	strb	r2, [r3, #0]
	if ( checklist >= 13 )
 8000cf8:	4b2e      	ldr	r3, [pc, #184]	; (8000db4 <send2swarm_at_command+0x11c>)
 8000cfa:	881b      	ldrh	r3, [r3, #0]
 8000cfc:	2b0c      	cmp	r3, #12
 8000cfe:	d904      	bls.n	8000d0a <send2swarm_at_command+0x72>
		HAL_Delay ( 500 ) ;
 8000d00:	23fa      	movs	r3, #250	; 0xfa
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	0018      	movs	r0, r3
 8000d06:	f000 fbef 	bl	80014e8 <HAL_Delay>
	waiting_for_answer = 1 ;
 8000d0a:	4b2b      	ldr	r3, [pc, #172]	; (8000db8 <send2swarm_at_command+0x120>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &htim14 ) ;
 8000d10:	4b2a      	ldr	r3, [pc, #168]	; (8000dbc <send2swarm_at_command+0x124>)
 8000d12:	0018      	movs	r0, r3
 8000d14:	f002 fc06 	bl	8003524 <HAL_TIM_Base_Start_IT>
	while ( waiting_for_answer )
 8000d18:	e010      	b.n	8000d3c <send2swarm_at_command+0xa4>
		if ( strncmp ( (char*) rx_buff , answer , strlen ( answer ) ) == 0 )
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f7ff f9f1 	bl	8000104 <strlen>
 8000d22:	0002      	movs	r2, r0
 8000d24:	68b9      	ldr	r1, [r7, #8]
 8000d26:	4b26      	ldr	r3, [pc, #152]	; (8000dc0 <send2swarm_at_command+0x128>)
 8000d28:	0018      	movs	r0, r3
 8000d2a:	f004 fbf9 	bl	8005520 <strncmp>
 8000d2e:	1e03      	subs	r3, r0, #0
 8000d30:	d104      	bne.n	8000d3c <send2swarm_at_command+0xa4>
		{
			checklist = step ;
 8000d32:	4b20      	ldr	r3, [pc, #128]	; (8000db4 <send2swarm_at_command+0x11c>)
 8000d34:	1dba      	adds	r2, r7, #6
 8000d36:	8812      	ldrh	r2, [r2, #0]
 8000d38:	801a      	strh	r2, [r3, #0]
			break ;
 8000d3a:	e003      	b.n	8000d44 <send2swarm_at_command+0xac>
	while ( waiting_for_answer )
 8000d3c:	4b1e      	ldr	r3, [pc, #120]	; (8000db8 <send2swarm_at_command+0x120>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d1ea      	bne.n	8000d1a <send2swarm_at_command+0x82>
		}
	if ( strncmp ( pw_mostrecent_at_comm , at_command , strlen ( pw_mostrecent_at_comm ) ) == 0 )
 8000d44:	4b1f      	ldr	r3, [pc, #124]	; (8000dc4 <send2swarm_at_command+0x12c>)
 8000d46:	681c      	ldr	r4, [r3, #0]
 8000d48:	4b1e      	ldr	r3, [pc, #120]	; (8000dc4 <send2swarm_at_command+0x12c>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f7ff f9d9 	bl	8000104 <strlen>
 8000d52:	0002      	movs	r2, r0
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	0019      	movs	r1, r3
 8000d58:	0020      	movs	r0, r4
 8000d5a:	f004 fbe1 	bl	8005520 <strncmp>
 8000d5e:	1e03      	subs	r3, r0, #0
 8000d60:	d101      	bne.n	8000d66 <send2swarm_at_command+0xce>
		pw2payload () ;
 8000d62:	f000 f835 	bl	8000dd0 <pw2payload>
	if ( strncmp ( gn_mostrecent_at_comm , at_command , strlen ( gn_mostrecent_at_comm ) ) == 0 )
 8000d66:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <send2swarm_at_command+0x130>)
 8000d68:	681c      	ldr	r4, [r3, #0]
 8000d6a:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <send2swarm_at_command+0x130>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f7ff f9c8 	bl	8000104 <strlen>
 8000d74:	0002      	movs	r2, r0
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	0019      	movs	r1, r3
 8000d7a:	0020      	movs	r0, r4
 8000d7c:	f004 fbd0 	bl	8005520 <strncmp>
 8000d80:	1e03      	subs	r3, r0, #0
 8000d82:	d101      	bne.n	8000d88 <send2swarm_at_command+0xf0>
		gn2payload () ;
 8000d84:	f000 f84e 	bl	8000e24 <gn2payload>
	rx_buff[0] = 0 ;
 8000d88:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <send2swarm_at_command+0x128>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	701a      	strb	r2, [r3, #0]
	temp_tick = HAL_GetTick () - temp_tickstart ;
 8000d8e:	f000 fba1 	bl	80014d4 <HAL_GetTick>
 8000d92:	0002      	movs	r2, r0
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	1ad2      	subs	r2, r2, r3
 8000d98:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <send2swarm_at_command+0x134>)
 8000d9a:	601a      	str	r2, [r3, #0]
}
 8000d9c:	46c0      	nop			; (mov r8, r8)
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	b006      	add	sp, #24
 8000da2:	bdb0      	pop	{r4, r5, r7, pc}
 8000da4:	080074b8 	.word	0x080074b8
 8000da8:	20000358 	.word	0x20000358
 8000dac:	20000194 	.word	0x20000194
 8000db0:	2000028c 	.word	0x2000028c
 8000db4:	20000284 	.word	0x20000284
 8000db8:	20000286 	.word	0x20000286
 8000dbc:	20000148 	.word	0x20000148
 8000dc0:	20000290 	.word	0x20000290
 8000dc4:	20000014 	.word	0x20000014
 8000dc8:	20000038 	.word	0x20000038
 8000dcc:	20000288 	.word	0x20000288

08000dd0 <pw2payload>:
void pw2payload ()
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
	chunk = strtok ( (char*) rx_buff , " " ) ;
 8000dd4:	4a0d      	ldr	r2, [pc, #52]	; (8000e0c <pw2payload+0x3c>)
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <pw2payload+0x40>)
 8000dd8:	0011      	movs	r1, r2
 8000dda:	0018      	movs	r0, r3
 8000ddc:	f004 fbb2 	bl	8005544 <strtok>
 8000de0:	0002      	movs	r2, r0
 8000de2:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <pw2payload+0x44>)
 8000de4:	601a      	str	r2, [r3, #0]
	chunk = strtok ( NULL , "," ) ;
 8000de6:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <pw2payload+0x48>)
 8000de8:	0019      	movs	r1, r3
 8000dea:	2000      	movs	r0, #0
 8000dec:	f004 fbaa 	bl	8005544 <strtok>
 8000df0:	0002      	movs	r2, r0
 8000df2:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <pw2payload+0x44>)
 8000df4:	601a      	str	r2, [r3, #0]
	sscanf ( (const char *) chunk , "%4s" , pw_buff ) ;
 8000df6:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <pw2payload+0x44>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a08      	ldr	r2, [pc, #32]	; (8000e1c <pw2payload+0x4c>)
 8000dfc:	4908      	ldr	r1, [pc, #32]	; (8000e20 <pw2payload+0x50>)
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f004 fb18 	bl	8005434 <siscanf>
}
 8000e04:	46c0      	nop			; (mov r8, r8)
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	46c0      	nop			; (mov r8, r8)
 8000e0c:	080074c4 	.word	0x080074c4
 8000e10:	20000290 	.word	0x20000290
 8000e14:	200004dc 	.word	0x200004dc
 8000e18:	080074c8 	.word	0x080074c8
 8000e1c:	20000454 	.word	0x20000454
 8000e20:	080074cc 	.word	0x080074cc

08000e24 <gn2payload>:
void gn2payload ()
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	chunk = strtok ( (char*) rx_buff , " " ) ;
 8000e28:	4a0d      	ldr	r2, [pc, #52]	; (8000e60 <gn2payload+0x3c>)
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <gn2payload+0x40>)
 8000e2c:	0011      	movs	r1, r2
 8000e2e:	0018      	movs	r0, r3
 8000e30:	f004 fb88 	bl	8005544 <strtok>
 8000e34:	0002      	movs	r2, r0
 8000e36:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <gn2payload+0x44>)
 8000e38:	601a      	str	r2, [r3, #0]
	chunk = strtok ( NULL , "*" ) ;
 8000e3a:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <gn2payload+0x48>)
 8000e3c:	0019      	movs	r1, r3
 8000e3e:	2000      	movs	r0, #0
 8000e40:	f004 fb80 	bl	8005544 <strtok>
 8000e44:	0002      	movs	r2, r0
 8000e46:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <gn2payload+0x44>)
 8000e48:	601a      	str	r2, [r3, #0]
	sprintf ( (char*) gn_buff , "%s" , chunk ) ;
 8000e4a:	4b07      	ldr	r3, [pc, #28]	; (8000e68 <gn2payload+0x44>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	4908      	ldr	r1, [pc, #32]	; (8000e70 <gn2payload+0x4c>)
 8000e50:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <gn2payload+0x50>)
 8000e52:	0018      	movs	r0, r3
 8000e54:	f004 face 	bl	80053f4 <siprintf>
}
 8000e58:	46c0      	nop			; (mov r8, r8)
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	080074c4 	.word	0x080074c4
 8000e64:	20000290 	.word	0x20000290
 8000e68:	200004dc 	.word	0x200004dc
 8000e6c:	080074d0 	.word	0x080074d0
 8000e70:	080074d4 	.word	0x080074d4
 8000e74:	2000045c 	.word	0x2000045c

08000e78 <nmea_checksum>:
uint8_t nmea_checksum ( const char *sz , size_t len )
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
	size_t i = 0 ;
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
	uint8_t cs ;
	if ( sz [0] == '$' )
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2b24      	cmp	r3, #36	; 0x24
 8000e8c:	d102      	bne.n	8000e94 <nmea_checksum+0x1c>
		i++ ;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	3301      	adds	r3, #1
 8000e92:	60fb      	str	r3, [r7, #12]
	for ( cs = 0 ; ( i < len ) && sz [i] ; i++ )
 8000e94:	230b      	movs	r3, #11
 8000e96:	18fb      	adds	r3, r7, r3
 8000e98:	2200      	movs	r2, #0
 8000e9a:	701a      	strb	r2, [r3, #0]
 8000e9c:	e00c      	b.n	8000eb8 <nmea_checksum+0x40>
		cs ^= ( (uint8_t) sz [i] ) ;
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	18d3      	adds	r3, r2, r3
 8000ea4:	7819      	ldrb	r1, [r3, #0]
 8000ea6:	220b      	movs	r2, #11
 8000ea8:	18bb      	adds	r3, r7, r2
 8000eaa:	18ba      	adds	r2, r7, r2
 8000eac:	7812      	ldrb	r2, [r2, #0]
 8000eae:	404a      	eors	r2, r1
 8000eb0:	701a      	strb	r2, [r3, #0]
	for ( cs = 0 ; ( i < len ) && sz [i] ; i++ )
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fa      	ldr	r2, [r7, #12]
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d205      	bcs.n	8000ecc <nmea_checksum+0x54>
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	18d3      	adds	r3, r2, r3
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d1e8      	bne.n	8000e9e <nmea_checksum+0x26>
	return cs;
 8000ecc:	230b      	movs	r3, #11
 8000ece:	18fb      	adds	r3, r7, r3
 8000ed0:	781b      	ldrb	r3, [r3, #0]
}
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	b004      	add	sp, #16
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM14 )
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a06      	ldr	r2, [pc, #24]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d106      	bne.n	8000efc <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		waiting_for_answer = 0 ;
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT ( &htim14 ) ;
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f002 fb68 	bl	80035cc <HAL_TIM_Base_Stop_IT>
	}
}
 8000efc:	46c0      	nop			; (mov r8, r8)
 8000efe:	46bd      	mov	sp, r7
 8000f00:	b002      	add	sp, #8
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40002000 	.word	0x40002000
 8000f08:	20000286 	.word	0x20000286
 8000f0c:	20000148 	.word	0x20000148

08000f10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f14:	b672      	cpsid	i
}
 8000f16:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <Error_Handler+0x8>
	...

08000f1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f22:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <HAL_MspInit+0x44>)
 8000f24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f26:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <HAL_MspInit+0x44>)
 8000f28:	2101      	movs	r1, #1
 8000f2a:	430a      	orrs	r2, r1
 8000f2c:	641a      	str	r2, [r3, #64]	; 0x40
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <HAL_MspInit+0x44>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	2201      	movs	r2, #1
 8000f34:	4013      	ands	r3, r2
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3a:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <HAL_MspInit+0x44>)
 8000f3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f3e:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <HAL_MspInit+0x44>)
 8000f40:	2180      	movs	r1, #128	; 0x80
 8000f42:	0549      	lsls	r1, r1, #21
 8000f44:	430a      	orrs	r2, r1
 8000f46:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f48:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <HAL_MspInit+0x44>)
 8000f4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f4c:	2380      	movs	r3, #128	; 0x80
 8000f4e:	055b      	lsls	r3, r3, #21
 8000f50:	4013      	ands	r3, r2
 8000f52:	603b      	str	r3, [r7, #0]
 8000f54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	b002      	add	sp, #8
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	40021000 	.word	0x40021000

08000f64 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000f64:	b590      	push	{r4, r7, lr}
 8000f66:	b08f      	sub	sp, #60	; 0x3c
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f6c:	2410      	movs	r4, #16
 8000f6e:	193b      	adds	r3, r7, r4
 8000f70:	0018      	movs	r0, r3
 8000f72:	2328      	movs	r3, #40	; 0x28
 8000f74:	001a      	movs	r2, r3
 8000f76:	2100      	movs	r1, #0
 8000f78:	f004 fa00 	bl	800537c <memset>
  if(hrtc->Instance==RTC)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a19      	ldr	r2, [pc, #100]	; (8000fe8 <HAL_RTC_MspInit+0x84>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d12c      	bne.n	8000fe0 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f86:	193b      	adds	r3, r7, r4
 8000f88:	2280      	movs	r2, #128	; 0x80
 8000f8a:	0292      	lsls	r2, r2, #10
 8000f8c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000f8e:	193b      	adds	r3, r7, r4
 8000f90:	2280      	movs	r2, #128	; 0x80
 8000f92:	0052      	lsls	r2, r2, #1
 8000f94:	625a      	str	r2, [r3, #36]	; 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f96:	193b      	adds	r3, r7, r4
 8000f98:	0018      	movs	r0, r3
 8000f9a:	f001 fd7f 	bl	8002a9c <HAL_RCCEx_PeriphCLKConfig>
 8000f9e:	1e03      	subs	r3, r0, #0
 8000fa0:	d001      	beq.n	8000fa6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000fa2:	f7ff ffb5 	bl	8000f10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000fa6:	4b11      	ldr	r3, [pc, #68]	; (8000fec <HAL_RTC_MspInit+0x88>)
 8000fa8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000faa:	4b10      	ldr	r3, [pc, #64]	; (8000fec <HAL_RTC_MspInit+0x88>)
 8000fac:	2180      	movs	r1, #128	; 0x80
 8000fae:	0209      	lsls	r1, r1, #8
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000fb4:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <HAL_RTC_MspInit+0x88>)
 8000fb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <HAL_RTC_MspInit+0x88>)
 8000fba:	2180      	movs	r1, #128	; 0x80
 8000fbc:	00c9      	lsls	r1, r1, #3
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	63da      	str	r2, [r3, #60]	; 0x3c
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <HAL_RTC_MspInit+0x88>)
 8000fc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fc6:	2380      	movs	r3, #128	; 0x80
 8000fc8:	00db      	lsls	r3, r3, #3
 8000fca:	4013      	ands	r3, r2
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	2002      	movs	r0, #2
 8000fd6:	f000 fb57 	bl	8001688 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8000fda:	2002      	movs	r0, #2
 8000fdc:	f000 fb69 	bl	80016b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000fe0:	46c0      	nop			; (mov r8, r8)
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	b00f      	add	sp, #60	; 0x3c
 8000fe6:	bd90      	pop	{r4, r7, pc}
 8000fe8:	40002800 	.word	0x40002800
 8000fec:	40021000 	.word	0x40021000

08000ff0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a0e      	ldr	r2, [pc, #56]	; (8001038 <HAL_TIM_Base_MspInit+0x48>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d115      	bne.n	800102e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <HAL_TIM_Base_MspInit+0x4c>)
 8001004:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001006:	4b0d      	ldr	r3, [pc, #52]	; (800103c <HAL_TIM_Base_MspInit+0x4c>)
 8001008:	2180      	movs	r1, #128	; 0x80
 800100a:	0209      	lsls	r1, r1, #8
 800100c:	430a      	orrs	r2, r1
 800100e:	641a      	str	r2, [r3, #64]	; 0x40
 8001010:	4b0a      	ldr	r3, [pc, #40]	; (800103c <HAL_TIM_Base_MspInit+0x4c>)
 8001012:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001014:	2380      	movs	r3, #128	; 0x80
 8001016:	021b      	lsls	r3, r3, #8
 8001018:	4013      	ands	r3, r2
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 800101e:	2200      	movs	r2, #0
 8001020:	2100      	movs	r1, #0
 8001022:	2013      	movs	r0, #19
 8001024:	f000 fb30 	bl	8001688 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8001028:	2013      	movs	r0, #19
 800102a:	f000 fb42 	bl	80016b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800102e:	46c0      	nop			; (mov r8, r8)
 8001030:	46bd      	mov	sp, r7
 8001032:	b004      	add	sp, #16
 8001034:	bd80      	pop	{r7, pc}
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	40002000 	.word	0x40002000
 800103c:	40021000 	.word	0x40021000

08001040 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001040:	b590      	push	{r4, r7, lr}
 8001042:	b095      	sub	sp, #84	; 0x54
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	233c      	movs	r3, #60	; 0x3c
 800104a:	18fb      	adds	r3, r7, r3
 800104c:	0018      	movs	r0, r3
 800104e:	2314      	movs	r3, #20
 8001050:	001a      	movs	r2, r3
 8001052:	2100      	movs	r1, #0
 8001054:	f004 f992 	bl	800537c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001058:	2414      	movs	r4, #20
 800105a:	193b      	adds	r3, r7, r4
 800105c:	0018      	movs	r0, r3
 800105e:	2328      	movs	r3, #40	; 0x28
 8001060:	001a      	movs	r2, r3
 8001062:	2100      	movs	r1, #0
 8001064:	f004 f98a 	bl	800537c <memset>
  if(huart->Instance==USART1)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a3c      	ldr	r2, [pc, #240]	; (8001160 <HAL_UART_MspInit+0x120>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d171      	bne.n	8001156 <HAL_UART_MspInit+0x116>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001072:	193b      	adds	r3, r7, r4
 8001074:	2201      	movs	r2, #1
 8001076:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001078:	193b      	adds	r3, r7, r4
 800107a:	2200      	movs	r2, #0
 800107c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800107e:	193b      	adds	r3, r7, r4
 8001080:	0018      	movs	r0, r3
 8001082:	f001 fd0b 	bl	8002a9c <HAL_RCCEx_PeriphCLKConfig>
 8001086:	1e03      	subs	r3, r0, #0
 8001088:	d001      	beq.n	800108e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800108a:	f7ff ff41 	bl	8000f10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800108e:	4b35      	ldr	r3, [pc, #212]	; (8001164 <HAL_UART_MspInit+0x124>)
 8001090:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001092:	4b34      	ldr	r3, [pc, #208]	; (8001164 <HAL_UART_MspInit+0x124>)
 8001094:	2180      	movs	r1, #128	; 0x80
 8001096:	01c9      	lsls	r1, r1, #7
 8001098:	430a      	orrs	r2, r1
 800109a:	641a      	str	r2, [r3, #64]	; 0x40
 800109c:	4b31      	ldr	r3, [pc, #196]	; (8001164 <HAL_UART_MspInit+0x124>)
 800109e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010a0:	2380      	movs	r3, #128	; 0x80
 80010a2:	01db      	lsls	r3, r3, #7
 80010a4:	4013      	ands	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
 80010a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010aa:	4b2e      	ldr	r3, [pc, #184]	; (8001164 <HAL_UART_MspInit+0x124>)
 80010ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010ae:	4b2d      	ldr	r3, [pc, #180]	; (8001164 <HAL_UART_MspInit+0x124>)
 80010b0:	2101      	movs	r1, #1
 80010b2:	430a      	orrs	r2, r1
 80010b4:	635a      	str	r2, [r3, #52]	; 0x34
 80010b6:	4b2b      	ldr	r3, [pc, #172]	; (8001164 <HAL_UART_MspInit+0x124>)
 80010b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010ba:	2201      	movs	r2, #1
 80010bc:	4013      	ands	r3, r2
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010c2:	213c      	movs	r1, #60	; 0x3c
 80010c4:	187b      	adds	r3, r7, r1
 80010c6:	22c0      	movs	r2, #192	; 0xc0
 80010c8:	00d2      	lsls	r2, r2, #3
 80010ca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010cc:	187b      	adds	r3, r7, r1
 80010ce:	2202      	movs	r2, #2
 80010d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	187b      	adds	r3, r7, r1
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d8:	187b      	adds	r3, r7, r1
 80010da:	2200      	movs	r2, #0
 80010dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80010de:	187b      	adds	r3, r7, r1
 80010e0:	2201      	movs	r2, #1
 80010e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e4:	187a      	adds	r2, r7, r1
 80010e6:	23a0      	movs	r3, #160	; 0xa0
 80010e8:	05db      	lsls	r3, r3, #23
 80010ea:	0011      	movs	r1, r2
 80010ec:	0018      	movs	r0, r3
 80010ee:	f000 fe1b 	bl	8001d28 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80010f2:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <HAL_UART_MspInit+0x128>)
 80010f4:	4a1d      	ldr	r2, [pc, #116]	; (800116c <HAL_UART_MspInit+0x12c>)
 80010f6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80010f8:	4b1b      	ldr	r3, [pc, #108]	; (8001168 <HAL_UART_MspInit+0x128>)
 80010fa:	2232      	movs	r2, #50	; 0x32
 80010fc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010fe:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <HAL_UART_MspInit+0x128>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001104:	4b18      	ldr	r3, [pc, #96]	; (8001168 <HAL_UART_MspInit+0x128>)
 8001106:	2200      	movs	r2, #0
 8001108:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800110a:	4b17      	ldr	r3, [pc, #92]	; (8001168 <HAL_UART_MspInit+0x128>)
 800110c:	2280      	movs	r2, #128	; 0x80
 800110e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001110:	4b15      	ldr	r3, [pc, #84]	; (8001168 <HAL_UART_MspInit+0x128>)
 8001112:	2200      	movs	r2, #0
 8001114:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001116:	4b14      	ldr	r3, [pc, #80]	; (8001168 <HAL_UART_MspInit+0x128>)
 8001118:	2200      	movs	r2, #0
 800111a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800111c:	4b12      	ldr	r3, [pc, #72]	; (8001168 <HAL_UART_MspInit+0x128>)
 800111e:	2200      	movs	r2, #0
 8001120:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001122:	4b11      	ldr	r3, [pc, #68]	; (8001168 <HAL_UART_MspInit+0x128>)
 8001124:	2200      	movs	r2, #0
 8001126:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001128:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <HAL_UART_MspInit+0x128>)
 800112a:	0018      	movs	r0, r3
 800112c:	f000 fade 	bl	80016ec <HAL_DMA_Init>
 8001130:	1e03      	subs	r3, r0, #0
 8001132:	d001      	beq.n	8001138 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8001134:	f7ff feec 	bl	8000f10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2180      	movs	r1, #128	; 0x80
 800113c:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <HAL_UART_MspInit+0x128>)
 800113e:	505a      	str	r2, [r3, r1]
 8001140:	4b09      	ldr	r3, [pc, #36]	; (8001168 <HAL_UART_MspInit+0x128>)
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	2100      	movs	r1, #0
 800114a:	201b      	movs	r0, #27
 800114c:	f000 fa9c 	bl	8001688 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001150:	201b      	movs	r0, #27
 8001152:	f000 faae 	bl	80016b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001156:	46c0      	nop			; (mov r8, r8)
 8001158:	46bd      	mov	sp, r7
 800115a:	b015      	add	sp, #84	; 0x54
 800115c:	bd90      	pop	{r4, r7, pc}
 800115e:	46c0      	nop			; (mov r8, r8)
 8001160:	40013800 	.word	0x40013800
 8001164:	40021000 	.word	0x40021000
 8001168:	20000228 	.word	0x20000228
 800116c:	40020008 	.word	0x40020008

08001170 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <NMI_Handler+0x4>

08001176 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800117a:	e7fe      	b.n	800117a <HardFault_Handler+0x4>

0800117c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001180:	46c0      	nop			; (mov r8, r8)
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001194:	f000 f98c 	bl	80014b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001198:	46c0      	nop			; (mov r8, r8)
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80011a4:	4b03      	ldr	r3, [pc, #12]	; (80011b4 <RTC_TAMP_IRQHandler+0x14>)
 80011a6:	0018      	movs	r0, r3
 80011a8:	f002 f93e 	bl	8003428 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 80011ac:	46c0      	nop			; (mov r8, r8)
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	46c0      	nop			; (mov r8, r8)
 80011b4:	2000011c 	.word	0x2000011c

080011b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80011bc:	4b03      	ldr	r3, [pc, #12]	; (80011cc <DMA1_Channel1_IRQHandler+0x14>)
 80011be:	0018      	movs	r0, r3
 80011c0:	f000 fc70 	bl	8001aa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80011c4:	46c0      	nop			; (mov r8, r8)
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	46c0      	nop			; (mov r8, r8)
 80011cc:	20000228 	.word	0x20000228

080011d0 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80011d4:	4b03      	ldr	r3, [pc, #12]	; (80011e4 <TIM14_IRQHandler+0x14>)
 80011d6:	0018      	movs	r0, r3
 80011d8:	f002 fa26 	bl	8003628 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80011dc:	46c0      	nop			; (mov r8, r8)
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	20000148 	.word	0x20000148

080011e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011ec:	4b03      	ldr	r3, [pc, #12]	; (80011fc <USART1_IRQHandler+0x14>)
 80011ee:	0018      	movs	r0, r3
 80011f0:	f002 fcec 	bl	8003bcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011f4:	46c0      	nop			; (mov r8, r8)
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	46c0      	nop			; (mov r8, r8)
 80011fc:	20000194 	.word	0x20000194

08001200 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
	return 1;
 8001204:	2301      	movs	r3, #1
}
 8001206:	0018      	movs	r0, r3
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <_kill>:

int _kill(int pid, int sig)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001216:	f004 f887 	bl	8005328 <__errno>
 800121a:	0003      	movs	r3, r0
 800121c:	2216      	movs	r2, #22
 800121e:	601a      	str	r2, [r3, #0]
	return -1;
 8001220:	2301      	movs	r3, #1
 8001222:	425b      	negs	r3, r3
}
 8001224:	0018      	movs	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	b002      	add	sp, #8
 800122a:	bd80      	pop	{r7, pc}

0800122c <_exit>:

void _exit (int status)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001234:	2301      	movs	r3, #1
 8001236:	425a      	negs	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	0011      	movs	r1, r2
 800123c:	0018      	movs	r0, r3
 800123e:	f7ff ffe5 	bl	800120c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001242:	e7fe      	b.n	8001242 <_exit+0x16>

08001244 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]
 8001254:	e00a      	b.n	800126c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001256:	e000      	b.n	800125a <_read+0x16>
 8001258:	bf00      	nop
 800125a:	0001      	movs	r1, r0
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	1c5a      	adds	r2, r3, #1
 8001260:	60ba      	str	r2, [r7, #8]
 8001262:	b2ca      	uxtb	r2, r1
 8001264:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	3301      	adds	r3, #1
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	697a      	ldr	r2, [r7, #20]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	429a      	cmp	r2, r3
 8001272:	dbf0      	blt.n	8001256 <_read+0x12>
	}

return len;
 8001274:	687b      	ldr	r3, [r7, #4]
}
 8001276:	0018      	movs	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	b006      	add	sp, #24
 800127c:	bd80      	pop	{r7, pc}

0800127e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b086      	sub	sp, #24
 8001282:	af00      	add	r7, sp, #0
 8001284:	60f8      	str	r0, [r7, #12]
 8001286:	60b9      	str	r1, [r7, #8]
 8001288:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
 800128e:	e009      	b.n	80012a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	1c5a      	adds	r2, r3, #1
 8001294:	60ba      	str	r2, [r7, #8]
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	0018      	movs	r0, r3
 800129a:	e000      	b.n	800129e <_write+0x20>
 800129c:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	3301      	adds	r3, #1
 80012a2:	617b      	str	r3, [r7, #20]
 80012a4:	697a      	ldr	r2, [r7, #20]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	dbf1      	blt.n	8001290 <_write+0x12>
	}
	return len;
 80012ac:	687b      	ldr	r3, [r7, #4]
}
 80012ae:	0018      	movs	r0, r3
 80012b0:	46bd      	mov	sp, r7
 80012b2:	b006      	add	sp, #24
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <_close>:

int _close(int file)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
	return -1;
 80012be:	2301      	movs	r3, #1
 80012c0:	425b      	negs	r3, r3
}
 80012c2:	0018      	movs	r0, r3
 80012c4:	46bd      	mov	sp, r7
 80012c6:	b002      	add	sp, #8
 80012c8:	bd80      	pop	{r7, pc}

080012ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
 80012d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	2280      	movs	r2, #128	; 0x80
 80012d8:	0192      	lsls	r2, r2, #6
 80012da:	605a      	str	r2, [r3, #4]
	return 0;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	0018      	movs	r0, r3
 80012e0:	46bd      	mov	sp, r7
 80012e2:	b002      	add	sp, #8
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <_isatty>:

int _isatty(int file)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b082      	sub	sp, #8
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
	return 1;
 80012ee:	2301      	movs	r3, #1
}
 80012f0:	0018      	movs	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	b002      	add	sp, #8
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
	return 0;
 8001304:	2300      	movs	r3, #0
}
 8001306:	0018      	movs	r0, r3
 8001308:	46bd      	mov	sp, r7
 800130a:	b004      	add	sp, #16
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001318:	4a14      	ldr	r2, [pc, #80]	; (800136c <_sbrk+0x5c>)
 800131a:	4b15      	ldr	r3, [pc, #84]	; (8001370 <_sbrk+0x60>)
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001324:	4b13      	ldr	r3, [pc, #76]	; (8001374 <_sbrk+0x64>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d102      	bne.n	8001332 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800132c:	4b11      	ldr	r3, [pc, #68]	; (8001374 <_sbrk+0x64>)
 800132e:	4a12      	ldr	r2, [pc, #72]	; (8001378 <_sbrk+0x68>)
 8001330:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001332:	4b10      	ldr	r3, [pc, #64]	; (8001374 <_sbrk+0x64>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	18d3      	adds	r3, r2, r3
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	429a      	cmp	r2, r3
 800133e:	d207      	bcs.n	8001350 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001340:	f003 fff2 	bl	8005328 <__errno>
 8001344:	0003      	movs	r3, r0
 8001346:	220c      	movs	r2, #12
 8001348:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800134a:	2301      	movs	r3, #1
 800134c:	425b      	negs	r3, r3
 800134e:	e009      	b.n	8001364 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001350:	4b08      	ldr	r3, [pc, #32]	; (8001374 <_sbrk+0x64>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001356:	4b07      	ldr	r3, [pc, #28]	; (8001374 <_sbrk+0x64>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	18d2      	adds	r2, r2, r3
 800135e:	4b05      	ldr	r3, [pc, #20]	; (8001374 <_sbrk+0x64>)
 8001360:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001362:	68fb      	ldr	r3, [r7, #12]
}
 8001364:	0018      	movs	r0, r3
 8001366:	46bd      	mov	sp, r7
 8001368:	b006      	add	sp, #24
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20002000 	.word	0x20002000
 8001370:	00000400 	.word	0x00000400
 8001374:	200004e0 	.word	0x200004e0
 8001378:	200004f8 	.word	0x200004f8

0800137c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001380:	46c0      	nop			; (mov r8, r8)
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001388:	480d      	ldr	r0, [pc, #52]	; (80013c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800138a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800138c:	f7ff fff6 	bl	800137c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001390:	480c      	ldr	r0, [pc, #48]	; (80013c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001392:	490d      	ldr	r1, [pc, #52]	; (80013c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001394:	4a0d      	ldr	r2, [pc, #52]	; (80013cc <LoopForever+0xe>)
  movs r3, #0
 8001396:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001398:	e002      	b.n	80013a0 <LoopCopyDataInit>

0800139a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800139a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800139c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800139e:	3304      	adds	r3, #4

080013a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013a4:	d3f9      	bcc.n	800139a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013a6:	4a0a      	ldr	r2, [pc, #40]	; (80013d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013a8:	4c0a      	ldr	r4, [pc, #40]	; (80013d4 <LoopForever+0x16>)
  movs r3, #0
 80013aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013ac:	e001      	b.n	80013b2 <LoopFillZerobss>

080013ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013b0:	3204      	adds	r2, #4

080013b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013b4:	d3fb      	bcc.n	80013ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80013b6:	f003 ffbd 	bl	8005334 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80013ba:	f7ff f941 	bl	8000640 <main>

080013be <LoopForever>:

LoopForever:
  b LoopForever
 80013be:	e7fe      	b.n	80013be <LoopForever>
  ldr   r0, =_estack
 80013c0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80013c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013c8:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 80013cc:	080077e0 	.word	0x080077e0
  ldr r2, =_sbss
 80013d0:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 80013d4:	200004f8 	.word	0x200004f8

080013d8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013d8:	e7fe      	b.n	80013d8 <ADC1_IRQHandler>
	...

080013dc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013e2:	1dfb      	adds	r3, r7, #7
 80013e4:	2200      	movs	r2, #0
 80013e6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013e8:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <HAL_Init+0x3c>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <HAL_Init+0x3c>)
 80013ee:	2180      	movs	r1, #128	; 0x80
 80013f0:	0049      	lsls	r1, r1, #1
 80013f2:	430a      	orrs	r2, r1
 80013f4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013f6:	2000      	movs	r0, #0
 80013f8:	f000 f810 	bl	800141c <HAL_InitTick>
 80013fc:	1e03      	subs	r3, r0, #0
 80013fe:	d003      	beq.n	8001408 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001400:	1dfb      	adds	r3, r7, #7
 8001402:	2201      	movs	r2, #1
 8001404:	701a      	strb	r2, [r3, #0]
 8001406:	e001      	b.n	800140c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001408:	f7ff fd88 	bl	8000f1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800140c:	1dfb      	adds	r3, r7, #7
 800140e:	781b      	ldrb	r3, [r3, #0]
}
 8001410:	0018      	movs	r0, r3
 8001412:	46bd      	mov	sp, r7
 8001414:	b002      	add	sp, #8
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40022000 	.word	0x40022000

0800141c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800141c:	b590      	push	{r4, r7, lr}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001424:	230f      	movs	r3, #15
 8001426:	18fb      	adds	r3, r7, r3
 8001428:	2200      	movs	r2, #0
 800142a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800142c:	4b1d      	ldr	r3, [pc, #116]	; (80014a4 <HAL_InitTick+0x88>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d02b      	beq.n	800148c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001434:	4b1c      	ldr	r3, [pc, #112]	; (80014a8 <HAL_InitTick+0x8c>)
 8001436:	681c      	ldr	r4, [r3, #0]
 8001438:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <HAL_InitTick+0x88>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	0019      	movs	r1, r3
 800143e:	23fa      	movs	r3, #250	; 0xfa
 8001440:	0098      	lsls	r0, r3, #2
 8001442:	f7fe fe71 	bl	8000128 <__udivsi3>
 8001446:	0003      	movs	r3, r0
 8001448:	0019      	movs	r1, r3
 800144a:	0020      	movs	r0, r4
 800144c:	f7fe fe6c 	bl	8000128 <__udivsi3>
 8001450:	0003      	movs	r3, r0
 8001452:	0018      	movs	r0, r3
 8001454:	f000 f93d 	bl	80016d2 <HAL_SYSTICK_Config>
 8001458:	1e03      	subs	r3, r0, #0
 800145a:	d112      	bne.n	8001482 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b03      	cmp	r3, #3
 8001460:	d80a      	bhi.n	8001478 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	2301      	movs	r3, #1
 8001466:	425b      	negs	r3, r3
 8001468:	2200      	movs	r2, #0
 800146a:	0018      	movs	r0, r3
 800146c:	f000 f90c 	bl	8001688 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001470:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <HAL_InitTick+0x90>)
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	e00d      	b.n	8001494 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001478:	230f      	movs	r3, #15
 800147a:	18fb      	adds	r3, r7, r3
 800147c:	2201      	movs	r2, #1
 800147e:	701a      	strb	r2, [r3, #0]
 8001480:	e008      	b.n	8001494 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001482:	230f      	movs	r3, #15
 8001484:	18fb      	adds	r3, r7, r3
 8001486:	2201      	movs	r2, #1
 8001488:	701a      	strb	r2, [r3, #0]
 800148a:	e003      	b.n	8001494 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800148c:	230f      	movs	r3, #15
 800148e:	18fb      	adds	r3, r7, r3
 8001490:	2201      	movs	r2, #1
 8001492:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001494:	230f      	movs	r3, #15
 8001496:	18fb      	adds	r3, r7, r3
 8001498:	781b      	ldrb	r3, [r3, #0]
}
 800149a:	0018      	movs	r0, r3
 800149c:	46bd      	mov	sp, r7
 800149e:	b005      	add	sp, #20
 80014a0:	bd90      	pop	{r4, r7, pc}
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	20000098 	.word	0x20000098
 80014a8:	20000090 	.word	0x20000090
 80014ac:	20000094 	.word	0x20000094

080014b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014b4:	4b05      	ldr	r3, [pc, #20]	; (80014cc <HAL_IncTick+0x1c>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	001a      	movs	r2, r3
 80014ba:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <HAL_IncTick+0x20>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	18d2      	adds	r2, r2, r3
 80014c0:	4b03      	ldr	r3, [pc, #12]	; (80014d0 <HAL_IncTick+0x20>)
 80014c2:	601a      	str	r2, [r3, #0]
}
 80014c4:	46c0      	nop			; (mov r8, r8)
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	46c0      	nop			; (mov r8, r8)
 80014cc:	20000098 	.word	0x20000098
 80014d0:	200004e4 	.word	0x200004e4

080014d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  return uwTick;
 80014d8:	4b02      	ldr	r3, [pc, #8]	; (80014e4 <HAL_GetTick+0x10>)
 80014da:	681b      	ldr	r3, [r3, #0]
}
 80014dc:	0018      	movs	r0, r3
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	46c0      	nop			; (mov r8, r8)
 80014e4:	200004e4 	.word	0x200004e4

080014e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014f0:	f7ff fff0 	bl	80014d4 <HAL_GetTick>
 80014f4:	0003      	movs	r3, r0
 80014f6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	3301      	adds	r3, #1
 8001500:	d005      	beq.n	800150e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001502:	4b0a      	ldr	r3, [pc, #40]	; (800152c <HAL_Delay+0x44>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	001a      	movs	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	189b      	adds	r3, r3, r2
 800150c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800150e:	46c0      	nop			; (mov r8, r8)
 8001510:	f7ff ffe0 	bl	80014d4 <HAL_GetTick>
 8001514:	0002      	movs	r2, r0
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	429a      	cmp	r2, r3
 800151e:	d8f7      	bhi.n	8001510 <HAL_Delay+0x28>
  {
  }
}
 8001520:	46c0      	nop			; (mov r8, r8)
 8001522:	46c0      	nop			; (mov r8, r8)
 8001524:	46bd      	mov	sp, r7
 8001526:	b004      	add	sp, #16
 8001528:	bd80      	pop	{r7, pc}
 800152a:	46c0      	nop			; (mov r8, r8)
 800152c:	20000098 	.word	0x20000098

08001530 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	0002      	movs	r2, r0
 8001538:	1dfb      	adds	r3, r7, #7
 800153a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800153c:	1dfb      	adds	r3, r7, #7
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b7f      	cmp	r3, #127	; 0x7f
 8001542:	d809      	bhi.n	8001558 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001544:	1dfb      	adds	r3, r7, #7
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	001a      	movs	r2, r3
 800154a:	231f      	movs	r3, #31
 800154c:	401a      	ands	r2, r3
 800154e:	4b04      	ldr	r3, [pc, #16]	; (8001560 <__NVIC_EnableIRQ+0x30>)
 8001550:	2101      	movs	r1, #1
 8001552:	4091      	lsls	r1, r2
 8001554:	000a      	movs	r2, r1
 8001556:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001558:	46c0      	nop			; (mov r8, r8)
 800155a:	46bd      	mov	sp, r7
 800155c:	b002      	add	sp, #8
 800155e:	bd80      	pop	{r7, pc}
 8001560:	e000e100 	.word	0xe000e100

08001564 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001564:	b590      	push	{r4, r7, lr}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	0002      	movs	r2, r0
 800156c:	6039      	str	r1, [r7, #0]
 800156e:	1dfb      	adds	r3, r7, #7
 8001570:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001572:	1dfb      	adds	r3, r7, #7
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	2b7f      	cmp	r3, #127	; 0x7f
 8001578:	d828      	bhi.n	80015cc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800157a:	4a2f      	ldr	r2, [pc, #188]	; (8001638 <__NVIC_SetPriority+0xd4>)
 800157c:	1dfb      	adds	r3, r7, #7
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	b25b      	sxtb	r3, r3
 8001582:	089b      	lsrs	r3, r3, #2
 8001584:	33c0      	adds	r3, #192	; 0xc0
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	589b      	ldr	r3, [r3, r2]
 800158a:	1dfa      	adds	r2, r7, #7
 800158c:	7812      	ldrb	r2, [r2, #0]
 800158e:	0011      	movs	r1, r2
 8001590:	2203      	movs	r2, #3
 8001592:	400a      	ands	r2, r1
 8001594:	00d2      	lsls	r2, r2, #3
 8001596:	21ff      	movs	r1, #255	; 0xff
 8001598:	4091      	lsls	r1, r2
 800159a:	000a      	movs	r2, r1
 800159c:	43d2      	mvns	r2, r2
 800159e:	401a      	ands	r2, r3
 80015a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	019b      	lsls	r3, r3, #6
 80015a6:	22ff      	movs	r2, #255	; 0xff
 80015a8:	401a      	ands	r2, r3
 80015aa:	1dfb      	adds	r3, r7, #7
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	0018      	movs	r0, r3
 80015b0:	2303      	movs	r3, #3
 80015b2:	4003      	ands	r3, r0
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015b8:	481f      	ldr	r0, [pc, #124]	; (8001638 <__NVIC_SetPriority+0xd4>)
 80015ba:	1dfb      	adds	r3, r7, #7
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	b25b      	sxtb	r3, r3
 80015c0:	089b      	lsrs	r3, r3, #2
 80015c2:	430a      	orrs	r2, r1
 80015c4:	33c0      	adds	r3, #192	; 0xc0
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80015ca:	e031      	b.n	8001630 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015cc:	4a1b      	ldr	r2, [pc, #108]	; (800163c <__NVIC_SetPriority+0xd8>)
 80015ce:	1dfb      	adds	r3, r7, #7
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	0019      	movs	r1, r3
 80015d4:	230f      	movs	r3, #15
 80015d6:	400b      	ands	r3, r1
 80015d8:	3b08      	subs	r3, #8
 80015da:	089b      	lsrs	r3, r3, #2
 80015dc:	3306      	adds	r3, #6
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	18d3      	adds	r3, r2, r3
 80015e2:	3304      	adds	r3, #4
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	1dfa      	adds	r2, r7, #7
 80015e8:	7812      	ldrb	r2, [r2, #0]
 80015ea:	0011      	movs	r1, r2
 80015ec:	2203      	movs	r2, #3
 80015ee:	400a      	ands	r2, r1
 80015f0:	00d2      	lsls	r2, r2, #3
 80015f2:	21ff      	movs	r1, #255	; 0xff
 80015f4:	4091      	lsls	r1, r2
 80015f6:	000a      	movs	r2, r1
 80015f8:	43d2      	mvns	r2, r2
 80015fa:	401a      	ands	r2, r3
 80015fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	019b      	lsls	r3, r3, #6
 8001602:	22ff      	movs	r2, #255	; 0xff
 8001604:	401a      	ands	r2, r3
 8001606:	1dfb      	adds	r3, r7, #7
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	0018      	movs	r0, r3
 800160c:	2303      	movs	r3, #3
 800160e:	4003      	ands	r3, r0
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001614:	4809      	ldr	r0, [pc, #36]	; (800163c <__NVIC_SetPriority+0xd8>)
 8001616:	1dfb      	adds	r3, r7, #7
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	001c      	movs	r4, r3
 800161c:	230f      	movs	r3, #15
 800161e:	4023      	ands	r3, r4
 8001620:	3b08      	subs	r3, #8
 8001622:	089b      	lsrs	r3, r3, #2
 8001624:	430a      	orrs	r2, r1
 8001626:	3306      	adds	r3, #6
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	18c3      	adds	r3, r0, r3
 800162c:	3304      	adds	r3, #4
 800162e:	601a      	str	r2, [r3, #0]
}
 8001630:	46c0      	nop			; (mov r8, r8)
 8001632:	46bd      	mov	sp, r7
 8001634:	b003      	add	sp, #12
 8001636:	bd90      	pop	{r4, r7, pc}
 8001638:	e000e100 	.word	0xe000e100
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	1e5a      	subs	r2, r3, #1
 800164c:	2380      	movs	r3, #128	; 0x80
 800164e:	045b      	lsls	r3, r3, #17
 8001650:	429a      	cmp	r2, r3
 8001652:	d301      	bcc.n	8001658 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001654:	2301      	movs	r3, #1
 8001656:	e010      	b.n	800167a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001658:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <SysTick_Config+0x44>)
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	3a01      	subs	r2, #1
 800165e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001660:	2301      	movs	r3, #1
 8001662:	425b      	negs	r3, r3
 8001664:	2103      	movs	r1, #3
 8001666:	0018      	movs	r0, r3
 8001668:	f7ff ff7c 	bl	8001564 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800166c:	4b05      	ldr	r3, [pc, #20]	; (8001684 <SysTick_Config+0x44>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001672:	4b04      	ldr	r3, [pc, #16]	; (8001684 <SysTick_Config+0x44>)
 8001674:	2207      	movs	r2, #7
 8001676:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001678:	2300      	movs	r3, #0
}
 800167a:	0018      	movs	r0, r3
 800167c:	46bd      	mov	sp, r7
 800167e:	b002      	add	sp, #8
 8001680:	bd80      	pop	{r7, pc}
 8001682:	46c0      	nop			; (mov r8, r8)
 8001684:	e000e010 	.word	0xe000e010

08001688 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	60b9      	str	r1, [r7, #8]
 8001690:	607a      	str	r2, [r7, #4]
 8001692:	210f      	movs	r1, #15
 8001694:	187b      	adds	r3, r7, r1
 8001696:	1c02      	adds	r2, r0, #0
 8001698:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800169a:	68ba      	ldr	r2, [r7, #8]
 800169c:	187b      	adds	r3, r7, r1
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	b25b      	sxtb	r3, r3
 80016a2:	0011      	movs	r1, r2
 80016a4:	0018      	movs	r0, r3
 80016a6:	f7ff ff5d 	bl	8001564 <__NVIC_SetPriority>
}
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	46bd      	mov	sp, r7
 80016ae:	b004      	add	sp, #16
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b082      	sub	sp, #8
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	0002      	movs	r2, r0
 80016ba:	1dfb      	adds	r3, r7, #7
 80016bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016be:	1dfb      	adds	r3, r7, #7
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	b25b      	sxtb	r3, r3
 80016c4:	0018      	movs	r0, r3
 80016c6:	f7ff ff33 	bl	8001530 <__NVIC_EnableIRQ>
}
 80016ca:	46c0      	nop			; (mov r8, r8)
 80016cc:	46bd      	mov	sp, r7
 80016ce:	b002      	add	sp, #8
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	0018      	movs	r0, r3
 80016de:	f7ff ffaf 	bl	8001640 <SysTick_Config>
 80016e2:	0003      	movs	r3, r0
}
 80016e4:	0018      	movs	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	b002      	add	sp, #8
 80016ea:	bd80      	pop	{r7, pc}

080016ec <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e077      	b.n	80017ee <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a3d      	ldr	r2, [pc, #244]	; (80017f8 <HAL_DMA_Init+0x10c>)
 8001704:	4694      	mov	ip, r2
 8001706:	4463      	add	r3, ip
 8001708:	2114      	movs	r1, #20
 800170a:	0018      	movs	r0, r3
 800170c:	f7fe fd0c 	bl	8000128 <__udivsi3>
 8001710:	0003      	movs	r3, r0
 8001712:	009a      	lsls	r2, r3, #2
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2225      	movs	r2, #37	; 0x25
 800171c:	2102      	movs	r1, #2
 800171e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4934      	ldr	r1, [pc, #208]	; (80017fc <HAL_DMA_Init+0x110>)
 800172c:	400a      	ands	r2, r1
 800172e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6819      	ldr	r1, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	689a      	ldr	r2, [r3, #8]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	431a      	orrs	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	431a      	orrs	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	431a      	orrs	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	431a      	orrs	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	431a      	orrs	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	431a      	orrs	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	430a      	orrs	r2, r1
 8001764:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	0018      	movs	r0, r3
 800176a:	f000 fa8d 	bl	8001c88 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	689a      	ldr	r2, [r3, #8]
 8001772:	2380      	movs	r3, #128	; 0x80
 8001774:	01db      	lsls	r3, r3, #7
 8001776:	429a      	cmp	r2, r3
 8001778:	d102      	bne.n	8001780 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001788:	213f      	movs	r1, #63	; 0x3f
 800178a:	400a      	ands	r2, r1
 800178c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001796:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d011      	beq.n	80017c4 <HAL_DMA_Init+0xd8>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	2b04      	cmp	r3, #4
 80017a6:	d80d      	bhi.n	80017c4 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	0018      	movs	r0, r3
 80017ac:	f000 fa98 	bl	8001ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	e008      	b.n	80017d6 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2225      	movs	r2, #37	; 0x25
 80017e0:	2101      	movs	r1, #1
 80017e2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2224      	movs	r2, #36	; 0x24
 80017e8:	2100      	movs	r1, #0
 80017ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	0018      	movs	r0, r3
 80017f0:	46bd      	mov	sp, r7
 80017f2:	b002      	add	sp, #8
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	46c0      	nop			; (mov r8, r8)
 80017f8:	bffdfff8 	.word	0xbffdfff8
 80017fc:	ffff800f 	.word	0xffff800f

08001800 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
 800180c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800180e:	2317      	movs	r3, #23
 8001810:	18fb      	adds	r3, r7, r3
 8001812:	2200      	movs	r2, #0
 8001814:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2224      	movs	r2, #36	; 0x24
 800181a:	5c9b      	ldrb	r3, [r3, r2]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d101      	bne.n	8001824 <HAL_DMA_Start_IT+0x24>
 8001820:	2302      	movs	r3, #2
 8001822:	e06f      	b.n	8001904 <HAL_DMA_Start_IT+0x104>
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2224      	movs	r2, #36	; 0x24
 8001828:	2101      	movs	r1, #1
 800182a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2225      	movs	r2, #37	; 0x25
 8001830:	5c9b      	ldrb	r3, [r3, r2]
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2b01      	cmp	r3, #1
 8001836:	d157      	bne.n	80018e8 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2225      	movs	r2, #37	; 0x25
 800183c:	2102      	movs	r1, #2
 800183e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2200      	movs	r2, #0
 8001844:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2101      	movs	r1, #1
 8001852:	438a      	bics	r2, r1
 8001854:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	68b9      	ldr	r1, [r7, #8]
 800185c:	68f8      	ldr	r0, [r7, #12]
 800185e:	f000 f9d3 	bl	8001c08 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	2b00      	cmp	r3, #0
 8001868:	d008      	beq.n	800187c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	210e      	movs	r1, #14
 8001876:	430a      	orrs	r2, r1
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	e00f      	b.n	800189c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2104      	movs	r1, #4
 8001888:	438a      	bics	r2, r1
 800188a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	210a      	movs	r1, #10
 8001898:	430a      	orrs	r2, r1
 800189a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	2380      	movs	r3, #128	; 0x80
 80018a4:	025b      	lsls	r3, r3, #9
 80018a6:	4013      	ands	r3, r2
 80018a8:	d008      	beq.n	80018bc <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b4:	2180      	movs	r1, #128	; 0x80
 80018b6:	0049      	lsls	r1, r1, #1
 80018b8:	430a      	orrs	r2, r1
 80018ba:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d008      	beq.n	80018d6 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018ce:	2180      	movs	r1, #128	; 0x80
 80018d0:	0049      	lsls	r1, r1, #1
 80018d2:	430a      	orrs	r2, r1
 80018d4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2101      	movs	r1, #1
 80018e2:	430a      	orrs	r2, r1
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	e00a      	b.n	80018fe <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2280      	movs	r2, #128	; 0x80
 80018ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2224      	movs	r2, #36	; 0x24
 80018f2:	2100      	movs	r1, #0
 80018f4:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80018f6:	2317      	movs	r3, #23
 80018f8:	18fb      	adds	r3, r7, r3
 80018fa:	2201      	movs	r2, #1
 80018fc:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80018fe:	2317      	movs	r3, #23
 8001900:	18fb      	adds	r3, r7, r3
 8001902:	781b      	ldrb	r3, [r3, #0]
}
 8001904:	0018      	movs	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	b006      	add	sp, #24
 800190a:	bd80      	pop	{r7, pc}

0800190c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d101      	bne.n	800191e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e050      	b.n	80019c0 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2225      	movs	r2, #37	; 0x25
 8001922:	5c9b      	ldrb	r3, [r3, r2]
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d008      	beq.n	800193c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2204      	movs	r2, #4
 800192e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2224      	movs	r2, #36	; 0x24
 8001934:	2100      	movs	r1, #0
 8001936:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e041      	b.n	80019c0 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	210e      	movs	r1, #14
 8001948:	438a      	bics	r2, r1
 800194a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001956:	491c      	ldr	r1, [pc, #112]	; (80019c8 <HAL_DMA_Abort+0xbc>)
 8001958:	400a      	ands	r2, r1
 800195a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2101      	movs	r1, #1
 8001968:	438a      	bics	r2, r1
 800196a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 800196c:	4b17      	ldr	r3, [pc, #92]	; (80019cc <HAL_DMA_Abort+0xc0>)
 800196e:	6859      	ldr	r1, [r3, #4]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001974:	221c      	movs	r2, #28
 8001976:	4013      	ands	r3, r2
 8001978:	2201      	movs	r2, #1
 800197a:	409a      	lsls	r2, r3
 800197c:	4b13      	ldr	r3, [pc, #76]	; (80019cc <HAL_DMA_Abort+0xc0>)
 800197e:	430a      	orrs	r2, r1
 8001980:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800198a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001990:	2b00      	cmp	r3, #0
 8001992:	d00c      	beq.n	80019ae <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800199e:	490a      	ldr	r1, [pc, #40]	; (80019c8 <HAL_DMA_Abort+0xbc>)
 80019a0:	400a      	ands	r2, r1
 80019a2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80019ac:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2225      	movs	r2, #37	; 0x25
 80019b2:	2101      	movs	r1, #1
 80019b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2224      	movs	r2, #36	; 0x24
 80019ba:	2100      	movs	r1, #0
 80019bc:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	0018      	movs	r0, r3
 80019c2:	46bd      	mov	sp, r7
 80019c4:	b002      	add	sp, #8
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	fffffeff 	.word	0xfffffeff
 80019cc:	40020000 	.word	0x40020000

080019d0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019d8:	210f      	movs	r1, #15
 80019da:	187b      	adds	r3, r7, r1
 80019dc:	2200      	movs	r2, #0
 80019de:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2225      	movs	r2, #37	; 0x25
 80019e4:	5c9b      	ldrb	r3, [r3, r2]
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d006      	beq.n	80019fa <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2204      	movs	r2, #4
 80019f0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80019f2:	187b      	adds	r3, r7, r1
 80019f4:	2201      	movs	r2, #1
 80019f6:	701a      	strb	r2, [r3, #0]
 80019f8:	e049      	b.n	8001a8e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	210e      	movs	r1, #14
 8001a06:	438a      	bics	r2, r1
 8001a08:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2101      	movs	r1, #1
 8001a16:	438a      	bics	r2, r1
 8001a18:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a24:	491d      	ldr	r1, [pc, #116]	; (8001a9c <HAL_DMA_Abort_IT+0xcc>)
 8001a26:	400a      	ands	r2, r1
 8001a28:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001a2a:	4b1d      	ldr	r3, [pc, #116]	; (8001aa0 <HAL_DMA_Abort_IT+0xd0>)
 8001a2c:	6859      	ldr	r1, [r3, #4]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	221c      	movs	r2, #28
 8001a34:	4013      	ands	r3, r2
 8001a36:	2201      	movs	r2, #1
 8001a38:	409a      	lsls	r2, r3
 8001a3a:	4b19      	ldr	r3, [pc, #100]	; (8001aa0 <HAL_DMA_Abort_IT+0xd0>)
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001a48:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d00c      	beq.n	8001a6c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a5c:	490f      	ldr	r1, [pc, #60]	; (8001a9c <HAL_DMA_Abort_IT+0xcc>)
 8001a5e:	400a      	ands	r2, r1
 8001a60:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001a6a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2225      	movs	r2, #37	; 0x25
 8001a70:	2101      	movs	r1, #1
 8001a72:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2224      	movs	r2, #36	; 0x24
 8001a78:	2100      	movs	r1, #0
 8001a7a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d004      	beq.n	8001a8e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	0010      	movs	r0, r2
 8001a8c:	4798      	blx	r3
    }
  }
  return status;
 8001a8e:	230f      	movs	r3, #15
 8001a90:	18fb      	adds	r3, r7, r3
 8001a92:	781b      	ldrb	r3, [r3, #0]
}
 8001a94:	0018      	movs	r0, r3
 8001a96:	46bd      	mov	sp, r7
 8001a98:	b004      	add	sp, #16
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	fffffeff 	.word	0xfffffeff
 8001aa0:	40020000 	.word	0x40020000

08001aa4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001aac:	4b55      	ldr	r3, [pc, #340]	; (8001c04 <HAL_DMA_IRQHandler+0x160>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	221c      	movs	r2, #28
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	2204      	movs	r2, #4
 8001ac4:	409a      	lsls	r2, r3
 8001ac6:	0013      	movs	r3, r2
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	4013      	ands	r3, r2
 8001acc:	d027      	beq.n	8001b1e <HAL_DMA_IRQHandler+0x7a>
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	2204      	movs	r2, #4
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	d023      	beq.n	8001b1e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2220      	movs	r2, #32
 8001ade:	4013      	ands	r3, r2
 8001ae0:	d107      	bne.n	8001af2 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2104      	movs	r1, #4
 8001aee:	438a      	bics	r2, r1
 8001af0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8001af2:	4b44      	ldr	r3, [pc, #272]	; (8001c04 <HAL_DMA_IRQHandler+0x160>)
 8001af4:	6859      	ldr	r1, [r3, #4]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	221c      	movs	r2, #28
 8001afc:	4013      	ands	r3, r2
 8001afe:	2204      	movs	r2, #4
 8001b00:	409a      	lsls	r2, r3
 8001b02:	4b40      	ldr	r3, [pc, #256]	; (8001c04 <HAL_DMA_IRQHandler+0x160>)
 8001b04:	430a      	orrs	r2, r1
 8001b06:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d100      	bne.n	8001b12 <HAL_DMA_IRQHandler+0x6e>
 8001b10:	e073      	b.n	8001bfa <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	0010      	movs	r0, r2
 8001b1a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001b1c:	e06d      	b.n	8001bfa <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	221c      	movs	r2, #28
 8001b24:	4013      	ands	r3, r2
 8001b26:	2202      	movs	r2, #2
 8001b28:	409a      	lsls	r2, r3
 8001b2a:	0013      	movs	r3, r2
 8001b2c:	68fa      	ldr	r2, [r7, #12]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d02e      	beq.n	8001b90 <HAL_DMA_IRQHandler+0xec>
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	2202      	movs	r2, #2
 8001b36:	4013      	ands	r3, r2
 8001b38:	d02a      	beq.n	8001b90 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2220      	movs	r2, #32
 8001b42:	4013      	ands	r3, r2
 8001b44:	d10b      	bne.n	8001b5e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	210a      	movs	r1, #10
 8001b52:	438a      	bics	r2, r1
 8001b54:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2225      	movs	r2, #37	; 0x25
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001b5e:	4b29      	ldr	r3, [pc, #164]	; (8001c04 <HAL_DMA_IRQHandler+0x160>)
 8001b60:	6859      	ldr	r1, [r3, #4]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	221c      	movs	r2, #28
 8001b68:	4013      	ands	r3, r2
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	409a      	lsls	r2, r3
 8001b6e:	4b25      	ldr	r3, [pc, #148]	; (8001c04 <HAL_DMA_IRQHandler+0x160>)
 8001b70:	430a      	orrs	r2, r1
 8001b72:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2224      	movs	r2, #36	; 0x24
 8001b78:	2100      	movs	r1, #0
 8001b7a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d03a      	beq.n	8001bfa <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	0010      	movs	r0, r2
 8001b8c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001b8e:	e034      	b.n	8001bfa <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b94:	221c      	movs	r2, #28
 8001b96:	4013      	ands	r3, r2
 8001b98:	2208      	movs	r2, #8
 8001b9a:	409a      	lsls	r2, r3
 8001b9c:	0013      	movs	r3, r2
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d02b      	beq.n	8001bfc <HAL_DMA_IRQHandler+0x158>
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	2208      	movs	r2, #8
 8001ba8:	4013      	ands	r3, r2
 8001baa:	d027      	beq.n	8001bfc <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	210e      	movs	r1, #14
 8001bb8:	438a      	bics	r2, r1
 8001bba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001bbc:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <HAL_DMA_IRQHandler+0x160>)
 8001bbe:	6859      	ldr	r1, [r3, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc4:	221c      	movs	r2, #28
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	2201      	movs	r2, #1
 8001bca:	409a      	lsls	r2, r3
 8001bcc:	4b0d      	ldr	r3, [pc, #52]	; (8001c04 <HAL_DMA_IRQHandler+0x160>)
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2225      	movs	r2, #37	; 0x25
 8001bdc:	2101      	movs	r1, #1
 8001bde:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2224      	movs	r2, #36	; 0x24
 8001be4:	2100      	movs	r1, #0
 8001be6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d005      	beq.n	8001bfc <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	0010      	movs	r0, r2
 8001bf8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001bfa:	46c0      	nop			; (mov r8, r8)
 8001bfc:	46c0      	nop			; (mov r8, r8)
}
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	b004      	add	sp, #16
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40020000 	.word	0x40020000

08001c08 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
 8001c14:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001c1e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d004      	beq.n	8001c32 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001c30:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001c32:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <DMA_SetConfig+0x7c>)
 8001c34:	6859      	ldr	r1, [r3, #4]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	221c      	movs	r2, #28
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	2201      	movs	r2, #1
 8001c40:	409a      	lsls	r2, r3
 8001c42:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <DMA_SetConfig+0x7c>)
 8001c44:	430a      	orrs	r2, r1
 8001c46:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	683a      	ldr	r2, [r7, #0]
 8001c4e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	2b10      	cmp	r3, #16
 8001c56:	d108      	bne.n	8001c6a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68ba      	ldr	r2, [r7, #8]
 8001c66:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001c68:	e007      	b.n	8001c7a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68ba      	ldr	r2, [r7, #8]
 8001c70:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	60da      	str	r2, [r3, #12]
}
 8001c7a:	46c0      	nop			; (mov r8, r8)
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	b004      	add	sp, #16
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	46c0      	nop			; (mov r8, r8)
 8001c84:	40020000 	.word	0x40020000

08001c88 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c94:	089b      	lsrs	r3, r3, #2
 8001c96:	4a10      	ldr	r2, [pc, #64]	; (8001cd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001c98:	4694      	mov	ip, r2
 8001c9a:	4463      	add	r3, ip
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	001a      	movs	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	001a      	movs	r2, r3
 8001caa:	23ff      	movs	r3, #255	; 0xff
 8001cac:	4013      	ands	r3, r2
 8001cae:	3b08      	subs	r3, #8
 8001cb0:	2114      	movs	r1, #20
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	f7fe fa38 	bl	8000128 <__udivsi3>
 8001cb8:	0003      	movs	r3, r0
 8001cba:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a07      	ldr	r2, [pc, #28]	; (8001cdc <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001cc0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	221f      	movs	r2, #31
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	2201      	movs	r2, #1
 8001cca:	409a      	lsls	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001cd0:	46c0      	nop			; (mov r8, r8)
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	b004      	add	sp, #16
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	10008200 	.word	0x10008200
 8001cdc:	40020880 	.word	0x40020880

08001ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	223f      	movs	r2, #63	; 0x3f
 8001cee:	4013      	ands	r3, r2
 8001cf0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	4a0a      	ldr	r2, [pc, #40]	; (8001d20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001cf6:	4694      	mov	ip, r2
 8001cf8:	4463      	add	r3, ip
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	001a      	movs	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a07      	ldr	r2, [pc, #28]	; (8001d24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001d06:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	2203      	movs	r2, #3
 8001d0e:	4013      	ands	r3, r2
 8001d10:	2201      	movs	r2, #1
 8001d12:	409a      	lsls	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001d18:	46c0      	nop			; (mov r8, r8)
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	b004      	add	sp, #16
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	1000823f 	.word	0x1000823f
 8001d24:	40020940 	.word	0x40020940

08001d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d32:	2300      	movs	r3, #0
 8001d34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d36:	e147      	b.n	8001fc8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	697a      	ldr	r2, [r7, #20]
 8001d40:	4091      	lsls	r1, r2
 8001d42:	000a      	movs	r2, r1
 8001d44:	4013      	ands	r3, r2
 8001d46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d100      	bne.n	8001d50 <HAL_GPIO_Init+0x28>
 8001d4e:	e138      	b.n	8001fc2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2203      	movs	r2, #3
 8001d56:	4013      	ands	r3, r2
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d005      	beq.n	8001d68 <HAL_GPIO_Init+0x40>
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	2203      	movs	r2, #3
 8001d62:	4013      	ands	r3, r2
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d130      	bne.n	8001dca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	2203      	movs	r2, #3
 8001d74:	409a      	lsls	r2, r3
 8001d76:	0013      	movs	r3, r2
 8001d78:	43da      	mvns	r2, r3
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	68da      	ldr	r2, [r3, #12]
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	409a      	lsls	r2, r3
 8001d8a:	0013      	movs	r3, r2
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d9e:	2201      	movs	r2, #1
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	409a      	lsls	r2, r3
 8001da4:	0013      	movs	r3, r2
 8001da6:	43da      	mvns	r2, r3
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	4013      	ands	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	091b      	lsrs	r3, r3, #4
 8001db4:	2201      	movs	r2, #1
 8001db6:	401a      	ands	r2, r3
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	409a      	lsls	r2, r3
 8001dbc:	0013      	movs	r3, r2
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2203      	movs	r2, #3
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	2b03      	cmp	r3, #3
 8001dd4:	d017      	beq.n	8001e06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	2203      	movs	r2, #3
 8001de2:	409a      	lsls	r2, r3
 8001de4:	0013      	movs	r3, r2
 8001de6:	43da      	mvns	r2, r3
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	4013      	ands	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	409a      	lsls	r2, r3
 8001df8:	0013      	movs	r3, r2
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2203      	movs	r2, #3
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d123      	bne.n	8001e5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	08da      	lsrs	r2, r3, #3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	3208      	adds	r2, #8
 8001e1a:	0092      	lsls	r2, r2, #2
 8001e1c:	58d3      	ldr	r3, [r2, r3]
 8001e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	2207      	movs	r2, #7
 8001e24:	4013      	ands	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	220f      	movs	r2, #15
 8001e2a:	409a      	lsls	r2, r3
 8001e2c:	0013      	movs	r3, r2
 8001e2e:	43da      	mvns	r2, r3
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	4013      	ands	r3, r2
 8001e34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	691a      	ldr	r2, [r3, #16]
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	2107      	movs	r1, #7
 8001e3e:	400b      	ands	r3, r1
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	409a      	lsls	r2, r3
 8001e44:	0013      	movs	r3, r2
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	08da      	lsrs	r2, r3, #3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3208      	adds	r2, #8
 8001e54:	0092      	lsls	r2, r2, #2
 8001e56:	6939      	ldr	r1, [r7, #16]
 8001e58:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	2203      	movs	r2, #3
 8001e66:	409a      	lsls	r2, r3
 8001e68:	0013      	movs	r3, r2
 8001e6a:	43da      	mvns	r2, r3
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2203      	movs	r2, #3
 8001e78:	401a      	ands	r2, r3
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	409a      	lsls	r2, r3
 8001e80:	0013      	movs	r3, r2
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685a      	ldr	r2, [r3, #4]
 8001e92:	23c0      	movs	r3, #192	; 0xc0
 8001e94:	029b      	lsls	r3, r3, #10
 8001e96:	4013      	ands	r3, r2
 8001e98:	d100      	bne.n	8001e9c <HAL_GPIO_Init+0x174>
 8001e9a:	e092      	b.n	8001fc2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001e9c:	4a50      	ldr	r2, [pc, #320]	; (8001fe0 <HAL_GPIO_Init+0x2b8>)
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	089b      	lsrs	r3, r3, #2
 8001ea2:	3318      	adds	r3, #24
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	589b      	ldr	r3, [r3, r2]
 8001ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	2203      	movs	r2, #3
 8001eae:	4013      	ands	r3, r2
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	220f      	movs	r2, #15
 8001eb4:	409a      	lsls	r2, r3
 8001eb6:	0013      	movs	r3, r2
 8001eb8:	43da      	mvns	r2, r3
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	23a0      	movs	r3, #160	; 0xa0
 8001ec4:	05db      	lsls	r3, r3, #23
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d013      	beq.n	8001ef2 <HAL_GPIO_Init+0x1ca>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a45      	ldr	r2, [pc, #276]	; (8001fe4 <HAL_GPIO_Init+0x2bc>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d00d      	beq.n	8001eee <HAL_GPIO_Init+0x1c6>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a44      	ldr	r2, [pc, #272]	; (8001fe8 <HAL_GPIO_Init+0x2c0>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d007      	beq.n	8001eea <HAL_GPIO_Init+0x1c2>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a43      	ldr	r2, [pc, #268]	; (8001fec <HAL_GPIO_Init+0x2c4>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d101      	bne.n	8001ee6 <HAL_GPIO_Init+0x1be>
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e006      	b.n	8001ef4 <HAL_GPIO_Init+0x1cc>
 8001ee6:	2305      	movs	r3, #5
 8001ee8:	e004      	b.n	8001ef4 <HAL_GPIO_Init+0x1cc>
 8001eea:	2302      	movs	r3, #2
 8001eec:	e002      	b.n	8001ef4 <HAL_GPIO_Init+0x1cc>
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e000      	b.n	8001ef4 <HAL_GPIO_Init+0x1cc>
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	697a      	ldr	r2, [r7, #20]
 8001ef6:	2103      	movs	r1, #3
 8001ef8:	400a      	ands	r2, r1
 8001efa:	00d2      	lsls	r2, r2, #3
 8001efc:	4093      	lsls	r3, r2
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001f04:	4936      	ldr	r1, [pc, #216]	; (8001fe0 <HAL_GPIO_Init+0x2b8>)
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	089b      	lsrs	r3, r3, #2
 8001f0a:	3318      	adds	r3, #24
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f12:	4b33      	ldr	r3, [pc, #204]	; (8001fe0 <HAL_GPIO_Init+0x2b8>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	43da      	mvns	r2, r3
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	2380      	movs	r3, #128	; 0x80
 8001f28:	035b      	lsls	r3, r3, #13
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d003      	beq.n	8001f36 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f36:	4b2a      	ldr	r3, [pc, #168]	; (8001fe0 <HAL_GPIO_Init+0x2b8>)
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001f3c:	4b28      	ldr	r3, [pc, #160]	; (8001fe0 <HAL_GPIO_Init+0x2b8>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	43da      	mvns	r2, r3
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	2380      	movs	r3, #128	; 0x80
 8001f52:	039b      	lsls	r3, r3, #14
 8001f54:	4013      	ands	r3, r2
 8001f56:	d003      	beq.n	8001f60 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f60:	4b1f      	ldr	r3, [pc, #124]	; (8001fe0 <HAL_GPIO_Init+0x2b8>)
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f66:	4a1e      	ldr	r2, [pc, #120]	; (8001fe0 <HAL_GPIO_Init+0x2b8>)
 8001f68:	2384      	movs	r3, #132	; 0x84
 8001f6a:	58d3      	ldr	r3, [r2, r3]
 8001f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	43da      	mvns	r2, r3
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	4013      	ands	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	2380      	movs	r3, #128	; 0x80
 8001f7e:	029b      	lsls	r3, r3, #10
 8001f80:	4013      	ands	r3, r2
 8001f82:	d003      	beq.n	8001f8c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f8c:	4914      	ldr	r1, [pc, #80]	; (8001fe0 <HAL_GPIO_Init+0x2b8>)
 8001f8e:	2284      	movs	r2, #132	; 0x84
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001f94:	4a12      	ldr	r2, [pc, #72]	; (8001fe0 <HAL_GPIO_Init+0x2b8>)
 8001f96:	2380      	movs	r3, #128	; 0x80
 8001f98:	58d3      	ldr	r3, [r2, r3]
 8001f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	43da      	mvns	r2, r3
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	2380      	movs	r3, #128	; 0x80
 8001fac:	025b      	lsls	r3, r3, #9
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d003      	beq.n	8001fba <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001fba:	4909      	ldr	r1, [pc, #36]	; (8001fe0 <HAL_GPIO_Init+0x2b8>)
 8001fbc:	2280      	movs	r2, #128	; 0x80
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	40da      	lsrs	r2, r3
 8001fd0:	1e13      	subs	r3, r2, #0
 8001fd2:	d000      	beq.n	8001fd6 <HAL_GPIO_Init+0x2ae>
 8001fd4:	e6b0      	b.n	8001d38 <HAL_GPIO_Init+0x10>
  }
}
 8001fd6:	46c0      	nop			; (mov r8, r8)
 8001fd8:	46c0      	nop			; (mov r8, r8)
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	b006      	add	sp, #24
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40021800 	.word	0x40021800
 8001fe4:	50000400 	.word	0x50000400
 8001fe8:	50000800 	.word	0x50000800
 8001fec:	50000c00 	.word	0x50000c00

08001ff0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	0008      	movs	r0, r1
 8001ffa:	0011      	movs	r1, r2
 8001ffc:	1cbb      	adds	r3, r7, #2
 8001ffe:	1c02      	adds	r2, r0, #0
 8002000:	801a      	strh	r2, [r3, #0]
 8002002:	1c7b      	adds	r3, r7, #1
 8002004:	1c0a      	adds	r2, r1, #0
 8002006:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002008:	1c7b      	adds	r3, r7, #1
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d004      	beq.n	800201a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002010:	1cbb      	adds	r3, r7, #2
 8002012:	881a      	ldrh	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002018:	e003      	b.n	8002022 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800201a:	1cbb      	adds	r3, r7, #2
 800201c:	881a      	ldrh	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	46bd      	mov	sp, r7
 8002026:	b002      	add	sp, #8
 8002028:	bd80      	pop	{r7, pc}
	...

0800202c <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002030:	4b04      	ldr	r3, [pc, #16]	; (8002044 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	4b03      	ldr	r3, [pc, #12]	; (8002044 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002036:	2180      	movs	r1, #128	; 0x80
 8002038:	0049      	lsls	r1, r1, #1
 800203a:	430a      	orrs	r2, r1
 800203c:	601a      	str	r2, [r3, #0]
}
 800203e:	46c0      	nop			; (mov r8, r8)
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40007000 	.word	0x40007000

08002048 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002050:	4b19      	ldr	r3, [pc, #100]	; (80020b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a19      	ldr	r2, [pc, #100]	; (80020bc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002056:	4013      	ands	r3, r2
 8002058:	0019      	movs	r1, r3
 800205a:	4b17      	ldr	r3, [pc, #92]	; (80020b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	430a      	orrs	r2, r1
 8002060:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	2380      	movs	r3, #128	; 0x80
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	429a      	cmp	r2, r3
 800206a:	d11f      	bne.n	80020ac <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800206c:	4b14      	ldr	r3, [pc, #80]	; (80020c0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	0013      	movs	r3, r2
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	189b      	adds	r3, r3, r2
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	4912      	ldr	r1, [pc, #72]	; (80020c4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800207a:	0018      	movs	r0, r3
 800207c:	f7fe f854 	bl	8000128 <__udivsi3>
 8002080:	0003      	movs	r3, r0
 8002082:	3301      	adds	r3, #1
 8002084:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002086:	e008      	b.n	800209a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	3b01      	subs	r3, #1
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	e001      	b.n	800209a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e009      	b.n	80020ae <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800209a:	4b07      	ldr	r3, [pc, #28]	; (80020b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800209c:	695a      	ldr	r2, [r3, #20]
 800209e:	2380      	movs	r3, #128	; 0x80
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	401a      	ands	r2, r3
 80020a4:	2380      	movs	r3, #128	; 0x80
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d0ed      	beq.n	8002088 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	0018      	movs	r0, r3
 80020b0:	46bd      	mov	sp, r7
 80020b2:	b004      	add	sp, #16
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	46c0      	nop			; (mov r8, r8)
 80020b8:	40007000 	.word	0x40007000
 80020bc:	fffff9ff 	.word	0xfffff9ff
 80020c0:	20000090 	.word	0x20000090
 80020c4:	000f4240 	.word	0x000f4240

080020c8 <HAL_PWREx_EnterSHUTDOWNMode>:
  * @retval None

  * @retval None
  */
void HAL_PWREx_EnterSHUTDOWNMode(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* Set Shutdown mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_SHUTDOWN);
 80020cc:	4b09      	ldr	r3, [pc, #36]	; (80020f4 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2207      	movs	r2, #7
 80020d2:	4393      	bics	r3, r2
 80020d4:	001a      	movs	r2, r3
 80020d6:	4b07      	ldr	r3, [pc, #28]	; (80020f4 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 80020d8:	2104      	movs	r1, #4
 80020da:	430a      	orrs	r2, r1
 80020dc:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80020de:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 80020e0:	691a      	ldr	r2, [r3, #16]
 80020e2:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 80020e4:	2104      	movs	r1, #4
 80020e6:	430a      	orrs	r2, r1
 80020e8:	611a      	str	r2, [r3, #16]
#if defined ( __CC_ARM)
  __force_stores();
#endif /* __CC_ARM */

  /* Request Wait For Interrupt */
  __WFI();
 80020ea:	bf30      	wfi
}
 80020ec:	46c0      	nop			; (mov r8, r8)
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	46c0      	nop			; (mov r8, r8)
 80020f4:	40007000 	.word	0x40007000
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002100:	4b03      	ldr	r3, [pc, #12]	; (8002110 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	23e0      	movs	r3, #224	; 0xe0
 8002106:	01db      	lsls	r3, r3, #7
 8002108:	4013      	ands	r3, r2
}
 800210a:	0018      	movs	r0, r3
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40021000 	.word	0x40021000

08002114 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b088      	sub	sp, #32
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e2fe      	b.n	8002724 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2201      	movs	r2, #1
 800212c:	4013      	ands	r3, r2
 800212e:	d100      	bne.n	8002132 <HAL_RCC_OscConfig+0x1e>
 8002130:	e07c      	b.n	800222c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002132:	4bc3      	ldr	r3, [pc, #780]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	2238      	movs	r2, #56	; 0x38
 8002138:	4013      	ands	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800213c:	4bc0      	ldr	r3, [pc, #768]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	2203      	movs	r2, #3
 8002142:	4013      	ands	r3, r2
 8002144:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	2b10      	cmp	r3, #16
 800214a:	d102      	bne.n	8002152 <HAL_RCC_OscConfig+0x3e>
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	2b03      	cmp	r3, #3
 8002150:	d002      	beq.n	8002158 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	2b08      	cmp	r3, #8
 8002156:	d10b      	bne.n	8002170 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002158:	4bb9      	ldr	r3, [pc, #740]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	2380      	movs	r3, #128	; 0x80
 800215e:	029b      	lsls	r3, r3, #10
 8002160:	4013      	ands	r3, r2
 8002162:	d062      	beq.n	800222a <HAL_RCC_OscConfig+0x116>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d15e      	bne.n	800222a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e2d9      	b.n	8002724 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	2380      	movs	r3, #128	; 0x80
 8002176:	025b      	lsls	r3, r3, #9
 8002178:	429a      	cmp	r2, r3
 800217a:	d107      	bne.n	800218c <HAL_RCC_OscConfig+0x78>
 800217c:	4bb0      	ldr	r3, [pc, #704]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	4baf      	ldr	r3, [pc, #700]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 8002182:	2180      	movs	r1, #128	; 0x80
 8002184:	0249      	lsls	r1, r1, #9
 8002186:	430a      	orrs	r2, r1
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	e020      	b.n	80021ce <HAL_RCC_OscConfig+0xba>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	23a0      	movs	r3, #160	; 0xa0
 8002192:	02db      	lsls	r3, r3, #11
 8002194:	429a      	cmp	r2, r3
 8002196:	d10e      	bne.n	80021b6 <HAL_RCC_OscConfig+0xa2>
 8002198:	4ba9      	ldr	r3, [pc, #676]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	4ba8      	ldr	r3, [pc, #672]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 800219e:	2180      	movs	r1, #128	; 0x80
 80021a0:	02c9      	lsls	r1, r1, #11
 80021a2:	430a      	orrs	r2, r1
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	4ba6      	ldr	r3, [pc, #664]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	4ba5      	ldr	r3, [pc, #660]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 80021ac:	2180      	movs	r1, #128	; 0x80
 80021ae:	0249      	lsls	r1, r1, #9
 80021b0:	430a      	orrs	r2, r1
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	e00b      	b.n	80021ce <HAL_RCC_OscConfig+0xba>
 80021b6:	4ba2      	ldr	r3, [pc, #648]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	4ba1      	ldr	r3, [pc, #644]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 80021bc:	49a1      	ldr	r1, [pc, #644]	; (8002444 <HAL_RCC_OscConfig+0x330>)
 80021be:	400a      	ands	r2, r1
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	4b9f      	ldr	r3, [pc, #636]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	4b9e      	ldr	r3, [pc, #632]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 80021c8:	499f      	ldr	r1, [pc, #636]	; (8002448 <HAL_RCC_OscConfig+0x334>)
 80021ca:	400a      	ands	r2, r1
 80021cc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d014      	beq.n	8002200 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d6:	f7ff f97d 	bl	80014d4 <HAL_GetTick>
 80021da:	0003      	movs	r3, r0
 80021dc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021e0:	f7ff f978 	bl	80014d4 <HAL_GetTick>
 80021e4:	0002      	movs	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b64      	cmp	r3, #100	; 0x64
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e298      	b.n	8002724 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021f2:	4b93      	ldr	r3, [pc, #588]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	2380      	movs	r3, #128	; 0x80
 80021f8:	029b      	lsls	r3, r3, #10
 80021fa:	4013      	ands	r3, r2
 80021fc:	d0f0      	beq.n	80021e0 <HAL_RCC_OscConfig+0xcc>
 80021fe:	e015      	b.n	800222c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002200:	f7ff f968 	bl	80014d4 <HAL_GetTick>
 8002204:	0003      	movs	r3, r0
 8002206:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800220a:	f7ff f963 	bl	80014d4 <HAL_GetTick>
 800220e:	0002      	movs	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b64      	cmp	r3, #100	; 0x64
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e283      	b.n	8002724 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800221c:	4b88      	ldr	r3, [pc, #544]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	2380      	movs	r3, #128	; 0x80
 8002222:	029b      	lsls	r3, r3, #10
 8002224:	4013      	ands	r3, r2
 8002226:	d1f0      	bne.n	800220a <HAL_RCC_OscConfig+0xf6>
 8002228:	e000      	b.n	800222c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800222a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2202      	movs	r2, #2
 8002232:	4013      	ands	r3, r2
 8002234:	d100      	bne.n	8002238 <HAL_RCC_OscConfig+0x124>
 8002236:	e099      	b.n	800236c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002238:	4b81      	ldr	r3, [pc, #516]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	2238      	movs	r2, #56	; 0x38
 800223e:	4013      	ands	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002242:	4b7f      	ldr	r3, [pc, #508]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	2203      	movs	r2, #3
 8002248:	4013      	ands	r3, r2
 800224a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	2b10      	cmp	r3, #16
 8002250:	d102      	bne.n	8002258 <HAL_RCC_OscConfig+0x144>
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	2b02      	cmp	r3, #2
 8002256:	d002      	beq.n	800225e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d135      	bne.n	80022ca <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800225e:	4b78      	ldr	r3, [pc, #480]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	2380      	movs	r3, #128	; 0x80
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	4013      	ands	r3, r2
 8002268:	d005      	beq.n	8002276 <HAL_RCC_OscConfig+0x162>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e256      	b.n	8002724 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002276:	4b72      	ldr	r3, [pc, #456]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	4a74      	ldr	r2, [pc, #464]	; (800244c <HAL_RCC_OscConfig+0x338>)
 800227c:	4013      	ands	r3, r2
 800227e:	0019      	movs	r1, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	021a      	lsls	r2, r3, #8
 8002286:	4b6e      	ldr	r3, [pc, #440]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 8002288:	430a      	orrs	r2, r1
 800228a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d112      	bne.n	80022b8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002292:	4b6b      	ldr	r3, [pc, #428]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a6e      	ldr	r2, [pc, #440]	; (8002450 <HAL_RCC_OscConfig+0x33c>)
 8002298:	4013      	ands	r3, r2
 800229a:	0019      	movs	r1, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	691a      	ldr	r2, [r3, #16]
 80022a0:	4b67      	ldr	r3, [pc, #412]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 80022a2:	430a      	orrs	r2, r1
 80022a4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80022a6:	4b66      	ldr	r3, [pc, #408]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	0adb      	lsrs	r3, r3, #11
 80022ac:	2207      	movs	r2, #7
 80022ae:	4013      	ands	r3, r2
 80022b0:	4a68      	ldr	r2, [pc, #416]	; (8002454 <HAL_RCC_OscConfig+0x340>)
 80022b2:	40da      	lsrs	r2, r3
 80022b4:	4b68      	ldr	r3, [pc, #416]	; (8002458 <HAL_RCC_OscConfig+0x344>)
 80022b6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80022b8:	4b68      	ldr	r3, [pc, #416]	; (800245c <HAL_RCC_OscConfig+0x348>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	0018      	movs	r0, r3
 80022be:	f7ff f8ad 	bl	800141c <HAL_InitTick>
 80022c2:	1e03      	subs	r3, r0, #0
 80022c4:	d051      	beq.n	800236a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e22c      	b.n	8002724 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d030      	beq.n	8002334 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80022d2:	4b5b      	ldr	r3, [pc, #364]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a5e      	ldr	r2, [pc, #376]	; (8002450 <HAL_RCC_OscConfig+0x33c>)
 80022d8:	4013      	ands	r3, r2
 80022da:	0019      	movs	r1, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	691a      	ldr	r2, [r3, #16]
 80022e0:	4b57      	ldr	r3, [pc, #348]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 80022e2:	430a      	orrs	r2, r1
 80022e4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80022e6:	4b56      	ldr	r3, [pc, #344]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	4b55      	ldr	r3, [pc, #340]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 80022ec:	2180      	movs	r1, #128	; 0x80
 80022ee:	0049      	lsls	r1, r1, #1
 80022f0:	430a      	orrs	r2, r1
 80022f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f4:	f7ff f8ee 	bl	80014d4 <HAL_GetTick>
 80022f8:	0003      	movs	r3, r0
 80022fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022fe:	f7ff f8e9 	bl	80014d4 <HAL_GetTick>
 8002302:	0002      	movs	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e209      	b.n	8002724 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002310:	4b4b      	ldr	r3, [pc, #300]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	2380      	movs	r3, #128	; 0x80
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	4013      	ands	r3, r2
 800231a:	d0f0      	beq.n	80022fe <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800231c:	4b48      	ldr	r3, [pc, #288]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	4a4a      	ldr	r2, [pc, #296]	; (800244c <HAL_RCC_OscConfig+0x338>)
 8002322:	4013      	ands	r3, r2
 8002324:	0019      	movs	r1, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	021a      	lsls	r2, r3, #8
 800232c:	4b44      	ldr	r3, [pc, #272]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 800232e:	430a      	orrs	r2, r1
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	e01b      	b.n	800236c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002334:	4b42      	ldr	r3, [pc, #264]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	4b41      	ldr	r3, [pc, #260]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 800233a:	4949      	ldr	r1, [pc, #292]	; (8002460 <HAL_RCC_OscConfig+0x34c>)
 800233c:	400a      	ands	r2, r1
 800233e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002340:	f7ff f8c8 	bl	80014d4 <HAL_GetTick>
 8002344:	0003      	movs	r3, r0
 8002346:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002348:	e008      	b.n	800235c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800234a:	f7ff f8c3 	bl	80014d4 <HAL_GetTick>
 800234e:	0002      	movs	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e1e3      	b.n	8002724 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800235c:	4b38      	ldr	r3, [pc, #224]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	2380      	movs	r3, #128	; 0x80
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	4013      	ands	r3, r2
 8002366:	d1f0      	bne.n	800234a <HAL_RCC_OscConfig+0x236>
 8002368:	e000      	b.n	800236c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800236a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2208      	movs	r2, #8
 8002372:	4013      	ands	r3, r2
 8002374:	d047      	beq.n	8002406 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002376:	4b32      	ldr	r3, [pc, #200]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	2238      	movs	r2, #56	; 0x38
 800237c:	4013      	ands	r3, r2
 800237e:	2b18      	cmp	r3, #24
 8002380:	d10a      	bne.n	8002398 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002382:	4b2f      	ldr	r3, [pc, #188]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 8002384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002386:	2202      	movs	r2, #2
 8002388:	4013      	ands	r3, r2
 800238a:	d03c      	beq.n	8002406 <HAL_RCC_OscConfig+0x2f2>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d138      	bne.n	8002406 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e1c5      	b.n	8002724 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d019      	beq.n	80023d4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80023a0:	4b27      	ldr	r3, [pc, #156]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 80023a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023a4:	4b26      	ldr	r3, [pc, #152]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 80023a6:	2101      	movs	r1, #1
 80023a8:	430a      	orrs	r2, r1
 80023aa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ac:	f7ff f892 	bl	80014d4 <HAL_GetTick>
 80023b0:	0003      	movs	r3, r0
 80023b2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023b6:	f7ff f88d 	bl	80014d4 <HAL_GetTick>
 80023ba:	0002      	movs	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e1ad      	b.n	8002724 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023c8:	4b1d      	ldr	r3, [pc, #116]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 80023ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023cc:	2202      	movs	r2, #2
 80023ce:	4013      	ands	r3, r2
 80023d0:	d0f1      	beq.n	80023b6 <HAL_RCC_OscConfig+0x2a2>
 80023d2:	e018      	b.n	8002406 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80023d4:	4b1a      	ldr	r3, [pc, #104]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 80023d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023d8:	4b19      	ldr	r3, [pc, #100]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 80023da:	2101      	movs	r1, #1
 80023dc:	438a      	bics	r2, r1
 80023de:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e0:	f7ff f878 	bl	80014d4 <HAL_GetTick>
 80023e4:	0003      	movs	r3, r0
 80023e6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023e8:	e008      	b.n	80023fc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ea:	f7ff f873 	bl	80014d4 <HAL_GetTick>
 80023ee:	0002      	movs	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e193      	b.n	8002724 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023fc:	4b10      	ldr	r3, [pc, #64]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 80023fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002400:	2202      	movs	r2, #2
 8002402:	4013      	ands	r3, r2
 8002404:	d1f1      	bne.n	80023ea <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2204      	movs	r2, #4
 800240c:	4013      	ands	r3, r2
 800240e:	d100      	bne.n	8002412 <HAL_RCC_OscConfig+0x2fe>
 8002410:	e0c6      	b.n	80025a0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002412:	231f      	movs	r3, #31
 8002414:	18fb      	adds	r3, r7, r3
 8002416:	2200      	movs	r2, #0
 8002418:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800241a:	4b09      	ldr	r3, [pc, #36]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	2238      	movs	r2, #56	; 0x38
 8002420:	4013      	ands	r3, r2
 8002422:	2b20      	cmp	r3, #32
 8002424:	d11e      	bne.n	8002464 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002426:	4b06      	ldr	r3, [pc, #24]	; (8002440 <HAL_RCC_OscConfig+0x32c>)
 8002428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800242a:	2202      	movs	r2, #2
 800242c:	4013      	ands	r3, r2
 800242e:	d100      	bne.n	8002432 <HAL_RCC_OscConfig+0x31e>
 8002430:	e0b6      	b.n	80025a0 <HAL_RCC_OscConfig+0x48c>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d000      	beq.n	800243c <HAL_RCC_OscConfig+0x328>
 800243a:	e0b1      	b.n	80025a0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e171      	b.n	8002724 <HAL_RCC_OscConfig+0x610>
 8002440:	40021000 	.word	0x40021000
 8002444:	fffeffff 	.word	0xfffeffff
 8002448:	fffbffff 	.word	0xfffbffff
 800244c:	ffff80ff 	.word	0xffff80ff
 8002450:	ffffc7ff 	.word	0xffffc7ff
 8002454:	00f42400 	.word	0x00f42400
 8002458:	20000090 	.word	0x20000090
 800245c:	20000094 	.word	0x20000094
 8002460:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002464:	4bb1      	ldr	r3, [pc, #708]	; (800272c <HAL_RCC_OscConfig+0x618>)
 8002466:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002468:	2380      	movs	r3, #128	; 0x80
 800246a:	055b      	lsls	r3, r3, #21
 800246c:	4013      	ands	r3, r2
 800246e:	d101      	bne.n	8002474 <HAL_RCC_OscConfig+0x360>
 8002470:	2301      	movs	r3, #1
 8002472:	e000      	b.n	8002476 <HAL_RCC_OscConfig+0x362>
 8002474:	2300      	movs	r3, #0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d011      	beq.n	800249e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800247a:	4bac      	ldr	r3, [pc, #688]	; (800272c <HAL_RCC_OscConfig+0x618>)
 800247c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800247e:	4bab      	ldr	r3, [pc, #684]	; (800272c <HAL_RCC_OscConfig+0x618>)
 8002480:	2180      	movs	r1, #128	; 0x80
 8002482:	0549      	lsls	r1, r1, #21
 8002484:	430a      	orrs	r2, r1
 8002486:	63da      	str	r2, [r3, #60]	; 0x3c
 8002488:	4ba8      	ldr	r3, [pc, #672]	; (800272c <HAL_RCC_OscConfig+0x618>)
 800248a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800248c:	2380      	movs	r3, #128	; 0x80
 800248e:	055b      	lsls	r3, r3, #21
 8002490:	4013      	ands	r3, r2
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002496:	231f      	movs	r3, #31
 8002498:	18fb      	adds	r3, r7, r3
 800249a:	2201      	movs	r2, #1
 800249c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800249e:	4ba4      	ldr	r3, [pc, #656]	; (8002730 <HAL_RCC_OscConfig+0x61c>)
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	2380      	movs	r3, #128	; 0x80
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	4013      	ands	r3, r2
 80024a8:	d11a      	bne.n	80024e0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024aa:	4ba1      	ldr	r3, [pc, #644]	; (8002730 <HAL_RCC_OscConfig+0x61c>)
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	4ba0      	ldr	r3, [pc, #640]	; (8002730 <HAL_RCC_OscConfig+0x61c>)
 80024b0:	2180      	movs	r1, #128	; 0x80
 80024b2:	0049      	lsls	r1, r1, #1
 80024b4:	430a      	orrs	r2, r1
 80024b6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80024b8:	f7ff f80c 	bl	80014d4 <HAL_GetTick>
 80024bc:	0003      	movs	r3, r0
 80024be:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024c2:	f7ff f807 	bl	80014d4 <HAL_GetTick>
 80024c6:	0002      	movs	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e127      	b.n	8002724 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024d4:	4b96      	ldr	r3, [pc, #600]	; (8002730 <HAL_RCC_OscConfig+0x61c>)
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	2380      	movs	r3, #128	; 0x80
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	4013      	ands	r3, r2
 80024de:	d0f0      	beq.n	80024c2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d106      	bne.n	80024f6 <HAL_RCC_OscConfig+0x3e2>
 80024e8:	4b90      	ldr	r3, [pc, #576]	; (800272c <HAL_RCC_OscConfig+0x618>)
 80024ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80024ec:	4b8f      	ldr	r3, [pc, #572]	; (800272c <HAL_RCC_OscConfig+0x618>)
 80024ee:	2101      	movs	r1, #1
 80024f0:	430a      	orrs	r2, r1
 80024f2:	65da      	str	r2, [r3, #92]	; 0x5c
 80024f4:	e01c      	b.n	8002530 <HAL_RCC_OscConfig+0x41c>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	2b05      	cmp	r3, #5
 80024fc:	d10c      	bne.n	8002518 <HAL_RCC_OscConfig+0x404>
 80024fe:	4b8b      	ldr	r3, [pc, #556]	; (800272c <HAL_RCC_OscConfig+0x618>)
 8002500:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002502:	4b8a      	ldr	r3, [pc, #552]	; (800272c <HAL_RCC_OscConfig+0x618>)
 8002504:	2104      	movs	r1, #4
 8002506:	430a      	orrs	r2, r1
 8002508:	65da      	str	r2, [r3, #92]	; 0x5c
 800250a:	4b88      	ldr	r3, [pc, #544]	; (800272c <HAL_RCC_OscConfig+0x618>)
 800250c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800250e:	4b87      	ldr	r3, [pc, #540]	; (800272c <HAL_RCC_OscConfig+0x618>)
 8002510:	2101      	movs	r1, #1
 8002512:	430a      	orrs	r2, r1
 8002514:	65da      	str	r2, [r3, #92]	; 0x5c
 8002516:	e00b      	b.n	8002530 <HAL_RCC_OscConfig+0x41c>
 8002518:	4b84      	ldr	r3, [pc, #528]	; (800272c <HAL_RCC_OscConfig+0x618>)
 800251a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800251c:	4b83      	ldr	r3, [pc, #524]	; (800272c <HAL_RCC_OscConfig+0x618>)
 800251e:	2101      	movs	r1, #1
 8002520:	438a      	bics	r2, r1
 8002522:	65da      	str	r2, [r3, #92]	; 0x5c
 8002524:	4b81      	ldr	r3, [pc, #516]	; (800272c <HAL_RCC_OscConfig+0x618>)
 8002526:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002528:	4b80      	ldr	r3, [pc, #512]	; (800272c <HAL_RCC_OscConfig+0x618>)
 800252a:	2104      	movs	r1, #4
 800252c:	438a      	bics	r2, r1
 800252e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d014      	beq.n	8002562 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002538:	f7fe ffcc 	bl	80014d4 <HAL_GetTick>
 800253c:	0003      	movs	r3, r0
 800253e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002540:	e009      	b.n	8002556 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002542:	f7fe ffc7 	bl	80014d4 <HAL_GetTick>
 8002546:	0002      	movs	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	4a79      	ldr	r2, [pc, #484]	; (8002734 <HAL_RCC_OscConfig+0x620>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e0e6      	b.n	8002724 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002556:	4b75      	ldr	r3, [pc, #468]	; (800272c <HAL_RCC_OscConfig+0x618>)
 8002558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800255a:	2202      	movs	r2, #2
 800255c:	4013      	ands	r3, r2
 800255e:	d0f0      	beq.n	8002542 <HAL_RCC_OscConfig+0x42e>
 8002560:	e013      	b.n	800258a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002562:	f7fe ffb7 	bl	80014d4 <HAL_GetTick>
 8002566:	0003      	movs	r3, r0
 8002568:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800256a:	e009      	b.n	8002580 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800256c:	f7fe ffb2 	bl	80014d4 <HAL_GetTick>
 8002570:	0002      	movs	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	4a6f      	ldr	r2, [pc, #444]	; (8002734 <HAL_RCC_OscConfig+0x620>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e0d1      	b.n	8002724 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002580:	4b6a      	ldr	r3, [pc, #424]	; (800272c <HAL_RCC_OscConfig+0x618>)
 8002582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002584:	2202      	movs	r2, #2
 8002586:	4013      	ands	r3, r2
 8002588:	d1f0      	bne.n	800256c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800258a:	231f      	movs	r3, #31
 800258c:	18fb      	adds	r3, r7, r3
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d105      	bne.n	80025a0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002594:	4b65      	ldr	r3, [pc, #404]	; (800272c <HAL_RCC_OscConfig+0x618>)
 8002596:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002598:	4b64      	ldr	r3, [pc, #400]	; (800272c <HAL_RCC_OscConfig+0x618>)
 800259a:	4967      	ldr	r1, [pc, #412]	; (8002738 <HAL_RCC_OscConfig+0x624>)
 800259c:	400a      	ands	r2, r1
 800259e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	69db      	ldr	r3, [r3, #28]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d100      	bne.n	80025aa <HAL_RCC_OscConfig+0x496>
 80025a8:	e0bb      	b.n	8002722 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025aa:	4b60      	ldr	r3, [pc, #384]	; (800272c <HAL_RCC_OscConfig+0x618>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	2238      	movs	r2, #56	; 0x38
 80025b0:	4013      	ands	r3, r2
 80025b2:	2b10      	cmp	r3, #16
 80025b4:	d100      	bne.n	80025b8 <HAL_RCC_OscConfig+0x4a4>
 80025b6:	e07b      	b.n	80026b0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	69db      	ldr	r3, [r3, #28]
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d156      	bne.n	800266e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c0:	4b5a      	ldr	r3, [pc, #360]	; (800272c <HAL_RCC_OscConfig+0x618>)
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	4b59      	ldr	r3, [pc, #356]	; (800272c <HAL_RCC_OscConfig+0x618>)
 80025c6:	495d      	ldr	r1, [pc, #372]	; (800273c <HAL_RCC_OscConfig+0x628>)
 80025c8:	400a      	ands	r2, r1
 80025ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025cc:	f7fe ff82 	bl	80014d4 <HAL_GetTick>
 80025d0:	0003      	movs	r3, r0
 80025d2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025d4:	e008      	b.n	80025e8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d6:	f7fe ff7d 	bl	80014d4 <HAL_GetTick>
 80025da:	0002      	movs	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e09d      	b.n	8002724 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025e8:	4b50      	ldr	r3, [pc, #320]	; (800272c <HAL_RCC_OscConfig+0x618>)
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	2380      	movs	r3, #128	; 0x80
 80025ee:	049b      	lsls	r3, r3, #18
 80025f0:	4013      	ands	r3, r2
 80025f2:	d1f0      	bne.n	80025d6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025f4:	4b4d      	ldr	r3, [pc, #308]	; (800272c <HAL_RCC_OscConfig+0x618>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	4a51      	ldr	r2, [pc, #324]	; (8002740 <HAL_RCC_OscConfig+0x62c>)
 80025fa:	4013      	ands	r3, r2
 80025fc:	0019      	movs	r1, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a1a      	ldr	r2, [r3, #32]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	431a      	orrs	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260c:	021b      	lsls	r3, r3, #8
 800260e:	431a      	orrs	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002614:	431a      	orrs	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	431a      	orrs	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002620:	431a      	orrs	r2, r3
 8002622:	4b42      	ldr	r3, [pc, #264]	; (800272c <HAL_RCC_OscConfig+0x618>)
 8002624:	430a      	orrs	r2, r1
 8002626:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002628:	4b40      	ldr	r3, [pc, #256]	; (800272c <HAL_RCC_OscConfig+0x618>)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	4b3f      	ldr	r3, [pc, #252]	; (800272c <HAL_RCC_OscConfig+0x618>)
 800262e:	2180      	movs	r1, #128	; 0x80
 8002630:	0449      	lsls	r1, r1, #17
 8002632:	430a      	orrs	r2, r1
 8002634:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002636:	4b3d      	ldr	r3, [pc, #244]	; (800272c <HAL_RCC_OscConfig+0x618>)
 8002638:	68da      	ldr	r2, [r3, #12]
 800263a:	4b3c      	ldr	r3, [pc, #240]	; (800272c <HAL_RCC_OscConfig+0x618>)
 800263c:	2180      	movs	r1, #128	; 0x80
 800263e:	0549      	lsls	r1, r1, #21
 8002640:	430a      	orrs	r2, r1
 8002642:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002644:	f7fe ff46 	bl	80014d4 <HAL_GetTick>
 8002648:	0003      	movs	r3, r0
 800264a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800264c:	e008      	b.n	8002660 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800264e:	f7fe ff41 	bl	80014d4 <HAL_GetTick>
 8002652:	0002      	movs	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e061      	b.n	8002724 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002660:	4b32      	ldr	r3, [pc, #200]	; (800272c <HAL_RCC_OscConfig+0x618>)
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	2380      	movs	r3, #128	; 0x80
 8002666:	049b      	lsls	r3, r3, #18
 8002668:	4013      	ands	r3, r2
 800266a:	d0f0      	beq.n	800264e <HAL_RCC_OscConfig+0x53a>
 800266c:	e059      	b.n	8002722 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800266e:	4b2f      	ldr	r3, [pc, #188]	; (800272c <HAL_RCC_OscConfig+0x618>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	4b2e      	ldr	r3, [pc, #184]	; (800272c <HAL_RCC_OscConfig+0x618>)
 8002674:	4931      	ldr	r1, [pc, #196]	; (800273c <HAL_RCC_OscConfig+0x628>)
 8002676:	400a      	ands	r2, r1
 8002678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267a:	f7fe ff2b 	bl	80014d4 <HAL_GetTick>
 800267e:	0003      	movs	r3, r0
 8002680:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002684:	f7fe ff26 	bl	80014d4 <HAL_GetTick>
 8002688:	0002      	movs	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e046      	b.n	8002724 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002696:	4b25      	ldr	r3, [pc, #148]	; (800272c <HAL_RCC_OscConfig+0x618>)
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	2380      	movs	r3, #128	; 0x80
 800269c:	049b      	lsls	r3, r3, #18
 800269e:	4013      	ands	r3, r2
 80026a0:	d1f0      	bne.n	8002684 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80026a2:	4b22      	ldr	r3, [pc, #136]	; (800272c <HAL_RCC_OscConfig+0x618>)
 80026a4:	68da      	ldr	r2, [r3, #12]
 80026a6:	4b21      	ldr	r3, [pc, #132]	; (800272c <HAL_RCC_OscConfig+0x618>)
 80026a8:	4926      	ldr	r1, [pc, #152]	; (8002744 <HAL_RCC_OscConfig+0x630>)
 80026aa:	400a      	ands	r2, r1
 80026ac:	60da      	str	r2, [r3, #12]
 80026ae:	e038      	b.n	8002722 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d101      	bne.n	80026bc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e033      	b.n	8002724 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80026bc:	4b1b      	ldr	r3, [pc, #108]	; (800272c <HAL_RCC_OscConfig+0x618>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	2203      	movs	r2, #3
 80026c6:	401a      	ands	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d126      	bne.n	800271e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	2270      	movs	r2, #112	; 0x70
 80026d4:	401a      	ands	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026da:	429a      	cmp	r2, r3
 80026dc:	d11f      	bne.n	800271e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	23fe      	movs	r3, #254	; 0xfe
 80026e2:	01db      	lsls	r3, r3, #7
 80026e4:	401a      	ands	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ea:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d116      	bne.n	800271e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80026f0:	697a      	ldr	r2, [r7, #20]
 80026f2:	23f8      	movs	r3, #248	; 0xf8
 80026f4:	039b      	lsls	r3, r3, #14
 80026f6:	401a      	ands	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d10e      	bne.n	800271e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002700:	697a      	ldr	r2, [r7, #20]
 8002702:	23e0      	movs	r3, #224	; 0xe0
 8002704:	051b      	lsls	r3, r3, #20
 8002706:	401a      	ands	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800270c:	429a      	cmp	r2, r3
 800270e:	d106      	bne.n	800271e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	0f5b      	lsrs	r3, r3, #29
 8002714:	075a      	lsls	r2, r3, #29
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800271a:	429a      	cmp	r2, r3
 800271c:	d001      	beq.n	8002722 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	0018      	movs	r0, r3
 8002726:	46bd      	mov	sp, r7
 8002728:	b008      	add	sp, #32
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40021000 	.word	0x40021000
 8002730:	40007000 	.word	0x40007000
 8002734:	00001388 	.word	0x00001388
 8002738:	efffffff 	.word	0xefffffff
 800273c:	feffffff 	.word	0xfeffffff
 8002740:	11c1808c 	.word	0x11c1808c
 8002744:	eefefffc 	.word	0xeefefffc

08002748 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e0e9      	b.n	8002930 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800275c:	4b76      	ldr	r3, [pc, #472]	; (8002938 <HAL_RCC_ClockConfig+0x1f0>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2207      	movs	r2, #7
 8002762:	4013      	ands	r3, r2
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	429a      	cmp	r2, r3
 8002768:	d91e      	bls.n	80027a8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800276a:	4b73      	ldr	r3, [pc, #460]	; (8002938 <HAL_RCC_ClockConfig+0x1f0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2207      	movs	r2, #7
 8002770:	4393      	bics	r3, r2
 8002772:	0019      	movs	r1, r3
 8002774:	4b70      	ldr	r3, [pc, #448]	; (8002938 <HAL_RCC_ClockConfig+0x1f0>)
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	430a      	orrs	r2, r1
 800277a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800277c:	f7fe feaa 	bl	80014d4 <HAL_GetTick>
 8002780:	0003      	movs	r3, r0
 8002782:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002784:	e009      	b.n	800279a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002786:	f7fe fea5 	bl	80014d4 <HAL_GetTick>
 800278a:	0002      	movs	r2, r0
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	4a6a      	ldr	r2, [pc, #424]	; (800293c <HAL_RCC_ClockConfig+0x1f4>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d901      	bls.n	800279a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e0ca      	b.n	8002930 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800279a:	4b67      	ldr	r3, [pc, #412]	; (8002938 <HAL_RCC_ClockConfig+0x1f0>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2207      	movs	r2, #7
 80027a0:	4013      	ands	r3, r2
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d1ee      	bne.n	8002786 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2202      	movs	r2, #2
 80027ae:	4013      	ands	r3, r2
 80027b0:	d015      	beq.n	80027de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2204      	movs	r2, #4
 80027b8:	4013      	ands	r3, r2
 80027ba:	d006      	beq.n	80027ca <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80027bc:	4b60      	ldr	r3, [pc, #384]	; (8002940 <HAL_RCC_ClockConfig+0x1f8>)
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	4b5f      	ldr	r3, [pc, #380]	; (8002940 <HAL_RCC_ClockConfig+0x1f8>)
 80027c2:	21e0      	movs	r1, #224	; 0xe0
 80027c4:	01c9      	lsls	r1, r1, #7
 80027c6:	430a      	orrs	r2, r1
 80027c8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027ca:	4b5d      	ldr	r3, [pc, #372]	; (8002940 <HAL_RCC_ClockConfig+0x1f8>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	4a5d      	ldr	r2, [pc, #372]	; (8002944 <HAL_RCC_ClockConfig+0x1fc>)
 80027d0:	4013      	ands	r3, r2
 80027d2:	0019      	movs	r1, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	4b59      	ldr	r3, [pc, #356]	; (8002940 <HAL_RCC_ClockConfig+0x1f8>)
 80027da:	430a      	orrs	r2, r1
 80027dc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2201      	movs	r2, #1
 80027e4:	4013      	ands	r3, r2
 80027e6:	d057      	beq.n	8002898 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d107      	bne.n	8002800 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027f0:	4b53      	ldr	r3, [pc, #332]	; (8002940 <HAL_RCC_ClockConfig+0x1f8>)
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	2380      	movs	r3, #128	; 0x80
 80027f6:	029b      	lsls	r3, r3, #10
 80027f8:	4013      	ands	r3, r2
 80027fa:	d12b      	bne.n	8002854 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e097      	b.n	8002930 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	2b02      	cmp	r3, #2
 8002806:	d107      	bne.n	8002818 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002808:	4b4d      	ldr	r3, [pc, #308]	; (8002940 <HAL_RCC_ClockConfig+0x1f8>)
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	2380      	movs	r3, #128	; 0x80
 800280e:	049b      	lsls	r3, r3, #18
 8002810:	4013      	ands	r3, r2
 8002812:	d11f      	bne.n	8002854 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e08b      	b.n	8002930 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d107      	bne.n	8002830 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002820:	4b47      	ldr	r3, [pc, #284]	; (8002940 <HAL_RCC_ClockConfig+0x1f8>)
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	2380      	movs	r3, #128	; 0x80
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	4013      	ands	r3, r2
 800282a:	d113      	bne.n	8002854 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e07f      	b.n	8002930 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	2b03      	cmp	r3, #3
 8002836:	d106      	bne.n	8002846 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002838:	4b41      	ldr	r3, [pc, #260]	; (8002940 <HAL_RCC_ClockConfig+0x1f8>)
 800283a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800283c:	2202      	movs	r2, #2
 800283e:	4013      	ands	r3, r2
 8002840:	d108      	bne.n	8002854 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e074      	b.n	8002930 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002846:	4b3e      	ldr	r3, [pc, #248]	; (8002940 <HAL_RCC_ClockConfig+0x1f8>)
 8002848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800284a:	2202      	movs	r2, #2
 800284c:	4013      	ands	r3, r2
 800284e:	d101      	bne.n	8002854 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e06d      	b.n	8002930 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002854:	4b3a      	ldr	r3, [pc, #232]	; (8002940 <HAL_RCC_ClockConfig+0x1f8>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	2207      	movs	r2, #7
 800285a:	4393      	bics	r3, r2
 800285c:	0019      	movs	r1, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685a      	ldr	r2, [r3, #4]
 8002862:	4b37      	ldr	r3, [pc, #220]	; (8002940 <HAL_RCC_ClockConfig+0x1f8>)
 8002864:	430a      	orrs	r2, r1
 8002866:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002868:	f7fe fe34 	bl	80014d4 <HAL_GetTick>
 800286c:	0003      	movs	r3, r0
 800286e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002870:	e009      	b.n	8002886 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002872:	f7fe fe2f 	bl	80014d4 <HAL_GetTick>
 8002876:	0002      	movs	r2, r0
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	4a2f      	ldr	r2, [pc, #188]	; (800293c <HAL_RCC_ClockConfig+0x1f4>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e054      	b.n	8002930 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002886:	4b2e      	ldr	r3, [pc, #184]	; (8002940 <HAL_RCC_ClockConfig+0x1f8>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	2238      	movs	r2, #56	; 0x38
 800288c:	401a      	ands	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	429a      	cmp	r2, r3
 8002896:	d1ec      	bne.n	8002872 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002898:	4b27      	ldr	r3, [pc, #156]	; (8002938 <HAL_RCC_ClockConfig+0x1f0>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2207      	movs	r2, #7
 800289e:	4013      	ands	r3, r2
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d21e      	bcs.n	80028e4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a6:	4b24      	ldr	r3, [pc, #144]	; (8002938 <HAL_RCC_ClockConfig+0x1f0>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2207      	movs	r2, #7
 80028ac:	4393      	bics	r3, r2
 80028ae:	0019      	movs	r1, r3
 80028b0:	4b21      	ldr	r3, [pc, #132]	; (8002938 <HAL_RCC_ClockConfig+0x1f0>)
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	430a      	orrs	r2, r1
 80028b6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80028b8:	f7fe fe0c 	bl	80014d4 <HAL_GetTick>
 80028bc:	0003      	movs	r3, r0
 80028be:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028c0:	e009      	b.n	80028d6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028c2:	f7fe fe07 	bl	80014d4 <HAL_GetTick>
 80028c6:	0002      	movs	r2, r0
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	4a1b      	ldr	r2, [pc, #108]	; (800293c <HAL_RCC_ClockConfig+0x1f4>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e02c      	b.n	8002930 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028d6:	4b18      	ldr	r3, [pc, #96]	; (8002938 <HAL_RCC_ClockConfig+0x1f0>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2207      	movs	r2, #7
 80028dc:	4013      	ands	r3, r2
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d1ee      	bne.n	80028c2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2204      	movs	r2, #4
 80028ea:	4013      	ands	r3, r2
 80028ec:	d009      	beq.n	8002902 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80028ee:	4b14      	ldr	r3, [pc, #80]	; (8002940 <HAL_RCC_ClockConfig+0x1f8>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	4a15      	ldr	r2, [pc, #84]	; (8002948 <HAL_RCC_ClockConfig+0x200>)
 80028f4:	4013      	ands	r3, r2
 80028f6:	0019      	movs	r1, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68da      	ldr	r2, [r3, #12]
 80028fc:	4b10      	ldr	r3, [pc, #64]	; (8002940 <HAL_RCC_ClockConfig+0x1f8>)
 80028fe:	430a      	orrs	r2, r1
 8002900:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002902:	f000 f829 	bl	8002958 <HAL_RCC_GetSysClockFreq>
 8002906:	0001      	movs	r1, r0
 8002908:	4b0d      	ldr	r3, [pc, #52]	; (8002940 <HAL_RCC_ClockConfig+0x1f8>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	0a1b      	lsrs	r3, r3, #8
 800290e:	220f      	movs	r2, #15
 8002910:	401a      	ands	r2, r3
 8002912:	4b0e      	ldr	r3, [pc, #56]	; (800294c <HAL_RCC_ClockConfig+0x204>)
 8002914:	0092      	lsls	r2, r2, #2
 8002916:	58d3      	ldr	r3, [r2, r3]
 8002918:	221f      	movs	r2, #31
 800291a:	4013      	ands	r3, r2
 800291c:	000a      	movs	r2, r1
 800291e:	40da      	lsrs	r2, r3
 8002920:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <HAL_RCC_ClockConfig+0x208>)
 8002922:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002924:	4b0b      	ldr	r3, [pc, #44]	; (8002954 <HAL_RCC_ClockConfig+0x20c>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	0018      	movs	r0, r3
 800292a:	f7fe fd77 	bl	800141c <HAL_InitTick>
 800292e:	0003      	movs	r3, r0
}
 8002930:	0018      	movs	r0, r3
 8002932:	46bd      	mov	sp, r7
 8002934:	b004      	add	sp, #16
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40022000 	.word	0x40022000
 800293c:	00001388 	.word	0x00001388
 8002940:	40021000 	.word	0x40021000
 8002944:	fffff0ff 	.word	0xfffff0ff
 8002948:	ffff8fff 	.word	0xffff8fff
 800294c:	080074e4 	.word	0x080074e4
 8002950:	20000090 	.word	0x20000090
 8002954:	20000094 	.word	0x20000094

08002958 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800295e:	4b3c      	ldr	r3, [pc, #240]	; (8002a50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	2238      	movs	r2, #56	; 0x38
 8002964:	4013      	ands	r3, r2
 8002966:	d10f      	bne.n	8002988 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002968:	4b39      	ldr	r3, [pc, #228]	; (8002a50 <HAL_RCC_GetSysClockFreq+0xf8>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	0adb      	lsrs	r3, r3, #11
 800296e:	2207      	movs	r2, #7
 8002970:	4013      	ands	r3, r2
 8002972:	2201      	movs	r2, #1
 8002974:	409a      	lsls	r2, r3
 8002976:	0013      	movs	r3, r2
 8002978:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800297a:	6839      	ldr	r1, [r7, #0]
 800297c:	4835      	ldr	r0, [pc, #212]	; (8002a54 <HAL_RCC_GetSysClockFreq+0xfc>)
 800297e:	f7fd fbd3 	bl	8000128 <__udivsi3>
 8002982:	0003      	movs	r3, r0
 8002984:	613b      	str	r3, [r7, #16]
 8002986:	e05d      	b.n	8002a44 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002988:	4b31      	ldr	r3, [pc, #196]	; (8002a50 <HAL_RCC_GetSysClockFreq+0xf8>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	2238      	movs	r2, #56	; 0x38
 800298e:	4013      	ands	r3, r2
 8002990:	2b08      	cmp	r3, #8
 8002992:	d102      	bne.n	800299a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002994:	4b30      	ldr	r3, [pc, #192]	; (8002a58 <HAL_RCC_GetSysClockFreq+0x100>)
 8002996:	613b      	str	r3, [r7, #16]
 8002998:	e054      	b.n	8002a44 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800299a:	4b2d      	ldr	r3, [pc, #180]	; (8002a50 <HAL_RCC_GetSysClockFreq+0xf8>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	2238      	movs	r2, #56	; 0x38
 80029a0:	4013      	ands	r3, r2
 80029a2:	2b10      	cmp	r3, #16
 80029a4:	d138      	bne.n	8002a18 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80029a6:	4b2a      	ldr	r3, [pc, #168]	; (8002a50 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	2203      	movs	r2, #3
 80029ac:	4013      	ands	r3, r2
 80029ae:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029b0:	4b27      	ldr	r3, [pc, #156]	; (8002a50 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	091b      	lsrs	r3, r3, #4
 80029b6:	2207      	movs	r2, #7
 80029b8:	4013      	ands	r3, r2
 80029ba:	3301      	adds	r3, #1
 80029bc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2b03      	cmp	r3, #3
 80029c2:	d10d      	bne.n	80029e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029c4:	68b9      	ldr	r1, [r7, #8]
 80029c6:	4824      	ldr	r0, [pc, #144]	; (8002a58 <HAL_RCC_GetSysClockFreq+0x100>)
 80029c8:	f7fd fbae 	bl	8000128 <__udivsi3>
 80029cc:	0003      	movs	r3, r0
 80029ce:	0019      	movs	r1, r3
 80029d0:	4b1f      	ldr	r3, [pc, #124]	; (8002a50 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	0a1b      	lsrs	r3, r3, #8
 80029d6:	227f      	movs	r2, #127	; 0x7f
 80029d8:	4013      	ands	r3, r2
 80029da:	434b      	muls	r3, r1
 80029dc:	617b      	str	r3, [r7, #20]
        break;
 80029de:	e00d      	b.n	80029fc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80029e0:	68b9      	ldr	r1, [r7, #8]
 80029e2:	481c      	ldr	r0, [pc, #112]	; (8002a54 <HAL_RCC_GetSysClockFreq+0xfc>)
 80029e4:	f7fd fba0 	bl	8000128 <__udivsi3>
 80029e8:	0003      	movs	r3, r0
 80029ea:	0019      	movs	r1, r3
 80029ec:	4b18      	ldr	r3, [pc, #96]	; (8002a50 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	0a1b      	lsrs	r3, r3, #8
 80029f2:	227f      	movs	r2, #127	; 0x7f
 80029f4:	4013      	ands	r3, r2
 80029f6:	434b      	muls	r3, r1
 80029f8:	617b      	str	r3, [r7, #20]
        break;
 80029fa:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80029fc:	4b14      	ldr	r3, [pc, #80]	; (8002a50 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	0f5b      	lsrs	r3, r3, #29
 8002a02:	2207      	movs	r2, #7
 8002a04:	4013      	ands	r3, r2
 8002a06:	3301      	adds	r3, #1
 8002a08:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	6978      	ldr	r0, [r7, #20]
 8002a0e:	f7fd fb8b 	bl	8000128 <__udivsi3>
 8002a12:	0003      	movs	r3, r0
 8002a14:	613b      	str	r3, [r7, #16]
 8002a16:	e015      	b.n	8002a44 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002a18:	4b0d      	ldr	r3, [pc, #52]	; (8002a50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	2238      	movs	r2, #56	; 0x38
 8002a1e:	4013      	ands	r3, r2
 8002a20:	2b20      	cmp	r3, #32
 8002a22:	d103      	bne.n	8002a2c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002a24:	2380      	movs	r3, #128	; 0x80
 8002a26:	021b      	lsls	r3, r3, #8
 8002a28:	613b      	str	r3, [r7, #16]
 8002a2a:	e00b      	b.n	8002a44 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002a2c:	4b08      	ldr	r3, [pc, #32]	; (8002a50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	2238      	movs	r2, #56	; 0x38
 8002a32:	4013      	ands	r3, r2
 8002a34:	2b18      	cmp	r3, #24
 8002a36:	d103      	bne.n	8002a40 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002a38:	23fa      	movs	r3, #250	; 0xfa
 8002a3a:	01db      	lsls	r3, r3, #7
 8002a3c:	613b      	str	r3, [r7, #16]
 8002a3e:	e001      	b.n	8002a44 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002a44:	693b      	ldr	r3, [r7, #16]
}
 8002a46:	0018      	movs	r0, r3
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	b006      	add	sp, #24
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	46c0      	nop			; (mov r8, r8)
 8002a50:	40021000 	.word	0x40021000
 8002a54:	00f42400 	.word	0x00f42400
 8002a58:	007a1200 	.word	0x007a1200

08002a5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a60:	4b02      	ldr	r3, [pc, #8]	; (8002a6c <HAL_RCC_GetHCLKFreq+0x10>)
 8002a62:	681b      	ldr	r3, [r3, #0]
}
 8002a64:	0018      	movs	r0, r3
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	46c0      	nop			; (mov r8, r8)
 8002a6c:	20000090 	.word	0x20000090

08002a70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a70:	b5b0      	push	{r4, r5, r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002a74:	f7ff fff2 	bl	8002a5c <HAL_RCC_GetHCLKFreq>
 8002a78:	0004      	movs	r4, r0
 8002a7a:	f7ff fb3f 	bl	80020fc <LL_RCC_GetAPB1Prescaler>
 8002a7e:	0003      	movs	r3, r0
 8002a80:	0b1a      	lsrs	r2, r3, #12
 8002a82:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a84:	0092      	lsls	r2, r2, #2
 8002a86:	58d3      	ldr	r3, [r2, r3]
 8002a88:	221f      	movs	r2, #31
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	40dc      	lsrs	r4, r3
 8002a8e:	0023      	movs	r3, r4
}
 8002a90:	0018      	movs	r0, r3
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bdb0      	pop	{r4, r5, r7, pc}
 8002a96:	46c0      	nop			; (mov r8, r8)
 8002a98:	08007524 	.word	0x08007524

08002a9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002aa4:	2313      	movs	r3, #19
 8002aa6:	18fb      	adds	r3, r7, r3
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002aac:	2312      	movs	r3, #18
 8002aae:	18fb      	adds	r3, r7, r3
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	2380      	movs	r3, #128	; 0x80
 8002aba:	029b      	lsls	r3, r3, #10
 8002abc:	4013      	ands	r3, r2
 8002abe:	d100      	bne.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002ac0:	e0a3      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ac2:	2011      	movs	r0, #17
 8002ac4:	183b      	adds	r3, r7, r0
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aca:	4ba5      	ldr	r3, [pc, #660]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002acc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ace:	2380      	movs	r3, #128	; 0x80
 8002ad0:	055b      	lsls	r3, r3, #21
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	d110      	bne.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ad6:	4ba2      	ldr	r3, [pc, #648]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ad8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ada:	4ba1      	ldr	r3, [pc, #644]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002adc:	2180      	movs	r1, #128	; 0x80
 8002ade:	0549      	lsls	r1, r1, #21
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ae4:	4b9e      	ldr	r3, [pc, #632]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ae6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ae8:	2380      	movs	r3, #128	; 0x80
 8002aea:	055b      	lsls	r3, r3, #21
 8002aec:	4013      	ands	r3, r2
 8002aee:	60bb      	str	r3, [r7, #8]
 8002af0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002af2:	183b      	adds	r3, r7, r0
 8002af4:	2201      	movs	r2, #1
 8002af6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002af8:	4b9a      	ldr	r3, [pc, #616]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	4b99      	ldr	r3, [pc, #612]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002afe:	2180      	movs	r1, #128	; 0x80
 8002b00:	0049      	lsls	r1, r1, #1
 8002b02:	430a      	orrs	r2, r1
 8002b04:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b06:	f7fe fce5 	bl	80014d4 <HAL_GetTick>
 8002b0a:	0003      	movs	r3, r0
 8002b0c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b0e:	e00b      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b10:	f7fe fce0 	bl	80014d4 <HAL_GetTick>
 8002b14:	0002      	movs	r2, r0
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d904      	bls.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002b1e:	2313      	movs	r3, #19
 8002b20:	18fb      	adds	r3, r7, r3
 8002b22:	2203      	movs	r2, #3
 8002b24:	701a      	strb	r2, [r3, #0]
        break;
 8002b26:	e005      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b28:	4b8e      	ldr	r3, [pc, #568]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	2380      	movs	r3, #128	; 0x80
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	4013      	ands	r3, r2
 8002b32:	d0ed      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002b34:	2313      	movs	r3, #19
 8002b36:	18fb      	adds	r3, r7, r3
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d154      	bne.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b3e:	4b88      	ldr	r3, [pc, #544]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b40:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b42:	23c0      	movs	r3, #192	; 0xc0
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4013      	ands	r3, r2
 8002b48:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d019      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d014      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b5a:	4b81      	ldr	r3, [pc, #516]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b5e:	4a82      	ldr	r2, [pc, #520]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002b60:	4013      	ands	r3, r2
 8002b62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b64:	4b7e      	ldr	r3, [pc, #504]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b68:	4b7d      	ldr	r3, [pc, #500]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b6a:	2180      	movs	r1, #128	; 0x80
 8002b6c:	0249      	lsls	r1, r1, #9
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b72:	4b7b      	ldr	r3, [pc, #492]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b76:	4b7a      	ldr	r3, [pc, #488]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b78:	497c      	ldr	r1, [pc, #496]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8002b7a:	400a      	ands	r2, r1
 8002b7c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b7e:	4b78      	ldr	r3, [pc, #480]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	2201      	movs	r2, #1
 8002b88:	4013      	ands	r3, r2
 8002b8a:	d016      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8c:	f7fe fca2 	bl	80014d4 <HAL_GetTick>
 8002b90:	0003      	movs	r3, r0
 8002b92:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b94:	e00c      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b96:	f7fe fc9d 	bl	80014d4 <HAL_GetTick>
 8002b9a:	0002      	movs	r2, r0
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	4a73      	ldr	r2, [pc, #460]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d904      	bls.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002ba6:	2313      	movs	r3, #19
 8002ba8:	18fb      	adds	r3, r7, r3
 8002baa:	2203      	movs	r2, #3
 8002bac:	701a      	strb	r2, [r3, #0]
            break;
 8002bae:	e004      	b.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bb0:	4b6b      	ldr	r3, [pc, #428]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	d0ed      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002bba:	2313      	movs	r3, #19
 8002bbc:	18fb      	adds	r3, r7, r3
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d10a      	bne.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bc4:	4b66      	ldr	r3, [pc, #408]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc8:	4a67      	ldr	r2, [pc, #412]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002bca:	4013      	ands	r3, r2
 8002bcc:	0019      	movs	r1, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bd2:	4b63      	ldr	r3, [pc, #396]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	65da      	str	r2, [r3, #92]	; 0x5c
 8002bd8:	e00c      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bda:	2312      	movs	r3, #18
 8002bdc:	18fb      	adds	r3, r7, r3
 8002bde:	2213      	movs	r2, #19
 8002be0:	18ba      	adds	r2, r7, r2
 8002be2:	7812      	ldrb	r2, [r2, #0]
 8002be4:	701a      	strb	r2, [r3, #0]
 8002be6:	e005      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002be8:	2312      	movs	r3, #18
 8002bea:	18fb      	adds	r3, r7, r3
 8002bec:	2213      	movs	r2, #19
 8002bee:	18ba      	adds	r2, r7, r2
 8002bf0:	7812      	ldrb	r2, [r2, #0]
 8002bf2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002bf4:	2311      	movs	r3, #17
 8002bf6:	18fb      	adds	r3, r7, r3
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d105      	bne.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bfe:	4b58      	ldr	r3, [pc, #352]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c02:	4b57      	ldr	r3, [pc, #348]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c04:	495b      	ldr	r1, [pc, #364]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002c06:	400a      	ands	r2, r1
 8002c08:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	4013      	ands	r3, r2
 8002c12:	d009      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c14:	4b52      	ldr	r3, [pc, #328]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c18:	2203      	movs	r2, #3
 8002c1a:	4393      	bics	r3, r2
 8002c1c:	0019      	movs	r1, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	4b4f      	ldr	r3, [pc, #316]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c24:	430a      	orrs	r2, r1
 8002c26:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2210      	movs	r2, #16
 8002c2e:	4013      	ands	r3, r2
 8002c30:	d009      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c32:	4b4b      	ldr	r3, [pc, #300]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c36:	4a50      	ldr	r2, [pc, #320]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002c38:	4013      	ands	r3, r2
 8002c3a:	0019      	movs	r1, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	4b47      	ldr	r3, [pc, #284]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c42:	430a      	orrs	r2, r1
 8002c44:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	2380      	movs	r3, #128	; 0x80
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4013      	ands	r3, r2
 8002c50:	d009      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c52:	4b43      	ldr	r3, [pc, #268]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c56:	4a49      	ldr	r2, [pc, #292]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002c58:	4013      	ands	r3, r2
 8002c5a:	0019      	movs	r1, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	695a      	ldr	r2, [r3, #20]
 8002c60:	4b3f      	ldr	r3, [pc, #252]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c62:	430a      	orrs	r2, r1
 8002c64:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	2380      	movs	r3, #128	; 0x80
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	4013      	ands	r3, r2
 8002c70:	d009      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c72:	4b3b      	ldr	r3, [pc, #236]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c76:	4a42      	ldr	r2, [pc, #264]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c78:	4013      	ands	r3, r2
 8002c7a:	0019      	movs	r1, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	699a      	ldr	r2, [r3, #24]
 8002c80:	4b37      	ldr	r3, [pc, #220]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c82:	430a      	orrs	r2, r1
 8002c84:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	d009      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c90:	4b33      	ldr	r3, [pc, #204]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c94:	4a3b      	ldr	r2, [pc, #236]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002c96:	4013      	ands	r3, r2
 8002c98:	0019      	movs	r1, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68da      	ldr	r2, [r3, #12]
 8002c9e:	4b30      	ldr	r3, [pc, #192]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	2380      	movs	r3, #128	; 0x80
 8002caa:	01db      	lsls	r3, r3, #7
 8002cac:	4013      	ands	r3, r2
 8002cae:	d015      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cb0:	4b2b      	ldr	r3, [pc, #172]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	0899      	lsrs	r1, r3, #2
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	69da      	ldr	r2, [r3, #28]
 8002cbc:	4b28      	ldr	r3, [pc, #160]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	69da      	ldr	r2, [r3, #28]
 8002cc6:	2380      	movs	r3, #128	; 0x80
 8002cc8:	05db      	lsls	r3, r3, #23
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d106      	bne.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002cce:	4b24      	ldr	r3, [pc, #144]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cd0:	68da      	ldr	r2, [r3, #12]
 8002cd2:	4b23      	ldr	r3, [pc, #140]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cd4:	2180      	movs	r1, #128	; 0x80
 8002cd6:	0249      	lsls	r1, r1, #9
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	2380      	movs	r3, #128	; 0x80
 8002ce2:	039b      	lsls	r3, r3, #14
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	d016      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002ce8:	4b1d      	ldr	r3, [pc, #116]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cec:	4a26      	ldr	r2, [pc, #152]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002cee:	4013      	ands	r3, r2
 8002cf0:	0019      	movs	r1, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a1a      	ldr	r2, [r3, #32]
 8002cf6:	4b1a      	ldr	r3, [pc, #104]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a1a      	ldr	r2, [r3, #32]
 8002d00:	2380      	movs	r3, #128	; 0x80
 8002d02:	03db      	lsls	r3, r3, #15
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d106      	bne.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002d08:	4b15      	ldr	r3, [pc, #84]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d0a:	68da      	ldr	r2, [r3, #12]
 8002d0c:	4b14      	ldr	r3, [pc, #80]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d0e:	2180      	movs	r1, #128	; 0x80
 8002d10:	0449      	lsls	r1, r1, #17
 8002d12:	430a      	orrs	r2, r1
 8002d14:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	2380      	movs	r3, #128	; 0x80
 8002d1c:	011b      	lsls	r3, r3, #4
 8002d1e:	4013      	ands	r3, r2
 8002d20:	d016      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002d22:	4b0f      	ldr	r3, [pc, #60]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d26:	4a19      	ldr	r2, [pc, #100]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d28:	4013      	ands	r3, r2
 8002d2a:	0019      	movs	r1, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	691a      	ldr	r2, [r3, #16]
 8002d30:	4b0b      	ldr	r3, [pc, #44]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d32:	430a      	orrs	r2, r1
 8002d34:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	691a      	ldr	r2, [r3, #16]
 8002d3a:	2380      	movs	r3, #128	; 0x80
 8002d3c:	01db      	lsls	r3, r3, #7
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d106      	bne.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002d42:	4b07      	ldr	r3, [pc, #28]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d44:	68da      	ldr	r2, [r3, #12]
 8002d46:	4b06      	ldr	r3, [pc, #24]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d48:	2180      	movs	r1, #128	; 0x80
 8002d4a:	0249      	lsls	r1, r1, #9
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002d50:	2312      	movs	r3, #18
 8002d52:	18fb      	adds	r3, r7, r3
 8002d54:	781b      	ldrb	r3, [r3, #0]
}
 8002d56:	0018      	movs	r0, r3
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	b006      	add	sp, #24
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	46c0      	nop			; (mov r8, r8)
 8002d60:	40021000 	.word	0x40021000
 8002d64:	40007000 	.word	0x40007000
 8002d68:	fffffcff 	.word	0xfffffcff
 8002d6c:	fffeffff 	.word	0xfffeffff
 8002d70:	00001388 	.word	0x00001388
 8002d74:	efffffff 	.word	0xefffffff
 8002d78:	fffff3ff 	.word	0xfffff3ff
 8002d7c:	fff3ffff 	.word	0xfff3ffff
 8002d80:	ffcfffff 	.word	0xffcfffff
 8002d84:	ffffcfff 	.word	0xffffcfff
 8002d88:	ffbfffff 	.word	0xffbfffff
 8002d8c:	ffff3fff 	.word	0xffff3fff

08002d90 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002d90:	b5b0      	push	{r4, r5, r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002d98:	230f      	movs	r3, #15
 8002d9a:	18fb      	adds	r3, r7, r3
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d100      	bne.n	8002da8 <HAL_RTC_Init+0x18>
 8002da6:	e08c      	b.n	8002ec2 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2229      	movs	r2, #41	; 0x29
 8002dac:	5c9b      	ldrb	r3, [r3, r2]
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10b      	bne.n	8002dcc <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2228      	movs	r2, #40	; 0x28
 8002db8:	2100      	movs	r1, #0
 8002dba:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2288      	movs	r2, #136	; 0x88
 8002dc0:	0212      	lsls	r2, r2, #8
 8002dc2:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	f7fe f8cc 	bl	8000f64 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2229      	movs	r2, #41	; 0x29
 8002dd0:	2102      	movs	r1, #2
 8002dd2:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	2210      	movs	r2, #16
 8002ddc:	4013      	ands	r3, r2
 8002dde:	2b10      	cmp	r3, #16
 8002de0:	d062      	beq.n	8002ea8 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	22ca      	movs	r2, #202	; 0xca
 8002de8:	625a      	str	r2, [r3, #36]	; 0x24
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2253      	movs	r2, #83	; 0x53
 8002df0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002df2:	250f      	movs	r5, #15
 8002df4:	197c      	adds	r4, r7, r5
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	0018      	movs	r0, r3
 8002dfa:	f000 f9cc 	bl	8003196 <RTC_EnterInitMode>
 8002dfe:	0003      	movs	r3, r0
 8002e00:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8002e02:	0028      	movs	r0, r5
 8002e04:	183b      	adds	r3, r7, r0
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d12c      	bne.n	8002e66 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	699a      	ldr	r2, [r3, #24]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	492e      	ldr	r1, [pc, #184]	; (8002ed0 <HAL_RTC_Init+0x140>)
 8002e18:	400a      	ands	r2, r1
 8002e1a:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6999      	ldr	r1, [r3, #24]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689a      	ldr	r2, [r3, #8]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	69db      	ldr	r3, [r3, #28]
 8002e30:	431a      	orrs	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6912      	ldr	r2, [r2, #16]
 8002e42:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6919      	ldr	r1, [r3, #16]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	041a      	lsls	r2, r3, #16
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002e58:	183c      	adds	r4, r7, r0
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	f000 f9dd 	bl	800321c <RTC_ExitInitMode>
 8002e62:	0003      	movs	r3, r0
 8002e64:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8002e66:	230f      	movs	r3, #15
 8002e68:	18fb      	adds	r3, r7, r3
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d116      	bne.n	8002e9e <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	699a      	ldr	r2, [r3, #24]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	00d2      	lsls	r2, r2, #3
 8002e7c:	08d2      	lsrs	r2, r2, #3
 8002e7e:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6999      	ldr	r1, [r3, #24]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	431a      	orrs	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	22ff      	movs	r2, #255	; 0xff
 8002ea4:	625a      	str	r2, [r3, #36]	; 0x24
 8002ea6:	e003      	b.n	8002eb0 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002ea8:	230f      	movs	r3, #15
 8002eaa:	18fb      	adds	r3, r7, r3
 8002eac:	2200      	movs	r2, #0
 8002eae:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8002eb0:	230f      	movs	r3, #15
 8002eb2:	18fb      	adds	r3, r7, r3
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d103      	bne.n	8002ec2 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2229      	movs	r2, #41	; 0x29
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8002ec2:	230f      	movs	r3, #15
 8002ec4:	18fb      	adds	r3, r7, r3
 8002ec6:	781b      	ldrb	r3, [r3, #0]
}
 8002ec8:	0018      	movs	r0, r3
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	b004      	add	sp, #16
 8002ece:	bdb0      	pop	{r4, r5, r7, pc}
 8002ed0:	fb8fffbf 	.word	0xfb8fffbf

08002ed4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002ed4:	b5b0      	push	{r4, r5, r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2228      	movs	r2, #40	; 0x28
 8002ee4:	5c9b      	ldrb	r3, [r3, r2]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d101      	bne.n	8002eee <HAL_RTC_SetTime+0x1a>
 8002eea:	2302      	movs	r3, #2
 8002eec:	e092      	b.n	8003014 <HAL_RTC_SetTime+0x140>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2228      	movs	r2, #40	; 0x28
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2229      	movs	r2, #41	; 0x29
 8002efa:	2102      	movs	r1, #2
 8002efc:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	22ca      	movs	r2, #202	; 0xca
 8002f04:	625a      	str	r2, [r3, #36]	; 0x24
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2253      	movs	r2, #83	; 0x53
 8002f0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002f0e:	2513      	movs	r5, #19
 8002f10:	197c      	adds	r4, r7, r5
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	0018      	movs	r0, r3
 8002f16:	f000 f93e 	bl	8003196 <RTC_EnterInitMode>
 8002f1a:	0003      	movs	r3, r0
 8002f1c:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8002f1e:	197b      	adds	r3, r7, r5
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d162      	bne.n	8002fec <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d125      	bne.n	8002f78 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	2240      	movs	r2, #64	; 0x40
 8002f34:	4013      	ands	r3, r2
 8002f36:	d102      	bne.n	8002f3e <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	0018      	movs	r0, r3
 8002f44:	f000 f9ae 	bl	80032a4 <RTC_ByteToBcd2>
 8002f48:	0003      	movs	r3, r0
 8002f4a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	785b      	ldrb	r3, [r3, #1]
 8002f50:	0018      	movs	r0, r3
 8002f52:	f000 f9a7 	bl	80032a4 <RTC_ByteToBcd2>
 8002f56:	0003      	movs	r3, r0
 8002f58:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002f5a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	789b      	ldrb	r3, [r3, #2]
 8002f60:	0018      	movs	r0, r3
 8002f62:	f000 f99f 	bl	80032a4 <RTC_ByteToBcd2>
 8002f66:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002f68:	0022      	movs	r2, r4
 8002f6a:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	78db      	ldrb	r3, [r3, #3]
 8002f70:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002f72:	4313      	orrs	r3, r2
 8002f74:	617b      	str	r3, [r7, #20]
 8002f76:	e017      	b.n	8002fa8 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	2240      	movs	r2, #64	; 0x40
 8002f80:	4013      	ands	r3, r2
 8002f82:	d102      	bne.n	8002f8a <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	2200      	movs	r2, #0
 8002f88:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	785b      	ldrb	r3, [r3, #1]
 8002f94:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002f96:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002f98:	68ba      	ldr	r2, [r7, #8]
 8002f9a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002f9c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	78db      	ldrb	r3, [r3, #3]
 8002fa2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	491b      	ldr	r1, [pc, #108]	; (800301c <HAL_RTC_SetTime+0x148>)
 8002fb0:	400a      	ands	r2, r1
 8002fb2:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	699a      	ldr	r2, [r3, #24]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4918      	ldr	r1, [pc, #96]	; (8003020 <HAL_RTC_SetTime+0x14c>)
 8002fc0:	400a      	ands	r2, r1
 8002fc2:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6999      	ldr	r1, [r3, #24]
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	68da      	ldr	r2, [r3, #12]
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002fdc:	2313      	movs	r3, #19
 8002fde:	18fc      	adds	r4, r7, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	f000 f91a 	bl	800321c <RTC_ExitInitMode>
 8002fe8:	0003      	movs	r3, r0
 8002fea:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	22ff      	movs	r2, #255	; 0xff
 8002ff2:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8002ff4:	2313      	movs	r3, #19
 8002ff6:	18fb      	adds	r3, r7, r3
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d103      	bne.n	8003006 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2229      	movs	r2, #41	; 0x29
 8003002:	2101      	movs	r1, #1
 8003004:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2228      	movs	r2, #40	; 0x28
 800300a:	2100      	movs	r1, #0
 800300c:	5499      	strb	r1, [r3, r2]

  return status;
 800300e:	2313      	movs	r3, #19
 8003010:	18fb      	adds	r3, r7, r3
 8003012:	781b      	ldrb	r3, [r3, #0]
}
 8003014:	0018      	movs	r0, r3
 8003016:	46bd      	mov	sp, r7
 8003018:	b006      	add	sp, #24
 800301a:	bdb0      	pop	{r4, r5, r7, pc}
 800301c:	007f7f7f 	.word	0x007f7f7f
 8003020:	fffbffff 	.word	0xfffbffff

08003024 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003024:	b5b0      	push	{r4, r5, r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2228      	movs	r2, #40	; 0x28
 8003034:	5c9b      	ldrb	r3, [r3, r2]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d101      	bne.n	800303e <HAL_RTC_SetDate+0x1a>
 800303a:	2302      	movs	r3, #2
 800303c:	e07e      	b.n	800313c <HAL_RTC_SetDate+0x118>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2228      	movs	r2, #40	; 0x28
 8003042:	2101      	movs	r1, #1
 8003044:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2229      	movs	r2, #41	; 0x29
 800304a:	2102      	movs	r1, #2
 800304c:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10e      	bne.n	8003072 <HAL_RTC_SetDate+0x4e>
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	785b      	ldrb	r3, [r3, #1]
 8003058:	001a      	movs	r2, r3
 800305a:	2310      	movs	r3, #16
 800305c:	4013      	ands	r3, r2
 800305e:	d008      	beq.n	8003072 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	785b      	ldrb	r3, [r3, #1]
 8003064:	2210      	movs	r2, #16
 8003066:	4393      	bics	r3, r2
 8003068:	b2db      	uxtb	r3, r3
 800306a:	330a      	adds	r3, #10
 800306c:	b2da      	uxtb	r2, r3
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d11c      	bne.n	80030b2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	78db      	ldrb	r3, [r3, #3]
 800307c:	0018      	movs	r0, r3
 800307e:	f000 f911 	bl	80032a4 <RTC_ByteToBcd2>
 8003082:	0003      	movs	r3, r0
 8003084:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	785b      	ldrb	r3, [r3, #1]
 800308a:	0018      	movs	r0, r3
 800308c:	f000 f90a 	bl	80032a4 <RTC_ByteToBcd2>
 8003090:	0003      	movs	r3, r0
 8003092:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003094:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	789b      	ldrb	r3, [r3, #2]
 800309a:	0018      	movs	r0, r3
 800309c:	f000 f902 	bl	80032a4 <RTC_ByteToBcd2>
 80030a0:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80030a2:	0022      	movs	r2, r4
 80030a4:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80030ac:	4313      	orrs	r3, r2
 80030ae:	617b      	str	r3, [r7, #20]
 80030b0:	e00e      	b.n	80030d0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	78db      	ldrb	r3, [r3, #3]
 80030b6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	785b      	ldrb	r3, [r3, #1]
 80030bc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80030be:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80030c4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80030cc:	4313      	orrs	r3, r2
 80030ce:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	22ca      	movs	r2, #202	; 0xca
 80030d6:	625a      	str	r2, [r3, #36]	; 0x24
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2253      	movs	r2, #83	; 0x53
 80030de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80030e0:	2513      	movs	r5, #19
 80030e2:	197c      	adds	r4, r7, r5
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	0018      	movs	r0, r3
 80030e8:	f000 f855 	bl	8003196 <RTC_EnterInitMode>
 80030ec:	0003      	movs	r3, r0
 80030ee:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80030f0:	0028      	movs	r0, r5
 80030f2:	183b      	adds	r3, r7, r0
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d10c      	bne.n	8003114 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	4910      	ldr	r1, [pc, #64]	; (8003144 <HAL_RTC_SetDate+0x120>)
 8003102:	400a      	ands	r2, r1
 8003104:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003106:	183c      	adds	r4, r7, r0
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	0018      	movs	r0, r3
 800310c:	f000 f886 	bl	800321c <RTC_ExitInitMode>
 8003110:	0003      	movs	r3, r0
 8003112:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	22ff      	movs	r2, #255	; 0xff
 800311a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800311c:	2313      	movs	r3, #19
 800311e:	18fb      	adds	r3, r7, r3
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d103      	bne.n	800312e <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2229      	movs	r2, #41	; 0x29
 800312a:	2101      	movs	r1, #1
 800312c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2228      	movs	r2, #40	; 0x28
 8003132:	2100      	movs	r1, #0
 8003134:	5499      	strb	r1, [r3, r2]

  return status;
 8003136:	2313      	movs	r3, #19
 8003138:	18fb      	adds	r3, r7, r3
 800313a:	781b      	ldrb	r3, [r3, #0]
}
 800313c:	0018      	movs	r0, r3
 800313e:	46bd      	mov	sp, r7
 8003140:	b006      	add	sp, #24
 8003142:	bdb0      	pop	{r4, r5, r7, pc}
 8003144:	00ffff3f 	.word	0x00ffff3f

08003148 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68da      	ldr	r2, [r3, #12]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	21a0      	movs	r1, #160	; 0xa0
 800315c:	438a      	bics	r2, r1
 800315e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003160:	f7fe f9b8 	bl	80014d4 <HAL_GetTick>
 8003164:	0003      	movs	r3, r0
 8003166:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8003168:	e00a      	b.n	8003180 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800316a:	f7fe f9b3 	bl	80014d4 <HAL_GetTick>
 800316e:	0002      	movs	r2, r0
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	1ad2      	subs	r2, r2, r3
 8003174:	23fa      	movs	r3, #250	; 0xfa
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	429a      	cmp	r2, r3
 800317a:	d901      	bls.n	8003180 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e006      	b.n	800318e <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	2220      	movs	r2, #32
 8003188:	4013      	ands	r3, r2
 800318a:	d0ee      	beq.n	800316a <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	0018      	movs	r0, r3
 8003190:	46bd      	mov	sp, r7
 8003192:	b004      	add	sp, #16
 8003194:	bd80      	pop	{r7, pc}

08003196 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b084      	sub	sp, #16
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 800319e:	230f      	movs	r3, #15
 80031a0:	18fb      	adds	r3, r7, r3
 80031a2:	2200      	movs	r2, #0
 80031a4:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	2240      	movs	r2, #64	; 0x40
 80031ae:	4013      	ands	r3, r2
 80031b0:	d12c      	bne.n	800320c <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68da      	ldr	r2, [r3, #12]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2180      	movs	r1, #128	; 0x80
 80031be:	430a      	orrs	r2, r1
 80031c0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80031c2:	f7fe f987 	bl	80014d4 <HAL_GetTick>
 80031c6:	0003      	movs	r3, r0
 80031c8:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80031ca:	e014      	b.n	80031f6 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80031cc:	f7fe f982 	bl	80014d4 <HAL_GetTick>
 80031d0:	0002      	movs	r2, r0
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	1ad2      	subs	r2, r2, r3
 80031d6:	200f      	movs	r0, #15
 80031d8:	183b      	adds	r3, r7, r0
 80031da:	1839      	adds	r1, r7, r0
 80031dc:	7809      	ldrb	r1, [r1, #0]
 80031de:	7019      	strb	r1, [r3, #0]
 80031e0:	23fa      	movs	r3, #250	; 0xfa
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d906      	bls.n	80031f6 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 80031e8:	183b      	adds	r3, r7, r0
 80031ea:	2203      	movs	r2, #3
 80031ec:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2229      	movs	r2, #41	; 0x29
 80031f2:	2103      	movs	r1, #3
 80031f4:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	2240      	movs	r2, #64	; 0x40
 80031fe:	4013      	ands	r3, r2
 8003200:	d104      	bne.n	800320c <RTC_EnterInitMode+0x76>
 8003202:	230f      	movs	r3, #15
 8003204:	18fb      	adds	r3, r7, r3
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	2b03      	cmp	r3, #3
 800320a:	d1df      	bne.n	80031cc <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800320c:	230f      	movs	r3, #15
 800320e:	18fb      	adds	r3, r7, r3
 8003210:	781b      	ldrb	r3, [r3, #0]
}
 8003212:	0018      	movs	r0, r3
 8003214:	46bd      	mov	sp, r7
 8003216:	b004      	add	sp, #16
 8003218:	bd80      	pop	{r7, pc}
	...

0800321c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800321c:	b590      	push	{r4, r7, lr}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003224:	240f      	movs	r4, #15
 8003226:	193b      	adds	r3, r7, r4
 8003228:	2200      	movs	r2, #0
 800322a:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800322c:	4b1c      	ldr	r3, [pc, #112]	; (80032a0 <RTC_ExitInitMode+0x84>)
 800322e:	68da      	ldr	r2, [r3, #12]
 8003230:	4b1b      	ldr	r3, [pc, #108]	; (80032a0 <RTC_ExitInitMode+0x84>)
 8003232:	2180      	movs	r1, #128	; 0x80
 8003234:	438a      	bics	r2, r1
 8003236:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003238:	4b19      	ldr	r3, [pc, #100]	; (80032a0 <RTC_ExitInitMode+0x84>)
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	2220      	movs	r2, #32
 800323e:	4013      	ands	r3, r2
 8003240:	d10d      	bne.n	800325e <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	0018      	movs	r0, r3
 8003246:	f7ff ff7f 	bl	8003148 <HAL_RTC_WaitForSynchro>
 800324a:	1e03      	subs	r3, r0, #0
 800324c:	d021      	beq.n	8003292 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2229      	movs	r2, #41	; 0x29
 8003252:	2103      	movs	r1, #3
 8003254:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8003256:	193b      	adds	r3, r7, r4
 8003258:	2203      	movs	r2, #3
 800325a:	701a      	strb	r2, [r3, #0]
 800325c:	e019      	b.n	8003292 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800325e:	4b10      	ldr	r3, [pc, #64]	; (80032a0 <RTC_ExitInitMode+0x84>)
 8003260:	699a      	ldr	r2, [r3, #24]
 8003262:	4b0f      	ldr	r3, [pc, #60]	; (80032a0 <RTC_ExitInitMode+0x84>)
 8003264:	2120      	movs	r1, #32
 8003266:	438a      	bics	r2, r1
 8003268:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	0018      	movs	r0, r3
 800326e:	f7ff ff6b 	bl	8003148 <HAL_RTC_WaitForSynchro>
 8003272:	1e03      	subs	r3, r0, #0
 8003274:	d007      	beq.n	8003286 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2229      	movs	r2, #41	; 0x29
 800327a:	2103      	movs	r1, #3
 800327c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800327e:	230f      	movs	r3, #15
 8003280:	18fb      	adds	r3, r7, r3
 8003282:	2203      	movs	r2, #3
 8003284:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003286:	4b06      	ldr	r3, [pc, #24]	; (80032a0 <RTC_ExitInitMode+0x84>)
 8003288:	699a      	ldr	r2, [r3, #24]
 800328a:	4b05      	ldr	r3, [pc, #20]	; (80032a0 <RTC_ExitInitMode+0x84>)
 800328c:	2120      	movs	r1, #32
 800328e:	430a      	orrs	r2, r1
 8003290:	619a      	str	r2, [r3, #24]
  }

  return status;
 8003292:	230f      	movs	r3, #15
 8003294:	18fb      	adds	r3, r7, r3
 8003296:	781b      	ldrb	r3, [r3, #0]
}
 8003298:	0018      	movs	r0, r3
 800329a:	46bd      	mov	sp, r7
 800329c:	b005      	add	sp, #20
 800329e:	bd90      	pop	{r4, r7, pc}
 80032a0:	40002800 	.word	0x40002800

080032a4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	0002      	movs	r2, r0
 80032ac:	1dfb      	adds	r3, r7, #7
 80032ae:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80032b0:	2300      	movs	r3, #0
 80032b2:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80032b4:	230b      	movs	r3, #11
 80032b6:	18fb      	adds	r3, r7, r3
 80032b8:	1dfa      	adds	r2, r7, #7
 80032ba:	7812      	ldrb	r2, [r2, #0]
 80032bc:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 80032be:	e008      	b.n	80032d2 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	3301      	adds	r3, #1
 80032c4:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80032c6:	220b      	movs	r2, #11
 80032c8:	18bb      	adds	r3, r7, r2
 80032ca:	18ba      	adds	r2, r7, r2
 80032cc:	7812      	ldrb	r2, [r2, #0]
 80032ce:	3a0a      	subs	r2, #10
 80032d0:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 80032d2:	210b      	movs	r1, #11
 80032d4:	187b      	adds	r3, r7, r1
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	2b09      	cmp	r3, #9
 80032da:	d8f1      	bhi.n	80032c0 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	011b      	lsls	r3, r3, #4
 80032e2:	b2da      	uxtb	r2, r3
 80032e4:	187b      	adds	r3, r7, r1
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	b2db      	uxtb	r3, r3
}
 80032ec:	0018      	movs	r0, r3
 80032ee:	46bd      	mov	sp, r7
 80032f0:	b004      	add	sp, #16
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2228      	movs	r2, #40	; 0x28
 8003304:	5c9b      	ldrb	r3, [r3, r2]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d101      	bne.n	800330e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800330a:	2302      	movs	r3, #2
 800330c:	e082      	b.n	8003414 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2228      	movs	r2, #40	; 0x28
 8003312:	2101      	movs	r1, #1
 8003314:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2229      	movs	r2, #41	; 0x29
 800331a:	2102      	movs	r1, #2
 800331c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	22ca      	movs	r2, #202	; 0xca
 8003324:	625a      	str	r2, [r3, #36]	; 0x24
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2253      	movs	r2, #83	; 0x53
 800332c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	699a      	ldr	r2, [r3, #24]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4938      	ldr	r1, [pc, #224]	; (800341c <HAL_RTCEx_SetWakeUpTimer_IT+0x128>)
 800333a:	400a      	ands	r2, r1
 800333c:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2104      	movs	r1, #4
 800334a:	430a      	orrs	r2, r1
 800334c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800334e:	4b34      	ldr	r3, [pc, #208]	; (8003420 <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>)
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	2240      	movs	r2, #64	; 0x40
 8003354:	4013      	ands	r3, r2
 8003356:	d121      	bne.n	800339c <HAL_RTCEx_SetWakeUpTimer_IT+0xa8>
  {
    tickstart = HAL_GetTick();
 8003358:	f7fe f8bc 	bl	80014d4 <HAL_GetTick>
 800335c:	0003      	movs	r3, r0
 800335e:	617b      	str	r3, [r7, #20]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003360:	e016      	b.n	8003390 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003362:	f7fe f8b7 	bl	80014d4 <HAL_GetTick>
 8003366:	0002      	movs	r2, r0
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	1ad2      	subs	r2, r2, r3
 800336c:	23fa      	movs	r3, #250	; 0xfa
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	429a      	cmp	r2, r3
 8003372:	d90d      	bls.n	8003390 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	22ff      	movs	r2, #255	; 0xff
 800337a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2229      	movs	r2, #41	; 0x29
 8003380:	2103      	movs	r1, #3
 8003382:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2228      	movs	r2, #40	; 0x28
 8003388:	2100      	movs	r1, #0
 800338a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e041      	b.n	8003414 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	2204      	movs	r2, #4
 8003398:	4013      	ands	r3, r2
 800339a:	d0e2      	beq.n	8003362 <HAL_RTCEx_SetWakeUpTimer_IT+0x6e>
      }
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68ba      	ldr	r2, [r7, #8]
 80033a2:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	699a      	ldr	r2, [r3, #24]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2107      	movs	r1, #7
 80033b0:	438a      	bics	r2, r1
 80033b2:	619a      	str	r2, [r3, #24]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6999      	ldr	r1, [r3, #24]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	619a      	str	r2, [r3, #24]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80033c4:	4a17      	ldr	r2, [pc, #92]	; (8003424 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 80033c6:	2380      	movs	r3, #128	; 0x80
 80033c8:	58d3      	ldr	r3, [r2, r3]
 80033ca:	4916      	ldr	r1, [pc, #88]	; (8003424 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 80033cc:	2280      	movs	r2, #128	; 0x80
 80033ce:	0312      	lsls	r2, r2, #12
 80033d0:	4313      	orrs	r3, r2
 80033d2:	2280      	movs	r2, #128	; 0x80
 80033d4:	508b      	str	r3, [r1, r2]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	699a      	ldr	r2, [r3, #24]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2180      	movs	r1, #128	; 0x80
 80033e2:	01c9      	lsls	r1, r1, #7
 80033e4:	430a      	orrs	r2, r1
 80033e6:	619a      	str	r2, [r3, #24]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	699a      	ldr	r2, [r3, #24]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2180      	movs	r1, #128	; 0x80
 80033f4:	00c9      	lsls	r1, r1, #3
 80033f6:	430a      	orrs	r2, r1
 80033f8:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	22ff      	movs	r2, #255	; 0xff
 8003400:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2229      	movs	r2, #41	; 0x29
 8003406:	2101      	movs	r1, #1
 8003408:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2228      	movs	r2, #40	; 0x28
 800340e:	2100      	movs	r1, #0
 8003410:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	0018      	movs	r0, r3
 8003416:	46bd      	mov	sp, r7
 8003418:	b006      	add	sp, #24
 800341a:	bd80      	pop	{r7, pc}
 800341c:	fffffbff 	.word	0xfffffbff
 8003420:	40002800 	.word	0x40002800
 8003424:	40021800 	.word	0x40021800

08003428 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003436:	2204      	movs	r2, #4
 8003438:	4013      	ands	r3, r2
 800343a:	d00b      	beq.n	8003454 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2104      	movs	r1, #4
 8003448:	430a      	orrs	r2, r1
 800344a:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	0018      	movs	r0, r3
 8003450:	f000 f808 	bl	8003464 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2229      	movs	r2, #41	; 0x29
 8003458:	2101      	movs	r1, #1
 800345a:	5499      	strb	r1, [r3, r2]
}
 800345c:	46c0      	nop			; (mov r8, r8)
 800345e:	46bd      	mov	sp, r7
 8003460:	b002      	add	sp, #8
 8003462:	bd80      	pop	{r7, pc}

08003464 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 800346c:	46c0      	nop			; (mov r8, r8)
 800346e:	46bd      	mov	sp, r7
 8003470:	b002      	add	sp, #8
 8003472:	bd80      	pop	{r7, pc}

08003474 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e04a      	b.n	800351c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	223d      	movs	r2, #61	; 0x3d
 800348a:	5c9b      	ldrb	r3, [r3, r2]
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d107      	bne.n	80034a2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	223c      	movs	r2, #60	; 0x3c
 8003496:	2100      	movs	r1, #0
 8003498:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	0018      	movs	r0, r3
 800349e:	f7fd fda7 	bl	8000ff0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	223d      	movs	r2, #61	; 0x3d
 80034a6:	2102      	movs	r1, #2
 80034a8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	3304      	adds	r3, #4
 80034b2:	0019      	movs	r1, r3
 80034b4:	0010      	movs	r0, r2
 80034b6:	f000 fa09 	bl	80038cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2248      	movs	r2, #72	; 0x48
 80034be:	2101      	movs	r1, #1
 80034c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	223e      	movs	r2, #62	; 0x3e
 80034c6:	2101      	movs	r1, #1
 80034c8:	5499      	strb	r1, [r3, r2]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	223f      	movs	r2, #63	; 0x3f
 80034ce:	2101      	movs	r1, #1
 80034d0:	5499      	strb	r1, [r3, r2]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2240      	movs	r2, #64	; 0x40
 80034d6:	2101      	movs	r1, #1
 80034d8:	5499      	strb	r1, [r3, r2]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2241      	movs	r2, #65	; 0x41
 80034de:	2101      	movs	r1, #1
 80034e0:	5499      	strb	r1, [r3, r2]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2242      	movs	r2, #66	; 0x42
 80034e6:	2101      	movs	r1, #1
 80034e8:	5499      	strb	r1, [r3, r2]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2243      	movs	r2, #67	; 0x43
 80034ee:	2101      	movs	r1, #1
 80034f0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2244      	movs	r2, #68	; 0x44
 80034f6:	2101      	movs	r1, #1
 80034f8:	5499      	strb	r1, [r3, r2]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2245      	movs	r2, #69	; 0x45
 80034fe:	2101      	movs	r1, #1
 8003500:	5499      	strb	r1, [r3, r2]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2246      	movs	r2, #70	; 0x46
 8003506:	2101      	movs	r1, #1
 8003508:	5499      	strb	r1, [r3, r2]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2247      	movs	r2, #71	; 0x47
 800350e:	2101      	movs	r1, #1
 8003510:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	223d      	movs	r2, #61	; 0x3d
 8003516:	2101      	movs	r1, #1
 8003518:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	0018      	movs	r0, r3
 800351e:	46bd      	mov	sp, r7
 8003520:	b002      	add	sp, #8
 8003522:	bd80      	pop	{r7, pc}

08003524 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	223d      	movs	r2, #61	; 0x3d
 8003530:	5c9b      	ldrb	r3, [r3, r2]
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b01      	cmp	r3, #1
 8003536:	d001      	beq.n	800353c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e03d      	b.n	80035b8 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	223d      	movs	r2, #61	; 0x3d
 8003540:	2102      	movs	r1, #2
 8003542:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68da      	ldr	r2, [r3, #12]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2101      	movs	r1, #1
 8003550:	430a      	orrs	r2, r1
 8003552:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a19      	ldr	r2, [pc, #100]	; (80035c0 <HAL_TIM_Base_Start_IT+0x9c>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d00a      	beq.n	8003574 <HAL_TIM_Base_Start_IT+0x50>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	2380      	movs	r3, #128	; 0x80
 8003564:	05db      	lsls	r3, r3, #23
 8003566:	429a      	cmp	r2, r3
 8003568:	d004      	beq.n	8003574 <HAL_TIM_Base_Start_IT+0x50>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a15      	ldr	r2, [pc, #84]	; (80035c4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d116      	bne.n	80035a2 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	4a13      	ldr	r2, [pc, #76]	; (80035c8 <HAL_TIM_Base_Start_IT+0xa4>)
 800357c:	4013      	ands	r3, r2
 800357e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2b06      	cmp	r3, #6
 8003584:	d016      	beq.n	80035b4 <HAL_TIM_Base_Start_IT+0x90>
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	2380      	movs	r3, #128	; 0x80
 800358a:	025b      	lsls	r3, r3, #9
 800358c:	429a      	cmp	r2, r3
 800358e:	d011      	beq.n	80035b4 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2101      	movs	r1, #1
 800359c:	430a      	orrs	r2, r1
 800359e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035a0:	e008      	b.n	80035b4 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2101      	movs	r1, #1
 80035ae:	430a      	orrs	r2, r1
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	e000      	b.n	80035b6 <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035b4:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	0018      	movs	r0, r3
 80035ba:	46bd      	mov	sp, r7
 80035bc:	b004      	add	sp, #16
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	40012c00 	.word	0x40012c00
 80035c4:	40000400 	.word	0x40000400
 80035c8:	00010007 	.word	0x00010007

080035cc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68da      	ldr	r2, [r3, #12]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2101      	movs	r1, #1
 80035e0:	438a      	bics	r2, r1
 80035e2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	4a0d      	ldr	r2, [pc, #52]	; (8003620 <HAL_TIM_Base_Stop_IT+0x54>)
 80035ec:	4013      	ands	r3, r2
 80035ee:	d10d      	bne.n	800360c <HAL_TIM_Base_Stop_IT+0x40>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	4a0b      	ldr	r2, [pc, #44]	; (8003624 <HAL_TIM_Base_Stop_IT+0x58>)
 80035f8:	4013      	ands	r3, r2
 80035fa:	d107      	bne.n	800360c <HAL_TIM_Base_Stop_IT+0x40>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2101      	movs	r1, #1
 8003608:	438a      	bics	r2, r1
 800360a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	223d      	movs	r2, #61	; 0x3d
 8003610:	2101      	movs	r1, #1
 8003612:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	0018      	movs	r0, r3
 8003618:	46bd      	mov	sp, r7
 800361a:	b002      	add	sp, #8
 800361c:	bd80      	pop	{r7, pc}
 800361e:	46c0      	nop			; (mov r8, r8)
 8003620:	00001111 	.word	0x00001111
 8003624:	00000444 	.word	0x00000444

08003628 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	2202      	movs	r2, #2
 8003638:	4013      	ands	r3, r2
 800363a:	2b02      	cmp	r3, #2
 800363c:	d124      	bne.n	8003688 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	2202      	movs	r2, #2
 8003646:	4013      	ands	r3, r2
 8003648:	2b02      	cmp	r3, #2
 800364a:	d11d      	bne.n	8003688 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2203      	movs	r2, #3
 8003652:	4252      	negs	r2, r2
 8003654:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	2203      	movs	r2, #3
 8003664:	4013      	ands	r3, r2
 8003666:	d004      	beq.n	8003672 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	0018      	movs	r0, r3
 800366c:	f000 f916 	bl	800389c <HAL_TIM_IC_CaptureCallback>
 8003670:	e007      	b.n	8003682 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	0018      	movs	r0, r3
 8003676:	f000 f909 	bl	800388c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	0018      	movs	r0, r3
 800367e:	f000 f915 	bl	80038ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	2204      	movs	r2, #4
 8003690:	4013      	ands	r3, r2
 8003692:	2b04      	cmp	r3, #4
 8003694:	d125      	bne.n	80036e2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	2204      	movs	r2, #4
 800369e:	4013      	ands	r3, r2
 80036a0:	2b04      	cmp	r3, #4
 80036a2:	d11e      	bne.n	80036e2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2205      	movs	r2, #5
 80036aa:	4252      	negs	r2, r2
 80036ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2202      	movs	r2, #2
 80036b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	699a      	ldr	r2, [r3, #24]
 80036ba:	23c0      	movs	r3, #192	; 0xc0
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4013      	ands	r3, r2
 80036c0:	d004      	beq.n	80036cc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	0018      	movs	r0, r3
 80036c6:	f000 f8e9 	bl	800389c <HAL_TIM_IC_CaptureCallback>
 80036ca:	e007      	b.n	80036dc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	0018      	movs	r0, r3
 80036d0:	f000 f8dc 	bl	800388c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	0018      	movs	r0, r3
 80036d8:	f000 f8e8 	bl	80038ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	2208      	movs	r2, #8
 80036ea:	4013      	ands	r3, r2
 80036ec:	2b08      	cmp	r3, #8
 80036ee:	d124      	bne.n	800373a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	2208      	movs	r2, #8
 80036f8:	4013      	ands	r3, r2
 80036fa:	2b08      	cmp	r3, #8
 80036fc:	d11d      	bne.n	800373a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2209      	movs	r2, #9
 8003704:	4252      	negs	r2, r2
 8003706:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2204      	movs	r2, #4
 800370c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	69db      	ldr	r3, [r3, #28]
 8003714:	2203      	movs	r2, #3
 8003716:	4013      	ands	r3, r2
 8003718:	d004      	beq.n	8003724 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	0018      	movs	r0, r3
 800371e:	f000 f8bd 	bl	800389c <HAL_TIM_IC_CaptureCallback>
 8003722:	e007      	b.n	8003734 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	0018      	movs	r0, r3
 8003728:	f000 f8b0 	bl	800388c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	0018      	movs	r0, r3
 8003730:	f000 f8bc 	bl	80038ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	2210      	movs	r2, #16
 8003742:	4013      	ands	r3, r2
 8003744:	2b10      	cmp	r3, #16
 8003746:	d125      	bne.n	8003794 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	2210      	movs	r2, #16
 8003750:	4013      	ands	r3, r2
 8003752:	2b10      	cmp	r3, #16
 8003754:	d11e      	bne.n	8003794 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2211      	movs	r2, #17
 800375c:	4252      	negs	r2, r2
 800375e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2208      	movs	r2, #8
 8003764:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	69da      	ldr	r2, [r3, #28]
 800376c:	23c0      	movs	r3, #192	; 0xc0
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4013      	ands	r3, r2
 8003772:	d004      	beq.n	800377e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	0018      	movs	r0, r3
 8003778:	f000 f890 	bl	800389c <HAL_TIM_IC_CaptureCallback>
 800377c:	e007      	b.n	800378e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	0018      	movs	r0, r3
 8003782:	f000 f883 	bl	800388c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	0018      	movs	r0, r3
 800378a:	f000 f88f 	bl	80038ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	2201      	movs	r2, #1
 800379c:	4013      	ands	r3, r2
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d10f      	bne.n	80037c2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	2201      	movs	r2, #1
 80037aa:	4013      	ands	r3, r2
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d108      	bne.n	80037c2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2202      	movs	r2, #2
 80037b6:	4252      	negs	r2, r2
 80037b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	0018      	movs	r0, r3
 80037be:	f7fd fb8d 	bl	8000edc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	2280      	movs	r2, #128	; 0x80
 80037ca:	4013      	ands	r3, r2
 80037cc:	2b80      	cmp	r3, #128	; 0x80
 80037ce:	d10f      	bne.n	80037f0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	2280      	movs	r2, #128	; 0x80
 80037d8:	4013      	ands	r3, r2
 80037da:	2b80      	cmp	r3, #128	; 0x80
 80037dc:	d108      	bne.n	80037f0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2281      	movs	r2, #129	; 0x81
 80037e4:	4252      	negs	r2, r2
 80037e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	0018      	movs	r0, r3
 80037ec:	f000 f8ec 	bl	80039c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	691a      	ldr	r2, [r3, #16]
 80037f6:	2380      	movs	r3, #128	; 0x80
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	401a      	ands	r2, r3
 80037fc:	2380      	movs	r3, #128	; 0x80
 80037fe:	005b      	lsls	r3, r3, #1
 8003800:	429a      	cmp	r2, r3
 8003802:	d10e      	bne.n	8003822 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	2280      	movs	r2, #128	; 0x80
 800380c:	4013      	ands	r3, r2
 800380e:	2b80      	cmp	r3, #128	; 0x80
 8003810:	d107      	bne.n	8003822 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a1c      	ldr	r2, [pc, #112]	; (8003888 <HAL_TIM_IRQHandler+0x260>)
 8003818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	0018      	movs	r0, r3
 800381e:	f000 f8db 	bl	80039d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	2240      	movs	r2, #64	; 0x40
 800382a:	4013      	ands	r3, r2
 800382c:	2b40      	cmp	r3, #64	; 0x40
 800382e:	d10f      	bne.n	8003850 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	2240      	movs	r2, #64	; 0x40
 8003838:	4013      	ands	r3, r2
 800383a:	2b40      	cmp	r3, #64	; 0x40
 800383c:	d108      	bne.n	8003850 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2241      	movs	r2, #65	; 0x41
 8003844:	4252      	negs	r2, r2
 8003846:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	0018      	movs	r0, r3
 800384c:	f000 f836 	bl	80038bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	2220      	movs	r2, #32
 8003858:	4013      	ands	r3, r2
 800385a:	2b20      	cmp	r3, #32
 800385c:	d10f      	bne.n	800387e <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	2220      	movs	r2, #32
 8003866:	4013      	ands	r3, r2
 8003868:	2b20      	cmp	r3, #32
 800386a:	d108      	bne.n	800387e <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2221      	movs	r2, #33	; 0x21
 8003872:	4252      	negs	r2, r2
 8003874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	0018      	movs	r0, r3
 800387a:	f000 f89d 	bl	80039b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800387e:	46c0      	nop			; (mov r8, r8)
 8003880:	46bd      	mov	sp, r7
 8003882:	b002      	add	sp, #8
 8003884:	bd80      	pop	{r7, pc}
 8003886:	46c0      	nop			; (mov r8, r8)
 8003888:	fffffeff 	.word	0xfffffeff

0800388c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003894:	46c0      	nop			; (mov r8, r8)
 8003896:	46bd      	mov	sp, r7
 8003898:	b002      	add	sp, #8
 800389a:	bd80      	pop	{r7, pc}

0800389c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038a4:	46c0      	nop			; (mov r8, r8)
 80038a6:	46bd      	mov	sp, r7
 80038a8:	b002      	add	sp, #8
 80038aa:	bd80      	pop	{r7, pc}

080038ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038b4:	46c0      	nop			; (mov r8, r8)
 80038b6:	46bd      	mov	sp, r7
 80038b8:	b002      	add	sp, #8
 80038ba:	bd80      	pop	{r7, pc}

080038bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038c4:	46c0      	nop			; (mov r8, r8)
 80038c6:	46bd      	mov	sp, r7
 80038c8:	b002      	add	sp, #8
 80038ca:	bd80      	pop	{r7, pc}

080038cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a30      	ldr	r2, [pc, #192]	; (80039a0 <TIM_Base_SetConfig+0xd4>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d008      	beq.n	80038f6 <TIM_Base_SetConfig+0x2a>
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	2380      	movs	r3, #128	; 0x80
 80038e8:	05db      	lsls	r3, r3, #23
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d003      	beq.n	80038f6 <TIM_Base_SetConfig+0x2a>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a2c      	ldr	r2, [pc, #176]	; (80039a4 <TIM_Base_SetConfig+0xd8>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d108      	bne.n	8003908 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2270      	movs	r2, #112	; 0x70
 80038fa:	4393      	bics	r3, r2
 80038fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	4313      	orrs	r3, r2
 8003906:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a25      	ldr	r2, [pc, #148]	; (80039a0 <TIM_Base_SetConfig+0xd4>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d014      	beq.n	800393a <TIM_Base_SetConfig+0x6e>
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	2380      	movs	r3, #128	; 0x80
 8003914:	05db      	lsls	r3, r3, #23
 8003916:	429a      	cmp	r2, r3
 8003918:	d00f      	beq.n	800393a <TIM_Base_SetConfig+0x6e>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a21      	ldr	r2, [pc, #132]	; (80039a4 <TIM_Base_SetConfig+0xd8>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d00b      	beq.n	800393a <TIM_Base_SetConfig+0x6e>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a20      	ldr	r2, [pc, #128]	; (80039a8 <TIM_Base_SetConfig+0xdc>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d007      	beq.n	800393a <TIM_Base_SetConfig+0x6e>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a1f      	ldr	r2, [pc, #124]	; (80039ac <TIM_Base_SetConfig+0xe0>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d003      	beq.n	800393a <TIM_Base_SetConfig+0x6e>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a1e      	ldr	r2, [pc, #120]	; (80039b0 <TIM_Base_SetConfig+0xe4>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d108      	bne.n	800394c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	4a1d      	ldr	r2, [pc, #116]	; (80039b4 <TIM_Base_SetConfig+0xe8>)
 800393e:	4013      	ands	r3, r2
 8003940:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	4313      	orrs	r3, r2
 800394a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2280      	movs	r2, #128	; 0x80
 8003950:	4393      	bics	r3, r2
 8003952:	001a      	movs	r2, r3
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	4313      	orrs	r3, r2
 800395a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	689a      	ldr	r2, [r3, #8]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a0a      	ldr	r2, [pc, #40]	; (80039a0 <TIM_Base_SetConfig+0xd4>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d007      	beq.n	800398a <TIM_Base_SetConfig+0xbe>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a0b      	ldr	r2, [pc, #44]	; (80039ac <TIM_Base_SetConfig+0xe0>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d003      	beq.n	800398a <TIM_Base_SetConfig+0xbe>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a0a      	ldr	r2, [pc, #40]	; (80039b0 <TIM_Base_SetConfig+0xe4>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d103      	bne.n	8003992 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	691a      	ldr	r2, [r3, #16]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	615a      	str	r2, [r3, #20]
}
 8003998:	46c0      	nop			; (mov r8, r8)
 800399a:	46bd      	mov	sp, r7
 800399c:	b004      	add	sp, #16
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	40012c00 	.word	0x40012c00
 80039a4:	40000400 	.word	0x40000400
 80039a8:	40002000 	.word	0x40002000
 80039ac:	40014400 	.word	0x40014400
 80039b0:	40014800 	.word	0x40014800
 80039b4:	fffffcff 	.word	0xfffffcff

080039b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039c0:	46c0      	nop			; (mov r8, r8)
 80039c2:	46bd      	mov	sp, r7
 80039c4:	b002      	add	sp, #8
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039d0:	46c0      	nop			; (mov r8, r8)
 80039d2:	46bd      	mov	sp, r7
 80039d4:	b002      	add	sp, #8
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80039e0:	46c0      	nop			; (mov r8, r8)
 80039e2:	46bd      	mov	sp, r7
 80039e4:	b002      	add	sp, #8
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e046      	b.n	8003a88 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2288      	movs	r2, #136	; 0x88
 80039fe:	589b      	ldr	r3, [r3, r2]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d107      	bne.n	8003a14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2284      	movs	r2, #132	; 0x84
 8003a08:	2100      	movs	r1, #0
 8003a0a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	0018      	movs	r0, r3
 8003a10:	f7fd fb16 	bl	8001040 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2288      	movs	r2, #136	; 0x88
 8003a18:	2124      	movs	r1, #36	; 0x24
 8003a1a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2101      	movs	r1, #1
 8003a28:	438a      	bics	r2, r1
 8003a2a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	0018      	movs	r0, r3
 8003a30:	f000 fc12 	bl	8004258 <UART_SetConfig>
 8003a34:	0003      	movs	r3, r0
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d101      	bne.n	8003a3e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e024      	b.n	8003a88 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	0018      	movs	r0, r3
 8003a4a:	f000 fe7d 	bl	8004748 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	490d      	ldr	r1, [pc, #52]	; (8003a90 <HAL_UART_Init+0xa8>)
 8003a5a:	400a      	ands	r2, r1
 8003a5c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689a      	ldr	r2, [r3, #8]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	212a      	movs	r1, #42	; 0x2a
 8003a6a:	438a      	bics	r2, r1
 8003a6c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2101      	movs	r1, #1
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	0018      	movs	r0, r3
 8003a82:	f000 ff15 	bl	80048b0 <UART_CheckIdleState>
 8003a86:	0003      	movs	r3, r0
}
 8003a88:	0018      	movs	r0, r3
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	b002      	add	sp, #8
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	ffffb7ff 	.word	0xffffb7ff

08003a94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b08a      	sub	sp, #40	; 0x28
 8003a98:	af02      	add	r7, sp, #8
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	603b      	str	r3, [r7, #0]
 8003aa0:	1dbb      	adds	r3, r7, #6
 8003aa2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2288      	movs	r2, #136	; 0x88
 8003aa8:	589b      	ldr	r3, [r3, r2]
 8003aaa:	2b20      	cmp	r3, #32
 8003aac:	d000      	beq.n	8003ab0 <HAL_UART_Transmit+0x1c>
 8003aae:	e088      	b.n	8003bc2 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d003      	beq.n	8003abe <HAL_UART_Transmit+0x2a>
 8003ab6:	1dbb      	adds	r3, r7, #6
 8003ab8:	881b      	ldrh	r3, [r3, #0]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e080      	b.n	8003bc4 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	689a      	ldr	r2, [r3, #8]
 8003ac6:	2380      	movs	r3, #128	; 0x80
 8003ac8:	015b      	lsls	r3, r3, #5
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d109      	bne.n	8003ae2 <HAL_UART_Transmit+0x4e>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d105      	bne.n	8003ae2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	4013      	ands	r3, r2
 8003adc:	d001      	beq.n	8003ae2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e070      	b.n	8003bc4 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2290      	movs	r2, #144	; 0x90
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2288      	movs	r2, #136	; 0x88
 8003aee:	2121      	movs	r1, #33	; 0x21
 8003af0:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003af2:	f7fd fcef 	bl	80014d4 <HAL_GetTick>
 8003af6:	0003      	movs	r3, r0
 8003af8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	1dba      	adds	r2, r7, #6
 8003afe:	2154      	movs	r1, #84	; 0x54
 8003b00:	8812      	ldrh	r2, [r2, #0]
 8003b02:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	1dba      	adds	r2, r7, #6
 8003b08:	2156      	movs	r1, #86	; 0x56
 8003b0a:	8812      	ldrh	r2, [r2, #0]
 8003b0c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	689a      	ldr	r2, [r3, #8]
 8003b12:	2380      	movs	r3, #128	; 0x80
 8003b14:	015b      	lsls	r3, r3, #5
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d108      	bne.n	8003b2c <HAL_UART_Transmit+0x98>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d104      	bne.n	8003b2c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003b22:	2300      	movs	r3, #0
 8003b24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	61bb      	str	r3, [r7, #24]
 8003b2a:	e003      	b.n	8003b34 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b30:	2300      	movs	r3, #0
 8003b32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b34:	e02c      	b.n	8003b90 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	9300      	str	r3, [sp, #0]
 8003b3e:	0013      	movs	r3, r2
 8003b40:	2200      	movs	r2, #0
 8003b42:	2180      	movs	r1, #128	; 0x80
 8003b44:	f000 ff02 	bl	800494c <UART_WaitOnFlagUntilTimeout>
 8003b48:	1e03      	subs	r3, r0, #0
 8003b4a:	d001      	beq.n	8003b50 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e039      	b.n	8003bc4 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10b      	bne.n	8003b6e <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	881b      	ldrh	r3, [r3, #0]
 8003b5a:	001a      	movs	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	05d2      	lsls	r2, r2, #23
 8003b62:	0dd2      	lsrs	r2, r2, #23
 8003b64:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	3302      	adds	r3, #2
 8003b6a:	61bb      	str	r3, [r7, #24]
 8003b6c:	e007      	b.n	8003b7e <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	781a      	ldrb	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2256      	movs	r2, #86	; 0x56
 8003b82:	5a9b      	ldrh	r3, [r3, r2]
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	3b01      	subs	r3, #1
 8003b88:	b299      	uxth	r1, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2256      	movs	r2, #86	; 0x56
 8003b8e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2256      	movs	r2, #86	; 0x56
 8003b94:	5a9b      	ldrh	r3, [r3, r2]
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1cc      	bne.n	8003b36 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	0013      	movs	r3, r2
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	2140      	movs	r1, #64	; 0x40
 8003baa:	f000 fecf 	bl	800494c <UART_WaitOnFlagUntilTimeout>
 8003bae:	1e03      	subs	r3, r0, #0
 8003bb0:	d001      	beq.n	8003bb6 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e006      	b.n	8003bc4 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2288      	movs	r2, #136	; 0x88
 8003bba:	2120      	movs	r1, #32
 8003bbc:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	e000      	b.n	8003bc4 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8003bc2:	2302      	movs	r3, #2
  }
}
 8003bc4:	0018      	movs	r0, r3
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	b008      	add	sp, #32
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bcc:	b5b0      	push	{r4, r5, r7, lr}
 8003bce:	b0aa      	sub	sp, #168	; 0xa8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	22a4      	movs	r2, #164	; 0xa4
 8003bdc:	18b9      	adds	r1, r7, r2
 8003bde:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	20a0      	movs	r0, #160	; 0xa0
 8003be8:	1839      	adds	r1, r7, r0
 8003bea:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	249c      	movs	r4, #156	; 0x9c
 8003bf4:	1939      	adds	r1, r7, r4
 8003bf6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003bf8:	0011      	movs	r1, r2
 8003bfa:	18bb      	adds	r3, r7, r2
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4aa2      	ldr	r2, [pc, #648]	; (8003e88 <HAL_UART_IRQHandler+0x2bc>)
 8003c00:	4013      	ands	r3, r2
 8003c02:	2298      	movs	r2, #152	; 0x98
 8003c04:	18bd      	adds	r5, r7, r2
 8003c06:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8003c08:	18bb      	adds	r3, r7, r2
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d11a      	bne.n	8003c46 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003c10:	187b      	adds	r3, r7, r1
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2220      	movs	r2, #32
 8003c16:	4013      	ands	r3, r2
 8003c18:	d015      	beq.n	8003c46 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003c1a:	183b      	adds	r3, r7, r0
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	4013      	ands	r3, r2
 8003c22:	d105      	bne.n	8003c30 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003c24:	193b      	adds	r3, r7, r4
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	2380      	movs	r3, #128	; 0x80
 8003c2a:	055b      	lsls	r3, r3, #21
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	d00a      	beq.n	8003c46 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d100      	bne.n	8003c3a <HAL_UART_IRQHandler+0x6e>
 8003c38:	e2dc      	b.n	80041f4 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	0010      	movs	r0, r2
 8003c42:	4798      	blx	r3
      }
      return;
 8003c44:	e2d6      	b.n	80041f4 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003c46:	2398      	movs	r3, #152	; 0x98
 8003c48:	18fb      	adds	r3, r7, r3
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d100      	bne.n	8003c52 <HAL_UART_IRQHandler+0x86>
 8003c50:	e122      	b.n	8003e98 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003c52:	239c      	movs	r3, #156	; 0x9c
 8003c54:	18fb      	adds	r3, r7, r3
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a8c      	ldr	r2, [pc, #560]	; (8003e8c <HAL_UART_IRQHandler+0x2c0>)
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	d106      	bne.n	8003c6c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003c5e:	23a0      	movs	r3, #160	; 0xa0
 8003c60:	18fb      	adds	r3, r7, r3
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a8a      	ldr	r2, [pc, #552]	; (8003e90 <HAL_UART_IRQHandler+0x2c4>)
 8003c66:	4013      	ands	r3, r2
 8003c68:	d100      	bne.n	8003c6c <HAL_UART_IRQHandler+0xa0>
 8003c6a:	e115      	b.n	8003e98 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c6c:	23a4      	movs	r3, #164	; 0xa4
 8003c6e:	18fb      	adds	r3, r7, r3
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2201      	movs	r2, #1
 8003c74:	4013      	ands	r3, r2
 8003c76:	d012      	beq.n	8003c9e <HAL_UART_IRQHandler+0xd2>
 8003c78:	23a0      	movs	r3, #160	; 0xa0
 8003c7a:	18fb      	adds	r3, r7, r3
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	2380      	movs	r3, #128	; 0x80
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	4013      	ands	r3, r2
 8003c84:	d00b      	beq.n	8003c9e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2290      	movs	r2, #144	; 0x90
 8003c92:	589b      	ldr	r3, [r3, r2]
 8003c94:	2201      	movs	r2, #1
 8003c96:	431a      	orrs	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2190      	movs	r1, #144	; 0x90
 8003c9c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c9e:	23a4      	movs	r3, #164	; 0xa4
 8003ca0:	18fb      	adds	r3, r7, r3
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2202      	movs	r2, #2
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	d011      	beq.n	8003cce <HAL_UART_IRQHandler+0x102>
 8003caa:	239c      	movs	r3, #156	; 0x9c
 8003cac:	18fb      	adds	r3, r7, r3
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	d00b      	beq.n	8003cce <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2202      	movs	r2, #2
 8003cbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2290      	movs	r2, #144	; 0x90
 8003cc2:	589b      	ldr	r3, [r3, r2]
 8003cc4:	2204      	movs	r2, #4
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2190      	movs	r1, #144	; 0x90
 8003ccc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003cce:	23a4      	movs	r3, #164	; 0xa4
 8003cd0:	18fb      	adds	r3, r7, r3
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2204      	movs	r2, #4
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	d011      	beq.n	8003cfe <HAL_UART_IRQHandler+0x132>
 8003cda:	239c      	movs	r3, #156	; 0x9c
 8003cdc:	18fb      	adds	r3, r7, r3
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	d00b      	beq.n	8003cfe <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2204      	movs	r2, #4
 8003cec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2290      	movs	r2, #144	; 0x90
 8003cf2:	589b      	ldr	r3, [r3, r2]
 8003cf4:	2202      	movs	r2, #2
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2190      	movs	r1, #144	; 0x90
 8003cfc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003cfe:	23a4      	movs	r3, #164	; 0xa4
 8003d00:	18fb      	adds	r3, r7, r3
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2208      	movs	r2, #8
 8003d06:	4013      	ands	r3, r2
 8003d08:	d017      	beq.n	8003d3a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003d0a:	23a0      	movs	r3, #160	; 0xa0
 8003d0c:	18fb      	adds	r3, r7, r3
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2220      	movs	r2, #32
 8003d12:	4013      	ands	r3, r2
 8003d14:	d105      	bne.n	8003d22 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003d16:	239c      	movs	r3, #156	; 0x9c
 8003d18:	18fb      	adds	r3, r7, r3
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a5b      	ldr	r2, [pc, #364]	; (8003e8c <HAL_UART_IRQHandler+0x2c0>)
 8003d1e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003d20:	d00b      	beq.n	8003d3a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2208      	movs	r2, #8
 8003d28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2290      	movs	r2, #144	; 0x90
 8003d2e:	589b      	ldr	r3, [r3, r2]
 8003d30:	2208      	movs	r2, #8
 8003d32:	431a      	orrs	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2190      	movs	r1, #144	; 0x90
 8003d38:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d3a:	23a4      	movs	r3, #164	; 0xa4
 8003d3c:	18fb      	adds	r3, r7, r3
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	2380      	movs	r3, #128	; 0x80
 8003d42:	011b      	lsls	r3, r3, #4
 8003d44:	4013      	ands	r3, r2
 8003d46:	d013      	beq.n	8003d70 <HAL_UART_IRQHandler+0x1a4>
 8003d48:	23a0      	movs	r3, #160	; 0xa0
 8003d4a:	18fb      	adds	r3, r7, r3
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	2380      	movs	r3, #128	; 0x80
 8003d50:	04db      	lsls	r3, r3, #19
 8003d52:	4013      	ands	r3, r2
 8003d54:	d00c      	beq.n	8003d70 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2280      	movs	r2, #128	; 0x80
 8003d5c:	0112      	lsls	r2, r2, #4
 8003d5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2290      	movs	r2, #144	; 0x90
 8003d64:	589b      	ldr	r3, [r3, r2]
 8003d66:	2220      	movs	r2, #32
 8003d68:	431a      	orrs	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2190      	movs	r1, #144	; 0x90
 8003d6e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2290      	movs	r2, #144	; 0x90
 8003d74:	589b      	ldr	r3, [r3, r2]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d100      	bne.n	8003d7c <HAL_UART_IRQHandler+0x1b0>
 8003d7a:	e23d      	b.n	80041f8 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003d7c:	23a4      	movs	r3, #164	; 0xa4
 8003d7e:	18fb      	adds	r3, r7, r3
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2220      	movs	r2, #32
 8003d84:	4013      	ands	r3, r2
 8003d86:	d015      	beq.n	8003db4 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003d88:	23a0      	movs	r3, #160	; 0xa0
 8003d8a:	18fb      	adds	r3, r7, r3
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	4013      	ands	r3, r2
 8003d92:	d106      	bne.n	8003da2 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003d94:	239c      	movs	r3, #156	; 0x9c
 8003d96:	18fb      	adds	r3, r7, r3
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	2380      	movs	r3, #128	; 0x80
 8003d9c:	055b      	lsls	r3, r3, #21
 8003d9e:	4013      	ands	r3, r2
 8003da0:	d008      	beq.n	8003db4 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d004      	beq.n	8003db4 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	0010      	movs	r0, r2
 8003db2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2290      	movs	r2, #144	; 0x90
 8003db8:	589b      	ldr	r3, [r3, r2]
 8003dba:	2194      	movs	r1, #148	; 0x94
 8003dbc:	187a      	adds	r2, r7, r1
 8003dbe:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	2240      	movs	r2, #64	; 0x40
 8003dc8:	4013      	ands	r3, r2
 8003dca:	2b40      	cmp	r3, #64	; 0x40
 8003dcc:	d004      	beq.n	8003dd8 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003dce:	187b      	adds	r3, r7, r1
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2228      	movs	r2, #40	; 0x28
 8003dd4:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003dd6:	d04c      	beq.n	8003e72 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	0018      	movs	r0, r3
 8003ddc:	f000 ff64 	bl	8004ca8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	2240      	movs	r2, #64	; 0x40
 8003de8:	4013      	ands	r3, r2
 8003dea:	2b40      	cmp	r3, #64	; 0x40
 8003dec:	d13c      	bne.n	8003e68 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dee:	f3ef 8310 	mrs	r3, PRIMASK
 8003df2:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003df4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003df6:	2090      	movs	r0, #144	; 0x90
 8003df8:	183a      	adds	r2, r7, r0
 8003dfa:	6013      	str	r3, [r2, #0]
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e02:	f383 8810 	msr	PRIMASK, r3
}
 8003e06:	46c0      	nop			; (mov r8, r8)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	689a      	ldr	r2, [r3, #8]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2140      	movs	r1, #64	; 0x40
 8003e14:	438a      	bics	r2, r1
 8003e16:	609a      	str	r2, [r3, #8]
 8003e18:	183b      	adds	r3, r7, r0
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e20:	f383 8810 	msr	PRIMASK, r3
}
 8003e24:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2280      	movs	r2, #128	; 0x80
 8003e2a:	589b      	ldr	r3, [r3, r2]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d016      	beq.n	8003e5e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2280      	movs	r2, #128	; 0x80
 8003e34:	589b      	ldr	r3, [r3, r2]
 8003e36:	4a17      	ldr	r2, [pc, #92]	; (8003e94 <HAL_UART_IRQHandler+0x2c8>)
 8003e38:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2280      	movs	r2, #128	; 0x80
 8003e3e:	589b      	ldr	r3, [r3, r2]
 8003e40:	0018      	movs	r0, r3
 8003e42:	f7fd fdc5 	bl	80019d0 <HAL_DMA_Abort_IT>
 8003e46:	1e03      	subs	r3, r0, #0
 8003e48:	d01c      	beq.n	8003e84 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2280      	movs	r2, #128	; 0x80
 8003e4e:	589b      	ldr	r3, [r3, r2]
 8003e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	2180      	movs	r1, #128	; 0x80
 8003e56:	5852      	ldr	r2, [r2, r1]
 8003e58:	0010      	movs	r0, r2
 8003e5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e5c:	e012      	b.n	8003e84 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	0018      	movs	r0, r3
 8003e62:	f000 f9f1 	bl	8004248 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e66:	e00d      	b.n	8003e84 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	f000 f9ec 	bl	8004248 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e70:	e008      	b.n	8003e84 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	0018      	movs	r0, r3
 8003e76:	f000 f9e7 	bl	8004248 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2290      	movs	r2, #144	; 0x90
 8003e7e:	2100      	movs	r1, #0
 8003e80:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003e82:	e1b9      	b.n	80041f8 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e84:	46c0      	nop			; (mov r8, r8)
    return;
 8003e86:	e1b7      	b.n	80041f8 <HAL_UART_IRQHandler+0x62c>
 8003e88:	0000080f 	.word	0x0000080f
 8003e8c:	10000001 	.word	0x10000001
 8003e90:	04000120 	.word	0x04000120
 8003e94:	08004f6d 	.word	0x08004f6d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d000      	beq.n	8003ea2 <HAL_UART_IRQHandler+0x2d6>
 8003ea0:	e13e      	b.n	8004120 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003ea2:	23a4      	movs	r3, #164	; 0xa4
 8003ea4:	18fb      	adds	r3, r7, r3
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2210      	movs	r2, #16
 8003eaa:	4013      	ands	r3, r2
 8003eac:	d100      	bne.n	8003eb0 <HAL_UART_IRQHandler+0x2e4>
 8003eae:	e137      	b.n	8004120 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003eb0:	23a0      	movs	r3, #160	; 0xa0
 8003eb2:	18fb      	adds	r3, r7, r3
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2210      	movs	r2, #16
 8003eb8:	4013      	ands	r3, r2
 8003eba:	d100      	bne.n	8003ebe <HAL_UART_IRQHandler+0x2f2>
 8003ebc:	e130      	b.n	8004120 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2210      	movs	r2, #16
 8003ec4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	2240      	movs	r2, #64	; 0x40
 8003ece:	4013      	ands	r3, r2
 8003ed0:	2b40      	cmp	r3, #64	; 0x40
 8003ed2:	d000      	beq.n	8003ed6 <HAL_UART_IRQHandler+0x30a>
 8003ed4:	e0a4      	b.n	8004020 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2280      	movs	r2, #128	; 0x80
 8003eda:	589b      	ldr	r3, [r3, r2]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	217e      	movs	r1, #126	; 0x7e
 8003ee2:	187b      	adds	r3, r7, r1
 8003ee4:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003ee6:	187b      	adds	r3, r7, r1
 8003ee8:	881b      	ldrh	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d100      	bne.n	8003ef0 <HAL_UART_IRQHandler+0x324>
 8003eee:	e185      	b.n	80041fc <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	225c      	movs	r2, #92	; 0x5c
 8003ef4:	5a9b      	ldrh	r3, [r3, r2]
 8003ef6:	187a      	adds	r2, r7, r1
 8003ef8:	8812      	ldrh	r2, [r2, #0]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d300      	bcc.n	8003f00 <HAL_UART_IRQHandler+0x334>
 8003efe:	e17d      	b.n	80041fc <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	187a      	adds	r2, r7, r1
 8003f04:	215e      	movs	r1, #94	; 0x5e
 8003f06:	8812      	ldrh	r2, [r2, #0]
 8003f08:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2280      	movs	r2, #128	; 0x80
 8003f0e:	589b      	ldr	r3, [r3, r2]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2220      	movs	r2, #32
 8003f16:	4013      	ands	r3, r2
 8003f18:	d170      	bne.n	8003ffc <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f1a:	f3ef 8310 	mrs	r3, PRIMASK
 8003f1e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f22:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f24:	2301      	movs	r3, #1
 8003f26:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f2a:	f383 8810 	msr	PRIMASK, r3
}
 8003f2e:	46c0      	nop			; (mov r8, r8)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	49b4      	ldr	r1, [pc, #720]	; (800420c <HAL_UART_IRQHandler+0x640>)
 8003f3c:	400a      	ands	r2, r1
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f42:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f46:	f383 8810 	msr	PRIMASK, r3
}
 8003f4a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f4c:	f3ef 8310 	mrs	r3, PRIMASK
 8003f50:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f54:	677b      	str	r3, [r7, #116]	; 0x74
 8003f56:	2301      	movs	r3, #1
 8003f58:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f5c:	f383 8810 	msr	PRIMASK, r3
}
 8003f60:	46c0      	nop			; (mov r8, r8)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2101      	movs	r1, #1
 8003f6e:	438a      	bics	r2, r1
 8003f70:	609a      	str	r2, [r3, #8]
 8003f72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f74:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f78:	f383 8810 	msr	PRIMASK, r3
}
 8003f7c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f7e:	f3ef 8310 	mrs	r3, PRIMASK
 8003f82:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003f84:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f86:	673b      	str	r3, [r7, #112]	; 0x70
 8003f88:	2301      	movs	r3, #1
 8003f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f8e:	f383 8810 	msr	PRIMASK, r3
}
 8003f92:	46c0      	nop			; (mov r8, r8)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689a      	ldr	r2, [r3, #8]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2140      	movs	r1, #64	; 0x40
 8003fa0:	438a      	bics	r2, r1
 8003fa2:	609a      	str	r2, [r3, #8]
 8003fa4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fa6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003faa:	f383 8810 	msr	PRIMASK, r3
}
 8003fae:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	228c      	movs	r2, #140	; 0x8c
 8003fb4:	2120      	movs	r1, #32
 8003fb6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fbe:	f3ef 8310 	mrs	r3, PRIMASK
 8003fc2:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003fc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fc6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fc8:	2301      	movs	r3, #1
 8003fca:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fce:	f383 8810 	msr	PRIMASK, r3
}
 8003fd2:	46c0      	nop			; (mov r8, r8)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2110      	movs	r1, #16
 8003fe0:	438a      	bics	r2, r1
 8003fe2:	601a      	str	r2, [r3, #0]
 8003fe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe6:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fe8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fea:	f383 8810 	msr	PRIMASK, r3
}
 8003fee:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2280      	movs	r2, #128	; 0x80
 8003ff4:	589b      	ldr	r3, [r3, r2]
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	f7fd fc88 	bl	800190c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2202      	movs	r2, #2
 8004000:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	225c      	movs	r2, #92	; 0x5c
 8004006:	5a9a      	ldrh	r2, [r3, r2]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	215e      	movs	r1, #94	; 0x5e
 800400c:	5a5b      	ldrh	r3, [r3, r1]
 800400e:	b29b      	uxth	r3, r3
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	b29a      	uxth	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	0011      	movs	r1, r2
 8004018:	0018      	movs	r0, r3
 800401a:	f7fc fe21 	bl	8000c60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800401e:	e0ed      	b.n	80041fc <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	225c      	movs	r2, #92	; 0x5c
 8004024:	5a99      	ldrh	r1, [r3, r2]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	225e      	movs	r2, #94	; 0x5e
 800402a:	5a9b      	ldrh	r3, [r3, r2]
 800402c:	b29a      	uxth	r2, r3
 800402e:	208e      	movs	r0, #142	; 0x8e
 8004030:	183b      	adds	r3, r7, r0
 8004032:	1a8a      	subs	r2, r1, r2
 8004034:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	225e      	movs	r2, #94	; 0x5e
 800403a:	5a9b      	ldrh	r3, [r3, r2]
 800403c:	b29b      	uxth	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d100      	bne.n	8004044 <HAL_UART_IRQHandler+0x478>
 8004042:	e0dd      	b.n	8004200 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8004044:	183b      	adds	r3, r7, r0
 8004046:	881b      	ldrh	r3, [r3, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d100      	bne.n	800404e <HAL_UART_IRQHandler+0x482>
 800404c:	e0d8      	b.n	8004200 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800404e:	f3ef 8310 	mrs	r3, PRIMASK
 8004052:	60fb      	str	r3, [r7, #12]
  return(result);
 8004054:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004056:	2488      	movs	r4, #136	; 0x88
 8004058:	193a      	adds	r2, r7, r4
 800405a:	6013      	str	r3, [r2, #0]
 800405c:	2301      	movs	r3, #1
 800405e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	f383 8810 	msr	PRIMASK, r3
}
 8004066:	46c0      	nop			; (mov r8, r8)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4967      	ldr	r1, [pc, #412]	; (8004210 <HAL_UART_IRQHandler+0x644>)
 8004074:	400a      	ands	r2, r1
 8004076:	601a      	str	r2, [r3, #0]
 8004078:	193b      	adds	r3, r7, r4
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f383 8810 	msr	PRIMASK, r3
}
 8004084:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004086:	f3ef 8310 	mrs	r3, PRIMASK
 800408a:	61bb      	str	r3, [r7, #24]
  return(result);
 800408c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800408e:	2484      	movs	r4, #132	; 0x84
 8004090:	193a      	adds	r2, r7, r4
 8004092:	6013      	str	r3, [r2, #0]
 8004094:	2301      	movs	r3, #1
 8004096:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	f383 8810 	msr	PRIMASK, r3
}
 800409e:	46c0      	nop			; (mov r8, r8)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	689a      	ldr	r2, [r3, #8]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	495a      	ldr	r1, [pc, #360]	; (8004214 <HAL_UART_IRQHandler+0x648>)
 80040ac:	400a      	ands	r2, r1
 80040ae:	609a      	str	r2, [r3, #8]
 80040b0:	193b      	adds	r3, r7, r4
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040b6:	6a3b      	ldr	r3, [r7, #32]
 80040b8:	f383 8810 	msr	PRIMASK, r3
}
 80040bc:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	228c      	movs	r2, #140	; 0x8c
 80040c2:	2120      	movs	r1, #32
 80040c4:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040d2:	f3ef 8310 	mrs	r3, PRIMASK
 80040d6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80040d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040da:	2480      	movs	r4, #128	; 0x80
 80040dc:	193a      	adds	r2, r7, r4
 80040de:	6013      	str	r3, [r2, #0]
 80040e0:	2301      	movs	r3, #1
 80040e2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e6:	f383 8810 	msr	PRIMASK, r3
}
 80040ea:	46c0      	nop			; (mov r8, r8)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2110      	movs	r1, #16
 80040f8:	438a      	bics	r2, r1
 80040fa:	601a      	str	r2, [r3, #0]
 80040fc:	193b      	adds	r3, r7, r4
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004104:	f383 8810 	msr	PRIMASK, r3
}
 8004108:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2202      	movs	r2, #2
 800410e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004110:	183b      	adds	r3, r7, r0
 8004112:	881a      	ldrh	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	0011      	movs	r1, r2
 8004118:	0018      	movs	r0, r3
 800411a:	f7fc fda1 	bl	8000c60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800411e:	e06f      	b.n	8004200 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004120:	23a4      	movs	r3, #164	; 0xa4
 8004122:	18fb      	adds	r3, r7, r3
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	2380      	movs	r3, #128	; 0x80
 8004128:	035b      	lsls	r3, r3, #13
 800412a:	4013      	ands	r3, r2
 800412c:	d010      	beq.n	8004150 <HAL_UART_IRQHandler+0x584>
 800412e:	239c      	movs	r3, #156	; 0x9c
 8004130:	18fb      	adds	r3, r7, r3
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	2380      	movs	r3, #128	; 0x80
 8004136:	03db      	lsls	r3, r3, #15
 8004138:	4013      	ands	r3, r2
 800413a:	d009      	beq.n	8004150 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2280      	movs	r2, #128	; 0x80
 8004142:	0352      	lsls	r2, r2, #13
 8004144:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	0018      	movs	r0, r3
 800414a:	f000 ff52 	bl	8004ff2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800414e:	e05a      	b.n	8004206 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004150:	23a4      	movs	r3, #164	; 0xa4
 8004152:	18fb      	adds	r3, r7, r3
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2280      	movs	r2, #128	; 0x80
 8004158:	4013      	ands	r3, r2
 800415a:	d016      	beq.n	800418a <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800415c:	23a0      	movs	r3, #160	; 0xa0
 800415e:	18fb      	adds	r3, r7, r3
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2280      	movs	r2, #128	; 0x80
 8004164:	4013      	ands	r3, r2
 8004166:	d106      	bne.n	8004176 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004168:	239c      	movs	r3, #156	; 0x9c
 800416a:	18fb      	adds	r3, r7, r3
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	2380      	movs	r3, #128	; 0x80
 8004170:	041b      	lsls	r3, r3, #16
 8004172:	4013      	ands	r3, r2
 8004174:	d009      	beq.n	800418a <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800417a:	2b00      	cmp	r3, #0
 800417c:	d042      	beq.n	8004204 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	0010      	movs	r0, r2
 8004186:	4798      	blx	r3
    }
    return;
 8004188:	e03c      	b.n	8004204 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800418a:	23a4      	movs	r3, #164	; 0xa4
 800418c:	18fb      	adds	r3, r7, r3
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2240      	movs	r2, #64	; 0x40
 8004192:	4013      	ands	r3, r2
 8004194:	d00a      	beq.n	80041ac <HAL_UART_IRQHandler+0x5e0>
 8004196:	23a0      	movs	r3, #160	; 0xa0
 8004198:	18fb      	adds	r3, r7, r3
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2240      	movs	r2, #64	; 0x40
 800419e:	4013      	ands	r3, r2
 80041a0:	d004      	beq.n	80041ac <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	0018      	movs	r0, r3
 80041a6:	f000 fef8 	bl	8004f9a <UART_EndTransmit_IT>
    return;
 80041aa:	e02c      	b.n	8004206 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80041ac:	23a4      	movs	r3, #164	; 0xa4
 80041ae:	18fb      	adds	r3, r7, r3
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	2380      	movs	r3, #128	; 0x80
 80041b4:	041b      	lsls	r3, r3, #16
 80041b6:	4013      	ands	r3, r2
 80041b8:	d00b      	beq.n	80041d2 <HAL_UART_IRQHandler+0x606>
 80041ba:	23a0      	movs	r3, #160	; 0xa0
 80041bc:	18fb      	adds	r3, r7, r3
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	2380      	movs	r3, #128	; 0x80
 80041c2:	05db      	lsls	r3, r3, #23
 80041c4:	4013      	ands	r3, r2
 80041c6:	d004      	beq.n	80041d2 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	0018      	movs	r0, r3
 80041cc:	f000 ff21 	bl	8005012 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80041d0:	e019      	b.n	8004206 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80041d2:	23a4      	movs	r3, #164	; 0xa4
 80041d4:	18fb      	adds	r3, r7, r3
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	2380      	movs	r3, #128	; 0x80
 80041da:	045b      	lsls	r3, r3, #17
 80041dc:	4013      	ands	r3, r2
 80041de:	d012      	beq.n	8004206 <HAL_UART_IRQHandler+0x63a>
 80041e0:	23a0      	movs	r3, #160	; 0xa0
 80041e2:	18fb      	adds	r3, r7, r3
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	da0d      	bge.n	8004206 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	0018      	movs	r0, r3
 80041ee:	f000 ff08 	bl	8005002 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80041f2:	e008      	b.n	8004206 <HAL_UART_IRQHandler+0x63a>
      return;
 80041f4:	46c0      	nop			; (mov r8, r8)
 80041f6:	e006      	b.n	8004206 <HAL_UART_IRQHandler+0x63a>
    return;
 80041f8:	46c0      	nop			; (mov r8, r8)
 80041fa:	e004      	b.n	8004206 <HAL_UART_IRQHandler+0x63a>
      return;
 80041fc:	46c0      	nop			; (mov r8, r8)
 80041fe:	e002      	b.n	8004206 <HAL_UART_IRQHandler+0x63a>
      return;
 8004200:	46c0      	nop			; (mov r8, r8)
 8004202:	e000      	b.n	8004206 <HAL_UART_IRQHandler+0x63a>
    return;
 8004204:	46c0      	nop			; (mov r8, r8)
  }
}
 8004206:	46bd      	mov	sp, r7
 8004208:	b02a      	add	sp, #168	; 0xa8
 800420a:	bdb0      	pop	{r4, r5, r7, pc}
 800420c:	fffffeff 	.word	0xfffffeff
 8004210:	fffffedf 	.word	0xfffffedf
 8004214:	effffffe 	.word	0xeffffffe

08004218 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004220:	46c0      	nop			; (mov r8, r8)
 8004222:	46bd      	mov	sp, r7
 8004224:	b002      	add	sp, #8
 8004226:	bd80      	pop	{r7, pc}

08004228 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004230:	46c0      	nop			; (mov r8, r8)
 8004232:	46bd      	mov	sp, r7
 8004234:	b002      	add	sp, #8
 8004236:	bd80      	pop	{r7, pc}

08004238 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004240:	46c0      	nop			; (mov r8, r8)
 8004242:	46bd      	mov	sp, r7
 8004244:	b002      	add	sp, #8
 8004246:	bd80      	pop	{r7, pc}

08004248 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004250:	46c0      	nop			; (mov r8, r8)
 8004252:	46bd      	mov	sp, r7
 8004254:	b002      	add	sp, #8
 8004256:	bd80      	pop	{r7, pc}

08004258 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004258:	b5b0      	push	{r4, r5, r7, lr}
 800425a:	b090      	sub	sp, #64	; 0x40
 800425c:	af00      	add	r7, sp, #0
 800425e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004260:	231a      	movs	r3, #26
 8004262:	2220      	movs	r2, #32
 8004264:	189b      	adds	r3, r3, r2
 8004266:	19db      	adds	r3, r3, r7
 8004268:	2200      	movs	r2, #0
 800426a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800426c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	431a      	orrs	r2, r3
 8004276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	431a      	orrs	r2, r3
 800427c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427e:	69db      	ldr	r3, [r3, #28]
 8004280:	4313      	orrs	r3, r2
 8004282:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4ac4      	ldr	r2, [pc, #784]	; (800459c <UART_SetConfig+0x344>)
 800428c:	4013      	ands	r3, r2
 800428e:	0019      	movs	r1, r3
 8004290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004296:	430b      	orrs	r3, r1
 8004298:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800429a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	4abf      	ldr	r2, [pc, #764]	; (80045a0 <UART_SetConfig+0x348>)
 80042a2:	4013      	ands	r3, r2
 80042a4:	0018      	movs	r0, r3
 80042a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a8:	68d9      	ldr	r1, [r3, #12]
 80042aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	0003      	movs	r3, r0
 80042b0:	430b      	orrs	r3, r1
 80042b2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4ab9      	ldr	r2, [pc, #740]	; (80045a4 <UART_SetConfig+0x34c>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d004      	beq.n	80042ce <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c6:	6a1b      	ldr	r3, [r3, #32]
 80042c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80042ca:	4313      	orrs	r3, r2
 80042cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	4ab4      	ldr	r2, [pc, #720]	; (80045a8 <UART_SetConfig+0x350>)
 80042d6:	4013      	ands	r3, r2
 80042d8:	0019      	movs	r1, r3
 80042da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042e0:	430b      	orrs	r3, r1
 80042e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80042e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ea:	220f      	movs	r2, #15
 80042ec:	4393      	bics	r3, r2
 80042ee:	0018      	movs	r0, r3
 80042f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80042f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	0003      	movs	r3, r0
 80042fa:	430b      	orrs	r3, r1
 80042fc:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4aaa      	ldr	r2, [pc, #680]	; (80045ac <UART_SetConfig+0x354>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d131      	bne.n	800436c <UART_SetConfig+0x114>
 8004308:	4ba9      	ldr	r3, [pc, #676]	; (80045b0 <UART_SetConfig+0x358>)
 800430a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800430c:	2203      	movs	r2, #3
 800430e:	4013      	ands	r3, r2
 8004310:	2b03      	cmp	r3, #3
 8004312:	d01d      	beq.n	8004350 <UART_SetConfig+0xf8>
 8004314:	d823      	bhi.n	800435e <UART_SetConfig+0x106>
 8004316:	2b02      	cmp	r3, #2
 8004318:	d00c      	beq.n	8004334 <UART_SetConfig+0xdc>
 800431a:	d820      	bhi.n	800435e <UART_SetConfig+0x106>
 800431c:	2b00      	cmp	r3, #0
 800431e:	d002      	beq.n	8004326 <UART_SetConfig+0xce>
 8004320:	2b01      	cmp	r3, #1
 8004322:	d00e      	beq.n	8004342 <UART_SetConfig+0xea>
 8004324:	e01b      	b.n	800435e <UART_SetConfig+0x106>
 8004326:	231b      	movs	r3, #27
 8004328:	2220      	movs	r2, #32
 800432a:	189b      	adds	r3, r3, r2
 800432c:	19db      	adds	r3, r3, r7
 800432e:	2200      	movs	r2, #0
 8004330:	701a      	strb	r2, [r3, #0]
 8004332:	e071      	b.n	8004418 <UART_SetConfig+0x1c0>
 8004334:	231b      	movs	r3, #27
 8004336:	2220      	movs	r2, #32
 8004338:	189b      	adds	r3, r3, r2
 800433a:	19db      	adds	r3, r3, r7
 800433c:	2202      	movs	r2, #2
 800433e:	701a      	strb	r2, [r3, #0]
 8004340:	e06a      	b.n	8004418 <UART_SetConfig+0x1c0>
 8004342:	231b      	movs	r3, #27
 8004344:	2220      	movs	r2, #32
 8004346:	189b      	adds	r3, r3, r2
 8004348:	19db      	adds	r3, r3, r7
 800434a:	2204      	movs	r2, #4
 800434c:	701a      	strb	r2, [r3, #0]
 800434e:	e063      	b.n	8004418 <UART_SetConfig+0x1c0>
 8004350:	231b      	movs	r3, #27
 8004352:	2220      	movs	r2, #32
 8004354:	189b      	adds	r3, r3, r2
 8004356:	19db      	adds	r3, r3, r7
 8004358:	2208      	movs	r2, #8
 800435a:	701a      	strb	r2, [r3, #0]
 800435c:	e05c      	b.n	8004418 <UART_SetConfig+0x1c0>
 800435e:	231b      	movs	r3, #27
 8004360:	2220      	movs	r2, #32
 8004362:	189b      	adds	r3, r3, r2
 8004364:	19db      	adds	r3, r3, r7
 8004366:	2210      	movs	r2, #16
 8004368:	701a      	strb	r2, [r3, #0]
 800436a:	e055      	b.n	8004418 <UART_SetConfig+0x1c0>
 800436c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a90      	ldr	r2, [pc, #576]	; (80045b4 <UART_SetConfig+0x35c>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d106      	bne.n	8004384 <UART_SetConfig+0x12c>
 8004376:	231b      	movs	r3, #27
 8004378:	2220      	movs	r2, #32
 800437a:	189b      	adds	r3, r3, r2
 800437c:	19db      	adds	r3, r3, r7
 800437e:	2200      	movs	r2, #0
 8004380:	701a      	strb	r2, [r3, #0]
 8004382:	e049      	b.n	8004418 <UART_SetConfig+0x1c0>
 8004384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a86      	ldr	r2, [pc, #536]	; (80045a4 <UART_SetConfig+0x34c>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d13e      	bne.n	800440c <UART_SetConfig+0x1b4>
 800438e:	4b88      	ldr	r3, [pc, #544]	; (80045b0 <UART_SetConfig+0x358>)
 8004390:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004392:	23c0      	movs	r3, #192	; 0xc0
 8004394:	011b      	lsls	r3, r3, #4
 8004396:	4013      	ands	r3, r2
 8004398:	22c0      	movs	r2, #192	; 0xc0
 800439a:	0112      	lsls	r2, r2, #4
 800439c:	4293      	cmp	r3, r2
 800439e:	d027      	beq.n	80043f0 <UART_SetConfig+0x198>
 80043a0:	22c0      	movs	r2, #192	; 0xc0
 80043a2:	0112      	lsls	r2, r2, #4
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d82a      	bhi.n	80043fe <UART_SetConfig+0x1a6>
 80043a8:	2280      	movs	r2, #128	; 0x80
 80043aa:	0112      	lsls	r2, r2, #4
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d011      	beq.n	80043d4 <UART_SetConfig+0x17c>
 80043b0:	2280      	movs	r2, #128	; 0x80
 80043b2:	0112      	lsls	r2, r2, #4
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d822      	bhi.n	80043fe <UART_SetConfig+0x1a6>
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d004      	beq.n	80043c6 <UART_SetConfig+0x16e>
 80043bc:	2280      	movs	r2, #128	; 0x80
 80043be:	00d2      	lsls	r2, r2, #3
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d00e      	beq.n	80043e2 <UART_SetConfig+0x18a>
 80043c4:	e01b      	b.n	80043fe <UART_SetConfig+0x1a6>
 80043c6:	231b      	movs	r3, #27
 80043c8:	2220      	movs	r2, #32
 80043ca:	189b      	adds	r3, r3, r2
 80043cc:	19db      	adds	r3, r3, r7
 80043ce:	2200      	movs	r2, #0
 80043d0:	701a      	strb	r2, [r3, #0]
 80043d2:	e021      	b.n	8004418 <UART_SetConfig+0x1c0>
 80043d4:	231b      	movs	r3, #27
 80043d6:	2220      	movs	r2, #32
 80043d8:	189b      	adds	r3, r3, r2
 80043da:	19db      	adds	r3, r3, r7
 80043dc:	2202      	movs	r2, #2
 80043de:	701a      	strb	r2, [r3, #0]
 80043e0:	e01a      	b.n	8004418 <UART_SetConfig+0x1c0>
 80043e2:	231b      	movs	r3, #27
 80043e4:	2220      	movs	r2, #32
 80043e6:	189b      	adds	r3, r3, r2
 80043e8:	19db      	adds	r3, r3, r7
 80043ea:	2204      	movs	r2, #4
 80043ec:	701a      	strb	r2, [r3, #0]
 80043ee:	e013      	b.n	8004418 <UART_SetConfig+0x1c0>
 80043f0:	231b      	movs	r3, #27
 80043f2:	2220      	movs	r2, #32
 80043f4:	189b      	adds	r3, r3, r2
 80043f6:	19db      	adds	r3, r3, r7
 80043f8:	2208      	movs	r2, #8
 80043fa:	701a      	strb	r2, [r3, #0]
 80043fc:	e00c      	b.n	8004418 <UART_SetConfig+0x1c0>
 80043fe:	231b      	movs	r3, #27
 8004400:	2220      	movs	r2, #32
 8004402:	189b      	adds	r3, r3, r2
 8004404:	19db      	adds	r3, r3, r7
 8004406:	2210      	movs	r2, #16
 8004408:	701a      	strb	r2, [r3, #0]
 800440a:	e005      	b.n	8004418 <UART_SetConfig+0x1c0>
 800440c:	231b      	movs	r3, #27
 800440e:	2220      	movs	r2, #32
 8004410:	189b      	adds	r3, r3, r2
 8004412:	19db      	adds	r3, r3, r7
 8004414:	2210      	movs	r2, #16
 8004416:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a61      	ldr	r2, [pc, #388]	; (80045a4 <UART_SetConfig+0x34c>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d000      	beq.n	8004424 <UART_SetConfig+0x1cc>
 8004422:	e092      	b.n	800454a <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004424:	231b      	movs	r3, #27
 8004426:	2220      	movs	r2, #32
 8004428:	189b      	adds	r3, r3, r2
 800442a:	19db      	adds	r3, r3, r7
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	2b08      	cmp	r3, #8
 8004430:	d015      	beq.n	800445e <UART_SetConfig+0x206>
 8004432:	dc18      	bgt.n	8004466 <UART_SetConfig+0x20e>
 8004434:	2b04      	cmp	r3, #4
 8004436:	d00d      	beq.n	8004454 <UART_SetConfig+0x1fc>
 8004438:	dc15      	bgt.n	8004466 <UART_SetConfig+0x20e>
 800443a:	2b00      	cmp	r3, #0
 800443c:	d002      	beq.n	8004444 <UART_SetConfig+0x1ec>
 800443e:	2b02      	cmp	r3, #2
 8004440:	d005      	beq.n	800444e <UART_SetConfig+0x1f6>
 8004442:	e010      	b.n	8004466 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004444:	f7fe fb14 	bl	8002a70 <HAL_RCC_GetPCLK1Freq>
 8004448:	0003      	movs	r3, r0
 800444a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800444c:	e014      	b.n	8004478 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800444e:	4b5a      	ldr	r3, [pc, #360]	; (80045b8 <UART_SetConfig+0x360>)
 8004450:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004452:	e011      	b.n	8004478 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004454:	f7fe fa80 	bl	8002958 <HAL_RCC_GetSysClockFreq>
 8004458:	0003      	movs	r3, r0
 800445a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800445c:	e00c      	b.n	8004478 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800445e:	2380      	movs	r3, #128	; 0x80
 8004460:	021b      	lsls	r3, r3, #8
 8004462:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004464:	e008      	b.n	8004478 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8004466:	2300      	movs	r3, #0
 8004468:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800446a:	231a      	movs	r3, #26
 800446c:	2220      	movs	r2, #32
 800446e:	189b      	adds	r3, r3, r2
 8004470:	19db      	adds	r3, r3, r7
 8004472:	2201      	movs	r2, #1
 8004474:	701a      	strb	r2, [r3, #0]
        break;
 8004476:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800447a:	2b00      	cmp	r3, #0
 800447c:	d100      	bne.n	8004480 <UART_SetConfig+0x228>
 800447e:	e147      	b.n	8004710 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004482:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004484:	4b4d      	ldr	r3, [pc, #308]	; (80045bc <UART_SetConfig+0x364>)
 8004486:	0052      	lsls	r2, r2, #1
 8004488:	5ad3      	ldrh	r3, [r2, r3]
 800448a:	0019      	movs	r1, r3
 800448c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800448e:	f7fb fe4b 	bl	8000128 <__udivsi3>
 8004492:	0003      	movs	r3, r0
 8004494:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	0013      	movs	r3, r2
 800449c:	005b      	lsls	r3, r3, #1
 800449e:	189b      	adds	r3, r3, r2
 80044a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d305      	bcc.n	80044b2 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80044a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80044ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d906      	bls.n	80044c0 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 80044b2:	231a      	movs	r3, #26
 80044b4:	2220      	movs	r2, #32
 80044b6:	189b      	adds	r3, r3, r2
 80044b8:	19db      	adds	r3, r3, r7
 80044ba:	2201      	movs	r2, #1
 80044bc:	701a      	strb	r2, [r3, #0]
 80044be:	e127      	b.n	8004710 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044c2:	61bb      	str	r3, [r7, #24]
 80044c4:	2300      	movs	r3, #0
 80044c6:	61fb      	str	r3, [r7, #28]
 80044c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044cc:	4b3b      	ldr	r3, [pc, #236]	; (80045bc <UART_SetConfig+0x364>)
 80044ce:	0052      	lsls	r2, r2, #1
 80044d0:	5ad3      	ldrh	r3, [r2, r3]
 80044d2:	613b      	str	r3, [r7, #16]
 80044d4:	2300      	movs	r3, #0
 80044d6:	617b      	str	r3, [r7, #20]
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	69b8      	ldr	r0, [r7, #24]
 80044de:	69f9      	ldr	r1, [r7, #28]
 80044e0:	f7fb ff98 	bl	8000414 <__aeabi_uldivmod>
 80044e4:	0002      	movs	r2, r0
 80044e6:	000b      	movs	r3, r1
 80044e8:	0e11      	lsrs	r1, r2, #24
 80044ea:	021d      	lsls	r5, r3, #8
 80044ec:	430d      	orrs	r5, r1
 80044ee:	0214      	lsls	r4, r2, #8
 80044f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	085b      	lsrs	r3, r3, #1
 80044f6:	60bb      	str	r3, [r7, #8]
 80044f8:	2300      	movs	r3, #0
 80044fa:	60fb      	str	r3, [r7, #12]
 80044fc:	68b8      	ldr	r0, [r7, #8]
 80044fe:	68f9      	ldr	r1, [r7, #12]
 8004500:	1900      	adds	r0, r0, r4
 8004502:	4169      	adcs	r1, r5
 8004504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	603b      	str	r3, [r7, #0]
 800450a:	2300      	movs	r3, #0
 800450c:	607b      	str	r3, [r7, #4]
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f7fb ff7f 	bl	8000414 <__aeabi_uldivmod>
 8004516:	0002      	movs	r2, r0
 8004518:	000b      	movs	r3, r1
 800451a:	0013      	movs	r3, r2
 800451c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800451e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004520:	23c0      	movs	r3, #192	; 0xc0
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	429a      	cmp	r2, r3
 8004526:	d309      	bcc.n	800453c <UART_SetConfig+0x2e4>
 8004528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800452a:	2380      	movs	r3, #128	; 0x80
 800452c:	035b      	lsls	r3, r3, #13
 800452e:	429a      	cmp	r2, r3
 8004530:	d204      	bcs.n	800453c <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8004532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004538:	60da      	str	r2, [r3, #12]
 800453a:	e0e9      	b.n	8004710 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 800453c:	231a      	movs	r3, #26
 800453e:	2220      	movs	r2, #32
 8004540:	189b      	adds	r3, r3, r2
 8004542:	19db      	adds	r3, r3, r7
 8004544:	2201      	movs	r2, #1
 8004546:	701a      	strb	r2, [r3, #0]
 8004548:	e0e2      	b.n	8004710 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800454a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454c:	69da      	ldr	r2, [r3, #28]
 800454e:	2380      	movs	r3, #128	; 0x80
 8004550:	021b      	lsls	r3, r3, #8
 8004552:	429a      	cmp	r2, r3
 8004554:	d000      	beq.n	8004558 <UART_SetConfig+0x300>
 8004556:	e083      	b.n	8004660 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004558:	231b      	movs	r3, #27
 800455a:	2220      	movs	r2, #32
 800455c:	189b      	adds	r3, r3, r2
 800455e:	19db      	adds	r3, r3, r7
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	2b08      	cmp	r3, #8
 8004564:	d015      	beq.n	8004592 <UART_SetConfig+0x33a>
 8004566:	dc2b      	bgt.n	80045c0 <UART_SetConfig+0x368>
 8004568:	2b04      	cmp	r3, #4
 800456a:	d00d      	beq.n	8004588 <UART_SetConfig+0x330>
 800456c:	dc28      	bgt.n	80045c0 <UART_SetConfig+0x368>
 800456e:	2b00      	cmp	r3, #0
 8004570:	d002      	beq.n	8004578 <UART_SetConfig+0x320>
 8004572:	2b02      	cmp	r3, #2
 8004574:	d005      	beq.n	8004582 <UART_SetConfig+0x32a>
 8004576:	e023      	b.n	80045c0 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004578:	f7fe fa7a 	bl	8002a70 <HAL_RCC_GetPCLK1Freq>
 800457c:	0003      	movs	r3, r0
 800457e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004580:	e027      	b.n	80045d2 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004582:	4b0d      	ldr	r3, [pc, #52]	; (80045b8 <UART_SetConfig+0x360>)
 8004584:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004586:	e024      	b.n	80045d2 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004588:	f7fe f9e6 	bl	8002958 <HAL_RCC_GetSysClockFreq>
 800458c:	0003      	movs	r3, r0
 800458e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004590:	e01f      	b.n	80045d2 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004592:	2380      	movs	r3, #128	; 0x80
 8004594:	021b      	lsls	r3, r3, #8
 8004596:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004598:	e01b      	b.n	80045d2 <UART_SetConfig+0x37a>
 800459a:	46c0      	nop			; (mov r8, r8)
 800459c:	cfff69f3 	.word	0xcfff69f3
 80045a0:	ffffcfff 	.word	0xffffcfff
 80045a4:	40008000 	.word	0x40008000
 80045a8:	11fff4ff 	.word	0x11fff4ff
 80045ac:	40013800 	.word	0x40013800
 80045b0:	40021000 	.word	0x40021000
 80045b4:	40004400 	.word	0x40004400
 80045b8:	00f42400 	.word	0x00f42400
 80045bc:	08007544 	.word	0x08007544
      default:
        pclk = 0U;
 80045c0:	2300      	movs	r3, #0
 80045c2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80045c4:	231a      	movs	r3, #26
 80045c6:	2220      	movs	r2, #32
 80045c8:	189b      	adds	r3, r3, r2
 80045ca:	19db      	adds	r3, r3, r7
 80045cc:	2201      	movs	r2, #1
 80045ce:	701a      	strb	r2, [r3, #0]
        break;
 80045d0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d100      	bne.n	80045da <UART_SetConfig+0x382>
 80045d8:	e09a      	b.n	8004710 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045de:	4b58      	ldr	r3, [pc, #352]	; (8004740 <UART_SetConfig+0x4e8>)
 80045e0:	0052      	lsls	r2, r2, #1
 80045e2:	5ad3      	ldrh	r3, [r2, r3]
 80045e4:	0019      	movs	r1, r3
 80045e6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80045e8:	f7fb fd9e 	bl	8000128 <__udivsi3>
 80045ec:	0003      	movs	r3, r0
 80045ee:	005a      	lsls	r2, r3, #1
 80045f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	085b      	lsrs	r3, r3, #1
 80045f6:	18d2      	adds	r2, r2, r3
 80045f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	0019      	movs	r1, r3
 80045fe:	0010      	movs	r0, r2
 8004600:	f7fb fd92 	bl	8000128 <__udivsi3>
 8004604:	0003      	movs	r3, r0
 8004606:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460a:	2b0f      	cmp	r3, #15
 800460c:	d921      	bls.n	8004652 <UART_SetConfig+0x3fa>
 800460e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004610:	2380      	movs	r3, #128	; 0x80
 8004612:	025b      	lsls	r3, r3, #9
 8004614:	429a      	cmp	r2, r3
 8004616:	d21c      	bcs.n	8004652 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461a:	b29a      	uxth	r2, r3
 800461c:	200e      	movs	r0, #14
 800461e:	2420      	movs	r4, #32
 8004620:	1903      	adds	r3, r0, r4
 8004622:	19db      	adds	r3, r3, r7
 8004624:	210f      	movs	r1, #15
 8004626:	438a      	bics	r2, r1
 8004628:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800462a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462c:	085b      	lsrs	r3, r3, #1
 800462e:	b29b      	uxth	r3, r3
 8004630:	2207      	movs	r2, #7
 8004632:	4013      	ands	r3, r2
 8004634:	b299      	uxth	r1, r3
 8004636:	1903      	adds	r3, r0, r4
 8004638:	19db      	adds	r3, r3, r7
 800463a:	1902      	adds	r2, r0, r4
 800463c:	19d2      	adds	r2, r2, r7
 800463e:	8812      	ldrh	r2, [r2, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	1902      	adds	r2, r0, r4
 800464a:	19d2      	adds	r2, r2, r7
 800464c:	8812      	ldrh	r2, [r2, #0]
 800464e:	60da      	str	r2, [r3, #12]
 8004650:	e05e      	b.n	8004710 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8004652:	231a      	movs	r3, #26
 8004654:	2220      	movs	r2, #32
 8004656:	189b      	adds	r3, r3, r2
 8004658:	19db      	adds	r3, r3, r7
 800465a:	2201      	movs	r2, #1
 800465c:	701a      	strb	r2, [r3, #0]
 800465e:	e057      	b.n	8004710 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004660:	231b      	movs	r3, #27
 8004662:	2220      	movs	r2, #32
 8004664:	189b      	adds	r3, r3, r2
 8004666:	19db      	adds	r3, r3, r7
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	2b08      	cmp	r3, #8
 800466c:	d015      	beq.n	800469a <UART_SetConfig+0x442>
 800466e:	dc18      	bgt.n	80046a2 <UART_SetConfig+0x44a>
 8004670:	2b04      	cmp	r3, #4
 8004672:	d00d      	beq.n	8004690 <UART_SetConfig+0x438>
 8004674:	dc15      	bgt.n	80046a2 <UART_SetConfig+0x44a>
 8004676:	2b00      	cmp	r3, #0
 8004678:	d002      	beq.n	8004680 <UART_SetConfig+0x428>
 800467a:	2b02      	cmp	r3, #2
 800467c:	d005      	beq.n	800468a <UART_SetConfig+0x432>
 800467e:	e010      	b.n	80046a2 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004680:	f7fe f9f6 	bl	8002a70 <HAL_RCC_GetPCLK1Freq>
 8004684:	0003      	movs	r3, r0
 8004686:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004688:	e014      	b.n	80046b4 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800468a:	4b2e      	ldr	r3, [pc, #184]	; (8004744 <UART_SetConfig+0x4ec>)
 800468c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800468e:	e011      	b.n	80046b4 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004690:	f7fe f962 	bl	8002958 <HAL_RCC_GetSysClockFreq>
 8004694:	0003      	movs	r3, r0
 8004696:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004698:	e00c      	b.n	80046b4 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800469a:	2380      	movs	r3, #128	; 0x80
 800469c:	021b      	lsls	r3, r3, #8
 800469e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80046a0:	e008      	b.n	80046b4 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 80046a2:	2300      	movs	r3, #0
 80046a4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80046a6:	231a      	movs	r3, #26
 80046a8:	2220      	movs	r2, #32
 80046aa:	189b      	adds	r3, r3, r2
 80046ac:	19db      	adds	r3, r3, r7
 80046ae:	2201      	movs	r2, #1
 80046b0:	701a      	strb	r2, [r3, #0]
        break;
 80046b2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80046b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d02a      	beq.n	8004710 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046be:	4b20      	ldr	r3, [pc, #128]	; (8004740 <UART_SetConfig+0x4e8>)
 80046c0:	0052      	lsls	r2, r2, #1
 80046c2:	5ad3      	ldrh	r3, [r2, r3]
 80046c4:	0019      	movs	r1, r3
 80046c6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80046c8:	f7fb fd2e 	bl	8000128 <__udivsi3>
 80046cc:	0003      	movs	r3, r0
 80046ce:	001a      	movs	r2, r3
 80046d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	085b      	lsrs	r3, r3, #1
 80046d6:	18d2      	adds	r2, r2, r3
 80046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	0019      	movs	r1, r3
 80046de:	0010      	movs	r0, r2
 80046e0:	f7fb fd22 	bl	8000128 <__udivsi3>
 80046e4:	0003      	movs	r3, r0
 80046e6:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ea:	2b0f      	cmp	r3, #15
 80046ec:	d90a      	bls.n	8004704 <UART_SetConfig+0x4ac>
 80046ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046f0:	2380      	movs	r3, #128	; 0x80
 80046f2:	025b      	lsls	r3, r3, #9
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d205      	bcs.n	8004704 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80046f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	60da      	str	r2, [r3, #12]
 8004702:	e005      	b.n	8004710 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8004704:	231a      	movs	r3, #26
 8004706:	2220      	movs	r2, #32
 8004708:	189b      	adds	r3, r3, r2
 800470a:	19db      	adds	r3, r3, r7
 800470c:	2201      	movs	r2, #1
 800470e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004712:	226a      	movs	r2, #106	; 0x6a
 8004714:	2101      	movs	r1, #1
 8004716:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471a:	2268      	movs	r2, #104	; 0x68
 800471c:	2101      	movs	r1, #1
 800471e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004722:	2200      	movs	r2, #0
 8004724:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004728:	2200      	movs	r2, #0
 800472a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800472c:	231a      	movs	r3, #26
 800472e:	2220      	movs	r2, #32
 8004730:	189b      	adds	r3, r3, r2
 8004732:	19db      	adds	r3, r3, r7
 8004734:	781b      	ldrb	r3, [r3, #0]
}
 8004736:	0018      	movs	r0, r3
 8004738:	46bd      	mov	sp, r7
 800473a:	b010      	add	sp, #64	; 0x40
 800473c:	bdb0      	pop	{r4, r5, r7, pc}
 800473e:	46c0      	nop			; (mov r8, r8)
 8004740:	08007544 	.word	0x08007544
 8004744:	00f42400 	.word	0x00f42400

08004748 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004754:	2201      	movs	r2, #1
 8004756:	4013      	ands	r3, r2
 8004758:	d00b      	beq.n	8004772 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	4a4a      	ldr	r2, [pc, #296]	; (800488c <UART_AdvFeatureConfig+0x144>)
 8004762:	4013      	ands	r3, r2
 8004764:	0019      	movs	r1, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	430a      	orrs	r2, r1
 8004770:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004776:	2202      	movs	r2, #2
 8004778:	4013      	ands	r3, r2
 800477a:	d00b      	beq.n	8004794 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	4a43      	ldr	r2, [pc, #268]	; (8004890 <UART_AdvFeatureConfig+0x148>)
 8004784:	4013      	ands	r3, r2
 8004786:	0019      	movs	r1, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	430a      	orrs	r2, r1
 8004792:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004798:	2204      	movs	r2, #4
 800479a:	4013      	ands	r3, r2
 800479c:	d00b      	beq.n	80047b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	4a3b      	ldr	r2, [pc, #236]	; (8004894 <UART_AdvFeatureConfig+0x14c>)
 80047a6:	4013      	ands	r3, r2
 80047a8:	0019      	movs	r1, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	430a      	orrs	r2, r1
 80047b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ba:	2208      	movs	r2, #8
 80047bc:	4013      	ands	r3, r2
 80047be:	d00b      	beq.n	80047d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	4a34      	ldr	r2, [pc, #208]	; (8004898 <UART_AdvFeatureConfig+0x150>)
 80047c8:	4013      	ands	r3, r2
 80047ca:	0019      	movs	r1, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	430a      	orrs	r2, r1
 80047d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047dc:	2210      	movs	r2, #16
 80047de:	4013      	ands	r3, r2
 80047e0:	d00b      	beq.n	80047fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	4a2c      	ldr	r2, [pc, #176]	; (800489c <UART_AdvFeatureConfig+0x154>)
 80047ea:	4013      	ands	r3, r2
 80047ec:	0019      	movs	r1, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fe:	2220      	movs	r2, #32
 8004800:	4013      	ands	r3, r2
 8004802:	d00b      	beq.n	800481c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	4a25      	ldr	r2, [pc, #148]	; (80048a0 <UART_AdvFeatureConfig+0x158>)
 800480c:	4013      	ands	r3, r2
 800480e:	0019      	movs	r1, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	430a      	orrs	r2, r1
 800481a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004820:	2240      	movs	r2, #64	; 0x40
 8004822:	4013      	ands	r3, r2
 8004824:	d01d      	beq.n	8004862 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	4a1d      	ldr	r2, [pc, #116]	; (80048a4 <UART_AdvFeatureConfig+0x15c>)
 800482e:	4013      	ands	r3, r2
 8004830:	0019      	movs	r1, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	430a      	orrs	r2, r1
 800483c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004842:	2380      	movs	r3, #128	; 0x80
 8004844:	035b      	lsls	r3, r3, #13
 8004846:	429a      	cmp	r2, r3
 8004848:	d10b      	bne.n	8004862 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	4a15      	ldr	r2, [pc, #84]	; (80048a8 <UART_AdvFeatureConfig+0x160>)
 8004852:	4013      	ands	r3, r2
 8004854:	0019      	movs	r1, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004866:	2280      	movs	r2, #128	; 0x80
 8004868:	4013      	ands	r3, r2
 800486a:	d00b      	beq.n	8004884 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	4a0e      	ldr	r2, [pc, #56]	; (80048ac <UART_AdvFeatureConfig+0x164>)
 8004874:	4013      	ands	r3, r2
 8004876:	0019      	movs	r1, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	430a      	orrs	r2, r1
 8004882:	605a      	str	r2, [r3, #4]
  }
}
 8004884:	46c0      	nop			; (mov r8, r8)
 8004886:	46bd      	mov	sp, r7
 8004888:	b002      	add	sp, #8
 800488a:	bd80      	pop	{r7, pc}
 800488c:	fffdffff 	.word	0xfffdffff
 8004890:	fffeffff 	.word	0xfffeffff
 8004894:	fffbffff 	.word	0xfffbffff
 8004898:	ffff7fff 	.word	0xffff7fff
 800489c:	ffffefff 	.word	0xffffefff
 80048a0:	ffffdfff 	.word	0xffffdfff
 80048a4:	ffefffff 	.word	0xffefffff
 80048a8:	ff9fffff 	.word	0xff9fffff
 80048ac:	fff7ffff 	.word	0xfff7ffff

080048b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af02      	add	r7, sp, #8
 80048b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2290      	movs	r2, #144	; 0x90
 80048bc:	2100      	movs	r1, #0
 80048be:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048c0:	f7fc fe08 	bl	80014d4 <HAL_GetTick>
 80048c4:	0003      	movs	r3, r0
 80048c6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2208      	movs	r2, #8
 80048d0:	4013      	ands	r3, r2
 80048d2:	2b08      	cmp	r3, #8
 80048d4:	d10c      	bne.n	80048f0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2280      	movs	r2, #128	; 0x80
 80048da:	0391      	lsls	r1, r2, #14
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	4a1a      	ldr	r2, [pc, #104]	; (8004948 <UART_CheckIdleState+0x98>)
 80048e0:	9200      	str	r2, [sp, #0]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f000 f832 	bl	800494c <UART_WaitOnFlagUntilTimeout>
 80048e8:	1e03      	subs	r3, r0, #0
 80048ea:	d001      	beq.n	80048f0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e026      	b.n	800493e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2204      	movs	r2, #4
 80048f8:	4013      	ands	r3, r2
 80048fa:	2b04      	cmp	r3, #4
 80048fc:	d10c      	bne.n	8004918 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2280      	movs	r2, #128	; 0x80
 8004902:	03d1      	lsls	r1, r2, #15
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	4a10      	ldr	r2, [pc, #64]	; (8004948 <UART_CheckIdleState+0x98>)
 8004908:	9200      	str	r2, [sp, #0]
 800490a:	2200      	movs	r2, #0
 800490c:	f000 f81e 	bl	800494c <UART_WaitOnFlagUntilTimeout>
 8004910:	1e03      	subs	r3, r0, #0
 8004912:	d001      	beq.n	8004918 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e012      	b.n	800493e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2288      	movs	r2, #136	; 0x88
 800491c:	2120      	movs	r1, #32
 800491e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	228c      	movs	r2, #140	; 0x8c
 8004924:	2120      	movs	r1, #32
 8004926:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2284      	movs	r2, #132	; 0x84
 8004938:	2100      	movs	r1, #0
 800493a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	0018      	movs	r0, r3
 8004940:	46bd      	mov	sp, r7
 8004942:	b004      	add	sp, #16
 8004944:	bd80      	pop	{r7, pc}
 8004946:	46c0      	nop			; (mov r8, r8)
 8004948:	01ffffff 	.word	0x01ffffff

0800494c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b094      	sub	sp, #80	; 0x50
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	603b      	str	r3, [r7, #0]
 8004958:	1dfb      	adds	r3, r7, #7
 800495a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800495c:	e0a7      	b.n	8004aae <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800495e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004960:	3301      	adds	r3, #1
 8004962:	d100      	bne.n	8004966 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004964:	e0a3      	b.n	8004aae <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004966:	f7fc fdb5 	bl	80014d4 <HAL_GetTick>
 800496a:	0002      	movs	r2, r0
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004972:	429a      	cmp	r2, r3
 8004974:	d302      	bcc.n	800497c <UART_WaitOnFlagUntilTimeout+0x30>
 8004976:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004978:	2b00      	cmp	r3, #0
 800497a:	d13f      	bne.n	80049fc <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800497c:	f3ef 8310 	mrs	r3, PRIMASK
 8004980:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004982:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004984:	647b      	str	r3, [r7, #68]	; 0x44
 8004986:	2301      	movs	r3, #1
 8004988:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800498a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800498c:	f383 8810 	msr	PRIMASK, r3
}
 8004990:	46c0      	nop			; (mov r8, r8)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	494e      	ldr	r1, [pc, #312]	; (8004ad8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800499e:	400a      	ands	r2, r1
 80049a0:	601a      	str	r2, [r3, #0]
 80049a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049a4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a8:	f383 8810 	msr	PRIMASK, r3
}
 80049ac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049ae:	f3ef 8310 	mrs	r3, PRIMASK
 80049b2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80049b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049b6:	643b      	str	r3, [r7, #64]	; 0x40
 80049b8:	2301      	movs	r3, #1
 80049ba:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049be:	f383 8810 	msr	PRIMASK, r3
}
 80049c2:	46c0      	nop			; (mov r8, r8)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	689a      	ldr	r2, [r3, #8]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2101      	movs	r1, #1
 80049d0:	438a      	bics	r2, r1
 80049d2:	609a      	str	r2, [r3, #8]
 80049d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049da:	f383 8810 	msr	PRIMASK, r3
}
 80049de:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2288      	movs	r2, #136	; 0x88
 80049e4:	2120      	movs	r1, #32
 80049e6:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	228c      	movs	r2, #140	; 0x8c
 80049ec:	2120      	movs	r1, #32
 80049ee:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2284      	movs	r2, #132	; 0x84
 80049f4:	2100      	movs	r1, #0
 80049f6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e069      	b.n	8004ad0 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2204      	movs	r2, #4
 8004a04:	4013      	ands	r3, r2
 8004a06:	d052      	beq.n	8004aae <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	69da      	ldr	r2, [r3, #28]
 8004a0e:	2380      	movs	r3, #128	; 0x80
 8004a10:	011b      	lsls	r3, r3, #4
 8004a12:	401a      	ands	r2, r3
 8004a14:	2380      	movs	r3, #128	; 0x80
 8004a16:	011b      	lsls	r3, r3, #4
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d148      	bne.n	8004aae <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2280      	movs	r2, #128	; 0x80
 8004a22:	0112      	lsls	r2, r2, #4
 8004a24:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a26:	f3ef 8310 	mrs	r3, PRIMASK
 8004a2a:	613b      	str	r3, [r7, #16]
  return(result);
 8004a2c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a30:	2301      	movs	r3, #1
 8004a32:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	f383 8810 	msr	PRIMASK, r3
}
 8004a3a:	46c0      	nop			; (mov r8, r8)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4924      	ldr	r1, [pc, #144]	; (8004ad8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004a48:	400a      	ands	r2, r1
 8004a4a:	601a      	str	r2, [r3, #0]
 8004a4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a4e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	f383 8810 	msr	PRIMASK, r3
}
 8004a56:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a58:	f3ef 8310 	mrs	r3, PRIMASK
 8004a5c:	61fb      	str	r3, [r7, #28]
  return(result);
 8004a5e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a60:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a62:	2301      	movs	r3, #1
 8004a64:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a66:	6a3b      	ldr	r3, [r7, #32]
 8004a68:	f383 8810 	msr	PRIMASK, r3
}
 8004a6c:	46c0      	nop			; (mov r8, r8)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	689a      	ldr	r2, [r3, #8]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2101      	movs	r1, #1
 8004a7a:	438a      	bics	r2, r1
 8004a7c:	609a      	str	r2, [r3, #8]
 8004a7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a80:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a84:	f383 8810 	msr	PRIMASK, r3
}
 8004a88:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2288      	movs	r2, #136	; 0x88
 8004a8e:	2120      	movs	r1, #32
 8004a90:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	228c      	movs	r2, #140	; 0x8c
 8004a96:	2120      	movs	r1, #32
 8004a98:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2290      	movs	r2, #144	; 0x90
 8004a9e:	2120      	movs	r1, #32
 8004aa0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2284      	movs	r2, #132	; 0x84
 8004aa6:	2100      	movs	r1, #0
 8004aa8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e010      	b.n	8004ad0 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	69db      	ldr	r3, [r3, #28]
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	425a      	negs	r2, r3
 8004abe:	4153      	adcs	r3, r2
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	001a      	movs	r2, r3
 8004ac4:	1dfb      	adds	r3, r7, #7
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d100      	bne.n	8004ace <UART_WaitOnFlagUntilTimeout+0x182>
 8004acc:	e747      	b.n	800495e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	0018      	movs	r0, r3
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	b014      	add	sp, #80	; 0x50
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	fffffe5f 	.word	0xfffffe5f

08004adc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b090      	sub	sp, #64	; 0x40
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	1dbb      	adds	r3, r7, #6
 8004ae8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	68ba      	ldr	r2, [r7, #8]
 8004aee:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	1dba      	adds	r2, r7, #6
 8004af4:	215c      	movs	r1, #92	; 0x5c
 8004af6:	8812      	ldrh	r2, [r2, #0]
 8004af8:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2290      	movs	r2, #144	; 0x90
 8004afe:	2100      	movs	r1, #0
 8004b00:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	228c      	movs	r2, #140	; 0x8c
 8004b06:	2122      	movs	r1, #34	; 0x22
 8004b08:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2280      	movs	r2, #128	; 0x80
 8004b0e:	589b      	ldr	r3, [r3, r2]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d02d      	beq.n	8004b70 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2280      	movs	r2, #128	; 0x80
 8004b18:	589b      	ldr	r3, [r3, r2]
 8004b1a:	4a40      	ldr	r2, [pc, #256]	; (8004c1c <UART_Start_Receive_DMA+0x140>)
 8004b1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2280      	movs	r2, #128	; 0x80
 8004b22:	589b      	ldr	r3, [r3, r2]
 8004b24:	4a3e      	ldr	r2, [pc, #248]	; (8004c20 <UART_Start_Receive_DMA+0x144>)
 8004b26:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2280      	movs	r2, #128	; 0x80
 8004b2c:	589b      	ldr	r3, [r3, r2]
 8004b2e:	4a3d      	ldr	r2, [pc, #244]	; (8004c24 <UART_Start_Receive_DMA+0x148>)
 8004b30:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2280      	movs	r2, #128	; 0x80
 8004b36:	589b      	ldr	r3, [r3, r2]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2280      	movs	r2, #128	; 0x80
 8004b40:	5898      	ldr	r0, [r3, r2]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	3324      	adds	r3, #36	; 0x24
 8004b48:	0019      	movs	r1, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b4e:	001a      	movs	r2, r3
 8004b50:	1dbb      	adds	r3, r7, #6
 8004b52:	881b      	ldrh	r3, [r3, #0]
 8004b54:	f7fc fe54 	bl	8001800 <HAL_DMA_Start_IT>
 8004b58:	1e03      	subs	r3, r0, #0
 8004b5a:	d009      	beq.n	8004b70 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2290      	movs	r2, #144	; 0x90
 8004b60:	2110      	movs	r1, #16
 8004b62:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	228c      	movs	r2, #140	; 0x8c
 8004b68:	2120      	movs	r1, #32
 8004b6a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e050      	b.n	8004c12 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d019      	beq.n	8004bac <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b78:	f3ef 8310 	mrs	r3, PRIMASK
 8004b7c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b82:	2301      	movs	r3, #1
 8004b84:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b88:	f383 8810 	msr	PRIMASK, r3
}
 8004b8c:	46c0      	nop			; (mov r8, r8)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2180      	movs	r1, #128	; 0x80
 8004b9a:	0049      	lsls	r1, r1, #1
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	601a      	str	r2, [r3, #0]
 8004ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ba2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba6:	f383 8810 	msr	PRIMASK, r3
}
 8004baa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bac:	f3ef 8310 	mrs	r3, PRIMASK
 8004bb0:	613b      	str	r3, [r7, #16]
  return(result);
 8004bb2:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bb4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	f383 8810 	msr	PRIMASK, r3
}
 8004bc0:	46c0      	nop			; (mov r8, r8)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	689a      	ldr	r2, [r3, #8]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2101      	movs	r1, #1
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	609a      	str	r2, [r3, #8]
 8004bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	f383 8810 	msr	PRIMASK, r3
}
 8004bdc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bde:	f3ef 8310 	mrs	r3, PRIMASK
 8004be2:	61fb      	str	r3, [r7, #28]
  return(result);
 8004be4:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004be6:	637b      	str	r3, [r7, #52]	; 0x34
 8004be8:	2301      	movs	r3, #1
 8004bea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bec:	6a3b      	ldr	r3, [r7, #32]
 8004bee:	f383 8810 	msr	PRIMASK, r3
}
 8004bf2:	46c0      	nop			; (mov r8, r8)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689a      	ldr	r2, [r3, #8]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2140      	movs	r1, #64	; 0x40
 8004c00:	430a      	orrs	r2, r1
 8004c02:	609a      	str	r2, [r3, #8]
 8004c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c06:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	f383 8810 	msr	PRIMASK, r3
}
 8004c0e:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	0018      	movs	r0, r3
 8004c14:	46bd      	mov	sp, r7
 8004c16:	b010      	add	sp, #64	; 0x40
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	46c0      	nop			; (mov r8, r8)
 8004c1c:	08004d75 	.word	0x08004d75
 8004c20:	08004ea5 	.word	0x08004ea5
 8004c24:	08004ee7 	.word	0x08004ee7

08004c28 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b08a      	sub	sp, #40	; 0x28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c30:	f3ef 8310 	mrs	r3, PRIMASK
 8004c34:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c36:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004c38:	627b      	str	r3, [r7, #36]	; 0x24
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f383 8810 	msr	PRIMASK, r3
}
 8004c44:	46c0      	nop			; (mov r8, r8)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	21c0      	movs	r1, #192	; 0xc0
 8004c52:	438a      	bics	r2, r1
 8004c54:	601a      	str	r2, [r3, #0]
 8004c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	f383 8810 	msr	PRIMASK, r3
}
 8004c60:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c62:	f3ef 8310 	mrs	r3, PRIMASK
 8004c66:	617b      	str	r3, [r7, #20]
  return(result);
 8004c68:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004c6a:	623b      	str	r3, [r7, #32]
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	f383 8810 	msr	PRIMASK, r3
}
 8004c76:	46c0      	nop			; (mov r8, r8)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	689a      	ldr	r2, [r3, #8]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4908      	ldr	r1, [pc, #32]	; (8004ca4 <UART_EndTxTransfer+0x7c>)
 8004c84:	400a      	ands	r2, r1
 8004c86:	609a      	str	r2, [r3, #8]
 8004c88:	6a3b      	ldr	r3, [r7, #32]
 8004c8a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	f383 8810 	msr	PRIMASK, r3
}
 8004c92:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2288      	movs	r2, #136	; 0x88
 8004c98:	2120      	movs	r1, #32
 8004c9a:	5099      	str	r1, [r3, r2]
}
 8004c9c:	46c0      	nop			; (mov r8, r8)
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	b00a      	add	sp, #40	; 0x28
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	ff7fffff 	.word	0xff7fffff

08004ca8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b08e      	sub	sp, #56	; 0x38
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cb0:	f3ef 8310 	mrs	r3, PRIMASK
 8004cb4:	617b      	str	r3, [r7, #20]
  return(result);
 8004cb6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004cb8:	637b      	str	r3, [r7, #52]	; 0x34
 8004cba:	2301      	movs	r3, #1
 8004cbc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	f383 8810 	msr	PRIMASK, r3
}
 8004cc4:	46c0      	nop			; (mov r8, r8)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4926      	ldr	r1, [pc, #152]	; (8004d6c <UART_EndRxTransfer+0xc4>)
 8004cd2:	400a      	ands	r2, r1
 8004cd4:	601a      	str	r2, [r3, #0]
 8004cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cd8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	f383 8810 	msr	PRIMASK, r3
}
 8004ce0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ce2:	f3ef 8310 	mrs	r3, PRIMASK
 8004ce6:	623b      	str	r3, [r7, #32]
  return(result);
 8004ce8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004cea:	633b      	str	r3, [r7, #48]	; 0x30
 8004cec:	2301      	movs	r3, #1
 8004cee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	f383 8810 	msr	PRIMASK, r3
}
 8004cf6:	46c0      	nop			; (mov r8, r8)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	689a      	ldr	r2, [r3, #8]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	491b      	ldr	r1, [pc, #108]	; (8004d70 <UART_EndRxTransfer+0xc8>)
 8004d04:	400a      	ands	r2, r1
 8004d06:	609a      	str	r2, [r3, #8]
 8004d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0e:	f383 8810 	msr	PRIMASK, r3
}
 8004d12:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d118      	bne.n	8004d4e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d1c:	f3ef 8310 	mrs	r3, PRIMASK
 8004d20:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d22:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d26:	2301      	movs	r3, #1
 8004d28:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f383 8810 	msr	PRIMASK, r3
}
 8004d30:	46c0      	nop			; (mov r8, r8)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2110      	movs	r1, #16
 8004d3e:	438a      	bics	r2, r1
 8004d40:	601a      	str	r2, [r3, #0]
 8004d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	f383 8810 	msr	PRIMASK, r3
}
 8004d4c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	228c      	movs	r2, #140	; 0x8c
 8004d52:	2120      	movs	r1, #32
 8004d54:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004d62:	46c0      	nop			; (mov r8, r8)
 8004d64:	46bd      	mov	sp, r7
 8004d66:	b00e      	add	sp, #56	; 0x38
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	46c0      	nop			; (mov r8, r8)
 8004d6c:	fffffedf 	.word	0xfffffedf
 8004d70:	effffffe 	.word	0xeffffffe

08004d74 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b094      	sub	sp, #80	; 0x50
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d80:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2220      	movs	r2, #32
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	d16f      	bne.n	8004e6e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8004d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d90:	225e      	movs	r2, #94	; 0x5e
 8004d92:	2100      	movs	r1, #0
 8004d94:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d96:	f3ef 8310 	mrs	r3, PRIMASK
 8004d9a:	61bb      	str	r3, [r7, #24]
  return(result);
 8004d9c:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004da0:	2301      	movs	r3, #1
 8004da2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	f383 8810 	msr	PRIMASK, r3
}
 8004daa:	46c0      	nop			; (mov r8, r8)
 8004dac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	493a      	ldr	r1, [pc, #232]	; (8004ea0 <UART_DMAReceiveCplt+0x12c>)
 8004db8:	400a      	ands	r2, r1
 8004dba:	601a      	str	r2, [r3, #0]
 8004dbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dbe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dc0:	6a3b      	ldr	r3, [r7, #32]
 8004dc2:	f383 8810 	msr	PRIMASK, r3
}
 8004dc6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dc8:	f3ef 8310 	mrs	r3, PRIMASK
 8004dcc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dd0:	647b      	str	r3, [r7, #68]	; 0x44
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd8:	f383 8810 	msr	PRIMASK, r3
}
 8004ddc:	46c0      	nop			; (mov r8, r8)
 8004dde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	689a      	ldr	r2, [r3, #8]
 8004de4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2101      	movs	r1, #1
 8004dea:	438a      	bics	r2, r1
 8004dec:	609a      	str	r2, [r3, #8]
 8004dee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df4:	f383 8810 	msr	PRIMASK, r3
}
 8004df8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dfa:	f3ef 8310 	mrs	r3, PRIMASK
 8004dfe:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e02:	643b      	str	r3, [r7, #64]	; 0x40
 8004e04:	2301      	movs	r3, #1
 8004e06:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e0a:	f383 8810 	msr	PRIMASK, r3
}
 8004e0e:	46c0      	nop			; (mov r8, r8)
 8004e10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	689a      	ldr	r2, [r3, #8]
 8004e16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2140      	movs	r1, #64	; 0x40
 8004e1c:	438a      	bics	r2, r1
 8004e1e:	609a      	str	r2, [r3, #8]
 8004e20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e22:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e26:	f383 8810 	msr	PRIMASK, r3
}
 8004e2a:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e2e:	228c      	movs	r2, #140	; 0x8c
 8004e30:	2120      	movs	r1, #32
 8004e32:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d118      	bne.n	8004e6e <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e3c:	f3ef 8310 	mrs	r3, PRIMASK
 8004e40:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e42:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e46:	2301      	movs	r3, #1
 8004e48:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	f383 8810 	msr	PRIMASK, r3
}
 8004e50:	46c0      	nop			; (mov r8, r8)
 8004e52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2110      	movs	r1, #16
 8004e5e:	438a      	bics	r2, r1
 8004e60:	601a      	str	r2, [r3, #0]
 8004e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e64:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f383 8810 	msr	PRIMASK, r3
}
 8004e6c:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e70:	2200      	movs	r2, #0
 8004e72:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d108      	bne.n	8004e8e <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e7e:	225c      	movs	r2, #92	; 0x5c
 8004e80:	5a9a      	ldrh	r2, [r3, r2]
 8004e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e84:	0011      	movs	r1, r2
 8004e86:	0018      	movs	r0, r3
 8004e88:	f7fb feea 	bl	8000c60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004e8c:	e003      	b.n	8004e96 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8004e8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e90:	0018      	movs	r0, r3
 8004e92:	f7ff f9c9 	bl	8004228 <HAL_UART_RxCpltCallback>
}
 8004e96:	46c0      	nop			; (mov r8, r8)
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	b014      	add	sp, #80	; 0x50
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	46c0      	nop			; (mov r8, r8)
 8004ea0:	fffffeff 	.word	0xfffffeff

08004ea4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d10a      	bne.n	8004ed6 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	225c      	movs	r2, #92	; 0x5c
 8004ec4:	5a9b      	ldrh	r3, [r3, r2]
 8004ec6:	085b      	lsrs	r3, r3, #1
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	0011      	movs	r1, r2
 8004ece:	0018      	movs	r0, r3
 8004ed0:	f7fb fec6 	bl	8000c60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004ed4:	e003      	b.n	8004ede <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	0018      	movs	r0, r3
 8004eda:	f7ff f9ad 	bl	8004238 <HAL_UART_RxHalfCpltCallback>
}
 8004ede:	46c0      	nop			; (mov r8, r8)
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	b004      	add	sp, #16
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b086      	sub	sp, #24
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	2288      	movs	r2, #136	; 0x88
 8004ef8:	589b      	ldr	r3, [r3, r2]
 8004efa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	228c      	movs	r2, #140	; 0x8c
 8004f00:	589b      	ldr	r3, [r3, r2]
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	2280      	movs	r2, #128	; 0x80
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	2b80      	cmp	r3, #128	; 0x80
 8004f10:	d10a      	bne.n	8004f28 <UART_DMAError+0x42>
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	2b21      	cmp	r3, #33	; 0x21
 8004f16:	d107      	bne.n	8004f28 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	2256      	movs	r2, #86	; 0x56
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	0018      	movs	r0, r3
 8004f24:	f7ff fe80 	bl	8004c28 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	2240      	movs	r2, #64	; 0x40
 8004f30:	4013      	ands	r3, r2
 8004f32:	2b40      	cmp	r3, #64	; 0x40
 8004f34:	d10a      	bne.n	8004f4c <UART_DMAError+0x66>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2b22      	cmp	r3, #34	; 0x22
 8004f3a:	d107      	bne.n	8004f4c <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	225e      	movs	r2, #94	; 0x5e
 8004f40:	2100      	movs	r1, #0
 8004f42:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	0018      	movs	r0, r3
 8004f48:	f7ff feae 	bl	8004ca8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	2290      	movs	r2, #144	; 0x90
 8004f50:	589b      	ldr	r3, [r3, r2]
 8004f52:	2210      	movs	r2, #16
 8004f54:	431a      	orrs	r2, r3
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	2190      	movs	r1, #144	; 0x90
 8004f5a:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	0018      	movs	r0, r3
 8004f60:	f7ff f972 	bl	8004248 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f64:	46c0      	nop			; (mov r8, r8)
 8004f66:	46bd      	mov	sp, r7
 8004f68:	b006      	add	sp, #24
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	225e      	movs	r2, #94	; 0x5e
 8004f7e:	2100      	movs	r1, #0
 8004f80:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2256      	movs	r2, #86	; 0x56
 8004f86:	2100      	movs	r1, #0
 8004f88:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	0018      	movs	r0, r3
 8004f8e:	f7ff f95b 	bl	8004248 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f92:	46c0      	nop			; (mov r8, r8)
 8004f94:	46bd      	mov	sp, r7
 8004f96:	b004      	add	sp, #16
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b086      	sub	sp, #24
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fa2:	f3ef 8310 	mrs	r3, PRIMASK
 8004fa6:	60bb      	str	r3, [r7, #8]
  return(result);
 8004fa8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004faa:	617b      	str	r3, [r7, #20]
 8004fac:	2301      	movs	r3, #1
 8004fae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f383 8810 	msr	PRIMASK, r3
}
 8004fb6:	46c0      	nop			; (mov r8, r8)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2140      	movs	r1, #64	; 0x40
 8004fc4:	438a      	bics	r2, r1
 8004fc6:	601a      	str	r2, [r3, #0]
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	f383 8810 	msr	PRIMASK, r3
}
 8004fd2:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2288      	movs	r2, #136	; 0x88
 8004fd8:	2120      	movs	r1, #32
 8004fda:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	0018      	movs	r0, r3
 8004fe6:	f7ff f917 	bl	8004218 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fea:	46c0      	nop			; (mov r8, r8)
 8004fec:	46bd      	mov	sp, r7
 8004fee:	b006      	add	sp, #24
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b082      	sub	sp, #8
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004ffa:	46c0      	nop			; (mov r8, r8)
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	b002      	add	sp, #8
 8005000:	bd80      	pop	{r7, pc}

08005002 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b082      	sub	sp, #8
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800500a:	46c0      	nop			; (mov r8, r8)
 800500c:	46bd      	mov	sp, r7
 800500e:	b002      	add	sp, #8
 8005010:	bd80      	pop	{r7, pc}

08005012 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005012:	b580      	push	{r7, lr}
 8005014:	b082      	sub	sp, #8
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800501a:	46c0      	nop			; (mov r8, r8)
 800501c:	46bd      	mov	sp, r7
 800501e:	b002      	add	sp, #8
 8005020:	bd80      	pop	{r7, pc}
	...

08005024 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2284      	movs	r2, #132	; 0x84
 8005030:	5c9b      	ldrb	r3, [r3, r2]
 8005032:	2b01      	cmp	r3, #1
 8005034:	d101      	bne.n	800503a <HAL_UARTEx_DisableFifoMode+0x16>
 8005036:	2302      	movs	r3, #2
 8005038:	e027      	b.n	800508a <HAL_UARTEx_DisableFifoMode+0x66>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2284      	movs	r2, #132	; 0x84
 800503e:	2101      	movs	r1, #1
 8005040:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2288      	movs	r2, #136	; 0x88
 8005046:	2124      	movs	r1, #36	; 0x24
 8005048:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2101      	movs	r1, #1
 800505e:	438a      	bics	r2, r1
 8005060:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	4a0b      	ldr	r2, [pc, #44]	; (8005094 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005066:	4013      	ands	r3, r2
 8005068:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2288      	movs	r2, #136	; 0x88
 800507c:	2120      	movs	r1, #32
 800507e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2284      	movs	r2, #132	; 0x84
 8005084:	2100      	movs	r1, #0
 8005086:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	0018      	movs	r0, r3
 800508c:	46bd      	mov	sp, r7
 800508e:	b004      	add	sp, #16
 8005090:	bd80      	pop	{r7, pc}
 8005092:	46c0      	nop			; (mov r8, r8)
 8005094:	dfffffff 	.word	0xdfffffff

08005098 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2284      	movs	r2, #132	; 0x84
 80050a6:	5c9b      	ldrb	r3, [r3, r2]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d101      	bne.n	80050b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80050ac:	2302      	movs	r3, #2
 80050ae:	e02e      	b.n	800510e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2284      	movs	r2, #132	; 0x84
 80050b4:	2101      	movs	r1, #1
 80050b6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2288      	movs	r2, #136	; 0x88
 80050bc:	2124      	movs	r1, #36	; 0x24
 80050be:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2101      	movs	r1, #1
 80050d4:	438a      	bics	r2, r1
 80050d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	00db      	lsls	r3, r3, #3
 80050e0:	08d9      	lsrs	r1, r3, #3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	0018      	movs	r0, r3
 80050f0:	f000 f8bc 	bl	800526c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2288      	movs	r2, #136	; 0x88
 8005100:	2120      	movs	r1, #32
 8005102:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2284      	movs	r2, #132	; 0x84
 8005108:	2100      	movs	r1, #0
 800510a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	0018      	movs	r0, r3
 8005110:	46bd      	mov	sp, r7
 8005112:	b004      	add	sp, #16
 8005114:	bd80      	pop	{r7, pc}
	...

08005118 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2284      	movs	r2, #132	; 0x84
 8005126:	5c9b      	ldrb	r3, [r3, r2]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d101      	bne.n	8005130 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800512c:	2302      	movs	r3, #2
 800512e:	e02f      	b.n	8005190 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2284      	movs	r2, #132	; 0x84
 8005134:	2101      	movs	r1, #1
 8005136:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2288      	movs	r2, #136	; 0x88
 800513c:	2124      	movs	r1, #36	; 0x24
 800513e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2101      	movs	r1, #1
 8005154:	438a      	bics	r2, r1
 8005156:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	4a0e      	ldr	r2, [pc, #56]	; (8005198 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005160:	4013      	ands	r3, r2
 8005162:	0019      	movs	r1, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	683a      	ldr	r2, [r7, #0]
 800516a:	430a      	orrs	r2, r1
 800516c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	0018      	movs	r0, r3
 8005172:	f000 f87b 	bl	800526c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2288      	movs	r2, #136	; 0x88
 8005182:	2120      	movs	r1, #32
 8005184:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2284      	movs	r2, #132	; 0x84
 800518a:	2100      	movs	r1, #0
 800518c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	0018      	movs	r0, r3
 8005192:	46bd      	mov	sp, r7
 8005194:	b004      	add	sp, #16
 8005196:	bd80      	pop	{r7, pc}
 8005198:	f1ffffff 	.word	0xf1ffffff

0800519c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800519c:	b5b0      	push	{r4, r5, r7, lr}
 800519e:	b08a      	sub	sp, #40	; 0x28
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	1dbb      	adds	r3, r7, #6
 80051a8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	228c      	movs	r2, #140	; 0x8c
 80051ae:	589b      	ldr	r3, [r3, r2]
 80051b0:	2b20      	cmp	r3, #32
 80051b2:	d156      	bne.n	8005262 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80051ba:	1dbb      	adds	r3, r7, #6
 80051bc:	881b      	ldrh	r3, [r3, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e04e      	b.n	8005264 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	689a      	ldr	r2, [r3, #8]
 80051ca:	2380      	movs	r3, #128	; 0x80
 80051cc:	015b      	lsls	r3, r3, #5
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d109      	bne.n	80051e6 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d105      	bne.n	80051e6 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	2201      	movs	r2, #1
 80051de:	4013      	ands	r3, r2
 80051e0:	d001      	beq.n	80051e6 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e03e      	b.n	8005264 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2201      	movs	r2, #1
 80051ea:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80051f2:	2527      	movs	r5, #39	; 0x27
 80051f4:	197c      	adds	r4, r7, r5
 80051f6:	1dbb      	adds	r3, r7, #6
 80051f8:	881a      	ldrh	r2, [r3, #0]
 80051fa:	68b9      	ldr	r1, [r7, #8]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	0018      	movs	r0, r3
 8005200:	f7ff fc6c 	bl	8004adc <UART_Start_Receive_DMA>
 8005204:	0003      	movs	r3, r0
 8005206:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005208:	197b      	adds	r3, r7, r5
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d124      	bne.n	800525a <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005214:	2b01      	cmp	r3, #1
 8005216:	d11c      	bne.n	8005252 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2210      	movs	r2, #16
 800521e:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005220:	f3ef 8310 	mrs	r3, PRIMASK
 8005224:	617b      	str	r3, [r7, #20]
  return(result);
 8005226:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005228:	623b      	str	r3, [r7, #32]
 800522a:	2301      	movs	r3, #1
 800522c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	f383 8810 	msr	PRIMASK, r3
}
 8005234:	46c0      	nop			; (mov r8, r8)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2110      	movs	r1, #16
 8005242:	430a      	orrs	r2, r1
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	6a3b      	ldr	r3, [r7, #32]
 8005248:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	f383 8810 	msr	PRIMASK, r3
}
 8005250:	e003      	b.n	800525a <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005252:	2327      	movs	r3, #39	; 0x27
 8005254:	18fb      	adds	r3, r7, r3
 8005256:	2201      	movs	r2, #1
 8005258:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 800525a:	2327      	movs	r3, #39	; 0x27
 800525c:	18fb      	adds	r3, r7, r3
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	e000      	b.n	8005264 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8005262:	2302      	movs	r3, #2
  }
}
 8005264:	0018      	movs	r0, r3
 8005266:	46bd      	mov	sp, r7
 8005268:	b00a      	add	sp, #40	; 0x28
 800526a:	bdb0      	pop	{r4, r5, r7, pc}

0800526c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800526c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005278:	2b00      	cmp	r3, #0
 800527a:	d108      	bne.n	800528e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	226a      	movs	r2, #106	; 0x6a
 8005280:	2101      	movs	r1, #1
 8005282:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2268      	movs	r2, #104	; 0x68
 8005288:	2101      	movs	r1, #1
 800528a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800528c:	e043      	b.n	8005316 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800528e:	260f      	movs	r6, #15
 8005290:	19bb      	adds	r3, r7, r6
 8005292:	2208      	movs	r2, #8
 8005294:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005296:	200e      	movs	r0, #14
 8005298:	183b      	adds	r3, r7, r0
 800529a:	2208      	movs	r2, #8
 800529c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	0e5b      	lsrs	r3, r3, #25
 80052a6:	b2da      	uxtb	r2, r3
 80052a8:	240d      	movs	r4, #13
 80052aa:	193b      	adds	r3, r7, r4
 80052ac:	2107      	movs	r1, #7
 80052ae:	400a      	ands	r2, r1
 80052b0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	0f5b      	lsrs	r3, r3, #29
 80052ba:	b2da      	uxtb	r2, r3
 80052bc:	250c      	movs	r5, #12
 80052be:	197b      	adds	r3, r7, r5
 80052c0:	2107      	movs	r1, #7
 80052c2:	400a      	ands	r2, r1
 80052c4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80052c6:	183b      	adds	r3, r7, r0
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	197a      	adds	r2, r7, r5
 80052cc:	7812      	ldrb	r2, [r2, #0]
 80052ce:	4914      	ldr	r1, [pc, #80]	; (8005320 <UARTEx_SetNbDataToProcess+0xb4>)
 80052d0:	5c8a      	ldrb	r2, [r1, r2]
 80052d2:	435a      	muls	r2, r3
 80052d4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80052d6:	197b      	adds	r3, r7, r5
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	4a12      	ldr	r2, [pc, #72]	; (8005324 <UARTEx_SetNbDataToProcess+0xb8>)
 80052dc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80052de:	0019      	movs	r1, r3
 80052e0:	f7fa ffac 	bl	800023c <__divsi3>
 80052e4:	0003      	movs	r3, r0
 80052e6:	b299      	uxth	r1, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	226a      	movs	r2, #106	; 0x6a
 80052ec:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052ee:	19bb      	adds	r3, r7, r6
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	193a      	adds	r2, r7, r4
 80052f4:	7812      	ldrb	r2, [r2, #0]
 80052f6:	490a      	ldr	r1, [pc, #40]	; (8005320 <UARTEx_SetNbDataToProcess+0xb4>)
 80052f8:	5c8a      	ldrb	r2, [r1, r2]
 80052fa:	435a      	muls	r2, r3
 80052fc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80052fe:	193b      	adds	r3, r7, r4
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	4a08      	ldr	r2, [pc, #32]	; (8005324 <UARTEx_SetNbDataToProcess+0xb8>)
 8005304:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005306:	0019      	movs	r1, r3
 8005308:	f7fa ff98 	bl	800023c <__divsi3>
 800530c:	0003      	movs	r3, r0
 800530e:	b299      	uxth	r1, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2268      	movs	r2, #104	; 0x68
 8005314:	5299      	strh	r1, [r3, r2]
}
 8005316:	46c0      	nop			; (mov r8, r8)
 8005318:	46bd      	mov	sp, r7
 800531a:	b005      	add	sp, #20
 800531c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800531e:	46c0      	nop			; (mov r8, r8)
 8005320:	0800755c 	.word	0x0800755c
 8005324:	08007564 	.word	0x08007564

08005328 <__errno>:
 8005328:	4b01      	ldr	r3, [pc, #4]	; (8005330 <__errno+0x8>)
 800532a:	6818      	ldr	r0, [r3, #0]
 800532c:	4770      	bx	lr
 800532e:	46c0      	nop			; (mov r8, r8)
 8005330:	2000009c 	.word	0x2000009c

08005334 <__libc_init_array>:
 8005334:	b570      	push	{r4, r5, r6, lr}
 8005336:	2600      	movs	r6, #0
 8005338:	4d0c      	ldr	r5, [pc, #48]	; (800536c <__libc_init_array+0x38>)
 800533a:	4c0d      	ldr	r4, [pc, #52]	; (8005370 <__libc_init_array+0x3c>)
 800533c:	1b64      	subs	r4, r4, r5
 800533e:	10a4      	asrs	r4, r4, #2
 8005340:	42a6      	cmp	r6, r4
 8005342:	d109      	bne.n	8005358 <__libc_init_array+0x24>
 8005344:	2600      	movs	r6, #0
 8005346:	f001 ffe9 	bl	800731c <_init>
 800534a:	4d0a      	ldr	r5, [pc, #40]	; (8005374 <__libc_init_array+0x40>)
 800534c:	4c0a      	ldr	r4, [pc, #40]	; (8005378 <__libc_init_array+0x44>)
 800534e:	1b64      	subs	r4, r4, r5
 8005350:	10a4      	asrs	r4, r4, #2
 8005352:	42a6      	cmp	r6, r4
 8005354:	d105      	bne.n	8005362 <__libc_init_array+0x2e>
 8005356:	bd70      	pop	{r4, r5, r6, pc}
 8005358:	00b3      	lsls	r3, r6, #2
 800535a:	58eb      	ldr	r3, [r5, r3]
 800535c:	4798      	blx	r3
 800535e:	3601      	adds	r6, #1
 8005360:	e7ee      	b.n	8005340 <__libc_init_array+0xc>
 8005362:	00b3      	lsls	r3, r6, #2
 8005364:	58eb      	ldr	r3, [r5, r3]
 8005366:	4798      	blx	r3
 8005368:	3601      	adds	r6, #1
 800536a:	e7f2      	b.n	8005352 <__libc_init_array+0x1e>
 800536c:	080077d8 	.word	0x080077d8
 8005370:	080077d8 	.word	0x080077d8
 8005374:	080077d8 	.word	0x080077d8
 8005378:	080077dc 	.word	0x080077dc

0800537c <memset>:
 800537c:	0003      	movs	r3, r0
 800537e:	1882      	adds	r2, r0, r2
 8005380:	4293      	cmp	r3, r2
 8005382:	d100      	bne.n	8005386 <memset+0xa>
 8005384:	4770      	bx	lr
 8005386:	7019      	strb	r1, [r3, #0]
 8005388:	3301      	adds	r3, #1
 800538a:	e7f9      	b.n	8005380 <memset+0x4>

0800538c <sniprintf>:
 800538c:	b40c      	push	{r2, r3}
 800538e:	b530      	push	{r4, r5, lr}
 8005390:	4b17      	ldr	r3, [pc, #92]	; (80053f0 <sniprintf+0x64>)
 8005392:	000c      	movs	r4, r1
 8005394:	681d      	ldr	r5, [r3, #0]
 8005396:	b09d      	sub	sp, #116	; 0x74
 8005398:	2900      	cmp	r1, #0
 800539a:	da08      	bge.n	80053ae <sniprintf+0x22>
 800539c:	238b      	movs	r3, #139	; 0x8b
 800539e:	2001      	movs	r0, #1
 80053a0:	602b      	str	r3, [r5, #0]
 80053a2:	4240      	negs	r0, r0
 80053a4:	b01d      	add	sp, #116	; 0x74
 80053a6:	bc30      	pop	{r4, r5}
 80053a8:	bc08      	pop	{r3}
 80053aa:	b002      	add	sp, #8
 80053ac:	4718      	bx	r3
 80053ae:	2382      	movs	r3, #130	; 0x82
 80053b0:	466a      	mov	r2, sp
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	8293      	strh	r3, [r2, #20]
 80053b6:	2300      	movs	r3, #0
 80053b8:	9002      	str	r0, [sp, #8]
 80053ba:	9006      	str	r0, [sp, #24]
 80053bc:	4299      	cmp	r1, r3
 80053be:	d000      	beq.n	80053c2 <sniprintf+0x36>
 80053c0:	1e4b      	subs	r3, r1, #1
 80053c2:	9304      	str	r3, [sp, #16]
 80053c4:	9307      	str	r3, [sp, #28]
 80053c6:	2301      	movs	r3, #1
 80053c8:	466a      	mov	r2, sp
 80053ca:	425b      	negs	r3, r3
 80053cc:	82d3      	strh	r3, [r2, #22]
 80053ce:	0028      	movs	r0, r5
 80053d0:	ab21      	add	r3, sp, #132	; 0x84
 80053d2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80053d4:	a902      	add	r1, sp, #8
 80053d6:	9301      	str	r3, [sp, #4]
 80053d8:	f000 face 	bl	8005978 <_svfiprintf_r>
 80053dc:	1c43      	adds	r3, r0, #1
 80053de:	da01      	bge.n	80053e4 <sniprintf+0x58>
 80053e0:	238b      	movs	r3, #139	; 0x8b
 80053e2:	602b      	str	r3, [r5, #0]
 80053e4:	2c00      	cmp	r4, #0
 80053e6:	d0dd      	beq.n	80053a4 <sniprintf+0x18>
 80053e8:	2300      	movs	r3, #0
 80053ea:	9a02      	ldr	r2, [sp, #8]
 80053ec:	7013      	strb	r3, [r2, #0]
 80053ee:	e7d9      	b.n	80053a4 <sniprintf+0x18>
 80053f0:	2000009c 	.word	0x2000009c

080053f4 <siprintf>:
 80053f4:	b40e      	push	{r1, r2, r3}
 80053f6:	b500      	push	{lr}
 80053f8:	490b      	ldr	r1, [pc, #44]	; (8005428 <siprintf+0x34>)
 80053fa:	b09c      	sub	sp, #112	; 0x70
 80053fc:	ab1d      	add	r3, sp, #116	; 0x74
 80053fe:	9002      	str	r0, [sp, #8]
 8005400:	9006      	str	r0, [sp, #24]
 8005402:	9107      	str	r1, [sp, #28]
 8005404:	9104      	str	r1, [sp, #16]
 8005406:	4809      	ldr	r0, [pc, #36]	; (800542c <siprintf+0x38>)
 8005408:	4909      	ldr	r1, [pc, #36]	; (8005430 <siprintf+0x3c>)
 800540a:	cb04      	ldmia	r3!, {r2}
 800540c:	9105      	str	r1, [sp, #20]
 800540e:	6800      	ldr	r0, [r0, #0]
 8005410:	a902      	add	r1, sp, #8
 8005412:	9301      	str	r3, [sp, #4]
 8005414:	f000 fab0 	bl	8005978 <_svfiprintf_r>
 8005418:	2300      	movs	r3, #0
 800541a:	9a02      	ldr	r2, [sp, #8]
 800541c:	7013      	strb	r3, [r2, #0]
 800541e:	b01c      	add	sp, #112	; 0x70
 8005420:	bc08      	pop	{r3}
 8005422:	b003      	add	sp, #12
 8005424:	4718      	bx	r3
 8005426:	46c0      	nop			; (mov r8, r8)
 8005428:	7fffffff 	.word	0x7fffffff
 800542c:	2000009c 	.word	0x2000009c
 8005430:	ffff0208 	.word	0xffff0208

08005434 <siscanf>:
 8005434:	b40e      	push	{r1, r2, r3}
 8005436:	b530      	push	{r4, r5, lr}
 8005438:	2381      	movs	r3, #129	; 0x81
 800543a:	b09c      	sub	sp, #112	; 0x70
 800543c:	466a      	mov	r2, sp
 800543e:	ac1f      	add	r4, sp, #124	; 0x7c
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	cc20      	ldmia	r4!, {r5}
 8005444:	8293      	strh	r3, [r2, #20]
 8005446:	9002      	str	r0, [sp, #8]
 8005448:	9006      	str	r0, [sp, #24]
 800544a:	f7fa fe5b 	bl	8000104 <strlen>
 800544e:	4b0b      	ldr	r3, [pc, #44]	; (800547c <siscanf+0x48>)
 8005450:	466a      	mov	r2, sp
 8005452:	930b      	str	r3, [sp, #44]	; 0x2c
 8005454:	2300      	movs	r3, #0
 8005456:	9003      	str	r0, [sp, #12]
 8005458:	9007      	str	r0, [sp, #28]
 800545a:	4809      	ldr	r0, [pc, #36]	; (8005480 <siscanf+0x4c>)
 800545c:	930f      	str	r3, [sp, #60]	; 0x3c
 800545e:	9314      	str	r3, [sp, #80]	; 0x50
 8005460:	3b01      	subs	r3, #1
 8005462:	82d3      	strh	r3, [r2, #22]
 8005464:	a902      	add	r1, sp, #8
 8005466:	0023      	movs	r3, r4
 8005468:	002a      	movs	r2, r5
 800546a:	6800      	ldr	r0, [r0, #0]
 800546c:	9401      	str	r4, [sp, #4]
 800546e:	f000 fbdf 	bl	8005c30 <__ssvfiscanf_r>
 8005472:	b01c      	add	sp, #112	; 0x70
 8005474:	bc30      	pop	{r4, r5}
 8005476:	bc08      	pop	{r3}
 8005478:	b003      	add	sp, #12
 800547a:	4718      	bx	r3
 800547c:	080054ad 	.word	0x080054ad
 8005480:	2000009c 	.word	0x2000009c

08005484 <__sread>:
 8005484:	b570      	push	{r4, r5, r6, lr}
 8005486:	000c      	movs	r4, r1
 8005488:	250e      	movs	r5, #14
 800548a:	5f49      	ldrsh	r1, [r1, r5]
 800548c:	f001 f994 	bl	80067b8 <_read_r>
 8005490:	2800      	cmp	r0, #0
 8005492:	db03      	blt.n	800549c <__sread+0x18>
 8005494:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005496:	181b      	adds	r3, r3, r0
 8005498:	6563      	str	r3, [r4, #84]	; 0x54
 800549a:	bd70      	pop	{r4, r5, r6, pc}
 800549c:	89a3      	ldrh	r3, [r4, #12]
 800549e:	4a02      	ldr	r2, [pc, #8]	; (80054a8 <__sread+0x24>)
 80054a0:	4013      	ands	r3, r2
 80054a2:	81a3      	strh	r3, [r4, #12]
 80054a4:	e7f9      	b.n	800549a <__sread+0x16>
 80054a6:	46c0      	nop			; (mov r8, r8)
 80054a8:	ffffefff 	.word	0xffffefff

080054ac <__seofread>:
 80054ac:	2000      	movs	r0, #0
 80054ae:	4770      	bx	lr

080054b0 <__swrite>:
 80054b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054b2:	001f      	movs	r7, r3
 80054b4:	898b      	ldrh	r3, [r1, #12]
 80054b6:	0005      	movs	r5, r0
 80054b8:	000c      	movs	r4, r1
 80054ba:	0016      	movs	r6, r2
 80054bc:	05db      	lsls	r3, r3, #23
 80054be:	d505      	bpl.n	80054cc <__swrite+0x1c>
 80054c0:	230e      	movs	r3, #14
 80054c2:	5ec9      	ldrsh	r1, [r1, r3]
 80054c4:	2200      	movs	r2, #0
 80054c6:	2302      	movs	r3, #2
 80054c8:	f000 f8f4 	bl	80056b4 <_lseek_r>
 80054cc:	89a3      	ldrh	r3, [r4, #12]
 80054ce:	4a05      	ldr	r2, [pc, #20]	; (80054e4 <__swrite+0x34>)
 80054d0:	0028      	movs	r0, r5
 80054d2:	4013      	ands	r3, r2
 80054d4:	81a3      	strh	r3, [r4, #12]
 80054d6:	0032      	movs	r2, r6
 80054d8:	230e      	movs	r3, #14
 80054da:	5ee1      	ldrsh	r1, [r4, r3]
 80054dc:	003b      	movs	r3, r7
 80054de:	f000 f895 	bl	800560c <_write_r>
 80054e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054e4:	ffffefff 	.word	0xffffefff

080054e8 <__sseek>:
 80054e8:	b570      	push	{r4, r5, r6, lr}
 80054ea:	000c      	movs	r4, r1
 80054ec:	250e      	movs	r5, #14
 80054ee:	5f49      	ldrsh	r1, [r1, r5]
 80054f0:	f000 f8e0 	bl	80056b4 <_lseek_r>
 80054f4:	89a3      	ldrh	r3, [r4, #12]
 80054f6:	1c42      	adds	r2, r0, #1
 80054f8:	d103      	bne.n	8005502 <__sseek+0x1a>
 80054fa:	4a05      	ldr	r2, [pc, #20]	; (8005510 <__sseek+0x28>)
 80054fc:	4013      	ands	r3, r2
 80054fe:	81a3      	strh	r3, [r4, #12]
 8005500:	bd70      	pop	{r4, r5, r6, pc}
 8005502:	2280      	movs	r2, #128	; 0x80
 8005504:	0152      	lsls	r2, r2, #5
 8005506:	4313      	orrs	r3, r2
 8005508:	81a3      	strh	r3, [r4, #12]
 800550a:	6560      	str	r0, [r4, #84]	; 0x54
 800550c:	e7f8      	b.n	8005500 <__sseek+0x18>
 800550e:	46c0      	nop			; (mov r8, r8)
 8005510:	ffffefff 	.word	0xffffefff

08005514 <__sclose>:
 8005514:	b510      	push	{r4, lr}
 8005516:	230e      	movs	r3, #14
 8005518:	5ec9      	ldrsh	r1, [r1, r3]
 800551a:	f000 f8a9 	bl	8005670 <_close_r>
 800551e:	bd10      	pop	{r4, pc}

08005520 <strncmp>:
 8005520:	b530      	push	{r4, r5, lr}
 8005522:	0005      	movs	r5, r0
 8005524:	1e10      	subs	r0, r2, #0
 8005526:	d008      	beq.n	800553a <strncmp+0x1a>
 8005528:	2400      	movs	r4, #0
 800552a:	3a01      	subs	r2, #1
 800552c:	5d2b      	ldrb	r3, [r5, r4]
 800552e:	5d08      	ldrb	r0, [r1, r4]
 8005530:	4283      	cmp	r3, r0
 8005532:	d101      	bne.n	8005538 <strncmp+0x18>
 8005534:	4294      	cmp	r4, r2
 8005536:	d101      	bne.n	800553c <strncmp+0x1c>
 8005538:	1a18      	subs	r0, r3, r0
 800553a:	bd30      	pop	{r4, r5, pc}
 800553c:	3401      	adds	r4, #1
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1f4      	bne.n	800552c <strncmp+0xc>
 8005542:	e7f9      	b.n	8005538 <strncmp+0x18>

08005544 <strtok>:
 8005544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005546:	4b16      	ldr	r3, [pc, #88]	; (80055a0 <strtok+0x5c>)
 8005548:	0005      	movs	r5, r0
 800554a:	681f      	ldr	r7, [r3, #0]
 800554c:	000e      	movs	r6, r1
 800554e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8005550:	2c00      	cmp	r4, #0
 8005552:	d11d      	bne.n	8005590 <strtok+0x4c>
 8005554:	2050      	movs	r0, #80	; 0x50
 8005556:	f000 f8c1 	bl	80056dc <malloc>
 800555a:	1e02      	subs	r2, r0, #0
 800555c:	65b8      	str	r0, [r7, #88]	; 0x58
 800555e:	d104      	bne.n	800556a <strtok+0x26>
 8005560:	2157      	movs	r1, #87	; 0x57
 8005562:	4b10      	ldr	r3, [pc, #64]	; (80055a4 <strtok+0x60>)
 8005564:	4810      	ldr	r0, [pc, #64]	; (80055a8 <strtok+0x64>)
 8005566:	f000 f865 	bl	8005634 <__assert_func>
 800556a:	6004      	str	r4, [r0, #0]
 800556c:	6044      	str	r4, [r0, #4]
 800556e:	6084      	str	r4, [r0, #8]
 8005570:	60c4      	str	r4, [r0, #12]
 8005572:	6104      	str	r4, [r0, #16]
 8005574:	6144      	str	r4, [r0, #20]
 8005576:	6184      	str	r4, [r0, #24]
 8005578:	6284      	str	r4, [r0, #40]	; 0x28
 800557a:	62c4      	str	r4, [r0, #44]	; 0x2c
 800557c:	6304      	str	r4, [r0, #48]	; 0x30
 800557e:	6344      	str	r4, [r0, #52]	; 0x34
 8005580:	6384      	str	r4, [r0, #56]	; 0x38
 8005582:	63c4      	str	r4, [r0, #60]	; 0x3c
 8005584:	6404      	str	r4, [r0, #64]	; 0x40
 8005586:	6444      	str	r4, [r0, #68]	; 0x44
 8005588:	6484      	str	r4, [r0, #72]	; 0x48
 800558a:	64c4      	str	r4, [r0, #76]	; 0x4c
 800558c:	7704      	strb	r4, [r0, #28]
 800558e:	6244      	str	r4, [r0, #36]	; 0x24
 8005590:	0031      	movs	r1, r6
 8005592:	0028      	movs	r0, r5
 8005594:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005596:	2301      	movs	r3, #1
 8005598:	f000 f808 	bl	80055ac <__strtok_r>
 800559c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800559e:	46c0      	nop			; (mov r8, r8)
 80055a0:	2000009c 	.word	0x2000009c
 80055a4:	08007570 	.word	0x08007570
 80055a8:	08007587 	.word	0x08007587

080055ac <__strtok_r>:
 80055ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055ae:	2800      	cmp	r0, #0
 80055b0:	d102      	bne.n	80055b8 <__strtok_r+0xc>
 80055b2:	6810      	ldr	r0, [r2, #0]
 80055b4:	2800      	cmp	r0, #0
 80055b6:	d013      	beq.n	80055e0 <__strtok_r+0x34>
 80055b8:	0004      	movs	r4, r0
 80055ba:	0020      	movs	r0, r4
 80055bc:	000e      	movs	r6, r1
 80055be:	7805      	ldrb	r5, [r0, #0]
 80055c0:	3401      	adds	r4, #1
 80055c2:	7837      	ldrb	r7, [r6, #0]
 80055c4:	2f00      	cmp	r7, #0
 80055c6:	d104      	bne.n	80055d2 <__strtok_r+0x26>
 80055c8:	2d00      	cmp	r5, #0
 80055ca:	d10f      	bne.n	80055ec <__strtok_r+0x40>
 80055cc:	0028      	movs	r0, r5
 80055ce:	6015      	str	r5, [r2, #0]
 80055d0:	e006      	b.n	80055e0 <__strtok_r+0x34>
 80055d2:	3601      	adds	r6, #1
 80055d4:	42bd      	cmp	r5, r7
 80055d6:	d1f4      	bne.n	80055c2 <__strtok_r+0x16>
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1ee      	bne.n	80055ba <__strtok_r+0xe>
 80055dc:	6014      	str	r4, [r2, #0]
 80055de:	7003      	strb	r3, [r0, #0]
 80055e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055e2:	002f      	movs	r7, r5
 80055e4:	e00f      	b.n	8005606 <__strtok_r+0x5a>
 80055e6:	3301      	adds	r3, #1
 80055e8:	2e00      	cmp	r6, #0
 80055ea:	d104      	bne.n	80055f6 <__strtok_r+0x4a>
 80055ec:	0023      	movs	r3, r4
 80055ee:	3401      	adds	r4, #1
 80055f0:	781d      	ldrb	r5, [r3, #0]
 80055f2:	0027      	movs	r7, r4
 80055f4:	000b      	movs	r3, r1
 80055f6:	781e      	ldrb	r6, [r3, #0]
 80055f8:	42b5      	cmp	r5, r6
 80055fa:	d1f4      	bne.n	80055e6 <__strtok_r+0x3a>
 80055fc:	2d00      	cmp	r5, #0
 80055fe:	d0f0      	beq.n	80055e2 <__strtok_r+0x36>
 8005600:	2300      	movs	r3, #0
 8005602:	3c01      	subs	r4, #1
 8005604:	7023      	strb	r3, [r4, #0]
 8005606:	6017      	str	r7, [r2, #0]
 8005608:	e7ea      	b.n	80055e0 <__strtok_r+0x34>
	...

0800560c <_write_r>:
 800560c:	b570      	push	{r4, r5, r6, lr}
 800560e:	0004      	movs	r4, r0
 8005610:	0008      	movs	r0, r1
 8005612:	0011      	movs	r1, r2
 8005614:	001a      	movs	r2, r3
 8005616:	2300      	movs	r3, #0
 8005618:	4d05      	ldr	r5, [pc, #20]	; (8005630 <_write_r+0x24>)
 800561a:	602b      	str	r3, [r5, #0]
 800561c:	f7fb fe2f 	bl	800127e <_write>
 8005620:	1c43      	adds	r3, r0, #1
 8005622:	d103      	bne.n	800562c <_write_r+0x20>
 8005624:	682b      	ldr	r3, [r5, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d000      	beq.n	800562c <_write_r+0x20>
 800562a:	6023      	str	r3, [r4, #0]
 800562c:	bd70      	pop	{r4, r5, r6, pc}
 800562e:	46c0      	nop			; (mov r8, r8)
 8005630:	200004f0 	.word	0x200004f0

08005634 <__assert_func>:
 8005634:	b530      	push	{r4, r5, lr}
 8005636:	0014      	movs	r4, r2
 8005638:	001a      	movs	r2, r3
 800563a:	4b09      	ldr	r3, [pc, #36]	; (8005660 <__assert_func+0x2c>)
 800563c:	0005      	movs	r5, r0
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	b085      	sub	sp, #20
 8005642:	68d8      	ldr	r0, [r3, #12]
 8005644:	4b07      	ldr	r3, [pc, #28]	; (8005664 <__assert_func+0x30>)
 8005646:	2c00      	cmp	r4, #0
 8005648:	d101      	bne.n	800564e <__assert_func+0x1a>
 800564a:	4b07      	ldr	r3, [pc, #28]	; (8005668 <__assert_func+0x34>)
 800564c:	001c      	movs	r4, r3
 800564e:	9301      	str	r3, [sp, #4]
 8005650:	9100      	str	r1, [sp, #0]
 8005652:	002b      	movs	r3, r5
 8005654:	4905      	ldr	r1, [pc, #20]	; (800566c <__assert_func+0x38>)
 8005656:	9402      	str	r4, [sp, #8]
 8005658:	f000 f81c 	bl	8005694 <fiprintf>
 800565c:	f001 fb3a 	bl	8006cd4 <abort>
 8005660:	2000009c 	.word	0x2000009c
 8005664:	080075e4 	.word	0x080075e4
 8005668:	0800761f 	.word	0x0800761f
 800566c:	080075f1 	.word	0x080075f1

08005670 <_close_r>:
 8005670:	2300      	movs	r3, #0
 8005672:	b570      	push	{r4, r5, r6, lr}
 8005674:	4d06      	ldr	r5, [pc, #24]	; (8005690 <_close_r+0x20>)
 8005676:	0004      	movs	r4, r0
 8005678:	0008      	movs	r0, r1
 800567a:	602b      	str	r3, [r5, #0]
 800567c:	f7fb fe1b 	bl	80012b6 <_close>
 8005680:	1c43      	adds	r3, r0, #1
 8005682:	d103      	bne.n	800568c <_close_r+0x1c>
 8005684:	682b      	ldr	r3, [r5, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d000      	beq.n	800568c <_close_r+0x1c>
 800568a:	6023      	str	r3, [r4, #0]
 800568c:	bd70      	pop	{r4, r5, r6, pc}
 800568e:	46c0      	nop			; (mov r8, r8)
 8005690:	200004f0 	.word	0x200004f0

08005694 <fiprintf>:
 8005694:	b40e      	push	{r1, r2, r3}
 8005696:	b503      	push	{r0, r1, lr}
 8005698:	0001      	movs	r1, r0
 800569a:	ab03      	add	r3, sp, #12
 800569c:	4804      	ldr	r0, [pc, #16]	; (80056b0 <fiprintf+0x1c>)
 800569e:	cb04      	ldmia	r3!, {r2}
 80056a0:	6800      	ldr	r0, [r0, #0]
 80056a2:	9301      	str	r3, [sp, #4]
 80056a4:	f000 fc6a 	bl	8005f7c <_vfiprintf_r>
 80056a8:	b002      	add	sp, #8
 80056aa:	bc08      	pop	{r3}
 80056ac:	b003      	add	sp, #12
 80056ae:	4718      	bx	r3
 80056b0:	2000009c 	.word	0x2000009c

080056b4 <_lseek_r>:
 80056b4:	b570      	push	{r4, r5, r6, lr}
 80056b6:	0004      	movs	r4, r0
 80056b8:	0008      	movs	r0, r1
 80056ba:	0011      	movs	r1, r2
 80056bc:	001a      	movs	r2, r3
 80056be:	2300      	movs	r3, #0
 80056c0:	4d05      	ldr	r5, [pc, #20]	; (80056d8 <_lseek_r+0x24>)
 80056c2:	602b      	str	r3, [r5, #0]
 80056c4:	f7fb fe18 	bl	80012f8 <_lseek>
 80056c8:	1c43      	adds	r3, r0, #1
 80056ca:	d103      	bne.n	80056d4 <_lseek_r+0x20>
 80056cc:	682b      	ldr	r3, [r5, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d000      	beq.n	80056d4 <_lseek_r+0x20>
 80056d2:	6023      	str	r3, [r4, #0]
 80056d4:	bd70      	pop	{r4, r5, r6, pc}
 80056d6:	46c0      	nop			; (mov r8, r8)
 80056d8:	200004f0 	.word	0x200004f0

080056dc <malloc>:
 80056dc:	b510      	push	{r4, lr}
 80056de:	4b03      	ldr	r3, [pc, #12]	; (80056ec <malloc+0x10>)
 80056e0:	0001      	movs	r1, r0
 80056e2:	6818      	ldr	r0, [r3, #0]
 80056e4:	f000 f870 	bl	80057c8 <_malloc_r>
 80056e8:	bd10      	pop	{r4, pc}
 80056ea:	46c0      	nop			; (mov r8, r8)
 80056ec:	2000009c 	.word	0x2000009c

080056f0 <_free_r>:
 80056f0:	b570      	push	{r4, r5, r6, lr}
 80056f2:	0005      	movs	r5, r0
 80056f4:	2900      	cmp	r1, #0
 80056f6:	d010      	beq.n	800571a <_free_r+0x2a>
 80056f8:	1f0c      	subs	r4, r1, #4
 80056fa:	6823      	ldr	r3, [r4, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	da00      	bge.n	8005702 <_free_r+0x12>
 8005700:	18e4      	adds	r4, r4, r3
 8005702:	0028      	movs	r0, r5
 8005704:	f001 fd54 	bl	80071b0 <__malloc_lock>
 8005708:	4a1d      	ldr	r2, [pc, #116]	; (8005780 <_free_r+0x90>)
 800570a:	6813      	ldr	r3, [r2, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d105      	bne.n	800571c <_free_r+0x2c>
 8005710:	6063      	str	r3, [r4, #4]
 8005712:	6014      	str	r4, [r2, #0]
 8005714:	0028      	movs	r0, r5
 8005716:	f001 fd53 	bl	80071c0 <__malloc_unlock>
 800571a:	bd70      	pop	{r4, r5, r6, pc}
 800571c:	42a3      	cmp	r3, r4
 800571e:	d908      	bls.n	8005732 <_free_r+0x42>
 8005720:	6821      	ldr	r1, [r4, #0]
 8005722:	1860      	adds	r0, r4, r1
 8005724:	4283      	cmp	r3, r0
 8005726:	d1f3      	bne.n	8005710 <_free_r+0x20>
 8005728:	6818      	ldr	r0, [r3, #0]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	1841      	adds	r1, r0, r1
 800572e:	6021      	str	r1, [r4, #0]
 8005730:	e7ee      	b.n	8005710 <_free_r+0x20>
 8005732:	001a      	movs	r2, r3
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d001      	beq.n	800573e <_free_r+0x4e>
 800573a:	42a3      	cmp	r3, r4
 800573c:	d9f9      	bls.n	8005732 <_free_r+0x42>
 800573e:	6811      	ldr	r1, [r2, #0]
 8005740:	1850      	adds	r0, r2, r1
 8005742:	42a0      	cmp	r0, r4
 8005744:	d10b      	bne.n	800575e <_free_r+0x6e>
 8005746:	6820      	ldr	r0, [r4, #0]
 8005748:	1809      	adds	r1, r1, r0
 800574a:	1850      	adds	r0, r2, r1
 800574c:	6011      	str	r1, [r2, #0]
 800574e:	4283      	cmp	r3, r0
 8005750:	d1e0      	bne.n	8005714 <_free_r+0x24>
 8005752:	6818      	ldr	r0, [r3, #0]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	1841      	adds	r1, r0, r1
 8005758:	6011      	str	r1, [r2, #0]
 800575a:	6053      	str	r3, [r2, #4]
 800575c:	e7da      	b.n	8005714 <_free_r+0x24>
 800575e:	42a0      	cmp	r0, r4
 8005760:	d902      	bls.n	8005768 <_free_r+0x78>
 8005762:	230c      	movs	r3, #12
 8005764:	602b      	str	r3, [r5, #0]
 8005766:	e7d5      	b.n	8005714 <_free_r+0x24>
 8005768:	6821      	ldr	r1, [r4, #0]
 800576a:	1860      	adds	r0, r4, r1
 800576c:	4283      	cmp	r3, r0
 800576e:	d103      	bne.n	8005778 <_free_r+0x88>
 8005770:	6818      	ldr	r0, [r3, #0]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	1841      	adds	r1, r0, r1
 8005776:	6021      	str	r1, [r4, #0]
 8005778:	6063      	str	r3, [r4, #4]
 800577a:	6054      	str	r4, [r2, #4]
 800577c:	e7ca      	b.n	8005714 <_free_r+0x24>
 800577e:	46c0      	nop			; (mov r8, r8)
 8005780:	200004e8 	.word	0x200004e8

08005784 <sbrk_aligned>:
 8005784:	b570      	push	{r4, r5, r6, lr}
 8005786:	4e0f      	ldr	r6, [pc, #60]	; (80057c4 <sbrk_aligned+0x40>)
 8005788:	000d      	movs	r5, r1
 800578a:	6831      	ldr	r1, [r6, #0]
 800578c:	0004      	movs	r4, r0
 800578e:	2900      	cmp	r1, #0
 8005790:	d102      	bne.n	8005798 <sbrk_aligned+0x14>
 8005792:	f001 f825 	bl	80067e0 <_sbrk_r>
 8005796:	6030      	str	r0, [r6, #0]
 8005798:	0029      	movs	r1, r5
 800579a:	0020      	movs	r0, r4
 800579c:	f001 f820 	bl	80067e0 <_sbrk_r>
 80057a0:	1c43      	adds	r3, r0, #1
 80057a2:	d00a      	beq.n	80057ba <sbrk_aligned+0x36>
 80057a4:	2303      	movs	r3, #3
 80057a6:	1cc5      	adds	r5, r0, #3
 80057a8:	439d      	bics	r5, r3
 80057aa:	42a8      	cmp	r0, r5
 80057ac:	d007      	beq.n	80057be <sbrk_aligned+0x3a>
 80057ae:	1a29      	subs	r1, r5, r0
 80057b0:	0020      	movs	r0, r4
 80057b2:	f001 f815 	bl	80067e0 <_sbrk_r>
 80057b6:	1c43      	adds	r3, r0, #1
 80057b8:	d101      	bne.n	80057be <sbrk_aligned+0x3a>
 80057ba:	2501      	movs	r5, #1
 80057bc:	426d      	negs	r5, r5
 80057be:	0028      	movs	r0, r5
 80057c0:	bd70      	pop	{r4, r5, r6, pc}
 80057c2:	46c0      	nop			; (mov r8, r8)
 80057c4:	200004ec 	.word	0x200004ec

080057c8 <_malloc_r>:
 80057c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057ca:	2203      	movs	r2, #3
 80057cc:	1ccb      	adds	r3, r1, #3
 80057ce:	4393      	bics	r3, r2
 80057d0:	3308      	adds	r3, #8
 80057d2:	0006      	movs	r6, r0
 80057d4:	001f      	movs	r7, r3
 80057d6:	2b0c      	cmp	r3, #12
 80057d8:	d232      	bcs.n	8005840 <_malloc_r+0x78>
 80057da:	270c      	movs	r7, #12
 80057dc:	42b9      	cmp	r1, r7
 80057de:	d831      	bhi.n	8005844 <_malloc_r+0x7c>
 80057e0:	0030      	movs	r0, r6
 80057e2:	f001 fce5 	bl	80071b0 <__malloc_lock>
 80057e6:	4d32      	ldr	r5, [pc, #200]	; (80058b0 <_malloc_r+0xe8>)
 80057e8:	682b      	ldr	r3, [r5, #0]
 80057ea:	001c      	movs	r4, r3
 80057ec:	2c00      	cmp	r4, #0
 80057ee:	d12e      	bne.n	800584e <_malloc_r+0x86>
 80057f0:	0039      	movs	r1, r7
 80057f2:	0030      	movs	r0, r6
 80057f4:	f7ff ffc6 	bl	8005784 <sbrk_aligned>
 80057f8:	0004      	movs	r4, r0
 80057fa:	1c43      	adds	r3, r0, #1
 80057fc:	d11e      	bne.n	800583c <_malloc_r+0x74>
 80057fe:	682c      	ldr	r4, [r5, #0]
 8005800:	0025      	movs	r5, r4
 8005802:	2d00      	cmp	r5, #0
 8005804:	d14a      	bne.n	800589c <_malloc_r+0xd4>
 8005806:	6823      	ldr	r3, [r4, #0]
 8005808:	0029      	movs	r1, r5
 800580a:	18e3      	adds	r3, r4, r3
 800580c:	0030      	movs	r0, r6
 800580e:	9301      	str	r3, [sp, #4]
 8005810:	f000 ffe6 	bl	80067e0 <_sbrk_r>
 8005814:	9b01      	ldr	r3, [sp, #4]
 8005816:	4283      	cmp	r3, r0
 8005818:	d143      	bne.n	80058a2 <_malloc_r+0xda>
 800581a:	6823      	ldr	r3, [r4, #0]
 800581c:	3703      	adds	r7, #3
 800581e:	1aff      	subs	r7, r7, r3
 8005820:	2303      	movs	r3, #3
 8005822:	439f      	bics	r7, r3
 8005824:	3708      	adds	r7, #8
 8005826:	2f0c      	cmp	r7, #12
 8005828:	d200      	bcs.n	800582c <_malloc_r+0x64>
 800582a:	270c      	movs	r7, #12
 800582c:	0039      	movs	r1, r7
 800582e:	0030      	movs	r0, r6
 8005830:	f7ff ffa8 	bl	8005784 <sbrk_aligned>
 8005834:	1c43      	adds	r3, r0, #1
 8005836:	d034      	beq.n	80058a2 <_malloc_r+0xda>
 8005838:	6823      	ldr	r3, [r4, #0]
 800583a:	19df      	adds	r7, r3, r7
 800583c:	6027      	str	r7, [r4, #0]
 800583e:	e013      	b.n	8005868 <_malloc_r+0xa0>
 8005840:	2b00      	cmp	r3, #0
 8005842:	dacb      	bge.n	80057dc <_malloc_r+0x14>
 8005844:	230c      	movs	r3, #12
 8005846:	2500      	movs	r5, #0
 8005848:	6033      	str	r3, [r6, #0]
 800584a:	0028      	movs	r0, r5
 800584c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800584e:	6822      	ldr	r2, [r4, #0]
 8005850:	1bd1      	subs	r1, r2, r7
 8005852:	d420      	bmi.n	8005896 <_malloc_r+0xce>
 8005854:	290b      	cmp	r1, #11
 8005856:	d917      	bls.n	8005888 <_malloc_r+0xc0>
 8005858:	19e2      	adds	r2, r4, r7
 800585a:	6027      	str	r7, [r4, #0]
 800585c:	42a3      	cmp	r3, r4
 800585e:	d111      	bne.n	8005884 <_malloc_r+0xbc>
 8005860:	602a      	str	r2, [r5, #0]
 8005862:	6863      	ldr	r3, [r4, #4]
 8005864:	6011      	str	r1, [r2, #0]
 8005866:	6053      	str	r3, [r2, #4]
 8005868:	0030      	movs	r0, r6
 800586a:	0025      	movs	r5, r4
 800586c:	f001 fca8 	bl	80071c0 <__malloc_unlock>
 8005870:	2207      	movs	r2, #7
 8005872:	350b      	adds	r5, #11
 8005874:	1d23      	adds	r3, r4, #4
 8005876:	4395      	bics	r5, r2
 8005878:	1aea      	subs	r2, r5, r3
 800587a:	429d      	cmp	r5, r3
 800587c:	d0e5      	beq.n	800584a <_malloc_r+0x82>
 800587e:	1b5b      	subs	r3, r3, r5
 8005880:	50a3      	str	r3, [r4, r2]
 8005882:	e7e2      	b.n	800584a <_malloc_r+0x82>
 8005884:	605a      	str	r2, [r3, #4]
 8005886:	e7ec      	b.n	8005862 <_malloc_r+0x9a>
 8005888:	6862      	ldr	r2, [r4, #4]
 800588a:	42a3      	cmp	r3, r4
 800588c:	d101      	bne.n	8005892 <_malloc_r+0xca>
 800588e:	602a      	str	r2, [r5, #0]
 8005890:	e7ea      	b.n	8005868 <_malloc_r+0xa0>
 8005892:	605a      	str	r2, [r3, #4]
 8005894:	e7e8      	b.n	8005868 <_malloc_r+0xa0>
 8005896:	0023      	movs	r3, r4
 8005898:	6864      	ldr	r4, [r4, #4]
 800589a:	e7a7      	b.n	80057ec <_malloc_r+0x24>
 800589c:	002c      	movs	r4, r5
 800589e:	686d      	ldr	r5, [r5, #4]
 80058a0:	e7af      	b.n	8005802 <_malloc_r+0x3a>
 80058a2:	230c      	movs	r3, #12
 80058a4:	0030      	movs	r0, r6
 80058a6:	6033      	str	r3, [r6, #0]
 80058a8:	f001 fc8a 	bl	80071c0 <__malloc_unlock>
 80058ac:	e7cd      	b.n	800584a <_malloc_r+0x82>
 80058ae:	46c0      	nop			; (mov r8, r8)
 80058b0:	200004e8 	.word	0x200004e8

080058b4 <__ssputs_r>:
 80058b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058b6:	688e      	ldr	r6, [r1, #8]
 80058b8:	b085      	sub	sp, #20
 80058ba:	0007      	movs	r7, r0
 80058bc:	000c      	movs	r4, r1
 80058be:	9203      	str	r2, [sp, #12]
 80058c0:	9301      	str	r3, [sp, #4]
 80058c2:	429e      	cmp	r6, r3
 80058c4:	d83c      	bhi.n	8005940 <__ssputs_r+0x8c>
 80058c6:	2390      	movs	r3, #144	; 0x90
 80058c8:	898a      	ldrh	r2, [r1, #12]
 80058ca:	00db      	lsls	r3, r3, #3
 80058cc:	421a      	tst	r2, r3
 80058ce:	d034      	beq.n	800593a <__ssputs_r+0x86>
 80058d0:	6909      	ldr	r1, [r1, #16]
 80058d2:	6823      	ldr	r3, [r4, #0]
 80058d4:	6960      	ldr	r0, [r4, #20]
 80058d6:	1a5b      	subs	r3, r3, r1
 80058d8:	9302      	str	r3, [sp, #8]
 80058da:	2303      	movs	r3, #3
 80058dc:	4343      	muls	r3, r0
 80058de:	0fdd      	lsrs	r5, r3, #31
 80058e0:	18ed      	adds	r5, r5, r3
 80058e2:	9b01      	ldr	r3, [sp, #4]
 80058e4:	9802      	ldr	r0, [sp, #8]
 80058e6:	3301      	adds	r3, #1
 80058e8:	181b      	adds	r3, r3, r0
 80058ea:	106d      	asrs	r5, r5, #1
 80058ec:	42ab      	cmp	r3, r5
 80058ee:	d900      	bls.n	80058f2 <__ssputs_r+0x3e>
 80058f0:	001d      	movs	r5, r3
 80058f2:	0553      	lsls	r3, r2, #21
 80058f4:	d532      	bpl.n	800595c <__ssputs_r+0xa8>
 80058f6:	0029      	movs	r1, r5
 80058f8:	0038      	movs	r0, r7
 80058fa:	f7ff ff65 	bl	80057c8 <_malloc_r>
 80058fe:	1e06      	subs	r6, r0, #0
 8005900:	d109      	bne.n	8005916 <__ssputs_r+0x62>
 8005902:	230c      	movs	r3, #12
 8005904:	603b      	str	r3, [r7, #0]
 8005906:	2340      	movs	r3, #64	; 0x40
 8005908:	2001      	movs	r0, #1
 800590a:	89a2      	ldrh	r2, [r4, #12]
 800590c:	4240      	negs	r0, r0
 800590e:	4313      	orrs	r3, r2
 8005910:	81a3      	strh	r3, [r4, #12]
 8005912:	b005      	add	sp, #20
 8005914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005916:	9a02      	ldr	r2, [sp, #8]
 8005918:	6921      	ldr	r1, [r4, #16]
 800591a:	f001 fc2c 	bl	8007176 <memcpy>
 800591e:	89a3      	ldrh	r3, [r4, #12]
 8005920:	4a14      	ldr	r2, [pc, #80]	; (8005974 <__ssputs_r+0xc0>)
 8005922:	401a      	ands	r2, r3
 8005924:	2380      	movs	r3, #128	; 0x80
 8005926:	4313      	orrs	r3, r2
 8005928:	81a3      	strh	r3, [r4, #12]
 800592a:	9b02      	ldr	r3, [sp, #8]
 800592c:	6126      	str	r6, [r4, #16]
 800592e:	18f6      	adds	r6, r6, r3
 8005930:	6026      	str	r6, [r4, #0]
 8005932:	6165      	str	r5, [r4, #20]
 8005934:	9e01      	ldr	r6, [sp, #4]
 8005936:	1aed      	subs	r5, r5, r3
 8005938:	60a5      	str	r5, [r4, #8]
 800593a:	9b01      	ldr	r3, [sp, #4]
 800593c:	429e      	cmp	r6, r3
 800593e:	d900      	bls.n	8005942 <__ssputs_r+0x8e>
 8005940:	9e01      	ldr	r6, [sp, #4]
 8005942:	0032      	movs	r2, r6
 8005944:	9903      	ldr	r1, [sp, #12]
 8005946:	6820      	ldr	r0, [r4, #0]
 8005948:	f001 fc1e 	bl	8007188 <memmove>
 800594c:	68a3      	ldr	r3, [r4, #8]
 800594e:	2000      	movs	r0, #0
 8005950:	1b9b      	subs	r3, r3, r6
 8005952:	60a3      	str	r3, [r4, #8]
 8005954:	6823      	ldr	r3, [r4, #0]
 8005956:	199e      	adds	r6, r3, r6
 8005958:	6026      	str	r6, [r4, #0]
 800595a:	e7da      	b.n	8005912 <__ssputs_r+0x5e>
 800595c:	002a      	movs	r2, r5
 800595e:	0038      	movs	r0, r7
 8005960:	f001 fc36 	bl	80071d0 <_realloc_r>
 8005964:	1e06      	subs	r6, r0, #0
 8005966:	d1e0      	bne.n	800592a <__ssputs_r+0x76>
 8005968:	0038      	movs	r0, r7
 800596a:	6921      	ldr	r1, [r4, #16]
 800596c:	f7ff fec0 	bl	80056f0 <_free_r>
 8005970:	e7c7      	b.n	8005902 <__ssputs_r+0x4e>
 8005972:	46c0      	nop			; (mov r8, r8)
 8005974:	fffffb7f 	.word	0xfffffb7f

08005978 <_svfiprintf_r>:
 8005978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800597a:	b0a1      	sub	sp, #132	; 0x84
 800597c:	9003      	str	r0, [sp, #12]
 800597e:	001d      	movs	r5, r3
 8005980:	898b      	ldrh	r3, [r1, #12]
 8005982:	000f      	movs	r7, r1
 8005984:	0016      	movs	r6, r2
 8005986:	061b      	lsls	r3, r3, #24
 8005988:	d511      	bpl.n	80059ae <_svfiprintf_r+0x36>
 800598a:	690b      	ldr	r3, [r1, #16]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d10e      	bne.n	80059ae <_svfiprintf_r+0x36>
 8005990:	2140      	movs	r1, #64	; 0x40
 8005992:	f7ff ff19 	bl	80057c8 <_malloc_r>
 8005996:	6038      	str	r0, [r7, #0]
 8005998:	6138      	str	r0, [r7, #16]
 800599a:	2800      	cmp	r0, #0
 800599c:	d105      	bne.n	80059aa <_svfiprintf_r+0x32>
 800599e:	230c      	movs	r3, #12
 80059a0:	9a03      	ldr	r2, [sp, #12]
 80059a2:	3801      	subs	r0, #1
 80059a4:	6013      	str	r3, [r2, #0]
 80059a6:	b021      	add	sp, #132	; 0x84
 80059a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059aa:	2340      	movs	r3, #64	; 0x40
 80059ac:	617b      	str	r3, [r7, #20]
 80059ae:	2300      	movs	r3, #0
 80059b0:	ac08      	add	r4, sp, #32
 80059b2:	6163      	str	r3, [r4, #20]
 80059b4:	3320      	adds	r3, #32
 80059b6:	7663      	strb	r3, [r4, #25]
 80059b8:	3310      	adds	r3, #16
 80059ba:	76a3      	strb	r3, [r4, #26]
 80059bc:	9507      	str	r5, [sp, #28]
 80059be:	0035      	movs	r5, r6
 80059c0:	782b      	ldrb	r3, [r5, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d001      	beq.n	80059ca <_svfiprintf_r+0x52>
 80059c6:	2b25      	cmp	r3, #37	; 0x25
 80059c8:	d147      	bne.n	8005a5a <_svfiprintf_r+0xe2>
 80059ca:	1bab      	subs	r3, r5, r6
 80059cc:	9305      	str	r3, [sp, #20]
 80059ce:	42b5      	cmp	r5, r6
 80059d0:	d00c      	beq.n	80059ec <_svfiprintf_r+0x74>
 80059d2:	0032      	movs	r2, r6
 80059d4:	0039      	movs	r1, r7
 80059d6:	9803      	ldr	r0, [sp, #12]
 80059d8:	f7ff ff6c 	bl	80058b4 <__ssputs_r>
 80059dc:	1c43      	adds	r3, r0, #1
 80059de:	d100      	bne.n	80059e2 <_svfiprintf_r+0x6a>
 80059e0:	e0ae      	b.n	8005b40 <_svfiprintf_r+0x1c8>
 80059e2:	6962      	ldr	r2, [r4, #20]
 80059e4:	9b05      	ldr	r3, [sp, #20]
 80059e6:	4694      	mov	ip, r2
 80059e8:	4463      	add	r3, ip
 80059ea:	6163      	str	r3, [r4, #20]
 80059ec:	782b      	ldrb	r3, [r5, #0]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d100      	bne.n	80059f4 <_svfiprintf_r+0x7c>
 80059f2:	e0a5      	b.n	8005b40 <_svfiprintf_r+0x1c8>
 80059f4:	2201      	movs	r2, #1
 80059f6:	2300      	movs	r3, #0
 80059f8:	4252      	negs	r2, r2
 80059fa:	6062      	str	r2, [r4, #4]
 80059fc:	a904      	add	r1, sp, #16
 80059fe:	3254      	adds	r2, #84	; 0x54
 8005a00:	1852      	adds	r2, r2, r1
 8005a02:	1c6e      	adds	r6, r5, #1
 8005a04:	6023      	str	r3, [r4, #0]
 8005a06:	60e3      	str	r3, [r4, #12]
 8005a08:	60a3      	str	r3, [r4, #8]
 8005a0a:	7013      	strb	r3, [r2, #0]
 8005a0c:	65a3      	str	r3, [r4, #88]	; 0x58
 8005a0e:	2205      	movs	r2, #5
 8005a10:	7831      	ldrb	r1, [r6, #0]
 8005a12:	4854      	ldr	r0, [pc, #336]	; (8005b64 <_svfiprintf_r+0x1ec>)
 8005a14:	f001 fba4 	bl	8007160 <memchr>
 8005a18:	1c75      	adds	r5, r6, #1
 8005a1a:	2800      	cmp	r0, #0
 8005a1c:	d11f      	bne.n	8005a5e <_svfiprintf_r+0xe6>
 8005a1e:	6822      	ldr	r2, [r4, #0]
 8005a20:	06d3      	lsls	r3, r2, #27
 8005a22:	d504      	bpl.n	8005a2e <_svfiprintf_r+0xb6>
 8005a24:	2353      	movs	r3, #83	; 0x53
 8005a26:	a904      	add	r1, sp, #16
 8005a28:	185b      	adds	r3, r3, r1
 8005a2a:	2120      	movs	r1, #32
 8005a2c:	7019      	strb	r1, [r3, #0]
 8005a2e:	0713      	lsls	r3, r2, #28
 8005a30:	d504      	bpl.n	8005a3c <_svfiprintf_r+0xc4>
 8005a32:	2353      	movs	r3, #83	; 0x53
 8005a34:	a904      	add	r1, sp, #16
 8005a36:	185b      	adds	r3, r3, r1
 8005a38:	212b      	movs	r1, #43	; 0x2b
 8005a3a:	7019      	strb	r1, [r3, #0]
 8005a3c:	7833      	ldrb	r3, [r6, #0]
 8005a3e:	2b2a      	cmp	r3, #42	; 0x2a
 8005a40:	d016      	beq.n	8005a70 <_svfiprintf_r+0xf8>
 8005a42:	0035      	movs	r5, r6
 8005a44:	2100      	movs	r1, #0
 8005a46:	200a      	movs	r0, #10
 8005a48:	68e3      	ldr	r3, [r4, #12]
 8005a4a:	782a      	ldrb	r2, [r5, #0]
 8005a4c:	1c6e      	adds	r6, r5, #1
 8005a4e:	3a30      	subs	r2, #48	; 0x30
 8005a50:	2a09      	cmp	r2, #9
 8005a52:	d94e      	bls.n	8005af2 <_svfiprintf_r+0x17a>
 8005a54:	2900      	cmp	r1, #0
 8005a56:	d111      	bne.n	8005a7c <_svfiprintf_r+0x104>
 8005a58:	e017      	b.n	8005a8a <_svfiprintf_r+0x112>
 8005a5a:	3501      	adds	r5, #1
 8005a5c:	e7b0      	b.n	80059c0 <_svfiprintf_r+0x48>
 8005a5e:	4b41      	ldr	r3, [pc, #260]	; (8005b64 <_svfiprintf_r+0x1ec>)
 8005a60:	6822      	ldr	r2, [r4, #0]
 8005a62:	1ac0      	subs	r0, r0, r3
 8005a64:	2301      	movs	r3, #1
 8005a66:	4083      	lsls	r3, r0
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	002e      	movs	r6, r5
 8005a6c:	6023      	str	r3, [r4, #0]
 8005a6e:	e7ce      	b.n	8005a0e <_svfiprintf_r+0x96>
 8005a70:	9b07      	ldr	r3, [sp, #28]
 8005a72:	1d19      	adds	r1, r3, #4
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	9107      	str	r1, [sp, #28]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	db01      	blt.n	8005a80 <_svfiprintf_r+0x108>
 8005a7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a7e:	e004      	b.n	8005a8a <_svfiprintf_r+0x112>
 8005a80:	425b      	negs	r3, r3
 8005a82:	60e3      	str	r3, [r4, #12]
 8005a84:	2302      	movs	r3, #2
 8005a86:	4313      	orrs	r3, r2
 8005a88:	6023      	str	r3, [r4, #0]
 8005a8a:	782b      	ldrb	r3, [r5, #0]
 8005a8c:	2b2e      	cmp	r3, #46	; 0x2e
 8005a8e:	d10a      	bne.n	8005aa6 <_svfiprintf_r+0x12e>
 8005a90:	786b      	ldrb	r3, [r5, #1]
 8005a92:	2b2a      	cmp	r3, #42	; 0x2a
 8005a94:	d135      	bne.n	8005b02 <_svfiprintf_r+0x18a>
 8005a96:	9b07      	ldr	r3, [sp, #28]
 8005a98:	3502      	adds	r5, #2
 8005a9a:	1d1a      	adds	r2, r3, #4
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	9207      	str	r2, [sp, #28]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	db2b      	blt.n	8005afc <_svfiprintf_r+0x184>
 8005aa4:	9309      	str	r3, [sp, #36]	; 0x24
 8005aa6:	4e30      	ldr	r6, [pc, #192]	; (8005b68 <_svfiprintf_r+0x1f0>)
 8005aa8:	2203      	movs	r2, #3
 8005aaa:	0030      	movs	r0, r6
 8005aac:	7829      	ldrb	r1, [r5, #0]
 8005aae:	f001 fb57 	bl	8007160 <memchr>
 8005ab2:	2800      	cmp	r0, #0
 8005ab4:	d006      	beq.n	8005ac4 <_svfiprintf_r+0x14c>
 8005ab6:	2340      	movs	r3, #64	; 0x40
 8005ab8:	1b80      	subs	r0, r0, r6
 8005aba:	4083      	lsls	r3, r0
 8005abc:	6822      	ldr	r2, [r4, #0]
 8005abe:	3501      	adds	r5, #1
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	6023      	str	r3, [r4, #0]
 8005ac4:	7829      	ldrb	r1, [r5, #0]
 8005ac6:	2206      	movs	r2, #6
 8005ac8:	4828      	ldr	r0, [pc, #160]	; (8005b6c <_svfiprintf_r+0x1f4>)
 8005aca:	1c6e      	adds	r6, r5, #1
 8005acc:	7621      	strb	r1, [r4, #24]
 8005ace:	f001 fb47 	bl	8007160 <memchr>
 8005ad2:	2800      	cmp	r0, #0
 8005ad4:	d03c      	beq.n	8005b50 <_svfiprintf_r+0x1d8>
 8005ad6:	4b26      	ldr	r3, [pc, #152]	; (8005b70 <_svfiprintf_r+0x1f8>)
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d125      	bne.n	8005b28 <_svfiprintf_r+0x1b0>
 8005adc:	2207      	movs	r2, #7
 8005ade:	9b07      	ldr	r3, [sp, #28]
 8005ae0:	3307      	adds	r3, #7
 8005ae2:	4393      	bics	r3, r2
 8005ae4:	3308      	adds	r3, #8
 8005ae6:	9307      	str	r3, [sp, #28]
 8005ae8:	6963      	ldr	r3, [r4, #20]
 8005aea:	9a04      	ldr	r2, [sp, #16]
 8005aec:	189b      	adds	r3, r3, r2
 8005aee:	6163      	str	r3, [r4, #20]
 8005af0:	e765      	b.n	80059be <_svfiprintf_r+0x46>
 8005af2:	4343      	muls	r3, r0
 8005af4:	0035      	movs	r5, r6
 8005af6:	2101      	movs	r1, #1
 8005af8:	189b      	adds	r3, r3, r2
 8005afa:	e7a6      	b.n	8005a4a <_svfiprintf_r+0xd2>
 8005afc:	2301      	movs	r3, #1
 8005afe:	425b      	negs	r3, r3
 8005b00:	e7d0      	b.n	8005aa4 <_svfiprintf_r+0x12c>
 8005b02:	2300      	movs	r3, #0
 8005b04:	200a      	movs	r0, #10
 8005b06:	001a      	movs	r2, r3
 8005b08:	3501      	adds	r5, #1
 8005b0a:	6063      	str	r3, [r4, #4]
 8005b0c:	7829      	ldrb	r1, [r5, #0]
 8005b0e:	1c6e      	adds	r6, r5, #1
 8005b10:	3930      	subs	r1, #48	; 0x30
 8005b12:	2909      	cmp	r1, #9
 8005b14:	d903      	bls.n	8005b1e <_svfiprintf_r+0x1a6>
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d0c5      	beq.n	8005aa6 <_svfiprintf_r+0x12e>
 8005b1a:	9209      	str	r2, [sp, #36]	; 0x24
 8005b1c:	e7c3      	b.n	8005aa6 <_svfiprintf_r+0x12e>
 8005b1e:	4342      	muls	r2, r0
 8005b20:	0035      	movs	r5, r6
 8005b22:	2301      	movs	r3, #1
 8005b24:	1852      	adds	r2, r2, r1
 8005b26:	e7f1      	b.n	8005b0c <_svfiprintf_r+0x194>
 8005b28:	ab07      	add	r3, sp, #28
 8005b2a:	9300      	str	r3, [sp, #0]
 8005b2c:	003a      	movs	r2, r7
 8005b2e:	0021      	movs	r1, r4
 8005b30:	4b10      	ldr	r3, [pc, #64]	; (8005b74 <_svfiprintf_r+0x1fc>)
 8005b32:	9803      	ldr	r0, [sp, #12]
 8005b34:	e000      	b.n	8005b38 <_svfiprintf_r+0x1c0>
 8005b36:	bf00      	nop
 8005b38:	9004      	str	r0, [sp, #16]
 8005b3a:	9b04      	ldr	r3, [sp, #16]
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	d1d3      	bne.n	8005ae8 <_svfiprintf_r+0x170>
 8005b40:	89bb      	ldrh	r3, [r7, #12]
 8005b42:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005b44:	065b      	lsls	r3, r3, #25
 8005b46:	d400      	bmi.n	8005b4a <_svfiprintf_r+0x1d2>
 8005b48:	e72d      	b.n	80059a6 <_svfiprintf_r+0x2e>
 8005b4a:	2001      	movs	r0, #1
 8005b4c:	4240      	negs	r0, r0
 8005b4e:	e72a      	b.n	80059a6 <_svfiprintf_r+0x2e>
 8005b50:	ab07      	add	r3, sp, #28
 8005b52:	9300      	str	r3, [sp, #0]
 8005b54:	003a      	movs	r2, r7
 8005b56:	0021      	movs	r1, r4
 8005b58:	4b06      	ldr	r3, [pc, #24]	; (8005b74 <_svfiprintf_r+0x1fc>)
 8005b5a:	9803      	ldr	r0, [sp, #12]
 8005b5c:	f000 fbb8 	bl	80062d0 <_printf_i>
 8005b60:	e7ea      	b.n	8005b38 <_svfiprintf_r+0x1c0>
 8005b62:	46c0      	nop			; (mov r8, r8)
 8005b64:	08007620 	.word	0x08007620
 8005b68:	08007626 	.word	0x08007626
 8005b6c:	0800762a 	.word	0x0800762a
 8005b70:	00000000 	.word	0x00000000
 8005b74:	080058b5 	.word	0x080058b5

08005b78 <_sungetc_r>:
 8005b78:	b570      	push	{r4, r5, r6, lr}
 8005b7a:	0014      	movs	r4, r2
 8005b7c:	1c4b      	adds	r3, r1, #1
 8005b7e:	d103      	bne.n	8005b88 <_sungetc_r+0x10>
 8005b80:	2501      	movs	r5, #1
 8005b82:	426d      	negs	r5, r5
 8005b84:	0028      	movs	r0, r5
 8005b86:	bd70      	pop	{r4, r5, r6, pc}
 8005b88:	8993      	ldrh	r3, [r2, #12]
 8005b8a:	2220      	movs	r2, #32
 8005b8c:	4393      	bics	r3, r2
 8005b8e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005b90:	81a3      	strh	r3, [r4, #12]
 8005b92:	b2ce      	uxtb	r6, r1
 8005b94:	6863      	ldr	r3, [r4, #4]
 8005b96:	b2cd      	uxtb	r5, r1
 8005b98:	2a00      	cmp	r2, #0
 8005b9a:	d010      	beq.n	8005bbe <_sungetc_r+0x46>
 8005b9c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	dd07      	ble.n	8005bb2 <_sungetc_r+0x3a>
 8005ba2:	6823      	ldr	r3, [r4, #0]
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	6023      	str	r3, [r4, #0]
 8005ba8:	701e      	strb	r6, [r3, #0]
 8005baa:	6863      	ldr	r3, [r4, #4]
 8005bac:	3301      	adds	r3, #1
 8005bae:	6063      	str	r3, [r4, #4]
 8005bb0:	e7e8      	b.n	8005b84 <_sungetc_r+0xc>
 8005bb2:	0021      	movs	r1, r4
 8005bb4:	f000 ff82 	bl	8006abc <__submore>
 8005bb8:	2800      	cmp	r0, #0
 8005bba:	d0f2      	beq.n	8005ba2 <_sungetc_r+0x2a>
 8005bbc:	e7e0      	b.n	8005b80 <_sungetc_r+0x8>
 8005bbe:	6921      	ldr	r1, [r4, #16]
 8005bc0:	6822      	ldr	r2, [r4, #0]
 8005bc2:	2900      	cmp	r1, #0
 8005bc4:	d007      	beq.n	8005bd6 <_sungetc_r+0x5e>
 8005bc6:	4291      	cmp	r1, r2
 8005bc8:	d205      	bcs.n	8005bd6 <_sungetc_r+0x5e>
 8005bca:	1e51      	subs	r1, r2, #1
 8005bcc:	7808      	ldrb	r0, [r1, #0]
 8005bce:	42a8      	cmp	r0, r5
 8005bd0:	d101      	bne.n	8005bd6 <_sungetc_r+0x5e>
 8005bd2:	6021      	str	r1, [r4, #0]
 8005bd4:	e7ea      	b.n	8005bac <_sungetc_r+0x34>
 8005bd6:	6423      	str	r3, [r4, #64]	; 0x40
 8005bd8:	0023      	movs	r3, r4
 8005bda:	3344      	adds	r3, #68	; 0x44
 8005bdc:	6363      	str	r3, [r4, #52]	; 0x34
 8005bde:	2303      	movs	r3, #3
 8005be0:	63a3      	str	r3, [r4, #56]	; 0x38
 8005be2:	0023      	movs	r3, r4
 8005be4:	3346      	adds	r3, #70	; 0x46
 8005be6:	63e2      	str	r2, [r4, #60]	; 0x3c
 8005be8:	701e      	strb	r6, [r3, #0]
 8005bea:	6023      	str	r3, [r4, #0]
 8005bec:	2301      	movs	r3, #1
 8005bee:	e7de      	b.n	8005bae <_sungetc_r+0x36>

08005bf0 <__ssrefill_r>:
 8005bf0:	b510      	push	{r4, lr}
 8005bf2:	000c      	movs	r4, r1
 8005bf4:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005bf6:	2900      	cmp	r1, #0
 8005bf8:	d00e      	beq.n	8005c18 <__ssrefill_r+0x28>
 8005bfa:	0023      	movs	r3, r4
 8005bfc:	3344      	adds	r3, #68	; 0x44
 8005bfe:	4299      	cmp	r1, r3
 8005c00:	d001      	beq.n	8005c06 <__ssrefill_r+0x16>
 8005c02:	f7ff fd75 	bl	80056f0 <_free_r>
 8005c06:	2000      	movs	r0, #0
 8005c08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c0a:	6360      	str	r0, [r4, #52]	; 0x34
 8005c0c:	6063      	str	r3, [r4, #4]
 8005c0e:	4283      	cmp	r3, r0
 8005c10:	d002      	beq.n	8005c18 <__ssrefill_r+0x28>
 8005c12:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005c14:	6023      	str	r3, [r4, #0]
 8005c16:	bd10      	pop	{r4, pc}
 8005c18:	6923      	ldr	r3, [r4, #16]
 8005c1a:	2001      	movs	r0, #1
 8005c1c:	6023      	str	r3, [r4, #0]
 8005c1e:	2300      	movs	r3, #0
 8005c20:	89a2      	ldrh	r2, [r4, #12]
 8005c22:	6063      	str	r3, [r4, #4]
 8005c24:	3320      	adds	r3, #32
 8005c26:	4313      	orrs	r3, r2
 8005c28:	81a3      	strh	r3, [r4, #12]
 8005c2a:	4240      	negs	r0, r0
 8005c2c:	e7f3      	b.n	8005c16 <__ssrefill_r+0x26>
	...

08005c30 <__ssvfiscanf_r>:
 8005c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c32:	4cb8      	ldr	r4, [pc, #736]	; (8005f14 <__ssvfiscanf_r+0x2e4>)
 8005c34:	0006      	movs	r6, r0
 8005c36:	44a5      	add	sp, r4
 8005c38:	000c      	movs	r4, r1
 8005c3a:	2100      	movs	r1, #0
 8005c3c:	9146      	str	r1, [sp, #280]	; 0x118
 8005c3e:	9147      	str	r1, [sp, #284]	; 0x11c
 8005c40:	a903      	add	r1, sp, #12
 8005c42:	9148      	str	r1, [sp, #288]	; 0x120
 8005c44:	21be      	movs	r1, #190	; 0xbe
 8005c46:	48b4      	ldr	r0, [pc, #720]	; (8005f18 <__ssvfiscanf_r+0x2e8>)
 8005c48:	0049      	lsls	r1, r1, #1
 8005c4a:	ad43      	add	r5, sp, #268	; 0x10c
 8005c4c:	5068      	str	r0, [r5, r1]
 8005c4e:	25c0      	movs	r5, #192	; 0xc0
 8005c50:	49b2      	ldr	r1, [pc, #712]	; (8005f1c <__ssvfiscanf_r+0x2ec>)
 8005c52:	006d      	lsls	r5, r5, #1
 8005c54:	a843      	add	r0, sp, #268	; 0x10c
 8005c56:	5141      	str	r1, [r0, r5]
 8005c58:	9302      	str	r3, [sp, #8]
 8005c5a:	7813      	ldrb	r3, [r2, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d100      	bne.n	8005c62 <__ssvfiscanf_r+0x32>
 8005c60:	e155      	b.n	8005f0e <__ssvfiscanf_r+0x2de>
 8005c62:	49af      	ldr	r1, [pc, #700]	; (8005f20 <__ssvfiscanf_r+0x2f0>)
 8005c64:	2508      	movs	r5, #8
 8005c66:	5cc8      	ldrb	r0, [r1, r3]
 8005c68:	2108      	movs	r1, #8
 8005c6a:	1c57      	adds	r7, r2, #1
 8005c6c:	4001      	ands	r1, r0
 8005c6e:	4228      	tst	r0, r5
 8005c70:	d020      	beq.n	8005cb4 <__ssvfiscanf_r+0x84>
 8005c72:	6863      	ldr	r3, [r4, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	dd12      	ble.n	8005c9e <__ssvfiscanf_r+0x6e>
 8005c78:	6823      	ldr	r3, [r4, #0]
 8005c7a:	49a9      	ldr	r1, [pc, #676]	; (8005f20 <__ssvfiscanf_r+0x2f0>)
 8005c7c:	781a      	ldrb	r2, [r3, #0]
 8005c7e:	5c8a      	ldrb	r2, [r1, r2]
 8005c80:	2108      	movs	r1, #8
 8005c82:	420a      	tst	r2, r1
 8005c84:	d101      	bne.n	8005c8a <__ssvfiscanf_r+0x5a>
 8005c86:	003a      	movs	r2, r7
 8005c88:	e7e7      	b.n	8005c5a <__ssvfiscanf_r+0x2a>
 8005c8a:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	9200      	str	r2, [sp, #0]
 8005c90:	3201      	adds	r2, #1
 8005c92:	9247      	str	r2, [sp, #284]	; 0x11c
 8005c94:	6862      	ldr	r2, [r4, #4]
 8005c96:	6023      	str	r3, [r4, #0]
 8005c98:	3a01      	subs	r2, #1
 8005c9a:	6062      	str	r2, [r4, #4]
 8005c9c:	e7e9      	b.n	8005c72 <__ssvfiscanf_r+0x42>
 8005c9e:	22c0      	movs	r2, #192	; 0xc0
 8005ca0:	ab43      	add	r3, sp, #268	; 0x10c
 8005ca2:	0052      	lsls	r2, r2, #1
 8005ca4:	589b      	ldr	r3, [r3, r2]
 8005ca6:	0021      	movs	r1, r4
 8005ca8:	0030      	movs	r0, r6
 8005caa:	9300      	str	r3, [sp, #0]
 8005cac:	4798      	blx	r3
 8005cae:	2800      	cmp	r0, #0
 8005cb0:	d0e2      	beq.n	8005c78 <__ssvfiscanf_r+0x48>
 8005cb2:	e7e8      	b.n	8005c86 <__ssvfiscanf_r+0x56>
 8005cb4:	001d      	movs	r5, r3
 8005cb6:	2b25      	cmp	r3, #37	; 0x25
 8005cb8:	d164      	bne.n	8005d84 <__ssvfiscanf_r+0x154>
 8005cba:	9145      	str	r1, [sp, #276]	; 0x114
 8005cbc:	9143      	str	r1, [sp, #268]	; 0x10c
 8005cbe:	7853      	ldrb	r3, [r2, #1]
 8005cc0:	2b2a      	cmp	r3, #42	; 0x2a
 8005cc2:	d102      	bne.n	8005cca <__ssvfiscanf_r+0x9a>
 8005cc4:	3b1a      	subs	r3, #26
 8005cc6:	9343      	str	r3, [sp, #268]	; 0x10c
 8005cc8:	1c97      	adds	r7, r2, #2
 8005cca:	003d      	movs	r5, r7
 8005ccc:	220a      	movs	r2, #10
 8005cce:	7829      	ldrb	r1, [r5, #0]
 8005cd0:	1c6b      	adds	r3, r5, #1
 8005cd2:	9300      	str	r3, [sp, #0]
 8005cd4:	000b      	movs	r3, r1
 8005cd6:	3b30      	subs	r3, #48	; 0x30
 8005cd8:	2b09      	cmp	r3, #9
 8005cda:	d91f      	bls.n	8005d1c <__ssvfiscanf_r+0xec>
 8005cdc:	4f91      	ldr	r7, [pc, #580]	; (8005f24 <__ssvfiscanf_r+0x2f4>)
 8005cde:	2203      	movs	r2, #3
 8005ce0:	0038      	movs	r0, r7
 8005ce2:	f001 fa3d 	bl	8007160 <memchr>
 8005ce6:	2800      	cmp	r0, #0
 8005ce8:	d007      	beq.n	8005cfa <__ssvfiscanf_r+0xca>
 8005cea:	2301      	movs	r3, #1
 8005cec:	1bc0      	subs	r0, r0, r7
 8005cee:	4083      	lsls	r3, r0
 8005cf0:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8005cf2:	9d00      	ldr	r5, [sp, #0]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	9201      	str	r2, [sp, #4]
 8005cf8:	9343      	str	r3, [sp, #268]	; 0x10c
 8005cfa:	1c6f      	adds	r7, r5, #1
 8005cfc:	782d      	ldrb	r5, [r5, #0]
 8005cfe:	2d78      	cmp	r5, #120	; 0x78
 8005d00:	d807      	bhi.n	8005d12 <__ssvfiscanf_r+0xe2>
 8005d02:	2d57      	cmp	r5, #87	; 0x57
 8005d04:	d812      	bhi.n	8005d2c <__ssvfiscanf_r+0xfc>
 8005d06:	2d25      	cmp	r5, #37	; 0x25
 8005d08:	d03c      	beq.n	8005d84 <__ssvfiscanf_r+0x154>
 8005d0a:	d836      	bhi.n	8005d7a <__ssvfiscanf_r+0x14a>
 8005d0c:	2d00      	cmp	r5, #0
 8005d0e:	d100      	bne.n	8005d12 <__ssvfiscanf_r+0xe2>
 8005d10:	e0fa      	b.n	8005f08 <__ssvfiscanf_r+0x2d8>
 8005d12:	2303      	movs	r3, #3
 8005d14:	9349      	str	r3, [sp, #292]	; 0x124
 8005d16:	3307      	adds	r3, #7
 8005d18:	9344      	str	r3, [sp, #272]	; 0x110
 8005d1a:	e06d      	b.n	8005df8 <__ssvfiscanf_r+0x1c8>
 8005d1c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8005d1e:	9d00      	ldr	r5, [sp, #0]
 8005d20:	9301      	str	r3, [sp, #4]
 8005d22:	4353      	muls	r3, r2
 8005d24:	3b30      	subs	r3, #48	; 0x30
 8005d26:	185b      	adds	r3, r3, r1
 8005d28:	9345      	str	r3, [sp, #276]	; 0x114
 8005d2a:	e7d0      	b.n	8005cce <__ssvfiscanf_r+0x9e>
 8005d2c:	0028      	movs	r0, r5
 8005d2e:	3858      	subs	r0, #88	; 0x58
 8005d30:	2820      	cmp	r0, #32
 8005d32:	d8ee      	bhi.n	8005d12 <__ssvfiscanf_r+0xe2>
 8005d34:	f7fa f9ee 	bl	8000114 <__gnu_thumb1_case_shi>
 8005d38:	ffed0051 	.word	0xffed0051
 8005d3c:	0087ffed 	.word	0x0087ffed
 8005d40:	ffedffed 	.word	0xffedffed
 8005d44:	ffedffed 	.word	0xffedffed
 8005d48:	ffedffed 	.word	0xffedffed
 8005d4c:	0095ffed 	.word	0x0095ffed
 8005d50:	0024007d 	.word	0x0024007d
 8005d54:	00240024 	.word	0x00240024
 8005d58:	007fffed 	.word	0x007fffed
 8005d5c:	ffedffed 	.word	0xffedffed
 8005d60:	ffedffed 	.word	0xffedffed
 8005d64:	0083009f 	.word	0x0083009f
 8005d68:	ffed004b 	.word	0xffed004b
 8005d6c:	009dffed 	.word	0x009dffed
 8005d70:	007dffed 	.word	0x007dffed
 8005d74:	ffedffed 	.word	0xffedffed
 8005d78:	0051      	.short	0x0051
 8005d7a:	3d45      	subs	r5, #69	; 0x45
 8005d7c:	2d02      	cmp	r5, #2
 8005d7e:	d8c8      	bhi.n	8005d12 <__ssvfiscanf_r+0xe2>
 8005d80:	2305      	movs	r3, #5
 8005d82:	e06c      	b.n	8005e5e <__ssvfiscanf_r+0x22e>
 8005d84:	6863      	ldr	r3, [r4, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	dd0e      	ble.n	8005da8 <__ssvfiscanf_r+0x178>
 8005d8a:	6823      	ldr	r3, [r4, #0]
 8005d8c:	781a      	ldrb	r2, [r3, #0]
 8005d8e:	42aa      	cmp	r2, r5
 8005d90:	d000      	beq.n	8005d94 <__ssvfiscanf_r+0x164>
 8005d92:	e0bc      	b.n	8005f0e <__ssvfiscanf_r+0x2de>
 8005d94:	3301      	adds	r3, #1
 8005d96:	6862      	ldr	r2, [r4, #4]
 8005d98:	6023      	str	r3, [r4, #0]
 8005d9a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005d9c:	3a01      	subs	r2, #1
 8005d9e:	9300      	str	r3, [sp, #0]
 8005da0:	3301      	adds	r3, #1
 8005da2:	6062      	str	r2, [r4, #4]
 8005da4:	9347      	str	r3, [sp, #284]	; 0x11c
 8005da6:	e76e      	b.n	8005c86 <__ssvfiscanf_r+0x56>
 8005da8:	22c0      	movs	r2, #192	; 0xc0
 8005daa:	ab43      	add	r3, sp, #268	; 0x10c
 8005dac:	0052      	lsls	r2, r2, #1
 8005dae:	589b      	ldr	r3, [r3, r2]
 8005db0:	0021      	movs	r1, r4
 8005db2:	0030      	movs	r0, r6
 8005db4:	9300      	str	r3, [sp, #0]
 8005db6:	4798      	blx	r3
 8005db8:	2800      	cmp	r0, #0
 8005dba:	d0e6      	beq.n	8005d8a <__ssvfiscanf_r+0x15a>
 8005dbc:	9846      	ldr	r0, [sp, #280]	; 0x118
 8005dbe:	2800      	cmp	r0, #0
 8005dc0:	d000      	beq.n	8005dc4 <__ssvfiscanf_r+0x194>
 8005dc2:	e09d      	b.n	8005f00 <__ssvfiscanf_r+0x2d0>
 8005dc4:	3801      	subs	r0, #1
 8005dc6:	23a5      	movs	r3, #165	; 0xa5
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	449d      	add	sp, r3
 8005dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dce:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005dd0:	9300      	str	r3, [sp, #0]
 8005dd2:	2320      	movs	r3, #32
 8005dd4:	9a00      	ldr	r2, [sp, #0]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	9343      	str	r3, [sp, #268]	; 0x10c
 8005dda:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005ddc:	9300      	str	r3, [sp, #0]
 8005dde:	2380      	movs	r3, #128	; 0x80
 8005de0:	9a00      	ldr	r2, [sp, #0]
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	4313      	orrs	r3, r2
 8005de6:	9343      	str	r3, [sp, #268]	; 0x10c
 8005de8:	2310      	movs	r3, #16
 8005dea:	9344      	str	r3, [sp, #272]	; 0x110
 8005dec:	236e      	movs	r3, #110	; 0x6e
 8005dee:	42ab      	cmp	r3, r5
 8005df0:	41ad      	sbcs	r5, r5
 8005df2:	426d      	negs	r5, r5
 8005df4:	3503      	adds	r5, #3
 8005df6:	9549      	str	r5, [sp, #292]	; 0x124
 8005df8:	6863      	ldr	r3, [r4, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	dd4a      	ble.n	8005e94 <__ssvfiscanf_r+0x264>
 8005dfe:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005e00:	9300      	str	r3, [sp, #0]
 8005e02:	065b      	lsls	r3, r3, #25
 8005e04:	d406      	bmi.n	8005e14 <__ssvfiscanf_r+0x1e4>
 8005e06:	6823      	ldr	r3, [r4, #0]
 8005e08:	4945      	ldr	r1, [pc, #276]	; (8005f20 <__ssvfiscanf_r+0x2f0>)
 8005e0a:	781a      	ldrb	r2, [r3, #0]
 8005e0c:	5c8a      	ldrb	r2, [r1, r2]
 8005e0e:	2108      	movs	r1, #8
 8005e10:	420a      	tst	r2, r1
 8005e12:	d14a      	bne.n	8005eaa <__ssvfiscanf_r+0x27a>
 8005e14:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	dc5e      	bgt.n	8005ed8 <__ssvfiscanf_r+0x2a8>
 8005e1a:	0022      	movs	r2, r4
 8005e1c:	0030      	movs	r0, r6
 8005e1e:	ab02      	add	r3, sp, #8
 8005e20:	a943      	add	r1, sp, #268	; 0x10c
 8005e22:	f000 fb67 	bl	80064f4 <_scanf_chars>
 8005e26:	2801      	cmp	r0, #1
 8005e28:	d071      	beq.n	8005f0e <__ssvfiscanf_r+0x2de>
 8005e2a:	2802      	cmp	r0, #2
 8005e2c:	d000      	beq.n	8005e30 <__ssvfiscanf_r+0x200>
 8005e2e:	e72a      	b.n	8005c86 <__ssvfiscanf_r+0x56>
 8005e30:	e7c4      	b.n	8005dbc <__ssvfiscanf_r+0x18c>
 8005e32:	230a      	movs	r3, #10
 8005e34:	e7d9      	b.n	8005dea <__ssvfiscanf_r+0x1ba>
 8005e36:	2300      	movs	r3, #0
 8005e38:	2503      	movs	r5, #3
 8005e3a:	9344      	str	r3, [sp, #272]	; 0x110
 8005e3c:	e7db      	b.n	8005df6 <__ssvfiscanf_r+0x1c6>
 8005e3e:	2308      	movs	r3, #8
 8005e40:	2504      	movs	r5, #4
 8005e42:	9344      	str	r3, [sp, #272]	; 0x110
 8005e44:	e7d7      	b.n	8005df6 <__ssvfiscanf_r+0x1c6>
 8005e46:	0039      	movs	r1, r7
 8005e48:	a803      	add	r0, sp, #12
 8005e4a:	f000 fcdb 	bl	8006804 <__sccl>
 8005e4e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005e50:	0007      	movs	r7, r0
 8005e52:	9300      	str	r3, [sp, #0]
 8005e54:	2340      	movs	r3, #64	; 0x40
 8005e56:	9a00      	ldr	r2, [sp, #0]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	9343      	str	r3, [sp, #268]	; 0x10c
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	9349      	str	r3, [sp, #292]	; 0x124
 8005e60:	e7ca      	b.n	8005df8 <__ssvfiscanf_r+0x1c8>
 8005e62:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005e64:	9300      	str	r3, [sp, #0]
 8005e66:	2340      	movs	r3, #64	; 0x40
 8005e68:	9a00      	ldr	r2, [sp, #0]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	9343      	str	r3, [sp, #268]	; 0x10c
 8005e6e:	2300      	movs	r3, #0
 8005e70:	e7f5      	b.n	8005e5e <__ssvfiscanf_r+0x22e>
 8005e72:	2302      	movs	r3, #2
 8005e74:	e7f3      	b.n	8005e5e <__ssvfiscanf_r+0x22e>
 8005e76:	9843      	ldr	r0, [sp, #268]	; 0x10c
 8005e78:	06c3      	lsls	r3, r0, #27
 8005e7a:	d500      	bpl.n	8005e7e <__ssvfiscanf_r+0x24e>
 8005e7c:	e703      	b.n	8005c86 <__ssvfiscanf_r+0x56>
 8005e7e:	9b02      	ldr	r3, [sp, #8]
 8005e80:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8005e82:	1d19      	adds	r1, r3, #4
 8005e84:	9102      	str	r1, [sp, #8]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	07c5      	lsls	r5, r0, #31
 8005e8a:	d501      	bpl.n	8005e90 <__ssvfiscanf_r+0x260>
 8005e8c:	801a      	strh	r2, [r3, #0]
 8005e8e:	e6fa      	b.n	8005c86 <__ssvfiscanf_r+0x56>
 8005e90:	601a      	str	r2, [r3, #0]
 8005e92:	e6f8      	b.n	8005c86 <__ssvfiscanf_r+0x56>
 8005e94:	22c0      	movs	r2, #192	; 0xc0
 8005e96:	ab43      	add	r3, sp, #268	; 0x10c
 8005e98:	0052      	lsls	r2, r2, #1
 8005e9a:	589b      	ldr	r3, [r3, r2]
 8005e9c:	0021      	movs	r1, r4
 8005e9e:	0030      	movs	r0, r6
 8005ea0:	9300      	str	r3, [sp, #0]
 8005ea2:	4798      	blx	r3
 8005ea4:	2800      	cmp	r0, #0
 8005ea6:	d0aa      	beq.n	8005dfe <__ssvfiscanf_r+0x1ce>
 8005ea8:	e788      	b.n	8005dbc <__ssvfiscanf_r+0x18c>
 8005eaa:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8005eac:	9200      	str	r2, [sp, #0]
 8005eae:	3201      	adds	r2, #1
 8005eb0:	9247      	str	r2, [sp, #284]	; 0x11c
 8005eb2:	6862      	ldr	r2, [r4, #4]
 8005eb4:	3a01      	subs	r2, #1
 8005eb6:	6062      	str	r2, [r4, #4]
 8005eb8:	2a00      	cmp	r2, #0
 8005eba:	dd02      	ble.n	8005ec2 <__ssvfiscanf_r+0x292>
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	6023      	str	r3, [r4, #0]
 8005ec0:	e7a1      	b.n	8005e06 <__ssvfiscanf_r+0x1d6>
 8005ec2:	22c0      	movs	r2, #192	; 0xc0
 8005ec4:	ab43      	add	r3, sp, #268	; 0x10c
 8005ec6:	0052      	lsls	r2, r2, #1
 8005ec8:	589b      	ldr	r3, [r3, r2]
 8005eca:	0021      	movs	r1, r4
 8005ecc:	0030      	movs	r0, r6
 8005ece:	9300      	str	r3, [sp, #0]
 8005ed0:	4798      	blx	r3
 8005ed2:	2800      	cmp	r0, #0
 8005ed4:	d097      	beq.n	8005e06 <__ssvfiscanf_r+0x1d6>
 8005ed6:	e771      	b.n	8005dbc <__ssvfiscanf_r+0x18c>
 8005ed8:	2b04      	cmp	r3, #4
 8005eda:	dc06      	bgt.n	8005eea <__ssvfiscanf_r+0x2ba>
 8005edc:	0022      	movs	r2, r4
 8005ede:	0030      	movs	r0, r6
 8005ee0:	ab02      	add	r3, sp, #8
 8005ee2:	a943      	add	r1, sp, #268	; 0x10c
 8005ee4:	f000 fb64 	bl	80065b0 <_scanf_i>
 8005ee8:	e79d      	b.n	8005e26 <__ssvfiscanf_r+0x1f6>
 8005eea:	4b0f      	ldr	r3, [pc, #60]	; (8005f28 <__ssvfiscanf_r+0x2f8>)
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d100      	bne.n	8005ef2 <__ssvfiscanf_r+0x2c2>
 8005ef0:	e6c9      	b.n	8005c86 <__ssvfiscanf_r+0x56>
 8005ef2:	0022      	movs	r2, r4
 8005ef4:	0030      	movs	r0, r6
 8005ef6:	ab02      	add	r3, sp, #8
 8005ef8:	a943      	add	r1, sp, #268	; 0x10c
 8005efa:	e000      	b.n	8005efe <__ssvfiscanf_r+0x2ce>
 8005efc:	bf00      	nop
 8005efe:	e792      	b.n	8005e26 <__ssvfiscanf_r+0x1f6>
 8005f00:	89a3      	ldrh	r3, [r4, #12]
 8005f02:	065b      	lsls	r3, r3, #25
 8005f04:	d400      	bmi.n	8005f08 <__ssvfiscanf_r+0x2d8>
 8005f06:	e75e      	b.n	8005dc6 <__ssvfiscanf_r+0x196>
 8005f08:	2001      	movs	r0, #1
 8005f0a:	4240      	negs	r0, r0
 8005f0c:	e75b      	b.n	8005dc6 <__ssvfiscanf_r+0x196>
 8005f0e:	9846      	ldr	r0, [sp, #280]	; 0x118
 8005f10:	e759      	b.n	8005dc6 <__ssvfiscanf_r+0x196>
 8005f12:	46c0      	nop			; (mov r8, r8)
 8005f14:	fffffd6c 	.word	0xfffffd6c
 8005f18:	08005b79 	.word	0x08005b79
 8005f1c:	08005bf1 	.word	0x08005bf1
 8005f20:	0800766f 	.word	0x0800766f
 8005f24:	08007626 	.word	0x08007626
 8005f28:	00000000 	.word	0x00000000

08005f2c <__sfputc_r>:
 8005f2c:	6893      	ldr	r3, [r2, #8]
 8005f2e:	b510      	push	{r4, lr}
 8005f30:	3b01      	subs	r3, #1
 8005f32:	6093      	str	r3, [r2, #8]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	da04      	bge.n	8005f42 <__sfputc_r+0x16>
 8005f38:	6994      	ldr	r4, [r2, #24]
 8005f3a:	42a3      	cmp	r3, r4
 8005f3c:	db07      	blt.n	8005f4e <__sfputc_r+0x22>
 8005f3e:	290a      	cmp	r1, #10
 8005f40:	d005      	beq.n	8005f4e <__sfputc_r+0x22>
 8005f42:	6813      	ldr	r3, [r2, #0]
 8005f44:	1c58      	adds	r0, r3, #1
 8005f46:	6010      	str	r0, [r2, #0]
 8005f48:	7019      	strb	r1, [r3, #0]
 8005f4a:	0008      	movs	r0, r1
 8005f4c:	bd10      	pop	{r4, pc}
 8005f4e:	f000 fdf3 	bl	8006b38 <__swbuf_r>
 8005f52:	0001      	movs	r1, r0
 8005f54:	e7f9      	b.n	8005f4a <__sfputc_r+0x1e>

08005f56 <__sfputs_r>:
 8005f56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f58:	0006      	movs	r6, r0
 8005f5a:	000f      	movs	r7, r1
 8005f5c:	0014      	movs	r4, r2
 8005f5e:	18d5      	adds	r5, r2, r3
 8005f60:	42ac      	cmp	r4, r5
 8005f62:	d101      	bne.n	8005f68 <__sfputs_r+0x12>
 8005f64:	2000      	movs	r0, #0
 8005f66:	e007      	b.n	8005f78 <__sfputs_r+0x22>
 8005f68:	7821      	ldrb	r1, [r4, #0]
 8005f6a:	003a      	movs	r2, r7
 8005f6c:	0030      	movs	r0, r6
 8005f6e:	f7ff ffdd 	bl	8005f2c <__sfputc_r>
 8005f72:	3401      	adds	r4, #1
 8005f74:	1c43      	adds	r3, r0, #1
 8005f76:	d1f3      	bne.n	8005f60 <__sfputs_r+0xa>
 8005f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005f7c <_vfiprintf_r>:
 8005f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f7e:	b0a1      	sub	sp, #132	; 0x84
 8005f80:	0006      	movs	r6, r0
 8005f82:	000c      	movs	r4, r1
 8005f84:	001f      	movs	r7, r3
 8005f86:	9203      	str	r2, [sp, #12]
 8005f88:	2800      	cmp	r0, #0
 8005f8a:	d004      	beq.n	8005f96 <_vfiprintf_r+0x1a>
 8005f8c:	6983      	ldr	r3, [r0, #24]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d101      	bne.n	8005f96 <_vfiprintf_r+0x1a>
 8005f92:	f000 ffd5 	bl	8006f40 <__sinit>
 8005f96:	4b8e      	ldr	r3, [pc, #568]	; (80061d0 <_vfiprintf_r+0x254>)
 8005f98:	429c      	cmp	r4, r3
 8005f9a:	d11c      	bne.n	8005fd6 <_vfiprintf_r+0x5a>
 8005f9c:	6874      	ldr	r4, [r6, #4]
 8005f9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005fa0:	07db      	lsls	r3, r3, #31
 8005fa2:	d405      	bmi.n	8005fb0 <_vfiprintf_r+0x34>
 8005fa4:	89a3      	ldrh	r3, [r4, #12]
 8005fa6:	059b      	lsls	r3, r3, #22
 8005fa8:	d402      	bmi.n	8005fb0 <_vfiprintf_r+0x34>
 8005faa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fac:	f001 f869 	bl	8007082 <__retarget_lock_acquire_recursive>
 8005fb0:	89a3      	ldrh	r3, [r4, #12]
 8005fb2:	071b      	lsls	r3, r3, #28
 8005fb4:	d502      	bpl.n	8005fbc <_vfiprintf_r+0x40>
 8005fb6:	6923      	ldr	r3, [r4, #16]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d11d      	bne.n	8005ff8 <_vfiprintf_r+0x7c>
 8005fbc:	0021      	movs	r1, r4
 8005fbe:	0030      	movs	r0, r6
 8005fc0:	f000 fe10 	bl	8006be4 <__swsetup_r>
 8005fc4:	2800      	cmp	r0, #0
 8005fc6:	d017      	beq.n	8005ff8 <_vfiprintf_r+0x7c>
 8005fc8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005fca:	07db      	lsls	r3, r3, #31
 8005fcc:	d50d      	bpl.n	8005fea <_vfiprintf_r+0x6e>
 8005fce:	2001      	movs	r0, #1
 8005fd0:	4240      	negs	r0, r0
 8005fd2:	b021      	add	sp, #132	; 0x84
 8005fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fd6:	4b7f      	ldr	r3, [pc, #508]	; (80061d4 <_vfiprintf_r+0x258>)
 8005fd8:	429c      	cmp	r4, r3
 8005fda:	d101      	bne.n	8005fe0 <_vfiprintf_r+0x64>
 8005fdc:	68b4      	ldr	r4, [r6, #8]
 8005fde:	e7de      	b.n	8005f9e <_vfiprintf_r+0x22>
 8005fe0:	4b7d      	ldr	r3, [pc, #500]	; (80061d8 <_vfiprintf_r+0x25c>)
 8005fe2:	429c      	cmp	r4, r3
 8005fe4:	d1db      	bne.n	8005f9e <_vfiprintf_r+0x22>
 8005fe6:	68f4      	ldr	r4, [r6, #12]
 8005fe8:	e7d9      	b.n	8005f9e <_vfiprintf_r+0x22>
 8005fea:	89a3      	ldrh	r3, [r4, #12]
 8005fec:	059b      	lsls	r3, r3, #22
 8005fee:	d4ee      	bmi.n	8005fce <_vfiprintf_r+0x52>
 8005ff0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ff2:	f001 f847 	bl	8007084 <__retarget_lock_release_recursive>
 8005ff6:	e7ea      	b.n	8005fce <_vfiprintf_r+0x52>
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	ad08      	add	r5, sp, #32
 8005ffc:	616b      	str	r3, [r5, #20]
 8005ffe:	3320      	adds	r3, #32
 8006000:	766b      	strb	r3, [r5, #25]
 8006002:	3310      	adds	r3, #16
 8006004:	76ab      	strb	r3, [r5, #26]
 8006006:	9707      	str	r7, [sp, #28]
 8006008:	9f03      	ldr	r7, [sp, #12]
 800600a:	783b      	ldrb	r3, [r7, #0]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d001      	beq.n	8006014 <_vfiprintf_r+0x98>
 8006010:	2b25      	cmp	r3, #37	; 0x25
 8006012:	d14e      	bne.n	80060b2 <_vfiprintf_r+0x136>
 8006014:	9b03      	ldr	r3, [sp, #12]
 8006016:	1afb      	subs	r3, r7, r3
 8006018:	9305      	str	r3, [sp, #20]
 800601a:	9b03      	ldr	r3, [sp, #12]
 800601c:	429f      	cmp	r7, r3
 800601e:	d00d      	beq.n	800603c <_vfiprintf_r+0xc0>
 8006020:	9b05      	ldr	r3, [sp, #20]
 8006022:	0021      	movs	r1, r4
 8006024:	0030      	movs	r0, r6
 8006026:	9a03      	ldr	r2, [sp, #12]
 8006028:	f7ff ff95 	bl	8005f56 <__sfputs_r>
 800602c:	1c43      	adds	r3, r0, #1
 800602e:	d100      	bne.n	8006032 <_vfiprintf_r+0xb6>
 8006030:	e0b5      	b.n	800619e <_vfiprintf_r+0x222>
 8006032:	696a      	ldr	r2, [r5, #20]
 8006034:	9b05      	ldr	r3, [sp, #20]
 8006036:	4694      	mov	ip, r2
 8006038:	4463      	add	r3, ip
 800603a:	616b      	str	r3, [r5, #20]
 800603c:	783b      	ldrb	r3, [r7, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d100      	bne.n	8006044 <_vfiprintf_r+0xc8>
 8006042:	e0ac      	b.n	800619e <_vfiprintf_r+0x222>
 8006044:	2201      	movs	r2, #1
 8006046:	1c7b      	adds	r3, r7, #1
 8006048:	9303      	str	r3, [sp, #12]
 800604a:	2300      	movs	r3, #0
 800604c:	4252      	negs	r2, r2
 800604e:	606a      	str	r2, [r5, #4]
 8006050:	a904      	add	r1, sp, #16
 8006052:	3254      	adds	r2, #84	; 0x54
 8006054:	1852      	adds	r2, r2, r1
 8006056:	602b      	str	r3, [r5, #0]
 8006058:	60eb      	str	r3, [r5, #12]
 800605a:	60ab      	str	r3, [r5, #8]
 800605c:	7013      	strb	r3, [r2, #0]
 800605e:	65ab      	str	r3, [r5, #88]	; 0x58
 8006060:	9b03      	ldr	r3, [sp, #12]
 8006062:	2205      	movs	r2, #5
 8006064:	7819      	ldrb	r1, [r3, #0]
 8006066:	485d      	ldr	r0, [pc, #372]	; (80061dc <_vfiprintf_r+0x260>)
 8006068:	f001 f87a 	bl	8007160 <memchr>
 800606c:	9b03      	ldr	r3, [sp, #12]
 800606e:	1c5f      	adds	r7, r3, #1
 8006070:	2800      	cmp	r0, #0
 8006072:	d120      	bne.n	80060b6 <_vfiprintf_r+0x13a>
 8006074:	682a      	ldr	r2, [r5, #0]
 8006076:	06d3      	lsls	r3, r2, #27
 8006078:	d504      	bpl.n	8006084 <_vfiprintf_r+0x108>
 800607a:	2353      	movs	r3, #83	; 0x53
 800607c:	a904      	add	r1, sp, #16
 800607e:	185b      	adds	r3, r3, r1
 8006080:	2120      	movs	r1, #32
 8006082:	7019      	strb	r1, [r3, #0]
 8006084:	0713      	lsls	r3, r2, #28
 8006086:	d504      	bpl.n	8006092 <_vfiprintf_r+0x116>
 8006088:	2353      	movs	r3, #83	; 0x53
 800608a:	a904      	add	r1, sp, #16
 800608c:	185b      	adds	r3, r3, r1
 800608e:	212b      	movs	r1, #43	; 0x2b
 8006090:	7019      	strb	r1, [r3, #0]
 8006092:	9b03      	ldr	r3, [sp, #12]
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	2b2a      	cmp	r3, #42	; 0x2a
 8006098:	d016      	beq.n	80060c8 <_vfiprintf_r+0x14c>
 800609a:	2100      	movs	r1, #0
 800609c:	68eb      	ldr	r3, [r5, #12]
 800609e:	9f03      	ldr	r7, [sp, #12]
 80060a0:	783a      	ldrb	r2, [r7, #0]
 80060a2:	1c78      	adds	r0, r7, #1
 80060a4:	3a30      	subs	r2, #48	; 0x30
 80060a6:	4684      	mov	ip, r0
 80060a8:	2a09      	cmp	r2, #9
 80060aa:	d94f      	bls.n	800614c <_vfiprintf_r+0x1d0>
 80060ac:	2900      	cmp	r1, #0
 80060ae:	d111      	bne.n	80060d4 <_vfiprintf_r+0x158>
 80060b0:	e017      	b.n	80060e2 <_vfiprintf_r+0x166>
 80060b2:	3701      	adds	r7, #1
 80060b4:	e7a9      	b.n	800600a <_vfiprintf_r+0x8e>
 80060b6:	4b49      	ldr	r3, [pc, #292]	; (80061dc <_vfiprintf_r+0x260>)
 80060b8:	682a      	ldr	r2, [r5, #0]
 80060ba:	1ac0      	subs	r0, r0, r3
 80060bc:	2301      	movs	r3, #1
 80060be:	4083      	lsls	r3, r0
 80060c0:	4313      	orrs	r3, r2
 80060c2:	602b      	str	r3, [r5, #0]
 80060c4:	9703      	str	r7, [sp, #12]
 80060c6:	e7cb      	b.n	8006060 <_vfiprintf_r+0xe4>
 80060c8:	9b07      	ldr	r3, [sp, #28]
 80060ca:	1d19      	adds	r1, r3, #4
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	9107      	str	r1, [sp, #28]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	db01      	blt.n	80060d8 <_vfiprintf_r+0x15c>
 80060d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80060d6:	e004      	b.n	80060e2 <_vfiprintf_r+0x166>
 80060d8:	425b      	negs	r3, r3
 80060da:	60eb      	str	r3, [r5, #12]
 80060dc:	2302      	movs	r3, #2
 80060de:	4313      	orrs	r3, r2
 80060e0:	602b      	str	r3, [r5, #0]
 80060e2:	783b      	ldrb	r3, [r7, #0]
 80060e4:	2b2e      	cmp	r3, #46	; 0x2e
 80060e6:	d10a      	bne.n	80060fe <_vfiprintf_r+0x182>
 80060e8:	787b      	ldrb	r3, [r7, #1]
 80060ea:	2b2a      	cmp	r3, #42	; 0x2a
 80060ec:	d137      	bne.n	800615e <_vfiprintf_r+0x1e2>
 80060ee:	9b07      	ldr	r3, [sp, #28]
 80060f0:	3702      	adds	r7, #2
 80060f2:	1d1a      	adds	r2, r3, #4
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	9207      	str	r2, [sp, #28]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	db2d      	blt.n	8006158 <_vfiprintf_r+0x1dc>
 80060fc:	9309      	str	r3, [sp, #36]	; 0x24
 80060fe:	2203      	movs	r2, #3
 8006100:	7839      	ldrb	r1, [r7, #0]
 8006102:	4837      	ldr	r0, [pc, #220]	; (80061e0 <_vfiprintf_r+0x264>)
 8006104:	f001 f82c 	bl	8007160 <memchr>
 8006108:	2800      	cmp	r0, #0
 800610a:	d007      	beq.n	800611c <_vfiprintf_r+0x1a0>
 800610c:	4b34      	ldr	r3, [pc, #208]	; (80061e0 <_vfiprintf_r+0x264>)
 800610e:	682a      	ldr	r2, [r5, #0]
 8006110:	1ac0      	subs	r0, r0, r3
 8006112:	2340      	movs	r3, #64	; 0x40
 8006114:	4083      	lsls	r3, r0
 8006116:	4313      	orrs	r3, r2
 8006118:	3701      	adds	r7, #1
 800611a:	602b      	str	r3, [r5, #0]
 800611c:	7839      	ldrb	r1, [r7, #0]
 800611e:	1c7b      	adds	r3, r7, #1
 8006120:	2206      	movs	r2, #6
 8006122:	4830      	ldr	r0, [pc, #192]	; (80061e4 <_vfiprintf_r+0x268>)
 8006124:	9303      	str	r3, [sp, #12]
 8006126:	7629      	strb	r1, [r5, #24]
 8006128:	f001 f81a 	bl	8007160 <memchr>
 800612c:	2800      	cmp	r0, #0
 800612e:	d045      	beq.n	80061bc <_vfiprintf_r+0x240>
 8006130:	4b2d      	ldr	r3, [pc, #180]	; (80061e8 <_vfiprintf_r+0x26c>)
 8006132:	2b00      	cmp	r3, #0
 8006134:	d127      	bne.n	8006186 <_vfiprintf_r+0x20a>
 8006136:	2207      	movs	r2, #7
 8006138:	9b07      	ldr	r3, [sp, #28]
 800613a:	3307      	adds	r3, #7
 800613c:	4393      	bics	r3, r2
 800613e:	3308      	adds	r3, #8
 8006140:	9307      	str	r3, [sp, #28]
 8006142:	696b      	ldr	r3, [r5, #20]
 8006144:	9a04      	ldr	r2, [sp, #16]
 8006146:	189b      	adds	r3, r3, r2
 8006148:	616b      	str	r3, [r5, #20]
 800614a:	e75d      	b.n	8006008 <_vfiprintf_r+0x8c>
 800614c:	210a      	movs	r1, #10
 800614e:	434b      	muls	r3, r1
 8006150:	4667      	mov	r7, ip
 8006152:	189b      	adds	r3, r3, r2
 8006154:	3909      	subs	r1, #9
 8006156:	e7a3      	b.n	80060a0 <_vfiprintf_r+0x124>
 8006158:	2301      	movs	r3, #1
 800615a:	425b      	negs	r3, r3
 800615c:	e7ce      	b.n	80060fc <_vfiprintf_r+0x180>
 800615e:	2300      	movs	r3, #0
 8006160:	001a      	movs	r2, r3
 8006162:	3701      	adds	r7, #1
 8006164:	606b      	str	r3, [r5, #4]
 8006166:	7839      	ldrb	r1, [r7, #0]
 8006168:	1c78      	adds	r0, r7, #1
 800616a:	3930      	subs	r1, #48	; 0x30
 800616c:	4684      	mov	ip, r0
 800616e:	2909      	cmp	r1, #9
 8006170:	d903      	bls.n	800617a <_vfiprintf_r+0x1fe>
 8006172:	2b00      	cmp	r3, #0
 8006174:	d0c3      	beq.n	80060fe <_vfiprintf_r+0x182>
 8006176:	9209      	str	r2, [sp, #36]	; 0x24
 8006178:	e7c1      	b.n	80060fe <_vfiprintf_r+0x182>
 800617a:	230a      	movs	r3, #10
 800617c:	435a      	muls	r2, r3
 800617e:	4667      	mov	r7, ip
 8006180:	1852      	adds	r2, r2, r1
 8006182:	3b09      	subs	r3, #9
 8006184:	e7ef      	b.n	8006166 <_vfiprintf_r+0x1ea>
 8006186:	ab07      	add	r3, sp, #28
 8006188:	9300      	str	r3, [sp, #0]
 800618a:	0022      	movs	r2, r4
 800618c:	0029      	movs	r1, r5
 800618e:	0030      	movs	r0, r6
 8006190:	4b16      	ldr	r3, [pc, #88]	; (80061ec <_vfiprintf_r+0x270>)
 8006192:	e000      	b.n	8006196 <_vfiprintf_r+0x21a>
 8006194:	bf00      	nop
 8006196:	9004      	str	r0, [sp, #16]
 8006198:	9b04      	ldr	r3, [sp, #16]
 800619a:	3301      	adds	r3, #1
 800619c:	d1d1      	bne.n	8006142 <_vfiprintf_r+0x1c6>
 800619e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061a0:	07db      	lsls	r3, r3, #31
 80061a2:	d405      	bmi.n	80061b0 <_vfiprintf_r+0x234>
 80061a4:	89a3      	ldrh	r3, [r4, #12]
 80061a6:	059b      	lsls	r3, r3, #22
 80061a8:	d402      	bmi.n	80061b0 <_vfiprintf_r+0x234>
 80061aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061ac:	f000 ff6a 	bl	8007084 <__retarget_lock_release_recursive>
 80061b0:	89a3      	ldrh	r3, [r4, #12]
 80061b2:	065b      	lsls	r3, r3, #25
 80061b4:	d500      	bpl.n	80061b8 <_vfiprintf_r+0x23c>
 80061b6:	e70a      	b.n	8005fce <_vfiprintf_r+0x52>
 80061b8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80061ba:	e70a      	b.n	8005fd2 <_vfiprintf_r+0x56>
 80061bc:	ab07      	add	r3, sp, #28
 80061be:	9300      	str	r3, [sp, #0]
 80061c0:	0022      	movs	r2, r4
 80061c2:	0029      	movs	r1, r5
 80061c4:	0030      	movs	r0, r6
 80061c6:	4b09      	ldr	r3, [pc, #36]	; (80061ec <_vfiprintf_r+0x270>)
 80061c8:	f000 f882 	bl	80062d0 <_printf_i>
 80061cc:	e7e3      	b.n	8006196 <_vfiprintf_r+0x21a>
 80061ce:	46c0      	nop			; (mov r8, r8)
 80061d0:	08007790 	.word	0x08007790
 80061d4:	080077b0 	.word	0x080077b0
 80061d8:	08007770 	.word	0x08007770
 80061dc:	08007620 	.word	0x08007620
 80061e0:	08007626 	.word	0x08007626
 80061e4:	0800762a 	.word	0x0800762a
 80061e8:	00000000 	.word	0x00000000
 80061ec:	08005f57 	.word	0x08005f57

080061f0 <_printf_common>:
 80061f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061f2:	0015      	movs	r5, r2
 80061f4:	9301      	str	r3, [sp, #4]
 80061f6:	688a      	ldr	r2, [r1, #8]
 80061f8:	690b      	ldr	r3, [r1, #16]
 80061fa:	000c      	movs	r4, r1
 80061fc:	9000      	str	r0, [sp, #0]
 80061fe:	4293      	cmp	r3, r2
 8006200:	da00      	bge.n	8006204 <_printf_common+0x14>
 8006202:	0013      	movs	r3, r2
 8006204:	0022      	movs	r2, r4
 8006206:	602b      	str	r3, [r5, #0]
 8006208:	3243      	adds	r2, #67	; 0x43
 800620a:	7812      	ldrb	r2, [r2, #0]
 800620c:	2a00      	cmp	r2, #0
 800620e:	d001      	beq.n	8006214 <_printf_common+0x24>
 8006210:	3301      	adds	r3, #1
 8006212:	602b      	str	r3, [r5, #0]
 8006214:	6823      	ldr	r3, [r4, #0]
 8006216:	069b      	lsls	r3, r3, #26
 8006218:	d502      	bpl.n	8006220 <_printf_common+0x30>
 800621a:	682b      	ldr	r3, [r5, #0]
 800621c:	3302      	adds	r3, #2
 800621e:	602b      	str	r3, [r5, #0]
 8006220:	6822      	ldr	r2, [r4, #0]
 8006222:	2306      	movs	r3, #6
 8006224:	0017      	movs	r7, r2
 8006226:	401f      	ands	r7, r3
 8006228:	421a      	tst	r2, r3
 800622a:	d027      	beq.n	800627c <_printf_common+0x8c>
 800622c:	0023      	movs	r3, r4
 800622e:	3343      	adds	r3, #67	; 0x43
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	1e5a      	subs	r2, r3, #1
 8006234:	4193      	sbcs	r3, r2
 8006236:	6822      	ldr	r2, [r4, #0]
 8006238:	0692      	lsls	r2, r2, #26
 800623a:	d430      	bmi.n	800629e <_printf_common+0xae>
 800623c:	0022      	movs	r2, r4
 800623e:	9901      	ldr	r1, [sp, #4]
 8006240:	9800      	ldr	r0, [sp, #0]
 8006242:	9e08      	ldr	r6, [sp, #32]
 8006244:	3243      	adds	r2, #67	; 0x43
 8006246:	47b0      	blx	r6
 8006248:	1c43      	adds	r3, r0, #1
 800624a:	d025      	beq.n	8006298 <_printf_common+0xa8>
 800624c:	2306      	movs	r3, #6
 800624e:	6820      	ldr	r0, [r4, #0]
 8006250:	682a      	ldr	r2, [r5, #0]
 8006252:	68e1      	ldr	r1, [r4, #12]
 8006254:	2500      	movs	r5, #0
 8006256:	4003      	ands	r3, r0
 8006258:	2b04      	cmp	r3, #4
 800625a:	d103      	bne.n	8006264 <_printf_common+0x74>
 800625c:	1a8d      	subs	r5, r1, r2
 800625e:	43eb      	mvns	r3, r5
 8006260:	17db      	asrs	r3, r3, #31
 8006262:	401d      	ands	r5, r3
 8006264:	68a3      	ldr	r3, [r4, #8]
 8006266:	6922      	ldr	r2, [r4, #16]
 8006268:	4293      	cmp	r3, r2
 800626a:	dd01      	ble.n	8006270 <_printf_common+0x80>
 800626c:	1a9b      	subs	r3, r3, r2
 800626e:	18ed      	adds	r5, r5, r3
 8006270:	2700      	movs	r7, #0
 8006272:	42bd      	cmp	r5, r7
 8006274:	d120      	bne.n	80062b8 <_printf_common+0xc8>
 8006276:	2000      	movs	r0, #0
 8006278:	e010      	b.n	800629c <_printf_common+0xac>
 800627a:	3701      	adds	r7, #1
 800627c:	68e3      	ldr	r3, [r4, #12]
 800627e:	682a      	ldr	r2, [r5, #0]
 8006280:	1a9b      	subs	r3, r3, r2
 8006282:	42bb      	cmp	r3, r7
 8006284:	ddd2      	ble.n	800622c <_printf_common+0x3c>
 8006286:	0022      	movs	r2, r4
 8006288:	2301      	movs	r3, #1
 800628a:	9901      	ldr	r1, [sp, #4]
 800628c:	9800      	ldr	r0, [sp, #0]
 800628e:	9e08      	ldr	r6, [sp, #32]
 8006290:	3219      	adds	r2, #25
 8006292:	47b0      	blx	r6
 8006294:	1c43      	adds	r3, r0, #1
 8006296:	d1f0      	bne.n	800627a <_printf_common+0x8a>
 8006298:	2001      	movs	r0, #1
 800629a:	4240      	negs	r0, r0
 800629c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800629e:	2030      	movs	r0, #48	; 0x30
 80062a0:	18e1      	adds	r1, r4, r3
 80062a2:	3143      	adds	r1, #67	; 0x43
 80062a4:	7008      	strb	r0, [r1, #0]
 80062a6:	0021      	movs	r1, r4
 80062a8:	1c5a      	adds	r2, r3, #1
 80062aa:	3145      	adds	r1, #69	; 0x45
 80062ac:	7809      	ldrb	r1, [r1, #0]
 80062ae:	18a2      	adds	r2, r4, r2
 80062b0:	3243      	adds	r2, #67	; 0x43
 80062b2:	3302      	adds	r3, #2
 80062b4:	7011      	strb	r1, [r2, #0]
 80062b6:	e7c1      	b.n	800623c <_printf_common+0x4c>
 80062b8:	0022      	movs	r2, r4
 80062ba:	2301      	movs	r3, #1
 80062bc:	9901      	ldr	r1, [sp, #4]
 80062be:	9800      	ldr	r0, [sp, #0]
 80062c0:	9e08      	ldr	r6, [sp, #32]
 80062c2:	321a      	adds	r2, #26
 80062c4:	47b0      	blx	r6
 80062c6:	1c43      	adds	r3, r0, #1
 80062c8:	d0e6      	beq.n	8006298 <_printf_common+0xa8>
 80062ca:	3701      	adds	r7, #1
 80062cc:	e7d1      	b.n	8006272 <_printf_common+0x82>
	...

080062d0 <_printf_i>:
 80062d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062d2:	b08b      	sub	sp, #44	; 0x2c
 80062d4:	9206      	str	r2, [sp, #24]
 80062d6:	000a      	movs	r2, r1
 80062d8:	3243      	adds	r2, #67	; 0x43
 80062da:	9307      	str	r3, [sp, #28]
 80062dc:	9005      	str	r0, [sp, #20]
 80062de:	9204      	str	r2, [sp, #16]
 80062e0:	7e0a      	ldrb	r2, [r1, #24]
 80062e2:	000c      	movs	r4, r1
 80062e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80062e6:	2a78      	cmp	r2, #120	; 0x78
 80062e8:	d807      	bhi.n	80062fa <_printf_i+0x2a>
 80062ea:	2a62      	cmp	r2, #98	; 0x62
 80062ec:	d809      	bhi.n	8006302 <_printf_i+0x32>
 80062ee:	2a00      	cmp	r2, #0
 80062f0:	d100      	bne.n	80062f4 <_printf_i+0x24>
 80062f2:	e0c1      	b.n	8006478 <_printf_i+0x1a8>
 80062f4:	2a58      	cmp	r2, #88	; 0x58
 80062f6:	d100      	bne.n	80062fa <_printf_i+0x2a>
 80062f8:	e08c      	b.n	8006414 <_printf_i+0x144>
 80062fa:	0026      	movs	r6, r4
 80062fc:	3642      	adds	r6, #66	; 0x42
 80062fe:	7032      	strb	r2, [r6, #0]
 8006300:	e022      	b.n	8006348 <_printf_i+0x78>
 8006302:	0010      	movs	r0, r2
 8006304:	3863      	subs	r0, #99	; 0x63
 8006306:	2815      	cmp	r0, #21
 8006308:	d8f7      	bhi.n	80062fa <_printf_i+0x2a>
 800630a:	f7f9 ff03 	bl	8000114 <__gnu_thumb1_case_shi>
 800630e:	0016      	.short	0x0016
 8006310:	fff6001f 	.word	0xfff6001f
 8006314:	fff6fff6 	.word	0xfff6fff6
 8006318:	001ffff6 	.word	0x001ffff6
 800631c:	fff6fff6 	.word	0xfff6fff6
 8006320:	fff6fff6 	.word	0xfff6fff6
 8006324:	003600a8 	.word	0x003600a8
 8006328:	fff6009a 	.word	0xfff6009a
 800632c:	00b9fff6 	.word	0x00b9fff6
 8006330:	0036fff6 	.word	0x0036fff6
 8006334:	fff6fff6 	.word	0xfff6fff6
 8006338:	009e      	.short	0x009e
 800633a:	0026      	movs	r6, r4
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	3642      	adds	r6, #66	; 0x42
 8006340:	1d11      	adds	r1, r2, #4
 8006342:	6019      	str	r1, [r3, #0]
 8006344:	6813      	ldr	r3, [r2, #0]
 8006346:	7033      	strb	r3, [r6, #0]
 8006348:	2301      	movs	r3, #1
 800634a:	e0a7      	b.n	800649c <_printf_i+0x1cc>
 800634c:	6808      	ldr	r0, [r1, #0]
 800634e:	6819      	ldr	r1, [r3, #0]
 8006350:	1d0a      	adds	r2, r1, #4
 8006352:	0605      	lsls	r5, r0, #24
 8006354:	d50b      	bpl.n	800636e <_printf_i+0x9e>
 8006356:	680d      	ldr	r5, [r1, #0]
 8006358:	601a      	str	r2, [r3, #0]
 800635a:	2d00      	cmp	r5, #0
 800635c:	da03      	bge.n	8006366 <_printf_i+0x96>
 800635e:	232d      	movs	r3, #45	; 0x2d
 8006360:	9a04      	ldr	r2, [sp, #16]
 8006362:	426d      	negs	r5, r5
 8006364:	7013      	strb	r3, [r2, #0]
 8006366:	4b61      	ldr	r3, [pc, #388]	; (80064ec <_printf_i+0x21c>)
 8006368:	270a      	movs	r7, #10
 800636a:	9303      	str	r3, [sp, #12]
 800636c:	e01b      	b.n	80063a6 <_printf_i+0xd6>
 800636e:	680d      	ldr	r5, [r1, #0]
 8006370:	601a      	str	r2, [r3, #0]
 8006372:	0641      	lsls	r1, r0, #25
 8006374:	d5f1      	bpl.n	800635a <_printf_i+0x8a>
 8006376:	b22d      	sxth	r5, r5
 8006378:	e7ef      	b.n	800635a <_printf_i+0x8a>
 800637a:	680d      	ldr	r5, [r1, #0]
 800637c:	6819      	ldr	r1, [r3, #0]
 800637e:	1d08      	adds	r0, r1, #4
 8006380:	6018      	str	r0, [r3, #0]
 8006382:	062e      	lsls	r6, r5, #24
 8006384:	d501      	bpl.n	800638a <_printf_i+0xba>
 8006386:	680d      	ldr	r5, [r1, #0]
 8006388:	e003      	b.n	8006392 <_printf_i+0xc2>
 800638a:	066d      	lsls	r5, r5, #25
 800638c:	d5fb      	bpl.n	8006386 <_printf_i+0xb6>
 800638e:	680d      	ldr	r5, [r1, #0]
 8006390:	b2ad      	uxth	r5, r5
 8006392:	4b56      	ldr	r3, [pc, #344]	; (80064ec <_printf_i+0x21c>)
 8006394:	2708      	movs	r7, #8
 8006396:	9303      	str	r3, [sp, #12]
 8006398:	2a6f      	cmp	r2, #111	; 0x6f
 800639a:	d000      	beq.n	800639e <_printf_i+0xce>
 800639c:	3702      	adds	r7, #2
 800639e:	0023      	movs	r3, r4
 80063a0:	2200      	movs	r2, #0
 80063a2:	3343      	adds	r3, #67	; 0x43
 80063a4:	701a      	strb	r2, [r3, #0]
 80063a6:	6863      	ldr	r3, [r4, #4]
 80063a8:	60a3      	str	r3, [r4, #8]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	db03      	blt.n	80063b6 <_printf_i+0xe6>
 80063ae:	2204      	movs	r2, #4
 80063b0:	6821      	ldr	r1, [r4, #0]
 80063b2:	4391      	bics	r1, r2
 80063b4:	6021      	str	r1, [r4, #0]
 80063b6:	2d00      	cmp	r5, #0
 80063b8:	d102      	bne.n	80063c0 <_printf_i+0xf0>
 80063ba:	9e04      	ldr	r6, [sp, #16]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d00c      	beq.n	80063da <_printf_i+0x10a>
 80063c0:	9e04      	ldr	r6, [sp, #16]
 80063c2:	0028      	movs	r0, r5
 80063c4:	0039      	movs	r1, r7
 80063c6:	f7f9 ff35 	bl	8000234 <__aeabi_uidivmod>
 80063ca:	9b03      	ldr	r3, [sp, #12]
 80063cc:	3e01      	subs	r6, #1
 80063ce:	5c5b      	ldrb	r3, [r3, r1]
 80063d0:	7033      	strb	r3, [r6, #0]
 80063d2:	002b      	movs	r3, r5
 80063d4:	0005      	movs	r5, r0
 80063d6:	429f      	cmp	r7, r3
 80063d8:	d9f3      	bls.n	80063c2 <_printf_i+0xf2>
 80063da:	2f08      	cmp	r7, #8
 80063dc:	d109      	bne.n	80063f2 <_printf_i+0x122>
 80063de:	6823      	ldr	r3, [r4, #0]
 80063e0:	07db      	lsls	r3, r3, #31
 80063e2:	d506      	bpl.n	80063f2 <_printf_i+0x122>
 80063e4:	6863      	ldr	r3, [r4, #4]
 80063e6:	6922      	ldr	r2, [r4, #16]
 80063e8:	4293      	cmp	r3, r2
 80063ea:	dc02      	bgt.n	80063f2 <_printf_i+0x122>
 80063ec:	2330      	movs	r3, #48	; 0x30
 80063ee:	3e01      	subs	r6, #1
 80063f0:	7033      	strb	r3, [r6, #0]
 80063f2:	9b04      	ldr	r3, [sp, #16]
 80063f4:	1b9b      	subs	r3, r3, r6
 80063f6:	6123      	str	r3, [r4, #16]
 80063f8:	9b07      	ldr	r3, [sp, #28]
 80063fa:	0021      	movs	r1, r4
 80063fc:	9300      	str	r3, [sp, #0]
 80063fe:	9805      	ldr	r0, [sp, #20]
 8006400:	9b06      	ldr	r3, [sp, #24]
 8006402:	aa09      	add	r2, sp, #36	; 0x24
 8006404:	f7ff fef4 	bl	80061f0 <_printf_common>
 8006408:	1c43      	adds	r3, r0, #1
 800640a:	d14c      	bne.n	80064a6 <_printf_i+0x1d6>
 800640c:	2001      	movs	r0, #1
 800640e:	4240      	negs	r0, r0
 8006410:	b00b      	add	sp, #44	; 0x2c
 8006412:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006414:	3145      	adds	r1, #69	; 0x45
 8006416:	700a      	strb	r2, [r1, #0]
 8006418:	4a34      	ldr	r2, [pc, #208]	; (80064ec <_printf_i+0x21c>)
 800641a:	9203      	str	r2, [sp, #12]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	6821      	ldr	r1, [r4, #0]
 8006420:	ca20      	ldmia	r2!, {r5}
 8006422:	601a      	str	r2, [r3, #0]
 8006424:	0608      	lsls	r0, r1, #24
 8006426:	d516      	bpl.n	8006456 <_printf_i+0x186>
 8006428:	07cb      	lsls	r3, r1, #31
 800642a:	d502      	bpl.n	8006432 <_printf_i+0x162>
 800642c:	2320      	movs	r3, #32
 800642e:	4319      	orrs	r1, r3
 8006430:	6021      	str	r1, [r4, #0]
 8006432:	2710      	movs	r7, #16
 8006434:	2d00      	cmp	r5, #0
 8006436:	d1b2      	bne.n	800639e <_printf_i+0xce>
 8006438:	2320      	movs	r3, #32
 800643a:	6822      	ldr	r2, [r4, #0]
 800643c:	439a      	bics	r2, r3
 800643e:	6022      	str	r2, [r4, #0]
 8006440:	e7ad      	b.n	800639e <_printf_i+0xce>
 8006442:	2220      	movs	r2, #32
 8006444:	6809      	ldr	r1, [r1, #0]
 8006446:	430a      	orrs	r2, r1
 8006448:	6022      	str	r2, [r4, #0]
 800644a:	0022      	movs	r2, r4
 800644c:	2178      	movs	r1, #120	; 0x78
 800644e:	3245      	adds	r2, #69	; 0x45
 8006450:	7011      	strb	r1, [r2, #0]
 8006452:	4a27      	ldr	r2, [pc, #156]	; (80064f0 <_printf_i+0x220>)
 8006454:	e7e1      	b.n	800641a <_printf_i+0x14a>
 8006456:	0648      	lsls	r0, r1, #25
 8006458:	d5e6      	bpl.n	8006428 <_printf_i+0x158>
 800645a:	b2ad      	uxth	r5, r5
 800645c:	e7e4      	b.n	8006428 <_printf_i+0x158>
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	680d      	ldr	r5, [r1, #0]
 8006462:	1d10      	adds	r0, r2, #4
 8006464:	6949      	ldr	r1, [r1, #20]
 8006466:	6018      	str	r0, [r3, #0]
 8006468:	6813      	ldr	r3, [r2, #0]
 800646a:	062e      	lsls	r6, r5, #24
 800646c:	d501      	bpl.n	8006472 <_printf_i+0x1a2>
 800646e:	6019      	str	r1, [r3, #0]
 8006470:	e002      	b.n	8006478 <_printf_i+0x1a8>
 8006472:	066d      	lsls	r5, r5, #25
 8006474:	d5fb      	bpl.n	800646e <_printf_i+0x19e>
 8006476:	8019      	strh	r1, [r3, #0]
 8006478:	2300      	movs	r3, #0
 800647a:	9e04      	ldr	r6, [sp, #16]
 800647c:	6123      	str	r3, [r4, #16]
 800647e:	e7bb      	b.n	80063f8 <_printf_i+0x128>
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	1d11      	adds	r1, r2, #4
 8006484:	6019      	str	r1, [r3, #0]
 8006486:	6816      	ldr	r6, [r2, #0]
 8006488:	2100      	movs	r1, #0
 800648a:	0030      	movs	r0, r6
 800648c:	6862      	ldr	r2, [r4, #4]
 800648e:	f000 fe67 	bl	8007160 <memchr>
 8006492:	2800      	cmp	r0, #0
 8006494:	d001      	beq.n	800649a <_printf_i+0x1ca>
 8006496:	1b80      	subs	r0, r0, r6
 8006498:	6060      	str	r0, [r4, #4]
 800649a:	6863      	ldr	r3, [r4, #4]
 800649c:	6123      	str	r3, [r4, #16]
 800649e:	2300      	movs	r3, #0
 80064a0:	9a04      	ldr	r2, [sp, #16]
 80064a2:	7013      	strb	r3, [r2, #0]
 80064a4:	e7a8      	b.n	80063f8 <_printf_i+0x128>
 80064a6:	6923      	ldr	r3, [r4, #16]
 80064a8:	0032      	movs	r2, r6
 80064aa:	9906      	ldr	r1, [sp, #24]
 80064ac:	9805      	ldr	r0, [sp, #20]
 80064ae:	9d07      	ldr	r5, [sp, #28]
 80064b0:	47a8      	blx	r5
 80064b2:	1c43      	adds	r3, r0, #1
 80064b4:	d0aa      	beq.n	800640c <_printf_i+0x13c>
 80064b6:	6823      	ldr	r3, [r4, #0]
 80064b8:	079b      	lsls	r3, r3, #30
 80064ba:	d415      	bmi.n	80064e8 <_printf_i+0x218>
 80064bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064be:	68e0      	ldr	r0, [r4, #12]
 80064c0:	4298      	cmp	r0, r3
 80064c2:	daa5      	bge.n	8006410 <_printf_i+0x140>
 80064c4:	0018      	movs	r0, r3
 80064c6:	e7a3      	b.n	8006410 <_printf_i+0x140>
 80064c8:	0022      	movs	r2, r4
 80064ca:	2301      	movs	r3, #1
 80064cc:	9906      	ldr	r1, [sp, #24]
 80064ce:	9805      	ldr	r0, [sp, #20]
 80064d0:	9e07      	ldr	r6, [sp, #28]
 80064d2:	3219      	adds	r2, #25
 80064d4:	47b0      	blx	r6
 80064d6:	1c43      	adds	r3, r0, #1
 80064d8:	d098      	beq.n	800640c <_printf_i+0x13c>
 80064da:	3501      	adds	r5, #1
 80064dc:	68e3      	ldr	r3, [r4, #12]
 80064de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064e0:	1a9b      	subs	r3, r3, r2
 80064e2:	42ab      	cmp	r3, r5
 80064e4:	dcf0      	bgt.n	80064c8 <_printf_i+0x1f8>
 80064e6:	e7e9      	b.n	80064bc <_printf_i+0x1ec>
 80064e8:	2500      	movs	r5, #0
 80064ea:	e7f7      	b.n	80064dc <_printf_i+0x20c>
 80064ec:	08007631 	.word	0x08007631
 80064f0:	08007642 	.word	0x08007642

080064f4 <_scanf_chars>:
 80064f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064f6:	0015      	movs	r5, r2
 80064f8:	688a      	ldr	r2, [r1, #8]
 80064fa:	000c      	movs	r4, r1
 80064fc:	9001      	str	r0, [sp, #4]
 80064fe:	2a00      	cmp	r2, #0
 8006500:	d105      	bne.n	800650e <_scanf_chars+0x1a>
 8006502:	6989      	ldr	r1, [r1, #24]
 8006504:	3201      	adds	r2, #1
 8006506:	2900      	cmp	r1, #0
 8006508:	d000      	beq.n	800650c <_scanf_chars+0x18>
 800650a:	3a02      	subs	r2, #2
 800650c:	60a2      	str	r2, [r4, #8]
 800650e:	6822      	ldr	r2, [r4, #0]
 8006510:	06d2      	lsls	r2, r2, #27
 8006512:	d403      	bmi.n	800651c <_scanf_chars+0x28>
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	1d11      	adds	r1, r2, #4
 8006518:	6019      	str	r1, [r3, #0]
 800651a:	6817      	ldr	r7, [r2, #0]
 800651c:	2600      	movs	r6, #0
 800651e:	69a0      	ldr	r0, [r4, #24]
 8006520:	2800      	cmp	r0, #0
 8006522:	d013      	beq.n	800654c <_scanf_chars+0x58>
 8006524:	2801      	cmp	r0, #1
 8006526:	d108      	bne.n	800653a <_scanf_chars+0x46>
 8006528:	682b      	ldr	r3, [r5, #0]
 800652a:	6962      	ldr	r2, [r4, #20]
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	5cd3      	ldrb	r3, [r2, r3]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d10b      	bne.n	800654c <_scanf_chars+0x58>
 8006534:	2e00      	cmp	r6, #0
 8006536:	d038      	beq.n	80065aa <_scanf_chars+0xb6>
 8006538:	e026      	b.n	8006588 <_scanf_chars+0x94>
 800653a:	2802      	cmp	r0, #2
 800653c:	d124      	bne.n	8006588 <_scanf_chars+0x94>
 800653e:	682b      	ldr	r3, [r5, #0]
 8006540:	4a1a      	ldr	r2, [pc, #104]	; (80065ac <_scanf_chars+0xb8>)
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	5cd3      	ldrb	r3, [r2, r3]
 8006546:	2208      	movs	r2, #8
 8006548:	4213      	tst	r3, r2
 800654a:	d11d      	bne.n	8006588 <_scanf_chars+0x94>
 800654c:	2210      	movs	r2, #16
 800654e:	6823      	ldr	r3, [r4, #0]
 8006550:	3601      	adds	r6, #1
 8006552:	4213      	tst	r3, r2
 8006554:	d103      	bne.n	800655e <_scanf_chars+0x6a>
 8006556:	682b      	ldr	r3, [r5, #0]
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	703b      	strb	r3, [r7, #0]
 800655c:	3701      	adds	r7, #1
 800655e:	682a      	ldr	r2, [r5, #0]
 8006560:	686b      	ldr	r3, [r5, #4]
 8006562:	3201      	adds	r2, #1
 8006564:	602a      	str	r2, [r5, #0]
 8006566:	68a2      	ldr	r2, [r4, #8]
 8006568:	3b01      	subs	r3, #1
 800656a:	3a01      	subs	r2, #1
 800656c:	606b      	str	r3, [r5, #4]
 800656e:	60a2      	str	r2, [r4, #8]
 8006570:	2a00      	cmp	r2, #0
 8006572:	d009      	beq.n	8006588 <_scanf_chars+0x94>
 8006574:	2b00      	cmp	r3, #0
 8006576:	dcd2      	bgt.n	800651e <_scanf_chars+0x2a>
 8006578:	23c0      	movs	r3, #192	; 0xc0
 800657a:	005b      	lsls	r3, r3, #1
 800657c:	0029      	movs	r1, r5
 800657e:	58e3      	ldr	r3, [r4, r3]
 8006580:	9801      	ldr	r0, [sp, #4]
 8006582:	4798      	blx	r3
 8006584:	2800      	cmp	r0, #0
 8006586:	d0ca      	beq.n	800651e <_scanf_chars+0x2a>
 8006588:	6822      	ldr	r2, [r4, #0]
 800658a:	2310      	movs	r3, #16
 800658c:	0011      	movs	r1, r2
 800658e:	4019      	ands	r1, r3
 8006590:	421a      	tst	r2, r3
 8006592:	d106      	bne.n	80065a2 <_scanf_chars+0xae>
 8006594:	68e3      	ldr	r3, [r4, #12]
 8006596:	3301      	adds	r3, #1
 8006598:	60e3      	str	r3, [r4, #12]
 800659a:	69a3      	ldr	r3, [r4, #24]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d000      	beq.n	80065a2 <_scanf_chars+0xae>
 80065a0:	7039      	strb	r1, [r7, #0]
 80065a2:	2000      	movs	r0, #0
 80065a4:	6923      	ldr	r3, [r4, #16]
 80065a6:	199e      	adds	r6, r3, r6
 80065a8:	6126      	str	r6, [r4, #16]
 80065aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80065ac:	0800766f 	.word	0x0800766f

080065b0 <_scanf_i>:
 80065b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065b2:	000c      	movs	r4, r1
 80065b4:	b08d      	sub	sp, #52	; 0x34
 80065b6:	9302      	str	r3, [sp, #8]
 80065b8:	4b79      	ldr	r3, [pc, #484]	; (80067a0 <_scanf_i+0x1f0>)
 80065ba:	0016      	movs	r6, r2
 80065bc:	9005      	str	r0, [sp, #20]
 80065be:	aa09      	add	r2, sp, #36	; 0x24
 80065c0:	cb23      	ldmia	r3!, {r0, r1, r5}
 80065c2:	c223      	stmia	r2!, {r0, r1, r5}
 80065c4:	4b77      	ldr	r3, [pc, #476]	; (80067a4 <_scanf_i+0x1f4>)
 80065c6:	9306      	str	r3, [sp, #24]
 80065c8:	69a3      	ldr	r3, [r4, #24]
 80065ca:	2b03      	cmp	r3, #3
 80065cc:	d001      	beq.n	80065d2 <_scanf_i+0x22>
 80065ce:	4b76      	ldr	r3, [pc, #472]	; (80067a8 <_scanf_i+0x1f8>)
 80065d0:	9306      	str	r3, [sp, #24]
 80065d2:	22ae      	movs	r2, #174	; 0xae
 80065d4:	2000      	movs	r0, #0
 80065d6:	68a3      	ldr	r3, [r4, #8]
 80065d8:	0052      	lsls	r2, r2, #1
 80065da:	1e59      	subs	r1, r3, #1
 80065dc:	9004      	str	r0, [sp, #16]
 80065de:	4291      	cmp	r1, r2
 80065e0:	d905      	bls.n	80065ee <_scanf_i+0x3e>
 80065e2:	3b5e      	subs	r3, #94	; 0x5e
 80065e4:	3bff      	subs	r3, #255	; 0xff
 80065e6:	9304      	str	r3, [sp, #16]
 80065e8:	235e      	movs	r3, #94	; 0x5e
 80065ea:	33ff      	adds	r3, #255	; 0xff
 80065ec:	60a3      	str	r3, [r4, #8]
 80065ee:	0023      	movs	r3, r4
 80065f0:	331c      	adds	r3, #28
 80065f2:	9301      	str	r3, [sp, #4]
 80065f4:	23d0      	movs	r3, #208	; 0xd0
 80065f6:	2700      	movs	r7, #0
 80065f8:	6822      	ldr	r2, [r4, #0]
 80065fa:	011b      	lsls	r3, r3, #4
 80065fc:	4313      	orrs	r3, r2
 80065fe:	6023      	str	r3, [r4, #0]
 8006600:	9b01      	ldr	r3, [sp, #4]
 8006602:	9303      	str	r3, [sp, #12]
 8006604:	6833      	ldr	r3, [r6, #0]
 8006606:	a809      	add	r0, sp, #36	; 0x24
 8006608:	7819      	ldrb	r1, [r3, #0]
 800660a:	00bb      	lsls	r3, r7, #2
 800660c:	2202      	movs	r2, #2
 800660e:	5818      	ldr	r0, [r3, r0]
 8006610:	f000 fda6 	bl	8007160 <memchr>
 8006614:	2800      	cmp	r0, #0
 8006616:	d02b      	beq.n	8006670 <_scanf_i+0xc0>
 8006618:	2f01      	cmp	r7, #1
 800661a:	d162      	bne.n	80066e2 <_scanf_i+0x132>
 800661c:	6863      	ldr	r3, [r4, #4]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d106      	bne.n	8006630 <_scanf_i+0x80>
 8006622:	3308      	adds	r3, #8
 8006624:	6822      	ldr	r2, [r4, #0]
 8006626:	6063      	str	r3, [r4, #4]
 8006628:	33f9      	adds	r3, #249	; 0xf9
 800662a:	33ff      	adds	r3, #255	; 0xff
 800662c:	4313      	orrs	r3, r2
 800662e:	6023      	str	r3, [r4, #0]
 8006630:	4b5e      	ldr	r3, [pc, #376]	; (80067ac <_scanf_i+0x1fc>)
 8006632:	6822      	ldr	r2, [r4, #0]
 8006634:	4013      	ands	r3, r2
 8006636:	6023      	str	r3, [r4, #0]
 8006638:	68a3      	ldr	r3, [r4, #8]
 800663a:	1e5a      	subs	r2, r3, #1
 800663c:	60a2      	str	r2, [r4, #8]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d016      	beq.n	8006670 <_scanf_i+0xc0>
 8006642:	6833      	ldr	r3, [r6, #0]
 8006644:	1c5a      	adds	r2, r3, #1
 8006646:	6032      	str	r2, [r6, #0]
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	9a03      	ldr	r2, [sp, #12]
 800664c:	7013      	strb	r3, [r2, #0]
 800664e:	6873      	ldr	r3, [r6, #4]
 8006650:	1c55      	adds	r5, r2, #1
 8006652:	3b01      	subs	r3, #1
 8006654:	6073      	str	r3, [r6, #4]
 8006656:	9503      	str	r5, [sp, #12]
 8006658:	2b00      	cmp	r3, #0
 800665a:	dc09      	bgt.n	8006670 <_scanf_i+0xc0>
 800665c:	23c0      	movs	r3, #192	; 0xc0
 800665e:	005b      	lsls	r3, r3, #1
 8006660:	58e3      	ldr	r3, [r4, r3]
 8006662:	0031      	movs	r1, r6
 8006664:	9805      	ldr	r0, [sp, #20]
 8006666:	9307      	str	r3, [sp, #28]
 8006668:	4798      	blx	r3
 800666a:	2800      	cmp	r0, #0
 800666c:	d000      	beq.n	8006670 <_scanf_i+0xc0>
 800666e:	e081      	b.n	8006774 <_scanf_i+0x1c4>
 8006670:	3701      	adds	r7, #1
 8006672:	2f03      	cmp	r7, #3
 8006674:	d1c6      	bne.n	8006604 <_scanf_i+0x54>
 8006676:	6863      	ldr	r3, [r4, #4]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d101      	bne.n	8006680 <_scanf_i+0xd0>
 800667c:	330a      	adds	r3, #10
 800667e:	6063      	str	r3, [r4, #4]
 8006680:	2110      	movs	r1, #16
 8006682:	2700      	movs	r7, #0
 8006684:	6863      	ldr	r3, [r4, #4]
 8006686:	6960      	ldr	r0, [r4, #20]
 8006688:	1ac9      	subs	r1, r1, r3
 800668a:	4b49      	ldr	r3, [pc, #292]	; (80067b0 <_scanf_i+0x200>)
 800668c:	18c9      	adds	r1, r1, r3
 800668e:	f000 f8b9 	bl	8006804 <__sccl>
 8006692:	9d03      	ldr	r5, [sp, #12]
 8006694:	68a3      	ldr	r3, [r4, #8]
 8006696:	6822      	ldr	r2, [r4, #0]
 8006698:	9303      	str	r3, [sp, #12]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d041      	beq.n	8006722 <_scanf_i+0x172>
 800669e:	6831      	ldr	r1, [r6, #0]
 80066a0:	6963      	ldr	r3, [r4, #20]
 80066a2:	7808      	ldrb	r0, [r1, #0]
 80066a4:	5c1b      	ldrb	r3, [r3, r0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d03b      	beq.n	8006722 <_scanf_i+0x172>
 80066aa:	2830      	cmp	r0, #48	; 0x30
 80066ac:	d129      	bne.n	8006702 <_scanf_i+0x152>
 80066ae:	2380      	movs	r3, #128	; 0x80
 80066b0:	011b      	lsls	r3, r3, #4
 80066b2:	421a      	tst	r2, r3
 80066b4:	d025      	beq.n	8006702 <_scanf_i+0x152>
 80066b6:	9b04      	ldr	r3, [sp, #16]
 80066b8:	3701      	adds	r7, #1
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d005      	beq.n	80066ca <_scanf_i+0x11a>
 80066be:	001a      	movs	r2, r3
 80066c0:	9b03      	ldr	r3, [sp, #12]
 80066c2:	3a01      	subs	r2, #1
 80066c4:	3301      	adds	r3, #1
 80066c6:	9204      	str	r2, [sp, #16]
 80066c8:	60a3      	str	r3, [r4, #8]
 80066ca:	6873      	ldr	r3, [r6, #4]
 80066cc:	3b01      	subs	r3, #1
 80066ce:	6073      	str	r3, [r6, #4]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	dd1d      	ble.n	8006710 <_scanf_i+0x160>
 80066d4:	6833      	ldr	r3, [r6, #0]
 80066d6:	3301      	adds	r3, #1
 80066d8:	6033      	str	r3, [r6, #0]
 80066da:	68a3      	ldr	r3, [r4, #8]
 80066dc:	3b01      	subs	r3, #1
 80066de:	60a3      	str	r3, [r4, #8]
 80066e0:	e7d8      	b.n	8006694 <_scanf_i+0xe4>
 80066e2:	2f02      	cmp	r7, #2
 80066e4:	d1a8      	bne.n	8006638 <_scanf_i+0x88>
 80066e6:	21c0      	movs	r1, #192	; 0xc0
 80066e8:	2380      	movs	r3, #128	; 0x80
 80066ea:	6822      	ldr	r2, [r4, #0]
 80066ec:	00c9      	lsls	r1, r1, #3
 80066ee:	4011      	ands	r1, r2
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	4299      	cmp	r1, r3
 80066f4:	d1bf      	bne.n	8006676 <_scanf_i+0xc6>
 80066f6:	3bf1      	subs	r3, #241	; 0xf1
 80066f8:	3bff      	subs	r3, #255	; 0xff
 80066fa:	6063      	str	r3, [r4, #4]
 80066fc:	33f0      	adds	r3, #240	; 0xf0
 80066fe:	4313      	orrs	r3, r2
 8006700:	e799      	b.n	8006636 <_scanf_i+0x86>
 8006702:	4b2c      	ldr	r3, [pc, #176]	; (80067b4 <_scanf_i+0x204>)
 8006704:	4013      	ands	r3, r2
 8006706:	6023      	str	r3, [r4, #0]
 8006708:	780b      	ldrb	r3, [r1, #0]
 800670a:	702b      	strb	r3, [r5, #0]
 800670c:	3501      	adds	r5, #1
 800670e:	e7dc      	b.n	80066ca <_scanf_i+0x11a>
 8006710:	23c0      	movs	r3, #192	; 0xc0
 8006712:	005b      	lsls	r3, r3, #1
 8006714:	58e3      	ldr	r3, [r4, r3]
 8006716:	0031      	movs	r1, r6
 8006718:	9805      	ldr	r0, [sp, #20]
 800671a:	9303      	str	r3, [sp, #12]
 800671c:	4798      	blx	r3
 800671e:	2800      	cmp	r0, #0
 8006720:	d0db      	beq.n	80066da <_scanf_i+0x12a>
 8006722:	6823      	ldr	r3, [r4, #0]
 8006724:	05db      	lsls	r3, r3, #23
 8006726:	d50e      	bpl.n	8006746 <_scanf_i+0x196>
 8006728:	9b01      	ldr	r3, [sp, #4]
 800672a:	429d      	cmp	r5, r3
 800672c:	d907      	bls.n	800673e <_scanf_i+0x18e>
 800672e:	23be      	movs	r3, #190	; 0xbe
 8006730:	3d01      	subs	r5, #1
 8006732:	005b      	lsls	r3, r3, #1
 8006734:	0032      	movs	r2, r6
 8006736:	7829      	ldrb	r1, [r5, #0]
 8006738:	58e3      	ldr	r3, [r4, r3]
 800673a:	9805      	ldr	r0, [sp, #20]
 800673c:	4798      	blx	r3
 800673e:	9b01      	ldr	r3, [sp, #4]
 8006740:	2001      	movs	r0, #1
 8006742:	429d      	cmp	r5, r3
 8006744:	d029      	beq.n	800679a <_scanf_i+0x1ea>
 8006746:	6821      	ldr	r1, [r4, #0]
 8006748:	2310      	movs	r3, #16
 800674a:	000a      	movs	r2, r1
 800674c:	401a      	ands	r2, r3
 800674e:	4219      	tst	r1, r3
 8006750:	d11c      	bne.n	800678c <_scanf_i+0x1dc>
 8006752:	702a      	strb	r2, [r5, #0]
 8006754:	6863      	ldr	r3, [r4, #4]
 8006756:	9901      	ldr	r1, [sp, #4]
 8006758:	9805      	ldr	r0, [sp, #20]
 800675a:	9e06      	ldr	r6, [sp, #24]
 800675c:	47b0      	blx	r6
 800675e:	9b02      	ldr	r3, [sp, #8]
 8006760:	6821      	ldr	r1, [r4, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	068a      	lsls	r2, r1, #26
 8006766:	d507      	bpl.n	8006778 <_scanf_i+0x1c8>
 8006768:	1d1a      	adds	r2, r3, #4
 800676a:	9902      	ldr	r1, [sp, #8]
 800676c:	600a      	str	r2, [r1, #0]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	6018      	str	r0, [r3, #0]
 8006772:	e008      	b.n	8006786 <_scanf_i+0x1d6>
 8006774:	2700      	movs	r7, #0
 8006776:	e7d4      	b.n	8006722 <_scanf_i+0x172>
 8006778:	1d1a      	adds	r2, r3, #4
 800677a:	07ce      	lsls	r6, r1, #31
 800677c:	d5f5      	bpl.n	800676a <_scanf_i+0x1ba>
 800677e:	9902      	ldr	r1, [sp, #8]
 8006780:	600a      	str	r2, [r1, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	8018      	strh	r0, [r3, #0]
 8006786:	68e3      	ldr	r3, [r4, #12]
 8006788:	3301      	adds	r3, #1
 800678a:	60e3      	str	r3, [r4, #12]
 800678c:	2000      	movs	r0, #0
 800678e:	9b01      	ldr	r3, [sp, #4]
 8006790:	1aed      	subs	r5, r5, r3
 8006792:	6923      	ldr	r3, [r4, #16]
 8006794:	19ef      	adds	r7, r5, r7
 8006796:	19df      	adds	r7, r3, r7
 8006798:	6127      	str	r7, [r4, #16]
 800679a:	b00d      	add	sp, #52	; 0x34
 800679c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800679e:	46c0      	nop			; (mov r8, r8)
 80067a0:	080074d8 	.word	0x080074d8
 80067a4:	08006999 	.word	0x08006999
 80067a8:	08006ab5 	.word	0x08006ab5
 80067ac:	fffffaff 	.word	0xfffffaff
 80067b0:	0800765c 	.word	0x0800765c
 80067b4:	fffff6ff 	.word	0xfffff6ff

080067b8 <_read_r>:
 80067b8:	b570      	push	{r4, r5, r6, lr}
 80067ba:	0004      	movs	r4, r0
 80067bc:	0008      	movs	r0, r1
 80067be:	0011      	movs	r1, r2
 80067c0:	001a      	movs	r2, r3
 80067c2:	2300      	movs	r3, #0
 80067c4:	4d05      	ldr	r5, [pc, #20]	; (80067dc <_read_r+0x24>)
 80067c6:	602b      	str	r3, [r5, #0]
 80067c8:	f7fa fd3c 	bl	8001244 <_read>
 80067cc:	1c43      	adds	r3, r0, #1
 80067ce:	d103      	bne.n	80067d8 <_read_r+0x20>
 80067d0:	682b      	ldr	r3, [r5, #0]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d000      	beq.n	80067d8 <_read_r+0x20>
 80067d6:	6023      	str	r3, [r4, #0]
 80067d8:	bd70      	pop	{r4, r5, r6, pc}
 80067da:	46c0      	nop			; (mov r8, r8)
 80067dc:	200004f0 	.word	0x200004f0

080067e0 <_sbrk_r>:
 80067e0:	2300      	movs	r3, #0
 80067e2:	b570      	push	{r4, r5, r6, lr}
 80067e4:	4d06      	ldr	r5, [pc, #24]	; (8006800 <_sbrk_r+0x20>)
 80067e6:	0004      	movs	r4, r0
 80067e8:	0008      	movs	r0, r1
 80067ea:	602b      	str	r3, [r5, #0]
 80067ec:	f7fa fd90 	bl	8001310 <_sbrk>
 80067f0:	1c43      	adds	r3, r0, #1
 80067f2:	d103      	bne.n	80067fc <_sbrk_r+0x1c>
 80067f4:	682b      	ldr	r3, [r5, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d000      	beq.n	80067fc <_sbrk_r+0x1c>
 80067fa:	6023      	str	r3, [r4, #0]
 80067fc:	bd70      	pop	{r4, r5, r6, pc}
 80067fe:	46c0      	nop			; (mov r8, r8)
 8006800:	200004f0 	.word	0x200004f0

08006804 <__sccl>:
 8006804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006806:	780b      	ldrb	r3, [r1, #0]
 8006808:	0004      	movs	r4, r0
 800680a:	2b5e      	cmp	r3, #94	; 0x5e
 800680c:	d00c      	beq.n	8006828 <__sccl+0x24>
 800680e:	1c48      	adds	r0, r1, #1
 8006810:	2100      	movs	r1, #0
 8006812:	0022      	movs	r2, r4
 8006814:	1c65      	adds	r5, r4, #1
 8006816:	35ff      	adds	r5, #255	; 0xff
 8006818:	7011      	strb	r1, [r2, #0]
 800681a:	3201      	adds	r2, #1
 800681c:	42aa      	cmp	r2, r5
 800681e:	d1fb      	bne.n	8006818 <__sccl+0x14>
 8006820:	2b00      	cmp	r3, #0
 8006822:	d105      	bne.n	8006830 <__sccl+0x2c>
 8006824:	3801      	subs	r0, #1
 8006826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006828:	784b      	ldrb	r3, [r1, #1]
 800682a:	1c88      	adds	r0, r1, #2
 800682c:	2101      	movs	r1, #1
 800682e:	e7f0      	b.n	8006812 <__sccl+0xe>
 8006830:	2201      	movs	r2, #1
 8006832:	262d      	movs	r6, #45	; 0x2d
 8006834:	4051      	eors	r1, r2
 8006836:	0002      	movs	r2, r0
 8006838:	54e1      	strb	r1, [r4, r3]
 800683a:	7815      	ldrb	r5, [r2, #0]
 800683c:	1c50      	adds	r0, r2, #1
 800683e:	2d2d      	cmp	r5, #45	; 0x2d
 8006840:	d009      	beq.n	8006856 <__sccl+0x52>
 8006842:	2d5d      	cmp	r5, #93	; 0x5d
 8006844:	d0ef      	beq.n	8006826 <__sccl+0x22>
 8006846:	2d00      	cmp	r5, #0
 8006848:	d101      	bne.n	800684e <__sccl+0x4a>
 800684a:	0010      	movs	r0, r2
 800684c:	e7eb      	b.n	8006826 <__sccl+0x22>
 800684e:	002b      	movs	r3, r5
 8006850:	e7f1      	b.n	8006836 <__sccl+0x32>
 8006852:	0033      	movs	r3, r6
 8006854:	e7ef      	b.n	8006836 <__sccl+0x32>
 8006856:	7855      	ldrb	r5, [r2, #1]
 8006858:	2d5d      	cmp	r5, #93	; 0x5d
 800685a:	d0fa      	beq.n	8006852 <__sccl+0x4e>
 800685c:	42ab      	cmp	r3, r5
 800685e:	dcf8      	bgt.n	8006852 <__sccl+0x4e>
 8006860:	0018      	movs	r0, r3
 8006862:	3202      	adds	r2, #2
 8006864:	3001      	adds	r0, #1
 8006866:	5421      	strb	r1, [r4, r0]
 8006868:	4285      	cmp	r5, r0
 800686a:	dcfb      	bgt.n	8006864 <__sccl+0x60>
 800686c:	2000      	movs	r0, #0
 800686e:	1c5f      	adds	r7, r3, #1
 8006870:	42ab      	cmp	r3, r5
 8006872:	da01      	bge.n	8006878 <__sccl+0x74>
 8006874:	1ae8      	subs	r0, r5, r3
 8006876:	3801      	subs	r0, #1
 8006878:	183b      	adds	r3, r7, r0
 800687a:	e7de      	b.n	800683a <__sccl+0x36>

0800687c <_strtol_l.constprop.0>:
 800687c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800687e:	b087      	sub	sp, #28
 8006880:	001e      	movs	r6, r3
 8006882:	9005      	str	r0, [sp, #20]
 8006884:	9101      	str	r1, [sp, #4]
 8006886:	9202      	str	r2, [sp, #8]
 8006888:	2b01      	cmp	r3, #1
 800688a:	d045      	beq.n	8006918 <_strtol_l.constprop.0+0x9c>
 800688c:	000b      	movs	r3, r1
 800688e:	2e24      	cmp	r6, #36	; 0x24
 8006890:	d842      	bhi.n	8006918 <_strtol_l.constprop.0+0x9c>
 8006892:	4a3f      	ldr	r2, [pc, #252]	; (8006990 <_strtol_l.constprop.0+0x114>)
 8006894:	2108      	movs	r1, #8
 8006896:	4694      	mov	ip, r2
 8006898:	001a      	movs	r2, r3
 800689a:	4660      	mov	r0, ip
 800689c:	7814      	ldrb	r4, [r2, #0]
 800689e:	3301      	adds	r3, #1
 80068a0:	5d00      	ldrb	r0, [r0, r4]
 80068a2:	001d      	movs	r5, r3
 80068a4:	0007      	movs	r7, r0
 80068a6:	400f      	ands	r7, r1
 80068a8:	4208      	tst	r0, r1
 80068aa:	d1f5      	bne.n	8006898 <_strtol_l.constprop.0+0x1c>
 80068ac:	2c2d      	cmp	r4, #45	; 0x2d
 80068ae:	d13a      	bne.n	8006926 <_strtol_l.constprop.0+0xaa>
 80068b0:	2701      	movs	r7, #1
 80068b2:	781c      	ldrb	r4, [r3, #0]
 80068b4:	1c95      	adds	r5, r2, #2
 80068b6:	2e00      	cmp	r6, #0
 80068b8:	d065      	beq.n	8006986 <_strtol_l.constprop.0+0x10a>
 80068ba:	2e10      	cmp	r6, #16
 80068bc:	d109      	bne.n	80068d2 <_strtol_l.constprop.0+0x56>
 80068be:	2c30      	cmp	r4, #48	; 0x30
 80068c0:	d107      	bne.n	80068d2 <_strtol_l.constprop.0+0x56>
 80068c2:	2220      	movs	r2, #32
 80068c4:	782b      	ldrb	r3, [r5, #0]
 80068c6:	4393      	bics	r3, r2
 80068c8:	2b58      	cmp	r3, #88	; 0x58
 80068ca:	d157      	bne.n	800697c <_strtol_l.constprop.0+0x100>
 80068cc:	2610      	movs	r6, #16
 80068ce:	786c      	ldrb	r4, [r5, #1]
 80068d0:	3502      	adds	r5, #2
 80068d2:	4b30      	ldr	r3, [pc, #192]	; (8006994 <_strtol_l.constprop.0+0x118>)
 80068d4:	0031      	movs	r1, r6
 80068d6:	18fb      	adds	r3, r7, r3
 80068d8:	0018      	movs	r0, r3
 80068da:	9303      	str	r3, [sp, #12]
 80068dc:	f7f9 fcaa 	bl	8000234 <__aeabi_uidivmod>
 80068e0:	2300      	movs	r3, #0
 80068e2:	2201      	movs	r2, #1
 80068e4:	4684      	mov	ip, r0
 80068e6:	0018      	movs	r0, r3
 80068e8:	9104      	str	r1, [sp, #16]
 80068ea:	4252      	negs	r2, r2
 80068ec:	0021      	movs	r1, r4
 80068ee:	3930      	subs	r1, #48	; 0x30
 80068f0:	2909      	cmp	r1, #9
 80068f2:	d81d      	bhi.n	8006930 <_strtol_l.constprop.0+0xb4>
 80068f4:	000c      	movs	r4, r1
 80068f6:	42a6      	cmp	r6, r4
 80068f8:	dd28      	ble.n	800694c <_strtol_l.constprop.0+0xd0>
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	db24      	blt.n	8006948 <_strtol_l.constprop.0+0xcc>
 80068fe:	0013      	movs	r3, r2
 8006900:	4584      	cmp	ip, r0
 8006902:	d306      	bcc.n	8006912 <_strtol_l.constprop.0+0x96>
 8006904:	d102      	bne.n	800690c <_strtol_l.constprop.0+0x90>
 8006906:	9904      	ldr	r1, [sp, #16]
 8006908:	42a1      	cmp	r1, r4
 800690a:	db02      	blt.n	8006912 <_strtol_l.constprop.0+0x96>
 800690c:	2301      	movs	r3, #1
 800690e:	4370      	muls	r0, r6
 8006910:	1820      	adds	r0, r4, r0
 8006912:	782c      	ldrb	r4, [r5, #0]
 8006914:	3501      	adds	r5, #1
 8006916:	e7e9      	b.n	80068ec <_strtol_l.constprop.0+0x70>
 8006918:	f7fe fd06 	bl	8005328 <__errno>
 800691c:	2316      	movs	r3, #22
 800691e:	6003      	str	r3, [r0, #0]
 8006920:	2000      	movs	r0, #0
 8006922:	b007      	add	sp, #28
 8006924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006926:	2c2b      	cmp	r4, #43	; 0x2b
 8006928:	d1c5      	bne.n	80068b6 <_strtol_l.constprop.0+0x3a>
 800692a:	781c      	ldrb	r4, [r3, #0]
 800692c:	1c95      	adds	r5, r2, #2
 800692e:	e7c2      	b.n	80068b6 <_strtol_l.constprop.0+0x3a>
 8006930:	0021      	movs	r1, r4
 8006932:	3941      	subs	r1, #65	; 0x41
 8006934:	2919      	cmp	r1, #25
 8006936:	d801      	bhi.n	800693c <_strtol_l.constprop.0+0xc0>
 8006938:	3c37      	subs	r4, #55	; 0x37
 800693a:	e7dc      	b.n	80068f6 <_strtol_l.constprop.0+0x7a>
 800693c:	0021      	movs	r1, r4
 800693e:	3961      	subs	r1, #97	; 0x61
 8006940:	2919      	cmp	r1, #25
 8006942:	d803      	bhi.n	800694c <_strtol_l.constprop.0+0xd0>
 8006944:	3c57      	subs	r4, #87	; 0x57
 8006946:	e7d6      	b.n	80068f6 <_strtol_l.constprop.0+0x7a>
 8006948:	0013      	movs	r3, r2
 800694a:	e7e2      	b.n	8006912 <_strtol_l.constprop.0+0x96>
 800694c:	2b00      	cmp	r3, #0
 800694e:	da09      	bge.n	8006964 <_strtol_l.constprop.0+0xe8>
 8006950:	2322      	movs	r3, #34	; 0x22
 8006952:	9a05      	ldr	r2, [sp, #20]
 8006954:	9803      	ldr	r0, [sp, #12]
 8006956:	6013      	str	r3, [r2, #0]
 8006958:	9b02      	ldr	r3, [sp, #8]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d0e1      	beq.n	8006922 <_strtol_l.constprop.0+0xa6>
 800695e:	1e6b      	subs	r3, r5, #1
 8006960:	9301      	str	r3, [sp, #4]
 8006962:	e007      	b.n	8006974 <_strtol_l.constprop.0+0xf8>
 8006964:	2f00      	cmp	r7, #0
 8006966:	d000      	beq.n	800696a <_strtol_l.constprop.0+0xee>
 8006968:	4240      	negs	r0, r0
 800696a:	9a02      	ldr	r2, [sp, #8]
 800696c:	2a00      	cmp	r2, #0
 800696e:	d0d8      	beq.n	8006922 <_strtol_l.constprop.0+0xa6>
 8006970:	2b00      	cmp	r3, #0
 8006972:	d1f4      	bne.n	800695e <_strtol_l.constprop.0+0xe2>
 8006974:	9b02      	ldr	r3, [sp, #8]
 8006976:	9a01      	ldr	r2, [sp, #4]
 8006978:	601a      	str	r2, [r3, #0]
 800697a:	e7d2      	b.n	8006922 <_strtol_l.constprop.0+0xa6>
 800697c:	2430      	movs	r4, #48	; 0x30
 800697e:	2e00      	cmp	r6, #0
 8006980:	d1a7      	bne.n	80068d2 <_strtol_l.constprop.0+0x56>
 8006982:	3608      	adds	r6, #8
 8006984:	e7a5      	b.n	80068d2 <_strtol_l.constprop.0+0x56>
 8006986:	2c30      	cmp	r4, #48	; 0x30
 8006988:	d09b      	beq.n	80068c2 <_strtol_l.constprop.0+0x46>
 800698a:	260a      	movs	r6, #10
 800698c:	e7a1      	b.n	80068d2 <_strtol_l.constprop.0+0x56>
 800698e:	46c0      	nop			; (mov r8, r8)
 8006990:	0800766f 	.word	0x0800766f
 8006994:	7fffffff 	.word	0x7fffffff

08006998 <_strtol_r>:
 8006998:	b510      	push	{r4, lr}
 800699a:	f7ff ff6f 	bl	800687c <_strtol_l.constprop.0>
 800699e:	bd10      	pop	{r4, pc}

080069a0 <_strtoul_l.constprop.0>:
 80069a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069a2:	b087      	sub	sp, #28
 80069a4:	9202      	str	r2, [sp, #8]
 80069a6:	4a42      	ldr	r2, [pc, #264]	; (8006ab0 <_strtoul_l.constprop.0+0x110>)
 80069a8:	001e      	movs	r6, r3
 80069aa:	9101      	str	r1, [sp, #4]
 80069ac:	000b      	movs	r3, r1
 80069ae:	4694      	mov	ip, r2
 80069b0:	2108      	movs	r1, #8
 80069b2:	9005      	str	r0, [sp, #20]
 80069b4:	001a      	movs	r2, r3
 80069b6:	4660      	mov	r0, ip
 80069b8:	7814      	ldrb	r4, [r2, #0]
 80069ba:	3301      	adds	r3, #1
 80069bc:	5d00      	ldrb	r0, [r0, r4]
 80069be:	001d      	movs	r5, r3
 80069c0:	0007      	movs	r7, r0
 80069c2:	400f      	ands	r7, r1
 80069c4:	4208      	tst	r0, r1
 80069c6:	d1f5      	bne.n	80069b4 <_strtoul_l.constprop.0+0x14>
 80069c8:	2c2d      	cmp	r4, #45	; 0x2d
 80069ca:	d13a      	bne.n	8006a42 <_strtoul_l.constprop.0+0xa2>
 80069cc:	2701      	movs	r7, #1
 80069ce:	781c      	ldrb	r4, [r3, #0]
 80069d0:	1c95      	adds	r5, r2, #2
 80069d2:	2e00      	cmp	r6, #0
 80069d4:	d067      	beq.n	8006aa6 <_strtoul_l.constprop.0+0x106>
 80069d6:	2e10      	cmp	r6, #16
 80069d8:	d109      	bne.n	80069ee <_strtoul_l.constprop.0+0x4e>
 80069da:	2c30      	cmp	r4, #48	; 0x30
 80069dc:	d107      	bne.n	80069ee <_strtoul_l.constprop.0+0x4e>
 80069de:	2220      	movs	r2, #32
 80069e0:	782b      	ldrb	r3, [r5, #0]
 80069e2:	4393      	bics	r3, r2
 80069e4:	2b58      	cmp	r3, #88	; 0x58
 80069e6:	d159      	bne.n	8006a9c <_strtoul_l.constprop.0+0xfc>
 80069e8:	2610      	movs	r6, #16
 80069ea:	786c      	ldrb	r4, [r5, #1]
 80069ec:	3502      	adds	r5, #2
 80069ee:	2001      	movs	r0, #1
 80069f0:	0031      	movs	r1, r6
 80069f2:	4240      	negs	r0, r0
 80069f4:	f7f9 fb98 	bl	8000128 <__udivsi3>
 80069f8:	9003      	str	r0, [sp, #12]
 80069fa:	2001      	movs	r0, #1
 80069fc:	0031      	movs	r1, r6
 80069fe:	4240      	negs	r0, r0
 8006a00:	f7f9 fc18 	bl	8000234 <__aeabi_uidivmod>
 8006a04:	2300      	movs	r3, #0
 8006a06:	9104      	str	r1, [sp, #16]
 8006a08:	2101      	movs	r1, #1
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	0018      	movs	r0, r3
 8006a0e:	468c      	mov	ip, r1
 8006a10:	4252      	negs	r2, r2
 8006a12:	0021      	movs	r1, r4
 8006a14:	3930      	subs	r1, #48	; 0x30
 8006a16:	2909      	cmp	r1, #9
 8006a18:	d818      	bhi.n	8006a4c <_strtoul_l.constprop.0+0xac>
 8006a1a:	000c      	movs	r4, r1
 8006a1c:	42a6      	cmp	r6, r4
 8006a1e:	dd23      	ble.n	8006a68 <_strtoul_l.constprop.0+0xc8>
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	db1f      	blt.n	8006a64 <_strtoul_l.constprop.0+0xc4>
 8006a24:	9903      	ldr	r1, [sp, #12]
 8006a26:	0013      	movs	r3, r2
 8006a28:	4281      	cmp	r1, r0
 8006a2a:	d307      	bcc.n	8006a3c <_strtoul_l.constprop.0+0x9c>
 8006a2c:	d103      	bne.n	8006a36 <_strtoul_l.constprop.0+0x96>
 8006a2e:	9904      	ldr	r1, [sp, #16]
 8006a30:	0013      	movs	r3, r2
 8006a32:	42a1      	cmp	r1, r4
 8006a34:	db02      	blt.n	8006a3c <_strtoul_l.constprop.0+0x9c>
 8006a36:	4663      	mov	r3, ip
 8006a38:	4370      	muls	r0, r6
 8006a3a:	1820      	adds	r0, r4, r0
 8006a3c:	782c      	ldrb	r4, [r5, #0]
 8006a3e:	3501      	adds	r5, #1
 8006a40:	e7e7      	b.n	8006a12 <_strtoul_l.constprop.0+0x72>
 8006a42:	2c2b      	cmp	r4, #43	; 0x2b
 8006a44:	d1c5      	bne.n	80069d2 <_strtoul_l.constprop.0+0x32>
 8006a46:	781c      	ldrb	r4, [r3, #0]
 8006a48:	1c95      	adds	r5, r2, #2
 8006a4a:	e7c2      	b.n	80069d2 <_strtoul_l.constprop.0+0x32>
 8006a4c:	0021      	movs	r1, r4
 8006a4e:	3941      	subs	r1, #65	; 0x41
 8006a50:	2919      	cmp	r1, #25
 8006a52:	d801      	bhi.n	8006a58 <_strtoul_l.constprop.0+0xb8>
 8006a54:	3c37      	subs	r4, #55	; 0x37
 8006a56:	e7e1      	b.n	8006a1c <_strtoul_l.constprop.0+0x7c>
 8006a58:	0021      	movs	r1, r4
 8006a5a:	3961      	subs	r1, #97	; 0x61
 8006a5c:	2919      	cmp	r1, #25
 8006a5e:	d803      	bhi.n	8006a68 <_strtoul_l.constprop.0+0xc8>
 8006a60:	3c57      	subs	r4, #87	; 0x57
 8006a62:	e7db      	b.n	8006a1c <_strtoul_l.constprop.0+0x7c>
 8006a64:	0013      	movs	r3, r2
 8006a66:	e7e9      	b.n	8006a3c <_strtoul_l.constprop.0+0x9c>
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	da09      	bge.n	8006a80 <_strtoul_l.constprop.0+0xe0>
 8006a6c:	2322      	movs	r3, #34	; 0x22
 8006a6e:	2001      	movs	r0, #1
 8006a70:	9a05      	ldr	r2, [sp, #20]
 8006a72:	4240      	negs	r0, r0
 8006a74:	6013      	str	r3, [r2, #0]
 8006a76:	9b02      	ldr	r3, [sp, #8]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d109      	bne.n	8006a90 <_strtoul_l.constprop.0+0xf0>
 8006a7c:	b007      	add	sp, #28
 8006a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a80:	2f00      	cmp	r7, #0
 8006a82:	d000      	beq.n	8006a86 <_strtoul_l.constprop.0+0xe6>
 8006a84:	4240      	negs	r0, r0
 8006a86:	9a02      	ldr	r2, [sp, #8]
 8006a88:	2a00      	cmp	r2, #0
 8006a8a:	d0f7      	beq.n	8006a7c <_strtoul_l.constprop.0+0xdc>
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d001      	beq.n	8006a94 <_strtoul_l.constprop.0+0xf4>
 8006a90:	1e6b      	subs	r3, r5, #1
 8006a92:	9301      	str	r3, [sp, #4]
 8006a94:	9b02      	ldr	r3, [sp, #8]
 8006a96:	9a01      	ldr	r2, [sp, #4]
 8006a98:	601a      	str	r2, [r3, #0]
 8006a9a:	e7ef      	b.n	8006a7c <_strtoul_l.constprop.0+0xdc>
 8006a9c:	2430      	movs	r4, #48	; 0x30
 8006a9e:	2e00      	cmp	r6, #0
 8006aa0:	d1a5      	bne.n	80069ee <_strtoul_l.constprop.0+0x4e>
 8006aa2:	3608      	adds	r6, #8
 8006aa4:	e7a3      	b.n	80069ee <_strtoul_l.constprop.0+0x4e>
 8006aa6:	2c30      	cmp	r4, #48	; 0x30
 8006aa8:	d099      	beq.n	80069de <_strtoul_l.constprop.0+0x3e>
 8006aaa:	260a      	movs	r6, #10
 8006aac:	e79f      	b.n	80069ee <_strtoul_l.constprop.0+0x4e>
 8006aae:	46c0      	nop			; (mov r8, r8)
 8006ab0:	0800766f 	.word	0x0800766f

08006ab4 <_strtoul_r>:
 8006ab4:	b510      	push	{r4, lr}
 8006ab6:	f7ff ff73 	bl	80069a0 <_strtoul_l.constprop.0>
 8006aba:	bd10      	pop	{r4, pc}

08006abc <__submore>:
 8006abc:	000b      	movs	r3, r1
 8006abe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ac0:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8006ac2:	3344      	adds	r3, #68	; 0x44
 8006ac4:	000c      	movs	r4, r1
 8006ac6:	429d      	cmp	r5, r3
 8006ac8:	d11c      	bne.n	8006b04 <__submore+0x48>
 8006aca:	2680      	movs	r6, #128	; 0x80
 8006acc:	00f6      	lsls	r6, r6, #3
 8006ace:	0031      	movs	r1, r6
 8006ad0:	f7fe fe7a 	bl	80057c8 <_malloc_r>
 8006ad4:	2800      	cmp	r0, #0
 8006ad6:	d102      	bne.n	8006ade <__submore+0x22>
 8006ad8:	2001      	movs	r0, #1
 8006ada:	4240      	negs	r0, r0
 8006adc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006ade:	0023      	movs	r3, r4
 8006ae0:	6360      	str	r0, [r4, #52]	; 0x34
 8006ae2:	63a6      	str	r6, [r4, #56]	; 0x38
 8006ae4:	3346      	adds	r3, #70	; 0x46
 8006ae6:	781a      	ldrb	r2, [r3, #0]
 8006ae8:	4b10      	ldr	r3, [pc, #64]	; (8006b2c <__submore+0x70>)
 8006aea:	54c2      	strb	r2, [r0, r3]
 8006aec:	0023      	movs	r3, r4
 8006aee:	3345      	adds	r3, #69	; 0x45
 8006af0:	781a      	ldrb	r2, [r3, #0]
 8006af2:	4b0f      	ldr	r3, [pc, #60]	; (8006b30 <__submore+0x74>)
 8006af4:	54c2      	strb	r2, [r0, r3]
 8006af6:	782a      	ldrb	r2, [r5, #0]
 8006af8:	4b0e      	ldr	r3, [pc, #56]	; (8006b34 <__submore+0x78>)
 8006afa:	54c2      	strb	r2, [r0, r3]
 8006afc:	18c0      	adds	r0, r0, r3
 8006afe:	6020      	str	r0, [r4, #0]
 8006b00:	2000      	movs	r0, #0
 8006b02:	e7eb      	b.n	8006adc <__submore+0x20>
 8006b04:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 8006b06:	0029      	movs	r1, r5
 8006b08:	0073      	lsls	r3, r6, #1
 8006b0a:	001a      	movs	r2, r3
 8006b0c:	9301      	str	r3, [sp, #4]
 8006b0e:	f000 fb5f 	bl	80071d0 <_realloc_r>
 8006b12:	1e05      	subs	r5, r0, #0
 8006b14:	d0e0      	beq.n	8006ad8 <__submore+0x1c>
 8006b16:	1987      	adds	r7, r0, r6
 8006b18:	0001      	movs	r1, r0
 8006b1a:	0032      	movs	r2, r6
 8006b1c:	0038      	movs	r0, r7
 8006b1e:	f000 fb2a 	bl	8007176 <memcpy>
 8006b22:	9b01      	ldr	r3, [sp, #4]
 8006b24:	6027      	str	r7, [r4, #0]
 8006b26:	6365      	str	r5, [r4, #52]	; 0x34
 8006b28:	63a3      	str	r3, [r4, #56]	; 0x38
 8006b2a:	e7e9      	b.n	8006b00 <__submore+0x44>
 8006b2c:	000003ff 	.word	0x000003ff
 8006b30:	000003fe 	.word	0x000003fe
 8006b34:	000003fd 	.word	0x000003fd

08006b38 <__swbuf_r>:
 8006b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b3a:	0005      	movs	r5, r0
 8006b3c:	000e      	movs	r6, r1
 8006b3e:	0014      	movs	r4, r2
 8006b40:	2800      	cmp	r0, #0
 8006b42:	d004      	beq.n	8006b4e <__swbuf_r+0x16>
 8006b44:	6983      	ldr	r3, [r0, #24]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d101      	bne.n	8006b4e <__swbuf_r+0x16>
 8006b4a:	f000 f9f9 	bl	8006f40 <__sinit>
 8006b4e:	4b22      	ldr	r3, [pc, #136]	; (8006bd8 <__swbuf_r+0xa0>)
 8006b50:	429c      	cmp	r4, r3
 8006b52:	d12e      	bne.n	8006bb2 <__swbuf_r+0x7a>
 8006b54:	686c      	ldr	r4, [r5, #4]
 8006b56:	69a3      	ldr	r3, [r4, #24]
 8006b58:	60a3      	str	r3, [r4, #8]
 8006b5a:	89a3      	ldrh	r3, [r4, #12]
 8006b5c:	071b      	lsls	r3, r3, #28
 8006b5e:	d532      	bpl.n	8006bc6 <__swbuf_r+0x8e>
 8006b60:	6923      	ldr	r3, [r4, #16]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d02f      	beq.n	8006bc6 <__swbuf_r+0x8e>
 8006b66:	6823      	ldr	r3, [r4, #0]
 8006b68:	6922      	ldr	r2, [r4, #16]
 8006b6a:	b2f7      	uxtb	r7, r6
 8006b6c:	1a98      	subs	r0, r3, r2
 8006b6e:	6963      	ldr	r3, [r4, #20]
 8006b70:	b2f6      	uxtb	r6, r6
 8006b72:	4283      	cmp	r3, r0
 8006b74:	dc05      	bgt.n	8006b82 <__swbuf_r+0x4a>
 8006b76:	0021      	movs	r1, r4
 8006b78:	0028      	movs	r0, r5
 8006b7a:	f000 f93f 	bl	8006dfc <_fflush_r>
 8006b7e:	2800      	cmp	r0, #0
 8006b80:	d127      	bne.n	8006bd2 <__swbuf_r+0x9a>
 8006b82:	68a3      	ldr	r3, [r4, #8]
 8006b84:	3001      	adds	r0, #1
 8006b86:	3b01      	subs	r3, #1
 8006b88:	60a3      	str	r3, [r4, #8]
 8006b8a:	6823      	ldr	r3, [r4, #0]
 8006b8c:	1c5a      	adds	r2, r3, #1
 8006b8e:	6022      	str	r2, [r4, #0]
 8006b90:	701f      	strb	r7, [r3, #0]
 8006b92:	6963      	ldr	r3, [r4, #20]
 8006b94:	4283      	cmp	r3, r0
 8006b96:	d004      	beq.n	8006ba2 <__swbuf_r+0x6a>
 8006b98:	89a3      	ldrh	r3, [r4, #12]
 8006b9a:	07db      	lsls	r3, r3, #31
 8006b9c:	d507      	bpl.n	8006bae <__swbuf_r+0x76>
 8006b9e:	2e0a      	cmp	r6, #10
 8006ba0:	d105      	bne.n	8006bae <__swbuf_r+0x76>
 8006ba2:	0021      	movs	r1, r4
 8006ba4:	0028      	movs	r0, r5
 8006ba6:	f000 f929 	bl	8006dfc <_fflush_r>
 8006baa:	2800      	cmp	r0, #0
 8006bac:	d111      	bne.n	8006bd2 <__swbuf_r+0x9a>
 8006bae:	0030      	movs	r0, r6
 8006bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bb2:	4b0a      	ldr	r3, [pc, #40]	; (8006bdc <__swbuf_r+0xa4>)
 8006bb4:	429c      	cmp	r4, r3
 8006bb6:	d101      	bne.n	8006bbc <__swbuf_r+0x84>
 8006bb8:	68ac      	ldr	r4, [r5, #8]
 8006bba:	e7cc      	b.n	8006b56 <__swbuf_r+0x1e>
 8006bbc:	4b08      	ldr	r3, [pc, #32]	; (8006be0 <__swbuf_r+0xa8>)
 8006bbe:	429c      	cmp	r4, r3
 8006bc0:	d1c9      	bne.n	8006b56 <__swbuf_r+0x1e>
 8006bc2:	68ec      	ldr	r4, [r5, #12]
 8006bc4:	e7c7      	b.n	8006b56 <__swbuf_r+0x1e>
 8006bc6:	0021      	movs	r1, r4
 8006bc8:	0028      	movs	r0, r5
 8006bca:	f000 f80b 	bl	8006be4 <__swsetup_r>
 8006bce:	2800      	cmp	r0, #0
 8006bd0:	d0c9      	beq.n	8006b66 <__swbuf_r+0x2e>
 8006bd2:	2601      	movs	r6, #1
 8006bd4:	4276      	negs	r6, r6
 8006bd6:	e7ea      	b.n	8006bae <__swbuf_r+0x76>
 8006bd8:	08007790 	.word	0x08007790
 8006bdc:	080077b0 	.word	0x080077b0
 8006be0:	08007770 	.word	0x08007770

08006be4 <__swsetup_r>:
 8006be4:	4b37      	ldr	r3, [pc, #220]	; (8006cc4 <__swsetup_r+0xe0>)
 8006be6:	b570      	push	{r4, r5, r6, lr}
 8006be8:	681d      	ldr	r5, [r3, #0]
 8006bea:	0006      	movs	r6, r0
 8006bec:	000c      	movs	r4, r1
 8006bee:	2d00      	cmp	r5, #0
 8006bf0:	d005      	beq.n	8006bfe <__swsetup_r+0x1a>
 8006bf2:	69ab      	ldr	r3, [r5, #24]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d102      	bne.n	8006bfe <__swsetup_r+0x1a>
 8006bf8:	0028      	movs	r0, r5
 8006bfa:	f000 f9a1 	bl	8006f40 <__sinit>
 8006bfe:	4b32      	ldr	r3, [pc, #200]	; (8006cc8 <__swsetup_r+0xe4>)
 8006c00:	429c      	cmp	r4, r3
 8006c02:	d10f      	bne.n	8006c24 <__swsetup_r+0x40>
 8006c04:	686c      	ldr	r4, [r5, #4]
 8006c06:	230c      	movs	r3, #12
 8006c08:	5ee2      	ldrsh	r2, [r4, r3]
 8006c0a:	b293      	uxth	r3, r2
 8006c0c:	0711      	lsls	r1, r2, #28
 8006c0e:	d42d      	bmi.n	8006c6c <__swsetup_r+0x88>
 8006c10:	06d9      	lsls	r1, r3, #27
 8006c12:	d411      	bmi.n	8006c38 <__swsetup_r+0x54>
 8006c14:	2309      	movs	r3, #9
 8006c16:	2001      	movs	r0, #1
 8006c18:	6033      	str	r3, [r6, #0]
 8006c1a:	3337      	adds	r3, #55	; 0x37
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	81a3      	strh	r3, [r4, #12]
 8006c20:	4240      	negs	r0, r0
 8006c22:	bd70      	pop	{r4, r5, r6, pc}
 8006c24:	4b29      	ldr	r3, [pc, #164]	; (8006ccc <__swsetup_r+0xe8>)
 8006c26:	429c      	cmp	r4, r3
 8006c28:	d101      	bne.n	8006c2e <__swsetup_r+0x4a>
 8006c2a:	68ac      	ldr	r4, [r5, #8]
 8006c2c:	e7eb      	b.n	8006c06 <__swsetup_r+0x22>
 8006c2e:	4b28      	ldr	r3, [pc, #160]	; (8006cd0 <__swsetup_r+0xec>)
 8006c30:	429c      	cmp	r4, r3
 8006c32:	d1e8      	bne.n	8006c06 <__swsetup_r+0x22>
 8006c34:	68ec      	ldr	r4, [r5, #12]
 8006c36:	e7e6      	b.n	8006c06 <__swsetup_r+0x22>
 8006c38:	075b      	lsls	r3, r3, #29
 8006c3a:	d513      	bpl.n	8006c64 <__swsetup_r+0x80>
 8006c3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c3e:	2900      	cmp	r1, #0
 8006c40:	d008      	beq.n	8006c54 <__swsetup_r+0x70>
 8006c42:	0023      	movs	r3, r4
 8006c44:	3344      	adds	r3, #68	; 0x44
 8006c46:	4299      	cmp	r1, r3
 8006c48:	d002      	beq.n	8006c50 <__swsetup_r+0x6c>
 8006c4a:	0030      	movs	r0, r6
 8006c4c:	f7fe fd50 	bl	80056f0 <_free_r>
 8006c50:	2300      	movs	r3, #0
 8006c52:	6363      	str	r3, [r4, #52]	; 0x34
 8006c54:	2224      	movs	r2, #36	; 0x24
 8006c56:	89a3      	ldrh	r3, [r4, #12]
 8006c58:	4393      	bics	r3, r2
 8006c5a:	81a3      	strh	r3, [r4, #12]
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	6063      	str	r3, [r4, #4]
 8006c60:	6923      	ldr	r3, [r4, #16]
 8006c62:	6023      	str	r3, [r4, #0]
 8006c64:	2308      	movs	r3, #8
 8006c66:	89a2      	ldrh	r2, [r4, #12]
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	81a3      	strh	r3, [r4, #12]
 8006c6c:	6923      	ldr	r3, [r4, #16]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d10b      	bne.n	8006c8a <__swsetup_r+0xa6>
 8006c72:	21a0      	movs	r1, #160	; 0xa0
 8006c74:	2280      	movs	r2, #128	; 0x80
 8006c76:	89a3      	ldrh	r3, [r4, #12]
 8006c78:	0089      	lsls	r1, r1, #2
 8006c7a:	0092      	lsls	r2, r2, #2
 8006c7c:	400b      	ands	r3, r1
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d003      	beq.n	8006c8a <__swsetup_r+0xa6>
 8006c82:	0021      	movs	r1, r4
 8006c84:	0030      	movs	r0, r6
 8006c86:	f000 fa27 	bl	80070d8 <__smakebuf_r>
 8006c8a:	220c      	movs	r2, #12
 8006c8c:	5ea3      	ldrsh	r3, [r4, r2]
 8006c8e:	2001      	movs	r0, #1
 8006c90:	001a      	movs	r2, r3
 8006c92:	b299      	uxth	r1, r3
 8006c94:	4002      	ands	r2, r0
 8006c96:	4203      	tst	r3, r0
 8006c98:	d00f      	beq.n	8006cba <__swsetup_r+0xd6>
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	60a2      	str	r2, [r4, #8]
 8006c9e:	6962      	ldr	r2, [r4, #20]
 8006ca0:	4252      	negs	r2, r2
 8006ca2:	61a2      	str	r2, [r4, #24]
 8006ca4:	2000      	movs	r0, #0
 8006ca6:	6922      	ldr	r2, [r4, #16]
 8006ca8:	4282      	cmp	r2, r0
 8006caa:	d1ba      	bne.n	8006c22 <__swsetup_r+0x3e>
 8006cac:	060a      	lsls	r2, r1, #24
 8006cae:	d5b8      	bpl.n	8006c22 <__swsetup_r+0x3e>
 8006cb0:	2240      	movs	r2, #64	; 0x40
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	81a3      	strh	r3, [r4, #12]
 8006cb6:	3801      	subs	r0, #1
 8006cb8:	e7b3      	b.n	8006c22 <__swsetup_r+0x3e>
 8006cba:	0788      	lsls	r0, r1, #30
 8006cbc:	d400      	bmi.n	8006cc0 <__swsetup_r+0xdc>
 8006cbe:	6962      	ldr	r2, [r4, #20]
 8006cc0:	60a2      	str	r2, [r4, #8]
 8006cc2:	e7ef      	b.n	8006ca4 <__swsetup_r+0xc0>
 8006cc4:	2000009c 	.word	0x2000009c
 8006cc8:	08007790 	.word	0x08007790
 8006ccc:	080077b0 	.word	0x080077b0
 8006cd0:	08007770 	.word	0x08007770

08006cd4 <abort>:
 8006cd4:	2006      	movs	r0, #6
 8006cd6:	b510      	push	{r4, lr}
 8006cd8:	f000 fad4 	bl	8007284 <raise>
 8006cdc:	2001      	movs	r0, #1
 8006cde:	f7fa faa5 	bl	800122c <_exit>
	...

08006ce4 <__sflush_r>:
 8006ce4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ce6:	898b      	ldrh	r3, [r1, #12]
 8006ce8:	0005      	movs	r5, r0
 8006cea:	000c      	movs	r4, r1
 8006cec:	071a      	lsls	r2, r3, #28
 8006cee:	d45f      	bmi.n	8006db0 <__sflush_r+0xcc>
 8006cf0:	684a      	ldr	r2, [r1, #4]
 8006cf2:	2a00      	cmp	r2, #0
 8006cf4:	dc04      	bgt.n	8006d00 <__sflush_r+0x1c>
 8006cf6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8006cf8:	2a00      	cmp	r2, #0
 8006cfa:	dc01      	bgt.n	8006d00 <__sflush_r+0x1c>
 8006cfc:	2000      	movs	r0, #0
 8006cfe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006d00:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006d02:	2f00      	cmp	r7, #0
 8006d04:	d0fa      	beq.n	8006cfc <__sflush_r+0x18>
 8006d06:	2200      	movs	r2, #0
 8006d08:	2180      	movs	r1, #128	; 0x80
 8006d0a:	682e      	ldr	r6, [r5, #0]
 8006d0c:	602a      	str	r2, [r5, #0]
 8006d0e:	001a      	movs	r2, r3
 8006d10:	0149      	lsls	r1, r1, #5
 8006d12:	400a      	ands	r2, r1
 8006d14:	420b      	tst	r3, r1
 8006d16:	d034      	beq.n	8006d82 <__sflush_r+0x9e>
 8006d18:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d1a:	89a3      	ldrh	r3, [r4, #12]
 8006d1c:	075b      	lsls	r3, r3, #29
 8006d1e:	d506      	bpl.n	8006d2e <__sflush_r+0x4a>
 8006d20:	6863      	ldr	r3, [r4, #4]
 8006d22:	1ac0      	subs	r0, r0, r3
 8006d24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d001      	beq.n	8006d2e <__sflush_r+0x4a>
 8006d2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d2c:	1ac0      	subs	r0, r0, r3
 8006d2e:	0002      	movs	r2, r0
 8006d30:	6a21      	ldr	r1, [r4, #32]
 8006d32:	2300      	movs	r3, #0
 8006d34:	0028      	movs	r0, r5
 8006d36:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006d38:	47b8      	blx	r7
 8006d3a:	89a1      	ldrh	r1, [r4, #12]
 8006d3c:	1c43      	adds	r3, r0, #1
 8006d3e:	d106      	bne.n	8006d4e <__sflush_r+0x6a>
 8006d40:	682b      	ldr	r3, [r5, #0]
 8006d42:	2b1d      	cmp	r3, #29
 8006d44:	d831      	bhi.n	8006daa <__sflush_r+0xc6>
 8006d46:	4a2c      	ldr	r2, [pc, #176]	; (8006df8 <__sflush_r+0x114>)
 8006d48:	40da      	lsrs	r2, r3
 8006d4a:	07d3      	lsls	r3, r2, #31
 8006d4c:	d52d      	bpl.n	8006daa <__sflush_r+0xc6>
 8006d4e:	2300      	movs	r3, #0
 8006d50:	6063      	str	r3, [r4, #4]
 8006d52:	6923      	ldr	r3, [r4, #16]
 8006d54:	6023      	str	r3, [r4, #0]
 8006d56:	04cb      	lsls	r3, r1, #19
 8006d58:	d505      	bpl.n	8006d66 <__sflush_r+0x82>
 8006d5a:	1c43      	adds	r3, r0, #1
 8006d5c:	d102      	bne.n	8006d64 <__sflush_r+0x80>
 8006d5e:	682b      	ldr	r3, [r5, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d100      	bne.n	8006d66 <__sflush_r+0x82>
 8006d64:	6560      	str	r0, [r4, #84]	; 0x54
 8006d66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d68:	602e      	str	r6, [r5, #0]
 8006d6a:	2900      	cmp	r1, #0
 8006d6c:	d0c6      	beq.n	8006cfc <__sflush_r+0x18>
 8006d6e:	0023      	movs	r3, r4
 8006d70:	3344      	adds	r3, #68	; 0x44
 8006d72:	4299      	cmp	r1, r3
 8006d74:	d002      	beq.n	8006d7c <__sflush_r+0x98>
 8006d76:	0028      	movs	r0, r5
 8006d78:	f7fe fcba 	bl	80056f0 <_free_r>
 8006d7c:	2000      	movs	r0, #0
 8006d7e:	6360      	str	r0, [r4, #52]	; 0x34
 8006d80:	e7bd      	b.n	8006cfe <__sflush_r+0x1a>
 8006d82:	2301      	movs	r3, #1
 8006d84:	0028      	movs	r0, r5
 8006d86:	6a21      	ldr	r1, [r4, #32]
 8006d88:	47b8      	blx	r7
 8006d8a:	1c43      	adds	r3, r0, #1
 8006d8c:	d1c5      	bne.n	8006d1a <__sflush_r+0x36>
 8006d8e:	682b      	ldr	r3, [r5, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d0c2      	beq.n	8006d1a <__sflush_r+0x36>
 8006d94:	2b1d      	cmp	r3, #29
 8006d96:	d001      	beq.n	8006d9c <__sflush_r+0xb8>
 8006d98:	2b16      	cmp	r3, #22
 8006d9a:	d101      	bne.n	8006da0 <__sflush_r+0xbc>
 8006d9c:	602e      	str	r6, [r5, #0]
 8006d9e:	e7ad      	b.n	8006cfc <__sflush_r+0x18>
 8006da0:	2340      	movs	r3, #64	; 0x40
 8006da2:	89a2      	ldrh	r2, [r4, #12]
 8006da4:	4313      	orrs	r3, r2
 8006da6:	81a3      	strh	r3, [r4, #12]
 8006da8:	e7a9      	b.n	8006cfe <__sflush_r+0x1a>
 8006daa:	2340      	movs	r3, #64	; 0x40
 8006dac:	430b      	orrs	r3, r1
 8006dae:	e7fa      	b.n	8006da6 <__sflush_r+0xc2>
 8006db0:	690f      	ldr	r7, [r1, #16]
 8006db2:	2f00      	cmp	r7, #0
 8006db4:	d0a2      	beq.n	8006cfc <__sflush_r+0x18>
 8006db6:	680a      	ldr	r2, [r1, #0]
 8006db8:	600f      	str	r7, [r1, #0]
 8006dba:	1bd2      	subs	r2, r2, r7
 8006dbc:	9201      	str	r2, [sp, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	079b      	lsls	r3, r3, #30
 8006dc2:	d100      	bne.n	8006dc6 <__sflush_r+0xe2>
 8006dc4:	694a      	ldr	r2, [r1, #20]
 8006dc6:	60a2      	str	r2, [r4, #8]
 8006dc8:	9b01      	ldr	r3, [sp, #4]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	dc00      	bgt.n	8006dd0 <__sflush_r+0xec>
 8006dce:	e795      	b.n	8006cfc <__sflush_r+0x18>
 8006dd0:	003a      	movs	r2, r7
 8006dd2:	0028      	movs	r0, r5
 8006dd4:	9b01      	ldr	r3, [sp, #4]
 8006dd6:	6a21      	ldr	r1, [r4, #32]
 8006dd8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006dda:	47b0      	blx	r6
 8006ddc:	2800      	cmp	r0, #0
 8006dde:	dc06      	bgt.n	8006dee <__sflush_r+0x10a>
 8006de0:	2340      	movs	r3, #64	; 0x40
 8006de2:	2001      	movs	r0, #1
 8006de4:	89a2      	ldrh	r2, [r4, #12]
 8006de6:	4240      	negs	r0, r0
 8006de8:	4313      	orrs	r3, r2
 8006dea:	81a3      	strh	r3, [r4, #12]
 8006dec:	e787      	b.n	8006cfe <__sflush_r+0x1a>
 8006dee:	9b01      	ldr	r3, [sp, #4]
 8006df0:	183f      	adds	r7, r7, r0
 8006df2:	1a1b      	subs	r3, r3, r0
 8006df4:	9301      	str	r3, [sp, #4]
 8006df6:	e7e7      	b.n	8006dc8 <__sflush_r+0xe4>
 8006df8:	20400001 	.word	0x20400001

08006dfc <_fflush_r>:
 8006dfc:	690b      	ldr	r3, [r1, #16]
 8006dfe:	b570      	push	{r4, r5, r6, lr}
 8006e00:	0005      	movs	r5, r0
 8006e02:	000c      	movs	r4, r1
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d102      	bne.n	8006e0e <_fflush_r+0x12>
 8006e08:	2500      	movs	r5, #0
 8006e0a:	0028      	movs	r0, r5
 8006e0c:	bd70      	pop	{r4, r5, r6, pc}
 8006e0e:	2800      	cmp	r0, #0
 8006e10:	d004      	beq.n	8006e1c <_fflush_r+0x20>
 8006e12:	6983      	ldr	r3, [r0, #24]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d101      	bne.n	8006e1c <_fflush_r+0x20>
 8006e18:	f000 f892 	bl	8006f40 <__sinit>
 8006e1c:	4b14      	ldr	r3, [pc, #80]	; (8006e70 <_fflush_r+0x74>)
 8006e1e:	429c      	cmp	r4, r3
 8006e20:	d11b      	bne.n	8006e5a <_fflush_r+0x5e>
 8006e22:	686c      	ldr	r4, [r5, #4]
 8006e24:	220c      	movs	r2, #12
 8006e26:	5ea3      	ldrsh	r3, [r4, r2]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d0ed      	beq.n	8006e08 <_fflush_r+0xc>
 8006e2c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e2e:	07d2      	lsls	r2, r2, #31
 8006e30:	d404      	bmi.n	8006e3c <_fflush_r+0x40>
 8006e32:	059b      	lsls	r3, r3, #22
 8006e34:	d402      	bmi.n	8006e3c <_fflush_r+0x40>
 8006e36:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e38:	f000 f923 	bl	8007082 <__retarget_lock_acquire_recursive>
 8006e3c:	0028      	movs	r0, r5
 8006e3e:	0021      	movs	r1, r4
 8006e40:	f7ff ff50 	bl	8006ce4 <__sflush_r>
 8006e44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e46:	0005      	movs	r5, r0
 8006e48:	07db      	lsls	r3, r3, #31
 8006e4a:	d4de      	bmi.n	8006e0a <_fflush_r+0xe>
 8006e4c:	89a3      	ldrh	r3, [r4, #12]
 8006e4e:	059b      	lsls	r3, r3, #22
 8006e50:	d4db      	bmi.n	8006e0a <_fflush_r+0xe>
 8006e52:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e54:	f000 f916 	bl	8007084 <__retarget_lock_release_recursive>
 8006e58:	e7d7      	b.n	8006e0a <_fflush_r+0xe>
 8006e5a:	4b06      	ldr	r3, [pc, #24]	; (8006e74 <_fflush_r+0x78>)
 8006e5c:	429c      	cmp	r4, r3
 8006e5e:	d101      	bne.n	8006e64 <_fflush_r+0x68>
 8006e60:	68ac      	ldr	r4, [r5, #8]
 8006e62:	e7df      	b.n	8006e24 <_fflush_r+0x28>
 8006e64:	4b04      	ldr	r3, [pc, #16]	; (8006e78 <_fflush_r+0x7c>)
 8006e66:	429c      	cmp	r4, r3
 8006e68:	d1dc      	bne.n	8006e24 <_fflush_r+0x28>
 8006e6a:	68ec      	ldr	r4, [r5, #12]
 8006e6c:	e7da      	b.n	8006e24 <_fflush_r+0x28>
 8006e6e:	46c0      	nop			; (mov r8, r8)
 8006e70:	08007790 	.word	0x08007790
 8006e74:	080077b0 	.word	0x080077b0
 8006e78:	08007770 	.word	0x08007770

08006e7c <std>:
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	b510      	push	{r4, lr}
 8006e80:	0004      	movs	r4, r0
 8006e82:	6003      	str	r3, [r0, #0]
 8006e84:	6043      	str	r3, [r0, #4]
 8006e86:	6083      	str	r3, [r0, #8]
 8006e88:	8181      	strh	r1, [r0, #12]
 8006e8a:	6643      	str	r3, [r0, #100]	; 0x64
 8006e8c:	0019      	movs	r1, r3
 8006e8e:	81c2      	strh	r2, [r0, #14]
 8006e90:	6103      	str	r3, [r0, #16]
 8006e92:	6143      	str	r3, [r0, #20]
 8006e94:	6183      	str	r3, [r0, #24]
 8006e96:	2208      	movs	r2, #8
 8006e98:	305c      	adds	r0, #92	; 0x5c
 8006e9a:	f7fe fa6f 	bl	800537c <memset>
 8006e9e:	4b05      	ldr	r3, [pc, #20]	; (8006eb4 <std+0x38>)
 8006ea0:	6224      	str	r4, [r4, #32]
 8006ea2:	6263      	str	r3, [r4, #36]	; 0x24
 8006ea4:	4b04      	ldr	r3, [pc, #16]	; (8006eb8 <std+0x3c>)
 8006ea6:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ea8:	4b04      	ldr	r3, [pc, #16]	; (8006ebc <std+0x40>)
 8006eaa:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006eac:	4b04      	ldr	r3, [pc, #16]	; (8006ec0 <std+0x44>)
 8006eae:	6323      	str	r3, [r4, #48]	; 0x30
 8006eb0:	bd10      	pop	{r4, pc}
 8006eb2:	46c0      	nop			; (mov r8, r8)
 8006eb4:	08005485 	.word	0x08005485
 8006eb8:	080054b1 	.word	0x080054b1
 8006ebc:	080054e9 	.word	0x080054e9
 8006ec0:	08005515 	.word	0x08005515

08006ec4 <_cleanup_r>:
 8006ec4:	b510      	push	{r4, lr}
 8006ec6:	4902      	ldr	r1, [pc, #8]	; (8006ed0 <_cleanup_r+0xc>)
 8006ec8:	f000 f8ba 	bl	8007040 <_fwalk_reent>
 8006ecc:	bd10      	pop	{r4, pc}
 8006ece:	46c0      	nop			; (mov r8, r8)
 8006ed0:	08006dfd 	.word	0x08006dfd

08006ed4 <__sfmoreglue>:
 8006ed4:	b570      	push	{r4, r5, r6, lr}
 8006ed6:	2568      	movs	r5, #104	; 0x68
 8006ed8:	1e4a      	subs	r2, r1, #1
 8006eda:	4355      	muls	r5, r2
 8006edc:	000e      	movs	r6, r1
 8006ede:	0029      	movs	r1, r5
 8006ee0:	3174      	adds	r1, #116	; 0x74
 8006ee2:	f7fe fc71 	bl	80057c8 <_malloc_r>
 8006ee6:	1e04      	subs	r4, r0, #0
 8006ee8:	d008      	beq.n	8006efc <__sfmoreglue+0x28>
 8006eea:	2100      	movs	r1, #0
 8006eec:	002a      	movs	r2, r5
 8006eee:	6001      	str	r1, [r0, #0]
 8006ef0:	6046      	str	r6, [r0, #4]
 8006ef2:	300c      	adds	r0, #12
 8006ef4:	60a0      	str	r0, [r4, #8]
 8006ef6:	3268      	adds	r2, #104	; 0x68
 8006ef8:	f7fe fa40 	bl	800537c <memset>
 8006efc:	0020      	movs	r0, r4
 8006efe:	bd70      	pop	{r4, r5, r6, pc}

08006f00 <__sfp_lock_acquire>:
 8006f00:	b510      	push	{r4, lr}
 8006f02:	4802      	ldr	r0, [pc, #8]	; (8006f0c <__sfp_lock_acquire+0xc>)
 8006f04:	f000 f8bd 	bl	8007082 <__retarget_lock_acquire_recursive>
 8006f08:	bd10      	pop	{r4, pc}
 8006f0a:	46c0      	nop			; (mov r8, r8)
 8006f0c:	200004f5 	.word	0x200004f5

08006f10 <__sfp_lock_release>:
 8006f10:	b510      	push	{r4, lr}
 8006f12:	4802      	ldr	r0, [pc, #8]	; (8006f1c <__sfp_lock_release+0xc>)
 8006f14:	f000 f8b6 	bl	8007084 <__retarget_lock_release_recursive>
 8006f18:	bd10      	pop	{r4, pc}
 8006f1a:	46c0      	nop			; (mov r8, r8)
 8006f1c:	200004f5 	.word	0x200004f5

08006f20 <__sinit_lock_acquire>:
 8006f20:	b510      	push	{r4, lr}
 8006f22:	4802      	ldr	r0, [pc, #8]	; (8006f2c <__sinit_lock_acquire+0xc>)
 8006f24:	f000 f8ad 	bl	8007082 <__retarget_lock_acquire_recursive>
 8006f28:	bd10      	pop	{r4, pc}
 8006f2a:	46c0      	nop			; (mov r8, r8)
 8006f2c:	200004f6 	.word	0x200004f6

08006f30 <__sinit_lock_release>:
 8006f30:	b510      	push	{r4, lr}
 8006f32:	4802      	ldr	r0, [pc, #8]	; (8006f3c <__sinit_lock_release+0xc>)
 8006f34:	f000 f8a6 	bl	8007084 <__retarget_lock_release_recursive>
 8006f38:	bd10      	pop	{r4, pc}
 8006f3a:	46c0      	nop			; (mov r8, r8)
 8006f3c:	200004f6 	.word	0x200004f6

08006f40 <__sinit>:
 8006f40:	b513      	push	{r0, r1, r4, lr}
 8006f42:	0004      	movs	r4, r0
 8006f44:	f7ff ffec 	bl	8006f20 <__sinit_lock_acquire>
 8006f48:	69a3      	ldr	r3, [r4, #24]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d002      	beq.n	8006f54 <__sinit+0x14>
 8006f4e:	f7ff ffef 	bl	8006f30 <__sinit_lock_release>
 8006f52:	bd13      	pop	{r0, r1, r4, pc}
 8006f54:	64a3      	str	r3, [r4, #72]	; 0x48
 8006f56:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006f58:	6523      	str	r3, [r4, #80]	; 0x50
 8006f5a:	4b13      	ldr	r3, [pc, #76]	; (8006fa8 <__sinit+0x68>)
 8006f5c:	4a13      	ldr	r2, [pc, #76]	; (8006fac <__sinit+0x6c>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	62a2      	str	r2, [r4, #40]	; 0x28
 8006f62:	9301      	str	r3, [sp, #4]
 8006f64:	42a3      	cmp	r3, r4
 8006f66:	d101      	bne.n	8006f6c <__sinit+0x2c>
 8006f68:	2301      	movs	r3, #1
 8006f6a:	61a3      	str	r3, [r4, #24]
 8006f6c:	0020      	movs	r0, r4
 8006f6e:	f000 f81f 	bl	8006fb0 <__sfp>
 8006f72:	6060      	str	r0, [r4, #4]
 8006f74:	0020      	movs	r0, r4
 8006f76:	f000 f81b 	bl	8006fb0 <__sfp>
 8006f7a:	60a0      	str	r0, [r4, #8]
 8006f7c:	0020      	movs	r0, r4
 8006f7e:	f000 f817 	bl	8006fb0 <__sfp>
 8006f82:	2200      	movs	r2, #0
 8006f84:	2104      	movs	r1, #4
 8006f86:	60e0      	str	r0, [r4, #12]
 8006f88:	6860      	ldr	r0, [r4, #4]
 8006f8a:	f7ff ff77 	bl	8006e7c <std>
 8006f8e:	2201      	movs	r2, #1
 8006f90:	2109      	movs	r1, #9
 8006f92:	68a0      	ldr	r0, [r4, #8]
 8006f94:	f7ff ff72 	bl	8006e7c <std>
 8006f98:	2202      	movs	r2, #2
 8006f9a:	2112      	movs	r1, #18
 8006f9c:	68e0      	ldr	r0, [r4, #12]
 8006f9e:	f7ff ff6d 	bl	8006e7c <std>
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	61a3      	str	r3, [r4, #24]
 8006fa6:	e7d2      	b.n	8006f4e <__sinit+0xe>
 8006fa8:	0800756c 	.word	0x0800756c
 8006fac:	08006ec5 	.word	0x08006ec5

08006fb0 <__sfp>:
 8006fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fb2:	0007      	movs	r7, r0
 8006fb4:	f7ff ffa4 	bl	8006f00 <__sfp_lock_acquire>
 8006fb8:	4b1f      	ldr	r3, [pc, #124]	; (8007038 <__sfp+0x88>)
 8006fba:	681e      	ldr	r6, [r3, #0]
 8006fbc:	69b3      	ldr	r3, [r6, #24]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d102      	bne.n	8006fc8 <__sfp+0x18>
 8006fc2:	0030      	movs	r0, r6
 8006fc4:	f7ff ffbc 	bl	8006f40 <__sinit>
 8006fc8:	3648      	adds	r6, #72	; 0x48
 8006fca:	68b4      	ldr	r4, [r6, #8]
 8006fcc:	6873      	ldr	r3, [r6, #4]
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	d504      	bpl.n	8006fdc <__sfp+0x2c>
 8006fd2:	6833      	ldr	r3, [r6, #0]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d022      	beq.n	800701e <__sfp+0x6e>
 8006fd8:	6836      	ldr	r6, [r6, #0]
 8006fda:	e7f6      	b.n	8006fca <__sfp+0x1a>
 8006fdc:	220c      	movs	r2, #12
 8006fde:	5ea5      	ldrsh	r5, [r4, r2]
 8006fe0:	2d00      	cmp	r5, #0
 8006fe2:	d11a      	bne.n	800701a <__sfp+0x6a>
 8006fe4:	0020      	movs	r0, r4
 8006fe6:	4b15      	ldr	r3, [pc, #84]	; (800703c <__sfp+0x8c>)
 8006fe8:	3058      	adds	r0, #88	; 0x58
 8006fea:	60e3      	str	r3, [r4, #12]
 8006fec:	6665      	str	r5, [r4, #100]	; 0x64
 8006fee:	f000 f847 	bl	8007080 <__retarget_lock_init_recursive>
 8006ff2:	f7ff ff8d 	bl	8006f10 <__sfp_lock_release>
 8006ff6:	0020      	movs	r0, r4
 8006ff8:	2208      	movs	r2, #8
 8006ffa:	0029      	movs	r1, r5
 8006ffc:	6025      	str	r5, [r4, #0]
 8006ffe:	60a5      	str	r5, [r4, #8]
 8007000:	6065      	str	r5, [r4, #4]
 8007002:	6125      	str	r5, [r4, #16]
 8007004:	6165      	str	r5, [r4, #20]
 8007006:	61a5      	str	r5, [r4, #24]
 8007008:	305c      	adds	r0, #92	; 0x5c
 800700a:	f7fe f9b7 	bl	800537c <memset>
 800700e:	6365      	str	r5, [r4, #52]	; 0x34
 8007010:	63a5      	str	r5, [r4, #56]	; 0x38
 8007012:	64a5      	str	r5, [r4, #72]	; 0x48
 8007014:	64e5      	str	r5, [r4, #76]	; 0x4c
 8007016:	0020      	movs	r0, r4
 8007018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800701a:	3468      	adds	r4, #104	; 0x68
 800701c:	e7d7      	b.n	8006fce <__sfp+0x1e>
 800701e:	2104      	movs	r1, #4
 8007020:	0038      	movs	r0, r7
 8007022:	f7ff ff57 	bl	8006ed4 <__sfmoreglue>
 8007026:	1e04      	subs	r4, r0, #0
 8007028:	6030      	str	r0, [r6, #0]
 800702a:	d1d5      	bne.n	8006fd8 <__sfp+0x28>
 800702c:	f7ff ff70 	bl	8006f10 <__sfp_lock_release>
 8007030:	230c      	movs	r3, #12
 8007032:	603b      	str	r3, [r7, #0]
 8007034:	e7ef      	b.n	8007016 <__sfp+0x66>
 8007036:	46c0      	nop			; (mov r8, r8)
 8007038:	0800756c 	.word	0x0800756c
 800703c:	ffff0001 	.word	0xffff0001

08007040 <_fwalk_reent>:
 8007040:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007042:	0004      	movs	r4, r0
 8007044:	0006      	movs	r6, r0
 8007046:	2700      	movs	r7, #0
 8007048:	9101      	str	r1, [sp, #4]
 800704a:	3448      	adds	r4, #72	; 0x48
 800704c:	6863      	ldr	r3, [r4, #4]
 800704e:	68a5      	ldr	r5, [r4, #8]
 8007050:	9300      	str	r3, [sp, #0]
 8007052:	9b00      	ldr	r3, [sp, #0]
 8007054:	3b01      	subs	r3, #1
 8007056:	9300      	str	r3, [sp, #0]
 8007058:	d504      	bpl.n	8007064 <_fwalk_reent+0x24>
 800705a:	6824      	ldr	r4, [r4, #0]
 800705c:	2c00      	cmp	r4, #0
 800705e:	d1f5      	bne.n	800704c <_fwalk_reent+0xc>
 8007060:	0038      	movs	r0, r7
 8007062:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007064:	89ab      	ldrh	r3, [r5, #12]
 8007066:	2b01      	cmp	r3, #1
 8007068:	d908      	bls.n	800707c <_fwalk_reent+0x3c>
 800706a:	220e      	movs	r2, #14
 800706c:	5eab      	ldrsh	r3, [r5, r2]
 800706e:	3301      	adds	r3, #1
 8007070:	d004      	beq.n	800707c <_fwalk_reent+0x3c>
 8007072:	0029      	movs	r1, r5
 8007074:	0030      	movs	r0, r6
 8007076:	9b01      	ldr	r3, [sp, #4]
 8007078:	4798      	blx	r3
 800707a:	4307      	orrs	r7, r0
 800707c:	3568      	adds	r5, #104	; 0x68
 800707e:	e7e8      	b.n	8007052 <_fwalk_reent+0x12>

08007080 <__retarget_lock_init_recursive>:
 8007080:	4770      	bx	lr

08007082 <__retarget_lock_acquire_recursive>:
 8007082:	4770      	bx	lr

08007084 <__retarget_lock_release_recursive>:
 8007084:	4770      	bx	lr
	...

08007088 <__swhatbuf_r>:
 8007088:	b570      	push	{r4, r5, r6, lr}
 800708a:	000e      	movs	r6, r1
 800708c:	001d      	movs	r5, r3
 800708e:	230e      	movs	r3, #14
 8007090:	5ec9      	ldrsh	r1, [r1, r3]
 8007092:	0014      	movs	r4, r2
 8007094:	b096      	sub	sp, #88	; 0x58
 8007096:	2900      	cmp	r1, #0
 8007098:	da08      	bge.n	80070ac <__swhatbuf_r+0x24>
 800709a:	220c      	movs	r2, #12
 800709c:	5eb3      	ldrsh	r3, [r6, r2]
 800709e:	2200      	movs	r2, #0
 80070a0:	602a      	str	r2, [r5, #0]
 80070a2:	061b      	lsls	r3, r3, #24
 80070a4:	d411      	bmi.n	80070ca <__swhatbuf_r+0x42>
 80070a6:	2380      	movs	r3, #128	; 0x80
 80070a8:	00db      	lsls	r3, r3, #3
 80070aa:	e00f      	b.n	80070cc <__swhatbuf_r+0x44>
 80070ac:	466a      	mov	r2, sp
 80070ae:	f000 f909 	bl	80072c4 <_fstat_r>
 80070b2:	2800      	cmp	r0, #0
 80070b4:	dbf1      	blt.n	800709a <__swhatbuf_r+0x12>
 80070b6:	23f0      	movs	r3, #240	; 0xf0
 80070b8:	9901      	ldr	r1, [sp, #4]
 80070ba:	021b      	lsls	r3, r3, #8
 80070bc:	4019      	ands	r1, r3
 80070be:	4b05      	ldr	r3, [pc, #20]	; (80070d4 <__swhatbuf_r+0x4c>)
 80070c0:	18c9      	adds	r1, r1, r3
 80070c2:	424b      	negs	r3, r1
 80070c4:	4159      	adcs	r1, r3
 80070c6:	6029      	str	r1, [r5, #0]
 80070c8:	e7ed      	b.n	80070a6 <__swhatbuf_r+0x1e>
 80070ca:	2340      	movs	r3, #64	; 0x40
 80070cc:	2000      	movs	r0, #0
 80070ce:	6023      	str	r3, [r4, #0]
 80070d0:	b016      	add	sp, #88	; 0x58
 80070d2:	bd70      	pop	{r4, r5, r6, pc}
 80070d4:	ffffe000 	.word	0xffffe000

080070d8 <__smakebuf_r>:
 80070d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070da:	2602      	movs	r6, #2
 80070dc:	898b      	ldrh	r3, [r1, #12]
 80070de:	0005      	movs	r5, r0
 80070e0:	000c      	movs	r4, r1
 80070e2:	4233      	tst	r3, r6
 80070e4:	d006      	beq.n	80070f4 <__smakebuf_r+0x1c>
 80070e6:	0023      	movs	r3, r4
 80070e8:	3347      	adds	r3, #71	; 0x47
 80070ea:	6023      	str	r3, [r4, #0]
 80070ec:	6123      	str	r3, [r4, #16]
 80070ee:	2301      	movs	r3, #1
 80070f0:	6163      	str	r3, [r4, #20]
 80070f2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80070f4:	466a      	mov	r2, sp
 80070f6:	ab01      	add	r3, sp, #4
 80070f8:	f7ff ffc6 	bl	8007088 <__swhatbuf_r>
 80070fc:	9900      	ldr	r1, [sp, #0]
 80070fe:	0007      	movs	r7, r0
 8007100:	0028      	movs	r0, r5
 8007102:	f7fe fb61 	bl	80057c8 <_malloc_r>
 8007106:	2800      	cmp	r0, #0
 8007108:	d108      	bne.n	800711c <__smakebuf_r+0x44>
 800710a:	220c      	movs	r2, #12
 800710c:	5ea3      	ldrsh	r3, [r4, r2]
 800710e:	059a      	lsls	r2, r3, #22
 8007110:	d4ef      	bmi.n	80070f2 <__smakebuf_r+0x1a>
 8007112:	2203      	movs	r2, #3
 8007114:	4393      	bics	r3, r2
 8007116:	431e      	orrs	r6, r3
 8007118:	81a6      	strh	r6, [r4, #12]
 800711a:	e7e4      	b.n	80070e6 <__smakebuf_r+0xe>
 800711c:	4b0f      	ldr	r3, [pc, #60]	; (800715c <__smakebuf_r+0x84>)
 800711e:	62ab      	str	r3, [r5, #40]	; 0x28
 8007120:	2380      	movs	r3, #128	; 0x80
 8007122:	89a2      	ldrh	r2, [r4, #12]
 8007124:	6020      	str	r0, [r4, #0]
 8007126:	4313      	orrs	r3, r2
 8007128:	81a3      	strh	r3, [r4, #12]
 800712a:	9b00      	ldr	r3, [sp, #0]
 800712c:	6120      	str	r0, [r4, #16]
 800712e:	6163      	str	r3, [r4, #20]
 8007130:	9b01      	ldr	r3, [sp, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d00d      	beq.n	8007152 <__smakebuf_r+0x7a>
 8007136:	0028      	movs	r0, r5
 8007138:	230e      	movs	r3, #14
 800713a:	5ee1      	ldrsh	r1, [r4, r3]
 800713c:	f000 f8d4 	bl	80072e8 <_isatty_r>
 8007140:	2800      	cmp	r0, #0
 8007142:	d006      	beq.n	8007152 <__smakebuf_r+0x7a>
 8007144:	2203      	movs	r2, #3
 8007146:	89a3      	ldrh	r3, [r4, #12]
 8007148:	4393      	bics	r3, r2
 800714a:	001a      	movs	r2, r3
 800714c:	2301      	movs	r3, #1
 800714e:	4313      	orrs	r3, r2
 8007150:	81a3      	strh	r3, [r4, #12]
 8007152:	89a0      	ldrh	r0, [r4, #12]
 8007154:	4307      	orrs	r7, r0
 8007156:	81a7      	strh	r7, [r4, #12]
 8007158:	e7cb      	b.n	80070f2 <__smakebuf_r+0x1a>
 800715a:	46c0      	nop			; (mov r8, r8)
 800715c:	08006ec5 	.word	0x08006ec5

08007160 <memchr>:
 8007160:	b2c9      	uxtb	r1, r1
 8007162:	1882      	adds	r2, r0, r2
 8007164:	4290      	cmp	r0, r2
 8007166:	d101      	bne.n	800716c <memchr+0xc>
 8007168:	2000      	movs	r0, #0
 800716a:	4770      	bx	lr
 800716c:	7803      	ldrb	r3, [r0, #0]
 800716e:	428b      	cmp	r3, r1
 8007170:	d0fb      	beq.n	800716a <memchr+0xa>
 8007172:	3001      	adds	r0, #1
 8007174:	e7f6      	b.n	8007164 <memchr+0x4>

08007176 <memcpy>:
 8007176:	2300      	movs	r3, #0
 8007178:	b510      	push	{r4, lr}
 800717a:	429a      	cmp	r2, r3
 800717c:	d100      	bne.n	8007180 <memcpy+0xa>
 800717e:	bd10      	pop	{r4, pc}
 8007180:	5ccc      	ldrb	r4, [r1, r3]
 8007182:	54c4      	strb	r4, [r0, r3]
 8007184:	3301      	adds	r3, #1
 8007186:	e7f8      	b.n	800717a <memcpy+0x4>

08007188 <memmove>:
 8007188:	b510      	push	{r4, lr}
 800718a:	4288      	cmp	r0, r1
 800718c:	d902      	bls.n	8007194 <memmove+0xc>
 800718e:	188b      	adds	r3, r1, r2
 8007190:	4298      	cmp	r0, r3
 8007192:	d303      	bcc.n	800719c <memmove+0x14>
 8007194:	2300      	movs	r3, #0
 8007196:	e007      	b.n	80071a8 <memmove+0x20>
 8007198:	5c8b      	ldrb	r3, [r1, r2]
 800719a:	5483      	strb	r3, [r0, r2]
 800719c:	3a01      	subs	r2, #1
 800719e:	d2fb      	bcs.n	8007198 <memmove+0x10>
 80071a0:	bd10      	pop	{r4, pc}
 80071a2:	5ccc      	ldrb	r4, [r1, r3]
 80071a4:	54c4      	strb	r4, [r0, r3]
 80071a6:	3301      	adds	r3, #1
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d1fa      	bne.n	80071a2 <memmove+0x1a>
 80071ac:	e7f8      	b.n	80071a0 <memmove+0x18>
	...

080071b0 <__malloc_lock>:
 80071b0:	b510      	push	{r4, lr}
 80071b2:	4802      	ldr	r0, [pc, #8]	; (80071bc <__malloc_lock+0xc>)
 80071b4:	f7ff ff65 	bl	8007082 <__retarget_lock_acquire_recursive>
 80071b8:	bd10      	pop	{r4, pc}
 80071ba:	46c0      	nop			; (mov r8, r8)
 80071bc:	200004f4 	.word	0x200004f4

080071c0 <__malloc_unlock>:
 80071c0:	b510      	push	{r4, lr}
 80071c2:	4802      	ldr	r0, [pc, #8]	; (80071cc <__malloc_unlock+0xc>)
 80071c4:	f7ff ff5e 	bl	8007084 <__retarget_lock_release_recursive>
 80071c8:	bd10      	pop	{r4, pc}
 80071ca:	46c0      	nop			; (mov r8, r8)
 80071cc:	200004f4 	.word	0x200004f4

080071d0 <_realloc_r>:
 80071d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071d2:	0007      	movs	r7, r0
 80071d4:	000e      	movs	r6, r1
 80071d6:	0014      	movs	r4, r2
 80071d8:	2900      	cmp	r1, #0
 80071da:	d105      	bne.n	80071e8 <_realloc_r+0x18>
 80071dc:	0011      	movs	r1, r2
 80071de:	f7fe faf3 	bl	80057c8 <_malloc_r>
 80071e2:	0005      	movs	r5, r0
 80071e4:	0028      	movs	r0, r5
 80071e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80071e8:	2a00      	cmp	r2, #0
 80071ea:	d103      	bne.n	80071f4 <_realloc_r+0x24>
 80071ec:	f7fe fa80 	bl	80056f0 <_free_r>
 80071f0:	0025      	movs	r5, r4
 80071f2:	e7f7      	b.n	80071e4 <_realloc_r+0x14>
 80071f4:	f000 f88a 	bl	800730c <_malloc_usable_size_r>
 80071f8:	9001      	str	r0, [sp, #4]
 80071fa:	4284      	cmp	r4, r0
 80071fc:	d803      	bhi.n	8007206 <_realloc_r+0x36>
 80071fe:	0035      	movs	r5, r6
 8007200:	0843      	lsrs	r3, r0, #1
 8007202:	42a3      	cmp	r3, r4
 8007204:	d3ee      	bcc.n	80071e4 <_realloc_r+0x14>
 8007206:	0021      	movs	r1, r4
 8007208:	0038      	movs	r0, r7
 800720a:	f7fe fadd 	bl	80057c8 <_malloc_r>
 800720e:	1e05      	subs	r5, r0, #0
 8007210:	d0e8      	beq.n	80071e4 <_realloc_r+0x14>
 8007212:	9b01      	ldr	r3, [sp, #4]
 8007214:	0022      	movs	r2, r4
 8007216:	429c      	cmp	r4, r3
 8007218:	d900      	bls.n	800721c <_realloc_r+0x4c>
 800721a:	001a      	movs	r2, r3
 800721c:	0031      	movs	r1, r6
 800721e:	0028      	movs	r0, r5
 8007220:	f7ff ffa9 	bl	8007176 <memcpy>
 8007224:	0031      	movs	r1, r6
 8007226:	0038      	movs	r0, r7
 8007228:	f7fe fa62 	bl	80056f0 <_free_r>
 800722c:	e7da      	b.n	80071e4 <_realloc_r+0x14>

0800722e <_raise_r>:
 800722e:	b570      	push	{r4, r5, r6, lr}
 8007230:	0004      	movs	r4, r0
 8007232:	000d      	movs	r5, r1
 8007234:	291f      	cmp	r1, #31
 8007236:	d904      	bls.n	8007242 <_raise_r+0x14>
 8007238:	2316      	movs	r3, #22
 800723a:	6003      	str	r3, [r0, #0]
 800723c:	2001      	movs	r0, #1
 800723e:	4240      	negs	r0, r0
 8007240:	bd70      	pop	{r4, r5, r6, pc}
 8007242:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007244:	2b00      	cmp	r3, #0
 8007246:	d004      	beq.n	8007252 <_raise_r+0x24>
 8007248:	008a      	lsls	r2, r1, #2
 800724a:	189b      	adds	r3, r3, r2
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	2a00      	cmp	r2, #0
 8007250:	d108      	bne.n	8007264 <_raise_r+0x36>
 8007252:	0020      	movs	r0, r4
 8007254:	f000 f832 	bl	80072bc <_getpid_r>
 8007258:	002a      	movs	r2, r5
 800725a:	0001      	movs	r1, r0
 800725c:	0020      	movs	r0, r4
 800725e:	f000 f81b 	bl	8007298 <_kill_r>
 8007262:	e7ed      	b.n	8007240 <_raise_r+0x12>
 8007264:	2000      	movs	r0, #0
 8007266:	2a01      	cmp	r2, #1
 8007268:	d0ea      	beq.n	8007240 <_raise_r+0x12>
 800726a:	1c51      	adds	r1, r2, #1
 800726c:	d103      	bne.n	8007276 <_raise_r+0x48>
 800726e:	2316      	movs	r3, #22
 8007270:	3001      	adds	r0, #1
 8007272:	6023      	str	r3, [r4, #0]
 8007274:	e7e4      	b.n	8007240 <_raise_r+0x12>
 8007276:	2400      	movs	r4, #0
 8007278:	0028      	movs	r0, r5
 800727a:	601c      	str	r4, [r3, #0]
 800727c:	4790      	blx	r2
 800727e:	0020      	movs	r0, r4
 8007280:	e7de      	b.n	8007240 <_raise_r+0x12>
	...

08007284 <raise>:
 8007284:	b510      	push	{r4, lr}
 8007286:	4b03      	ldr	r3, [pc, #12]	; (8007294 <raise+0x10>)
 8007288:	0001      	movs	r1, r0
 800728a:	6818      	ldr	r0, [r3, #0]
 800728c:	f7ff ffcf 	bl	800722e <_raise_r>
 8007290:	bd10      	pop	{r4, pc}
 8007292:	46c0      	nop			; (mov r8, r8)
 8007294:	2000009c 	.word	0x2000009c

08007298 <_kill_r>:
 8007298:	2300      	movs	r3, #0
 800729a:	b570      	push	{r4, r5, r6, lr}
 800729c:	4d06      	ldr	r5, [pc, #24]	; (80072b8 <_kill_r+0x20>)
 800729e:	0004      	movs	r4, r0
 80072a0:	0008      	movs	r0, r1
 80072a2:	0011      	movs	r1, r2
 80072a4:	602b      	str	r3, [r5, #0]
 80072a6:	f7f9 ffb1 	bl	800120c <_kill>
 80072aa:	1c43      	adds	r3, r0, #1
 80072ac:	d103      	bne.n	80072b6 <_kill_r+0x1e>
 80072ae:	682b      	ldr	r3, [r5, #0]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d000      	beq.n	80072b6 <_kill_r+0x1e>
 80072b4:	6023      	str	r3, [r4, #0]
 80072b6:	bd70      	pop	{r4, r5, r6, pc}
 80072b8:	200004f0 	.word	0x200004f0

080072bc <_getpid_r>:
 80072bc:	b510      	push	{r4, lr}
 80072be:	f7f9 ff9f 	bl	8001200 <_getpid>
 80072c2:	bd10      	pop	{r4, pc}

080072c4 <_fstat_r>:
 80072c4:	2300      	movs	r3, #0
 80072c6:	b570      	push	{r4, r5, r6, lr}
 80072c8:	4d06      	ldr	r5, [pc, #24]	; (80072e4 <_fstat_r+0x20>)
 80072ca:	0004      	movs	r4, r0
 80072cc:	0008      	movs	r0, r1
 80072ce:	0011      	movs	r1, r2
 80072d0:	602b      	str	r3, [r5, #0]
 80072d2:	f7f9 fffa 	bl	80012ca <_fstat>
 80072d6:	1c43      	adds	r3, r0, #1
 80072d8:	d103      	bne.n	80072e2 <_fstat_r+0x1e>
 80072da:	682b      	ldr	r3, [r5, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d000      	beq.n	80072e2 <_fstat_r+0x1e>
 80072e0:	6023      	str	r3, [r4, #0]
 80072e2:	bd70      	pop	{r4, r5, r6, pc}
 80072e4:	200004f0 	.word	0x200004f0

080072e8 <_isatty_r>:
 80072e8:	2300      	movs	r3, #0
 80072ea:	b570      	push	{r4, r5, r6, lr}
 80072ec:	4d06      	ldr	r5, [pc, #24]	; (8007308 <_isatty_r+0x20>)
 80072ee:	0004      	movs	r4, r0
 80072f0:	0008      	movs	r0, r1
 80072f2:	602b      	str	r3, [r5, #0]
 80072f4:	f7f9 fff7 	bl	80012e6 <_isatty>
 80072f8:	1c43      	adds	r3, r0, #1
 80072fa:	d103      	bne.n	8007304 <_isatty_r+0x1c>
 80072fc:	682b      	ldr	r3, [r5, #0]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d000      	beq.n	8007304 <_isatty_r+0x1c>
 8007302:	6023      	str	r3, [r4, #0]
 8007304:	bd70      	pop	{r4, r5, r6, pc}
 8007306:	46c0      	nop			; (mov r8, r8)
 8007308:	200004f0 	.word	0x200004f0

0800730c <_malloc_usable_size_r>:
 800730c:	1f0b      	subs	r3, r1, #4
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	1f18      	subs	r0, r3, #4
 8007312:	2b00      	cmp	r3, #0
 8007314:	da01      	bge.n	800731a <_malloc_usable_size_r+0xe>
 8007316:	580b      	ldr	r3, [r1, r0]
 8007318:	18c0      	adds	r0, r0, r3
 800731a:	4770      	bx	lr

0800731c <_init>:
 800731c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800731e:	46c0      	nop			; (mov r8, r8)
 8007320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007322:	bc08      	pop	{r3}
 8007324:	469e      	mov	lr, r3
 8007326:	4770      	bx	lr

08007328 <_fini>:
 8007328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800732a:	46c0      	nop			; (mov r8, r8)
 800732c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800732e:	bc08      	pop	{r3}
 8007330:	469e      	mov	lr, r3
 8007332:	4770      	bx	lr
