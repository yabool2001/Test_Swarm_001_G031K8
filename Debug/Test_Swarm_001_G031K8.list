
Test_Swarm_001_G031K8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006430  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  080064ec  080064ec  000164ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068ac  080068ac  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080068ac  080068ac  000168ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068b4  080068b4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068b4  080068b4  000168b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068b8  080068b8  000168b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080068bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000450  20000070  0800692c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c0  0800692c  000204c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014cf3  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002966  00000000  00000000  00034d8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a0  00000000  00000000  000376f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001098  00000000  00000000  00038898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e41  00000000  00000000  00039930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001476b  00000000  00000000  00051771  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099f6b  00000000  00000000  00065edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ffe47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048ac  00000000  00000000  000ffe98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080064d4 	.word	0x080064d4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	080064d4 	.word	0x080064d4

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	469b      	mov	fp, r3
 800048a:	d433      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048c:	465a      	mov	r2, fp
 800048e:	4653      	mov	r3, sl
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83a      	bhi.n	8000516 <__udivmoddi4+0xc2>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e078      	b.n	8000598 <__udivmoddi4+0x144>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e075      	b.n	800059e <__udivmoddi4+0x14a>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e028      	b.n	800051e <__udivmoddi4+0xca>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	2320      	movs	r3, #32
 80004f8:	1a9b      	subs	r3, r3, r2
 80004fa:	4652      	mov	r2, sl
 80004fc:	40da      	lsrs	r2, r3
 80004fe:	4641      	mov	r1, r8
 8000500:	0013      	movs	r3, r2
 8000502:	464a      	mov	r2, r9
 8000504:	408a      	lsls	r2, r1
 8000506:	0017      	movs	r7, r2
 8000508:	4642      	mov	r2, r8
 800050a:	431f      	orrs	r7, r3
 800050c:	4653      	mov	r3, sl
 800050e:	4093      	lsls	r3, r2
 8000510:	001e      	movs	r6, r3
 8000512:	42af      	cmp	r7, r5
 8000514:	d9c4      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000516:	2200      	movs	r2, #0
 8000518:	2300      	movs	r3, #0
 800051a:	9200      	str	r2, [sp, #0]
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	4643      	mov	r3, r8
 8000520:	2b00      	cmp	r3, #0
 8000522:	d0d9      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000524:	07fb      	lsls	r3, r7, #31
 8000526:	0872      	lsrs	r2, r6, #1
 8000528:	431a      	orrs	r2, r3
 800052a:	4646      	mov	r6, r8
 800052c:	087b      	lsrs	r3, r7, #1
 800052e:	e00e      	b.n	800054e <__udivmoddi4+0xfa>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d101      	bne.n	8000538 <__udivmoddi4+0xe4>
 8000534:	42a2      	cmp	r2, r4
 8000536:	d80c      	bhi.n	8000552 <__udivmoddi4+0xfe>
 8000538:	1aa4      	subs	r4, r4, r2
 800053a:	419d      	sbcs	r5, r3
 800053c:	2001      	movs	r0, #1
 800053e:	1924      	adds	r4, r4, r4
 8000540:	416d      	adcs	r5, r5
 8000542:	2100      	movs	r1, #0
 8000544:	3e01      	subs	r6, #1
 8000546:	1824      	adds	r4, r4, r0
 8000548:	414d      	adcs	r5, r1
 800054a:	2e00      	cmp	r6, #0
 800054c:	d006      	beq.n	800055c <__udivmoddi4+0x108>
 800054e:	42ab      	cmp	r3, r5
 8000550:	d9ee      	bls.n	8000530 <__udivmoddi4+0xdc>
 8000552:	3e01      	subs	r6, #1
 8000554:	1924      	adds	r4, r4, r4
 8000556:	416d      	adcs	r5, r5
 8000558:	2e00      	cmp	r6, #0
 800055a:	d1f8      	bne.n	800054e <__udivmoddi4+0xfa>
 800055c:	9800      	ldr	r0, [sp, #0]
 800055e:	9901      	ldr	r1, [sp, #4]
 8000560:	465b      	mov	r3, fp
 8000562:	1900      	adds	r0, r0, r4
 8000564:	4169      	adcs	r1, r5
 8000566:	2b00      	cmp	r3, #0
 8000568:	db24      	blt.n	80005b4 <__udivmoddi4+0x160>
 800056a:	002b      	movs	r3, r5
 800056c:	465a      	mov	r2, fp
 800056e:	4644      	mov	r4, r8
 8000570:	40d3      	lsrs	r3, r2
 8000572:	002a      	movs	r2, r5
 8000574:	40e2      	lsrs	r2, r4
 8000576:	001c      	movs	r4, r3
 8000578:	465b      	mov	r3, fp
 800057a:	0015      	movs	r5, r2
 800057c:	2b00      	cmp	r3, #0
 800057e:	db2a      	blt.n	80005d6 <__udivmoddi4+0x182>
 8000580:	0026      	movs	r6, r4
 8000582:	409e      	lsls	r6, r3
 8000584:	0033      	movs	r3, r6
 8000586:	0026      	movs	r6, r4
 8000588:	4647      	mov	r7, r8
 800058a:	40be      	lsls	r6, r7
 800058c:	0032      	movs	r2, r6
 800058e:	1a80      	subs	r0, r0, r2
 8000590:	4199      	sbcs	r1, r3
 8000592:	9000      	str	r0, [sp, #0]
 8000594:	9101      	str	r1, [sp, #4]
 8000596:	e79f      	b.n	80004d8 <__udivmoddi4+0x84>
 8000598:	42a3      	cmp	r3, r4
 800059a:	d8bc      	bhi.n	8000516 <__udivmoddi4+0xc2>
 800059c:	e783      	b.n	80004a6 <__udivmoddi4+0x52>
 800059e:	4642      	mov	r2, r8
 80005a0:	2320      	movs	r3, #32
 80005a2:	2100      	movs	r1, #0
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	2200      	movs	r2, #0
 80005a8:	9100      	str	r1, [sp, #0]
 80005aa:	9201      	str	r2, [sp, #4]
 80005ac:	2201      	movs	r2, #1
 80005ae:	40da      	lsrs	r2, r3
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	e786      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	2320      	movs	r3, #32
 80005b8:	1a9b      	subs	r3, r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	4646      	mov	r6, r8
 80005be:	409a      	lsls	r2, r3
 80005c0:	0023      	movs	r3, r4
 80005c2:	40f3      	lsrs	r3, r6
 80005c4:	4644      	mov	r4, r8
 80005c6:	4313      	orrs	r3, r2
 80005c8:	002a      	movs	r2, r5
 80005ca:	40e2      	lsrs	r2, r4
 80005cc:	001c      	movs	r4, r3
 80005ce:	465b      	mov	r3, fp
 80005d0:	0015      	movs	r5, r2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	dad4      	bge.n	8000580 <__udivmoddi4+0x12c>
 80005d6:	4642      	mov	r2, r8
 80005d8:	002f      	movs	r7, r5
 80005da:	2320      	movs	r3, #32
 80005dc:	0026      	movs	r6, r4
 80005de:	4097      	lsls	r7, r2
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	40de      	lsrs	r6, r3
 80005e4:	003b      	movs	r3, r7
 80005e6:	4333      	orrs	r3, r6
 80005e8:	e7cd      	b.n	8000586 <__udivmoddi4+0x132>
 80005ea:	46c0      	nop			; (mov r8, r8)

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000644:	f000 fdfe 	bl	8001244 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000648:	f000 f942 	bl	80008d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064c:	f000 faa0 	bl	8000b90 <MX_GPIO_Init>
  MX_DMA_Init();
 8000650:	f000 fa80 	bl	8000b54 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000654:	f000 fa30 	bl	8000ab8 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8000658:	f000 f990 	bl	800097c <MX_RTC_Init>
  MX_TIM14_Init();
 800065c:	f000 fa04 	bl	8000a68 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  __HAL_TIM_CLEAR_IT ( &htim14 , TIM_IT_UPDATE ) ; // żeby nie generować przerwania TIM6 od razu: https://stackoverflow.com/questions/71099885/why-hal-tim-periodelapsedcallback-gets-called-immediately-after-hal-tim-base-sta
 8000660:	4b6f      	ldr	r3, [pc, #444]	; (8000820 <main+0x1e0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2202      	movs	r2, #2
 8000666:	4252      	negs	r2, r2
 8000668:	611a      	str	r2, [r3, #16]
  HAL_Delay ( 10000 ) ; // Wait for Swarm boot // docelowo 120000
 800066a:	4b6e      	ldr	r3, [pc, #440]	; (8000824 <main+0x1e4>)
 800066c:	0018      	movs	r0, r3
 800066e:	f000 fe6f 	bl	8001350 <HAL_Delay>
  HAL_UARTEx_ReceiveToIdle_DMA ( &huart1 , rx_buff , sizeof ( rx_buff ) ) ;
 8000672:	23fa      	movs	r3, #250	; 0xfa
 8000674:	005a      	lsls	r2, r3, #1
 8000676:	496c      	ldr	r1, [pc, #432]	; (8000828 <main+0x1e8>)
 8000678:	4b6c      	ldr	r3, [pc, #432]	; (800082c <main+0x1ec>)
 800067a:	0018      	movs	r0, r3
 800067c:	f004 fca8 	bl	8004fd0 <HAL_UARTEx_ReceiveToIdle_DMA>

  send2swarm_at_command ( cs_at_comm , cs_answer , 1 ) ;
 8000680:	496b      	ldr	r1, [pc, #428]	; (8000830 <main+0x1f0>)
 8000682:	4b6c      	ldr	r3, [pc, #432]	; (8000834 <main+0x1f4>)
 8000684:	2201      	movs	r2, #1
 8000686:	0018      	movs	r0, r3
 8000688:	f000 fae4 	bl	8000c54 <send2swarm_at_command>
  if ( checklist == 1 )
 800068c:	4b6a      	ldr	r3, [pc, #424]	; (8000838 <main+0x1f8>)
 800068e:	881b      	ldrh	r3, [r3, #0]
 8000690:	2b01      	cmp	r3, #1
 8000692:	d105      	bne.n	80006a0 <main+0x60>
	  send2swarm_at_command ( rt_0_at_comm , rt_ok_answer , 2 ) ;
 8000694:	4969      	ldr	r1, [pc, #420]	; (800083c <main+0x1fc>)
 8000696:	4b6a      	ldr	r3, [pc, #424]	; (8000840 <main+0x200>)
 8000698:	2202      	movs	r2, #2
 800069a:	0018      	movs	r0, r3
 800069c:	f000 fada 	bl	8000c54 <send2swarm_at_command>
  if ( checklist == 2 )
 80006a0:	4b65      	ldr	r3, [pc, #404]	; (8000838 <main+0x1f8>)
 80006a2:	881b      	ldrh	r3, [r3, #0]
 80006a4:	2b02      	cmp	r3, #2
 80006a6:	d105      	bne.n	80006b4 <main+0x74>
	  send2swarm_at_command ( rt_q_rate_at_comm , rt_0_answer , 3 ) ; // Query RT rate
 80006a8:	4966      	ldr	r1, [pc, #408]	; (8000844 <main+0x204>)
 80006aa:	4b67      	ldr	r3, [pc, #412]	; (8000848 <main+0x208>)
 80006ac:	2203      	movs	r2, #3
 80006ae:	0018      	movs	r0, r3
 80006b0:	f000 fad0 	bl	8000c54 <send2swarm_at_command>
  if ( checklist == 3 )
 80006b4:	4b60      	ldr	r3, [pc, #384]	; (8000838 <main+0x1f8>)
 80006b6:	881b      	ldrh	r3, [r3, #0]
 80006b8:	2b03      	cmp	r3, #3
 80006ba:	d105      	bne.n	80006c8 <main+0x88>
	  send2swarm_at_command ( pw_0_at_comm , pw_ok_answer , 4 ) ;
 80006bc:	4963      	ldr	r1, [pc, #396]	; (800084c <main+0x20c>)
 80006be:	4b64      	ldr	r3, [pc, #400]	; (8000850 <main+0x210>)
 80006c0:	2204      	movs	r2, #4
 80006c2:	0018      	movs	r0, r3
 80006c4:	f000 fac6 	bl	8000c54 <send2swarm_at_command>
  if ( checklist == 4 )
 80006c8:	4b5b      	ldr	r3, [pc, #364]	; (8000838 <main+0x1f8>)
 80006ca:	881b      	ldrh	r3, [r3, #0]
 80006cc:	2b04      	cmp	r3, #4
 80006ce:	d105      	bne.n	80006dc <main+0x9c>
	  send2swarm_at_command ( pw_q_rate_at_comm , pw_0_answer , 5 ) ;
 80006d0:	4960      	ldr	r1, [pc, #384]	; (8000854 <main+0x214>)
 80006d2:	4b61      	ldr	r3, [pc, #388]	; (8000858 <main+0x218>)
 80006d4:	2205      	movs	r2, #5
 80006d6:	0018      	movs	r0, r3
 80006d8:	f000 fabc 	bl	8000c54 <send2swarm_at_command>
  if ( checklist == 5 )
 80006dc:	4b56      	ldr	r3, [pc, #344]	; (8000838 <main+0x1f8>)
 80006de:	881b      	ldrh	r3, [r3, #0]
 80006e0:	2b05      	cmp	r3, #5
 80006e2:	d105      	bne.n	80006f0 <main+0xb0>
	  send2swarm_at_command ( dt_0_at_comm , dt_ok_answer , 6 ) ;
 80006e4:	495d      	ldr	r1, [pc, #372]	; (800085c <main+0x21c>)
 80006e6:	4b5e      	ldr	r3, [pc, #376]	; (8000860 <main+0x220>)
 80006e8:	2206      	movs	r2, #6
 80006ea:	0018      	movs	r0, r3
 80006ec:	f000 fab2 	bl	8000c54 <send2swarm_at_command>
  if ( checklist == 6 )
 80006f0:	4b51      	ldr	r3, [pc, #324]	; (8000838 <main+0x1f8>)
 80006f2:	881b      	ldrh	r3, [r3, #0]
 80006f4:	2b06      	cmp	r3, #6
 80006f6:	d105      	bne.n	8000704 <main+0xc4>
	  send2swarm_at_command ( dt_q_rate_at_comm , dt_0_answer , 7 ) ;
 80006f8:	495a      	ldr	r1, [pc, #360]	; (8000864 <main+0x224>)
 80006fa:	4b5b      	ldr	r3, [pc, #364]	; (8000868 <main+0x228>)
 80006fc:	2207      	movs	r2, #7
 80006fe:	0018      	movs	r0, r3
 8000700:	f000 faa8 	bl	8000c54 <send2swarm_at_command>
  if ( checklist == 7 )
 8000704:	4b4c      	ldr	r3, [pc, #304]	; (8000838 <main+0x1f8>)
 8000706:	881b      	ldrh	r3, [r3, #0]
 8000708:	2b07      	cmp	r3, #7
 800070a:	d105      	bne.n	8000718 <main+0xd8>
	  send2swarm_at_command ( gs_0_at_comm , gs_ok_answer , 8 ) ;
 800070c:	4957      	ldr	r1, [pc, #348]	; (800086c <main+0x22c>)
 800070e:	4b58      	ldr	r3, [pc, #352]	; (8000870 <main+0x230>)
 8000710:	2208      	movs	r2, #8
 8000712:	0018      	movs	r0, r3
 8000714:	f000 fa9e 	bl	8000c54 <send2swarm_at_command>
  if ( checklist == 8 )
 8000718:	4b47      	ldr	r3, [pc, #284]	; (8000838 <main+0x1f8>)
 800071a:	881b      	ldrh	r3, [r3, #0]
 800071c:	2b08      	cmp	r3, #8
 800071e:	d105      	bne.n	800072c <main+0xec>
	  send2swarm_at_command ( gs_q_rate_at_comm , gs_0_answer , 9 ) ;
 8000720:	4954      	ldr	r1, [pc, #336]	; (8000874 <main+0x234>)
 8000722:	4b55      	ldr	r3, [pc, #340]	; (8000878 <main+0x238>)
 8000724:	2209      	movs	r2, #9
 8000726:	0018      	movs	r0, r3
 8000728:	f000 fa94 	bl	8000c54 <send2swarm_at_command>
  if ( checklist == 9 )
 800072c:	4b42      	ldr	r3, [pc, #264]	; (8000838 <main+0x1f8>)
 800072e:	881b      	ldrh	r3, [r3, #0]
 8000730:	2b09      	cmp	r3, #9
 8000732:	d105      	bne.n	8000740 <main+0x100>
	  send2swarm_at_command ( gj_0_at_comm , gj_ok_answer , 10 ) ;
 8000734:	4951      	ldr	r1, [pc, #324]	; (800087c <main+0x23c>)
 8000736:	4b52      	ldr	r3, [pc, #328]	; (8000880 <main+0x240>)
 8000738:	220a      	movs	r2, #10
 800073a:	0018      	movs	r0, r3
 800073c:	f000 fa8a 	bl	8000c54 <send2swarm_at_command>
  if ( checklist == 10 )
 8000740:	4b3d      	ldr	r3, [pc, #244]	; (8000838 <main+0x1f8>)
 8000742:	881b      	ldrh	r3, [r3, #0]
 8000744:	2b0a      	cmp	r3, #10
 8000746:	d105      	bne.n	8000754 <main+0x114>
	  send2swarm_at_command ( gj_q_rate_at_comm , gj_0_answer , 11 ) ;
 8000748:	494e      	ldr	r1, [pc, #312]	; (8000884 <main+0x244>)
 800074a:	4b4f      	ldr	r3, [pc, #316]	; (8000888 <main+0x248>)
 800074c:	220b      	movs	r2, #11
 800074e:	0018      	movs	r0, r3
 8000750:	f000 fa80 	bl	8000c54 <send2swarm_at_command>
  if ( checklist == 11 )
 8000754:	4b38      	ldr	r3, [pc, #224]	; (8000838 <main+0x1f8>)
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	2b0b      	cmp	r3, #11
 800075a:	d105      	bne.n	8000768 <main+0x128>
	  send2swarm_at_command ( gn_0_at_comm , gn_ok_answer , 12 ) ;
 800075c:	494b      	ldr	r1, [pc, #300]	; (800088c <main+0x24c>)
 800075e:	4b4c      	ldr	r3, [pc, #304]	; (8000890 <main+0x250>)
 8000760:	220c      	movs	r2, #12
 8000762:	0018      	movs	r0, r3
 8000764:	f000 fa76 	bl	8000c54 <send2swarm_at_command>
  if ( checklist == 12 )
 8000768:	4b33      	ldr	r3, [pc, #204]	; (8000838 <main+0x1f8>)
 800076a:	881b      	ldrh	r3, [r3, #0]
 800076c:	2b0c      	cmp	r3, #12
 800076e:	d105      	bne.n	800077c <main+0x13c>
	  send2swarm_at_command ( gn_q_rate_at_comm , gn_0_answer , 13 ) ;
 8000770:	4948      	ldr	r1, [pc, #288]	; (8000894 <main+0x254>)
 8000772:	4b49      	ldr	r3, [pc, #292]	; (8000898 <main+0x258>)
 8000774:	220d      	movs	r2, #13
 8000776:	0018      	movs	r0, r3
 8000778:	f000 fa6c 	bl	8000c54 <send2swarm_at_command>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if ( checklist == 13 )
 800077c:	4b2e      	ldr	r3, [pc, #184]	; (8000838 <main+0x1f8>)
 800077e:	881b      	ldrh	r3, [r3, #0]
 8000780:	2b0d      	cmp	r3, #13
 8000782:	d105      	bne.n	8000790 <main+0x150>
	  	  send2swarm_at_command ( pw_mostrecent_at_comm , pw_mostrecent_answer , 14 ) ;
 8000784:	4945      	ldr	r1, [pc, #276]	; (800089c <main+0x25c>)
 8000786:	4b46      	ldr	r3, [pc, #280]	; (80008a0 <main+0x260>)
 8000788:	220e      	movs	r2, #14
 800078a:	0018      	movs	r0, r3
 800078c:	f000 fa62 	bl	8000c54 <send2swarm_at_command>
	  if ( checklist == 14 )
 8000790:	4b29      	ldr	r3, [pc, #164]	; (8000838 <main+0x1f8>)
 8000792:	881b      	ldrh	r3, [r3, #0]
 8000794:	2b0e      	cmp	r3, #14
 8000796:	d105      	bne.n	80007a4 <main+0x164>
		  send2swarm_at_command ( gn_mostrecent_at_comm , gn_mostrecent_answer , 15 ) ;
 8000798:	4942      	ldr	r1, [pc, #264]	; (80008a4 <main+0x264>)
 800079a:	4b43      	ldr	r3, [pc, #268]	; (80008a8 <main+0x268>)
 800079c:	220f      	movs	r2, #15
 800079e:	0018      	movs	r0, r3
 80007a0:	f000 fa58 	bl	8000c54 <send2swarm_at_command>
	  if ( checklist == 15 )
 80007a4:	4b24      	ldr	r3, [pc, #144]	; (8000838 <main+0x1f8>)
 80007a6:	881b      	ldrh	r3, [r3, #0]
 80007a8:	2b0f      	cmp	r3, #15
 80007aa:	d105      	bne.n	80007b8 <main+0x178>
		  send2swarm_at_command ( mt_del_all_at_comm , mt_del_all_answer , 16 ) ;
 80007ac:	493f      	ldr	r1, [pc, #252]	; (80008ac <main+0x26c>)
 80007ae:	4b40      	ldr	r3, [pc, #256]	; (80008b0 <main+0x270>)
 80007b0:	2210      	movs	r2, #16
 80007b2:	0018      	movs	r0, r3
 80007b4:	f000 fa4e 	bl	8000c54 <send2swarm_at_command>
	  if ( checklist == 16 )
 80007b8:	4b1f      	ldr	r3, [pc, #124]	; (8000838 <main+0x1f8>)
 80007ba:	881b      	ldrh	r3, [r3, #0]
 80007bc:	2b10      	cmp	r3, #16
 80007be:	d120      	bne.n	8000802 <main+0x1c2>
	  {
		  td_payload_buff[0] = 0 ;
 80007c0:	4b3c      	ldr	r3, [pc, #240]	; (80008b4 <main+0x274>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	701a      	strb	r2, [r3, #0]
		  strcat ( td_payload_buff , pw_buff ) ;
 80007c6:	4a3c      	ldr	r2, [pc, #240]	; (80008b8 <main+0x278>)
 80007c8:	4b3a      	ldr	r3, [pc, #232]	; (80008b4 <main+0x274>)
 80007ca:	0011      	movs	r1, r2
 80007cc:	0018      	movs	r0, r3
 80007ce:	f004 fd41 	bl	8005254 <strcat>
		  strcat ( td_payload_buff , gn_buff ) ;
 80007d2:	4a3a      	ldr	r2, [pc, #232]	; (80008bc <main+0x27c>)
 80007d4:	4b37      	ldr	r3, [pc, #220]	; (80008b4 <main+0x274>)
 80007d6:	0011      	movs	r1, r2
 80007d8:	0018      	movs	r0, r3
 80007da:	f004 fd3b 	bl	8005254 <strcat>
		  sprintf ( td_at_comm , "$TD HD=300,\"%s\"" , td_payload_buff ) ;
 80007de:	4a35      	ldr	r2, [pc, #212]	; (80008b4 <main+0x274>)
 80007e0:	4937      	ldr	r1, [pc, #220]	; (80008c0 <main+0x280>)
 80007e2:	4b38      	ldr	r3, [pc, #224]	; (80008c4 <main+0x284>)
 80007e4:	0018      	movs	r0, r3
 80007e6:	f004 fceb 	bl	80051c0 <siprintf>
	  	  send2swarm_at_command ( td_at_comm , td_ok_answer , 17 ) ;
 80007ea:	4937      	ldr	r1, [pc, #220]	; (80008c8 <main+0x288>)
 80007ec:	4b35      	ldr	r3, [pc, #212]	; (80008c4 <main+0x284>)
 80007ee:	2211      	movs	r2, #17
 80007f0:	0018      	movs	r0, r3
 80007f2:	f000 fa2f 	bl	8000c54 <send2swarm_at_command>
	  	  pw_buff[0] = 0 ;
 80007f6:	4b30      	ldr	r3, [pc, #192]	; (80008b8 <main+0x278>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	701a      	strb	r2, [r3, #0]
	  	  gn_buff[0] = 0 ;
 80007fc:	4b2f      	ldr	r3, [pc, #188]	; (80008bc <main+0x27c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	701a      	strb	r2, [r3, #0]
	  }
	  if ( checklist == 17 )
 8000802:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <main+0x1f8>)
 8000804:	881b      	ldrh	r3, [r3, #0]
 8000806:	2b11      	cmp	r3, #17
 8000808:	d101      	bne.n	800080e <main+0x1ce>
	  {
		  __NOP ();
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	e000      	b.n	8000810 <main+0x1d0>
		  //HAL_Delay ( 310000) ; // 5min. i 10 sekund obejmujące 5 minut na wysłanie wiadomości
		  //send2swarm_at_command ( sl_3ks_at_comm , sl_ok_answer , 13 ) ; // Swarm sleep for 50 minutes
	  }
	  else
	  {
		  __NOP () ;
 800080e:	46c0      	nop			; (mov r8, r8)
		  //send2swarm_at_command ( sl_3c5ks_at_comm , sl_ok_answer , 13 ) ; // Swarm sleep for 50 minutes
	  }
	  checklist = 13 ;
 8000810:	4b09      	ldr	r3, [pc, #36]	; (8000838 <main+0x1f8>)
 8000812:	220d      	movs	r2, #13
 8000814:	801a      	strh	r2, [r3, #0]
	  HAL_Delay(3000); // docelowo zamienić na poniższy sleep
 8000816:	4b2d      	ldr	r3, [pc, #180]	; (80008cc <main+0x28c>)
 8000818:	0018      	movs	r0, r3
 800081a:	f000 fd99 	bl	8001350 <HAL_Delay>
	  if ( checklist == 13 )
 800081e:	e7ad      	b.n	800077c <main+0x13c>
 8000820:	200000b8 	.word	0x200000b8
 8000824:	00002710 	.word	0x00002710
 8000828:	20000200 	.word	0x20000200
 800082c:	20000104 	.word	0x20000104
 8000830:	080065b8 	.word	0x080065b8
 8000834:	0800653c 	.word	0x0800653c
 8000838:	200001f4 	.word	0x200001f4
 800083c:	080065c4 	.word	0x080065c4
 8000840:	08006540 	.word	0x08006540
 8000844:	080065d0 	.word	0x080065d0
 8000848:	08006548 	.word	0x08006548
 800084c:	080065dc 	.word	0x080065dc
 8000850:	08006550 	.word	0x08006550
 8000854:	080065e8 	.word	0x080065e8
 8000858:	08006558 	.word	0x08006558
 800085c:	080065fc 	.word	0x080065fc
 8000860:	08006568 	.word	0x08006568
 8000864:	08006608 	.word	0x08006608
 8000868:	08006570 	.word	0x08006570
 800086c:	08006614 	.word	0x08006614
 8000870:	08006578 	.word	0x08006578
 8000874:	08006620 	.word	0x08006620
 8000878:	08006580 	.word	0x08006580
 800087c:	0800662c 	.word	0x0800662c
 8000880:	08006588 	.word	0x08006588
 8000884:	08006638 	.word	0x08006638
 8000888:	08006590 	.word	0x08006590
 800088c:	08006644 	.word	0x08006644
 8000890:	08006598 	.word	0x08006598
 8000894:	08006650 	.word	0x08006650
 8000898:	080065a0 	.word	0x080065a0
 800089c:	080065f4 	.word	0x080065f4
 80008a0:	08006560 	.word	0x08006560
 80008a4:	0800665c 	.word	0x0800665c
 80008a8:	080065a8 	.word	0x080065a8
 80008ac:	08006664 	.word	0x08006664
 80008b0:	080065b0 	.word	0x080065b0
 80008b4:	2000041c 	.word	0x2000041c
 80008b8:	200003f4 	.word	0x200003f4
 80008bc:	200003fc 	.word	0x200003fc
 80008c0:	080064ec 	.word	0x080064ec
 80008c4:	20000444 	.word	0x20000444
 80008c8:	0800666c 	.word	0x0800666c
 80008cc:	00000bb8 	.word	0x00000bb8

080008d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d0:	b590      	push	{r4, r7, lr}
 80008d2:	b093      	sub	sp, #76	; 0x4c
 80008d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d6:	2410      	movs	r4, #16
 80008d8:	193b      	adds	r3, r7, r4
 80008da:	0018      	movs	r0, r3
 80008dc:	2338      	movs	r3, #56	; 0x38
 80008de:	001a      	movs	r2, r3
 80008e0:	2100      	movs	r1, #0
 80008e2:	f004 fc65 	bl	80051b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e6:	003b      	movs	r3, r7
 80008e8:	0018      	movs	r0, r3
 80008ea:	2310      	movs	r3, #16
 80008ec:	001a      	movs	r2, r3
 80008ee:	2100      	movs	r1, #0
 80008f0:	f004 fc5e 	bl	80051b0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008f4:	2380      	movs	r3, #128	; 0x80
 80008f6:	009b      	lsls	r3, r3, #2
 80008f8:	0018      	movs	r0, r3
 80008fa:	f001 fad9 	bl	8001eb0 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008fe:	f001 fac9 	bl	8001e94 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000902:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <SystemClock_Config+0xa8>)
 8000904:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000906:	4b1c      	ldr	r3, [pc, #112]	; (8000978 <SystemClock_Config+0xa8>)
 8000908:	2118      	movs	r1, #24
 800090a:	438a      	bics	r2, r1
 800090c:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800090e:	193b      	adds	r3, r7, r4
 8000910:	2206      	movs	r2, #6
 8000912:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000914:	193b      	adds	r3, r7, r4
 8000916:	2201      	movs	r2, #1
 8000918:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800091a:	193b      	adds	r3, r7, r4
 800091c:	2280      	movs	r2, #128	; 0x80
 800091e:	0052      	lsls	r2, r2, #1
 8000920:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000922:	193b      	adds	r3, r7, r4
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000928:	193b      	adds	r3, r7, r4
 800092a:	2240      	movs	r2, #64	; 0x40
 800092c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800092e:	193b      	adds	r3, r7, r4
 8000930:	2200      	movs	r2, #0
 8000932:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000934:	193b      	adds	r3, r7, r4
 8000936:	0018      	movs	r0, r3
 8000938:	f001 fb06 	bl	8001f48 <HAL_RCC_OscConfig>
 800093c:	1e03      	subs	r3, r0, #0
 800093e:	d001      	beq.n	8000944 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000940:	f000 faa2 	bl	8000e88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000944:	003b      	movs	r3, r7
 8000946:	2207      	movs	r2, #7
 8000948:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800094a:	003b      	movs	r3, r7
 800094c:	2200      	movs	r2, #0
 800094e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000950:	003b      	movs	r3, r7
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000956:	003b      	movs	r3, r7
 8000958:	2200      	movs	r2, #0
 800095a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800095c:	003b      	movs	r3, r7
 800095e:	2100      	movs	r1, #0
 8000960:	0018      	movs	r0, r3
 8000962:	f001 fe0b 	bl	800257c <HAL_RCC_ClockConfig>
 8000966:	1e03      	subs	r3, r0, #0
 8000968:	d001      	beq.n	800096e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800096a:	f000 fa8d 	bl	8000e88 <Error_Handler>
  }
}
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	46bd      	mov	sp, r7
 8000972:	b013      	add	sp, #76	; 0x4c
 8000974:	bd90      	pop	{r4, r7, pc}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	40021000 	.word	0x40021000

0800097c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b086      	sub	sp, #24
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	0018      	movs	r0, r3
 8000986:	2314      	movs	r3, #20
 8000988:	001a      	movs	r2, r3
 800098a:	2100      	movs	r1, #0
 800098c:	f004 fc10 	bl	80051b0 <memset>
  RTC_DateTypeDef sDate = {0};
 8000990:	003b      	movs	r3, r7
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000996:	4b32      	ldr	r3, [pc, #200]	; (8000a60 <MX_RTC_Init+0xe4>)
 8000998:	4a32      	ldr	r2, [pc, #200]	; (8000a64 <MX_RTC_Init+0xe8>)
 800099a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800099c:	4b30      	ldr	r3, [pc, #192]	; (8000a60 <MX_RTC_Init+0xe4>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80009a2:	4b2f      	ldr	r3, [pc, #188]	; (8000a60 <MX_RTC_Init+0xe4>)
 80009a4:	227f      	movs	r2, #127	; 0x7f
 80009a6:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80009a8:	4b2d      	ldr	r3, [pc, #180]	; (8000a60 <MX_RTC_Init+0xe4>)
 80009aa:	22ff      	movs	r2, #255	; 0xff
 80009ac:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009ae:	4b2c      	ldr	r3, [pc, #176]	; (8000a60 <MX_RTC_Init+0xe4>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80009b4:	4b2a      	ldr	r3, [pc, #168]	; (8000a60 <MX_RTC_Init+0xe4>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009ba:	4b29      	ldr	r3, [pc, #164]	; (8000a60 <MX_RTC_Init+0xe4>)
 80009bc:	2200      	movs	r2, #0
 80009be:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009c0:	4b27      	ldr	r3, [pc, #156]	; (8000a60 <MX_RTC_Init+0xe4>)
 80009c2:	2280      	movs	r2, #128	; 0x80
 80009c4:	05d2      	lsls	r2, r2, #23
 80009c6:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80009c8:	4b25      	ldr	r3, [pc, #148]	; (8000a60 <MX_RTC_Init+0xe4>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009ce:	4b24      	ldr	r3, [pc, #144]	; (8000a60 <MX_RTC_Init+0xe4>)
 80009d0:	0018      	movs	r0, r3
 80009d2:	f002 f8f7 	bl	8002bc4 <HAL_RTC_Init>
 80009d6:	1e03      	subs	r3, r0, #0
 80009d8:	d001      	beq.n	80009de <MX_RTC_Init+0x62>
  {
    Error_Handler();
 80009da:	f000 fa55 	bl	8000e88 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	2200      	movs	r2, #0
 80009e2:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80009e4:	1d3b      	adds	r3, r7, #4
 80009e6:	2200      	movs	r2, #0
 80009e8:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	2200      	movs	r2, #0
 80009ee:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	2200      	movs	r2, #0
 80009f4:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	2200      	movs	r2, #0
 80009fa:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009fc:	1d3b      	adds	r3, r7, #4
 80009fe:	2200      	movs	r2, #0
 8000a00:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000a02:	1d39      	adds	r1, r7, #4
 8000a04:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <MX_RTC_Init+0xe4>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f002 f97d 	bl	8002d08 <HAL_RTC_SetTime>
 8000a0e:	1e03      	subs	r3, r0, #0
 8000a10:	d001      	beq.n	8000a16 <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 8000a12:	f000 fa39 	bl	8000e88 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000a16:	003b      	movs	r3, r7
 8000a18:	2201      	movs	r2, #1
 8000a1a:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000a1c:	003b      	movs	r3, r7
 8000a1e:	2201      	movs	r2, #1
 8000a20:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000a22:	003b      	movs	r3, r7
 8000a24:	2201      	movs	r2, #1
 8000a26:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000a28:	003b      	movs	r3, r7
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000a2e:	0039      	movs	r1, r7
 8000a30:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <MX_RTC_Init+0xe4>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	0018      	movs	r0, r3
 8000a36:	f002 fa0f 	bl	8002e58 <HAL_RTC_SetDate>
 8000a3a:	1e03      	subs	r3, r0, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 8000a3e:	f000 fa23 	bl	8000e88 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 3600, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8000a42:	23e1      	movs	r3, #225	; 0xe1
 8000a44:	0119      	lsls	r1, r3, #4
 8000a46:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <MX_RTC_Init+0xe4>)
 8000a48:	2204      	movs	r2, #4
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f002 fb6c 	bl	8003128 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000a50:	1e03      	subs	r3, r0, #0
 8000a52:	d001      	beq.n	8000a58 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8000a54:	f000 fa18 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a58:	46c0      	nop			; (mov r8, r8)
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	b006      	add	sp, #24
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	2000008c 	.word	0x2000008c
 8000a64:	40002800 	.word	0x40002800

08000a68 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000a6c:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <MX_TIM14_Init+0x40>)
 8000a6e:	4a0f      	ldr	r2, [pc, #60]	; (8000aac <MX_TIM14_Init+0x44>)
 8000a70:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16000-1;
 8000a72:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <MX_TIM14_Init+0x40>)
 8000a74:	4a0e      	ldr	r2, [pc, #56]	; (8000ab0 <MX_TIM14_Init+0x48>)
 8000a76:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a78:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <MX_TIM14_Init+0x40>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2000-1;
 8000a7e:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <MX_TIM14_Init+0x40>)
 8000a80:	4a0c      	ldr	r2, [pc, #48]	; (8000ab4 <MX_TIM14_Init+0x4c>)
 8000a82:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a84:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <MX_TIM14_Init+0x40>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a8a:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <MX_TIM14_Init+0x40>)
 8000a8c:	2280      	movs	r2, #128	; 0x80
 8000a8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000a90:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <MX_TIM14_Init+0x40>)
 8000a92:	0018      	movs	r0, r3
 8000a94:	f002 fc08 	bl	80032a8 <HAL_TIM_Base_Init>
 8000a98:	1e03      	subs	r3, r0, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000a9c:	f000 f9f4 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000aa0:	46c0      	nop			; (mov r8, r8)
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	200000b8 	.word	0x200000b8
 8000aac:	40002000 	.word	0x40002000
 8000ab0:	00003e7f 	.word	0x00003e7f
 8000ab4:	000007cf 	.word	0x000007cf

08000ab8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000abc:	4b23      	ldr	r3, [pc, #140]	; (8000b4c <MX_USART1_UART_Init+0x94>)
 8000abe:	4a24      	ldr	r2, [pc, #144]	; (8000b50 <MX_USART1_UART_Init+0x98>)
 8000ac0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ac2:	4b22      	ldr	r3, [pc, #136]	; (8000b4c <MX_USART1_UART_Init+0x94>)
 8000ac4:	22e1      	movs	r2, #225	; 0xe1
 8000ac6:	0252      	lsls	r2, r2, #9
 8000ac8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aca:	4b20      	ldr	r3, [pc, #128]	; (8000b4c <MX_USART1_UART_Init+0x94>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ad0:	4b1e      	ldr	r3, [pc, #120]	; (8000b4c <MX_USART1_UART_Init+0x94>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ad6:	4b1d      	ldr	r3, [pc, #116]	; (8000b4c <MX_USART1_UART_Init+0x94>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000adc:	4b1b      	ldr	r3, [pc, #108]	; (8000b4c <MX_USART1_UART_Init+0x94>)
 8000ade:	220c      	movs	r2, #12
 8000ae0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae2:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <MX_USART1_UART_Init+0x94>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae8:	4b18      	ldr	r3, [pc, #96]	; (8000b4c <MX_USART1_UART_Init+0x94>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aee:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <MX_USART1_UART_Init+0x94>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000af4:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <MX_USART1_UART_Init+0x94>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000afa:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <MX_USART1_UART_Init+0x94>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b00:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <MX_USART1_UART_Init+0x94>)
 8000b02:	0018      	movs	r0, r3
 8000b04:	f002 fe8a 	bl	800381c <HAL_UART_Init>
 8000b08:	1e03      	subs	r3, r0, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b0c:	f000 f9bc 	bl	8000e88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b10:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <MX_USART1_UART_Init+0x94>)
 8000b12:	2100      	movs	r1, #0
 8000b14:	0018      	movs	r0, r3
 8000b16:	f004 f9d9 	bl	8004ecc <HAL_UARTEx_SetTxFifoThreshold>
 8000b1a:	1e03      	subs	r3, r0, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b1e:	f000 f9b3 	bl	8000e88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b22:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <MX_USART1_UART_Init+0x94>)
 8000b24:	2100      	movs	r1, #0
 8000b26:	0018      	movs	r0, r3
 8000b28:	f004 fa10 	bl	8004f4c <HAL_UARTEx_SetRxFifoThreshold>
 8000b2c:	1e03      	subs	r3, r0, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b30:	f000 f9aa 	bl	8000e88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <MX_USART1_UART_Init+0x94>)
 8000b36:	0018      	movs	r0, r3
 8000b38:	f004 f98e 	bl	8004e58 <HAL_UARTEx_DisableFifoMode>
 8000b3c:	1e03      	subs	r3, r0, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b40:	f000 f9a2 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b44:	46c0      	nop			; (mov r8, r8)
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	20000104 	.word	0x20000104
 8000b50:	40013800 	.word	0x40013800

08000b54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <MX_DMA_Init+0x38>)
 8000b5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <MX_DMA_Init+0x38>)
 8000b60:	2101      	movs	r1, #1
 8000b62:	430a      	orrs	r2, r1
 8000b64:	639a      	str	r2, [r3, #56]	; 0x38
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <MX_DMA_Init+0x38>)
 8000b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2100      	movs	r1, #0
 8000b76:	2009      	movs	r0, #9
 8000b78:	f000 fcba 	bl	80014f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b7c:	2009      	movs	r0, #9
 8000b7e:	f000 fccc 	bl	800151a <HAL_NVIC_EnableIRQ>

}
 8000b82:	46c0      	nop			; (mov r8, r8)
 8000b84:	46bd      	mov	sp, r7
 8000b86:	b002      	add	sp, #8
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	40021000 	.word	0x40021000

08000b90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b90:	b590      	push	{r4, r7, lr}
 8000b92:	b089      	sub	sp, #36	; 0x24
 8000b94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b96:	240c      	movs	r4, #12
 8000b98:	193b      	adds	r3, r7, r4
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	2314      	movs	r3, #20
 8000b9e:	001a      	movs	r2, r3
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	f004 fb05 	bl	80051b0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba6:	4b1a      	ldr	r3, [pc, #104]	; (8000c10 <MX_GPIO_Init+0x80>)
 8000ba8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000baa:	4b19      	ldr	r3, [pc, #100]	; (8000c10 <MX_GPIO_Init+0x80>)
 8000bac:	2104      	movs	r1, #4
 8000bae:	430a      	orrs	r2, r1
 8000bb0:	635a      	str	r2, [r3, #52]	; 0x34
 8000bb2:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <MX_GPIO_Init+0x80>)
 8000bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bb6:	2204      	movs	r2, #4
 8000bb8:	4013      	ands	r3, r2
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <MX_GPIO_Init+0x80>)
 8000bc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bc2:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <MX_GPIO_Init+0x80>)
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	635a      	str	r2, [r3, #52]	; 0x34
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <MX_GPIO_Init+0x80>)
 8000bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bce:	2201      	movs	r2, #1
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_RESET);
 8000bd6:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <MX_GPIO_Init+0x84>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2140      	movs	r1, #64	; 0x40
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f001 f93b 	bl	8001e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GREEN_Pin */
  GPIO_InitStruct.Pin = GREEN_Pin;
 8000be2:	0021      	movs	r1, r4
 8000be4:	187b      	adds	r3, r7, r1
 8000be6:	2240      	movs	r2, #64	; 0x40
 8000be8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bea:	187b      	adds	r3, r7, r1
 8000bec:	2201      	movs	r2, #1
 8000bee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	187b      	adds	r3, r7, r1
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	187b      	adds	r3, r7, r1
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GREEN_GPIO_Port, &GPIO_InitStruct);
 8000bfc:	187b      	adds	r3, r7, r1
 8000bfe:	4a05      	ldr	r2, [pc, #20]	; (8000c14 <MX_GPIO_Init+0x84>)
 8000c00:	0019      	movs	r1, r3
 8000c02:	0010      	movs	r0, r2
 8000c04:	f000 ffc4 	bl	8001b90 <HAL_GPIO_Init>

}
 8000c08:	46c0      	nop			; (mov r8, r8)
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	b009      	add	sp, #36	; 0x24
 8000c0e:	bd90      	pop	{r4, r7, pc}
 8000c10:	40021000 	.word	0x40021000
 8000c14:	50000800 	.word	0x50000800

08000c18 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback ( UART_HandleTypeDef *huart , uint16_t Size )
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	000a      	movs	r2, r1
 8000c22:	1cbb      	adds	r3, r7, #2
 8000c24:	801a      	strh	r2, [r3, #0]
    if ( huart->Instance == USART1 )
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a07      	ldr	r2, [pc, #28]	; (8000c48 <HAL_UARTEx_RxEventCallback+0x30>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d106      	bne.n	8000c3e <HAL_UARTEx_RxEventCallback+0x26>
    	HAL_UARTEx_ReceiveToIdle_DMA ( &huart1 , rx_buff , sizeof ( rx_buff ) ) ;
 8000c30:	23fa      	movs	r3, #250	; 0xfa
 8000c32:	005a      	lsls	r2, r3, #1
 8000c34:	4905      	ldr	r1, [pc, #20]	; (8000c4c <HAL_UARTEx_RxEventCallback+0x34>)
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_UARTEx_RxEventCallback+0x38>)
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f004 f9c9 	bl	8004fd0 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	46bd      	mov	sp, r7
 8000c42:	b002      	add	sp, #8
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	40013800 	.word	0x40013800
 8000c4c:	20000200 	.word	0x20000200
 8000c50:	20000104 	.word	0x20000104

08000c54 <send2swarm_at_command>:

void send2swarm_at_command ( const char* at_command , const char* answer , uint16_t step )
{
 8000c54:	b5b0      	push	{r4, r5, r7, lr}
 8000c56:	b0ac      	sub	sp, #176	; 0xb0
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	1dbb      	adds	r3, r7, #6
 8000c60:	801a      	strh	r2, [r3, #0]
	uint32_t temp_tickstart = HAL_GetTick () ; //temp
 8000c62:	f000 fb6b 	bl	800133c <HAL_GetTick>
 8000c66:	0003      	movs	r3, r0
 8000c68:	22ac      	movs	r2, #172	; 0xac
 8000c6a:	18ba      	adds	r2, r7, r2
 8000c6c:	6013      	str	r3, [r2, #0]
	uint8_t cs = nmea_checksum ( at_command , strlen ( at_command ) ) ;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	0018      	movs	r0, r3
 8000c72:	f7ff fa47 	bl	8000104 <strlen>
 8000c76:	0002      	movs	r2, r0
 8000c78:	25ab      	movs	r5, #171	; 0xab
 8000c7a:	197c      	adds	r4, r7, r5
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	0011      	movs	r1, r2
 8000c80:	0018      	movs	r0, r3
 8000c82:	f000 f8b5 	bl	8000df0 <nmea_checksum>
 8000c86:	0003      	movs	r3, r0
 8000c88:	7023      	strb	r3, [r4, #0]
	char uart_tx_buff[150] ;

	sprintf ( (char*) uart_tx_buff , "%s*%02x\n" , at_command , cs ) ;
 8000c8a:	197b      	adds	r3, r7, r5
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	4926      	ldr	r1, [pc, #152]	; (8000d2c <send2swarm_at_command+0xd8>)
 8000c92:	2414      	movs	r4, #20
 8000c94:	1938      	adds	r0, r7, r4
 8000c96:	f004 fa93 	bl	80051c0 <siprintf>
	uart_status = HAL_UART_Transmit ( &huart1 , (const uint8_t *) uart_tx_buff ,  strlen ( (char*) uart_tx_buff ) , UART_TX_TIMEOUT ) ;
 8000c9a:	193b      	adds	r3, r7, r4
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	f7ff fa31 	bl	8000104 <strlen>
 8000ca2:	0003      	movs	r3, r0
 8000ca4:	b29a      	uxth	r2, r3
 8000ca6:	1939      	adds	r1, r7, r4
 8000ca8:	4821      	ldr	r0, [pc, #132]	; (8000d30 <send2swarm_at_command+0xdc>)
 8000caa:	2364      	movs	r3, #100	; 0x64
 8000cac:	f002 fe0c 	bl	80038c8 <HAL_UART_Transmit>
 8000cb0:	0003      	movs	r3, r0
 8000cb2:	001a      	movs	r2, r3
 8000cb4:	4b1f      	ldr	r3, [pc, #124]	; (8000d34 <send2swarm_at_command+0xe0>)
 8000cb6:	701a      	strb	r2, [r3, #0]
	waiting_for_answer = 1 ;
 8000cb8:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <send2swarm_at_command+0xe4>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &htim14 ) ;
 8000cbe:	4b1f      	ldr	r3, [pc, #124]	; (8000d3c <send2swarm_at_command+0xe8>)
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f002 fb49 	bl	8003358 <HAL_TIM_Base_Start_IT>
	while ( waiting_for_answer )
 8000cc6:	e010      	b.n	8000cea <send2swarm_at_command+0x96>
	{
		if ( strncmp ( (char*) rx_buff , answer , strlen ( answer ) ) == 0 )
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f7ff fa1a 	bl	8000104 <strlen>
 8000cd0:	0002      	movs	r2, r0
 8000cd2:	68b9      	ldr	r1, [r7, #8]
 8000cd4:	4b1a      	ldr	r3, [pc, #104]	; (8000d40 <send2swarm_at_command+0xec>)
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f004 fac9 	bl	800526e <strncmp>
 8000cdc:	1e03      	subs	r3, r0, #0
 8000cde:	d104      	bne.n	8000cea <send2swarm_at_command+0x96>
		{
			checklist = step ;
 8000ce0:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <send2swarm_at_command+0xf0>)
 8000ce2:	1dba      	adds	r2, r7, #6
 8000ce4:	8812      	ldrh	r2, [r2, #0]
 8000ce6:	801a      	strh	r2, [r3, #0]
			break ;
 8000ce8:	e003      	b.n	8000cf2 <send2swarm_at_command+0x9e>
	while ( waiting_for_answer )
 8000cea:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <send2swarm_at_command+0xe4>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d1ea      	bne.n	8000cc8 <send2swarm_at_command+0x74>
		}
	}
	if ( checklist == 14 )
 8000cf2:	4b14      	ldr	r3, [pc, #80]	; (8000d44 <send2swarm_at_command+0xf0>)
 8000cf4:	881b      	ldrh	r3, [r3, #0]
 8000cf6:	2b0e      	cmp	r3, #14
 8000cf8:	d101      	bne.n	8000cfe <send2swarm_at_command+0xaa>
		pw2payload () ;
 8000cfa:	f000 f827 	bl	8000d4c <pw2payload>
	if ( checklist == 15 )
 8000cfe:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <send2swarm_at_command+0xf0>)
 8000d00:	881b      	ldrh	r3, [r3, #0]
 8000d02:	2b0f      	cmp	r3, #15
 8000d04:	d101      	bne.n	8000d0a <send2swarm_at_command+0xb6>
		gn2payload () ;
 8000d06:	f000 f841 	bl	8000d8c <gn2payload>
	rx_buff[0] = 0 ;
 8000d0a:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <send2swarm_at_command+0xec>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	701a      	strb	r2, [r3, #0]
	temp_tick = HAL_GetTick () - temp_tickstart ;
 8000d10:	f000 fb14 	bl	800133c <HAL_GetTick>
 8000d14:	0002      	movs	r2, r0
 8000d16:	23ac      	movs	r3, #172	; 0xac
 8000d18:	18fb      	adds	r3, r7, r3
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	1ad2      	subs	r2, r2, r3
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <send2swarm_at_command+0xf4>)
 8000d20:	601a      	str	r2, [r3, #0]
}
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	46bd      	mov	sp, r7
 8000d26:	b02c      	add	sp, #176	; 0xb0
 8000d28:	bdb0      	pop	{r4, r5, r7, pc}
 8000d2a:	46c0      	nop			; (mov r8, r8)
 8000d2c:	080064fc 	.word	0x080064fc
 8000d30:	20000104 	.word	0x20000104
 8000d34:	200001fc 	.word	0x200001fc
 8000d38:	200001f6 	.word	0x200001f6
 8000d3c:	200000b8 	.word	0x200000b8
 8000d40:	20000200 	.word	0x20000200
 8000d44:	200001f4 	.word	0x200001f4
 8000d48:	200001f8 	.word	0x200001f8

08000d4c <pw2payload>:
void pw2payload ()
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
	char comm[6] ;
	if ( strlen ( (char *) rx_buff ) > 12 ) // 12 to odpowiednik $PW 3.30300
 8000d52:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <pw2payload+0x34>)
 8000d54:	0018      	movs	r0, r3
 8000d56:	f7ff f9d5 	bl	8000104 <strlen>
 8000d5a:	0003      	movs	r3, r0
 8000d5c:	2b0c      	cmp	r3, #12
 8000d5e:	d90b      	bls.n	8000d78 <pw2payload+0x2c>
	{
		sscanf ( (const char *) rx_buff , "%[$A-Z] %4[0-9.]," , comm , pw_buff ) ;
 8000d60:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <pw2payload+0x38>)
 8000d62:	003a      	movs	r2, r7
 8000d64:	4908      	ldr	r1, [pc, #32]	; (8000d88 <pw2payload+0x3c>)
 8000d66:	4806      	ldr	r0, [pc, #24]	; (8000d80 <pw2payload+0x34>)
 8000d68:	f004 fa4a 	bl	8005200 <siscanf>
		pw_buff[4] = 59 ; // ";"
 8000d6c:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <pw2payload+0x38>)
 8000d6e:	223b      	movs	r2, #59	; 0x3b
 8000d70:	711a      	strb	r2, [r3, #4]
		pw_buff[5] = 0 ; // ";"
 8000d72:	4b04      	ldr	r3, [pc, #16]	; (8000d84 <pw2payload+0x38>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	715a      	strb	r2, [r3, #5]
	}
}
 8000d78:	46c0      	nop			; (mov r8, r8)
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	b002      	add	sp, #8
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000200 	.word	0x20000200
 8000d84:	200003f4 	.word	0x200003f4
 8000d88:	08006508 	.word	0x08006508

08000d8c <gn2payload>:
void gn2payload ()
{
 8000d8c:	b590      	push	{r4, r7, lr}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
	char e[2] = ";" ;
 8000d92:	240c      	movs	r4, #12
 8000d94:	193b      	adds	r3, r7, r4
 8000d96:	223b      	movs	r2, #59	; 0x3b
 8000d98:	801a      	strh	r2, [r3, #0]
	char comm[6] ;

	if ( strncmp ( (const char *) rx_buff  , gn_mostrecent_answer , 4 ) == 0 )
 8000d9a:	4911      	ldr	r1, [pc, #68]	; (8000de0 <gn2payload+0x54>)
 8000d9c:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <gn2payload+0x58>)
 8000d9e:	2204      	movs	r2, #4
 8000da0:	0018      	movs	r0, r3
 8000da2:	f004 fa64 	bl	800526e <strncmp>
 8000da6:	1e03      	subs	r3, r0, #0
 8000da8:	d112      	bne.n	8000dd0 <gn2payload+0x44>
		if ( strlen ( (char *) rx_buff ) > 12 )
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <gn2payload+0x58>)
 8000dac:	0018      	movs	r0, r3
 8000dae:	f7ff f9a9 	bl	8000104 <strlen>
 8000db2:	0003      	movs	r3, r0
 8000db4:	2b0c      	cmp	r3, #12
 8000db6:	d90b      	bls.n	8000dd0 <gn2payload+0x44>
		{
			//sscanf ( (const char *) rx_buff , "%[$A-Z] %[0-9,.]*" , comm , gn_buff ) ;
			sscanf ( (const char *) rx_buff , "%[$A-Z] %[0-9.,]*" , comm , gn_buff ) ;
 8000db8:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <gn2payload+0x5c>)
 8000dba:	1d3a      	adds	r2, r7, #4
 8000dbc:	490b      	ldr	r1, [pc, #44]	; (8000dec <gn2payload+0x60>)
 8000dbe:	4809      	ldr	r0, [pc, #36]	; (8000de4 <gn2payload+0x58>)
 8000dc0:	f004 fa1e 	bl	8005200 <siscanf>
			strcat ( gn_buff , e ) ;
 8000dc4:	193a      	adds	r2, r7, r4
 8000dc6:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <gn2payload+0x5c>)
 8000dc8:	0011      	movs	r1, r2
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f004 fa42 	bl	8005254 <strcat>
		}
	gn_buff[0] = 0 ;
 8000dd0:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <gn2payload+0x5c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	701a      	strb	r2, [r3, #0]
			}
		}
	gn_buff[i-4] = 59 ;
	gn_buff[i-4+1] = 0 ;
*/
}
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	b005      	add	sp, #20
 8000ddc:	bd90      	pop	{r4, r7, pc}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	0800665c 	.word	0x0800665c
 8000de4:	20000200 	.word	0x20000200
 8000de8:	200003fc 	.word	0x200003fc
 8000dec:	0800651c 	.word	0x0800651c

08000df0 <nmea_checksum>:
uint8_t nmea_checksum ( const char *sz , size_t len )
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
	size_t i = 0 ;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
	uint8_t cs ;
	if ( sz [0] == '$' )
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2b24      	cmp	r3, #36	; 0x24
 8000e04:	d102      	bne.n	8000e0c <nmea_checksum+0x1c>
		i++ ;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	60fb      	str	r3, [r7, #12]
	for ( cs = 0 ; ( i < len ) && sz [i] ; i++ )
 8000e0c:	230b      	movs	r3, #11
 8000e0e:	18fb      	adds	r3, r7, r3
 8000e10:	2200      	movs	r2, #0
 8000e12:	701a      	strb	r2, [r3, #0]
 8000e14:	e00c      	b.n	8000e30 <nmea_checksum+0x40>
		cs ^= ( (uint8_t) sz [i] ) ;
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	18d3      	adds	r3, r2, r3
 8000e1c:	7819      	ldrb	r1, [r3, #0]
 8000e1e:	220b      	movs	r2, #11
 8000e20:	18bb      	adds	r3, r7, r2
 8000e22:	18ba      	adds	r2, r7, r2
 8000e24:	7812      	ldrb	r2, [r2, #0]
 8000e26:	404a      	eors	r2, r1
 8000e28:	701a      	strb	r2, [r3, #0]
	for ( cs = 0 ; ( i < len ) && sz [i] ; i++ )
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fa      	ldr	r2, [r7, #12]
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d205      	bcs.n	8000e44 <nmea_checksum+0x54>
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	18d3      	adds	r3, r2, r3
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d1e8      	bne.n	8000e16 <nmea_checksum+0x26>
	return cs;
 8000e44:	230b      	movs	r3, #11
 8000e46:	18fb      	adds	r3, r7, r3
 8000e48:	781b      	ldrb	r3, [r3, #0]
}
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	b004      	add	sp, #16
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM14 )
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a06      	ldr	r2, [pc, #24]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d106      	bne.n	8000e74 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		waiting_for_answer = 0 ;
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT ( &htim14 ) ;
 8000e6c:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f002 fac6 	bl	8003400 <HAL_TIM_Base_Stop_IT>
	}
}
 8000e74:	46c0      	nop			; (mov r8, r8)
 8000e76:	46bd      	mov	sp, r7
 8000e78:	b002      	add	sp, #8
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40002000 	.word	0x40002000
 8000e80:	200001f6 	.word	0x200001f6
 8000e84:	200000b8 	.word	0x200000b8

08000e88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e8c:	b672      	cpsid	i
}
 8000e8e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <Error_Handler+0x8>
	...

08000e94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <HAL_MspInit+0x44>)
 8000e9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <HAL_MspInit+0x44>)
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	430a      	orrs	r2, r1
 8000ea4:	641a      	str	r2, [r3, #64]	; 0x40
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <HAL_MspInit+0x44>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	2201      	movs	r2, #1
 8000eac:	4013      	ands	r3, r2
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <HAL_MspInit+0x44>)
 8000eb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000eb6:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <HAL_MspInit+0x44>)
 8000eb8:	2180      	movs	r1, #128	; 0x80
 8000eba:	0549      	lsls	r1, r1, #21
 8000ebc:	430a      	orrs	r2, r1
 8000ebe:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ec0:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <HAL_MspInit+0x44>)
 8000ec2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ec4:	2380      	movs	r3, #128	; 0x80
 8000ec6:	055b      	lsls	r3, r3, #21
 8000ec8:	4013      	ands	r3, r2
 8000eca:	603b      	str	r3, [r7, #0]
 8000ecc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	b002      	add	sp, #8
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	40021000 	.word	0x40021000

08000edc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000edc:	b590      	push	{r4, r7, lr}
 8000ede:	b08f      	sub	sp, #60	; 0x3c
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ee4:	2410      	movs	r4, #16
 8000ee6:	193b      	adds	r3, r7, r4
 8000ee8:	0018      	movs	r0, r3
 8000eea:	2328      	movs	r3, #40	; 0x28
 8000eec:	001a      	movs	r2, r3
 8000eee:	2100      	movs	r1, #0
 8000ef0:	f004 f95e 	bl	80051b0 <memset>
  if(hrtc->Instance==RTC)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a19      	ldr	r2, [pc, #100]	; (8000f60 <HAL_RTC_MspInit+0x84>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d12c      	bne.n	8000f58 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000efe:	193b      	adds	r3, r7, r4
 8000f00:	2280      	movs	r2, #128	; 0x80
 8000f02:	0292      	lsls	r2, r2, #10
 8000f04:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000f06:	193b      	adds	r3, r7, r4
 8000f08:	2280      	movs	r2, #128	; 0x80
 8000f0a:	0052      	lsls	r2, r2, #1
 8000f0c:	625a      	str	r2, [r3, #36]	; 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f0e:	193b      	adds	r3, r7, r4
 8000f10:	0018      	movs	r0, r3
 8000f12:	f001 fcdd 	bl	80028d0 <HAL_RCCEx_PeriphCLKConfig>
 8000f16:	1e03      	subs	r3, r0, #0
 8000f18:	d001      	beq.n	8000f1e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000f1a:	f7ff ffb5 	bl	8000e88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f1e:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <HAL_RTC_MspInit+0x88>)
 8000f20:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000f22:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <HAL_RTC_MspInit+0x88>)
 8000f24:	2180      	movs	r1, #128	; 0x80
 8000f26:	0209      	lsls	r1, r1, #8
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000f2c:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <HAL_RTC_MspInit+0x88>)
 8000f2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <HAL_RTC_MspInit+0x88>)
 8000f32:	2180      	movs	r1, #128	; 0x80
 8000f34:	00c9      	lsls	r1, r1, #3
 8000f36:	430a      	orrs	r2, r1
 8000f38:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <HAL_RTC_MspInit+0x88>)
 8000f3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f3e:	2380      	movs	r3, #128	; 0x80
 8000f40:	00db      	lsls	r3, r3, #3
 8000f42:	4013      	ands	r3, r2
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	2002      	movs	r0, #2
 8000f4e:	f000 facf 	bl	80014f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8000f52:	2002      	movs	r0, #2
 8000f54:	f000 fae1 	bl	800151a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000f58:	46c0      	nop			; (mov r8, r8)
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	b00f      	add	sp, #60	; 0x3c
 8000f5e:	bd90      	pop	{r4, r7, pc}
 8000f60:	40002800 	.word	0x40002800
 8000f64:	40021000 	.word	0x40021000

08000f68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a0e      	ldr	r2, [pc, #56]	; (8000fb0 <HAL_TIM_Base_MspInit+0x48>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d115      	bne.n	8000fa6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <HAL_TIM_Base_MspInit+0x4c>)
 8000f7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f7e:	4b0d      	ldr	r3, [pc, #52]	; (8000fb4 <HAL_TIM_Base_MspInit+0x4c>)
 8000f80:	2180      	movs	r1, #128	; 0x80
 8000f82:	0209      	lsls	r1, r1, #8
 8000f84:	430a      	orrs	r2, r1
 8000f86:	641a      	str	r2, [r3, #64]	; 0x40
 8000f88:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <HAL_TIM_Base_MspInit+0x4c>)
 8000f8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f8c:	2380      	movs	r3, #128	; 0x80
 8000f8e:	021b      	lsls	r3, r3, #8
 8000f90:	4013      	ands	r3, r2
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2100      	movs	r1, #0
 8000f9a:	2013      	movs	r0, #19
 8000f9c:	f000 faa8 	bl	80014f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000fa0:	2013      	movs	r0, #19
 8000fa2:	f000 faba 	bl	800151a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000fa6:	46c0      	nop			; (mov r8, r8)
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	b004      	add	sp, #16
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	40002000 	.word	0x40002000
 8000fb4:	40021000 	.word	0x40021000

08000fb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fb8:	b590      	push	{r4, r7, lr}
 8000fba:	b095      	sub	sp, #84	; 0x54
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc0:	233c      	movs	r3, #60	; 0x3c
 8000fc2:	18fb      	adds	r3, r7, r3
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	2314      	movs	r3, #20
 8000fc8:	001a      	movs	r2, r3
 8000fca:	2100      	movs	r1, #0
 8000fcc:	f004 f8f0 	bl	80051b0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fd0:	2414      	movs	r4, #20
 8000fd2:	193b      	adds	r3, r7, r4
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	2328      	movs	r3, #40	; 0x28
 8000fd8:	001a      	movs	r2, r3
 8000fda:	2100      	movs	r1, #0
 8000fdc:	f004 f8e8 	bl	80051b0 <memset>
  if(huart->Instance==USART1)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a3c      	ldr	r2, [pc, #240]	; (80010d8 <HAL_UART_MspInit+0x120>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d171      	bne.n	80010ce <HAL_UART_MspInit+0x116>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000fea:	193b      	adds	r3, r7, r4
 8000fec:	2201      	movs	r2, #1
 8000fee:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000ff0:	193b      	adds	r3, r7, r4
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ff6:	193b      	adds	r3, r7, r4
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	f001 fc69 	bl	80028d0 <HAL_RCCEx_PeriphCLKConfig>
 8000ffe:	1e03      	subs	r3, r0, #0
 8001000:	d001      	beq.n	8001006 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001002:	f7ff ff41 	bl	8000e88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001006:	4b35      	ldr	r3, [pc, #212]	; (80010dc <HAL_UART_MspInit+0x124>)
 8001008:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800100a:	4b34      	ldr	r3, [pc, #208]	; (80010dc <HAL_UART_MspInit+0x124>)
 800100c:	2180      	movs	r1, #128	; 0x80
 800100e:	01c9      	lsls	r1, r1, #7
 8001010:	430a      	orrs	r2, r1
 8001012:	641a      	str	r2, [r3, #64]	; 0x40
 8001014:	4b31      	ldr	r3, [pc, #196]	; (80010dc <HAL_UART_MspInit+0x124>)
 8001016:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001018:	2380      	movs	r3, #128	; 0x80
 800101a:	01db      	lsls	r3, r3, #7
 800101c:	4013      	ands	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
 8001020:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001022:	4b2e      	ldr	r3, [pc, #184]	; (80010dc <HAL_UART_MspInit+0x124>)
 8001024:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001026:	4b2d      	ldr	r3, [pc, #180]	; (80010dc <HAL_UART_MspInit+0x124>)
 8001028:	2101      	movs	r1, #1
 800102a:	430a      	orrs	r2, r1
 800102c:	635a      	str	r2, [r3, #52]	; 0x34
 800102e:	4b2b      	ldr	r3, [pc, #172]	; (80010dc <HAL_UART_MspInit+0x124>)
 8001030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001032:	2201      	movs	r2, #1
 8001034:	4013      	ands	r3, r2
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800103a:	213c      	movs	r1, #60	; 0x3c
 800103c:	187b      	adds	r3, r7, r1
 800103e:	22c0      	movs	r2, #192	; 0xc0
 8001040:	00d2      	lsls	r2, r2, #3
 8001042:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001044:	187b      	adds	r3, r7, r1
 8001046:	2202      	movs	r2, #2
 8001048:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	187b      	adds	r3, r7, r1
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001050:	187b      	adds	r3, r7, r1
 8001052:	2200      	movs	r2, #0
 8001054:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001056:	187b      	adds	r3, r7, r1
 8001058:	2201      	movs	r2, #1
 800105a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105c:	187a      	adds	r2, r7, r1
 800105e:	23a0      	movs	r3, #160	; 0xa0
 8001060:	05db      	lsls	r3, r3, #23
 8001062:	0011      	movs	r1, r2
 8001064:	0018      	movs	r0, r3
 8001066:	f000 fd93 	bl	8001b90 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 800106a:	4b1d      	ldr	r3, [pc, #116]	; (80010e0 <HAL_UART_MspInit+0x128>)
 800106c:	4a1d      	ldr	r2, [pc, #116]	; (80010e4 <HAL_UART_MspInit+0x12c>)
 800106e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001070:	4b1b      	ldr	r3, [pc, #108]	; (80010e0 <HAL_UART_MspInit+0x128>)
 8001072:	2232      	movs	r2, #50	; 0x32
 8001074:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001076:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <HAL_UART_MspInit+0x128>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800107c:	4b18      	ldr	r3, [pc, #96]	; (80010e0 <HAL_UART_MspInit+0x128>)
 800107e:	2200      	movs	r2, #0
 8001080:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001082:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <HAL_UART_MspInit+0x128>)
 8001084:	2280      	movs	r2, #128	; 0x80
 8001086:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001088:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <HAL_UART_MspInit+0x128>)
 800108a:	2200      	movs	r2, #0
 800108c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800108e:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <HAL_UART_MspInit+0x128>)
 8001090:	2200      	movs	r2, #0
 8001092:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <HAL_UART_MspInit+0x128>)
 8001096:	2200      	movs	r2, #0
 8001098:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800109a:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <HAL_UART_MspInit+0x128>)
 800109c:	2200      	movs	r2, #0
 800109e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80010a0:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <HAL_UART_MspInit+0x128>)
 80010a2:	0018      	movs	r0, r3
 80010a4:	f000 fa56 	bl	8001554 <HAL_DMA_Init>
 80010a8:	1e03      	subs	r3, r0, #0
 80010aa:	d001      	beq.n	80010b0 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 80010ac:	f7ff feec 	bl	8000e88 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2180      	movs	r1, #128	; 0x80
 80010b4:	4a0a      	ldr	r2, [pc, #40]	; (80010e0 <HAL_UART_MspInit+0x128>)
 80010b6:	505a      	str	r2, [r3, r1]
 80010b8:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <HAL_UART_MspInit+0x128>)
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010be:	2200      	movs	r2, #0
 80010c0:	2100      	movs	r1, #0
 80010c2:	201b      	movs	r0, #27
 80010c4:	f000 fa14 	bl	80014f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010c8:	201b      	movs	r0, #27
 80010ca:	f000 fa26 	bl	800151a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80010ce:	46c0      	nop			; (mov r8, r8)
 80010d0:	46bd      	mov	sp, r7
 80010d2:	b015      	add	sp, #84	; 0x54
 80010d4:	bd90      	pop	{r4, r7, pc}
 80010d6:	46c0      	nop			; (mov r8, r8)
 80010d8:	40013800 	.word	0x40013800
 80010dc:	40021000 	.word	0x40021000
 80010e0:	20000198 	.word	0x20000198
 80010e4:	40020008 	.word	0x40020008

080010e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010ec:	e7fe      	b.n	80010ec <NMI_Handler+0x4>

080010ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f2:	e7fe      	b.n	80010f2 <HardFault_Handler+0x4>

080010f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80010f8:	46c0      	nop			; (mov r8, r8)
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001102:	46c0      	nop			; (mov r8, r8)
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800110c:	f000 f904 	bl	8001318 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001110:	46c0      	nop			; (mov r8, r8)
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800111c:	4b03      	ldr	r3, [pc, #12]	; (800112c <RTC_TAMP_IRQHandler+0x14>)
 800111e:	0018      	movs	r0, r3
 8001120:	f002 f89c 	bl	800325c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8001124:	46c0      	nop			; (mov r8, r8)
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	46c0      	nop			; (mov r8, r8)
 800112c:	2000008c 	.word	0x2000008c

08001130 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001134:	4b03      	ldr	r3, [pc, #12]	; (8001144 <DMA1_Channel1_IRQHandler+0x14>)
 8001136:	0018      	movs	r0, r3
 8001138:	f000 fbe8 	bl	800190c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800113c:	46c0      	nop			; (mov r8, r8)
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	20000198 	.word	0x20000198

08001148 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800114c:	4b03      	ldr	r3, [pc, #12]	; (800115c <TIM14_IRQHandler+0x14>)
 800114e:	0018      	movs	r0, r3
 8001150:	f002 f984 	bl	800345c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001154:	46c0      	nop			; (mov r8, r8)
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	46c0      	nop			; (mov r8, r8)
 800115c:	200000b8 	.word	0x200000b8

08001160 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001164:	4b03      	ldr	r3, [pc, #12]	; (8001174 <USART1_IRQHandler+0x14>)
 8001166:	0018      	movs	r0, r3
 8001168:	f002 fc4a 	bl	8003a00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800116c:	46c0      	nop			; (mov r8, r8)
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	46c0      	nop			; (mov r8, r8)
 8001174:	20000104 	.word	0x20000104

08001178 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001180:	4a14      	ldr	r2, [pc, #80]	; (80011d4 <_sbrk+0x5c>)
 8001182:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <_sbrk+0x60>)
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800118c:	4b13      	ldr	r3, [pc, #76]	; (80011dc <_sbrk+0x64>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d102      	bne.n	800119a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001194:	4b11      	ldr	r3, [pc, #68]	; (80011dc <_sbrk+0x64>)
 8001196:	4a12      	ldr	r2, [pc, #72]	; (80011e0 <_sbrk+0x68>)
 8001198:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800119a:	4b10      	ldr	r3, [pc, #64]	; (80011dc <_sbrk+0x64>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	18d3      	adds	r3, r2, r3
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d207      	bcs.n	80011b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011a8:	f003 ffd8 	bl	800515c <__errno>
 80011ac:	0003      	movs	r3, r0
 80011ae:	220c      	movs	r2, #12
 80011b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011b2:	2301      	movs	r3, #1
 80011b4:	425b      	negs	r3, r3
 80011b6:	e009      	b.n	80011cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011b8:	4b08      	ldr	r3, [pc, #32]	; (80011dc <_sbrk+0x64>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011be:	4b07      	ldr	r3, [pc, #28]	; (80011dc <_sbrk+0x64>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	18d2      	adds	r2, r2, r3
 80011c6:	4b05      	ldr	r3, [pc, #20]	; (80011dc <_sbrk+0x64>)
 80011c8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80011ca:	68fb      	ldr	r3, [r7, #12]
}
 80011cc:	0018      	movs	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	b006      	add	sp, #24
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20002000 	.word	0x20002000
 80011d8:	00000400 	.word	0x00000400
 80011dc:	200004a8 	.word	0x200004a8
 80011e0:	200004c0 	.word	0x200004c0

080011e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011e8:	46c0      	nop			; (mov r8, r8)
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
	...

080011f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011f0:	480d      	ldr	r0, [pc, #52]	; (8001228 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011f2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011f4:	f7ff fff6 	bl	80011e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011f8:	480c      	ldr	r0, [pc, #48]	; (800122c <LoopForever+0x6>)
  ldr r1, =_edata
 80011fa:	490d      	ldr	r1, [pc, #52]	; (8001230 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011fc:	4a0d      	ldr	r2, [pc, #52]	; (8001234 <LoopForever+0xe>)
  movs r3, #0
 80011fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001200:	e002      	b.n	8001208 <LoopCopyDataInit>

08001202 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001202:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001204:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001206:	3304      	adds	r3, #4

08001208 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001208:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800120a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800120c:	d3f9      	bcc.n	8001202 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800120e:	4a0a      	ldr	r2, [pc, #40]	; (8001238 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001210:	4c0a      	ldr	r4, [pc, #40]	; (800123c <LoopForever+0x16>)
  movs r3, #0
 8001212:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001214:	e001      	b.n	800121a <LoopFillZerobss>

08001216 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001216:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001218:	3204      	adds	r2, #4

0800121a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800121a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800121c:	d3fb      	bcc.n	8001216 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800121e:	f003 ffa3 	bl	8005168 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001222:	f7ff fa0d 	bl	8000640 <main>

08001226 <LoopForever>:

LoopForever:
  b LoopForever
 8001226:	e7fe      	b.n	8001226 <LoopForever>
  ldr   r0, =_estack
 8001228:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800122c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001230:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001234:	080068bc 	.word	0x080068bc
  ldr r2, =_sbss
 8001238:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800123c:	200004c0 	.word	0x200004c0

08001240 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001240:	e7fe      	b.n	8001240 <ADC1_IRQHandler>
	...

08001244 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800124a:	1dfb      	adds	r3, r7, #7
 800124c:	2200      	movs	r2, #0
 800124e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001250:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <HAL_Init+0x3c>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <HAL_Init+0x3c>)
 8001256:	2180      	movs	r1, #128	; 0x80
 8001258:	0049      	lsls	r1, r1, #1
 800125a:	430a      	orrs	r2, r1
 800125c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800125e:	2000      	movs	r0, #0
 8001260:	f000 f810 	bl	8001284 <HAL_InitTick>
 8001264:	1e03      	subs	r3, r0, #0
 8001266:	d003      	beq.n	8001270 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001268:	1dfb      	adds	r3, r7, #7
 800126a:	2201      	movs	r2, #1
 800126c:	701a      	strb	r2, [r3, #0]
 800126e:	e001      	b.n	8001274 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001270:	f7ff fe10 	bl	8000e94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001274:	1dfb      	adds	r3, r7, #7
 8001276:	781b      	ldrb	r3, [r3, #0]
}
 8001278:	0018      	movs	r0, r3
 800127a:	46bd      	mov	sp, r7
 800127c:	b002      	add	sp, #8
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40022000 	.word	0x40022000

08001284 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001284:	b590      	push	{r4, r7, lr}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800128c:	230f      	movs	r3, #15
 800128e:	18fb      	adds	r3, r7, r3
 8001290:	2200      	movs	r2, #0
 8001292:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001294:	4b1d      	ldr	r3, [pc, #116]	; (800130c <HAL_InitTick+0x88>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d02b      	beq.n	80012f4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800129c:	4b1c      	ldr	r3, [pc, #112]	; (8001310 <HAL_InitTick+0x8c>)
 800129e:	681c      	ldr	r4, [r3, #0]
 80012a0:	4b1a      	ldr	r3, [pc, #104]	; (800130c <HAL_InitTick+0x88>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	0019      	movs	r1, r3
 80012a6:	23fa      	movs	r3, #250	; 0xfa
 80012a8:	0098      	lsls	r0, r3, #2
 80012aa:	f7fe ff3d 	bl	8000128 <__udivsi3>
 80012ae:	0003      	movs	r3, r0
 80012b0:	0019      	movs	r1, r3
 80012b2:	0020      	movs	r0, r4
 80012b4:	f7fe ff38 	bl	8000128 <__udivsi3>
 80012b8:	0003      	movs	r3, r0
 80012ba:	0018      	movs	r0, r3
 80012bc:	f000 f93d 	bl	800153a <HAL_SYSTICK_Config>
 80012c0:	1e03      	subs	r3, r0, #0
 80012c2:	d112      	bne.n	80012ea <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b03      	cmp	r3, #3
 80012c8:	d80a      	bhi.n	80012e0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	2301      	movs	r3, #1
 80012ce:	425b      	negs	r3, r3
 80012d0:	2200      	movs	r2, #0
 80012d2:	0018      	movs	r0, r3
 80012d4:	f000 f90c 	bl	80014f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012d8:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <HAL_InitTick+0x90>)
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	e00d      	b.n	80012fc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80012e0:	230f      	movs	r3, #15
 80012e2:	18fb      	adds	r3, r7, r3
 80012e4:	2201      	movs	r2, #1
 80012e6:	701a      	strb	r2, [r3, #0]
 80012e8:	e008      	b.n	80012fc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012ea:	230f      	movs	r3, #15
 80012ec:	18fb      	adds	r3, r7, r3
 80012ee:	2201      	movs	r2, #1
 80012f0:	701a      	strb	r2, [r3, #0]
 80012f2:	e003      	b.n	80012fc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012f4:	230f      	movs	r3, #15
 80012f6:	18fb      	adds	r3, r7, r3
 80012f8:	2201      	movs	r2, #1
 80012fa:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80012fc:	230f      	movs	r3, #15
 80012fe:	18fb      	adds	r3, r7, r3
 8001300:	781b      	ldrb	r3, [r3, #0]
}
 8001302:	0018      	movs	r0, r3
 8001304:	46bd      	mov	sp, r7
 8001306:	b005      	add	sp, #20
 8001308:	bd90      	pop	{r4, r7, pc}
 800130a:	46c0      	nop			; (mov r8, r8)
 800130c:	20000008 	.word	0x20000008
 8001310:	20000000 	.word	0x20000000
 8001314:	20000004 	.word	0x20000004

08001318 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800131c:	4b05      	ldr	r3, [pc, #20]	; (8001334 <HAL_IncTick+0x1c>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	001a      	movs	r2, r3
 8001322:	4b05      	ldr	r3, [pc, #20]	; (8001338 <HAL_IncTick+0x20>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	18d2      	adds	r2, r2, r3
 8001328:	4b03      	ldr	r3, [pc, #12]	; (8001338 <HAL_IncTick+0x20>)
 800132a:	601a      	str	r2, [r3, #0]
}
 800132c:	46c0      	nop			; (mov r8, r8)
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	46c0      	nop			; (mov r8, r8)
 8001334:	20000008 	.word	0x20000008
 8001338:	200004ac 	.word	0x200004ac

0800133c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  return uwTick;
 8001340:	4b02      	ldr	r3, [pc, #8]	; (800134c <HAL_GetTick+0x10>)
 8001342:	681b      	ldr	r3, [r3, #0]
}
 8001344:	0018      	movs	r0, r3
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	200004ac 	.word	0x200004ac

08001350 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001358:	f7ff fff0 	bl	800133c <HAL_GetTick>
 800135c:	0003      	movs	r3, r0
 800135e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	3301      	adds	r3, #1
 8001368:	d005      	beq.n	8001376 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800136a:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <HAL_Delay+0x44>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	001a      	movs	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	189b      	adds	r3, r3, r2
 8001374:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001376:	46c0      	nop			; (mov r8, r8)
 8001378:	f7ff ffe0 	bl	800133c <HAL_GetTick>
 800137c:	0002      	movs	r2, r0
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	68fa      	ldr	r2, [r7, #12]
 8001384:	429a      	cmp	r2, r3
 8001386:	d8f7      	bhi.n	8001378 <HAL_Delay+0x28>
  {
  }
}
 8001388:	46c0      	nop			; (mov r8, r8)
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	46bd      	mov	sp, r7
 800138e:	b004      	add	sp, #16
 8001390:	bd80      	pop	{r7, pc}
 8001392:	46c0      	nop			; (mov r8, r8)
 8001394:	20000008 	.word	0x20000008

08001398 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	0002      	movs	r2, r0
 80013a0:	1dfb      	adds	r3, r7, #7
 80013a2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013a4:	1dfb      	adds	r3, r7, #7
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b7f      	cmp	r3, #127	; 0x7f
 80013aa:	d809      	bhi.n	80013c0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ac:	1dfb      	adds	r3, r7, #7
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	001a      	movs	r2, r3
 80013b2:	231f      	movs	r3, #31
 80013b4:	401a      	ands	r2, r3
 80013b6:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <__NVIC_EnableIRQ+0x30>)
 80013b8:	2101      	movs	r1, #1
 80013ba:	4091      	lsls	r1, r2
 80013bc:	000a      	movs	r2, r1
 80013be:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80013c0:	46c0      	nop			; (mov r8, r8)
 80013c2:	46bd      	mov	sp, r7
 80013c4:	b002      	add	sp, #8
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	e000e100 	.word	0xe000e100

080013cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013cc:	b590      	push	{r4, r7, lr}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	0002      	movs	r2, r0
 80013d4:	6039      	str	r1, [r7, #0]
 80013d6:	1dfb      	adds	r3, r7, #7
 80013d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013da:	1dfb      	adds	r3, r7, #7
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b7f      	cmp	r3, #127	; 0x7f
 80013e0:	d828      	bhi.n	8001434 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013e2:	4a2f      	ldr	r2, [pc, #188]	; (80014a0 <__NVIC_SetPriority+0xd4>)
 80013e4:	1dfb      	adds	r3, r7, #7
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	b25b      	sxtb	r3, r3
 80013ea:	089b      	lsrs	r3, r3, #2
 80013ec:	33c0      	adds	r3, #192	; 0xc0
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	589b      	ldr	r3, [r3, r2]
 80013f2:	1dfa      	adds	r2, r7, #7
 80013f4:	7812      	ldrb	r2, [r2, #0]
 80013f6:	0011      	movs	r1, r2
 80013f8:	2203      	movs	r2, #3
 80013fa:	400a      	ands	r2, r1
 80013fc:	00d2      	lsls	r2, r2, #3
 80013fe:	21ff      	movs	r1, #255	; 0xff
 8001400:	4091      	lsls	r1, r2
 8001402:	000a      	movs	r2, r1
 8001404:	43d2      	mvns	r2, r2
 8001406:	401a      	ands	r2, r3
 8001408:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	019b      	lsls	r3, r3, #6
 800140e:	22ff      	movs	r2, #255	; 0xff
 8001410:	401a      	ands	r2, r3
 8001412:	1dfb      	adds	r3, r7, #7
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	0018      	movs	r0, r3
 8001418:	2303      	movs	r3, #3
 800141a:	4003      	ands	r3, r0
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001420:	481f      	ldr	r0, [pc, #124]	; (80014a0 <__NVIC_SetPriority+0xd4>)
 8001422:	1dfb      	adds	r3, r7, #7
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	b25b      	sxtb	r3, r3
 8001428:	089b      	lsrs	r3, r3, #2
 800142a:	430a      	orrs	r2, r1
 800142c:	33c0      	adds	r3, #192	; 0xc0
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001432:	e031      	b.n	8001498 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001434:	4a1b      	ldr	r2, [pc, #108]	; (80014a4 <__NVIC_SetPriority+0xd8>)
 8001436:	1dfb      	adds	r3, r7, #7
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	0019      	movs	r1, r3
 800143c:	230f      	movs	r3, #15
 800143e:	400b      	ands	r3, r1
 8001440:	3b08      	subs	r3, #8
 8001442:	089b      	lsrs	r3, r3, #2
 8001444:	3306      	adds	r3, #6
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	18d3      	adds	r3, r2, r3
 800144a:	3304      	adds	r3, #4
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	1dfa      	adds	r2, r7, #7
 8001450:	7812      	ldrb	r2, [r2, #0]
 8001452:	0011      	movs	r1, r2
 8001454:	2203      	movs	r2, #3
 8001456:	400a      	ands	r2, r1
 8001458:	00d2      	lsls	r2, r2, #3
 800145a:	21ff      	movs	r1, #255	; 0xff
 800145c:	4091      	lsls	r1, r2
 800145e:	000a      	movs	r2, r1
 8001460:	43d2      	mvns	r2, r2
 8001462:	401a      	ands	r2, r3
 8001464:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	019b      	lsls	r3, r3, #6
 800146a:	22ff      	movs	r2, #255	; 0xff
 800146c:	401a      	ands	r2, r3
 800146e:	1dfb      	adds	r3, r7, #7
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	0018      	movs	r0, r3
 8001474:	2303      	movs	r3, #3
 8001476:	4003      	ands	r3, r0
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800147c:	4809      	ldr	r0, [pc, #36]	; (80014a4 <__NVIC_SetPriority+0xd8>)
 800147e:	1dfb      	adds	r3, r7, #7
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	001c      	movs	r4, r3
 8001484:	230f      	movs	r3, #15
 8001486:	4023      	ands	r3, r4
 8001488:	3b08      	subs	r3, #8
 800148a:	089b      	lsrs	r3, r3, #2
 800148c:	430a      	orrs	r2, r1
 800148e:	3306      	adds	r3, #6
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	18c3      	adds	r3, r0, r3
 8001494:	3304      	adds	r3, #4
 8001496:	601a      	str	r2, [r3, #0]
}
 8001498:	46c0      	nop			; (mov r8, r8)
 800149a:	46bd      	mov	sp, r7
 800149c:	b003      	add	sp, #12
 800149e:	bd90      	pop	{r4, r7, pc}
 80014a0:	e000e100 	.word	0xe000e100
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	1e5a      	subs	r2, r3, #1
 80014b4:	2380      	movs	r3, #128	; 0x80
 80014b6:	045b      	lsls	r3, r3, #17
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d301      	bcc.n	80014c0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014bc:	2301      	movs	r3, #1
 80014be:	e010      	b.n	80014e2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014c0:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <SysTick_Config+0x44>)
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	3a01      	subs	r2, #1
 80014c6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014c8:	2301      	movs	r3, #1
 80014ca:	425b      	negs	r3, r3
 80014cc:	2103      	movs	r1, #3
 80014ce:	0018      	movs	r0, r3
 80014d0:	f7ff ff7c 	bl	80013cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d4:	4b05      	ldr	r3, [pc, #20]	; (80014ec <SysTick_Config+0x44>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014da:	4b04      	ldr	r3, [pc, #16]	; (80014ec <SysTick_Config+0x44>)
 80014dc:	2207      	movs	r2, #7
 80014de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	0018      	movs	r0, r3
 80014e4:	46bd      	mov	sp, r7
 80014e6:	b002      	add	sp, #8
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	e000e010 	.word	0xe000e010

080014f0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	607a      	str	r2, [r7, #4]
 80014fa:	210f      	movs	r1, #15
 80014fc:	187b      	adds	r3, r7, r1
 80014fe:	1c02      	adds	r2, r0, #0
 8001500:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	187b      	adds	r3, r7, r1
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	b25b      	sxtb	r3, r3
 800150a:	0011      	movs	r1, r2
 800150c:	0018      	movs	r0, r3
 800150e:	f7ff ff5d 	bl	80013cc <__NVIC_SetPriority>
}
 8001512:	46c0      	nop			; (mov r8, r8)
 8001514:	46bd      	mov	sp, r7
 8001516:	b004      	add	sp, #16
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	0002      	movs	r2, r0
 8001522:	1dfb      	adds	r3, r7, #7
 8001524:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001526:	1dfb      	adds	r3, r7, #7
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	b25b      	sxtb	r3, r3
 800152c:	0018      	movs	r0, r3
 800152e:	f7ff ff33 	bl	8001398 <__NVIC_EnableIRQ>
}
 8001532:	46c0      	nop			; (mov r8, r8)
 8001534:	46bd      	mov	sp, r7
 8001536:	b002      	add	sp, #8
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b082      	sub	sp, #8
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	0018      	movs	r0, r3
 8001546:	f7ff ffaf 	bl	80014a8 <SysTick_Config>
 800154a:	0003      	movs	r3, r0
}
 800154c:	0018      	movs	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	b002      	add	sp, #8
 8001552:	bd80      	pop	{r7, pc}

08001554 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d101      	bne.n	8001566 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e077      	b.n	8001656 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a3d      	ldr	r2, [pc, #244]	; (8001660 <HAL_DMA_Init+0x10c>)
 800156c:	4694      	mov	ip, r2
 800156e:	4463      	add	r3, ip
 8001570:	2114      	movs	r1, #20
 8001572:	0018      	movs	r0, r3
 8001574:	f7fe fdd8 	bl	8000128 <__udivsi3>
 8001578:	0003      	movs	r3, r0
 800157a:	009a      	lsls	r2, r3, #2
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2225      	movs	r2, #37	; 0x25
 8001584:	2102      	movs	r1, #2
 8001586:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4934      	ldr	r1, [pc, #208]	; (8001664 <HAL_DMA_Init+0x110>)
 8001594:	400a      	ands	r2, r1
 8001596:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6819      	ldr	r1, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689a      	ldr	r2, [r3, #8]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	431a      	orrs	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	431a      	orrs	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	695b      	ldr	r3, [r3, #20]
 80015b2:	431a      	orrs	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	431a      	orrs	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	431a      	orrs	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a1b      	ldr	r3, [r3, #32]
 80015c4:	431a      	orrs	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	430a      	orrs	r2, r1
 80015cc:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	0018      	movs	r0, r3
 80015d2:	f000 fa8d 	bl	8001af0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	689a      	ldr	r2, [r3, #8]
 80015da:	2380      	movs	r3, #128	; 0x80
 80015dc:	01db      	lsls	r3, r3, #7
 80015de:	429a      	cmp	r2, r3
 80015e0:	d102      	bne.n	80015e8 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685a      	ldr	r2, [r3, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f0:	213f      	movs	r1, #63	; 0x3f
 80015f2:	400a      	ands	r2, r1
 80015f4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80015fe:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d011      	beq.n	800162c <HAL_DMA_Init+0xd8>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	2b04      	cmp	r3, #4
 800160e:	d80d      	bhi.n	800162c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	0018      	movs	r0, r3
 8001614:	f000 fa98 	bl	8001b48 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	e008      	b.n	800163e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2225      	movs	r2, #37	; 0x25
 8001648:	2101      	movs	r1, #1
 800164a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2224      	movs	r2, #36	; 0x24
 8001650:	2100      	movs	r1, #0
 8001652:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	0018      	movs	r0, r3
 8001658:	46bd      	mov	sp, r7
 800165a:	b002      	add	sp, #8
 800165c:	bd80      	pop	{r7, pc}
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	bffdfff8 	.word	0xbffdfff8
 8001664:	ffff800f 	.word	0xffff800f

08001668 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
 8001674:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001676:	2317      	movs	r3, #23
 8001678:	18fb      	adds	r3, r7, r3
 800167a:	2200      	movs	r2, #0
 800167c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2224      	movs	r2, #36	; 0x24
 8001682:	5c9b      	ldrb	r3, [r3, r2]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d101      	bne.n	800168c <HAL_DMA_Start_IT+0x24>
 8001688:	2302      	movs	r3, #2
 800168a:	e06f      	b.n	800176c <HAL_DMA_Start_IT+0x104>
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2224      	movs	r2, #36	; 0x24
 8001690:	2101      	movs	r1, #1
 8001692:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2225      	movs	r2, #37	; 0x25
 8001698:	5c9b      	ldrb	r3, [r3, r2]
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2b01      	cmp	r3, #1
 800169e:	d157      	bne.n	8001750 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2225      	movs	r2, #37	; 0x25
 80016a4:	2102      	movs	r1, #2
 80016a6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2200      	movs	r2, #0
 80016ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2101      	movs	r1, #1
 80016ba:	438a      	bics	r2, r1
 80016bc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	68b9      	ldr	r1, [r7, #8]
 80016c4:	68f8      	ldr	r0, [r7, #12]
 80016c6:	f000 f9d3 	bl	8001a70 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d008      	beq.n	80016e4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	210e      	movs	r1, #14
 80016de:	430a      	orrs	r2, r1
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	e00f      	b.n	8001704 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2104      	movs	r1, #4
 80016f0:	438a      	bics	r2, r1
 80016f2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	210a      	movs	r1, #10
 8001700:	430a      	orrs	r2, r1
 8001702:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	2380      	movs	r3, #128	; 0x80
 800170c:	025b      	lsls	r3, r3, #9
 800170e:	4013      	ands	r3, r2
 8001710:	d008      	beq.n	8001724 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171c:	2180      	movs	r1, #128	; 0x80
 800171e:	0049      	lsls	r1, r1, #1
 8001720:	430a      	orrs	r2, r1
 8001722:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001728:	2b00      	cmp	r3, #0
 800172a:	d008      	beq.n	800173e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001736:	2180      	movs	r1, #128	; 0x80
 8001738:	0049      	lsls	r1, r1, #1
 800173a:	430a      	orrs	r2, r1
 800173c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2101      	movs	r1, #1
 800174a:	430a      	orrs	r2, r1
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	e00a      	b.n	8001766 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2280      	movs	r2, #128	; 0x80
 8001754:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2224      	movs	r2, #36	; 0x24
 800175a:	2100      	movs	r1, #0
 800175c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800175e:	2317      	movs	r3, #23
 8001760:	18fb      	adds	r3, r7, r3
 8001762:	2201      	movs	r2, #1
 8001764:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001766:	2317      	movs	r3, #23
 8001768:	18fb      	adds	r3, r7, r3
 800176a:	781b      	ldrb	r3, [r3, #0]
}
 800176c:	0018      	movs	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	b006      	add	sp, #24
 8001772:	bd80      	pop	{r7, pc}

08001774 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e050      	b.n	8001828 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2225      	movs	r2, #37	; 0x25
 800178a:	5c9b      	ldrb	r3, [r3, r2]
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d008      	beq.n	80017a4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2204      	movs	r2, #4
 8001796:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2224      	movs	r2, #36	; 0x24
 800179c:	2100      	movs	r1, #0
 800179e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e041      	b.n	8001828 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	210e      	movs	r1, #14
 80017b0:	438a      	bics	r2, r1
 80017b2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017be:	491c      	ldr	r1, [pc, #112]	; (8001830 <HAL_DMA_Abort+0xbc>)
 80017c0:	400a      	ands	r2, r1
 80017c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2101      	movs	r1, #1
 80017d0:	438a      	bics	r2, r1
 80017d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80017d4:	4b17      	ldr	r3, [pc, #92]	; (8001834 <HAL_DMA_Abort+0xc0>)
 80017d6:	6859      	ldr	r1, [r3, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	221c      	movs	r2, #28
 80017de:	4013      	ands	r3, r2
 80017e0:	2201      	movs	r2, #1
 80017e2:	409a      	lsls	r2, r3
 80017e4:	4b13      	ldr	r3, [pc, #76]	; (8001834 <HAL_DMA_Abort+0xc0>)
 80017e6:	430a      	orrs	r2, r1
 80017e8:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80017f2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d00c      	beq.n	8001816 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001806:	490a      	ldr	r1, [pc, #40]	; (8001830 <HAL_DMA_Abort+0xbc>)
 8001808:	400a      	ands	r2, r1
 800180a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001814:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2225      	movs	r2, #37	; 0x25
 800181a:	2101      	movs	r1, #1
 800181c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2224      	movs	r2, #36	; 0x24
 8001822:	2100      	movs	r1, #0
 8001824:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001826:	2300      	movs	r3, #0
}
 8001828:	0018      	movs	r0, r3
 800182a:	46bd      	mov	sp, r7
 800182c:	b002      	add	sp, #8
 800182e:	bd80      	pop	{r7, pc}
 8001830:	fffffeff 	.word	0xfffffeff
 8001834:	40020000 	.word	0x40020000

08001838 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001840:	210f      	movs	r1, #15
 8001842:	187b      	adds	r3, r7, r1
 8001844:	2200      	movs	r2, #0
 8001846:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2225      	movs	r2, #37	; 0x25
 800184c:	5c9b      	ldrb	r3, [r3, r2]
 800184e:	b2db      	uxtb	r3, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d006      	beq.n	8001862 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2204      	movs	r2, #4
 8001858:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800185a:	187b      	adds	r3, r7, r1
 800185c:	2201      	movs	r2, #1
 800185e:	701a      	strb	r2, [r3, #0]
 8001860:	e049      	b.n	80018f6 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	210e      	movs	r1, #14
 800186e:	438a      	bics	r2, r1
 8001870:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2101      	movs	r1, #1
 800187e:	438a      	bics	r2, r1
 8001880:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188c:	491d      	ldr	r1, [pc, #116]	; (8001904 <HAL_DMA_Abort_IT+0xcc>)
 800188e:	400a      	ands	r2, r1
 8001890:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001892:	4b1d      	ldr	r3, [pc, #116]	; (8001908 <HAL_DMA_Abort_IT+0xd0>)
 8001894:	6859      	ldr	r1, [r3, #4]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	221c      	movs	r2, #28
 800189c:	4013      	ands	r3, r2
 800189e:	2201      	movs	r2, #1
 80018a0:	409a      	lsls	r2, r3
 80018a2:	4b19      	ldr	r3, [pc, #100]	; (8001908 <HAL_DMA_Abort_IT+0xd0>)
 80018a4:	430a      	orrs	r2, r1
 80018a6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80018b0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00c      	beq.n	80018d4 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018c4:	490f      	ldr	r1, [pc, #60]	; (8001904 <HAL_DMA_Abort_IT+0xcc>)
 80018c6:	400a      	ands	r2, r1
 80018c8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80018d2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2225      	movs	r2, #37	; 0x25
 80018d8:	2101      	movs	r1, #1
 80018da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2224      	movs	r2, #36	; 0x24
 80018e0:	2100      	movs	r1, #0
 80018e2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d004      	beq.n	80018f6 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	0010      	movs	r0, r2
 80018f4:	4798      	blx	r3
    }
  }
  return status;
 80018f6:	230f      	movs	r3, #15
 80018f8:	18fb      	adds	r3, r7, r3
 80018fa:	781b      	ldrb	r3, [r3, #0]
}
 80018fc:	0018      	movs	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	b004      	add	sp, #16
 8001902:	bd80      	pop	{r7, pc}
 8001904:	fffffeff 	.word	0xfffffeff
 8001908:	40020000 	.word	0x40020000

0800190c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001914:	4b55      	ldr	r3, [pc, #340]	; (8001a6c <HAL_DMA_IRQHandler+0x160>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	221c      	movs	r2, #28
 8001928:	4013      	ands	r3, r2
 800192a:	2204      	movs	r2, #4
 800192c:	409a      	lsls	r2, r3
 800192e:	0013      	movs	r3, r2
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	4013      	ands	r3, r2
 8001934:	d027      	beq.n	8001986 <HAL_DMA_IRQHandler+0x7a>
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	2204      	movs	r2, #4
 800193a:	4013      	ands	r3, r2
 800193c:	d023      	beq.n	8001986 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2220      	movs	r2, #32
 8001946:	4013      	ands	r3, r2
 8001948:	d107      	bne.n	800195a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2104      	movs	r1, #4
 8001956:	438a      	bics	r2, r1
 8001958:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800195a:	4b44      	ldr	r3, [pc, #272]	; (8001a6c <HAL_DMA_IRQHandler+0x160>)
 800195c:	6859      	ldr	r1, [r3, #4]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	221c      	movs	r2, #28
 8001964:	4013      	ands	r3, r2
 8001966:	2204      	movs	r2, #4
 8001968:	409a      	lsls	r2, r3
 800196a:	4b40      	ldr	r3, [pc, #256]	; (8001a6c <HAL_DMA_IRQHandler+0x160>)
 800196c:	430a      	orrs	r2, r1
 800196e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001974:	2b00      	cmp	r3, #0
 8001976:	d100      	bne.n	800197a <HAL_DMA_IRQHandler+0x6e>
 8001978:	e073      	b.n	8001a62 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	0010      	movs	r0, r2
 8001982:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001984:	e06d      	b.n	8001a62 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	221c      	movs	r2, #28
 800198c:	4013      	ands	r3, r2
 800198e:	2202      	movs	r2, #2
 8001990:	409a      	lsls	r2, r3
 8001992:	0013      	movs	r3, r2
 8001994:	68fa      	ldr	r2, [r7, #12]
 8001996:	4013      	ands	r3, r2
 8001998:	d02e      	beq.n	80019f8 <HAL_DMA_IRQHandler+0xec>
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	2202      	movs	r2, #2
 800199e:	4013      	ands	r3, r2
 80019a0:	d02a      	beq.n	80019f8 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2220      	movs	r2, #32
 80019aa:	4013      	ands	r3, r2
 80019ac:	d10b      	bne.n	80019c6 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	210a      	movs	r1, #10
 80019ba:	438a      	bics	r2, r1
 80019bc:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2225      	movs	r2, #37	; 0x25
 80019c2:	2101      	movs	r1, #1
 80019c4:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80019c6:	4b29      	ldr	r3, [pc, #164]	; (8001a6c <HAL_DMA_IRQHandler+0x160>)
 80019c8:	6859      	ldr	r1, [r3, #4]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	221c      	movs	r2, #28
 80019d0:	4013      	ands	r3, r2
 80019d2:	2202      	movs	r2, #2
 80019d4:	409a      	lsls	r2, r3
 80019d6:	4b25      	ldr	r3, [pc, #148]	; (8001a6c <HAL_DMA_IRQHandler+0x160>)
 80019d8:	430a      	orrs	r2, r1
 80019da:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2224      	movs	r2, #36	; 0x24
 80019e0:	2100      	movs	r1, #0
 80019e2:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d03a      	beq.n	8001a62 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	0010      	movs	r0, r2
 80019f4:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80019f6:	e034      	b.n	8001a62 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fc:	221c      	movs	r2, #28
 80019fe:	4013      	ands	r3, r2
 8001a00:	2208      	movs	r2, #8
 8001a02:	409a      	lsls	r2, r3
 8001a04:	0013      	movs	r3, r2
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	d02b      	beq.n	8001a64 <HAL_DMA_IRQHandler+0x158>
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	2208      	movs	r2, #8
 8001a10:	4013      	ands	r3, r2
 8001a12:	d027      	beq.n	8001a64 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	210e      	movs	r1, #14
 8001a20:	438a      	bics	r2, r1
 8001a22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001a24:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <HAL_DMA_IRQHandler+0x160>)
 8001a26:	6859      	ldr	r1, [r3, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2c:	221c      	movs	r2, #28
 8001a2e:	4013      	ands	r3, r2
 8001a30:	2201      	movs	r2, #1
 8001a32:	409a      	lsls	r2, r3
 8001a34:	4b0d      	ldr	r3, [pc, #52]	; (8001a6c <HAL_DMA_IRQHandler+0x160>)
 8001a36:	430a      	orrs	r2, r1
 8001a38:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2225      	movs	r2, #37	; 0x25
 8001a44:	2101      	movs	r1, #1
 8001a46:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2224      	movs	r2, #36	; 0x24
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d005      	beq.n	8001a64 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	0010      	movs	r0, r2
 8001a60:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001a62:	46c0      	nop			; (mov r8, r8)
 8001a64:	46c0      	nop			; (mov r8, r8)
}
 8001a66:	46bd      	mov	sp, r7
 8001a68:	b004      	add	sp, #16
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40020000 	.word	0x40020000

08001a70 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
 8001a7c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001a86:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d004      	beq.n	8001a9a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001a98:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001a9a:	4b14      	ldr	r3, [pc, #80]	; (8001aec <DMA_SetConfig+0x7c>)
 8001a9c:	6859      	ldr	r1, [r3, #4]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	221c      	movs	r2, #28
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	409a      	lsls	r2, r3
 8001aaa:	4b10      	ldr	r3, [pc, #64]	; (8001aec <DMA_SetConfig+0x7c>)
 8001aac:	430a      	orrs	r2, r1
 8001aae:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	2b10      	cmp	r3, #16
 8001abe:	d108      	bne.n	8001ad2 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	68ba      	ldr	r2, [r7, #8]
 8001ace:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001ad0:	e007      	b.n	8001ae2 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	60da      	str	r2, [r3, #12]
}
 8001ae2:	46c0      	nop			; (mov r8, r8)
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	b004      	add	sp, #16
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	46c0      	nop			; (mov r8, r8)
 8001aec:	40020000 	.word	0x40020000

08001af0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	089b      	lsrs	r3, r3, #2
 8001afe:	4a10      	ldr	r2, [pc, #64]	; (8001b40 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001b00:	4694      	mov	ip, r2
 8001b02:	4463      	add	r3, ip
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	001a      	movs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	001a      	movs	r2, r3
 8001b12:	23ff      	movs	r3, #255	; 0xff
 8001b14:	4013      	ands	r3, r2
 8001b16:	3b08      	subs	r3, #8
 8001b18:	2114      	movs	r1, #20
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	f7fe fb04 	bl	8000128 <__udivsi3>
 8001b20:	0003      	movs	r3, r0
 8001b22:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4a07      	ldr	r2, [pc, #28]	; (8001b44 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001b28:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	221f      	movs	r2, #31
 8001b2e:	4013      	ands	r3, r2
 8001b30:	2201      	movs	r2, #1
 8001b32:	409a      	lsls	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001b38:	46c0      	nop			; (mov r8, r8)
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	b004      	add	sp, #16
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	10008200 	.word	0x10008200
 8001b44:	40020880 	.word	0x40020880

08001b48 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	223f      	movs	r2, #63	; 0x3f
 8001b56:	4013      	ands	r3, r2
 8001b58:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	4a0a      	ldr	r2, [pc, #40]	; (8001b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001b5e:	4694      	mov	ip, r2
 8001b60:	4463      	add	r3, ip
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	001a      	movs	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a07      	ldr	r2, [pc, #28]	; (8001b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001b6e:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	3b01      	subs	r3, #1
 8001b74:	2203      	movs	r2, #3
 8001b76:	4013      	ands	r3, r2
 8001b78:	2201      	movs	r2, #1
 8001b7a:	409a      	lsls	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001b80:	46c0      	nop			; (mov r8, r8)
 8001b82:	46bd      	mov	sp, r7
 8001b84:	b004      	add	sp, #16
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	1000823f 	.word	0x1000823f
 8001b8c:	40020940 	.word	0x40020940

08001b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b9e:	e147      	b.n	8001e30 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	4091      	lsls	r1, r2
 8001baa:	000a      	movs	r2, r1
 8001bac:	4013      	ands	r3, r2
 8001bae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d100      	bne.n	8001bb8 <HAL_GPIO_Init+0x28>
 8001bb6:	e138      	b.n	8001e2a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2203      	movs	r2, #3
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d005      	beq.n	8001bd0 <HAL_GPIO_Init+0x40>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2203      	movs	r2, #3
 8001bca:	4013      	ands	r3, r2
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d130      	bne.n	8001c32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	2203      	movs	r2, #3
 8001bdc:	409a      	lsls	r2, r3
 8001bde:	0013      	movs	r3, r2
 8001be0:	43da      	mvns	r2, r3
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	4013      	ands	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	68da      	ldr	r2, [r3, #12]
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	409a      	lsls	r2, r3
 8001bf2:	0013      	movs	r3, r2
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c06:	2201      	movs	r2, #1
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	409a      	lsls	r2, r3
 8001c0c:	0013      	movs	r3, r2
 8001c0e:	43da      	mvns	r2, r3
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	4013      	ands	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	091b      	lsrs	r3, r3, #4
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	401a      	ands	r2, r3
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	409a      	lsls	r2, r3
 8001c24:	0013      	movs	r3, r2
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2203      	movs	r2, #3
 8001c38:	4013      	ands	r3, r2
 8001c3a:	2b03      	cmp	r3, #3
 8001c3c:	d017      	beq.n	8001c6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	2203      	movs	r2, #3
 8001c4a:	409a      	lsls	r2, r3
 8001c4c:	0013      	movs	r3, r2
 8001c4e:	43da      	mvns	r2, r3
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	4013      	ands	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	689a      	ldr	r2, [r3, #8]
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	409a      	lsls	r2, r3
 8001c60:	0013      	movs	r3, r2
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2203      	movs	r2, #3
 8001c74:	4013      	ands	r3, r2
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d123      	bne.n	8001cc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	08da      	lsrs	r2, r3, #3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	3208      	adds	r2, #8
 8001c82:	0092      	lsls	r2, r2, #2
 8001c84:	58d3      	ldr	r3, [r2, r3]
 8001c86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	2207      	movs	r2, #7
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	220f      	movs	r2, #15
 8001c92:	409a      	lsls	r2, r3
 8001c94:	0013      	movs	r3, r2
 8001c96:	43da      	mvns	r2, r3
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	691a      	ldr	r2, [r3, #16]
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	2107      	movs	r1, #7
 8001ca6:	400b      	ands	r3, r1
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	409a      	lsls	r2, r3
 8001cac:	0013      	movs	r3, r2
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	08da      	lsrs	r2, r3, #3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3208      	adds	r2, #8
 8001cbc:	0092      	lsls	r2, r2, #2
 8001cbe:	6939      	ldr	r1, [r7, #16]
 8001cc0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	2203      	movs	r2, #3
 8001cce:	409a      	lsls	r2, r3
 8001cd0:	0013      	movs	r3, r2
 8001cd2:	43da      	mvns	r2, r3
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2203      	movs	r2, #3
 8001ce0:	401a      	ands	r2, r3
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	409a      	lsls	r2, r3
 8001ce8:	0013      	movs	r3, r2
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685a      	ldr	r2, [r3, #4]
 8001cfa:	23c0      	movs	r3, #192	; 0xc0
 8001cfc:	029b      	lsls	r3, r3, #10
 8001cfe:	4013      	ands	r3, r2
 8001d00:	d100      	bne.n	8001d04 <HAL_GPIO_Init+0x174>
 8001d02:	e092      	b.n	8001e2a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001d04:	4a50      	ldr	r2, [pc, #320]	; (8001e48 <HAL_GPIO_Init+0x2b8>)
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	089b      	lsrs	r3, r3, #2
 8001d0a:	3318      	adds	r3, #24
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	589b      	ldr	r3, [r3, r2]
 8001d10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	2203      	movs	r2, #3
 8001d16:	4013      	ands	r3, r2
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	220f      	movs	r2, #15
 8001d1c:	409a      	lsls	r2, r3
 8001d1e:	0013      	movs	r3, r2
 8001d20:	43da      	mvns	r2, r3
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	4013      	ands	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	23a0      	movs	r3, #160	; 0xa0
 8001d2c:	05db      	lsls	r3, r3, #23
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d013      	beq.n	8001d5a <HAL_GPIO_Init+0x1ca>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a45      	ldr	r2, [pc, #276]	; (8001e4c <HAL_GPIO_Init+0x2bc>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d00d      	beq.n	8001d56 <HAL_GPIO_Init+0x1c6>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a44      	ldr	r2, [pc, #272]	; (8001e50 <HAL_GPIO_Init+0x2c0>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d007      	beq.n	8001d52 <HAL_GPIO_Init+0x1c2>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a43      	ldr	r2, [pc, #268]	; (8001e54 <HAL_GPIO_Init+0x2c4>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d101      	bne.n	8001d4e <HAL_GPIO_Init+0x1be>
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e006      	b.n	8001d5c <HAL_GPIO_Init+0x1cc>
 8001d4e:	2305      	movs	r3, #5
 8001d50:	e004      	b.n	8001d5c <HAL_GPIO_Init+0x1cc>
 8001d52:	2302      	movs	r3, #2
 8001d54:	e002      	b.n	8001d5c <HAL_GPIO_Init+0x1cc>
 8001d56:	2301      	movs	r3, #1
 8001d58:	e000      	b.n	8001d5c <HAL_GPIO_Init+0x1cc>
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	697a      	ldr	r2, [r7, #20]
 8001d5e:	2103      	movs	r1, #3
 8001d60:	400a      	ands	r2, r1
 8001d62:	00d2      	lsls	r2, r2, #3
 8001d64:	4093      	lsls	r3, r2
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001d6c:	4936      	ldr	r1, [pc, #216]	; (8001e48 <HAL_GPIO_Init+0x2b8>)
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	089b      	lsrs	r3, r3, #2
 8001d72:	3318      	adds	r3, #24
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d7a:	4b33      	ldr	r3, [pc, #204]	; (8001e48 <HAL_GPIO_Init+0x2b8>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	43da      	mvns	r2, r3
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	4013      	ands	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685a      	ldr	r2, [r3, #4]
 8001d8e:	2380      	movs	r3, #128	; 0x80
 8001d90:	035b      	lsls	r3, r3, #13
 8001d92:	4013      	ands	r3, r2
 8001d94:	d003      	beq.n	8001d9e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d9e:	4b2a      	ldr	r3, [pc, #168]	; (8001e48 <HAL_GPIO_Init+0x2b8>)
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001da4:	4b28      	ldr	r3, [pc, #160]	; (8001e48 <HAL_GPIO_Init+0x2b8>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	43da      	mvns	r2, r3
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	4013      	ands	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	2380      	movs	r3, #128	; 0x80
 8001dba:	039b      	lsls	r3, r3, #14
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	d003      	beq.n	8001dc8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001dc8:	4b1f      	ldr	r3, [pc, #124]	; (8001e48 <HAL_GPIO_Init+0x2b8>)
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001dce:	4a1e      	ldr	r2, [pc, #120]	; (8001e48 <HAL_GPIO_Init+0x2b8>)
 8001dd0:	2384      	movs	r3, #132	; 0x84
 8001dd2:	58d3      	ldr	r3, [r2, r3]
 8001dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	43da      	mvns	r2, r3
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	2380      	movs	r3, #128	; 0x80
 8001de6:	029b      	lsls	r3, r3, #10
 8001de8:	4013      	ands	r3, r2
 8001dea:	d003      	beq.n	8001df4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001df4:	4914      	ldr	r1, [pc, #80]	; (8001e48 <HAL_GPIO_Init+0x2b8>)
 8001df6:	2284      	movs	r2, #132	; 0x84
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001dfc:	4a12      	ldr	r2, [pc, #72]	; (8001e48 <HAL_GPIO_Init+0x2b8>)
 8001dfe:	2380      	movs	r3, #128	; 0x80
 8001e00:	58d3      	ldr	r3, [r2, r3]
 8001e02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	43da      	mvns	r2, r3
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	2380      	movs	r3, #128	; 0x80
 8001e14:	025b      	lsls	r3, r3, #9
 8001e16:	4013      	ands	r3, r2
 8001e18:	d003      	beq.n	8001e22 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e22:	4909      	ldr	r1, [pc, #36]	; (8001e48 <HAL_GPIO_Init+0x2b8>)
 8001e24:	2280      	movs	r2, #128	; 0x80
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	40da      	lsrs	r2, r3
 8001e38:	1e13      	subs	r3, r2, #0
 8001e3a:	d000      	beq.n	8001e3e <HAL_GPIO_Init+0x2ae>
 8001e3c:	e6b0      	b.n	8001ba0 <HAL_GPIO_Init+0x10>
  }
}
 8001e3e:	46c0      	nop			; (mov r8, r8)
 8001e40:	46c0      	nop			; (mov r8, r8)
 8001e42:	46bd      	mov	sp, r7
 8001e44:	b006      	add	sp, #24
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40021800 	.word	0x40021800
 8001e4c:	50000400 	.word	0x50000400
 8001e50:	50000800 	.word	0x50000800
 8001e54:	50000c00 	.word	0x50000c00

08001e58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	0008      	movs	r0, r1
 8001e62:	0011      	movs	r1, r2
 8001e64:	1cbb      	adds	r3, r7, #2
 8001e66:	1c02      	adds	r2, r0, #0
 8001e68:	801a      	strh	r2, [r3, #0]
 8001e6a:	1c7b      	adds	r3, r7, #1
 8001e6c:	1c0a      	adds	r2, r1, #0
 8001e6e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e70:	1c7b      	adds	r3, r7, #1
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d004      	beq.n	8001e82 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e78:	1cbb      	adds	r3, r7, #2
 8001e7a:	881a      	ldrh	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e80:	e003      	b.n	8001e8a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e82:	1cbb      	adds	r3, r7, #2
 8001e84:	881a      	ldrh	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e8a:	46c0      	nop			; (mov r8, r8)
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	b002      	add	sp, #8
 8001e90:	bd80      	pop	{r7, pc}
	...

08001e94 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e98:	4b04      	ldr	r3, [pc, #16]	; (8001eac <HAL_PWR_EnableBkUpAccess+0x18>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	4b03      	ldr	r3, [pc, #12]	; (8001eac <HAL_PWR_EnableBkUpAccess+0x18>)
 8001e9e:	2180      	movs	r1, #128	; 0x80
 8001ea0:	0049      	lsls	r1, r1, #1
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	601a      	str	r2, [r3, #0]
}
 8001ea6:	46c0      	nop			; (mov r8, r8)
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40007000 	.word	0x40007000

08001eb0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001eb8:	4b19      	ldr	r3, [pc, #100]	; (8001f20 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a19      	ldr	r2, [pc, #100]	; (8001f24 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	0019      	movs	r1, r3
 8001ec2:	4b17      	ldr	r3, [pc, #92]	; (8001f20 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	2380      	movs	r3, #128	; 0x80
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d11f      	bne.n	8001f14 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001ed4:	4b14      	ldr	r3, [pc, #80]	; (8001f28 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	0013      	movs	r3, r2
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	189b      	adds	r3, r3, r2
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	4912      	ldr	r1, [pc, #72]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	f7fe f920 	bl	8000128 <__udivsi3>
 8001ee8:	0003      	movs	r3, r0
 8001eea:	3301      	adds	r3, #1
 8001eec:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001eee:	e008      	b.n	8001f02 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	e001      	b.n	8001f02 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e009      	b.n	8001f16 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f02:	4b07      	ldr	r3, [pc, #28]	; (8001f20 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001f04:	695a      	ldr	r2, [r3, #20]
 8001f06:	2380      	movs	r3, #128	; 0x80
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	401a      	ands	r2, r3
 8001f0c:	2380      	movs	r3, #128	; 0x80
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d0ed      	beq.n	8001ef0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	0018      	movs	r0, r3
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	b004      	add	sp, #16
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	46c0      	nop			; (mov r8, r8)
 8001f20:	40007000 	.word	0x40007000
 8001f24:	fffff9ff 	.word	0xfffff9ff
 8001f28:	20000000 	.word	0x20000000
 8001f2c:	000f4240 	.word	0x000f4240

08001f30 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001f34:	4b03      	ldr	r3, [pc, #12]	; (8001f44 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	23e0      	movs	r3, #224	; 0xe0
 8001f3a:	01db      	lsls	r3, r3, #7
 8001f3c:	4013      	ands	r3, r2
}
 8001f3e:	0018      	movs	r0, r3
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40021000 	.word	0x40021000

08001f48 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b088      	sub	sp, #32
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e2fe      	b.n	8002558 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	4013      	ands	r3, r2
 8001f62:	d100      	bne.n	8001f66 <HAL_RCC_OscConfig+0x1e>
 8001f64:	e07c      	b.n	8002060 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f66:	4bc3      	ldr	r3, [pc, #780]	; (8002274 <HAL_RCC_OscConfig+0x32c>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	2238      	movs	r2, #56	; 0x38
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f70:	4bc0      	ldr	r3, [pc, #768]	; (8002274 <HAL_RCC_OscConfig+0x32c>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	2203      	movs	r2, #3
 8001f76:	4013      	ands	r3, r2
 8001f78:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	2b10      	cmp	r3, #16
 8001f7e:	d102      	bne.n	8001f86 <HAL_RCC_OscConfig+0x3e>
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	2b03      	cmp	r3, #3
 8001f84:	d002      	beq.n	8001f8c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	2b08      	cmp	r3, #8
 8001f8a:	d10b      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f8c:	4bb9      	ldr	r3, [pc, #740]	; (8002274 <HAL_RCC_OscConfig+0x32c>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	2380      	movs	r3, #128	; 0x80
 8001f92:	029b      	lsls	r3, r3, #10
 8001f94:	4013      	ands	r3, r2
 8001f96:	d062      	beq.n	800205e <HAL_RCC_OscConfig+0x116>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d15e      	bne.n	800205e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e2d9      	b.n	8002558 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	2380      	movs	r3, #128	; 0x80
 8001faa:	025b      	lsls	r3, r3, #9
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d107      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x78>
 8001fb0:	4bb0      	ldr	r3, [pc, #704]	; (8002274 <HAL_RCC_OscConfig+0x32c>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	4baf      	ldr	r3, [pc, #700]	; (8002274 <HAL_RCC_OscConfig+0x32c>)
 8001fb6:	2180      	movs	r1, #128	; 0x80
 8001fb8:	0249      	lsls	r1, r1, #9
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	e020      	b.n	8002002 <HAL_RCC_OscConfig+0xba>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	23a0      	movs	r3, #160	; 0xa0
 8001fc6:	02db      	lsls	r3, r3, #11
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d10e      	bne.n	8001fea <HAL_RCC_OscConfig+0xa2>
 8001fcc:	4ba9      	ldr	r3, [pc, #676]	; (8002274 <HAL_RCC_OscConfig+0x32c>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	4ba8      	ldr	r3, [pc, #672]	; (8002274 <HAL_RCC_OscConfig+0x32c>)
 8001fd2:	2180      	movs	r1, #128	; 0x80
 8001fd4:	02c9      	lsls	r1, r1, #11
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	4ba6      	ldr	r3, [pc, #664]	; (8002274 <HAL_RCC_OscConfig+0x32c>)
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	4ba5      	ldr	r3, [pc, #660]	; (8002274 <HAL_RCC_OscConfig+0x32c>)
 8001fe0:	2180      	movs	r1, #128	; 0x80
 8001fe2:	0249      	lsls	r1, r1, #9
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	e00b      	b.n	8002002 <HAL_RCC_OscConfig+0xba>
 8001fea:	4ba2      	ldr	r3, [pc, #648]	; (8002274 <HAL_RCC_OscConfig+0x32c>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	4ba1      	ldr	r3, [pc, #644]	; (8002274 <HAL_RCC_OscConfig+0x32c>)
 8001ff0:	49a1      	ldr	r1, [pc, #644]	; (8002278 <HAL_RCC_OscConfig+0x330>)
 8001ff2:	400a      	ands	r2, r1
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	4b9f      	ldr	r3, [pc, #636]	; (8002274 <HAL_RCC_OscConfig+0x32c>)
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	4b9e      	ldr	r3, [pc, #632]	; (8002274 <HAL_RCC_OscConfig+0x32c>)
 8001ffc:	499f      	ldr	r1, [pc, #636]	; (800227c <HAL_RCC_OscConfig+0x334>)
 8001ffe:	400a      	ands	r2, r1
 8002000:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d014      	beq.n	8002034 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200a:	f7ff f997 	bl	800133c <HAL_GetTick>
 800200e:	0003      	movs	r3, r0
 8002010:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002014:	f7ff f992 	bl	800133c <HAL_GetTick>
 8002018:	0002      	movs	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b64      	cmp	r3, #100	; 0x64
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e298      	b.n	8002558 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002026:	4b93      	ldr	r3, [pc, #588]	; (8002274 <HAL_RCC_OscConfig+0x32c>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	2380      	movs	r3, #128	; 0x80
 800202c:	029b      	lsls	r3, r3, #10
 800202e:	4013      	ands	r3, r2
 8002030:	d0f0      	beq.n	8002014 <HAL_RCC_OscConfig+0xcc>
 8002032:	e015      	b.n	8002060 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002034:	f7ff f982 	bl	800133c <HAL_GetTick>
 8002038:	0003      	movs	r3, r0
 800203a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800203c:	e008      	b.n	8002050 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800203e:	f7ff f97d 	bl	800133c <HAL_GetTick>
 8002042:	0002      	movs	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b64      	cmp	r3, #100	; 0x64
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e283      	b.n	8002558 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002050:	4b88      	ldr	r3, [pc, #544]	; (8002274 <HAL_RCC_OscConfig+0x32c>)
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	2380      	movs	r3, #128	; 0x80
 8002056:	029b      	lsls	r3, r3, #10
 8002058:	4013      	ands	r3, r2
 800205a:	d1f0      	bne.n	800203e <HAL_RCC_OscConfig+0xf6>
 800205c:	e000      	b.n	8002060 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800205e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2202      	movs	r2, #2
 8002066:	4013      	ands	r3, r2
 8002068:	d100      	bne.n	800206c <HAL_RCC_OscConfig+0x124>
 800206a:	e099      	b.n	80021a0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800206c:	4b81      	ldr	r3, [pc, #516]	; (8002274 <HAL_RCC_OscConfig+0x32c>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	2238      	movs	r2, #56	; 0x38
 8002072:	4013      	ands	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002076:	4b7f      	ldr	r3, [pc, #508]	; (8002274 <HAL_RCC_OscConfig+0x32c>)
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	2203      	movs	r2, #3
 800207c:	4013      	ands	r3, r2
 800207e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	2b10      	cmp	r3, #16
 8002084:	d102      	bne.n	800208c <HAL_RCC_OscConfig+0x144>
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	2b02      	cmp	r3, #2
 800208a:	d002      	beq.n	8002092 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d135      	bne.n	80020fe <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002092:	4b78      	ldr	r3, [pc, #480]	; (8002274 <HAL_RCC_OscConfig+0x32c>)
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	2380      	movs	r3, #128	; 0x80
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	4013      	ands	r3, r2
 800209c:	d005      	beq.n	80020aa <HAL_RCC_OscConfig+0x162>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e256      	b.n	8002558 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020aa:	4b72      	ldr	r3, [pc, #456]	; (8002274 <HAL_RCC_OscConfig+0x32c>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	4a74      	ldr	r2, [pc, #464]	; (8002280 <HAL_RCC_OscConfig+0x338>)
 80020b0:	4013      	ands	r3, r2
 80020b2:	0019      	movs	r1, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	021a      	lsls	r2, r3, #8
 80020ba:	4b6e      	ldr	r3, [pc, #440]	; (8002274 <HAL_RCC_OscConfig+0x32c>)
 80020bc:	430a      	orrs	r2, r1
 80020be:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d112      	bne.n	80020ec <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80020c6:	4b6b      	ldr	r3, [pc, #428]	; (8002274 <HAL_RCC_OscConfig+0x32c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a6e      	ldr	r2, [pc, #440]	; (8002284 <HAL_RCC_OscConfig+0x33c>)
 80020cc:	4013      	ands	r3, r2
 80020ce:	0019      	movs	r1, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	691a      	ldr	r2, [r3, #16]
 80020d4:	4b67      	ldr	r3, [pc, #412]	; (8002274 <HAL_RCC_OscConfig+0x32c>)
 80020d6:	430a      	orrs	r2, r1
 80020d8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80020da:	4b66      	ldr	r3, [pc, #408]	; (8002274 <HAL_RCC_OscConfig+0x32c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	0adb      	lsrs	r3, r3, #11
 80020e0:	2207      	movs	r2, #7
 80020e2:	4013      	ands	r3, r2
 80020e4:	4a68      	ldr	r2, [pc, #416]	; (8002288 <HAL_RCC_OscConfig+0x340>)
 80020e6:	40da      	lsrs	r2, r3
 80020e8:	4b68      	ldr	r3, [pc, #416]	; (800228c <HAL_RCC_OscConfig+0x344>)
 80020ea:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80020ec:	4b68      	ldr	r3, [pc, #416]	; (8002290 <HAL_RCC_OscConfig+0x348>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	0018      	movs	r0, r3
 80020f2:	f7ff f8c7 	bl	8001284 <HAL_InitTick>
 80020f6:	1e03      	subs	r3, r0, #0
 80020f8:	d051      	beq.n	800219e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e22c      	b.n	8002558 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d030      	beq.n	8002168 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002106:	4b5b      	ldr	r3, [pc, #364]	; (8002274 <HAL_RCC_OscConfig+0x32c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a5e      	ldr	r2, [pc, #376]	; (8002284 <HAL_RCC_OscConfig+0x33c>)
 800210c:	4013      	ands	r3, r2
 800210e:	0019      	movs	r1, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	691a      	ldr	r2, [r3, #16]
 8002114:	4b57      	ldr	r3, [pc, #348]	; (8002274 <HAL_RCC_OscConfig+0x32c>)
 8002116:	430a      	orrs	r2, r1
 8002118:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800211a:	4b56      	ldr	r3, [pc, #344]	; (8002274 <HAL_RCC_OscConfig+0x32c>)
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	4b55      	ldr	r3, [pc, #340]	; (8002274 <HAL_RCC_OscConfig+0x32c>)
 8002120:	2180      	movs	r1, #128	; 0x80
 8002122:	0049      	lsls	r1, r1, #1
 8002124:	430a      	orrs	r2, r1
 8002126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002128:	f7ff f908 	bl	800133c <HAL_GetTick>
 800212c:	0003      	movs	r3, r0
 800212e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002130:	e008      	b.n	8002144 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002132:	f7ff f903 	bl	800133c <HAL_GetTick>
 8002136:	0002      	movs	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e209      	b.n	8002558 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002144:	4b4b      	ldr	r3, [pc, #300]	; (8002274 <HAL_RCC_OscConfig+0x32c>)
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	2380      	movs	r3, #128	; 0x80
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	4013      	ands	r3, r2
 800214e:	d0f0      	beq.n	8002132 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002150:	4b48      	ldr	r3, [pc, #288]	; (8002274 <HAL_RCC_OscConfig+0x32c>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	4a4a      	ldr	r2, [pc, #296]	; (8002280 <HAL_RCC_OscConfig+0x338>)
 8002156:	4013      	ands	r3, r2
 8002158:	0019      	movs	r1, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	021a      	lsls	r2, r3, #8
 8002160:	4b44      	ldr	r3, [pc, #272]	; (8002274 <HAL_RCC_OscConfig+0x32c>)
 8002162:	430a      	orrs	r2, r1
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	e01b      	b.n	80021a0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002168:	4b42      	ldr	r3, [pc, #264]	; (8002274 <HAL_RCC_OscConfig+0x32c>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	4b41      	ldr	r3, [pc, #260]	; (8002274 <HAL_RCC_OscConfig+0x32c>)
 800216e:	4949      	ldr	r1, [pc, #292]	; (8002294 <HAL_RCC_OscConfig+0x34c>)
 8002170:	400a      	ands	r2, r1
 8002172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002174:	f7ff f8e2 	bl	800133c <HAL_GetTick>
 8002178:	0003      	movs	r3, r0
 800217a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800217c:	e008      	b.n	8002190 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800217e:	f7ff f8dd 	bl	800133c <HAL_GetTick>
 8002182:	0002      	movs	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e1e3      	b.n	8002558 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002190:	4b38      	ldr	r3, [pc, #224]	; (8002274 <HAL_RCC_OscConfig+0x32c>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	2380      	movs	r3, #128	; 0x80
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	4013      	ands	r3, r2
 800219a:	d1f0      	bne.n	800217e <HAL_RCC_OscConfig+0x236>
 800219c:	e000      	b.n	80021a0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800219e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2208      	movs	r2, #8
 80021a6:	4013      	ands	r3, r2
 80021a8:	d047      	beq.n	800223a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80021aa:	4b32      	ldr	r3, [pc, #200]	; (8002274 <HAL_RCC_OscConfig+0x32c>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	2238      	movs	r2, #56	; 0x38
 80021b0:	4013      	ands	r3, r2
 80021b2:	2b18      	cmp	r3, #24
 80021b4:	d10a      	bne.n	80021cc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80021b6:	4b2f      	ldr	r3, [pc, #188]	; (8002274 <HAL_RCC_OscConfig+0x32c>)
 80021b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ba:	2202      	movs	r2, #2
 80021bc:	4013      	ands	r3, r2
 80021be:	d03c      	beq.n	800223a <HAL_RCC_OscConfig+0x2f2>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d138      	bne.n	800223a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e1c5      	b.n	8002558 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d019      	beq.n	8002208 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80021d4:	4b27      	ldr	r3, [pc, #156]	; (8002274 <HAL_RCC_OscConfig+0x32c>)
 80021d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021d8:	4b26      	ldr	r3, [pc, #152]	; (8002274 <HAL_RCC_OscConfig+0x32c>)
 80021da:	2101      	movs	r1, #1
 80021dc:	430a      	orrs	r2, r1
 80021de:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e0:	f7ff f8ac 	bl	800133c <HAL_GetTick>
 80021e4:	0003      	movs	r3, r0
 80021e6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021e8:	e008      	b.n	80021fc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ea:	f7ff f8a7 	bl	800133c <HAL_GetTick>
 80021ee:	0002      	movs	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e1ad      	b.n	8002558 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021fc:	4b1d      	ldr	r3, [pc, #116]	; (8002274 <HAL_RCC_OscConfig+0x32c>)
 80021fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002200:	2202      	movs	r2, #2
 8002202:	4013      	ands	r3, r2
 8002204:	d0f1      	beq.n	80021ea <HAL_RCC_OscConfig+0x2a2>
 8002206:	e018      	b.n	800223a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002208:	4b1a      	ldr	r3, [pc, #104]	; (8002274 <HAL_RCC_OscConfig+0x32c>)
 800220a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800220c:	4b19      	ldr	r3, [pc, #100]	; (8002274 <HAL_RCC_OscConfig+0x32c>)
 800220e:	2101      	movs	r1, #1
 8002210:	438a      	bics	r2, r1
 8002212:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002214:	f7ff f892 	bl	800133c <HAL_GetTick>
 8002218:	0003      	movs	r3, r0
 800221a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800221c:	e008      	b.n	8002230 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800221e:	f7ff f88d 	bl	800133c <HAL_GetTick>
 8002222:	0002      	movs	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e193      	b.n	8002558 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002230:	4b10      	ldr	r3, [pc, #64]	; (8002274 <HAL_RCC_OscConfig+0x32c>)
 8002232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002234:	2202      	movs	r2, #2
 8002236:	4013      	ands	r3, r2
 8002238:	d1f1      	bne.n	800221e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2204      	movs	r2, #4
 8002240:	4013      	ands	r3, r2
 8002242:	d100      	bne.n	8002246 <HAL_RCC_OscConfig+0x2fe>
 8002244:	e0c6      	b.n	80023d4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002246:	231f      	movs	r3, #31
 8002248:	18fb      	adds	r3, r7, r3
 800224a:	2200      	movs	r2, #0
 800224c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800224e:	4b09      	ldr	r3, [pc, #36]	; (8002274 <HAL_RCC_OscConfig+0x32c>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	2238      	movs	r2, #56	; 0x38
 8002254:	4013      	ands	r3, r2
 8002256:	2b20      	cmp	r3, #32
 8002258:	d11e      	bne.n	8002298 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800225a:	4b06      	ldr	r3, [pc, #24]	; (8002274 <HAL_RCC_OscConfig+0x32c>)
 800225c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800225e:	2202      	movs	r2, #2
 8002260:	4013      	ands	r3, r2
 8002262:	d100      	bne.n	8002266 <HAL_RCC_OscConfig+0x31e>
 8002264:	e0b6      	b.n	80023d4 <HAL_RCC_OscConfig+0x48c>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d000      	beq.n	8002270 <HAL_RCC_OscConfig+0x328>
 800226e:	e0b1      	b.n	80023d4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e171      	b.n	8002558 <HAL_RCC_OscConfig+0x610>
 8002274:	40021000 	.word	0x40021000
 8002278:	fffeffff 	.word	0xfffeffff
 800227c:	fffbffff 	.word	0xfffbffff
 8002280:	ffff80ff 	.word	0xffff80ff
 8002284:	ffffc7ff 	.word	0xffffc7ff
 8002288:	00f42400 	.word	0x00f42400
 800228c:	20000000 	.word	0x20000000
 8002290:	20000004 	.word	0x20000004
 8002294:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002298:	4bb1      	ldr	r3, [pc, #708]	; (8002560 <HAL_RCC_OscConfig+0x618>)
 800229a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800229c:	2380      	movs	r3, #128	; 0x80
 800229e:	055b      	lsls	r3, r3, #21
 80022a0:	4013      	ands	r3, r2
 80022a2:	d101      	bne.n	80022a8 <HAL_RCC_OscConfig+0x360>
 80022a4:	2301      	movs	r3, #1
 80022a6:	e000      	b.n	80022aa <HAL_RCC_OscConfig+0x362>
 80022a8:	2300      	movs	r3, #0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d011      	beq.n	80022d2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80022ae:	4bac      	ldr	r3, [pc, #688]	; (8002560 <HAL_RCC_OscConfig+0x618>)
 80022b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022b2:	4bab      	ldr	r3, [pc, #684]	; (8002560 <HAL_RCC_OscConfig+0x618>)
 80022b4:	2180      	movs	r1, #128	; 0x80
 80022b6:	0549      	lsls	r1, r1, #21
 80022b8:	430a      	orrs	r2, r1
 80022ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80022bc:	4ba8      	ldr	r3, [pc, #672]	; (8002560 <HAL_RCC_OscConfig+0x618>)
 80022be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022c0:	2380      	movs	r3, #128	; 0x80
 80022c2:	055b      	lsls	r3, r3, #21
 80022c4:	4013      	ands	r3, r2
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80022ca:	231f      	movs	r3, #31
 80022cc:	18fb      	adds	r3, r7, r3
 80022ce:	2201      	movs	r2, #1
 80022d0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022d2:	4ba4      	ldr	r3, [pc, #656]	; (8002564 <HAL_RCC_OscConfig+0x61c>)
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	2380      	movs	r3, #128	; 0x80
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	4013      	ands	r3, r2
 80022dc:	d11a      	bne.n	8002314 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022de:	4ba1      	ldr	r3, [pc, #644]	; (8002564 <HAL_RCC_OscConfig+0x61c>)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	4ba0      	ldr	r3, [pc, #640]	; (8002564 <HAL_RCC_OscConfig+0x61c>)
 80022e4:	2180      	movs	r1, #128	; 0x80
 80022e6:	0049      	lsls	r1, r1, #1
 80022e8:	430a      	orrs	r2, r1
 80022ea:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80022ec:	f7ff f826 	bl	800133c <HAL_GetTick>
 80022f0:	0003      	movs	r3, r0
 80022f2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022f4:	e008      	b.n	8002308 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022f6:	f7ff f821 	bl	800133c <HAL_GetTick>
 80022fa:	0002      	movs	r2, r0
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e127      	b.n	8002558 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002308:	4b96      	ldr	r3, [pc, #600]	; (8002564 <HAL_RCC_OscConfig+0x61c>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	2380      	movs	r3, #128	; 0x80
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	4013      	ands	r3, r2
 8002312:	d0f0      	beq.n	80022f6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d106      	bne.n	800232a <HAL_RCC_OscConfig+0x3e2>
 800231c:	4b90      	ldr	r3, [pc, #576]	; (8002560 <HAL_RCC_OscConfig+0x618>)
 800231e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002320:	4b8f      	ldr	r3, [pc, #572]	; (8002560 <HAL_RCC_OscConfig+0x618>)
 8002322:	2101      	movs	r1, #1
 8002324:	430a      	orrs	r2, r1
 8002326:	65da      	str	r2, [r3, #92]	; 0x5c
 8002328:	e01c      	b.n	8002364 <HAL_RCC_OscConfig+0x41c>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	2b05      	cmp	r3, #5
 8002330:	d10c      	bne.n	800234c <HAL_RCC_OscConfig+0x404>
 8002332:	4b8b      	ldr	r3, [pc, #556]	; (8002560 <HAL_RCC_OscConfig+0x618>)
 8002334:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002336:	4b8a      	ldr	r3, [pc, #552]	; (8002560 <HAL_RCC_OscConfig+0x618>)
 8002338:	2104      	movs	r1, #4
 800233a:	430a      	orrs	r2, r1
 800233c:	65da      	str	r2, [r3, #92]	; 0x5c
 800233e:	4b88      	ldr	r3, [pc, #544]	; (8002560 <HAL_RCC_OscConfig+0x618>)
 8002340:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002342:	4b87      	ldr	r3, [pc, #540]	; (8002560 <HAL_RCC_OscConfig+0x618>)
 8002344:	2101      	movs	r1, #1
 8002346:	430a      	orrs	r2, r1
 8002348:	65da      	str	r2, [r3, #92]	; 0x5c
 800234a:	e00b      	b.n	8002364 <HAL_RCC_OscConfig+0x41c>
 800234c:	4b84      	ldr	r3, [pc, #528]	; (8002560 <HAL_RCC_OscConfig+0x618>)
 800234e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002350:	4b83      	ldr	r3, [pc, #524]	; (8002560 <HAL_RCC_OscConfig+0x618>)
 8002352:	2101      	movs	r1, #1
 8002354:	438a      	bics	r2, r1
 8002356:	65da      	str	r2, [r3, #92]	; 0x5c
 8002358:	4b81      	ldr	r3, [pc, #516]	; (8002560 <HAL_RCC_OscConfig+0x618>)
 800235a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800235c:	4b80      	ldr	r3, [pc, #512]	; (8002560 <HAL_RCC_OscConfig+0x618>)
 800235e:	2104      	movs	r1, #4
 8002360:	438a      	bics	r2, r1
 8002362:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d014      	beq.n	8002396 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236c:	f7fe ffe6 	bl	800133c <HAL_GetTick>
 8002370:	0003      	movs	r3, r0
 8002372:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002374:	e009      	b.n	800238a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002376:	f7fe ffe1 	bl	800133c <HAL_GetTick>
 800237a:	0002      	movs	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	4a79      	ldr	r2, [pc, #484]	; (8002568 <HAL_RCC_OscConfig+0x620>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e0e6      	b.n	8002558 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800238a:	4b75      	ldr	r3, [pc, #468]	; (8002560 <HAL_RCC_OscConfig+0x618>)
 800238c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800238e:	2202      	movs	r2, #2
 8002390:	4013      	ands	r3, r2
 8002392:	d0f0      	beq.n	8002376 <HAL_RCC_OscConfig+0x42e>
 8002394:	e013      	b.n	80023be <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002396:	f7fe ffd1 	bl	800133c <HAL_GetTick>
 800239a:	0003      	movs	r3, r0
 800239c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800239e:	e009      	b.n	80023b4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a0:	f7fe ffcc 	bl	800133c <HAL_GetTick>
 80023a4:	0002      	movs	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	4a6f      	ldr	r2, [pc, #444]	; (8002568 <HAL_RCC_OscConfig+0x620>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e0d1      	b.n	8002558 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023b4:	4b6a      	ldr	r3, [pc, #424]	; (8002560 <HAL_RCC_OscConfig+0x618>)
 80023b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b8:	2202      	movs	r2, #2
 80023ba:	4013      	ands	r3, r2
 80023bc:	d1f0      	bne.n	80023a0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80023be:	231f      	movs	r3, #31
 80023c0:	18fb      	adds	r3, r7, r3
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d105      	bne.n	80023d4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80023c8:	4b65      	ldr	r3, [pc, #404]	; (8002560 <HAL_RCC_OscConfig+0x618>)
 80023ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023cc:	4b64      	ldr	r3, [pc, #400]	; (8002560 <HAL_RCC_OscConfig+0x618>)
 80023ce:	4967      	ldr	r1, [pc, #412]	; (800256c <HAL_RCC_OscConfig+0x624>)
 80023d0:	400a      	ands	r2, r1
 80023d2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	69db      	ldr	r3, [r3, #28]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d100      	bne.n	80023de <HAL_RCC_OscConfig+0x496>
 80023dc:	e0bb      	b.n	8002556 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023de:	4b60      	ldr	r3, [pc, #384]	; (8002560 <HAL_RCC_OscConfig+0x618>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	2238      	movs	r2, #56	; 0x38
 80023e4:	4013      	ands	r3, r2
 80023e6:	2b10      	cmp	r3, #16
 80023e8:	d100      	bne.n	80023ec <HAL_RCC_OscConfig+0x4a4>
 80023ea:	e07b      	b.n	80024e4 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	69db      	ldr	r3, [r3, #28]
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d156      	bne.n	80024a2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f4:	4b5a      	ldr	r3, [pc, #360]	; (8002560 <HAL_RCC_OscConfig+0x618>)
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	4b59      	ldr	r3, [pc, #356]	; (8002560 <HAL_RCC_OscConfig+0x618>)
 80023fa:	495d      	ldr	r1, [pc, #372]	; (8002570 <HAL_RCC_OscConfig+0x628>)
 80023fc:	400a      	ands	r2, r1
 80023fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002400:	f7fe ff9c 	bl	800133c <HAL_GetTick>
 8002404:	0003      	movs	r3, r0
 8002406:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002408:	e008      	b.n	800241c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800240a:	f7fe ff97 	bl	800133c <HAL_GetTick>
 800240e:	0002      	movs	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e09d      	b.n	8002558 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800241c:	4b50      	ldr	r3, [pc, #320]	; (8002560 <HAL_RCC_OscConfig+0x618>)
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	2380      	movs	r3, #128	; 0x80
 8002422:	049b      	lsls	r3, r3, #18
 8002424:	4013      	ands	r3, r2
 8002426:	d1f0      	bne.n	800240a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002428:	4b4d      	ldr	r3, [pc, #308]	; (8002560 <HAL_RCC_OscConfig+0x618>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	4a51      	ldr	r2, [pc, #324]	; (8002574 <HAL_RCC_OscConfig+0x62c>)
 800242e:	4013      	ands	r3, r2
 8002430:	0019      	movs	r1, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a1a      	ldr	r2, [r3, #32]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	431a      	orrs	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002440:	021b      	lsls	r3, r3, #8
 8002442:	431a      	orrs	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002448:	431a      	orrs	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	431a      	orrs	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002454:	431a      	orrs	r2, r3
 8002456:	4b42      	ldr	r3, [pc, #264]	; (8002560 <HAL_RCC_OscConfig+0x618>)
 8002458:	430a      	orrs	r2, r1
 800245a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800245c:	4b40      	ldr	r3, [pc, #256]	; (8002560 <HAL_RCC_OscConfig+0x618>)
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	4b3f      	ldr	r3, [pc, #252]	; (8002560 <HAL_RCC_OscConfig+0x618>)
 8002462:	2180      	movs	r1, #128	; 0x80
 8002464:	0449      	lsls	r1, r1, #17
 8002466:	430a      	orrs	r2, r1
 8002468:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800246a:	4b3d      	ldr	r3, [pc, #244]	; (8002560 <HAL_RCC_OscConfig+0x618>)
 800246c:	68da      	ldr	r2, [r3, #12]
 800246e:	4b3c      	ldr	r3, [pc, #240]	; (8002560 <HAL_RCC_OscConfig+0x618>)
 8002470:	2180      	movs	r1, #128	; 0x80
 8002472:	0549      	lsls	r1, r1, #21
 8002474:	430a      	orrs	r2, r1
 8002476:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002478:	f7fe ff60 	bl	800133c <HAL_GetTick>
 800247c:	0003      	movs	r3, r0
 800247e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002480:	e008      	b.n	8002494 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002482:	f7fe ff5b 	bl	800133c <HAL_GetTick>
 8002486:	0002      	movs	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e061      	b.n	8002558 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002494:	4b32      	ldr	r3, [pc, #200]	; (8002560 <HAL_RCC_OscConfig+0x618>)
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	2380      	movs	r3, #128	; 0x80
 800249a:	049b      	lsls	r3, r3, #18
 800249c:	4013      	ands	r3, r2
 800249e:	d0f0      	beq.n	8002482 <HAL_RCC_OscConfig+0x53a>
 80024a0:	e059      	b.n	8002556 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a2:	4b2f      	ldr	r3, [pc, #188]	; (8002560 <HAL_RCC_OscConfig+0x618>)
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	4b2e      	ldr	r3, [pc, #184]	; (8002560 <HAL_RCC_OscConfig+0x618>)
 80024a8:	4931      	ldr	r1, [pc, #196]	; (8002570 <HAL_RCC_OscConfig+0x628>)
 80024aa:	400a      	ands	r2, r1
 80024ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ae:	f7fe ff45 	bl	800133c <HAL_GetTick>
 80024b2:	0003      	movs	r3, r0
 80024b4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b8:	f7fe ff40 	bl	800133c <HAL_GetTick>
 80024bc:	0002      	movs	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e046      	b.n	8002558 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024ca:	4b25      	ldr	r3, [pc, #148]	; (8002560 <HAL_RCC_OscConfig+0x618>)
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	2380      	movs	r3, #128	; 0x80
 80024d0:	049b      	lsls	r3, r3, #18
 80024d2:	4013      	ands	r3, r2
 80024d4:	d1f0      	bne.n	80024b8 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80024d6:	4b22      	ldr	r3, [pc, #136]	; (8002560 <HAL_RCC_OscConfig+0x618>)
 80024d8:	68da      	ldr	r2, [r3, #12]
 80024da:	4b21      	ldr	r3, [pc, #132]	; (8002560 <HAL_RCC_OscConfig+0x618>)
 80024dc:	4926      	ldr	r1, [pc, #152]	; (8002578 <HAL_RCC_OscConfig+0x630>)
 80024de:	400a      	ands	r2, r1
 80024e0:	60da      	str	r2, [r3, #12]
 80024e2:	e038      	b.n	8002556 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	69db      	ldr	r3, [r3, #28]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d101      	bne.n	80024f0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e033      	b.n	8002558 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80024f0:	4b1b      	ldr	r3, [pc, #108]	; (8002560 <HAL_RCC_OscConfig+0x618>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	2203      	movs	r2, #3
 80024fa:	401a      	ands	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	429a      	cmp	r2, r3
 8002502:	d126      	bne.n	8002552 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	2270      	movs	r2, #112	; 0x70
 8002508:	401a      	ands	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800250e:	429a      	cmp	r2, r3
 8002510:	d11f      	bne.n	8002552 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	23fe      	movs	r3, #254	; 0xfe
 8002516:	01db      	lsls	r3, r3, #7
 8002518:	401a      	ands	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002520:	429a      	cmp	r2, r3
 8002522:	d116      	bne.n	8002552 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002524:	697a      	ldr	r2, [r7, #20]
 8002526:	23f8      	movs	r3, #248	; 0xf8
 8002528:	039b      	lsls	r3, r3, #14
 800252a:	401a      	ands	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002530:	429a      	cmp	r2, r3
 8002532:	d10e      	bne.n	8002552 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	23e0      	movs	r3, #224	; 0xe0
 8002538:	051b      	lsls	r3, r3, #20
 800253a:	401a      	ands	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002540:	429a      	cmp	r2, r3
 8002542:	d106      	bne.n	8002552 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	0f5b      	lsrs	r3, r3, #29
 8002548:	075a      	lsls	r2, r3, #29
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800254e:	429a      	cmp	r2, r3
 8002550:	d001      	beq.n	8002556 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e000      	b.n	8002558 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	0018      	movs	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	b008      	add	sp, #32
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40021000 	.word	0x40021000
 8002564:	40007000 	.word	0x40007000
 8002568:	00001388 	.word	0x00001388
 800256c:	efffffff 	.word	0xefffffff
 8002570:	feffffff 	.word	0xfeffffff
 8002574:	11c1808c 	.word	0x11c1808c
 8002578:	eefefffc 	.word	0xeefefffc

0800257c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e0e9      	b.n	8002764 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002590:	4b76      	ldr	r3, [pc, #472]	; (800276c <HAL_RCC_ClockConfig+0x1f0>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2207      	movs	r2, #7
 8002596:	4013      	ands	r3, r2
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	429a      	cmp	r2, r3
 800259c:	d91e      	bls.n	80025dc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259e:	4b73      	ldr	r3, [pc, #460]	; (800276c <HAL_RCC_ClockConfig+0x1f0>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2207      	movs	r2, #7
 80025a4:	4393      	bics	r3, r2
 80025a6:	0019      	movs	r1, r3
 80025a8:	4b70      	ldr	r3, [pc, #448]	; (800276c <HAL_RCC_ClockConfig+0x1f0>)
 80025aa:	683a      	ldr	r2, [r7, #0]
 80025ac:	430a      	orrs	r2, r1
 80025ae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80025b0:	f7fe fec4 	bl	800133c <HAL_GetTick>
 80025b4:	0003      	movs	r3, r0
 80025b6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025b8:	e009      	b.n	80025ce <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ba:	f7fe febf 	bl	800133c <HAL_GetTick>
 80025be:	0002      	movs	r2, r0
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	4a6a      	ldr	r2, [pc, #424]	; (8002770 <HAL_RCC_ClockConfig+0x1f4>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e0ca      	b.n	8002764 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025ce:	4b67      	ldr	r3, [pc, #412]	; (800276c <HAL_RCC_ClockConfig+0x1f0>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2207      	movs	r2, #7
 80025d4:	4013      	ands	r3, r2
 80025d6:	683a      	ldr	r2, [r7, #0]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d1ee      	bne.n	80025ba <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2202      	movs	r2, #2
 80025e2:	4013      	ands	r3, r2
 80025e4:	d015      	beq.n	8002612 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2204      	movs	r2, #4
 80025ec:	4013      	ands	r3, r2
 80025ee:	d006      	beq.n	80025fe <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80025f0:	4b60      	ldr	r3, [pc, #384]	; (8002774 <HAL_RCC_ClockConfig+0x1f8>)
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	4b5f      	ldr	r3, [pc, #380]	; (8002774 <HAL_RCC_ClockConfig+0x1f8>)
 80025f6:	21e0      	movs	r1, #224	; 0xe0
 80025f8:	01c9      	lsls	r1, r1, #7
 80025fa:	430a      	orrs	r2, r1
 80025fc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025fe:	4b5d      	ldr	r3, [pc, #372]	; (8002774 <HAL_RCC_ClockConfig+0x1f8>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	4a5d      	ldr	r2, [pc, #372]	; (8002778 <HAL_RCC_ClockConfig+0x1fc>)
 8002604:	4013      	ands	r3, r2
 8002606:	0019      	movs	r1, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	4b59      	ldr	r3, [pc, #356]	; (8002774 <HAL_RCC_ClockConfig+0x1f8>)
 800260e:	430a      	orrs	r2, r1
 8002610:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2201      	movs	r2, #1
 8002618:	4013      	ands	r3, r2
 800261a:	d057      	beq.n	80026cc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d107      	bne.n	8002634 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002624:	4b53      	ldr	r3, [pc, #332]	; (8002774 <HAL_RCC_ClockConfig+0x1f8>)
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	2380      	movs	r3, #128	; 0x80
 800262a:	029b      	lsls	r3, r3, #10
 800262c:	4013      	ands	r3, r2
 800262e:	d12b      	bne.n	8002688 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e097      	b.n	8002764 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2b02      	cmp	r3, #2
 800263a:	d107      	bne.n	800264c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800263c:	4b4d      	ldr	r3, [pc, #308]	; (8002774 <HAL_RCC_ClockConfig+0x1f8>)
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	2380      	movs	r3, #128	; 0x80
 8002642:	049b      	lsls	r3, r3, #18
 8002644:	4013      	ands	r3, r2
 8002646:	d11f      	bne.n	8002688 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e08b      	b.n	8002764 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d107      	bne.n	8002664 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002654:	4b47      	ldr	r3, [pc, #284]	; (8002774 <HAL_RCC_ClockConfig+0x1f8>)
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	2380      	movs	r3, #128	; 0x80
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	4013      	ands	r3, r2
 800265e:	d113      	bne.n	8002688 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e07f      	b.n	8002764 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2b03      	cmp	r3, #3
 800266a:	d106      	bne.n	800267a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800266c:	4b41      	ldr	r3, [pc, #260]	; (8002774 <HAL_RCC_ClockConfig+0x1f8>)
 800266e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002670:	2202      	movs	r2, #2
 8002672:	4013      	ands	r3, r2
 8002674:	d108      	bne.n	8002688 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e074      	b.n	8002764 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800267a:	4b3e      	ldr	r3, [pc, #248]	; (8002774 <HAL_RCC_ClockConfig+0x1f8>)
 800267c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267e:	2202      	movs	r2, #2
 8002680:	4013      	ands	r3, r2
 8002682:	d101      	bne.n	8002688 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e06d      	b.n	8002764 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002688:	4b3a      	ldr	r3, [pc, #232]	; (8002774 <HAL_RCC_ClockConfig+0x1f8>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	2207      	movs	r2, #7
 800268e:	4393      	bics	r3, r2
 8002690:	0019      	movs	r1, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	4b37      	ldr	r3, [pc, #220]	; (8002774 <HAL_RCC_ClockConfig+0x1f8>)
 8002698:	430a      	orrs	r2, r1
 800269a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800269c:	f7fe fe4e 	bl	800133c <HAL_GetTick>
 80026a0:	0003      	movs	r3, r0
 80026a2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026a4:	e009      	b.n	80026ba <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026a6:	f7fe fe49 	bl	800133c <HAL_GetTick>
 80026aa:	0002      	movs	r2, r0
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	4a2f      	ldr	r2, [pc, #188]	; (8002770 <HAL_RCC_ClockConfig+0x1f4>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e054      	b.n	8002764 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ba:	4b2e      	ldr	r3, [pc, #184]	; (8002774 <HAL_RCC_ClockConfig+0x1f8>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	2238      	movs	r2, #56	; 0x38
 80026c0:	401a      	ands	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d1ec      	bne.n	80026a6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026cc:	4b27      	ldr	r3, [pc, #156]	; (800276c <HAL_RCC_ClockConfig+0x1f0>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2207      	movs	r2, #7
 80026d2:	4013      	ands	r3, r2
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d21e      	bcs.n	8002718 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026da:	4b24      	ldr	r3, [pc, #144]	; (800276c <HAL_RCC_ClockConfig+0x1f0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2207      	movs	r2, #7
 80026e0:	4393      	bics	r3, r2
 80026e2:	0019      	movs	r1, r3
 80026e4:	4b21      	ldr	r3, [pc, #132]	; (800276c <HAL_RCC_ClockConfig+0x1f0>)
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80026ec:	f7fe fe26 	bl	800133c <HAL_GetTick>
 80026f0:	0003      	movs	r3, r0
 80026f2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80026f4:	e009      	b.n	800270a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f6:	f7fe fe21 	bl	800133c <HAL_GetTick>
 80026fa:	0002      	movs	r2, r0
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	4a1b      	ldr	r2, [pc, #108]	; (8002770 <HAL_RCC_ClockConfig+0x1f4>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d901      	bls.n	800270a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e02c      	b.n	8002764 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800270a:	4b18      	ldr	r3, [pc, #96]	; (800276c <HAL_RCC_ClockConfig+0x1f0>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2207      	movs	r2, #7
 8002710:	4013      	ands	r3, r2
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d1ee      	bne.n	80026f6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2204      	movs	r2, #4
 800271e:	4013      	ands	r3, r2
 8002720:	d009      	beq.n	8002736 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002722:	4b14      	ldr	r3, [pc, #80]	; (8002774 <HAL_RCC_ClockConfig+0x1f8>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	4a15      	ldr	r2, [pc, #84]	; (800277c <HAL_RCC_ClockConfig+0x200>)
 8002728:	4013      	ands	r3, r2
 800272a:	0019      	movs	r1, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68da      	ldr	r2, [r3, #12]
 8002730:	4b10      	ldr	r3, [pc, #64]	; (8002774 <HAL_RCC_ClockConfig+0x1f8>)
 8002732:	430a      	orrs	r2, r1
 8002734:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002736:	f000 f829 	bl	800278c <HAL_RCC_GetSysClockFreq>
 800273a:	0001      	movs	r1, r0
 800273c:	4b0d      	ldr	r3, [pc, #52]	; (8002774 <HAL_RCC_ClockConfig+0x1f8>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	0a1b      	lsrs	r3, r3, #8
 8002742:	220f      	movs	r2, #15
 8002744:	401a      	ands	r2, r3
 8002746:	4b0e      	ldr	r3, [pc, #56]	; (8002780 <HAL_RCC_ClockConfig+0x204>)
 8002748:	0092      	lsls	r2, r2, #2
 800274a:	58d3      	ldr	r3, [r2, r3]
 800274c:	221f      	movs	r2, #31
 800274e:	4013      	ands	r3, r2
 8002750:	000a      	movs	r2, r1
 8002752:	40da      	lsrs	r2, r3
 8002754:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <HAL_RCC_ClockConfig+0x208>)
 8002756:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002758:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <HAL_RCC_ClockConfig+0x20c>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	0018      	movs	r0, r3
 800275e:	f7fe fd91 	bl	8001284 <HAL_InitTick>
 8002762:	0003      	movs	r3, r0
}
 8002764:	0018      	movs	r0, r3
 8002766:	46bd      	mov	sp, r7
 8002768:	b004      	add	sp, #16
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40022000 	.word	0x40022000
 8002770:	00001388 	.word	0x00001388
 8002774:	40021000 	.word	0x40021000
 8002778:	fffff0ff 	.word	0xfffff0ff
 800277c:	ffff8fff 	.word	0xffff8fff
 8002780:	08006674 	.word	0x08006674
 8002784:	20000000 	.word	0x20000000
 8002788:	20000004 	.word	0x20000004

0800278c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002792:	4b3c      	ldr	r3, [pc, #240]	; (8002884 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	2238      	movs	r2, #56	; 0x38
 8002798:	4013      	ands	r3, r2
 800279a:	d10f      	bne.n	80027bc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800279c:	4b39      	ldr	r3, [pc, #228]	; (8002884 <HAL_RCC_GetSysClockFreq+0xf8>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	0adb      	lsrs	r3, r3, #11
 80027a2:	2207      	movs	r2, #7
 80027a4:	4013      	ands	r3, r2
 80027a6:	2201      	movs	r2, #1
 80027a8:	409a      	lsls	r2, r3
 80027aa:	0013      	movs	r3, r2
 80027ac:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80027ae:	6839      	ldr	r1, [r7, #0]
 80027b0:	4835      	ldr	r0, [pc, #212]	; (8002888 <HAL_RCC_GetSysClockFreq+0xfc>)
 80027b2:	f7fd fcb9 	bl	8000128 <__udivsi3>
 80027b6:	0003      	movs	r3, r0
 80027b8:	613b      	str	r3, [r7, #16]
 80027ba:	e05d      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027bc:	4b31      	ldr	r3, [pc, #196]	; (8002884 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	2238      	movs	r2, #56	; 0x38
 80027c2:	4013      	ands	r3, r2
 80027c4:	2b08      	cmp	r3, #8
 80027c6:	d102      	bne.n	80027ce <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027c8:	4b30      	ldr	r3, [pc, #192]	; (800288c <HAL_RCC_GetSysClockFreq+0x100>)
 80027ca:	613b      	str	r3, [r7, #16]
 80027cc:	e054      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027ce:	4b2d      	ldr	r3, [pc, #180]	; (8002884 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	2238      	movs	r2, #56	; 0x38
 80027d4:	4013      	ands	r3, r2
 80027d6:	2b10      	cmp	r3, #16
 80027d8:	d138      	bne.n	800284c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80027da:	4b2a      	ldr	r3, [pc, #168]	; (8002884 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	2203      	movs	r2, #3
 80027e0:	4013      	ands	r3, r2
 80027e2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027e4:	4b27      	ldr	r3, [pc, #156]	; (8002884 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	091b      	lsrs	r3, r3, #4
 80027ea:	2207      	movs	r2, #7
 80027ec:	4013      	ands	r3, r2
 80027ee:	3301      	adds	r3, #1
 80027f0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2b03      	cmp	r3, #3
 80027f6:	d10d      	bne.n	8002814 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027f8:	68b9      	ldr	r1, [r7, #8]
 80027fa:	4824      	ldr	r0, [pc, #144]	; (800288c <HAL_RCC_GetSysClockFreq+0x100>)
 80027fc:	f7fd fc94 	bl	8000128 <__udivsi3>
 8002800:	0003      	movs	r3, r0
 8002802:	0019      	movs	r1, r3
 8002804:	4b1f      	ldr	r3, [pc, #124]	; (8002884 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	0a1b      	lsrs	r3, r3, #8
 800280a:	227f      	movs	r2, #127	; 0x7f
 800280c:	4013      	ands	r3, r2
 800280e:	434b      	muls	r3, r1
 8002810:	617b      	str	r3, [r7, #20]
        break;
 8002812:	e00d      	b.n	8002830 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002814:	68b9      	ldr	r1, [r7, #8]
 8002816:	481c      	ldr	r0, [pc, #112]	; (8002888 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002818:	f7fd fc86 	bl	8000128 <__udivsi3>
 800281c:	0003      	movs	r3, r0
 800281e:	0019      	movs	r1, r3
 8002820:	4b18      	ldr	r3, [pc, #96]	; (8002884 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	0a1b      	lsrs	r3, r3, #8
 8002826:	227f      	movs	r2, #127	; 0x7f
 8002828:	4013      	ands	r3, r2
 800282a:	434b      	muls	r3, r1
 800282c:	617b      	str	r3, [r7, #20]
        break;
 800282e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002830:	4b14      	ldr	r3, [pc, #80]	; (8002884 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	0f5b      	lsrs	r3, r3, #29
 8002836:	2207      	movs	r2, #7
 8002838:	4013      	ands	r3, r2
 800283a:	3301      	adds	r3, #1
 800283c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800283e:	6879      	ldr	r1, [r7, #4]
 8002840:	6978      	ldr	r0, [r7, #20]
 8002842:	f7fd fc71 	bl	8000128 <__udivsi3>
 8002846:	0003      	movs	r3, r0
 8002848:	613b      	str	r3, [r7, #16]
 800284a:	e015      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800284c:	4b0d      	ldr	r3, [pc, #52]	; (8002884 <HAL_RCC_GetSysClockFreq+0xf8>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	2238      	movs	r2, #56	; 0x38
 8002852:	4013      	ands	r3, r2
 8002854:	2b20      	cmp	r3, #32
 8002856:	d103      	bne.n	8002860 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002858:	2380      	movs	r3, #128	; 0x80
 800285a:	021b      	lsls	r3, r3, #8
 800285c:	613b      	str	r3, [r7, #16]
 800285e:	e00b      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002860:	4b08      	ldr	r3, [pc, #32]	; (8002884 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	2238      	movs	r2, #56	; 0x38
 8002866:	4013      	ands	r3, r2
 8002868:	2b18      	cmp	r3, #24
 800286a:	d103      	bne.n	8002874 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800286c:	23fa      	movs	r3, #250	; 0xfa
 800286e:	01db      	lsls	r3, r3, #7
 8002870:	613b      	str	r3, [r7, #16]
 8002872:	e001      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002874:	2300      	movs	r3, #0
 8002876:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002878:	693b      	ldr	r3, [r7, #16]
}
 800287a:	0018      	movs	r0, r3
 800287c:	46bd      	mov	sp, r7
 800287e:	b006      	add	sp, #24
 8002880:	bd80      	pop	{r7, pc}
 8002882:	46c0      	nop			; (mov r8, r8)
 8002884:	40021000 	.word	0x40021000
 8002888:	00f42400 	.word	0x00f42400
 800288c:	007a1200 	.word	0x007a1200

08002890 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002894:	4b02      	ldr	r3, [pc, #8]	; (80028a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002896:	681b      	ldr	r3, [r3, #0]
}
 8002898:	0018      	movs	r0, r3
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	46c0      	nop			; (mov r8, r8)
 80028a0:	20000000 	.word	0x20000000

080028a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028a4:	b5b0      	push	{r4, r5, r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80028a8:	f7ff fff2 	bl	8002890 <HAL_RCC_GetHCLKFreq>
 80028ac:	0004      	movs	r4, r0
 80028ae:	f7ff fb3f 	bl	8001f30 <LL_RCC_GetAPB1Prescaler>
 80028b2:	0003      	movs	r3, r0
 80028b4:	0b1a      	lsrs	r2, r3, #12
 80028b6:	4b05      	ldr	r3, [pc, #20]	; (80028cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80028b8:	0092      	lsls	r2, r2, #2
 80028ba:	58d3      	ldr	r3, [r2, r3]
 80028bc:	221f      	movs	r2, #31
 80028be:	4013      	ands	r3, r2
 80028c0:	40dc      	lsrs	r4, r3
 80028c2:	0023      	movs	r3, r4
}
 80028c4:	0018      	movs	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bdb0      	pop	{r4, r5, r7, pc}
 80028ca:	46c0      	nop			; (mov r8, r8)
 80028cc:	080066b4 	.word	0x080066b4

080028d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80028d8:	2313      	movs	r3, #19
 80028da:	18fb      	adds	r3, r7, r3
 80028dc:	2200      	movs	r2, #0
 80028de:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028e0:	2312      	movs	r3, #18
 80028e2:	18fb      	adds	r3, r7, r3
 80028e4:	2200      	movs	r2, #0
 80028e6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	2380      	movs	r3, #128	; 0x80
 80028ee:	029b      	lsls	r3, r3, #10
 80028f0:	4013      	ands	r3, r2
 80028f2:	d100      	bne.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80028f4:	e0a3      	b.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028f6:	2011      	movs	r0, #17
 80028f8:	183b      	adds	r3, r7, r0
 80028fa:	2200      	movs	r2, #0
 80028fc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028fe:	4ba5      	ldr	r3, [pc, #660]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002900:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002902:	2380      	movs	r3, #128	; 0x80
 8002904:	055b      	lsls	r3, r3, #21
 8002906:	4013      	ands	r3, r2
 8002908:	d110      	bne.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800290a:	4ba2      	ldr	r3, [pc, #648]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800290c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800290e:	4ba1      	ldr	r3, [pc, #644]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002910:	2180      	movs	r1, #128	; 0x80
 8002912:	0549      	lsls	r1, r1, #21
 8002914:	430a      	orrs	r2, r1
 8002916:	63da      	str	r2, [r3, #60]	; 0x3c
 8002918:	4b9e      	ldr	r3, [pc, #632]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800291a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800291c:	2380      	movs	r3, #128	; 0x80
 800291e:	055b      	lsls	r3, r3, #21
 8002920:	4013      	ands	r3, r2
 8002922:	60bb      	str	r3, [r7, #8]
 8002924:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002926:	183b      	adds	r3, r7, r0
 8002928:	2201      	movs	r2, #1
 800292a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800292c:	4b9a      	ldr	r3, [pc, #616]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	4b99      	ldr	r3, [pc, #612]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002932:	2180      	movs	r1, #128	; 0x80
 8002934:	0049      	lsls	r1, r1, #1
 8002936:	430a      	orrs	r2, r1
 8002938:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800293a:	f7fe fcff 	bl	800133c <HAL_GetTick>
 800293e:	0003      	movs	r3, r0
 8002940:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002942:	e00b      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002944:	f7fe fcfa 	bl	800133c <HAL_GetTick>
 8002948:	0002      	movs	r2, r0
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d904      	bls.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002952:	2313      	movs	r3, #19
 8002954:	18fb      	adds	r3, r7, r3
 8002956:	2203      	movs	r2, #3
 8002958:	701a      	strb	r2, [r3, #0]
        break;
 800295a:	e005      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800295c:	4b8e      	ldr	r3, [pc, #568]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	2380      	movs	r3, #128	; 0x80
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	4013      	ands	r3, r2
 8002966:	d0ed      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002968:	2313      	movs	r3, #19
 800296a:	18fb      	adds	r3, r7, r3
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d154      	bne.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002972:	4b88      	ldr	r3, [pc, #544]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002974:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002976:	23c0      	movs	r3, #192	; 0xc0
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	4013      	ands	r3, r2
 800297c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d019      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	429a      	cmp	r2, r3
 800298c:	d014      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800298e:	4b81      	ldr	r3, [pc, #516]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002992:	4a82      	ldr	r2, [pc, #520]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002994:	4013      	ands	r3, r2
 8002996:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002998:	4b7e      	ldr	r3, [pc, #504]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800299a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800299c:	4b7d      	ldr	r3, [pc, #500]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800299e:	2180      	movs	r1, #128	; 0x80
 80029a0:	0249      	lsls	r1, r1, #9
 80029a2:	430a      	orrs	r2, r1
 80029a4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029a6:	4b7b      	ldr	r3, [pc, #492]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029aa:	4b7a      	ldr	r3, [pc, #488]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029ac:	497c      	ldr	r1, [pc, #496]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80029ae:	400a      	ands	r2, r1
 80029b0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029b2:	4b78      	ldr	r3, [pc, #480]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029b4:	697a      	ldr	r2, [r7, #20]
 80029b6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	2201      	movs	r2, #1
 80029bc:	4013      	ands	r3, r2
 80029be:	d016      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c0:	f7fe fcbc 	bl	800133c <HAL_GetTick>
 80029c4:	0003      	movs	r3, r0
 80029c6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029c8:	e00c      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ca:	f7fe fcb7 	bl	800133c <HAL_GetTick>
 80029ce:	0002      	movs	r2, r0
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	4a73      	ldr	r2, [pc, #460]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d904      	bls.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80029da:	2313      	movs	r3, #19
 80029dc:	18fb      	adds	r3, r7, r3
 80029de:	2203      	movs	r2, #3
 80029e0:	701a      	strb	r2, [r3, #0]
            break;
 80029e2:	e004      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029e4:	4b6b      	ldr	r3, [pc, #428]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e8:	2202      	movs	r2, #2
 80029ea:	4013      	ands	r3, r2
 80029ec:	d0ed      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80029ee:	2313      	movs	r3, #19
 80029f0:	18fb      	adds	r3, r7, r3
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d10a      	bne.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029f8:	4b66      	ldr	r3, [pc, #408]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029fc:	4a67      	ldr	r2, [pc, #412]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80029fe:	4013      	ands	r3, r2
 8002a00:	0019      	movs	r1, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a06:	4b63      	ldr	r3, [pc, #396]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a0c:	e00c      	b.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a0e:	2312      	movs	r3, #18
 8002a10:	18fb      	adds	r3, r7, r3
 8002a12:	2213      	movs	r2, #19
 8002a14:	18ba      	adds	r2, r7, r2
 8002a16:	7812      	ldrb	r2, [r2, #0]
 8002a18:	701a      	strb	r2, [r3, #0]
 8002a1a:	e005      	b.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a1c:	2312      	movs	r3, #18
 8002a1e:	18fb      	adds	r3, r7, r3
 8002a20:	2213      	movs	r2, #19
 8002a22:	18ba      	adds	r2, r7, r2
 8002a24:	7812      	ldrb	r2, [r2, #0]
 8002a26:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a28:	2311      	movs	r3, #17
 8002a2a:	18fb      	adds	r3, r7, r3
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d105      	bne.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a32:	4b58      	ldr	r3, [pc, #352]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a36:	4b57      	ldr	r3, [pc, #348]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a38:	495b      	ldr	r1, [pc, #364]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002a3a:	400a      	ands	r2, r1
 8002a3c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2201      	movs	r2, #1
 8002a44:	4013      	ands	r3, r2
 8002a46:	d009      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a48:	4b52      	ldr	r3, [pc, #328]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4c:	2203      	movs	r2, #3
 8002a4e:	4393      	bics	r3, r2
 8002a50:	0019      	movs	r1, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	4b4f      	ldr	r3, [pc, #316]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2210      	movs	r2, #16
 8002a62:	4013      	ands	r3, r2
 8002a64:	d009      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a66:	4b4b      	ldr	r3, [pc, #300]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a6a:	4a50      	ldr	r2, [pc, #320]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	0019      	movs	r1, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	4b47      	ldr	r3, [pc, #284]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a76:	430a      	orrs	r2, r1
 8002a78:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	2380      	movs	r3, #128	; 0x80
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4013      	ands	r3, r2
 8002a84:	d009      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a86:	4b43      	ldr	r3, [pc, #268]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8a:	4a49      	ldr	r2, [pc, #292]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	0019      	movs	r1, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	695a      	ldr	r2, [r3, #20]
 8002a94:	4b3f      	ldr	r3, [pc, #252]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a96:	430a      	orrs	r2, r1
 8002a98:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	2380      	movs	r3, #128	; 0x80
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	d009      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002aa6:	4b3b      	ldr	r3, [pc, #236]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aaa:	4a42      	ldr	r2, [pc, #264]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002aac:	4013      	ands	r3, r2
 8002aae:	0019      	movs	r1, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	699a      	ldr	r2, [r3, #24]
 8002ab4:	4b37      	ldr	r3, [pc, #220]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	d009      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ac4:	4b33      	ldr	r3, [pc, #204]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac8:	4a3b      	ldr	r2, [pc, #236]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002aca:	4013      	ands	r3, r2
 8002acc:	0019      	movs	r1, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68da      	ldr	r2, [r3, #12]
 8002ad2:	4b30      	ldr	r3, [pc, #192]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	2380      	movs	r3, #128	; 0x80
 8002ade:	01db      	lsls	r3, r3, #7
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	d015      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ae4:	4b2b      	ldr	r3, [pc, #172]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	0899      	lsrs	r1, r3, #2
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	69da      	ldr	r2, [r3, #28]
 8002af0:	4b28      	ldr	r3, [pc, #160]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002af2:	430a      	orrs	r2, r1
 8002af4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	69da      	ldr	r2, [r3, #28]
 8002afa:	2380      	movs	r3, #128	; 0x80
 8002afc:	05db      	lsls	r3, r3, #23
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d106      	bne.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002b02:	4b24      	ldr	r3, [pc, #144]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b04:	68da      	ldr	r2, [r3, #12]
 8002b06:	4b23      	ldr	r3, [pc, #140]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b08:	2180      	movs	r1, #128	; 0x80
 8002b0a:	0249      	lsls	r1, r1, #9
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	2380      	movs	r3, #128	; 0x80
 8002b16:	039b      	lsls	r3, r3, #14
 8002b18:	4013      	ands	r3, r2
 8002b1a:	d016      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002b1c:	4b1d      	ldr	r3, [pc, #116]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b20:	4a26      	ldr	r2, [pc, #152]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002b22:	4013      	ands	r3, r2
 8002b24:	0019      	movs	r1, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a1a      	ldr	r2, [r3, #32]
 8002b2a:	4b1a      	ldr	r3, [pc, #104]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a1a      	ldr	r2, [r3, #32]
 8002b34:	2380      	movs	r3, #128	; 0x80
 8002b36:	03db      	lsls	r3, r3, #15
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d106      	bne.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002b3c:	4b15      	ldr	r3, [pc, #84]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b3e:	68da      	ldr	r2, [r3, #12]
 8002b40:	4b14      	ldr	r3, [pc, #80]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b42:	2180      	movs	r1, #128	; 0x80
 8002b44:	0449      	lsls	r1, r1, #17
 8002b46:	430a      	orrs	r2, r1
 8002b48:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	2380      	movs	r3, #128	; 0x80
 8002b50:	011b      	lsls	r3, r3, #4
 8002b52:	4013      	ands	r3, r2
 8002b54:	d016      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002b56:	4b0f      	ldr	r3, [pc, #60]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b5a:	4a19      	ldr	r2, [pc, #100]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	0019      	movs	r1, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	691a      	ldr	r2, [r3, #16]
 8002b64:	4b0b      	ldr	r3, [pc, #44]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b66:	430a      	orrs	r2, r1
 8002b68:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	691a      	ldr	r2, [r3, #16]
 8002b6e:	2380      	movs	r3, #128	; 0x80
 8002b70:	01db      	lsls	r3, r3, #7
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d106      	bne.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002b76:	4b07      	ldr	r3, [pc, #28]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b78:	68da      	ldr	r2, [r3, #12]
 8002b7a:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b7c:	2180      	movs	r1, #128	; 0x80
 8002b7e:	0249      	lsls	r1, r1, #9
 8002b80:	430a      	orrs	r2, r1
 8002b82:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002b84:	2312      	movs	r3, #18
 8002b86:	18fb      	adds	r3, r7, r3
 8002b88:	781b      	ldrb	r3, [r3, #0]
}
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	b006      	add	sp, #24
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	46c0      	nop			; (mov r8, r8)
 8002b94:	40021000 	.word	0x40021000
 8002b98:	40007000 	.word	0x40007000
 8002b9c:	fffffcff 	.word	0xfffffcff
 8002ba0:	fffeffff 	.word	0xfffeffff
 8002ba4:	00001388 	.word	0x00001388
 8002ba8:	efffffff 	.word	0xefffffff
 8002bac:	fffff3ff 	.word	0xfffff3ff
 8002bb0:	fff3ffff 	.word	0xfff3ffff
 8002bb4:	ffcfffff 	.word	0xffcfffff
 8002bb8:	ffffcfff 	.word	0xffffcfff
 8002bbc:	ffbfffff 	.word	0xffbfffff
 8002bc0:	ffff3fff 	.word	0xffff3fff

08002bc4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002bc4:	b5b0      	push	{r4, r5, r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002bcc:	230f      	movs	r3, #15
 8002bce:	18fb      	adds	r3, r7, r3
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d100      	bne.n	8002bdc <HAL_RTC_Init+0x18>
 8002bda:	e08c      	b.n	8002cf6 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2229      	movs	r2, #41	; 0x29
 8002be0:	5c9b      	ldrb	r3, [r3, r2]
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10b      	bne.n	8002c00 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2228      	movs	r2, #40	; 0x28
 8002bec:	2100      	movs	r1, #0
 8002bee:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2288      	movs	r2, #136	; 0x88
 8002bf4:	0212      	lsls	r2, r2, #8
 8002bf6:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	f7fe f96e 	bl	8000edc <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2229      	movs	r2, #41	; 0x29
 8002c04:	2102      	movs	r1, #2
 8002c06:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	2210      	movs	r2, #16
 8002c10:	4013      	ands	r3, r2
 8002c12:	2b10      	cmp	r3, #16
 8002c14:	d062      	beq.n	8002cdc <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	22ca      	movs	r2, #202	; 0xca
 8002c1c:	625a      	str	r2, [r3, #36]	; 0x24
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2253      	movs	r2, #83	; 0x53
 8002c24:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002c26:	250f      	movs	r5, #15
 8002c28:	197c      	adds	r4, r7, r5
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	0018      	movs	r0, r3
 8002c2e:	f000 f9cc 	bl	8002fca <RTC_EnterInitMode>
 8002c32:	0003      	movs	r3, r0
 8002c34:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8002c36:	0028      	movs	r0, r5
 8002c38:	183b      	adds	r3, r7, r0
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d12c      	bne.n	8002c9a <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	699a      	ldr	r2, [r3, #24]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	492e      	ldr	r1, [pc, #184]	; (8002d04 <HAL_RTC_Init+0x140>)
 8002c4c:	400a      	ands	r2, r1
 8002c4e:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6999      	ldr	r1, [r3, #24]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689a      	ldr	r2, [r3, #8]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	431a      	orrs	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	6912      	ldr	r2, [r2, #16]
 8002c76:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6919      	ldr	r1, [r3, #16]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	041a      	lsls	r2, r3, #16
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002c8c:	183c      	adds	r4, r7, r0
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	0018      	movs	r0, r3
 8002c92:	f000 f9dd 	bl	8003050 <RTC_ExitInitMode>
 8002c96:	0003      	movs	r3, r0
 8002c98:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8002c9a:	230f      	movs	r3, #15
 8002c9c:	18fb      	adds	r3, r7, r3
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d116      	bne.n	8002cd2 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	699a      	ldr	r2, [r3, #24]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	00d2      	lsls	r2, r2, #3
 8002cb0:	08d2      	lsrs	r2, r2, #3
 8002cb2:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6999      	ldr	r1, [r3, #24]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	22ff      	movs	r2, #255	; 0xff
 8002cd8:	625a      	str	r2, [r3, #36]	; 0x24
 8002cda:	e003      	b.n	8002ce4 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002cdc:	230f      	movs	r3, #15
 8002cde:	18fb      	adds	r3, r7, r3
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8002ce4:	230f      	movs	r3, #15
 8002ce6:	18fb      	adds	r3, r7, r3
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d103      	bne.n	8002cf6 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2229      	movs	r2, #41	; 0x29
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8002cf6:	230f      	movs	r3, #15
 8002cf8:	18fb      	adds	r3, r7, r3
 8002cfa:	781b      	ldrb	r3, [r3, #0]
}
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	b004      	add	sp, #16
 8002d02:	bdb0      	pop	{r4, r5, r7, pc}
 8002d04:	fb8fffbf 	.word	0xfb8fffbf

08002d08 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002d08:	b5b0      	push	{r4, r5, r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2228      	movs	r2, #40	; 0x28
 8002d18:	5c9b      	ldrb	r3, [r3, r2]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d101      	bne.n	8002d22 <HAL_RTC_SetTime+0x1a>
 8002d1e:	2302      	movs	r3, #2
 8002d20:	e092      	b.n	8002e48 <HAL_RTC_SetTime+0x140>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2228      	movs	r2, #40	; 0x28
 8002d26:	2101      	movs	r1, #1
 8002d28:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2229      	movs	r2, #41	; 0x29
 8002d2e:	2102      	movs	r1, #2
 8002d30:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	22ca      	movs	r2, #202	; 0xca
 8002d38:	625a      	str	r2, [r3, #36]	; 0x24
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2253      	movs	r2, #83	; 0x53
 8002d40:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002d42:	2513      	movs	r5, #19
 8002d44:	197c      	adds	r4, r7, r5
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	0018      	movs	r0, r3
 8002d4a:	f000 f93e 	bl	8002fca <RTC_EnterInitMode>
 8002d4e:	0003      	movs	r3, r0
 8002d50:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8002d52:	197b      	adds	r3, r7, r5
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d162      	bne.n	8002e20 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d125      	bne.n	8002dac <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	2240      	movs	r2, #64	; 0x40
 8002d68:	4013      	ands	r3, r2
 8002d6a:	d102      	bne.n	8002d72 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	0018      	movs	r0, r3
 8002d78:	f000 f9ae 	bl	80030d8 <RTC_ByteToBcd2>
 8002d7c:	0003      	movs	r3, r0
 8002d7e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	785b      	ldrb	r3, [r3, #1]
 8002d84:	0018      	movs	r0, r3
 8002d86:	f000 f9a7 	bl	80030d8 <RTC_ByteToBcd2>
 8002d8a:	0003      	movs	r3, r0
 8002d8c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002d8e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	789b      	ldrb	r3, [r3, #2]
 8002d94:	0018      	movs	r0, r3
 8002d96:	f000 f99f 	bl	80030d8 <RTC_ByteToBcd2>
 8002d9a:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002d9c:	0022      	movs	r2, r4
 8002d9e:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	78db      	ldrb	r3, [r3, #3]
 8002da4:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002da6:	4313      	orrs	r3, r2
 8002da8:	617b      	str	r3, [r7, #20]
 8002daa:	e017      	b.n	8002ddc <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	2240      	movs	r2, #64	; 0x40
 8002db4:	4013      	ands	r3, r2
 8002db6:	d102      	bne.n	8002dbe <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	785b      	ldrb	r3, [r3, #1]
 8002dc8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002dca:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002dcc:	68ba      	ldr	r2, [r7, #8]
 8002dce:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002dd0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	78db      	ldrb	r3, [r3, #3]
 8002dd6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	491b      	ldr	r1, [pc, #108]	; (8002e50 <HAL_RTC_SetTime+0x148>)
 8002de4:	400a      	ands	r2, r1
 8002de6:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	699a      	ldr	r2, [r3, #24]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4918      	ldr	r1, [pc, #96]	; (8002e54 <HAL_RTC_SetTime+0x14c>)
 8002df4:	400a      	ands	r2, r1
 8002df6:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6999      	ldr	r1, [r3, #24]
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	68da      	ldr	r2, [r3, #12]
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	431a      	orrs	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002e10:	2313      	movs	r3, #19
 8002e12:	18fc      	adds	r4, r7, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	0018      	movs	r0, r3
 8002e18:	f000 f91a 	bl	8003050 <RTC_ExitInitMode>
 8002e1c:	0003      	movs	r3, r0
 8002e1e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	22ff      	movs	r2, #255	; 0xff
 8002e26:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8002e28:	2313      	movs	r3, #19
 8002e2a:	18fb      	adds	r3, r7, r3
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d103      	bne.n	8002e3a <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2229      	movs	r2, #41	; 0x29
 8002e36:	2101      	movs	r1, #1
 8002e38:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2228      	movs	r2, #40	; 0x28
 8002e3e:	2100      	movs	r1, #0
 8002e40:	5499      	strb	r1, [r3, r2]

  return status;
 8002e42:	2313      	movs	r3, #19
 8002e44:	18fb      	adds	r3, r7, r3
 8002e46:	781b      	ldrb	r3, [r3, #0]
}
 8002e48:	0018      	movs	r0, r3
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	b006      	add	sp, #24
 8002e4e:	bdb0      	pop	{r4, r5, r7, pc}
 8002e50:	007f7f7f 	.word	0x007f7f7f
 8002e54:	fffbffff 	.word	0xfffbffff

08002e58 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002e58:	b5b0      	push	{r4, r5, r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2228      	movs	r2, #40	; 0x28
 8002e68:	5c9b      	ldrb	r3, [r3, r2]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d101      	bne.n	8002e72 <HAL_RTC_SetDate+0x1a>
 8002e6e:	2302      	movs	r3, #2
 8002e70:	e07e      	b.n	8002f70 <HAL_RTC_SetDate+0x118>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2228      	movs	r2, #40	; 0x28
 8002e76:	2101      	movs	r1, #1
 8002e78:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2229      	movs	r2, #41	; 0x29
 8002e7e:	2102      	movs	r1, #2
 8002e80:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d10e      	bne.n	8002ea6 <HAL_RTC_SetDate+0x4e>
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	785b      	ldrb	r3, [r3, #1]
 8002e8c:	001a      	movs	r2, r3
 8002e8e:	2310      	movs	r3, #16
 8002e90:	4013      	ands	r3, r2
 8002e92:	d008      	beq.n	8002ea6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	785b      	ldrb	r3, [r3, #1]
 8002e98:	2210      	movs	r2, #16
 8002e9a:	4393      	bics	r3, r2
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	330a      	adds	r3, #10
 8002ea0:	b2da      	uxtb	r2, r3
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d11c      	bne.n	8002ee6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	78db      	ldrb	r3, [r3, #3]
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	f000 f911 	bl	80030d8 <RTC_ByteToBcd2>
 8002eb6:	0003      	movs	r3, r0
 8002eb8:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	785b      	ldrb	r3, [r3, #1]
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	f000 f90a 	bl	80030d8 <RTC_ByteToBcd2>
 8002ec4:	0003      	movs	r3, r0
 8002ec6:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002ec8:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	789b      	ldrb	r3, [r3, #2]
 8002ece:	0018      	movs	r0, r3
 8002ed0:	f000 f902 	bl	80030d8 <RTC_ByteToBcd2>
 8002ed4:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002ed6:	0022      	movs	r2, r4
 8002ed8:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	617b      	str	r3, [r7, #20]
 8002ee4:	e00e      	b.n	8002f04 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	78db      	ldrb	r3, [r3, #3]
 8002eea:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	785b      	ldrb	r3, [r3, #1]
 8002ef0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002ef2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002ef8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002f00:	4313      	orrs	r3, r2
 8002f02:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	22ca      	movs	r2, #202	; 0xca
 8002f0a:	625a      	str	r2, [r3, #36]	; 0x24
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2253      	movs	r2, #83	; 0x53
 8002f12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002f14:	2513      	movs	r5, #19
 8002f16:	197c      	adds	r4, r7, r5
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	f000 f855 	bl	8002fca <RTC_EnterInitMode>
 8002f20:	0003      	movs	r3, r0
 8002f22:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8002f24:	0028      	movs	r0, r5
 8002f26:	183b      	adds	r3, r7, r0
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10c      	bne.n	8002f48 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	4910      	ldr	r1, [pc, #64]	; (8002f78 <HAL_RTC_SetDate+0x120>)
 8002f36:	400a      	ands	r2, r1
 8002f38:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002f3a:	183c      	adds	r4, r7, r0
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	0018      	movs	r0, r3
 8002f40:	f000 f886 	bl	8003050 <RTC_ExitInitMode>
 8002f44:	0003      	movs	r3, r0
 8002f46:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	22ff      	movs	r2, #255	; 0xff
 8002f4e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002f50:	2313      	movs	r3, #19
 8002f52:	18fb      	adds	r3, r7, r3
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d103      	bne.n	8002f62 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2229      	movs	r2, #41	; 0x29
 8002f5e:	2101      	movs	r1, #1
 8002f60:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2228      	movs	r2, #40	; 0x28
 8002f66:	2100      	movs	r1, #0
 8002f68:	5499      	strb	r1, [r3, r2]

  return status;
 8002f6a:	2313      	movs	r3, #19
 8002f6c:	18fb      	adds	r3, r7, r3
 8002f6e:	781b      	ldrb	r3, [r3, #0]
}
 8002f70:	0018      	movs	r0, r3
 8002f72:	46bd      	mov	sp, r7
 8002f74:	b006      	add	sp, #24
 8002f76:	bdb0      	pop	{r4, r5, r7, pc}
 8002f78:	00ffff3f 	.word	0x00ffff3f

08002f7c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68da      	ldr	r2, [r3, #12]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	21a0      	movs	r1, #160	; 0xa0
 8002f90:	438a      	bics	r2, r1
 8002f92:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002f94:	f7fe f9d2 	bl	800133c <HAL_GetTick>
 8002f98:	0003      	movs	r3, r0
 8002f9a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002f9c:	e00a      	b.n	8002fb4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002f9e:	f7fe f9cd 	bl	800133c <HAL_GetTick>
 8002fa2:	0002      	movs	r2, r0
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	1ad2      	subs	r2, r2, r3
 8002fa8:	23fa      	movs	r3, #250	; 0xfa
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d901      	bls.n	8002fb4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e006      	b.n	8002fc2 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	d0ee      	beq.n	8002f9e <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	b004      	add	sp, #16
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b084      	sub	sp, #16
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8002fd2:	230f      	movs	r3, #15
 8002fd4:	18fb      	adds	r3, r7, r3
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	2240      	movs	r2, #64	; 0x40
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	d12c      	bne.n	8003040 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68da      	ldr	r2, [r3, #12]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2180      	movs	r1, #128	; 0x80
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002ff6:	f7fe f9a1 	bl	800133c <HAL_GetTick>
 8002ffa:	0003      	movs	r3, r0
 8002ffc:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002ffe:	e014      	b.n	800302a <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8003000:	f7fe f99c 	bl	800133c <HAL_GetTick>
 8003004:	0002      	movs	r2, r0
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	1ad2      	subs	r2, r2, r3
 800300a:	200f      	movs	r0, #15
 800300c:	183b      	adds	r3, r7, r0
 800300e:	1839      	adds	r1, r7, r0
 8003010:	7809      	ldrb	r1, [r1, #0]
 8003012:	7019      	strb	r1, [r3, #0]
 8003014:	23fa      	movs	r3, #250	; 0xfa
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	429a      	cmp	r2, r3
 800301a:	d906      	bls.n	800302a <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800301c:	183b      	adds	r3, r7, r0
 800301e:	2203      	movs	r2, #3
 8003020:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2229      	movs	r2, #41	; 0x29
 8003026:	2103      	movs	r1, #3
 8003028:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	2240      	movs	r2, #64	; 0x40
 8003032:	4013      	ands	r3, r2
 8003034:	d104      	bne.n	8003040 <RTC_EnterInitMode+0x76>
 8003036:	230f      	movs	r3, #15
 8003038:	18fb      	adds	r3, r7, r3
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	2b03      	cmp	r3, #3
 800303e:	d1df      	bne.n	8003000 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003040:	230f      	movs	r3, #15
 8003042:	18fb      	adds	r3, r7, r3
 8003044:	781b      	ldrb	r3, [r3, #0]
}
 8003046:	0018      	movs	r0, r3
 8003048:	46bd      	mov	sp, r7
 800304a:	b004      	add	sp, #16
 800304c:	bd80      	pop	{r7, pc}
	...

08003050 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003050:	b590      	push	{r4, r7, lr}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003058:	240f      	movs	r4, #15
 800305a:	193b      	adds	r3, r7, r4
 800305c:	2200      	movs	r2, #0
 800305e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003060:	4b1c      	ldr	r3, [pc, #112]	; (80030d4 <RTC_ExitInitMode+0x84>)
 8003062:	68da      	ldr	r2, [r3, #12]
 8003064:	4b1b      	ldr	r3, [pc, #108]	; (80030d4 <RTC_ExitInitMode+0x84>)
 8003066:	2180      	movs	r1, #128	; 0x80
 8003068:	438a      	bics	r2, r1
 800306a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800306c:	4b19      	ldr	r3, [pc, #100]	; (80030d4 <RTC_ExitInitMode+0x84>)
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	2220      	movs	r2, #32
 8003072:	4013      	ands	r3, r2
 8003074:	d10d      	bne.n	8003092 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	0018      	movs	r0, r3
 800307a:	f7ff ff7f 	bl	8002f7c <HAL_RTC_WaitForSynchro>
 800307e:	1e03      	subs	r3, r0, #0
 8003080:	d021      	beq.n	80030c6 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2229      	movs	r2, #41	; 0x29
 8003086:	2103      	movs	r1, #3
 8003088:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800308a:	193b      	adds	r3, r7, r4
 800308c:	2203      	movs	r2, #3
 800308e:	701a      	strb	r2, [r3, #0]
 8003090:	e019      	b.n	80030c6 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003092:	4b10      	ldr	r3, [pc, #64]	; (80030d4 <RTC_ExitInitMode+0x84>)
 8003094:	699a      	ldr	r2, [r3, #24]
 8003096:	4b0f      	ldr	r3, [pc, #60]	; (80030d4 <RTC_ExitInitMode+0x84>)
 8003098:	2120      	movs	r1, #32
 800309a:	438a      	bics	r2, r1
 800309c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	0018      	movs	r0, r3
 80030a2:	f7ff ff6b 	bl	8002f7c <HAL_RTC_WaitForSynchro>
 80030a6:	1e03      	subs	r3, r0, #0
 80030a8:	d007      	beq.n	80030ba <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2229      	movs	r2, #41	; 0x29
 80030ae:	2103      	movs	r1, #3
 80030b0:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80030b2:	230f      	movs	r3, #15
 80030b4:	18fb      	adds	r3, r7, r3
 80030b6:	2203      	movs	r2, #3
 80030b8:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80030ba:	4b06      	ldr	r3, [pc, #24]	; (80030d4 <RTC_ExitInitMode+0x84>)
 80030bc:	699a      	ldr	r2, [r3, #24]
 80030be:	4b05      	ldr	r3, [pc, #20]	; (80030d4 <RTC_ExitInitMode+0x84>)
 80030c0:	2120      	movs	r1, #32
 80030c2:	430a      	orrs	r2, r1
 80030c4:	619a      	str	r2, [r3, #24]
  }

  return status;
 80030c6:	230f      	movs	r3, #15
 80030c8:	18fb      	adds	r3, r7, r3
 80030ca:	781b      	ldrb	r3, [r3, #0]
}
 80030cc:	0018      	movs	r0, r3
 80030ce:	46bd      	mov	sp, r7
 80030d0:	b005      	add	sp, #20
 80030d2:	bd90      	pop	{r4, r7, pc}
 80030d4:	40002800 	.word	0x40002800

080030d8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	0002      	movs	r2, r0
 80030e0:	1dfb      	adds	r3, r7, #7
 80030e2:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80030e4:	2300      	movs	r3, #0
 80030e6:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80030e8:	230b      	movs	r3, #11
 80030ea:	18fb      	adds	r3, r7, r3
 80030ec:	1dfa      	adds	r2, r7, #7
 80030ee:	7812      	ldrb	r2, [r2, #0]
 80030f0:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 80030f2:	e008      	b.n	8003106 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	3301      	adds	r3, #1
 80030f8:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80030fa:	220b      	movs	r2, #11
 80030fc:	18bb      	adds	r3, r7, r2
 80030fe:	18ba      	adds	r2, r7, r2
 8003100:	7812      	ldrb	r2, [r2, #0]
 8003102:	3a0a      	subs	r2, #10
 8003104:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8003106:	210b      	movs	r1, #11
 8003108:	187b      	adds	r3, r7, r1
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	2b09      	cmp	r3, #9
 800310e:	d8f1      	bhi.n	80030f4 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	b2db      	uxtb	r3, r3
 8003114:	011b      	lsls	r3, r3, #4
 8003116:	b2da      	uxtb	r2, r3
 8003118:	187b      	adds	r3, r7, r1
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	4313      	orrs	r3, r2
 800311e:	b2db      	uxtb	r3, r3
}
 8003120:	0018      	movs	r0, r3
 8003122:	46bd      	mov	sp, r7
 8003124:	b004      	add	sp, #16
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2228      	movs	r2, #40	; 0x28
 8003138:	5c9b      	ldrb	r3, [r3, r2]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d101      	bne.n	8003142 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800313e:	2302      	movs	r3, #2
 8003140:	e082      	b.n	8003248 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2228      	movs	r2, #40	; 0x28
 8003146:	2101      	movs	r1, #1
 8003148:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2229      	movs	r2, #41	; 0x29
 800314e:	2102      	movs	r1, #2
 8003150:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	22ca      	movs	r2, #202	; 0xca
 8003158:	625a      	str	r2, [r3, #36]	; 0x24
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2253      	movs	r2, #83	; 0x53
 8003160:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	699a      	ldr	r2, [r3, #24]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4938      	ldr	r1, [pc, #224]	; (8003250 <HAL_RTCEx_SetWakeUpTimer_IT+0x128>)
 800316e:	400a      	ands	r2, r1
 8003170:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2104      	movs	r1, #4
 800317e:	430a      	orrs	r2, r1
 8003180:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8003182:	4b34      	ldr	r3, [pc, #208]	; (8003254 <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>)
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	2240      	movs	r2, #64	; 0x40
 8003188:	4013      	ands	r3, r2
 800318a:	d121      	bne.n	80031d0 <HAL_RTCEx_SetWakeUpTimer_IT+0xa8>
  {
    tickstart = HAL_GetTick();
 800318c:	f7fe f8d6 	bl	800133c <HAL_GetTick>
 8003190:	0003      	movs	r3, r0
 8003192:	617b      	str	r3, [r7, #20]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003194:	e016      	b.n	80031c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003196:	f7fe f8d1 	bl	800133c <HAL_GetTick>
 800319a:	0002      	movs	r2, r0
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	1ad2      	subs	r2, r2, r3
 80031a0:	23fa      	movs	r3, #250	; 0xfa
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d90d      	bls.n	80031c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	22ff      	movs	r2, #255	; 0xff
 80031ae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2229      	movs	r2, #41	; 0x29
 80031b4:	2103      	movs	r1, #3
 80031b6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2228      	movs	r2, #40	; 0x28
 80031bc:	2100      	movs	r1, #0
 80031be:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e041      	b.n	8003248 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	2204      	movs	r2, #4
 80031cc:	4013      	ands	r3, r2
 80031ce:	d0e2      	beq.n	8003196 <HAL_RTCEx_SetWakeUpTimer_IT+0x6e>
      }
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	699a      	ldr	r2, [r3, #24]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2107      	movs	r1, #7
 80031e4:	438a      	bics	r2, r1
 80031e6:	619a      	str	r2, [r3, #24]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6999      	ldr	r1, [r3, #24]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	619a      	str	r2, [r3, #24]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80031f8:	4a17      	ldr	r2, [pc, #92]	; (8003258 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 80031fa:	2380      	movs	r3, #128	; 0x80
 80031fc:	58d3      	ldr	r3, [r2, r3]
 80031fe:	4916      	ldr	r1, [pc, #88]	; (8003258 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 8003200:	2280      	movs	r2, #128	; 0x80
 8003202:	0312      	lsls	r2, r2, #12
 8003204:	4313      	orrs	r3, r2
 8003206:	2280      	movs	r2, #128	; 0x80
 8003208:	508b      	str	r3, [r1, r2]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	699a      	ldr	r2, [r3, #24]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2180      	movs	r1, #128	; 0x80
 8003216:	01c9      	lsls	r1, r1, #7
 8003218:	430a      	orrs	r2, r1
 800321a:	619a      	str	r2, [r3, #24]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	699a      	ldr	r2, [r3, #24]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2180      	movs	r1, #128	; 0x80
 8003228:	00c9      	lsls	r1, r1, #3
 800322a:	430a      	orrs	r2, r1
 800322c:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	22ff      	movs	r2, #255	; 0xff
 8003234:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2229      	movs	r2, #41	; 0x29
 800323a:	2101      	movs	r1, #1
 800323c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2228      	movs	r2, #40	; 0x28
 8003242:	2100      	movs	r1, #0
 8003244:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	0018      	movs	r0, r3
 800324a:	46bd      	mov	sp, r7
 800324c:	b006      	add	sp, #24
 800324e:	bd80      	pop	{r7, pc}
 8003250:	fffffbff 	.word	0xfffffbff
 8003254:	40002800 	.word	0x40002800
 8003258:	40021800 	.word	0x40021800

0800325c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800326a:	2204      	movs	r2, #4
 800326c:	4013      	ands	r3, r2
 800326e:	d00b      	beq.n	8003288 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2104      	movs	r1, #4
 800327c:	430a      	orrs	r2, r1
 800327e:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	0018      	movs	r0, r3
 8003284:	f000 f808 	bl	8003298 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2229      	movs	r2, #41	; 0x29
 800328c:	2101      	movs	r1, #1
 800328e:	5499      	strb	r1, [r3, r2]
}
 8003290:	46c0      	nop			; (mov r8, r8)
 8003292:	46bd      	mov	sp, r7
 8003294:	b002      	add	sp, #8
 8003296:	bd80      	pop	{r7, pc}

08003298 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80032a0:	46c0      	nop			; (mov r8, r8)
 80032a2:	46bd      	mov	sp, r7
 80032a4:	b002      	add	sp, #8
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e04a      	b.n	8003350 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	223d      	movs	r2, #61	; 0x3d
 80032be:	5c9b      	ldrb	r3, [r3, r2]
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d107      	bne.n	80032d6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	223c      	movs	r2, #60	; 0x3c
 80032ca:	2100      	movs	r1, #0
 80032cc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	0018      	movs	r0, r3
 80032d2:	f7fd fe49 	bl	8000f68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	223d      	movs	r2, #61	; 0x3d
 80032da:	2102      	movs	r1, #2
 80032dc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	3304      	adds	r3, #4
 80032e6:	0019      	movs	r1, r3
 80032e8:	0010      	movs	r0, r2
 80032ea:	f000 fa09 	bl	8003700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2248      	movs	r2, #72	; 0x48
 80032f2:	2101      	movs	r1, #1
 80032f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	223e      	movs	r2, #62	; 0x3e
 80032fa:	2101      	movs	r1, #1
 80032fc:	5499      	strb	r1, [r3, r2]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	223f      	movs	r2, #63	; 0x3f
 8003302:	2101      	movs	r1, #1
 8003304:	5499      	strb	r1, [r3, r2]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2240      	movs	r2, #64	; 0x40
 800330a:	2101      	movs	r1, #1
 800330c:	5499      	strb	r1, [r3, r2]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2241      	movs	r2, #65	; 0x41
 8003312:	2101      	movs	r1, #1
 8003314:	5499      	strb	r1, [r3, r2]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2242      	movs	r2, #66	; 0x42
 800331a:	2101      	movs	r1, #1
 800331c:	5499      	strb	r1, [r3, r2]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2243      	movs	r2, #67	; 0x43
 8003322:	2101      	movs	r1, #1
 8003324:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2244      	movs	r2, #68	; 0x44
 800332a:	2101      	movs	r1, #1
 800332c:	5499      	strb	r1, [r3, r2]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2245      	movs	r2, #69	; 0x45
 8003332:	2101      	movs	r1, #1
 8003334:	5499      	strb	r1, [r3, r2]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2246      	movs	r2, #70	; 0x46
 800333a:	2101      	movs	r1, #1
 800333c:	5499      	strb	r1, [r3, r2]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2247      	movs	r2, #71	; 0x47
 8003342:	2101      	movs	r1, #1
 8003344:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	223d      	movs	r2, #61	; 0x3d
 800334a:	2101      	movs	r1, #1
 800334c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	0018      	movs	r0, r3
 8003352:	46bd      	mov	sp, r7
 8003354:	b002      	add	sp, #8
 8003356:	bd80      	pop	{r7, pc}

08003358 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	223d      	movs	r2, #61	; 0x3d
 8003364:	5c9b      	ldrb	r3, [r3, r2]
 8003366:	b2db      	uxtb	r3, r3
 8003368:	2b01      	cmp	r3, #1
 800336a:	d001      	beq.n	8003370 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e03d      	b.n	80033ec <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	223d      	movs	r2, #61	; 0x3d
 8003374:	2102      	movs	r1, #2
 8003376:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68da      	ldr	r2, [r3, #12]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2101      	movs	r1, #1
 8003384:	430a      	orrs	r2, r1
 8003386:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a19      	ldr	r2, [pc, #100]	; (80033f4 <HAL_TIM_Base_Start_IT+0x9c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d00a      	beq.n	80033a8 <HAL_TIM_Base_Start_IT+0x50>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	2380      	movs	r3, #128	; 0x80
 8003398:	05db      	lsls	r3, r3, #23
 800339a:	429a      	cmp	r2, r3
 800339c:	d004      	beq.n	80033a8 <HAL_TIM_Base_Start_IT+0x50>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a15      	ldr	r2, [pc, #84]	; (80033f8 <HAL_TIM_Base_Start_IT+0xa0>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d116      	bne.n	80033d6 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	4a13      	ldr	r2, [pc, #76]	; (80033fc <HAL_TIM_Base_Start_IT+0xa4>)
 80033b0:	4013      	ands	r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2b06      	cmp	r3, #6
 80033b8:	d016      	beq.n	80033e8 <HAL_TIM_Base_Start_IT+0x90>
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	2380      	movs	r3, #128	; 0x80
 80033be:	025b      	lsls	r3, r3, #9
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d011      	beq.n	80033e8 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2101      	movs	r1, #1
 80033d0:	430a      	orrs	r2, r1
 80033d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033d4:	e008      	b.n	80033e8 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2101      	movs	r1, #1
 80033e2:	430a      	orrs	r2, r1
 80033e4:	601a      	str	r2, [r3, #0]
 80033e6:	e000      	b.n	80033ea <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033e8:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	0018      	movs	r0, r3
 80033ee:	46bd      	mov	sp, r7
 80033f0:	b004      	add	sp, #16
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40012c00 	.word	0x40012c00
 80033f8:	40000400 	.word	0x40000400
 80033fc:	00010007 	.word	0x00010007

08003400 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68da      	ldr	r2, [r3, #12]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2101      	movs	r1, #1
 8003414:	438a      	bics	r2, r1
 8003416:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	4a0d      	ldr	r2, [pc, #52]	; (8003454 <HAL_TIM_Base_Stop_IT+0x54>)
 8003420:	4013      	ands	r3, r2
 8003422:	d10d      	bne.n	8003440 <HAL_TIM_Base_Stop_IT+0x40>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	4a0b      	ldr	r2, [pc, #44]	; (8003458 <HAL_TIM_Base_Stop_IT+0x58>)
 800342c:	4013      	ands	r3, r2
 800342e:	d107      	bne.n	8003440 <HAL_TIM_Base_Stop_IT+0x40>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2101      	movs	r1, #1
 800343c:	438a      	bics	r2, r1
 800343e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	223d      	movs	r2, #61	; 0x3d
 8003444:	2101      	movs	r1, #1
 8003446:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	0018      	movs	r0, r3
 800344c:	46bd      	mov	sp, r7
 800344e:	b002      	add	sp, #8
 8003450:	bd80      	pop	{r7, pc}
 8003452:	46c0      	nop			; (mov r8, r8)
 8003454:	00001111 	.word	0x00001111
 8003458:	00000444 	.word	0x00000444

0800345c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	2202      	movs	r2, #2
 800346c:	4013      	ands	r3, r2
 800346e:	2b02      	cmp	r3, #2
 8003470:	d124      	bne.n	80034bc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	2202      	movs	r2, #2
 800347a:	4013      	ands	r3, r2
 800347c:	2b02      	cmp	r3, #2
 800347e:	d11d      	bne.n	80034bc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2203      	movs	r2, #3
 8003486:	4252      	negs	r2, r2
 8003488:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	2203      	movs	r2, #3
 8003498:	4013      	ands	r3, r2
 800349a:	d004      	beq.n	80034a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	0018      	movs	r0, r3
 80034a0:	f000 f916 	bl	80036d0 <HAL_TIM_IC_CaptureCallback>
 80034a4:	e007      	b.n	80034b6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	0018      	movs	r0, r3
 80034aa:	f000 f909 	bl	80036c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	0018      	movs	r0, r3
 80034b2:	f000 f915 	bl	80036e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	2204      	movs	r2, #4
 80034c4:	4013      	ands	r3, r2
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	d125      	bne.n	8003516 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	2204      	movs	r2, #4
 80034d2:	4013      	ands	r3, r2
 80034d4:	2b04      	cmp	r3, #4
 80034d6:	d11e      	bne.n	8003516 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2205      	movs	r2, #5
 80034de:	4252      	negs	r2, r2
 80034e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2202      	movs	r2, #2
 80034e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	699a      	ldr	r2, [r3, #24]
 80034ee:	23c0      	movs	r3, #192	; 0xc0
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4013      	ands	r3, r2
 80034f4:	d004      	beq.n	8003500 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	0018      	movs	r0, r3
 80034fa:	f000 f8e9 	bl	80036d0 <HAL_TIM_IC_CaptureCallback>
 80034fe:	e007      	b.n	8003510 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	0018      	movs	r0, r3
 8003504:	f000 f8dc 	bl	80036c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	0018      	movs	r0, r3
 800350c:	f000 f8e8 	bl	80036e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	2208      	movs	r2, #8
 800351e:	4013      	ands	r3, r2
 8003520:	2b08      	cmp	r3, #8
 8003522:	d124      	bne.n	800356e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	2208      	movs	r2, #8
 800352c:	4013      	ands	r3, r2
 800352e:	2b08      	cmp	r3, #8
 8003530:	d11d      	bne.n	800356e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2209      	movs	r2, #9
 8003538:	4252      	negs	r2, r2
 800353a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2204      	movs	r2, #4
 8003540:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	69db      	ldr	r3, [r3, #28]
 8003548:	2203      	movs	r2, #3
 800354a:	4013      	ands	r3, r2
 800354c:	d004      	beq.n	8003558 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	0018      	movs	r0, r3
 8003552:	f000 f8bd 	bl	80036d0 <HAL_TIM_IC_CaptureCallback>
 8003556:	e007      	b.n	8003568 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	0018      	movs	r0, r3
 800355c:	f000 f8b0 	bl	80036c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	0018      	movs	r0, r3
 8003564:	f000 f8bc 	bl	80036e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	2210      	movs	r2, #16
 8003576:	4013      	ands	r3, r2
 8003578:	2b10      	cmp	r3, #16
 800357a:	d125      	bne.n	80035c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	2210      	movs	r2, #16
 8003584:	4013      	ands	r3, r2
 8003586:	2b10      	cmp	r3, #16
 8003588:	d11e      	bne.n	80035c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2211      	movs	r2, #17
 8003590:	4252      	negs	r2, r2
 8003592:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2208      	movs	r2, #8
 8003598:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	69da      	ldr	r2, [r3, #28]
 80035a0:	23c0      	movs	r3, #192	; 0xc0
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4013      	ands	r3, r2
 80035a6:	d004      	beq.n	80035b2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	0018      	movs	r0, r3
 80035ac:	f000 f890 	bl	80036d0 <HAL_TIM_IC_CaptureCallback>
 80035b0:	e007      	b.n	80035c2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	0018      	movs	r0, r3
 80035b6:	f000 f883 	bl	80036c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	0018      	movs	r0, r3
 80035be:	f000 f88f 	bl	80036e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	2201      	movs	r2, #1
 80035d0:	4013      	ands	r3, r2
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d10f      	bne.n	80035f6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	2201      	movs	r2, #1
 80035de:	4013      	ands	r3, r2
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d108      	bne.n	80035f6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2202      	movs	r2, #2
 80035ea:	4252      	negs	r2, r2
 80035ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	0018      	movs	r0, r3
 80035f2:	f7fd fc2f 	bl	8000e54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	2280      	movs	r2, #128	; 0x80
 80035fe:	4013      	ands	r3, r2
 8003600:	2b80      	cmp	r3, #128	; 0x80
 8003602:	d10f      	bne.n	8003624 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	2280      	movs	r2, #128	; 0x80
 800360c:	4013      	ands	r3, r2
 800360e:	2b80      	cmp	r3, #128	; 0x80
 8003610:	d108      	bne.n	8003624 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2281      	movs	r2, #129	; 0x81
 8003618:	4252      	negs	r2, r2
 800361a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	0018      	movs	r0, r3
 8003620:	f000 f8ec 	bl	80037fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	691a      	ldr	r2, [r3, #16]
 800362a:	2380      	movs	r3, #128	; 0x80
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	401a      	ands	r2, r3
 8003630:	2380      	movs	r3, #128	; 0x80
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	429a      	cmp	r2, r3
 8003636:	d10e      	bne.n	8003656 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	2280      	movs	r2, #128	; 0x80
 8003640:	4013      	ands	r3, r2
 8003642:	2b80      	cmp	r3, #128	; 0x80
 8003644:	d107      	bne.n	8003656 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a1c      	ldr	r2, [pc, #112]	; (80036bc <HAL_TIM_IRQHandler+0x260>)
 800364c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	0018      	movs	r0, r3
 8003652:	f000 f8db 	bl	800380c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	2240      	movs	r2, #64	; 0x40
 800365e:	4013      	ands	r3, r2
 8003660:	2b40      	cmp	r3, #64	; 0x40
 8003662:	d10f      	bne.n	8003684 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	2240      	movs	r2, #64	; 0x40
 800366c:	4013      	ands	r3, r2
 800366e:	2b40      	cmp	r3, #64	; 0x40
 8003670:	d108      	bne.n	8003684 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2241      	movs	r2, #65	; 0x41
 8003678:	4252      	negs	r2, r2
 800367a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	0018      	movs	r0, r3
 8003680:	f000 f836 	bl	80036f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	2220      	movs	r2, #32
 800368c:	4013      	ands	r3, r2
 800368e:	2b20      	cmp	r3, #32
 8003690:	d10f      	bne.n	80036b2 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	2220      	movs	r2, #32
 800369a:	4013      	ands	r3, r2
 800369c:	2b20      	cmp	r3, #32
 800369e:	d108      	bne.n	80036b2 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2221      	movs	r2, #33	; 0x21
 80036a6:	4252      	negs	r2, r2
 80036a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	0018      	movs	r0, r3
 80036ae:	f000 f89d 	bl	80037ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036b2:	46c0      	nop			; (mov r8, r8)
 80036b4:	46bd      	mov	sp, r7
 80036b6:	b002      	add	sp, #8
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	46c0      	nop			; (mov r8, r8)
 80036bc:	fffffeff 	.word	0xfffffeff

080036c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036c8:	46c0      	nop			; (mov r8, r8)
 80036ca:	46bd      	mov	sp, r7
 80036cc:	b002      	add	sp, #8
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036d8:	46c0      	nop			; (mov r8, r8)
 80036da:	46bd      	mov	sp, r7
 80036dc:	b002      	add	sp, #8
 80036de:	bd80      	pop	{r7, pc}

080036e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036e8:	46c0      	nop			; (mov r8, r8)
 80036ea:	46bd      	mov	sp, r7
 80036ec:	b002      	add	sp, #8
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036f8:	46c0      	nop			; (mov r8, r8)
 80036fa:	46bd      	mov	sp, r7
 80036fc:	b002      	add	sp, #8
 80036fe:	bd80      	pop	{r7, pc}

08003700 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a30      	ldr	r2, [pc, #192]	; (80037d4 <TIM_Base_SetConfig+0xd4>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d008      	beq.n	800372a <TIM_Base_SetConfig+0x2a>
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	2380      	movs	r3, #128	; 0x80
 800371c:	05db      	lsls	r3, r3, #23
 800371e:	429a      	cmp	r2, r3
 8003720:	d003      	beq.n	800372a <TIM_Base_SetConfig+0x2a>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a2c      	ldr	r2, [pc, #176]	; (80037d8 <TIM_Base_SetConfig+0xd8>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d108      	bne.n	800373c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2270      	movs	r2, #112	; 0x70
 800372e:	4393      	bics	r3, r2
 8003730:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	4313      	orrs	r3, r2
 800373a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a25      	ldr	r2, [pc, #148]	; (80037d4 <TIM_Base_SetConfig+0xd4>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d014      	beq.n	800376e <TIM_Base_SetConfig+0x6e>
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	2380      	movs	r3, #128	; 0x80
 8003748:	05db      	lsls	r3, r3, #23
 800374a:	429a      	cmp	r2, r3
 800374c:	d00f      	beq.n	800376e <TIM_Base_SetConfig+0x6e>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a21      	ldr	r2, [pc, #132]	; (80037d8 <TIM_Base_SetConfig+0xd8>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d00b      	beq.n	800376e <TIM_Base_SetConfig+0x6e>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a20      	ldr	r2, [pc, #128]	; (80037dc <TIM_Base_SetConfig+0xdc>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d007      	beq.n	800376e <TIM_Base_SetConfig+0x6e>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a1f      	ldr	r2, [pc, #124]	; (80037e0 <TIM_Base_SetConfig+0xe0>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d003      	beq.n	800376e <TIM_Base_SetConfig+0x6e>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a1e      	ldr	r2, [pc, #120]	; (80037e4 <TIM_Base_SetConfig+0xe4>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d108      	bne.n	8003780 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	4a1d      	ldr	r2, [pc, #116]	; (80037e8 <TIM_Base_SetConfig+0xe8>)
 8003772:	4013      	ands	r3, r2
 8003774:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	4313      	orrs	r3, r2
 800377e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2280      	movs	r2, #128	; 0x80
 8003784:	4393      	bics	r3, r2
 8003786:	001a      	movs	r2, r3
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	695b      	ldr	r3, [r3, #20]
 800378c:	4313      	orrs	r3, r2
 800378e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	689a      	ldr	r2, [r3, #8]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a0a      	ldr	r2, [pc, #40]	; (80037d4 <TIM_Base_SetConfig+0xd4>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d007      	beq.n	80037be <TIM_Base_SetConfig+0xbe>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a0b      	ldr	r2, [pc, #44]	; (80037e0 <TIM_Base_SetConfig+0xe0>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d003      	beq.n	80037be <TIM_Base_SetConfig+0xbe>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a0a      	ldr	r2, [pc, #40]	; (80037e4 <TIM_Base_SetConfig+0xe4>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d103      	bne.n	80037c6 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	691a      	ldr	r2, [r3, #16]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	615a      	str	r2, [r3, #20]
}
 80037cc:	46c0      	nop			; (mov r8, r8)
 80037ce:	46bd      	mov	sp, r7
 80037d0:	b004      	add	sp, #16
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	40012c00 	.word	0x40012c00
 80037d8:	40000400 	.word	0x40000400
 80037dc:	40002000 	.word	0x40002000
 80037e0:	40014400 	.word	0x40014400
 80037e4:	40014800 	.word	0x40014800
 80037e8:	fffffcff 	.word	0xfffffcff

080037ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037f4:	46c0      	nop			; (mov r8, r8)
 80037f6:	46bd      	mov	sp, r7
 80037f8:	b002      	add	sp, #8
 80037fa:	bd80      	pop	{r7, pc}

080037fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003804:	46c0      	nop			; (mov r8, r8)
 8003806:	46bd      	mov	sp, r7
 8003808:	b002      	add	sp, #8
 800380a:	bd80      	pop	{r7, pc}

0800380c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003814:	46c0      	nop			; (mov r8, r8)
 8003816:	46bd      	mov	sp, r7
 8003818:	b002      	add	sp, #8
 800381a:	bd80      	pop	{r7, pc}

0800381c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e046      	b.n	80038bc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2288      	movs	r2, #136	; 0x88
 8003832:	589b      	ldr	r3, [r3, r2]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d107      	bne.n	8003848 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2284      	movs	r2, #132	; 0x84
 800383c:	2100      	movs	r1, #0
 800383e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	0018      	movs	r0, r3
 8003844:	f7fd fbb8 	bl	8000fb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2288      	movs	r2, #136	; 0x88
 800384c:	2124      	movs	r1, #36	; 0x24
 800384e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2101      	movs	r1, #1
 800385c:	438a      	bics	r2, r1
 800385e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	0018      	movs	r0, r3
 8003864:	f000 fc12 	bl	800408c <UART_SetConfig>
 8003868:	0003      	movs	r3, r0
 800386a:	2b01      	cmp	r3, #1
 800386c:	d101      	bne.n	8003872 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e024      	b.n	80038bc <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	0018      	movs	r0, r3
 800387e:	f000 fe7d 	bl	800457c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	490d      	ldr	r1, [pc, #52]	; (80038c4 <HAL_UART_Init+0xa8>)
 800388e:	400a      	ands	r2, r1
 8003890:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	212a      	movs	r1, #42	; 0x2a
 800389e:	438a      	bics	r2, r1
 80038a0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2101      	movs	r1, #1
 80038ae:	430a      	orrs	r2, r1
 80038b0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	0018      	movs	r0, r3
 80038b6:	f000 ff15 	bl	80046e4 <UART_CheckIdleState>
 80038ba:	0003      	movs	r3, r0
}
 80038bc:	0018      	movs	r0, r3
 80038be:	46bd      	mov	sp, r7
 80038c0:	b002      	add	sp, #8
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	ffffb7ff 	.word	0xffffb7ff

080038c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b08a      	sub	sp, #40	; 0x28
 80038cc:	af02      	add	r7, sp, #8
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	603b      	str	r3, [r7, #0]
 80038d4:	1dbb      	adds	r3, r7, #6
 80038d6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2288      	movs	r2, #136	; 0x88
 80038dc:	589b      	ldr	r3, [r3, r2]
 80038de:	2b20      	cmp	r3, #32
 80038e0:	d000      	beq.n	80038e4 <HAL_UART_Transmit+0x1c>
 80038e2:	e088      	b.n	80039f6 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <HAL_UART_Transmit+0x2a>
 80038ea:	1dbb      	adds	r3, r7, #6
 80038ec:	881b      	ldrh	r3, [r3, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e080      	b.n	80039f8 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	689a      	ldr	r2, [r3, #8]
 80038fa:	2380      	movs	r3, #128	; 0x80
 80038fc:	015b      	lsls	r3, r3, #5
 80038fe:	429a      	cmp	r2, r3
 8003900:	d109      	bne.n	8003916 <HAL_UART_Transmit+0x4e>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d105      	bne.n	8003916 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	2201      	movs	r2, #1
 800390e:	4013      	ands	r3, r2
 8003910:	d001      	beq.n	8003916 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e070      	b.n	80039f8 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2290      	movs	r2, #144	; 0x90
 800391a:	2100      	movs	r1, #0
 800391c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2288      	movs	r2, #136	; 0x88
 8003922:	2121      	movs	r1, #33	; 0x21
 8003924:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003926:	f7fd fd09 	bl	800133c <HAL_GetTick>
 800392a:	0003      	movs	r3, r0
 800392c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	1dba      	adds	r2, r7, #6
 8003932:	2154      	movs	r1, #84	; 0x54
 8003934:	8812      	ldrh	r2, [r2, #0]
 8003936:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	1dba      	adds	r2, r7, #6
 800393c:	2156      	movs	r1, #86	; 0x56
 800393e:	8812      	ldrh	r2, [r2, #0]
 8003940:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	689a      	ldr	r2, [r3, #8]
 8003946:	2380      	movs	r3, #128	; 0x80
 8003948:	015b      	lsls	r3, r3, #5
 800394a:	429a      	cmp	r2, r3
 800394c:	d108      	bne.n	8003960 <HAL_UART_Transmit+0x98>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d104      	bne.n	8003960 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003956:	2300      	movs	r3, #0
 8003958:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	61bb      	str	r3, [r7, #24]
 800395e:	e003      	b.n	8003968 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003964:	2300      	movs	r3, #0
 8003966:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003968:	e02c      	b.n	80039c4 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	9300      	str	r3, [sp, #0]
 8003972:	0013      	movs	r3, r2
 8003974:	2200      	movs	r2, #0
 8003976:	2180      	movs	r1, #128	; 0x80
 8003978:	f000 ff02 	bl	8004780 <UART_WaitOnFlagUntilTimeout>
 800397c:	1e03      	subs	r3, r0, #0
 800397e:	d001      	beq.n	8003984 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e039      	b.n	80039f8 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10b      	bne.n	80039a2 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	881b      	ldrh	r3, [r3, #0]
 800398e:	001a      	movs	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	05d2      	lsls	r2, r2, #23
 8003996:	0dd2      	lsrs	r2, r2, #23
 8003998:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	3302      	adds	r3, #2
 800399e:	61bb      	str	r3, [r7, #24]
 80039a0:	e007      	b.n	80039b2 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	781a      	ldrb	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	3301      	adds	r3, #1
 80039b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2256      	movs	r2, #86	; 0x56
 80039b6:	5a9b      	ldrh	r3, [r3, r2]
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	3b01      	subs	r3, #1
 80039bc:	b299      	uxth	r1, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2256      	movs	r2, #86	; 0x56
 80039c2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2256      	movs	r2, #86	; 0x56
 80039c8:	5a9b      	ldrh	r3, [r3, r2]
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1cc      	bne.n	800396a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	9300      	str	r3, [sp, #0]
 80039d8:	0013      	movs	r3, r2
 80039da:	2200      	movs	r2, #0
 80039dc:	2140      	movs	r1, #64	; 0x40
 80039de:	f000 fecf 	bl	8004780 <UART_WaitOnFlagUntilTimeout>
 80039e2:	1e03      	subs	r3, r0, #0
 80039e4:	d001      	beq.n	80039ea <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e006      	b.n	80039f8 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2288      	movs	r2, #136	; 0x88
 80039ee:	2120      	movs	r1, #32
 80039f0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80039f2:	2300      	movs	r3, #0
 80039f4:	e000      	b.n	80039f8 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80039f6:	2302      	movs	r3, #2
  }
}
 80039f8:	0018      	movs	r0, r3
 80039fa:	46bd      	mov	sp, r7
 80039fc:	b008      	add	sp, #32
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a00:	b5b0      	push	{r4, r5, r7, lr}
 8003a02:	b0aa      	sub	sp, #168	; 0xa8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	22a4      	movs	r2, #164	; 0xa4
 8003a10:	18b9      	adds	r1, r7, r2
 8003a12:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	20a0      	movs	r0, #160	; 0xa0
 8003a1c:	1839      	adds	r1, r7, r0
 8003a1e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	249c      	movs	r4, #156	; 0x9c
 8003a28:	1939      	adds	r1, r7, r4
 8003a2a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003a2c:	0011      	movs	r1, r2
 8003a2e:	18bb      	adds	r3, r7, r2
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4aa2      	ldr	r2, [pc, #648]	; (8003cbc <HAL_UART_IRQHandler+0x2bc>)
 8003a34:	4013      	ands	r3, r2
 8003a36:	2298      	movs	r2, #152	; 0x98
 8003a38:	18bd      	adds	r5, r7, r2
 8003a3a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8003a3c:	18bb      	adds	r3, r7, r2
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d11a      	bne.n	8003a7a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003a44:	187b      	adds	r3, r7, r1
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2220      	movs	r2, #32
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	d015      	beq.n	8003a7a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003a4e:	183b      	adds	r3, r7, r0
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2220      	movs	r2, #32
 8003a54:	4013      	ands	r3, r2
 8003a56:	d105      	bne.n	8003a64 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003a58:	193b      	adds	r3, r7, r4
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	2380      	movs	r3, #128	; 0x80
 8003a5e:	055b      	lsls	r3, r3, #21
 8003a60:	4013      	ands	r3, r2
 8003a62:	d00a      	beq.n	8003a7a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d100      	bne.n	8003a6e <HAL_UART_IRQHandler+0x6e>
 8003a6c:	e2dc      	b.n	8004028 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	0010      	movs	r0, r2
 8003a76:	4798      	blx	r3
      }
      return;
 8003a78:	e2d6      	b.n	8004028 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003a7a:	2398      	movs	r3, #152	; 0x98
 8003a7c:	18fb      	adds	r3, r7, r3
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d100      	bne.n	8003a86 <HAL_UART_IRQHandler+0x86>
 8003a84:	e122      	b.n	8003ccc <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003a86:	239c      	movs	r3, #156	; 0x9c
 8003a88:	18fb      	adds	r3, r7, r3
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a8c      	ldr	r2, [pc, #560]	; (8003cc0 <HAL_UART_IRQHandler+0x2c0>)
 8003a8e:	4013      	ands	r3, r2
 8003a90:	d106      	bne.n	8003aa0 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003a92:	23a0      	movs	r3, #160	; 0xa0
 8003a94:	18fb      	adds	r3, r7, r3
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a8a      	ldr	r2, [pc, #552]	; (8003cc4 <HAL_UART_IRQHandler+0x2c4>)
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	d100      	bne.n	8003aa0 <HAL_UART_IRQHandler+0xa0>
 8003a9e:	e115      	b.n	8003ccc <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003aa0:	23a4      	movs	r3, #164	; 0xa4
 8003aa2:	18fb      	adds	r3, r7, r3
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	d012      	beq.n	8003ad2 <HAL_UART_IRQHandler+0xd2>
 8003aac:	23a0      	movs	r3, #160	; 0xa0
 8003aae:	18fb      	adds	r3, r7, r3
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	2380      	movs	r3, #128	; 0x80
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	d00b      	beq.n	8003ad2 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2290      	movs	r2, #144	; 0x90
 8003ac6:	589b      	ldr	r3, [r3, r2]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	431a      	orrs	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2190      	movs	r1, #144	; 0x90
 8003ad0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ad2:	23a4      	movs	r3, #164	; 0xa4
 8003ad4:	18fb      	adds	r3, r7, r3
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2202      	movs	r2, #2
 8003ada:	4013      	ands	r3, r2
 8003adc:	d011      	beq.n	8003b02 <HAL_UART_IRQHandler+0x102>
 8003ade:	239c      	movs	r3, #156	; 0x9c
 8003ae0:	18fb      	adds	r3, r7, r3
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	d00b      	beq.n	8003b02 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2202      	movs	r2, #2
 8003af0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2290      	movs	r2, #144	; 0x90
 8003af6:	589b      	ldr	r3, [r3, r2]
 8003af8:	2204      	movs	r2, #4
 8003afa:	431a      	orrs	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2190      	movs	r1, #144	; 0x90
 8003b00:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b02:	23a4      	movs	r3, #164	; 0xa4
 8003b04:	18fb      	adds	r3, r7, r3
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2204      	movs	r2, #4
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	d011      	beq.n	8003b32 <HAL_UART_IRQHandler+0x132>
 8003b0e:	239c      	movs	r3, #156	; 0x9c
 8003b10:	18fb      	adds	r3, r7, r3
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2201      	movs	r2, #1
 8003b16:	4013      	ands	r3, r2
 8003b18:	d00b      	beq.n	8003b32 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2204      	movs	r2, #4
 8003b20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2290      	movs	r2, #144	; 0x90
 8003b26:	589b      	ldr	r3, [r3, r2]
 8003b28:	2202      	movs	r2, #2
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2190      	movs	r1, #144	; 0x90
 8003b30:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003b32:	23a4      	movs	r3, #164	; 0xa4
 8003b34:	18fb      	adds	r3, r7, r3
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2208      	movs	r2, #8
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	d017      	beq.n	8003b6e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003b3e:	23a0      	movs	r3, #160	; 0xa0
 8003b40:	18fb      	adds	r3, r7, r3
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2220      	movs	r2, #32
 8003b46:	4013      	ands	r3, r2
 8003b48:	d105      	bne.n	8003b56 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003b4a:	239c      	movs	r3, #156	; 0x9c
 8003b4c:	18fb      	adds	r3, r7, r3
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a5b      	ldr	r2, [pc, #364]	; (8003cc0 <HAL_UART_IRQHandler+0x2c0>)
 8003b52:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003b54:	d00b      	beq.n	8003b6e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2208      	movs	r2, #8
 8003b5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2290      	movs	r2, #144	; 0x90
 8003b62:	589b      	ldr	r3, [r3, r2]
 8003b64:	2208      	movs	r2, #8
 8003b66:	431a      	orrs	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2190      	movs	r1, #144	; 0x90
 8003b6c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003b6e:	23a4      	movs	r3, #164	; 0xa4
 8003b70:	18fb      	adds	r3, r7, r3
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	2380      	movs	r3, #128	; 0x80
 8003b76:	011b      	lsls	r3, r3, #4
 8003b78:	4013      	ands	r3, r2
 8003b7a:	d013      	beq.n	8003ba4 <HAL_UART_IRQHandler+0x1a4>
 8003b7c:	23a0      	movs	r3, #160	; 0xa0
 8003b7e:	18fb      	adds	r3, r7, r3
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	2380      	movs	r3, #128	; 0x80
 8003b84:	04db      	lsls	r3, r3, #19
 8003b86:	4013      	ands	r3, r2
 8003b88:	d00c      	beq.n	8003ba4 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2280      	movs	r2, #128	; 0x80
 8003b90:	0112      	lsls	r2, r2, #4
 8003b92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2290      	movs	r2, #144	; 0x90
 8003b98:	589b      	ldr	r3, [r3, r2]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2190      	movs	r1, #144	; 0x90
 8003ba2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2290      	movs	r2, #144	; 0x90
 8003ba8:	589b      	ldr	r3, [r3, r2]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d100      	bne.n	8003bb0 <HAL_UART_IRQHandler+0x1b0>
 8003bae:	e23d      	b.n	800402c <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003bb0:	23a4      	movs	r3, #164	; 0xa4
 8003bb2:	18fb      	adds	r3, r7, r3
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	4013      	ands	r3, r2
 8003bba:	d015      	beq.n	8003be8 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003bbc:	23a0      	movs	r3, #160	; 0xa0
 8003bbe:	18fb      	adds	r3, r7, r3
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	d106      	bne.n	8003bd6 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003bc8:	239c      	movs	r3, #156	; 0x9c
 8003bca:	18fb      	adds	r3, r7, r3
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	2380      	movs	r3, #128	; 0x80
 8003bd0:	055b      	lsls	r3, r3, #21
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	d008      	beq.n	8003be8 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d004      	beq.n	8003be8 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	0010      	movs	r0, r2
 8003be6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2290      	movs	r2, #144	; 0x90
 8003bec:	589b      	ldr	r3, [r3, r2]
 8003bee:	2194      	movs	r1, #148	; 0x94
 8003bf0:	187a      	adds	r2, r7, r1
 8003bf2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	2240      	movs	r2, #64	; 0x40
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	2b40      	cmp	r3, #64	; 0x40
 8003c00:	d004      	beq.n	8003c0c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003c02:	187b      	adds	r3, r7, r1
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2228      	movs	r2, #40	; 0x28
 8003c08:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c0a:	d04c      	beq.n	8003ca6 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	0018      	movs	r0, r3
 8003c10:	f000 ff64 	bl	8004adc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	2240      	movs	r2, #64	; 0x40
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	2b40      	cmp	r3, #64	; 0x40
 8003c20:	d13c      	bne.n	8003c9c <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c22:	f3ef 8310 	mrs	r3, PRIMASK
 8003c26:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003c28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c2a:	2090      	movs	r0, #144	; 0x90
 8003c2c:	183a      	adds	r2, r7, r0
 8003c2e:	6013      	str	r3, [r2, #0]
 8003c30:	2301      	movs	r3, #1
 8003c32:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c36:	f383 8810 	msr	PRIMASK, r3
}
 8003c3a:	46c0      	nop			; (mov r8, r8)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689a      	ldr	r2, [r3, #8]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2140      	movs	r1, #64	; 0x40
 8003c48:	438a      	bics	r2, r1
 8003c4a:	609a      	str	r2, [r3, #8]
 8003c4c:	183b      	adds	r3, r7, r0
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c54:	f383 8810 	msr	PRIMASK, r3
}
 8003c58:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2280      	movs	r2, #128	; 0x80
 8003c5e:	589b      	ldr	r3, [r3, r2]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d016      	beq.n	8003c92 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2280      	movs	r2, #128	; 0x80
 8003c68:	589b      	ldr	r3, [r3, r2]
 8003c6a:	4a17      	ldr	r2, [pc, #92]	; (8003cc8 <HAL_UART_IRQHandler+0x2c8>)
 8003c6c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2280      	movs	r2, #128	; 0x80
 8003c72:	589b      	ldr	r3, [r3, r2]
 8003c74:	0018      	movs	r0, r3
 8003c76:	f7fd fddf 	bl	8001838 <HAL_DMA_Abort_IT>
 8003c7a:	1e03      	subs	r3, r0, #0
 8003c7c:	d01c      	beq.n	8003cb8 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2280      	movs	r2, #128	; 0x80
 8003c82:	589b      	ldr	r3, [r3, r2]
 8003c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	2180      	movs	r1, #128	; 0x80
 8003c8a:	5852      	ldr	r2, [r2, r1]
 8003c8c:	0010      	movs	r0, r2
 8003c8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c90:	e012      	b.n	8003cb8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	0018      	movs	r0, r3
 8003c96:	f000 f9f1 	bl	800407c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c9a:	e00d      	b.n	8003cb8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	0018      	movs	r0, r3
 8003ca0:	f000 f9ec 	bl	800407c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ca4:	e008      	b.n	8003cb8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	0018      	movs	r0, r3
 8003caa:	f000 f9e7 	bl	800407c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2290      	movs	r2, #144	; 0x90
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003cb6:	e1b9      	b.n	800402c <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb8:	46c0      	nop			; (mov r8, r8)
    return;
 8003cba:	e1b7      	b.n	800402c <HAL_UART_IRQHandler+0x62c>
 8003cbc:	0000080f 	.word	0x0000080f
 8003cc0:	10000001 	.word	0x10000001
 8003cc4:	04000120 	.word	0x04000120
 8003cc8:	08004da1 	.word	0x08004da1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d000      	beq.n	8003cd6 <HAL_UART_IRQHandler+0x2d6>
 8003cd4:	e13e      	b.n	8003f54 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003cd6:	23a4      	movs	r3, #164	; 0xa4
 8003cd8:	18fb      	adds	r3, r7, r3
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2210      	movs	r2, #16
 8003cde:	4013      	ands	r3, r2
 8003ce0:	d100      	bne.n	8003ce4 <HAL_UART_IRQHandler+0x2e4>
 8003ce2:	e137      	b.n	8003f54 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003ce4:	23a0      	movs	r3, #160	; 0xa0
 8003ce6:	18fb      	adds	r3, r7, r3
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2210      	movs	r2, #16
 8003cec:	4013      	ands	r3, r2
 8003cee:	d100      	bne.n	8003cf2 <HAL_UART_IRQHandler+0x2f2>
 8003cf0:	e130      	b.n	8003f54 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2210      	movs	r2, #16
 8003cf8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	2240      	movs	r2, #64	; 0x40
 8003d02:	4013      	ands	r3, r2
 8003d04:	2b40      	cmp	r3, #64	; 0x40
 8003d06:	d000      	beq.n	8003d0a <HAL_UART_IRQHandler+0x30a>
 8003d08:	e0a4      	b.n	8003e54 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2280      	movs	r2, #128	; 0x80
 8003d0e:	589b      	ldr	r3, [r3, r2]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	217e      	movs	r1, #126	; 0x7e
 8003d16:	187b      	adds	r3, r7, r1
 8003d18:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003d1a:	187b      	adds	r3, r7, r1
 8003d1c:	881b      	ldrh	r3, [r3, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d100      	bne.n	8003d24 <HAL_UART_IRQHandler+0x324>
 8003d22:	e185      	b.n	8004030 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	225c      	movs	r2, #92	; 0x5c
 8003d28:	5a9b      	ldrh	r3, [r3, r2]
 8003d2a:	187a      	adds	r2, r7, r1
 8003d2c:	8812      	ldrh	r2, [r2, #0]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d300      	bcc.n	8003d34 <HAL_UART_IRQHandler+0x334>
 8003d32:	e17d      	b.n	8004030 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	187a      	adds	r2, r7, r1
 8003d38:	215e      	movs	r1, #94	; 0x5e
 8003d3a:	8812      	ldrh	r2, [r2, #0]
 8003d3c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2280      	movs	r2, #128	; 0x80
 8003d42:	589b      	ldr	r3, [r3, r2]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2220      	movs	r2, #32
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	d170      	bne.n	8003e30 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d4e:	f3ef 8310 	mrs	r3, PRIMASK
 8003d52:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d56:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d58:	2301      	movs	r3, #1
 8003d5a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d5e:	f383 8810 	msr	PRIMASK, r3
}
 8003d62:	46c0      	nop			; (mov r8, r8)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	49b4      	ldr	r1, [pc, #720]	; (8004040 <HAL_UART_IRQHandler+0x640>)
 8003d70:	400a      	ands	r2, r1
 8003d72:	601a      	str	r2, [r3, #0]
 8003d74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d76:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d7a:	f383 8810 	msr	PRIMASK, r3
}
 8003d7e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d80:	f3ef 8310 	mrs	r3, PRIMASK
 8003d84:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d88:	677b      	str	r3, [r7, #116]	; 0x74
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d90:	f383 8810 	msr	PRIMASK, r3
}
 8003d94:	46c0      	nop			; (mov r8, r8)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	689a      	ldr	r2, [r3, #8]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2101      	movs	r1, #1
 8003da2:	438a      	bics	r2, r1
 8003da4:	609a      	str	r2, [r3, #8]
 8003da6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003da8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003daa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dac:	f383 8810 	msr	PRIMASK, r3
}
 8003db0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003db2:	f3ef 8310 	mrs	r3, PRIMASK
 8003db6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003db8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dba:	673b      	str	r3, [r7, #112]	; 0x70
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dc2:	f383 8810 	msr	PRIMASK, r3
}
 8003dc6:	46c0      	nop			; (mov r8, r8)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	689a      	ldr	r2, [r3, #8]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2140      	movs	r1, #64	; 0x40
 8003dd4:	438a      	bics	r2, r1
 8003dd6:	609a      	str	r2, [r3, #8]
 8003dd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003dda:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ddc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dde:	f383 8810 	msr	PRIMASK, r3
}
 8003de2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	228c      	movs	r2, #140	; 0x8c
 8003de8:	2120      	movs	r1, #32
 8003dea:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003df2:	f3ef 8310 	mrs	r3, PRIMASK
 8003df6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003df8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dfa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e02:	f383 8810 	msr	PRIMASK, r3
}
 8003e06:	46c0      	nop			; (mov r8, r8)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2110      	movs	r1, #16
 8003e14:	438a      	bics	r2, r1
 8003e16:	601a      	str	r2, [r3, #0]
 8003e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e1a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e1e:	f383 8810 	msr	PRIMASK, r3
}
 8003e22:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2280      	movs	r2, #128	; 0x80
 8003e28:	589b      	ldr	r3, [r3, r2]
 8003e2a:	0018      	movs	r0, r3
 8003e2c:	f7fd fca2 	bl	8001774 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2202      	movs	r2, #2
 8003e34:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	225c      	movs	r2, #92	; 0x5c
 8003e3a:	5a9a      	ldrh	r2, [r3, r2]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	215e      	movs	r1, #94	; 0x5e
 8003e40:	5a5b      	ldrh	r3, [r3, r1]
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	0011      	movs	r1, r2
 8003e4c:	0018      	movs	r0, r3
 8003e4e:	f7fc fee3 	bl	8000c18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003e52:	e0ed      	b.n	8004030 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	225c      	movs	r2, #92	; 0x5c
 8003e58:	5a99      	ldrh	r1, [r3, r2]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	225e      	movs	r2, #94	; 0x5e
 8003e5e:	5a9b      	ldrh	r3, [r3, r2]
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	208e      	movs	r0, #142	; 0x8e
 8003e64:	183b      	adds	r3, r7, r0
 8003e66:	1a8a      	subs	r2, r1, r2
 8003e68:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	225e      	movs	r2, #94	; 0x5e
 8003e6e:	5a9b      	ldrh	r3, [r3, r2]
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d100      	bne.n	8003e78 <HAL_UART_IRQHandler+0x478>
 8003e76:	e0dd      	b.n	8004034 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8003e78:	183b      	adds	r3, r7, r0
 8003e7a:	881b      	ldrh	r3, [r3, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d100      	bne.n	8003e82 <HAL_UART_IRQHandler+0x482>
 8003e80:	e0d8      	b.n	8004034 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e82:	f3ef 8310 	mrs	r3, PRIMASK
 8003e86:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e88:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003e8a:	2488      	movs	r4, #136	; 0x88
 8003e8c:	193a      	adds	r2, r7, r4
 8003e8e:	6013      	str	r3, [r2, #0]
 8003e90:	2301      	movs	r3, #1
 8003e92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	f383 8810 	msr	PRIMASK, r3
}
 8003e9a:	46c0      	nop			; (mov r8, r8)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4967      	ldr	r1, [pc, #412]	; (8004044 <HAL_UART_IRQHandler+0x644>)
 8003ea8:	400a      	ands	r2, r1
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	193b      	adds	r3, r7, r4
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f383 8810 	msr	PRIMASK, r3
}
 8003eb8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eba:	f3ef 8310 	mrs	r3, PRIMASK
 8003ebe:	61bb      	str	r3, [r7, #24]
  return(result);
 8003ec0:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003ec2:	2484      	movs	r4, #132	; 0x84
 8003ec4:	193a      	adds	r2, r7, r4
 8003ec6:	6013      	str	r3, [r2, #0]
 8003ec8:	2301      	movs	r3, #1
 8003eca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	f383 8810 	msr	PRIMASK, r3
}
 8003ed2:	46c0      	nop			; (mov r8, r8)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689a      	ldr	r2, [r3, #8]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	495a      	ldr	r1, [pc, #360]	; (8004048 <HAL_UART_IRQHandler+0x648>)
 8003ee0:	400a      	ands	r2, r1
 8003ee2:	609a      	str	r2, [r3, #8]
 8003ee4:	193b      	adds	r3, r7, r4
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eea:	6a3b      	ldr	r3, [r7, #32]
 8003eec:	f383 8810 	msr	PRIMASK, r3
}
 8003ef0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	228c      	movs	r2, #140	; 0x8c
 8003ef6:	2120      	movs	r1, #32
 8003ef8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f06:	f3ef 8310 	mrs	r3, PRIMASK
 8003f0a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f0e:	2480      	movs	r4, #128	; 0x80
 8003f10:	193a      	adds	r2, r7, r4
 8003f12:	6013      	str	r3, [r2, #0]
 8003f14:	2301      	movs	r3, #1
 8003f16:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1a:	f383 8810 	msr	PRIMASK, r3
}
 8003f1e:	46c0      	nop			; (mov r8, r8)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2110      	movs	r1, #16
 8003f2c:	438a      	bics	r2, r1
 8003f2e:	601a      	str	r2, [r3, #0]
 8003f30:	193b      	adds	r3, r7, r4
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f38:	f383 8810 	msr	PRIMASK, r3
}
 8003f3c:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2202      	movs	r2, #2
 8003f42:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f44:	183b      	adds	r3, r7, r0
 8003f46:	881a      	ldrh	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	0011      	movs	r1, r2
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	f7fc fe63 	bl	8000c18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f52:	e06f      	b.n	8004034 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003f54:	23a4      	movs	r3, #164	; 0xa4
 8003f56:	18fb      	adds	r3, r7, r3
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	2380      	movs	r3, #128	; 0x80
 8003f5c:	035b      	lsls	r3, r3, #13
 8003f5e:	4013      	ands	r3, r2
 8003f60:	d010      	beq.n	8003f84 <HAL_UART_IRQHandler+0x584>
 8003f62:	239c      	movs	r3, #156	; 0x9c
 8003f64:	18fb      	adds	r3, r7, r3
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	2380      	movs	r3, #128	; 0x80
 8003f6a:	03db      	lsls	r3, r3, #15
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	d009      	beq.n	8003f84 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2280      	movs	r2, #128	; 0x80
 8003f76:	0352      	lsls	r2, r2, #13
 8003f78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	0018      	movs	r0, r3
 8003f7e:	f000 ff52 	bl	8004e26 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003f82:	e05a      	b.n	800403a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003f84:	23a4      	movs	r3, #164	; 0xa4
 8003f86:	18fb      	adds	r3, r7, r3
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2280      	movs	r2, #128	; 0x80
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	d016      	beq.n	8003fbe <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003f90:	23a0      	movs	r3, #160	; 0xa0
 8003f92:	18fb      	adds	r3, r7, r3
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2280      	movs	r2, #128	; 0x80
 8003f98:	4013      	ands	r3, r2
 8003f9a:	d106      	bne.n	8003faa <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003f9c:	239c      	movs	r3, #156	; 0x9c
 8003f9e:	18fb      	adds	r3, r7, r3
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	2380      	movs	r3, #128	; 0x80
 8003fa4:	041b      	lsls	r3, r3, #16
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	d009      	beq.n	8003fbe <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d042      	beq.n	8004038 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	0010      	movs	r0, r2
 8003fba:	4798      	blx	r3
    }
    return;
 8003fbc:	e03c      	b.n	8004038 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003fbe:	23a4      	movs	r3, #164	; 0xa4
 8003fc0:	18fb      	adds	r3, r7, r3
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2240      	movs	r2, #64	; 0x40
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	d00a      	beq.n	8003fe0 <HAL_UART_IRQHandler+0x5e0>
 8003fca:	23a0      	movs	r3, #160	; 0xa0
 8003fcc:	18fb      	adds	r3, r7, r3
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2240      	movs	r2, #64	; 0x40
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	d004      	beq.n	8003fe0 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	0018      	movs	r0, r3
 8003fda:	f000 fef8 	bl	8004dce <UART_EndTransmit_IT>
    return;
 8003fde:	e02c      	b.n	800403a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003fe0:	23a4      	movs	r3, #164	; 0xa4
 8003fe2:	18fb      	adds	r3, r7, r3
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	2380      	movs	r3, #128	; 0x80
 8003fe8:	041b      	lsls	r3, r3, #16
 8003fea:	4013      	ands	r3, r2
 8003fec:	d00b      	beq.n	8004006 <HAL_UART_IRQHandler+0x606>
 8003fee:	23a0      	movs	r3, #160	; 0xa0
 8003ff0:	18fb      	adds	r3, r7, r3
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	2380      	movs	r3, #128	; 0x80
 8003ff6:	05db      	lsls	r3, r3, #23
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	d004      	beq.n	8004006 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	0018      	movs	r0, r3
 8004000:	f000 ff21 	bl	8004e46 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004004:	e019      	b.n	800403a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004006:	23a4      	movs	r3, #164	; 0xa4
 8004008:	18fb      	adds	r3, r7, r3
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	2380      	movs	r3, #128	; 0x80
 800400e:	045b      	lsls	r3, r3, #17
 8004010:	4013      	ands	r3, r2
 8004012:	d012      	beq.n	800403a <HAL_UART_IRQHandler+0x63a>
 8004014:	23a0      	movs	r3, #160	; 0xa0
 8004016:	18fb      	adds	r3, r7, r3
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	da0d      	bge.n	800403a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	0018      	movs	r0, r3
 8004022:	f000 ff08 	bl	8004e36 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004026:	e008      	b.n	800403a <HAL_UART_IRQHandler+0x63a>
      return;
 8004028:	46c0      	nop			; (mov r8, r8)
 800402a:	e006      	b.n	800403a <HAL_UART_IRQHandler+0x63a>
    return;
 800402c:	46c0      	nop			; (mov r8, r8)
 800402e:	e004      	b.n	800403a <HAL_UART_IRQHandler+0x63a>
      return;
 8004030:	46c0      	nop			; (mov r8, r8)
 8004032:	e002      	b.n	800403a <HAL_UART_IRQHandler+0x63a>
      return;
 8004034:	46c0      	nop			; (mov r8, r8)
 8004036:	e000      	b.n	800403a <HAL_UART_IRQHandler+0x63a>
    return;
 8004038:	46c0      	nop			; (mov r8, r8)
  }
}
 800403a:	46bd      	mov	sp, r7
 800403c:	b02a      	add	sp, #168	; 0xa8
 800403e:	bdb0      	pop	{r4, r5, r7, pc}
 8004040:	fffffeff 	.word	0xfffffeff
 8004044:	fffffedf 	.word	0xfffffedf
 8004048:	effffffe 	.word	0xeffffffe

0800404c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004054:	46c0      	nop			; (mov r8, r8)
 8004056:	46bd      	mov	sp, r7
 8004058:	b002      	add	sp, #8
 800405a:	bd80      	pop	{r7, pc}

0800405c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004064:	46c0      	nop			; (mov r8, r8)
 8004066:	46bd      	mov	sp, r7
 8004068:	b002      	add	sp, #8
 800406a:	bd80      	pop	{r7, pc}

0800406c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004074:	46c0      	nop			; (mov r8, r8)
 8004076:	46bd      	mov	sp, r7
 8004078:	b002      	add	sp, #8
 800407a:	bd80      	pop	{r7, pc}

0800407c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004084:	46c0      	nop			; (mov r8, r8)
 8004086:	46bd      	mov	sp, r7
 8004088:	b002      	add	sp, #8
 800408a:	bd80      	pop	{r7, pc}

0800408c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800408c:	b5b0      	push	{r4, r5, r7, lr}
 800408e:	b090      	sub	sp, #64	; 0x40
 8004090:	af00      	add	r7, sp, #0
 8004092:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004094:	231a      	movs	r3, #26
 8004096:	2220      	movs	r2, #32
 8004098:	189b      	adds	r3, r3, r2
 800409a:	19db      	adds	r3, r3, r7
 800409c:	2200      	movs	r2, #0
 800409e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a2:	689a      	ldr	r2, [r3, #8]
 80040a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	431a      	orrs	r2, r3
 80040aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	431a      	orrs	r2, r3
 80040b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b2:	69db      	ldr	r3, [r3, #28]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4ac4      	ldr	r2, [pc, #784]	; (80043d0 <UART_SetConfig+0x344>)
 80040c0:	4013      	ands	r3, r2
 80040c2:	0019      	movs	r1, r3
 80040c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040ca:	430b      	orrs	r3, r1
 80040cc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	4abf      	ldr	r2, [pc, #764]	; (80043d4 <UART_SetConfig+0x348>)
 80040d6:	4013      	ands	r3, r2
 80040d8:	0018      	movs	r0, r3
 80040da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040dc:	68d9      	ldr	r1, [r3, #12]
 80040de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	0003      	movs	r3, r0
 80040e4:	430b      	orrs	r3, r1
 80040e6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80040ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4ab9      	ldr	r2, [pc, #740]	; (80043d8 <UART_SetConfig+0x34c>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d004      	beq.n	8004102 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80040f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040fe:	4313      	orrs	r3, r2
 8004100:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	4ab4      	ldr	r2, [pc, #720]	; (80043dc <UART_SetConfig+0x350>)
 800410a:	4013      	ands	r3, r2
 800410c:	0019      	movs	r1, r3
 800410e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004114:	430b      	orrs	r3, r1
 8004116:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411e:	220f      	movs	r2, #15
 8004120:	4393      	bics	r3, r2
 8004122:	0018      	movs	r0, r3
 8004124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004126:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	0003      	movs	r3, r0
 800412e:	430b      	orrs	r3, r1
 8004130:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4aaa      	ldr	r2, [pc, #680]	; (80043e0 <UART_SetConfig+0x354>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d131      	bne.n	80041a0 <UART_SetConfig+0x114>
 800413c:	4ba9      	ldr	r3, [pc, #676]	; (80043e4 <UART_SetConfig+0x358>)
 800413e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004140:	2203      	movs	r2, #3
 8004142:	4013      	ands	r3, r2
 8004144:	2b03      	cmp	r3, #3
 8004146:	d01d      	beq.n	8004184 <UART_SetConfig+0xf8>
 8004148:	d823      	bhi.n	8004192 <UART_SetConfig+0x106>
 800414a:	2b02      	cmp	r3, #2
 800414c:	d00c      	beq.n	8004168 <UART_SetConfig+0xdc>
 800414e:	d820      	bhi.n	8004192 <UART_SetConfig+0x106>
 8004150:	2b00      	cmp	r3, #0
 8004152:	d002      	beq.n	800415a <UART_SetConfig+0xce>
 8004154:	2b01      	cmp	r3, #1
 8004156:	d00e      	beq.n	8004176 <UART_SetConfig+0xea>
 8004158:	e01b      	b.n	8004192 <UART_SetConfig+0x106>
 800415a:	231b      	movs	r3, #27
 800415c:	2220      	movs	r2, #32
 800415e:	189b      	adds	r3, r3, r2
 8004160:	19db      	adds	r3, r3, r7
 8004162:	2200      	movs	r2, #0
 8004164:	701a      	strb	r2, [r3, #0]
 8004166:	e071      	b.n	800424c <UART_SetConfig+0x1c0>
 8004168:	231b      	movs	r3, #27
 800416a:	2220      	movs	r2, #32
 800416c:	189b      	adds	r3, r3, r2
 800416e:	19db      	adds	r3, r3, r7
 8004170:	2202      	movs	r2, #2
 8004172:	701a      	strb	r2, [r3, #0]
 8004174:	e06a      	b.n	800424c <UART_SetConfig+0x1c0>
 8004176:	231b      	movs	r3, #27
 8004178:	2220      	movs	r2, #32
 800417a:	189b      	adds	r3, r3, r2
 800417c:	19db      	adds	r3, r3, r7
 800417e:	2204      	movs	r2, #4
 8004180:	701a      	strb	r2, [r3, #0]
 8004182:	e063      	b.n	800424c <UART_SetConfig+0x1c0>
 8004184:	231b      	movs	r3, #27
 8004186:	2220      	movs	r2, #32
 8004188:	189b      	adds	r3, r3, r2
 800418a:	19db      	adds	r3, r3, r7
 800418c:	2208      	movs	r2, #8
 800418e:	701a      	strb	r2, [r3, #0]
 8004190:	e05c      	b.n	800424c <UART_SetConfig+0x1c0>
 8004192:	231b      	movs	r3, #27
 8004194:	2220      	movs	r2, #32
 8004196:	189b      	adds	r3, r3, r2
 8004198:	19db      	adds	r3, r3, r7
 800419a:	2210      	movs	r2, #16
 800419c:	701a      	strb	r2, [r3, #0]
 800419e:	e055      	b.n	800424c <UART_SetConfig+0x1c0>
 80041a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a90      	ldr	r2, [pc, #576]	; (80043e8 <UART_SetConfig+0x35c>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d106      	bne.n	80041b8 <UART_SetConfig+0x12c>
 80041aa:	231b      	movs	r3, #27
 80041ac:	2220      	movs	r2, #32
 80041ae:	189b      	adds	r3, r3, r2
 80041b0:	19db      	adds	r3, r3, r7
 80041b2:	2200      	movs	r2, #0
 80041b4:	701a      	strb	r2, [r3, #0]
 80041b6:	e049      	b.n	800424c <UART_SetConfig+0x1c0>
 80041b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a86      	ldr	r2, [pc, #536]	; (80043d8 <UART_SetConfig+0x34c>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d13e      	bne.n	8004240 <UART_SetConfig+0x1b4>
 80041c2:	4b88      	ldr	r3, [pc, #544]	; (80043e4 <UART_SetConfig+0x358>)
 80041c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041c6:	23c0      	movs	r3, #192	; 0xc0
 80041c8:	011b      	lsls	r3, r3, #4
 80041ca:	4013      	ands	r3, r2
 80041cc:	22c0      	movs	r2, #192	; 0xc0
 80041ce:	0112      	lsls	r2, r2, #4
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d027      	beq.n	8004224 <UART_SetConfig+0x198>
 80041d4:	22c0      	movs	r2, #192	; 0xc0
 80041d6:	0112      	lsls	r2, r2, #4
 80041d8:	4293      	cmp	r3, r2
 80041da:	d82a      	bhi.n	8004232 <UART_SetConfig+0x1a6>
 80041dc:	2280      	movs	r2, #128	; 0x80
 80041de:	0112      	lsls	r2, r2, #4
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d011      	beq.n	8004208 <UART_SetConfig+0x17c>
 80041e4:	2280      	movs	r2, #128	; 0x80
 80041e6:	0112      	lsls	r2, r2, #4
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d822      	bhi.n	8004232 <UART_SetConfig+0x1a6>
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d004      	beq.n	80041fa <UART_SetConfig+0x16e>
 80041f0:	2280      	movs	r2, #128	; 0x80
 80041f2:	00d2      	lsls	r2, r2, #3
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d00e      	beq.n	8004216 <UART_SetConfig+0x18a>
 80041f8:	e01b      	b.n	8004232 <UART_SetConfig+0x1a6>
 80041fa:	231b      	movs	r3, #27
 80041fc:	2220      	movs	r2, #32
 80041fe:	189b      	adds	r3, r3, r2
 8004200:	19db      	adds	r3, r3, r7
 8004202:	2200      	movs	r2, #0
 8004204:	701a      	strb	r2, [r3, #0]
 8004206:	e021      	b.n	800424c <UART_SetConfig+0x1c0>
 8004208:	231b      	movs	r3, #27
 800420a:	2220      	movs	r2, #32
 800420c:	189b      	adds	r3, r3, r2
 800420e:	19db      	adds	r3, r3, r7
 8004210:	2202      	movs	r2, #2
 8004212:	701a      	strb	r2, [r3, #0]
 8004214:	e01a      	b.n	800424c <UART_SetConfig+0x1c0>
 8004216:	231b      	movs	r3, #27
 8004218:	2220      	movs	r2, #32
 800421a:	189b      	adds	r3, r3, r2
 800421c:	19db      	adds	r3, r3, r7
 800421e:	2204      	movs	r2, #4
 8004220:	701a      	strb	r2, [r3, #0]
 8004222:	e013      	b.n	800424c <UART_SetConfig+0x1c0>
 8004224:	231b      	movs	r3, #27
 8004226:	2220      	movs	r2, #32
 8004228:	189b      	adds	r3, r3, r2
 800422a:	19db      	adds	r3, r3, r7
 800422c:	2208      	movs	r2, #8
 800422e:	701a      	strb	r2, [r3, #0]
 8004230:	e00c      	b.n	800424c <UART_SetConfig+0x1c0>
 8004232:	231b      	movs	r3, #27
 8004234:	2220      	movs	r2, #32
 8004236:	189b      	adds	r3, r3, r2
 8004238:	19db      	adds	r3, r3, r7
 800423a:	2210      	movs	r2, #16
 800423c:	701a      	strb	r2, [r3, #0]
 800423e:	e005      	b.n	800424c <UART_SetConfig+0x1c0>
 8004240:	231b      	movs	r3, #27
 8004242:	2220      	movs	r2, #32
 8004244:	189b      	adds	r3, r3, r2
 8004246:	19db      	adds	r3, r3, r7
 8004248:	2210      	movs	r2, #16
 800424a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800424c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a61      	ldr	r2, [pc, #388]	; (80043d8 <UART_SetConfig+0x34c>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d000      	beq.n	8004258 <UART_SetConfig+0x1cc>
 8004256:	e092      	b.n	800437e <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004258:	231b      	movs	r3, #27
 800425a:	2220      	movs	r2, #32
 800425c:	189b      	adds	r3, r3, r2
 800425e:	19db      	adds	r3, r3, r7
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	2b08      	cmp	r3, #8
 8004264:	d015      	beq.n	8004292 <UART_SetConfig+0x206>
 8004266:	dc18      	bgt.n	800429a <UART_SetConfig+0x20e>
 8004268:	2b04      	cmp	r3, #4
 800426a:	d00d      	beq.n	8004288 <UART_SetConfig+0x1fc>
 800426c:	dc15      	bgt.n	800429a <UART_SetConfig+0x20e>
 800426e:	2b00      	cmp	r3, #0
 8004270:	d002      	beq.n	8004278 <UART_SetConfig+0x1ec>
 8004272:	2b02      	cmp	r3, #2
 8004274:	d005      	beq.n	8004282 <UART_SetConfig+0x1f6>
 8004276:	e010      	b.n	800429a <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004278:	f7fe fb14 	bl	80028a4 <HAL_RCC_GetPCLK1Freq>
 800427c:	0003      	movs	r3, r0
 800427e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004280:	e014      	b.n	80042ac <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004282:	4b5a      	ldr	r3, [pc, #360]	; (80043ec <UART_SetConfig+0x360>)
 8004284:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004286:	e011      	b.n	80042ac <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004288:	f7fe fa80 	bl	800278c <HAL_RCC_GetSysClockFreq>
 800428c:	0003      	movs	r3, r0
 800428e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004290:	e00c      	b.n	80042ac <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004292:	2380      	movs	r3, #128	; 0x80
 8004294:	021b      	lsls	r3, r3, #8
 8004296:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004298:	e008      	b.n	80042ac <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 800429a:	2300      	movs	r3, #0
 800429c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800429e:	231a      	movs	r3, #26
 80042a0:	2220      	movs	r2, #32
 80042a2:	189b      	adds	r3, r3, r2
 80042a4:	19db      	adds	r3, r3, r7
 80042a6:	2201      	movs	r2, #1
 80042a8:	701a      	strb	r2, [r3, #0]
        break;
 80042aa:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80042ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d100      	bne.n	80042b4 <UART_SetConfig+0x228>
 80042b2:	e147      	b.n	8004544 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80042b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042b8:	4b4d      	ldr	r3, [pc, #308]	; (80043f0 <UART_SetConfig+0x364>)
 80042ba:	0052      	lsls	r2, r2, #1
 80042bc:	5ad3      	ldrh	r3, [r2, r3]
 80042be:	0019      	movs	r1, r3
 80042c0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80042c2:	f7fb ff31 	bl	8000128 <__udivsi3>
 80042c6:	0003      	movs	r3, r0
 80042c8:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80042ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	0013      	movs	r3, r2
 80042d0:	005b      	lsls	r3, r3, #1
 80042d2:	189b      	adds	r3, r3, r2
 80042d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d305      	bcc.n	80042e6 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80042da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80042e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d906      	bls.n	80042f4 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 80042e6:	231a      	movs	r3, #26
 80042e8:	2220      	movs	r2, #32
 80042ea:	189b      	adds	r3, r3, r2
 80042ec:	19db      	adds	r3, r3, r7
 80042ee:	2201      	movs	r2, #1
 80042f0:	701a      	strb	r2, [r3, #0]
 80042f2:	e127      	b.n	8004544 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042f6:	61bb      	str	r3, [r7, #24]
 80042f8:	2300      	movs	r3, #0
 80042fa:	61fb      	str	r3, [r7, #28]
 80042fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004300:	4b3b      	ldr	r3, [pc, #236]	; (80043f0 <UART_SetConfig+0x364>)
 8004302:	0052      	lsls	r2, r2, #1
 8004304:	5ad3      	ldrh	r3, [r2, r3]
 8004306:	613b      	str	r3, [r7, #16]
 8004308:	2300      	movs	r3, #0
 800430a:	617b      	str	r3, [r7, #20]
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	69b8      	ldr	r0, [r7, #24]
 8004312:	69f9      	ldr	r1, [r7, #28]
 8004314:	f7fc f87e 	bl	8000414 <__aeabi_uldivmod>
 8004318:	0002      	movs	r2, r0
 800431a:	000b      	movs	r3, r1
 800431c:	0e11      	lsrs	r1, r2, #24
 800431e:	021d      	lsls	r5, r3, #8
 8004320:	430d      	orrs	r5, r1
 8004322:	0214      	lsls	r4, r2, #8
 8004324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	085b      	lsrs	r3, r3, #1
 800432a:	60bb      	str	r3, [r7, #8]
 800432c:	2300      	movs	r3, #0
 800432e:	60fb      	str	r3, [r7, #12]
 8004330:	68b8      	ldr	r0, [r7, #8]
 8004332:	68f9      	ldr	r1, [r7, #12]
 8004334:	1900      	adds	r0, r0, r4
 8004336:	4169      	adcs	r1, r5
 8004338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	603b      	str	r3, [r7, #0]
 800433e:	2300      	movs	r3, #0
 8004340:	607b      	str	r3, [r7, #4]
 8004342:	683a      	ldr	r2, [r7, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f7fc f865 	bl	8000414 <__aeabi_uldivmod>
 800434a:	0002      	movs	r2, r0
 800434c:	000b      	movs	r3, r1
 800434e:	0013      	movs	r3, r2
 8004350:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004352:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004354:	23c0      	movs	r3, #192	; 0xc0
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	429a      	cmp	r2, r3
 800435a:	d309      	bcc.n	8004370 <UART_SetConfig+0x2e4>
 800435c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800435e:	2380      	movs	r3, #128	; 0x80
 8004360:	035b      	lsls	r3, r3, #13
 8004362:	429a      	cmp	r2, r3
 8004364:	d204      	bcs.n	8004370 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8004366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800436c:	60da      	str	r2, [r3, #12]
 800436e:	e0e9      	b.n	8004544 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8004370:	231a      	movs	r3, #26
 8004372:	2220      	movs	r2, #32
 8004374:	189b      	adds	r3, r3, r2
 8004376:	19db      	adds	r3, r3, r7
 8004378:	2201      	movs	r2, #1
 800437a:	701a      	strb	r2, [r3, #0]
 800437c:	e0e2      	b.n	8004544 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004380:	69da      	ldr	r2, [r3, #28]
 8004382:	2380      	movs	r3, #128	; 0x80
 8004384:	021b      	lsls	r3, r3, #8
 8004386:	429a      	cmp	r2, r3
 8004388:	d000      	beq.n	800438c <UART_SetConfig+0x300>
 800438a:	e083      	b.n	8004494 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800438c:	231b      	movs	r3, #27
 800438e:	2220      	movs	r2, #32
 8004390:	189b      	adds	r3, r3, r2
 8004392:	19db      	adds	r3, r3, r7
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	2b08      	cmp	r3, #8
 8004398:	d015      	beq.n	80043c6 <UART_SetConfig+0x33a>
 800439a:	dc2b      	bgt.n	80043f4 <UART_SetConfig+0x368>
 800439c:	2b04      	cmp	r3, #4
 800439e:	d00d      	beq.n	80043bc <UART_SetConfig+0x330>
 80043a0:	dc28      	bgt.n	80043f4 <UART_SetConfig+0x368>
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d002      	beq.n	80043ac <UART_SetConfig+0x320>
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d005      	beq.n	80043b6 <UART_SetConfig+0x32a>
 80043aa:	e023      	b.n	80043f4 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043ac:	f7fe fa7a 	bl	80028a4 <HAL_RCC_GetPCLK1Freq>
 80043b0:	0003      	movs	r3, r0
 80043b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80043b4:	e027      	b.n	8004406 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043b6:	4b0d      	ldr	r3, [pc, #52]	; (80043ec <UART_SetConfig+0x360>)
 80043b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80043ba:	e024      	b.n	8004406 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043bc:	f7fe f9e6 	bl	800278c <HAL_RCC_GetSysClockFreq>
 80043c0:	0003      	movs	r3, r0
 80043c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80043c4:	e01f      	b.n	8004406 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043c6:	2380      	movs	r3, #128	; 0x80
 80043c8:	021b      	lsls	r3, r3, #8
 80043ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80043cc:	e01b      	b.n	8004406 <UART_SetConfig+0x37a>
 80043ce:	46c0      	nop			; (mov r8, r8)
 80043d0:	cfff69f3 	.word	0xcfff69f3
 80043d4:	ffffcfff 	.word	0xffffcfff
 80043d8:	40008000 	.word	0x40008000
 80043dc:	11fff4ff 	.word	0x11fff4ff
 80043e0:	40013800 	.word	0x40013800
 80043e4:	40021000 	.word	0x40021000
 80043e8:	40004400 	.word	0x40004400
 80043ec:	00f42400 	.word	0x00f42400
 80043f0:	080066d4 	.word	0x080066d4
      default:
        pclk = 0U;
 80043f4:	2300      	movs	r3, #0
 80043f6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80043f8:	231a      	movs	r3, #26
 80043fa:	2220      	movs	r2, #32
 80043fc:	189b      	adds	r3, r3, r2
 80043fe:	19db      	adds	r3, r3, r7
 8004400:	2201      	movs	r2, #1
 8004402:	701a      	strb	r2, [r3, #0]
        break;
 8004404:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004408:	2b00      	cmp	r3, #0
 800440a:	d100      	bne.n	800440e <UART_SetConfig+0x382>
 800440c:	e09a      	b.n	8004544 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004410:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004412:	4b58      	ldr	r3, [pc, #352]	; (8004574 <UART_SetConfig+0x4e8>)
 8004414:	0052      	lsls	r2, r2, #1
 8004416:	5ad3      	ldrh	r3, [r2, r3]
 8004418:	0019      	movs	r1, r3
 800441a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800441c:	f7fb fe84 	bl	8000128 <__udivsi3>
 8004420:	0003      	movs	r3, r0
 8004422:	005a      	lsls	r2, r3, #1
 8004424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	085b      	lsrs	r3, r3, #1
 800442a:	18d2      	adds	r2, r2, r3
 800442c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	0019      	movs	r1, r3
 8004432:	0010      	movs	r0, r2
 8004434:	f7fb fe78 	bl	8000128 <__udivsi3>
 8004438:	0003      	movs	r3, r0
 800443a:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800443c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443e:	2b0f      	cmp	r3, #15
 8004440:	d921      	bls.n	8004486 <UART_SetConfig+0x3fa>
 8004442:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004444:	2380      	movs	r3, #128	; 0x80
 8004446:	025b      	lsls	r3, r3, #9
 8004448:	429a      	cmp	r2, r3
 800444a:	d21c      	bcs.n	8004486 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800444c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444e:	b29a      	uxth	r2, r3
 8004450:	200e      	movs	r0, #14
 8004452:	2420      	movs	r4, #32
 8004454:	1903      	adds	r3, r0, r4
 8004456:	19db      	adds	r3, r3, r7
 8004458:	210f      	movs	r1, #15
 800445a:	438a      	bics	r2, r1
 800445c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800445e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004460:	085b      	lsrs	r3, r3, #1
 8004462:	b29b      	uxth	r3, r3
 8004464:	2207      	movs	r2, #7
 8004466:	4013      	ands	r3, r2
 8004468:	b299      	uxth	r1, r3
 800446a:	1903      	adds	r3, r0, r4
 800446c:	19db      	adds	r3, r3, r7
 800446e:	1902      	adds	r2, r0, r4
 8004470:	19d2      	adds	r2, r2, r7
 8004472:	8812      	ldrh	r2, [r2, #0]
 8004474:	430a      	orrs	r2, r1
 8004476:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	1902      	adds	r2, r0, r4
 800447e:	19d2      	adds	r2, r2, r7
 8004480:	8812      	ldrh	r2, [r2, #0]
 8004482:	60da      	str	r2, [r3, #12]
 8004484:	e05e      	b.n	8004544 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8004486:	231a      	movs	r3, #26
 8004488:	2220      	movs	r2, #32
 800448a:	189b      	adds	r3, r3, r2
 800448c:	19db      	adds	r3, r3, r7
 800448e:	2201      	movs	r2, #1
 8004490:	701a      	strb	r2, [r3, #0]
 8004492:	e057      	b.n	8004544 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004494:	231b      	movs	r3, #27
 8004496:	2220      	movs	r2, #32
 8004498:	189b      	adds	r3, r3, r2
 800449a:	19db      	adds	r3, r3, r7
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	2b08      	cmp	r3, #8
 80044a0:	d015      	beq.n	80044ce <UART_SetConfig+0x442>
 80044a2:	dc18      	bgt.n	80044d6 <UART_SetConfig+0x44a>
 80044a4:	2b04      	cmp	r3, #4
 80044a6:	d00d      	beq.n	80044c4 <UART_SetConfig+0x438>
 80044a8:	dc15      	bgt.n	80044d6 <UART_SetConfig+0x44a>
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d002      	beq.n	80044b4 <UART_SetConfig+0x428>
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d005      	beq.n	80044be <UART_SetConfig+0x432>
 80044b2:	e010      	b.n	80044d6 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044b4:	f7fe f9f6 	bl	80028a4 <HAL_RCC_GetPCLK1Freq>
 80044b8:	0003      	movs	r3, r0
 80044ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80044bc:	e014      	b.n	80044e8 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044be:	4b2e      	ldr	r3, [pc, #184]	; (8004578 <UART_SetConfig+0x4ec>)
 80044c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80044c2:	e011      	b.n	80044e8 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044c4:	f7fe f962 	bl	800278c <HAL_RCC_GetSysClockFreq>
 80044c8:	0003      	movs	r3, r0
 80044ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80044cc:	e00c      	b.n	80044e8 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044ce:	2380      	movs	r3, #128	; 0x80
 80044d0:	021b      	lsls	r3, r3, #8
 80044d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80044d4:	e008      	b.n	80044e8 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 80044d6:	2300      	movs	r3, #0
 80044d8:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80044da:	231a      	movs	r3, #26
 80044dc:	2220      	movs	r2, #32
 80044de:	189b      	adds	r3, r3, r2
 80044e0:	19db      	adds	r3, r3, r7
 80044e2:	2201      	movs	r2, #1
 80044e4:	701a      	strb	r2, [r3, #0]
        break;
 80044e6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80044e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d02a      	beq.n	8004544 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044f2:	4b20      	ldr	r3, [pc, #128]	; (8004574 <UART_SetConfig+0x4e8>)
 80044f4:	0052      	lsls	r2, r2, #1
 80044f6:	5ad3      	ldrh	r3, [r2, r3]
 80044f8:	0019      	movs	r1, r3
 80044fa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80044fc:	f7fb fe14 	bl	8000128 <__udivsi3>
 8004500:	0003      	movs	r3, r0
 8004502:	001a      	movs	r2, r3
 8004504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	085b      	lsrs	r3, r3, #1
 800450a:	18d2      	adds	r2, r2, r3
 800450c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	0019      	movs	r1, r3
 8004512:	0010      	movs	r0, r2
 8004514:	f7fb fe08 	bl	8000128 <__udivsi3>
 8004518:	0003      	movs	r3, r0
 800451a:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800451c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451e:	2b0f      	cmp	r3, #15
 8004520:	d90a      	bls.n	8004538 <UART_SetConfig+0x4ac>
 8004522:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004524:	2380      	movs	r3, #128	; 0x80
 8004526:	025b      	lsls	r3, r3, #9
 8004528:	429a      	cmp	r2, r3
 800452a:	d205      	bcs.n	8004538 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800452c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452e:	b29a      	uxth	r2, r3
 8004530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	60da      	str	r2, [r3, #12]
 8004536:	e005      	b.n	8004544 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8004538:	231a      	movs	r3, #26
 800453a:	2220      	movs	r2, #32
 800453c:	189b      	adds	r3, r3, r2
 800453e:	19db      	adds	r3, r3, r7
 8004540:	2201      	movs	r2, #1
 8004542:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004546:	226a      	movs	r2, #106	; 0x6a
 8004548:	2101      	movs	r1, #1
 800454a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800454c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454e:	2268      	movs	r2, #104	; 0x68
 8004550:	2101      	movs	r1, #1
 8004552:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004556:	2200      	movs	r2, #0
 8004558:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800455a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455c:	2200      	movs	r2, #0
 800455e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004560:	231a      	movs	r3, #26
 8004562:	2220      	movs	r2, #32
 8004564:	189b      	adds	r3, r3, r2
 8004566:	19db      	adds	r3, r3, r7
 8004568:	781b      	ldrb	r3, [r3, #0]
}
 800456a:	0018      	movs	r0, r3
 800456c:	46bd      	mov	sp, r7
 800456e:	b010      	add	sp, #64	; 0x40
 8004570:	bdb0      	pop	{r4, r5, r7, pc}
 8004572:	46c0      	nop			; (mov r8, r8)
 8004574:	080066d4 	.word	0x080066d4
 8004578:	00f42400 	.word	0x00f42400

0800457c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004588:	2201      	movs	r2, #1
 800458a:	4013      	ands	r3, r2
 800458c:	d00b      	beq.n	80045a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	4a4a      	ldr	r2, [pc, #296]	; (80046c0 <UART_AdvFeatureConfig+0x144>)
 8004596:	4013      	ands	r3, r2
 8004598:	0019      	movs	r1, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	430a      	orrs	r2, r1
 80045a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045aa:	2202      	movs	r2, #2
 80045ac:	4013      	ands	r3, r2
 80045ae:	d00b      	beq.n	80045c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	4a43      	ldr	r2, [pc, #268]	; (80046c4 <UART_AdvFeatureConfig+0x148>)
 80045b8:	4013      	ands	r3, r2
 80045ba:	0019      	movs	r1, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	430a      	orrs	r2, r1
 80045c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045cc:	2204      	movs	r2, #4
 80045ce:	4013      	ands	r3, r2
 80045d0:	d00b      	beq.n	80045ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	4a3b      	ldr	r2, [pc, #236]	; (80046c8 <UART_AdvFeatureConfig+0x14c>)
 80045da:	4013      	ands	r3, r2
 80045dc:	0019      	movs	r1, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	430a      	orrs	r2, r1
 80045e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ee:	2208      	movs	r2, #8
 80045f0:	4013      	ands	r3, r2
 80045f2:	d00b      	beq.n	800460c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	4a34      	ldr	r2, [pc, #208]	; (80046cc <UART_AdvFeatureConfig+0x150>)
 80045fc:	4013      	ands	r3, r2
 80045fe:	0019      	movs	r1, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	430a      	orrs	r2, r1
 800460a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004610:	2210      	movs	r2, #16
 8004612:	4013      	ands	r3, r2
 8004614:	d00b      	beq.n	800462e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	4a2c      	ldr	r2, [pc, #176]	; (80046d0 <UART_AdvFeatureConfig+0x154>)
 800461e:	4013      	ands	r3, r2
 8004620:	0019      	movs	r1, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	430a      	orrs	r2, r1
 800462c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004632:	2220      	movs	r2, #32
 8004634:	4013      	ands	r3, r2
 8004636:	d00b      	beq.n	8004650 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	4a25      	ldr	r2, [pc, #148]	; (80046d4 <UART_AdvFeatureConfig+0x158>)
 8004640:	4013      	ands	r3, r2
 8004642:	0019      	movs	r1, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	430a      	orrs	r2, r1
 800464e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004654:	2240      	movs	r2, #64	; 0x40
 8004656:	4013      	ands	r3, r2
 8004658:	d01d      	beq.n	8004696 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	4a1d      	ldr	r2, [pc, #116]	; (80046d8 <UART_AdvFeatureConfig+0x15c>)
 8004662:	4013      	ands	r3, r2
 8004664:	0019      	movs	r1, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	430a      	orrs	r2, r1
 8004670:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004676:	2380      	movs	r3, #128	; 0x80
 8004678:	035b      	lsls	r3, r3, #13
 800467a:	429a      	cmp	r2, r3
 800467c:	d10b      	bne.n	8004696 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	4a15      	ldr	r2, [pc, #84]	; (80046dc <UART_AdvFeatureConfig+0x160>)
 8004686:	4013      	ands	r3, r2
 8004688:	0019      	movs	r1, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	430a      	orrs	r2, r1
 8004694:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469a:	2280      	movs	r2, #128	; 0x80
 800469c:	4013      	ands	r3, r2
 800469e:	d00b      	beq.n	80046b8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	4a0e      	ldr	r2, [pc, #56]	; (80046e0 <UART_AdvFeatureConfig+0x164>)
 80046a8:	4013      	ands	r3, r2
 80046aa:	0019      	movs	r1, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	430a      	orrs	r2, r1
 80046b6:	605a      	str	r2, [r3, #4]
  }
}
 80046b8:	46c0      	nop			; (mov r8, r8)
 80046ba:	46bd      	mov	sp, r7
 80046bc:	b002      	add	sp, #8
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	fffdffff 	.word	0xfffdffff
 80046c4:	fffeffff 	.word	0xfffeffff
 80046c8:	fffbffff 	.word	0xfffbffff
 80046cc:	ffff7fff 	.word	0xffff7fff
 80046d0:	ffffefff 	.word	0xffffefff
 80046d4:	ffffdfff 	.word	0xffffdfff
 80046d8:	ffefffff 	.word	0xffefffff
 80046dc:	ff9fffff 	.word	0xff9fffff
 80046e0:	fff7ffff 	.word	0xfff7ffff

080046e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af02      	add	r7, sp, #8
 80046ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2290      	movs	r2, #144	; 0x90
 80046f0:	2100      	movs	r1, #0
 80046f2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046f4:	f7fc fe22 	bl	800133c <HAL_GetTick>
 80046f8:	0003      	movs	r3, r0
 80046fa:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2208      	movs	r2, #8
 8004704:	4013      	ands	r3, r2
 8004706:	2b08      	cmp	r3, #8
 8004708:	d10c      	bne.n	8004724 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2280      	movs	r2, #128	; 0x80
 800470e:	0391      	lsls	r1, r2, #14
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	4a1a      	ldr	r2, [pc, #104]	; (800477c <UART_CheckIdleState+0x98>)
 8004714:	9200      	str	r2, [sp, #0]
 8004716:	2200      	movs	r2, #0
 8004718:	f000 f832 	bl	8004780 <UART_WaitOnFlagUntilTimeout>
 800471c:	1e03      	subs	r3, r0, #0
 800471e:	d001      	beq.n	8004724 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e026      	b.n	8004772 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2204      	movs	r2, #4
 800472c:	4013      	ands	r3, r2
 800472e:	2b04      	cmp	r3, #4
 8004730:	d10c      	bne.n	800474c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2280      	movs	r2, #128	; 0x80
 8004736:	03d1      	lsls	r1, r2, #15
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	4a10      	ldr	r2, [pc, #64]	; (800477c <UART_CheckIdleState+0x98>)
 800473c:	9200      	str	r2, [sp, #0]
 800473e:	2200      	movs	r2, #0
 8004740:	f000 f81e 	bl	8004780 <UART_WaitOnFlagUntilTimeout>
 8004744:	1e03      	subs	r3, r0, #0
 8004746:	d001      	beq.n	800474c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e012      	b.n	8004772 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2288      	movs	r2, #136	; 0x88
 8004750:	2120      	movs	r1, #32
 8004752:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	228c      	movs	r2, #140	; 0x8c
 8004758:	2120      	movs	r1, #32
 800475a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2284      	movs	r2, #132	; 0x84
 800476c:	2100      	movs	r1, #0
 800476e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	0018      	movs	r0, r3
 8004774:	46bd      	mov	sp, r7
 8004776:	b004      	add	sp, #16
 8004778:	bd80      	pop	{r7, pc}
 800477a:	46c0      	nop			; (mov r8, r8)
 800477c:	01ffffff 	.word	0x01ffffff

08004780 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b094      	sub	sp, #80	; 0x50
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	603b      	str	r3, [r7, #0]
 800478c:	1dfb      	adds	r3, r7, #7
 800478e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004790:	e0a7      	b.n	80048e2 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004792:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004794:	3301      	adds	r3, #1
 8004796:	d100      	bne.n	800479a <UART_WaitOnFlagUntilTimeout+0x1a>
 8004798:	e0a3      	b.n	80048e2 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800479a:	f7fc fdcf 	bl	800133c <HAL_GetTick>
 800479e:	0002      	movs	r2, r0
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d302      	bcc.n	80047b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80047aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d13f      	bne.n	8004830 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047b0:	f3ef 8310 	mrs	r3, PRIMASK
 80047b4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80047b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80047b8:	647b      	str	r3, [r7, #68]	; 0x44
 80047ba:	2301      	movs	r3, #1
 80047bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c0:	f383 8810 	msr	PRIMASK, r3
}
 80047c4:	46c0      	nop			; (mov r8, r8)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	494e      	ldr	r1, [pc, #312]	; (800490c <UART_WaitOnFlagUntilTimeout+0x18c>)
 80047d2:	400a      	ands	r2, r1
 80047d4:	601a      	str	r2, [r3, #0]
 80047d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047d8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047dc:	f383 8810 	msr	PRIMASK, r3
}
 80047e0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047e2:	f3ef 8310 	mrs	r3, PRIMASK
 80047e6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80047e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ea:	643b      	str	r3, [r7, #64]	; 0x40
 80047ec:	2301      	movs	r3, #1
 80047ee:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f2:	f383 8810 	msr	PRIMASK, r3
}
 80047f6:	46c0      	nop			; (mov r8, r8)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	689a      	ldr	r2, [r3, #8]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2101      	movs	r1, #1
 8004804:	438a      	bics	r2, r1
 8004806:	609a      	str	r2, [r3, #8]
 8004808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800480a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800480c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800480e:	f383 8810 	msr	PRIMASK, r3
}
 8004812:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2288      	movs	r2, #136	; 0x88
 8004818:	2120      	movs	r1, #32
 800481a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	228c      	movs	r2, #140	; 0x8c
 8004820:	2120      	movs	r1, #32
 8004822:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2284      	movs	r2, #132	; 0x84
 8004828:	2100      	movs	r1, #0
 800482a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e069      	b.n	8004904 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2204      	movs	r2, #4
 8004838:	4013      	ands	r3, r2
 800483a:	d052      	beq.n	80048e2 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	69da      	ldr	r2, [r3, #28]
 8004842:	2380      	movs	r3, #128	; 0x80
 8004844:	011b      	lsls	r3, r3, #4
 8004846:	401a      	ands	r2, r3
 8004848:	2380      	movs	r3, #128	; 0x80
 800484a:	011b      	lsls	r3, r3, #4
 800484c:	429a      	cmp	r2, r3
 800484e:	d148      	bne.n	80048e2 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2280      	movs	r2, #128	; 0x80
 8004856:	0112      	lsls	r2, r2, #4
 8004858:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800485a:	f3ef 8310 	mrs	r3, PRIMASK
 800485e:	613b      	str	r3, [r7, #16]
  return(result);
 8004860:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004862:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004864:	2301      	movs	r3, #1
 8004866:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	f383 8810 	msr	PRIMASK, r3
}
 800486e:	46c0      	nop			; (mov r8, r8)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4924      	ldr	r1, [pc, #144]	; (800490c <UART_WaitOnFlagUntilTimeout+0x18c>)
 800487c:	400a      	ands	r2, r1
 800487e:	601a      	str	r2, [r3, #0]
 8004880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004882:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	f383 8810 	msr	PRIMASK, r3
}
 800488a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800488c:	f3ef 8310 	mrs	r3, PRIMASK
 8004890:	61fb      	str	r3, [r7, #28]
  return(result);
 8004892:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004894:	64bb      	str	r3, [r7, #72]	; 0x48
 8004896:	2301      	movs	r3, #1
 8004898:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800489a:	6a3b      	ldr	r3, [r7, #32]
 800489c:	f383 8810 	msr	PRIMASK, r3
}
 80048a0:	46c0      	nop			; (mov r8, r8)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	689a      	ldr	r2, [r3, #8]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2101      	movs	r1, #1
 80048ae:	438a      	bics	r2, r1
 80048b0:	609a      	str	r2, [r3, #8]
 80048b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048b4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b8:	f383 8810 	msr	PRIMASK, r3
}
 80048bc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2288      	movs	r2, #136	; 0x88
 80048c2:	2120      	movs	r1, #32
 80048c4:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	228c      	movs	r2, #140	; 0x8c
 80048ca:	2120      	movs	r1, #32
 80048cc:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2290      	movs	r2, #144	; 0x90
 80048d2:	2120      	movs	r1, #32
 80048d4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2284      	movs	r2, #132	; 0x84
 80048da:	2100      	movs	r1, #0
 80048dc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e010      	b.n	8004904 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	69db      	ldr	r3, [r3, #28]
 80048e8:	68ba      	ldr	r2, [r7, #8]
 80048ea:	4013      	ands	r3, r2
 80048ec:	68ba      	ldr	r2, [r7, #8]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	425a      	negs	r2, r3
 80048f2:	4153      	adcs	r3, r2
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	001a      	movs	r2, r3
 80048f8:	1dfb      	adds	r3, r7, #7
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d100      	bne.n	8004902 <UART_WaitOnFlagUntilTimeout+0x182>
 8004900:	e747      	b.n	8004792 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004902:	2300      	movs	r3, #0
}
 8004904:	0018      	movs	r0, r3
 8004906:	46bd      	mov	sp, r7
 8004908:	b014      	add	sp, #80	; 0x50
 800490a:	bd80      	pop	{r7, pc}
 800490c:	fffffe5f 	.word	0xfffffe5f

08004910 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b090      	sub	sp, #64	; 0x40
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	1dbb      	adds	r3, r7, #6
 800491c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	1dba      	adds	r2, r7, #6
 8004928:	215c      	movs	r1, #92	; 0x5c
 800492a:	8812      	ldrh	r2, [r2, #0]
 800492c:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2290      	movs	r2, #144	; 0x90
 8004932:	2100      	movs	r1, #0
 8004934:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	228c      	movs	r2, #140	; 0x8c
 800493a:	2122      	movs	r1, #34	; 0x22
 800493c:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2280      	movs	r2, #128	; 0x80
 8004942:	589b      	ldr	r3, [r3, r2]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d02d      	beq.n	80049a4 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2280      	movs	r2, #128	; 0x80
 800494c:	589b      	ldr	r3, [r3, r2]
 800494e:	4a40      	ldr	r2, [pc, #256]	; (8004a50 <UART_Start_Receive_DMA+0x140>)
 8004950:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2280      	movs	r2, #128	; 0x80
 8004956:	589b      	ldr	r3, [r3, r2]
 8004958:	4a3e      	ldr	r2, [pc, #248]	; (8004a54 <UART_Start_Receive_DMA+0x144>)
 800495a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2280      	movs	r2, #128	; 0x80
 8004960:	589b      	ldr	r3, [r3, r2]
 8004962:	4a3d      	ldr	r2, [pc, #244]	; (8004a58 <UART_Start_Receive_DMA+0x148>)
 8004964:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2280      	movs	r2, #128	; 0x80
 800496a:	589b      	ldr	r3, [r3, r2]
 800496c:	2200      	movs	r2, #0
 800496e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2280      	movs	r2, #128	; 0x80
 8004974:	5898      	ldr	r0, [r3, r2]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	3324      	adds	r3, #36	; 0x24
 800497c:	0019      	movs	r1, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004982:	001a      	movs	r2, r3
 8004984:	1dbb      	adds	r3, r7, #6
 8004986:	881b      	ldrh	r3, [r3, #0]
 8004988:	f7fc fe6e 	bl	8001668 <HAL_DMA_Start_IT>
 800498c:	1e03      	subs	r3, r0, #0
 800498e:	d009      	beq.n	80049a4 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2290      	movs	r2, #144	; 0x90
 8004994:	2110      	movs	r1, #16
 8004996:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	228c      	movs	r2, #140	; 0x8c
 800499c:	2120      	movs	r1, #32
 800499e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e050      	b.n	8004a46 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d019      	beq.n	80049e0 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049ac:	f3ef 8310 	mrs	r3, PRIMASK
 80049b0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80049b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049b6:	2301      	movs	r3, #1
 80049b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049bc:	f383 8810 	msr	PRIMASK, r3
}
 80049c0:	46c0      	nop			; (mov r8, r8)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2180      	movs	r1, #128	; 0x80
 80049ce:	0049      	lsls	r1, r1, #1
 80049d0:	430a      	orrs	r2, r1
 80049d2:	601a      	str	r2, [r3, #0]
 80049d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049d6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049da:	f383 8810 	msr	PRIMASK, r3
}
 80049de:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049e0:	f3ef 8310 	mrs	r3, PRIMASK
 80049e4:	613b      	str	r3, [r7, #16]
  return(result);
 80049e6:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80049ea:	2301      	movs	r3, #1
 80049ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f383 8810 	msr	PRIMASK, r3
}
 80049f4:	46c0      	nop			; (mov r8, r8)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	689a      	ldr	r2, [r3, #8]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2101      	movs	r1, #1
 8004a02:	430a      	orrs	r2, r1
 8004a04:	609a      	str	r2, [r3, #8]
 8004a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a08:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	f383 8810 	msr	PRIMASK, r3
}
 8004a10:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a12:	f3ef 8310 	mrs	r3, PRIMASK
 8004a16:	61fb      	str	r3, [r7, #28]
  return(result);
 8004a18:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a1a:	637b      	str	r3, [r7, #52]	; 0x34
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a20:	6a3b      	ldr	r3, [r7, #32]
 8004a22:	f383 8810 	msr	PRIMASK, r3
}
 8004a26:	46c0      	nop			; (mov r8, r8)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689a      	ldr	r2, [r3, #8]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2140      	movs	r1, #64	; 0x40
 8004a34:	430a      	orrs	r2, r1
 8004a36:	609a      	str	r2, [r3, #8]
 8004a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a3a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3e:	f383 8810 	msr	PRIMASK, r3
}
 8004a42:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	0018      	movs	r0, r3
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	b010      	add	sp, #64	; 0x40
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	46c0      	nop			; (mov r8, r8)
 8004a50:	08004ba9 	.word	0x08004ba9
 8004a54:	08004cd9 	.word	0x08004cd9
 8004a58:	08004d1b 	.word	0x08004d1b

08004a5c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b08a      	sub	sp, #40	; 0x28
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a64:	f3ef 8310 	mrs	r3, PRIMASK
 8004a68:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a6a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a6e:	2301      	movs	r3, #1
 8004a70:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f383 8810 	msr	PRIMASK, r3
}
 8004a78:	46c0      	nop			; (mov r8, r8)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	21c0      	movs	r1, #192	; 0xc0
 8004a86:	438a      	bics	r2, r1
 8004a88:	601a      	str	r2, [r3, #0]
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	f383 8810 	msr	PRIMASK, r3
}
 8004a94:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a96:	f3ef 8310 	mrs	r3, PRIMASK
 8004a9a:	617b      	str	r3, [r7, #20]
  return(result);
 8004a9c:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004a9e:	623b      	str	r3, [r7, #32]
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	f383 8810 	msr	PRIMASK, r3
}
 8004aaa:	46c0      	nop			; (mov r8, r8)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689a      	ldr	r2, [r3, #8]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4908      	ldr	r1, [pc, #32]	; (8004ad8 <UART_EndTxTransfer+0x7c>)
 8004ab8:	400a      	ands	r2, r1
 8004aba:	609a      	str	r2, [r3, #8]
 8004abc:	6a3b      	ldr	r3, [r7, #32]
 8004abe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	f383 8810 	msr	PRIMASK, r3
}
 8004ac6:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2288      	movs	r2, #136	; 0x88
 8004acc:	2120      	movs	r1, #32
 8004ace:	5099      	str	r1, [r3, r2]
}
 8004ad0:	46c0      	nop			; (mov r8, r8)
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	b00a      	add	sp, #40	; 0x28
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	ff7fffff 	.word	0xff7fffff

08004adc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b08e      	sub	sp, #56	; 0x38
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ae4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ae8:	617b      	str	r3, [r7, #20]
  return(result);
 8004aea:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004aec:	637b      	str	r3, [r7, #52]	; 0x34
 8004aee:	2301      	movs	r3, #1
 8004af0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	f383 8810 	msr	PRIMASK, r3
}
 8004af8:	46c0      	nop			; (mov r8, r8)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4926      	ldr	r1, [pc, #152]	; (8004ba0 <UART_EndRxTransfer+0xc4>)
 8004b06:	400a      	ands	r2, r1
 8004b08:	601a      	str	r2, [r3, #0]
 8004b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	f383 8810 	msr	PRIMASK, r3
}
 8004b14:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b16:	f3ef 8310 	mrs	r3, PRIMASK
 8004b1a:	623b      	str	r3, [r7, #32]
  return(result);
 8004b1c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004b1e:	633b      	str	r3, [r7, #48]	; 0x30
 8004b20:	2301      	movs	r3, #1
 8004b22:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b26:	f383 8810 	msr	PRIMASK, r3
}
 8004b2a:	46c0      	nop			; (mov r8, r8)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689a      	ldr	r2, [r3, #8]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	491b      	ldr	r1, [pc, #108]	; (8004ba4 <UART_EndRxTransfer+0xc8>)
 8004b38:	400a      	ands	r2, r1
 8004b3a:	609a      	str	r2, [r3, #8]
 8004b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b42:	f383 8810 	msr	PRIMASK, r3
}
 8004b46:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d118      	bne.n	8004b82 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b50:	f3ef 8310 	mrs	r3, PRIMASK
 8004b54:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b56:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f383 8810 	msr	PRIMASK, r3
}
 8004b64:	46c0      	nop			; (mov r8, r8)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2110      	movs	r1, #16
 8004b72:	438a      	bics	r2, r1
 8004b74:	601a      	str	r2, [r3, #0]
 8004b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	f383 8810 	msr	PRIMASK, r3
}
 8004b80:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	228c      	movs	r2, #140	; 0x8c
 8004b86:	2120      	movs	r1, #32
 8004b88:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004b96:	46c0      	nop			; (mov r8, r8)
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	b00e      	add	sp, #56	; 0x38
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	46c0      	nop			; (mov r8, r8)
 8004ba0:	fffffedf 	.word	0xfffffedf
 8004ba4:	effffffe 	.word	0xeffffffe

08004ba8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b094      	sub	sp, #80	; 0x50
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb4:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2220      	movs	r2, #32
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	d16f      	bne.n	8004ca2 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8004bc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bc4:	225e      	movs	r2, #94	; 0x5e
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bca:	f3ef 8310 	mrs	r3, PRIMASK
 8004bce:	61bb      	str	r3, [r7, #24]
  return(result);
 8004bd0:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	f383 8810 	msr	PRIMASK, r3
}
 8004bde:	46c0      	nop			; (mov r8, r8)
 8004be0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	493a      	ldr	r1, [pc, #232]	; (8004cd4 <UART_DMAReceiveCplt+0x12c>)
 8004bec:	400a      	ands	r2, r1
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bf2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bf4:	6a3b      	ldr	r3, [r7, #32]
 8004bf6:	f383 8810 	msr	PRIMASK, r3
}
 8004bfa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bfc:	f3ef 8310 	mrs	r3, PRIMASK
 8004c00:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c04:	647b      	str	r3, [r7, #68]	; 0x44
 8004c06:	2301      	movs	r3, #1
 8004c08:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0c:	f383 8810 	msr	PRIMASK, r3
}
 8004c10:	46c0      	nop			; (mov r8, r8)
 8004c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	689a      	ldr	r2, [r3, #8]
 8004c18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2101      	movs	r1, #1
 8004c1e:	438a      	bics	r2, r1
 8004c20:	609a      	str	r2, [r3, #8]
 8004c22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c28:	f383 8810 	msr	PRIMASK, r3
}
 8004c2c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c2e:	f3ef 8310 	mrs	r3, PRIMASK
 8004c32:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c36:	643b      	str	r3, [r7, #64]	; 0x40
 8004c38:	2301      	movs	r3, #1
 8004c3a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c3e:	f383 8810 	msr	PRIMASK, r3
}
 8004c42:	46c0      	nop			; (mov r8, r8)
 8004c44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689a      	ldr	r2, [r3, #8]
 8004c4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2140      	movs	r1, #64	; 0x40
 8004c50:	438a      	bics	r2, r1
 8004c52:	609a      	str	r2, [r3, #8]
 8004c54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c56:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c5a:	f383 8810 	msr	PRIMASK, r3
}
 8004c5e:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004c60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c62:	228c      	movs	r2, #140	; 0x8c
 8004c64:	2120      	movs	r1, #32
 8004c66:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d118      	bne.n	8004ca2 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c70:	f3ef 8310 	mrs	r3, PRIMASK
 8004c74:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c76:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	f383 8810 	msr	PRIMASK, r3
}
 8004c84:	46c0      	nop			; (mov r8, r8)
 8004c86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2110      	movs	r1, #16
 8004c92:	438a      	bics	r2, r1
 8004c94:	601a      	str	r2, [r3, #0]
 8004c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c98:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	f383 8810 	msr	PRIMASK, r3
}
 8004ca0:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004caa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d108      	bne.n	8004cc2 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004cb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cb2:	225c      	movs	r2, #92	; 0x5c
 8004cb4:	5a9a      	ldrh	r2, [r3, r2]
 8004cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cb8:	0011      	movs	r1, r2
 8004cba:	0018      	movs	r0, r3
 8004cbc:	f7fb ffac 	bl	8000c18 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004cc0:	e003      	b.n	8004cca <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8004cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cc4:	0018      	movs	r0, r3
 8004cc6:	f7ff f9c9 	bl	800405c <HAL_UART_RxCpltCallback>
}
 8004cca:	46c0      	nop			; (mov r8, r8)
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	b014      	add	sp, #80	; 0x50
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	46c0      	nop			; (mov r8, r8)
 8004cd4:	fffffeff 	.word	0xfffffeff

08004cd8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d10a      	bne.n	8004d0a <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	225c      	movs	r2, #92	; 0x5c
 8004cf8:	5a9b      	ldrh	r3, [r3, r2]
 8004cfa:	085b      	lsrs	r3, r3, #1
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	0011      	movs	r1, r2
 8004d02:	0018      	movs	r0, r3
 8004d04:	f7fb ff88 	bl	8000c18 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d08:	e003      	b.n	8004d12 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	0018      	movs	r0, r3
 8004d0e:	f7ff f9ad 	bl	800406c <HAL_UART_RxHalfCpltCallback>
}
 8004d12:	46c0      	nop			; (mov r8, r8)
 8004d14:	46bd      	mov	sp, r7
 8004d16:	b004      	add	sp, #16
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b086      	sub	sp, #24
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d26:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	2288      	movs	r2, #136	; 0x88
 8004d2c:	589b      	ldr	r3, [r3, r2]
 8004d2e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	228c      	movs	r2, #140	; 0x8c
 8004d34:	589b      	ldr	r3, [r3, r2]
 8004d36:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	2280      	movs	r2, #128	; 0x80
 8004d40:	4013      	ands	r3, r2
 8004d42:	2b80      	cmp	r3, #128	; 0x80
 8004d44:	d10a      	bne.n	8004d5c <UART_DMAError+0x42>
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	2b21      	cmp	r3, #33	; 0x21
 8004d4a:	d107      	bne.n	8004d5c <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	2256      	movs	r2, #86	; 0x56
 8004d50:	2100      	movs	r1, #0
 8004d52:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	0018      	movs	r0, r3
 8004d58:	f7ff fe80 	bl	8004a5c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	2240      	movs	r2, #64	; 0x40
 8004d64:	4013      	ands	r3, r2
 8004d66:	2b40      	cmp	r3, #64	; 0x40
 8004d68:	d10a      	bne.n	8004d80 <UART_DMAError+0x66>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2b22      	cmp	r3, #34	; 0x22
 8004d6e:	d107      	bne.n	8004d80 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	225e      	movs	r2, #94	; 0x5e
 8004d74:	2100      	movs	r1, #0
 8004d76:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	0018      	movs	r0, r3
 8004d7c:	f7ff feae 	bl	8004adc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	2290      	movs	r2, #144	; 0x90
 8004d84:	589b      	ldr	r3, [r3, r2]
 8004d86:	2210      	movs	r2, #16
 8004d88:	431a      	orrs	r2, r3
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	2190      	movs	r1, #144	; 0x90
 8004d8e:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	0018      	movs	r0, r3
 8004d94:	f7ff f972 	bl	800407c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d98:	46c0      	nop			; (mov r8, r8)
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	b006      	add	sp, #24
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	225e      	movs	r2, #94	; 0x5e
 8004db2:	2100      	movs	r1, #0
 8004db4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2256      	movs	r2, #86	; 0x56
 8004dba:	2100      	movs	r1, #0
 8004dbc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	0018      	movs	r0, r3
 8004dc2:	f7ff f95b 	bl	800407c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dc6:	46c0      	nop			; (mov r8, r8)
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	b004      	add	sp, #16
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	b086      	sub	sp, #24
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dd6:	f3ef 8310 	mrs	r3, PRIMASK
 8004dda:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ddc:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004dde:	617b      	str	r3, [r7, #20]
 8004de0:	2301      	movs	r3, #1
 8004de2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f383 8810 	msr	PRIMASK, r3
}
 8004dea:	46c0      	nop			; (mov r8, r8)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2140      	movs	r1, #64	; 0x40
 8004df8:	438a      	bics	r2, r1
 8004dfa:	601a      	str	r2, [r3, #0]
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	f383 8810 	msr	PRIMASK, r3
}
 8004e06:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2288      	movs	r2, #136	; 0x88
 8004e0c:	2120      	movs	r1, #32
 8004e0e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	0018      	movs	r0, r3
 8004e1a:	f7ff f917 	bl	800404c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e1e:	46c0      	nop			; (mov r8, r8)
 8004e20:	46bd      	mov	sp, r7
 8004e22:	b006      	add	sp, #24
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b082      	sub	sp, #8
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004e2e:	46c0      	nop			; (mov r8, r8)
 8004e30:	46bd      	mov	sp, r7
 8004e32:	b002      	add	sp, #8
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b082      	sub	sp, #8
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004e3e:	46c0      	nop			; (mov r8, r8)
 8004e40:	46bd      	mov	sp, r7
 8004e42:	b002      	add	sp, #8
 8004e44:	bd80      	pop	{r7, pc}

08004e46 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b082      	sub	sp, #8
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004e4e:	46c0      	nop			; (mov r8, r8)
 8004e50:	46bd      	mov	sp, r7
 8004e52:	b002      	add	sp, #8
 8004e54:	bd80      	pop	{r7, pc}
	...

08004e58 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2284      	movs	r2, #132	; 0x84
 8004e64:	5c9b      	ldrb	r3, [r3, r2]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d101      	bne.n	8004e6e <HAL_UARTEx_DisableFifoMode+0x16>
 8004e6a:	2302      	movs	r3, #2
 8004e6c:	e027      	b.n	8004ebe <HAL_UARTEx_DisableFifoMode+0x66>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2284      	movs	r2, #132	; 0x84
 8004e72:	2101      	movs	r1, #1
 8004e74:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2288      	movs	r2, #136	; 0x88
 8004e7a:	2124      	movs	r1, #36	; 0x24
 8004e7c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2101      	movs	r1, #1
 8004e92:	438a      	bics	r2, r1
 8004e94:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	4a0b      	ldr	r2, [pc, #44]	; (8004ec8 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2288      	movs	r2, #136	; 0x88
 8004eb0:	2120      	movs	r1, #32
 8004eb2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2284      	movs	r2, #132	; 0x84
 8004eb8:	2100      	movs	r1, #0
 8004eba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	0018      	movs	r0, r3
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	b004      	add	sp, #16
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	46c0      	nop			; (mov r8, r8)
 8004ec8:	dfffffff 	.word	0xdfffffff

08004ecc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2284      	movs	r2, #132	; 0x84
 8004eda:	5c9b      	ldrb	r3, [r3, r2]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d101      	bne.n	8004ee4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	e02e      	b.n	8004f42 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2284      	movs	r2, #132	; 0x84
 8004ee8:	2101      	movs	r1, #1
 8004eea:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2288      	movs	r2, #136	; 0x88
 8004ef0:	2124      	movs	r1, #36	; 0x24
 8004ef2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2101      	movs	r1, #1
 8004f08:	438a      	bics	r2, r1
 8004f0a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	00db      	lsls	r3, r3, #3
 8004f14:	08d9      	lsrs	r1, r3, #3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	683a      	ldr	r2, [r7, #0]
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	0018      	movs	r0, r3
 8004f24:	f000 f8bc 	bl	80050a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2288      	movs	r2, #136	; 0x88
 8004f34:	2120      	movs	r1, #32
 8004f36:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2284      	movs	r2, #132	; 0x84
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	0018      	movs	r0, r3
 8004f44:	46bd      	mov	sp, r7
 8004f46:	b004      	add	sp, #16
 8004f48:	bd80      	pop	{r7, pc}
	...

08004f4c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2284      	movs	r2, #132	; 0x84
 8004f5a:	5c9b      	ldrb	r3, [r3, r2]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d101      	bne.n	8004f64 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004f60:	2302      	movs	r3, #2
 8004f62:	e02f      	b.n	8004fc4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2284      	movs	r2, #132	; 0x84
 8004f68:	2101      	movs	r1, #1
 8004f6a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2288      	movs	r2, #136	; 0x88
 8004f70:	2124      	movs	r1, #36	; 0x24
 8004f72:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2101      	movs	r1, #1
 8004f88:	438a      	bics	r2, r1
 8004f8a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	4a0e      	ldr	r2, [pc, #56]	; (8004fcc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004f94:	4013      	ands	r3, r2
 8004f96:	0019      	movs	r1, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	683a      	ldr	r2, [r7, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	0018      	movs	r0, r3
 8004fa6:	f000 f87b 	bl	80050a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2288      	movs	r2, #136	; 0x88
 8004fb6:	2120      	movs	r1, #32
 8004fb8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2284      	movs	r2, #132	; 0x84
 8004fbe:	2100      	movs	r1, #0
 8004fc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	0018      	movs	r0, r3
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	b004      	add	sp, #16
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	f1ffffff 	.word	0xf1ffffff

08004fd0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fd0:	b5b0      	push	{r4, r5, r7, lr}
 8004fd2:	b08a      	sub	sp, #40	; 0x28
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	1dbb      	adds	r3, r7, #6
 8004fdc:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	228c      	movs	r2, #140	; 0x8c
 8004fe2:	589b      	ldr	r3, [r3, r2]
 8004fe4:	2b20      	cmp	r3, #32
 8004fe6:	d156      	bne.n	8005096 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d003      	beq.n	8004ff6 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004fee:	1dbb      	adds	r3, r7, #6
 8004ff0:	881b      	ldrh	r3, [r3, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e04e      	b.n	8005098 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	689a      	ldr	r2, [r3, #8]
 8004ffe:	2380      	movs	r3, #128	; 0x80
 8005000:	015b      	lsls	r3, r3, #5
 8005002:	429a      	cmp	r2, r3
 8005004:	d109      	bne.n	800501a <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d105      	bne.n	800501a <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	2201      	movs	r2, #1
 8005012:	4013      	ands	r3, r2
 8005014:	d001      	beq.n	800501a <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e03e      	b.n	8005098 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2201      	movs	r2, #1
 800501e:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005026:	2527      	movs	r5, #39	; 0x27
 8005028:	197c      	adds	r4, r7, r5
 800502a:	1dbb      	adds	r3, r7, #6
 800502c:	881a      	ldrh	r2, [r3, #0]
 800502e:	68b9      	ldr	r1, [r7, #8]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	0018      	movs	r0, r3
 8005034:	f7ff fc6c 	bl	8004910 <UART_Start_Receive_DMA>
 8005038:	0003      	movs	r3, r0
 800503a:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800503c:	197b      	adds	r3, r7, r5
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d124      	bne.n	800508e <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005048:	2b01      	cmp	r3, #1
 800504a:	d11c      	bne.n	8005086 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2210      	movs	r2, #16
 8005052:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005054:	f3ef 8310 	mrs	r3, PRIMASK
 8005058:	617b      	str	r3, [r7, #20]
  return(result);
 800505a:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800505c:	623b      	str	r3, [r7, #32]
 800505e:	2301      	movs	r3, #1
 8005060:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	f383 8810 	msr	PRIMASK, r3
}
 8005068:	46c0      	nop			; (mov r8, r8)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2110      	movs	r1, #16
 8005076:	430a      	orrs	r2, r1
 8005078:	601a      	str	r2, [r3, #0]
 800507a:	6a3b      	ldr	r3, [r7, #32]
 800507c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	f383 8810 	msr	PRIMASK, r3
}
 8005084:	e003      	b.n	800508e <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005086:	2327      	movs	r3, #39	; 0x27
 8005088:	18fb      	adds	r3, r7, r3
 800508a:	2201      	movs	r2, #1
 800508c:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 800508e:	2327      	movs	r3, #39	; 0x27
 8005090:	18fb      	adds	r3, r7, r3
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	e000      	b.n	8005098 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8005096:	2302      	movs	r3, #2
  }
}
 8005098:	0018      	movs	r0, r3
 800509a:	46bd      	mov	sp, r7
 800509c:	b00a      	add	sp, #40	; 0x28
 800509e:	bdb0      	pop	{r4, r5, r7, pc}

080050a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80050a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d108      	bne.n	80050c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	226a      	movs	r2, #106	; 0x6a
 80050b4:	2101      	movs	r1, #1
 80050b6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2268      	movs	r2, #104	; 0x68
 80050bc:	2101      	movs	r1, #1
 80050be:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80050c0:	e043      	b.n	800514a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80050c2:	260f      	movs	r6, #15
 80050c4:	19bb      	adds	r3, r7, r6
 80050c6:	2208      	movs	r2, #8
 80050c8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80050ca:	200e      	movs	r0, #14
 80050cc:	183b      	adds	r3, r7, r0
 80050ce:	2208      	movs	r2, #8
 80050d0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	0e5b      	lsrs	r3, r3, #25
 80050da:	b2da      	uxtb	r2, r3
 80050dc:	240d      	movs	r4, #13
 80050de:	193b      	adds	r3, r7, r4
 80050e0:	2107      	movs	r1, #7
 80050e2:	400a      	ands	r2, r1
 80050e4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	0f5b      	lsrs	r3, r3, #29
 80050ee:	b2da      	uxtb	r2, r3
 80050f0:	250c      	movs	r5, #12
 80050f2:	197b      	adds	r3, r7, r5
 80050f4:	2107      	movs	r1, #7
 80050f6:	400a      	ands	r2, r1
 80050f8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80050fa:	183b      	adds	r3, r7, r0
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	197a      	adds	r2, r7, r5
 8005100:	7812      	ldrb	r2, [r2, #0]
 8005102:	4914      	ldr	r1, [pc, #80]	; (8005154 <UARTEx_SetNbDataToProcess+0xb4>)
 8005104:	5c8a      	ldrb	r2, [r1, r2]
 8005106:	435a      	muls	r2, r3
 8005108:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800510a:	197b      	adds	r3, r7, r5
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	4a12      	ldr	r2, [pc, #72]	; (8005158 <UARTEx_SetNbDataToProcess+0xb8>)
 8005110:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005112:	0019      	movs	r1, r3
 8005114:	f7fb f892 	bl	800023c <__divsi3>
 8005118:	0003      	movs	r3, r0
 800511a:	b299      	uxth	r1, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	226a      	movs	r2, #106	; 0x6a
 8005120:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005122:	19bb      	adds	r3, r7, r6
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	193a      	adds	r2, r7, r4
 8005128:	7812      	ldrb	r2, [r2, #0]
 800512a:	490a      	ldr	r1, [pc, #40]	; (8005154 <UARTEx_SetNbDataToProcess+0xb4>)
 800512c:	5c8a      	ldrb	r2, [r1, r2]
 800512e:	435a      	muls	r2, r3
 8005130:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005132:	193b      	adds	r3, r7, r4
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	4a08      	ldr	r2, [pc, #32]	; (8005158 <UARTEx_SetNbDataToProcess+0xb8>)
 8005138:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800513a:	0019      	movs	r1, r3
 800513c:	f7fb f87e 	bl	800023c <__divsi3>
 8005140:	0003      	movs	r3, r0
 8005142:	b299      	uxth	r1, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2268      	movs	r2, #104	; 0x68
 8005148:	5299      	strh	r1, [r3, r2]
}
 800514a:	46c0      	nop			; (mov r8, r8)
 800514c:	46bd      	mov	sp, r7
 800514e:	b005      	add	sp, #20
 8005150:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005152:	46c0      	nop			; (mov r8, r8)
 8005154:	080066ec 	.word	0x080066ec
 8005158:	080066f4 	.word	0x080066f4

0800515c <__errno>:
 800515c:	4b01      	ldr	r3, [pc, #4]	; (8005164 <__errno+0x8>)
 800515e:	6818      	ldr	r0, [r3, #0]
 8005160:	4770      	bx	lr
 8005162:	46c0      	nop			; (mov r8, r8)
 8005164:	2000000c 	.word	0x2000000c

08005168 <__libc_init_array>:
 8005168:	b570      	push	{r4, r5, r6, lr}
 800516a:	2600      	movs	r6, #0
 800516c:	4d0c      	ldr	r5, [pc, #48]	; (80051a0 <__libc_init_array+0x38>)
 800516e:	4c0d      	ldr	r4, [pc, #52]	; (80051a4 <__libc_init_array+0x3c>)
 8005170:	1b64      	subs	r4, r4, r5
 8005172:	10a4      	asrs	r4, r4, #2
 8005174:	42a6      	cmp	r6, r4
 8005176:	d109      	bne.n	800518c <__libc_init_array+0x24>
 8005178:	2600      	movs	r6, #0
 800517a:	f001 f9ab 	bl	80064d4 <_init>
 800517e:	4d0a      	ldr	r5, [pc, #40]	; (80051a8 <__libc_init_array+0x40>)
 8005180:	4c0a      	ldr	r4, [pc, #40]	; (80051ac <__libc_init_array+0x44>)
 8005182:	1b64      	subs	r4, r4, r5
 8005184:	10a4      	asrs	r4, r4, #2
 8005186:	42a6      	cmp	r6, r4
 8005188:	d105      	bne.n	8005196 <__libc_init_array+0x2e>
 800518a:	bd70      	pop	{r4, r5, r6, pc}
 800518c:	00b3      	lsls	r3, r6, #2
 800518e:	58eb      	ldr	r3, [r5, r3]
 8005190:	4798      	blx	r3
 8005192:	3601      	adds	r6, #1
 8005194:	e7ee      	b.n	8005174 <__libc_init_array+0xc>
 8005196:	00b3      	lsls	r3, r6, #2
 8005198:	58eb      	ldr	r3, [r5, r3]
 800519a:	4798      	blx	r3
 800519c:	3601      	adds	r6, #1
 800519e:	e7f2      	b.n	8005186 <__libc_init_array+0x1e>
 80051a0:	080068b4 	.word	0x080068b4
 80051a4:	080068b4 	.word	0x080068b4
 80051a8:	080068b4 	.word	0x080068b4
 80051ac:	080068b8 	.word	0x080068b8

080051b0 <memset>:
 80051b0:	0003      	movs	r3, r0
 80051b2:	1882      	adds	r2, r0, r2
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d100      	bne.n	80051ba <memset+0xa>
 80051b8:	4770      	bx	lr
 80051ba:	7019      	strb	r1, [r3, #0]
 80051bc:	3301      	adds	r3, #1
 80051be:	e7f9      	b.n	80051b4 <memset+0x4>

080051c0 <siprintf>:
 80051c0:	b40e      	push	{r1, r2, r3}
 80051c2:	b500      	push	{lr}
 80051c4:	490b      	ldr	r1, [pc, #44]	; (80051f4 <siprintf+0x34>)
 80051c6:	b09c      	sub	sp, #112	; 0x70
 80051c8:	ab1d      	add	r3, sp, #116	; 0x74
 80051ca:	9002      	str	r0, [sp, #8]
 80051cc:	9006      	str	r0, [sp, #24]
 80051ce:	9107      	str	r1, [sp, #28]
 80051d0:	9104      	str	r1, [sp, #16]
 80051d2:	4809      	ldr	r0, [pc, #36]	; (80051f8 <siprintf+0x38>)
 80051d4:	4909      	ldr	r1, [pc, #36]	; (80051fc <siprintf+0x3c>)
 80051d6:	cb04      	ldmia	r3!, {r2}
 80051d8:	9105      	str	r1, [sp, #20]
 80051da:	6800      	ldr	r0, [r0, #0]
 80051dc:	a902      	add	r1, sp, #8
 80051de:	9301      	str	r3, [sp, #4]
 80051e0:	f000 f8ba 	bl	8005358 <_svfiprintf_r>
 80051e4:	2300      	movs	r3, #0
 80051e6:	9a02      	ldr	r2, [sp, #8]
 80051e8:	7013      	strb	r3, [r2, #0]
 80051ea:	b01c      	add	sp, #112	; 0x70
 80051ec:	bc08      	pop	{r3}
 80051ee:	b003      	add	sp, #12
 80051f0:	4718      	bx	r3
 80051f2:	46c0      	nop			; (mov r8, r8)
 80051f4:	7fffffff 	.word	0x7fffffff
 80051f8:	2000000c 	.word	0x2000000c
 80051fc:	ffff0208 	.word	0xffff0208

08005200 <siscanf>:
 8005200:	b40e      	push	{r1, r2, r3}
 8005202:	b530      	push	{r4, r5, lr}
 8005204:	2381      	movs	r3, #129	; 0x81
 8005206:	b09c      	sub	sp, #112	; 0x70
 8005208:	466a      	mov	r2, sp
 800520a:	ac1f      	add	r4, sp, #124	; 0x7c
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	cc20      	ldmia	r4!, {r5}
 8005210:	8293      	strh	r3, [r2, #20]
 8005212:	9002      	str	r0, [sp, #8]
 8005214:	9006      	str	r0, [sp, #24]
 8005216:	f7fa ff75 	bl	8000104 <strlen>
 800521a:	4b0b      	ldr	r3, [pc, #44]	; (8005248 <siscanf+0x48>)
 800521c:	466a      	mov	r2, sp
 800521e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005220:	2300      	movs	r3, #0
 8005222:	9003      	str	r0, [sp, #12]
 8005224:	9007      	str	r0, [sp, #28]
 8005226:	4809      	ldr	r0, [pc, #36]	; (800524c <siscanf+0x4c>)
 8005228:	930f      	str	r3, [sp, #60]	; 0x3c
 800522a:	9314      	str	r3, [sp, #80]	; 0x50
 800522c:	3b01      	subs	r3, #1
 800522e:	82d3      	strh	r3, [r2, #22]
 8005230:	a902      	add	r1, sp, #8
 8005232:	0023      	movs	r3, r4
 8005234:	002a      	movs	r2, r5
 8005236:	6800      	ldr	r0, [r0, #0]
 8005238:	9401      	str	r4, [sp, #4]
 800523a:	f000 f9e9 	bl	8005610 <__ssvfiscanf_r>
 800523e:	b01c      	add	sp, #112	; 0x70
 8005240:	bc30      	pop	{r4, r5}
 8005242:	bc08      	pop	{r3}
 8005244:	b003      	add	sp, #12
 8005246:	4718      	bx	r3
 8005248:	08005251 	.word	0x08005251
 800524c:	2000000c 	.word	0x2000000c

08005250 <__seofread>:
 8005250:	2000      	movs	r0, #0
 8005252:	4770      	bx	lr

08005254 <strcat>:
 8005254:	0002      	movs	r2, r0
 8005256:	b510      	push	{r4, lr}
 8005258:	7813      	ldrb	r3, [r2, #0]
 800525a:	0014      	movs	r4, r2
 800525c:	3201      	adds	r2, #1
 800525e:	2b00      	cmp	r3, #0
 8005260:	d1fa      	bne.n	8005258 <strcat+0x4>
 8005262:	5cca      	ldrb	r2, [r1, r3]
 8005264:	54e2      	strb	r2, [r4, r3]
 8005266:	3301      	adds	r3, #1
 8005268:	2a00      	cmp	r2, #0
 800526a:	d1fa      	bne.n	8005262 <strcat+0xe>
 800526c:	bd10      	pop	{r4, pc}

0800526e <strncmp>:
 800526e:	b530      	push	{r4, r5, lr}
 8005270:	0005      	movs	r5, r0
 8005272:	1e10      	subs	r0, r2, #0
 8005274:	d008      	beq.n	8005288 <strncmp+0x1a>
 8005276:	2400      	movs	r4, #0
 8005278:	3a01      	subs	r2, #1
 800527a:	5d2b      	ldrb	r3, [r5, r4]
 800527c:	5d08      	ldrb	r0, [r1, r4]
 800527e:	4283      	cmp	r3, r0
 8005280:	d101      	bne.n	8005286 <strncmp+0x18>
 8005282:	4294      	cmp	r4, r2
 8005284:	d101      	bne.n	800528a <strncmp+0x1c>
 8005286:	1a18      	subs	r0, r3, r0
 8005288:	bd30      	pop	{r4, r5, pc}
 800528a:	3401      	adds	r4, #1
 800528c:	2b00      	cmp	r3, #0
 800528e:	d1f4      	bne.n	800527a <strncmp+0xc>
 8005290:	e7f9      	b.n	8005286 <strncmp+0x18>
	...

08005294 <__ssputs_r>:
 8005294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005296:	688e      	ldr	r6, [r1, #8]
 8005298:	b085      	sub	sp, #20
 800529a:	0007      	movs	r7, r0
 800529c:	000c      	movs	r4, r1
 800529e:	9203      	str	r2, [sp, #12]
 80052a0:	9301      	str	r3, [sp, #4]
 80052a2:	429e      	cmp	r6, r3
 80052a4:	d83c      	bhi.n	8005320 <__ssputs_r+0x8c>
 80052a6:	2390      	movs	r3, #144	; 0x90
 80052a8:	898a      	ldrh	r2, [r1, #12]
 80052aa:	00db      	lsls	r3, r3, #3
 80052ac:	421a      	tst	r2, r3
 80052ae:	d034      	beq.n	800531a <__ssputs_r+0x86>
 80052b0:	6909      	ldr	r1, [r1, #16]
 80052b2:	6823      	ldr	r3, [r4, #0]
 80052b4:	6960      	ldr	r0, [r4, #20]
 80052b6:	1a5b      	subs	r3, r3, r1
 80052b8:	9302      	str	r3, [sp, #8]
 80052ba:	2303      	movs	r3, #3
 80052bc:	4343      	muls	r3, r0
 80052be:	0fdd      	lsrs	r5, r3, #31
 80052c0:	18ed      	adds	r5, r5, r3
 80052c2:	9b01      	ldr	r3, [sp, #4]
 80052c4:	9802      	ldr	r0, [sp, #8]
 80052c6:	3301      	adds	r3, #1
 80052c8:	181b      	adds	r3, r3, r0
 80052ca:	106d      	asrs	r5, r5, #1
 80052cc:	42ab      	cmp	r3, r5
 80052ce:	d900      	bls.n	80052d2 <__ssputs_r+0x3e>
 80052d0:	001d      	movs	r5, r3
 80052d2:	0553      	lsls	r3, r2, #21
 80052d4:	d532      	bpl.n	800533c <__ssputs_r+0xa8>
 80052d6:	0029      	movs	r1, r5
 80052d8:	0038      	movs	r0, r7
 80052da:	f001 f82b 	bl	8006334 <_malloc_r>
 80052de:	1e06      	subs	r6, r0, #0
 80052e0:	d109      	bne.n	80052f6 <__ssputs_r+0x62>
 80052e2:	230c      	movs	r3, #12
 80052e4:	603b      	str	r3, [r7, #0]
 80052e6:	2340      	movs	r3, #64	; 0x40
 80052e8:	2001      	movs	r0, #1
 80052ea:	89a2      	ldrh	r2, [r4, #12]
 80052ec:	4240      	negs	r0, r0
 80052ee:	4313      	orrs	r3, r2
 80052f0:	81a3      	strh	r3, [r4, #12]
 80052f2:	b005      	add	sp, #20
 80052f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052f6:	9a02      	ldr	r2, [sp, #8]
 80052f8:	6921      	ldr	r1, [r4, #16]
 80052fa:	f000 ff92 	bl	8006222 <memcpy>
 80052fe:	89a3      	ldrh	r3, [r4, #12]
 8005300:	4a14      	ldr	r2, [pc, #80]	; (8005354 <__ssputs_r+0xc0>)
 8005302:	401a      	ands	r2, r3
 8005304:	2380      	movs	r3, #128	; 0x80
 8005306:	4313      	orrs	r3, r2
 8005308:	81a3      	strh	r3, [r4, #12]
 800530a:	9b02      	ldr	r3, [sp, #8]
 800530c:	6126      	str	r6, [r4, #16]
 800530e:	18f6      	adds	r6, r6, r3
 8005310:	6026      	str	r6, [r4, #0]
 8005312:	6165      	str	r5, [r4, #20]
 8005314:	9e01      	ldr	r6, [sp, #4]
 8005316:	1aed      	subs	r5, r5, r3
 8005318:	60a5      	str	r5, [r4, #8]
 800531a:	9b01      	ldr	r3, [sp, #4]
 800531c:	429e      	cmp	r6, r3
 800531e:	d900      	bls.n	8005322 <__ssputs_r+0x8e>
 8005320:	9e01      	ldr	r6, [sp, #4]
 8005322:	0032      	movs	r2, r6
 8005324:	9903      	ldr	r1, [sp, #12]
 8005326:	6820      	ldr	r0, [r4, #0]
 8005328:	f000 ff84 	bl	8006234 <memmove>
 800532c:	68a3      	ldr	r3, [r4, #8]
 800532e:	2000      	movs	r0, #0
 8005330:	1b9b      	subs	r3, r3, r6
 8005332:	60a3      	str	r3, [r4, #8]
 8005334:	6823      	ldr	r3, [r4, #0]
 8005336:	199e      	adds	r6, r3, r6
 8005338:	6026      	str	r6, [r4, #0]
 800533a:	e7da      	b.n	80052f2 <__ssputs_r+0x5e>
 800533c:	002a      	movs	r2, r5
 800533e:	0038      	movs	r0, r7
 8005340:	f001 f86e 	bl	8006420 <_realloc_r>
 8005344:	1e06      	subs	r6, r0, #0
 8005346:	d1e0      	bne.n	800530a <__ssputs_r+0x76>
 8005348:	0038      	movs	r0, r7
 800534a:	6921      	ldr	r1, [r4, #16]
 800534c:	f000 ff86 	bl	800625c <_free_r>
 8005350:	e7c7      	b.n	80052e2 <__ssputs_r+0x4e>
 8005352:	46c0      	nop			; (mov r8, r8)
 8005354:	fffffb7f 	.word	0xfffffb7f

08005358 <_svfiprintf_r>:
 8005358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800535a:	b0a1      	sub	sp, #132	; 0x84
 800535c:	9003      	str	r0, [sp, #12]
 800535e:	001d      	movs	r5, r3
 8005360:	898b      	ldrh	r3, [r1, #12]
 8005362:	000f      	movs	r7, r1
 8005364:	0016      	movs	r6, r2
 8005366:	061b      	lsls	r3, r3, #24
 8005368:	d511      	bpl.n	800538e <_svfiprintf_r+0x36>
 800536a:	690b      	ldr	r3, [r1, #16]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10e      	bne.n	800538e <_svfiprintf_r+0x36>
 8005370:	2140      	movs	r1, #64	; 0x40
 8005372:	f000 ffdf 	bl	8006334 <_malloc_r>
 8005376:	6038      	str	r0, [r7, #0]
 8005378:	6138      	str	r0, [r7, #16]
 800537a:	2800      	cmp	r0, #0
 800537c:	d105      	bne.n	800538a <_svfiprintf_r+0x32>
 800537e:	230c      	movs	r3, #12
 8005380:	9a03      	ldr	r2, [sp, #12]
 8005382:	3801      	subs	r0, #1
 8005384:	6013      	str	r3, [r2, #0]
 8005386:	b021      	add	sp, #132	; 0x84
 8005388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800538a:	2340      	movs	r3, #64	; 0x40
 800538c:	617b      	str	r3, [r7, #20]
 800538e:	2300      	movs	r3, #0
 8005390:	ac08      	add	r4, sp, #32
 8005392:	6163      	str	r3, [r4, #20]
 8005394:	3320      	adds	r3, #32
 8005396:	7663      	strb	r3, [r4, #25]
 8005398:	3310      	adds	r3, #16
 800539a:	76a3      	strb	r3, [r4, #26]
 800539c:	9507      	str	r5, [sp, #28]
 800539e:	0035      	movs	r5, r6
 80053a0:	782b      	ldrb	r3, [r5, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d001      	beq.n	80053aa <_svfiprintf_r+0x52>
 80053a6:	2b25      	cmp	r3, #37	; 0x25
 80053a8:	d147      	bne.n	800543a <_svfiprintf_r+0xe2>
 80053aa:	1bab      	subs	r3, r5, r6
 80053ac:	9305      	str	r3, [sp, #20]
 80053ae:	42b5      	cmp	r5, r6
 80053b0:	d00c      	beq.n	80053cc <_svfiprintf_r+0x74>
 80053b2:	0032      	movs	r2, r6
 80053b4:	0039      	movs	r1, r7
 80053b6:	9803      	ldr	r0, [sp, #12]
 80053b8:	f7ff ff6c 	bl	8005294 <__ssputs_r>
 80053bc:	1c43      	adds	r3, r0, #1
 80053be:	d100      	bne.n	80053c2 <_svfiprintf_r+0x6a>
 80053c0:	e0ae      	b.n	8005520 <_svfiprintf_r+0x1c8>
 80053c2:	6962      	ldr	r2, [r4, #20]
 80053c4:	9b05      	ldr	r3, [sp, #20]
 80053c6:	4694      	mov	ip, r2
 80053c8:	4463      	add	r3, ip
 80053ca:	6163      	str	r3, [r4, #20]
 80053cc:	782b      	ldrb	r3, [r5, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d100      	bne.n	80053d4 <_svfiprintf_r+0x7c>
 80053d2:	e0a5      	b.n	8005520 <_svfiprintf_r+0x1c8>
 80053d4:	2201      	movs	r2, #1
 80053d6:	2300      	movs	r3, #0
 80053d8:	4252      	negs	r2, r2
 80053da:	6062      	str	r2, [r4, #4]
 80053dc:	a904      	add	r1, sp, #16
 80053de:	3254      	adds	r2, #84	; 0x54
 80053e0:	1852      	adds	r2, r2, r1
 80053e2:	1c6e      	adds	r6, r5, #1
 80053e4:	6023      	str	r3, [r4, #0]
 80053e6:	60e3      	str	r3, [r4, #12]
 80053e8:	60a3      	str	r3, [r4, #8]
 80053ea:	7013      	strb	r3, [r2, #0]
 80053ec:	65a3      	str	r3, [r4, #88]	; 0x58
 80053ee:	2205      	movs	r2, #5
 80053f0:	7831      	ldrb	r1, [r6, #0]
 80053f2:	4854      	ldr	r0, [pc, #336]	; (8005544 <_svfiprintf_r+0x1ec>)
 80053f4:	f000 ff0a 	bl	800620c <memchr>
 80053f8:	1c75      	adds	r5, r6, #1
 80053fa:	2800      	cmp	r0, #0
 80053fc:	d11f      	bne.n	800543e <_svfiprintf_r+0xe6>
 80053fe:	6822      	ldr	r2, [r4, #0]
 8005400:	06d3      	lsls	r3, r2, #27
 8005402:	d504      	bpl.n	800540e <_svfiprintf_r+0xb6>
 8005404:	2353      	movs	r3, #83	; 0x53
 8005406:	a904      	add	r1, sp, #16
 8005408:	185b      	adds	r3, r3, r1
 800540a:	2120      	movs	r1, #32
 800540c:	7019      	strb	r1, [r3, #0]
 800540e:	0713      	lsls	r3, r2, #28
 8005410:	d504      	bpl.n	800541c <_svfiprintf_r+0xc4>
 8005412:	2353      	movs	r3, #83	; 0x53
 8005414:	a904      	add	r1, sp, #16
 8005416:	185b      	adds	r3, r3, r1
 8005418:	212b      	movs	r1, #43	; 0x2b
 800541a:	7019      	strb	r1, [r3, #0]
 800541c:	7833      	ldrb	r3, [r6, #0]
 800541e:	2b2a      	cmp	r3, #42	; 0x2a
 8005420:	d016      	beq.n	8005450 <_svfiprintf_r+0xf8>
 8005422:	0035      	movs	r5, r6
 8005424:	2100      	movs	r1, #0
 8005426:	200a      	movs	r0, #10
 8005428:	68e3      	ldr	r3, [r4, #12]
 800542a:	782a      	ldrb	r2, [r5, #0]
 800542c:	1c6e      	adds	r6, r5, #1
 800542e:	3a30      	subs	r2, #48	; 0x30
 8005430:	2a09      	cmp	r2, #9
 8005432:	d94e      	bls.n	80054d2 <_svfiprintf_r+0x17a>
 8005434:	2900      	cmp	r1, #0
 8005436:	d111      	bne.n	800545c <_svfiprintf_r+0x104>
 8005438:	e017      	b.n	800546a <_svfiprintf_r+0x112>
 800543a:	3501      	adds	r5, #1
 800543c:	e7b0      	b.n	80053a0 <_svfiprintf_r+0x48>
 800543e:	4b41      	ldr	r3, [pc, #260]	; (8005544 <_svfiprintf_r+0x1ec>)
 8005440:	6822      	ldr	r2, [r4, #0]
 8005442:	1ac0      	subs	r0, r0, r3
 8005444:	2301      	movs	r3, #1
 8005446:	4083      	lsls	r3, r0
 8005448:	4313      	orrs	r3, r2
 800544a:	002e      	movs	r6, r5
 800544c:	6023      	str	r3, [r4, #0]
 800544e:	e7ce      	b.n	80053ee <_svfiprintf_r+0x96>
 8005450:	9b07      	ldr	r3, [sp, #28]
 8005452:	1d19      	adds	r1, r3, #4
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	9107      	str	r1, [sp, #28]
 8005458:	2b00      	cmp	r3, #0
 800545a:	db01      	blt.n	8005460 <_svfiprintf_r+0x108>
 800545c:	930b      	str	r3, [sp, #44]	; 0x2c
 800545e:	e004      	b.n	800546a <_svfiprintf_r+0x112>
 8005460:	425b      	negs	r3, r3
 8005462:	60e3      	str	r3, [r4, #12]
 8005464:	2302      	movs	r3, #2
 8005466:	4313      	orrs	r3, r2
 8005468:	6023      	str	r3, [r4, #0]
 800546a:	782b      	ldrb	r3, [r5, #0]
 800546c:	2b2e      	cmp	r3, #46	; 0x2e
 800546e:	d10a      	bne.n	8005486 <_svfiprintf_r+0x12e>
 8005470:	786b      	ldrb	r3, [r5, #1]
 8005472:	2b2a      	cmp	r3, #42	; 0x2a
 8005474:	d135      	bne.n	80054e2 <_svfiprintf_r+0x18a>
 8005476:	9b07      	ldr	r3, [sp, #28]
 8005478:	3502      	adds	r5, #2
 800547a:	1d1a      	adds	r2, r3, #4
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	9207      	str	r2, [sp, #28]
 8005480:	2b00      	cmp	r3, #0
 8005482:	db2b      	blt.n	80054dc <_svfiprintf_r+0x184>
 8005484:	9309      	str	r3, [sp, #36]	; 0x24
 8005486:	4e30      	ldr	r6, [pc, #192]	; (8005548 <_svfiprintf_r+0x1f0>)
 8005488:	2203      	movs	r2, #3
 800548a:	0030      	movs	r0, r6
 800548c:	7829      	ldrb	r1, [r5, #0]
 800548e:	f000 febd 	bl	800620c <memchr>
 8005492:	2800      	cmp	r0, #0
 8005494:	d006      	beq.n	80054a4 <_svfiprintf_r+0x14c>
 8005496:	2340      	movs	r3, #64	; 0x40
 8005498:	1b80      	subs	r0, r0, r6
 800549a:	4083      	lsls	r3, r0
 800549c:	6822      	ldr	r2, [r4, #0]
 800549e:	3501      	adds	r5, #1
 80054a0:	4313      	orrs	r3, r2
 80054a2:	6023      	str	r3, [r4, #0]
 80054a4:	7829      	ldrb	r1, [r5, #0]
 80054a6:	2206      	movs	r2, #6
 80054a8:	4828      	ldr	r0, [pc, #160]	; (800554c <_svfiprintf_r+0x1f4>)
 80054aa:	1c6e      	adds	r6, r5, #1
 80054ac:	7621      	strb	r1, [r4, #24]
 80054ae:	f000 fead 	bl	800620c <memchr>
 80054b2:	2800      	cmp	r0, #0
 80054b4:	d03c      	beq.n	8005530 <_svfiprintf_r+0x1d8>
 80054b6:	4b26      	ldr	r3, [pc, #152]	; (8005550 <_svfiprintf_r+0x1f8>)
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d125      	bne.n	8005508 <_svfiprintf_r+0x1b0>
 80054bc:	2207      	movs	r2, #7
 80054be:	9b07      	ldr	r3, [sp, #28]
 80054c0:	3307      	adds	r3, #7
 80054c2:	4393      	bics	r3, r2
 80054c4:	3308      	adds	r3, #8
 80054c6:	9307      	str	r3, [sp, #28]
 80054c8:	6963      	ldr	r3, [r4, #20]
 80054ca:	9a04      	ldr	r2, [sp, #16]
 80054cc:	189b      	adds	r3, r3, r2
 80054ce:	6163      	str	r3, [r4, #20]
 80054d0:	e765      	b.n	800539e <_svfiprintf_r+0x46>
 80054d2:	4343      	muls	r3, r0
 80054d4:	0035      	movs	r5, r6
 80054d6:	2101      	movs	r1, #1
 80054d8:	189b      	adds	r3, r3, r2
 80054da:	e7a6      	b.n	800542a <_svfiprintf_r+0xd2>
 80054dc:	2301      	movs	r3, #1
 80054de:	425b      	negs	r3, r3
 80054e0:	e7d0      	b.n	8005484 <_svfiprintf_r+0x12c>
 80054e2:	2300      	movs	r3, #0
 80054e4:	200a      	movs	r0, #10
 80054e6:	001a      	movs	r2, r3
 80054e8:	3501      	adds	r5, #1
 80054ea:	6063      	str	r3, [r4, #4]
 80054ec:	7829      	ldrb	r1, [r5, #0]
 80054ee:	1c6e      	adds	r6, r5, #1
 80054f0:	3930      	subs	r1, #48	; 0x30
 80054f2:	2909      	cmp	r1, #9
 80054f4:	d903      	bls.n	80054fe <_svfiprintf_r+0x1a6>
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d0c5      	beq.n	8005486 <_svfiprintf_r+0x12e>
 80054fa:	9209      	str	r2, [sp, #36]	; 0x24
 80054fc:	e7c3      	b.n	8005486 <_svfiprintf_r+0x12e>
 80054fe:	4342      	muls	r2, r0
 8005500:	0035      	movs	r5, r6
 8005502:	2301      	movs	r3, #1
 8005504:	1852      	adds	r2, r2, r1
 8005506:	e7f1      	b.n	80054ec <_svfiprintf_r+0x194>
 8005508:	ab07      	add	r3, sp, #28
 800550a:	9300      	str	r3, [sp, #0]
 800550c:	003a      	movs	r2, r7
 800550e:	0021      	movs	r1, r4
 8005510:	4b10      	ldr	r3, [pc, #64]	; (8005554 <_svfiprintf_r+0x1fc>)
 8005512:	9803      	ldr	r0, [sp, #12]
 8005514:	e000      	b.n	8005518 <_svfiprintf_r+0x1c0>
 8005516:	bf00      	nop
 8005518:	9004      	str	r0, [sp, #16]
 800551a:	9b04      	ldr	r3, [sp, #16]
 800551c:	3301      	adds	r3, #1
 800551e:	d1d3      	bne.n	80054c8 <_svfiprintf_r+0x170>
 8005520:	89bb      	ldrh	r3, [r7, #12]
 8005522:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005524:	065b      	lsls	r3, r3, #25
 8005526:	d400      	bmi.n	800552a <_svfiprintf_r+0x1d2>
 8005528:	e72d      	b.n	8005386 <_svfiprintf_r+0x2e>
 800552a:	2001      	movs	r0, #1
 800552c:	4240      	negs	r0, r0
 800552e:	e72a      	b.n	8005386 <_svfiprintf_r+0x2e>
 8005530:	ab07      	add	r3, sp, #28
 8005532:	9300      	str	r3, [sp, #0]
 8005534:	003a      	movs	r2, r7
 8005536:	0021      	movs	r1, r4
 8005538:	4b06      	ldr	r3, [pc, #24]	; (8005554 <_svfiprintf_r+0x1fc>)
 800553a:	9803      	ldr	r0, [sp, #12]
 800553c:	f000 fa56 	bl	80059ec <_printf_i>
 8005540:	e7ea      	b.n	8005518 <_svfiprintf_r+0x1c0>
 8005542:	46c0      	nop			; (mov r8, r8)
 8005544:	080066fc 	.word	0x080066fc
 8005548:	08006702 	.word	0x08006702
 800554c:	08006706 	.word	0x08006706
 8005550:	00000000 	.word	0x00000000
 8005554:	08005295 	.word	0x08005295

08005558 <_sungetc_r>:
 8005558:	b570      	push	{r4, r5, r6, lr}
 800555a:	0014      	movs	r4, r2
 800555c:	1c4b      	adds	r3, r1, #1
 800555e:	d103      	bne.n	8005568 <_sungetc_r+0x10>
 8005560:	2501      	movs	r5, #1
 8005562:	426d      	negs	r5, r5
 8005564:	0028      	movs	r0, r5
 8005566:	bd70      	pop	{r4, r5, r6, pc}
 8005568:	8993      	ldrh	r3, [r2, #12]
 800556a:	2220      	movs	r2, #32
 800556c:	4393      	bics	r3, r2
 800556e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005570:	81a3      	strh	r3, [r4, #12]
 8005572:	b2ce      	uxtb	r6, r1
 8005574:	6863      	ldr	r3, [r4, #4]
 8005576:	b2cd      	uxtb	r5, r1
 8005578:	2a00      	cmp	r2, #0
 800557a:	d010      	beq.n	800559e <_sungetc_r+0x46>
 800557c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800557e:	429a      	cmp	r2, r3
 8005580:	dd07      	ble.n	8005592 <_sungetc_r+0x3a>
 8005582:	6823      	ldr	r3, [r4, #0]
 8005584:	3b01      	subs	r3, #1
 8005586:	6023      	str	r3, [r4, #0]
 8005588:	701e      	strb	r6, [r3, #0]
 800558a:	6863      	ldr	r3, [r4, #4]
 800558c:	3301      	adds	r3, #1
 800558e:	6063      	str	r3, [r4, #4]
 8005590:	e7e8      	b.n	8005564 <_sungetc_r+0xc>
 8005592:	0021      	movs	r1, r4
 8005594:	f000 fdfa 	bl	800618c <__submore>
 8005598:	2800      	cmp	r0, #0
 800559a:	d0f2      	beq.n	8005582 <_sungetc_r+0x2a>
 800559c:	e7e0      	b.n	8005560 <_sungetc_r+0x8>
 800559e:	6921      	ldr	r1, [r4, #16]
 80055a0:	6822      	ldr	r2, [r4, #0]
 80055a2:	2900      	cmp	r1, #0
 80055a4:	d007      	beq.n	80055b6 <_sungetc_r+0x5e>
 80055a6:	4291      	cmp	r1, r2
 80055a8:	d205      	bcs.n	80055b6 <_sungetc_r+0x5e>
 80055aa:	1e51      	subs	r1, r2, #1
 80055ac:	7808      	ldrb	r0, [r1, #0]
 80055ae:	42a8      	cmp	r0, r5
 80055b0:	d101      	bne.n	80055b6 <_sungetc_r+0x5e>
 80055b2:	6021      	str	r1, [r4, #0]
 80055b4:	e7ea      	b.n	800558c <_sungetc_r+0x34>
 80055b6:	6423      	str	r3, [r4, #64]	; 0x40
 80055b8:	0023      	movs	r3, r4
 80055ba:	3344      	adds	r3, #68	; 0x44
 80055bc:	6363      	str	r3, [r4, #52]	; 0x34
 80055be:	2303      	movs	r3, #3
 80055c0:	63a3      	str	r3, [r4, #56]	; 0x38
 80055c2:	0023      	movs	r3, r4
 80055c4:	3346      	adds	r3, #70	; 0x46
 80055c6:	63e2      	str	r2, [r4, #60]	; 0x3c
 80055c8:	701e      	strb	r6, [r3, #0]
 80055ca:	6023      	str	r3, [r4, #0]
 80055cc:	2301      	movs	r3, #1
 80055ce:	e7de      	b.n	800558e <_sungetc_r+0x36>

080055d0 <__ssrefill_r>:
 80055d0:	b510      	push	{r4, lr}
 80055d2:	000c      	movs	r4, r1
 80055d4:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80055d6:	2900      	cmp	r1, #0
 80055d8:	d00e      	beq.n	80055f8 <__ssrefill_r+0x28>
 80055da:	0023      	movs	r3, r4
 80055dc:	3344      	adds	r3, #68	; 0x44
 80055de:	4299      	cmp	r1, r3
 80055e0:	d001      	beq.n	80055e6 <__ssrefill_r+0x16>
 80055e2:	f000 fe3b 	bl	800625c <_free_r>
 80055e6:	2000      	movs	r0, #0
 80055e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80055ea:	6360      	str	r0, [r4, #52]	; 0x34
 80055ec:	6063      	str	r3, [r4, #4]
 80055ee:	4283      	cmp	r3, r0
 80055f0:	d002      	beq.n	80055f8 <__ssrefill_r+0x28>
 80055f2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80055f4:	6023      	str	r3, [r4, #0]
 80055f6:	bd10      	pop	{r4, pc}
 80055f8:	6923      	ldr	r3, [r4, #16]
 80055fa:	2001      	movs	r0, #1
 80055fc:	6023      	str	r3, [r4, #0]
 80055fe:	2300      	movs	r3, #0
 8005600:	89a2      	ldrh	r2, [r4, #12]
 8005602:	6063      	str	r3, [r4, #4]
 8005604:	3320      	adds	r3, #32
 8005606:	4313      	orrs	r3, r2
 8005608:	81a3      	strh	r3, [r4, #12]
 800560a:	4240      	negs	r0, r0
 800560c:	e7f3      	b.n	80055f6 <__ssrefill_r+0x26>
	...

08005610 <__ssvfiscanf_r>:
 8005610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005612:	4cb8      	ldr	r4, [pc, #736]	; (80058f4 <__ssvfiscanf_r+0x2e4>)
 8005614:	0006      	movs	r6, r0
 8005616:	44a5      	add	sp, r4
 8005618:	000c      	movs	r4, r1
 800561a:	2100      	movs	r1, #0
 800561c:	9146      	str	r1, [sp, #280]	; 0x118
 800561e:	9147      	str	r1, [sp, #284]	; 0x11c
 8005620:	a903      	add	r1, sp, #12
 8005622:	9148      	str	r1, [sp, #288]	; 0x120
 8005624:	21be      	movs	r1, #190	; 0xbe
 8005626:	48b4      	ldr	r0, [pc, #720]	; (80058f8 <__ssvfiscanf_r+0x2e8>)
 8005628:	0049      	lsls	r1, r1, #1
 800562a:	ad43      	add	r5, sp, #268	; 0x10c
 800562c:	5068      	str	r0, [r5, r1]
 800562e:	25c0      	movs	r5, #192	; 0xc0
 8005630:	49b2      	ldr	r1, [pc, #712]	; (80058fc <__ssvfiscanf_r+0x2ec>)
 8005632:	006d      	lsls	r5, r5, #1
 8005634:	a843      	add	r0, sp, #268	; 0x10c
 8005636:	5141      	str	r1, [r0, r5]
 8005638:	9302      	str	r3, [sp, #8]
 800563a:	7813      	ldrb	r3, [r2, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d100      	bne.n	8005642 <__ssvfiscanf_r+0x32>
 8005640:	e155      	b.n	80058ee <__ssvfiscanf_r+0x2de>
 8005642:	49af      	ldr	r1, [pc, #700]	; (8005900 <__ssvfiscanf_r+0x2f0>)
 8005644:	2508      	movs	r5, #8
 8005646:	5cc8      	ldrb	r0, [r1, r3]
 8005648:	2108      	movs	r1, #8
 800564a:	1c57      	adds	r7, r2, #1
 800564c:	4001      	ands	r1, r0
 800564e:	4228      	tst	r0, r5
 8005650:	d020      	beq.n	8005694 <__ssvfiscanf_r+0x84>
 8005652:	6863      	ldr	r3, [r4, #4]
 8005654:	2b00      	cmp	r3, #0
 8005656:	dd12      	ble.n	800567e <__ssvfiscanf_r+0x6e>
 8005658:	6823      	ldr	r3, [r4, #0]
 800565a:	49a9      	ldr	r1, [pc, #676]	; (8005900 <__ssvfiscanf_r+0x2f0>)
 800565c:	781a      	ldrb	r2, [r3, #0]
 800565e:	5c8a      	ldrb	r2, [r1, r2]
 8005660:	2108      	movs	r1, #8
 8005662:	420a      	tst	r2, r1
 8005664:	d101      	bne.n	800566a <__ssvfiscanf_r+0x5a>
 8005666:	003a      	movs	r2, r7
 8005668:	e7e7      	b.n	800563a <__ssvfiscanf_r+0x2a>
 800566a:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800566c:	3301      	adds	r3, #1
 800566e:	9200      	str	r2, [sp, #0]
 8005670:	3201      	adds	r2, #1
 8005672:	9247      	str	r2, [sp, #284]	; 0x11c
 8005674:	6862      	ldr	r2, [r4, #4]
 8005676:	6023      	str	r3, [r4, #0]
 8005678:	3a01      	subs	r2, #1
 800567a:	6062      	str	r2, [r4, #4]
 800567c:	e7e9      	b.n	8005652 <__ssvfiscanf_r+0x42>
 800567e:	22c0      	movs	r2, #192	; 0xc0
 8005680:	ab43      	add	r3, sp, #268	; 0x10c
 8005682:	0052      	lsls	r2, r2, #1
 8005684:	589b      	ldr	r3, [r3, r2]
 8005686:	0021      	movs	r1, r4
 8005688:	0030      	movs	r0, r6
 800568a:	9300      	str	r3, [sp, #0]
 800568c:	4798      	blx	r3
 800568e:	2800      	cmp	r0, #0
 8005690:	d0e2      	beq.n	8005658 <__ssvfiscanf_r+0x48>
 8005692:	e7e8      	b.n	8005666 <__ssvfiscanf_r+0x56>
 8005694:	001d      	movs	r5, r3
 8005696:	2b25      	cmp	r3, #37	; 0x25
 8005698:	d164      	bne.n	8005764 <__ssvfiscanf_r+0x154>
 800569a:	9145      	str	r1, [sp, #276]	; 0x114
 800569c:	9143      	str	r1, [sp, #268]	; 0x10c
 800569e:	7853      	ldrb	r3, [r2, #1]
 80056a0:	2b2a      	cmp	r3, #42	; 0x2a
 80056a2:	d102      	bne.n	80056aa <__ssvfiscanf_r+0x9a>
 80056a4:	3b1a      	subs	r3, #26
 80056a6:	9343      	str	r3, [sp, #268]	; 0x10c
 80056a8:	1c97      	adds	r7, r2, #2
 80056aa:	003d      	movs	r5, r7
 80056ac:	220a      	movs	r2, #10
 80056ae:	7829      	ldrb	r1, [r5, #0]
 80056b0:	1c6b      	adds	r3, r5, #1
 80056b2:	9300      	str	r3, [sp, #0]
 80056b4:	000b      	movs	r3, r1
 80056b6:	3b30      	subs	r3, #48	; 0x30
 80056b8:	2b09      	cmp	r3, #9
 80056ba:	d91f      	bls.n	80056fc <__ssvfiscanf_r+0xec>
 80056bc:	4f91      	ldr	r7, [pc, #580]	; (8005904 <__ssvfiscanf_r+0x2f4>)
 80056be:	2203      	movs	r2, #3
 80056c0:	0038      	movs	r0, r7
 80056c2:	f000 fda3 	bl	800620c <memchr>
 80056c6:	2800      	cmp	r0, #0
 80056c8:	d007      	beq.n	80056da <__ssvfiscanf_r+0xca>
 80056ca:	2301      	movs	r3, #1
 80056cc:	1bc0      	subs	r0, r0, r7
 80056ce:	4083      	lsls	r3, r0
 80056d0:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80056d2:	9d00      	ldr	r5, [sp, #0]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	9201      	str	r2, [sp, #4]
 80056d8:	9343      	str	r3, [sp, #268]	; 0x10c
 80056da:	1c6f      	adds	r7, r5, #1
 80056dc:	782d      	ldrb	r5, [r5, #0]
 80056de:	2d78      	cmp	r5, #120	; 0x78
 80056e0:	d807      	bhi.n	80056f2 <__ssvfiscanf_r+0xe2>
 80056e2:	2d57      	cmp	r5, #87	; 0x57
 80056e4:	d812      	bhi.n	800570c <__ssvfiscanf_r+0xfc>
 80056e6:	2d25      	cmp	r5, #37	; 0x25
 80056e8:	d03c      	beq.n	8005764 <__ssvfiscanf_r+0x154>
 80056ea:	d836      	bhi.n	800575a <__ssvfiscanf_r+0x14a>
 80056ec:	2d00      	cmp	r5, #0
 80056ee:	d100      	bne.n	80056f2 <__ssvfiscanf_r+0xe2>
 80056f0:	e0fa      	b.n	80058e8 <__ssvfiscanf_r+0x2d8>
 80056f2:	2303      	movs	r3, #3
 80056f4:	9349      	str	r3, [sp, #292]	; 0x124
 80056f6:	3307      	adds	r3, #7
 80056f8:	9344      	str	r3, [sp, #272]	; 0x110
 80056fa:	e06d      	b.n	80057d8 <__ssvfiscanf_r+0x1c8>
 80056fc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80056fe:	9d00      	ldr	r5, [sp, #0]
 8005700:	9301      	str	r3, [sp, #4]
 8005702:	4353      	muls	r3, r2
 8005704:	3b30      	subs	r3, #48	; 0x30
 8005706:	185b      	adds	r3, r3, r1
 8005708:	9345      	str	r3, [sp, #276]	; 0x114
 800570a:	e7d0      	b.n	80056ae <__ssvfiscanf_r+0x9e>
 800570c:	0028      	movs	r0, r5
 800570e:	3858      	subs	r0, #88	; 0x58
 8005710:	2820      	cmp	r0, #32
 8005712:	d8ee      	bhi.n	80056f2 <__ssvfiscanf_r+0xe2>
 8005714:	f7fa fcfe 	bl	8000114 <__gnu_thumb1_case_shi>
 8005718:	ffed0051 	.word	0xffed0051
 800571c:	0087ffed 	.word	0x0087ffed
 8005720:	ffedffed 	.word	0xffedffed
 8005724:	ffedffed 	.word	0xffedffed
 8005728:	ffedffed 	.word	0xffedffed
 800572c:	0095ffed 	.word	0x0095ffed
 8005730:	0024007d 	.word	0x0024007d
 8005734:	00240024 	.word	0x00240024
 8005738:	007fffed 	.word	0x007fffed
 800573c:	ffedffed 	.word	0xffedffed
 8005740:	ffedffed 	.word	0xffedffed
 8005744:	0083009f 	.word	0x0083009f
 8005748:	ffed004b 	.word	0xffed004b
 800574c:	009dffed 	.word	0x009dffed
 8005750:	007dffed 	.word	0x007dffed
 8005754:	ffedffed 	.word	0xffedffed
 8005758:	0051      	.short	0x0051
 800575a:	3d45      	subs	r5, #69	; 0x45
 800575c:	2d02      	cmp	r5, #2
 800575e:	d8c8      	bhi.n	80056f2 <__ssvfiscanf_r+0xe2>
 8005760:	2305      	movs	r3, #5
 8005762:	e06c      	b.n	800583e <__ssvfiscanf_r+0x22e>
 8005764:	6863      	ldr	r3, [r4, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	dd0e      	ble.n	8005788 <__ssvfiscanf_r+0x178>
 800576a:	6823      	ldr	r3, [r4, #0]
 800576c:	781a      	ldrb	r2, [r3, #0]
 800576e:	42aa      	cmp	r2, r5
 8005770:	d000      	beq.n	8005774 <__ssvfiscanf_r+0x164>
 8005772:	e0bc      	b.n	80058ee <__ssvfiscanf_r+0x2de>
 8005774:	3301      	adds	r3, #1
 8005776:	6862      	ldr	r2, [r4, #4]
 8005778:	6023      	str	r3, [r4, #0]
 800577a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800577c:	3a01      	subs	r2, #1
 800577e:	9300      	str	r3, [sp, #0]
 8005780:	3301      	adds	r3, #1
 8005782:	6062      	str	r2, [r4, #4]
 8005784:	9347      	str	r3, [sp, #284]	; 0x11c
 8005786:	e76e      	b.n	8005666 <__ssvfiscanf_r+0x56>
 8005788:	22c0      	movs	r2, #192	; 0xc0
 800578a:	ab43      	add	r3, sp, #268	; 0x10c
 800578c:	0052      	lsls	r2, r2, #1
 800578e:	589b      	ldr	r3, [r3, r2]
 8005790:	0021      	movs	r1, r4
 8005792:	0030      	movs	r0, r6
 8005794:	9300      	str	r3, [sp, #0]
 8005796:	4798      	blx	r3
 8005798:	2800      	cmp	r0, #0
 800579a:	d0e6      	beq.n	800576a <__ssvfiscanf_r+0x15a>
 800579c:	9846      	ldr	r0, [sp, #280]	; 0x118
 800579e:	2800      	cmp	r0, #0
 80057a0:	d000      	beq.n	80057a4 <__ssvfiscanf_r+0x194>
 80057a2:	e09d      	b.n	80058e0 <__ssvfiscanf_r+0x2d0>
 80057a4:	3801      	subs	r0, #1
 80057a6:	23a5      	movs	r3, #165	; 0xa5
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	449d      	add	sp, r3
 80057ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057ae:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80057b0:	9300      	str	r3, [sp, #0]
 80057b2:	2320      	movs	r3, #32
 80057b4:	9a00      	ldr	r2, [sp, #0]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	9343      	str	r3, [sp, #268]	; 0x10c
 80057ba:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80057bc:	9300      	str	r3, [sp, #0]
 80057be:	2380      	movs	r3, #128	; 0x80
 80057c0:	9a00      	ldr	r2, [sp, #0]
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	4313      	orrs	r3, r2
 80057c6:	9343      	str	r3, [sp, #268]	; 0x10c
 80057c8:	2310      	movs	r3, #16
 80057ca:	9344      	str	r3, [sp, #272]	; 0x110
 80057cc:	236e      	movs	r3, #110	; 0x6e
 80057ce:	42ab      	cmp	r3, r5
 80057d0:	41ad      	sbcs	r5, r5
 80057d2:	426d      	negs	r5, r5
 80057d4:	3503      	adds	r5, #3
 80057d6:	9549      	str	r5, [sp, #292]	; 0x124
 80057d8:	6863      	ldr	r3, [r4, #4]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	dd4a      	ble.n	8005874 <__ssvfiscanf_r+0x264>
 80057de:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	065b      	lsls	r3, r3, #25
 80057e4:	d406      	bmi.n	80057f4 <__ssvfiscanf_r+0x1e4>
 80057e6:	6823      	ldr	r3, [r4, #0]
 80057e8:	4945      	ldr	r1, [pc, #276]	; (8005900 <__ssvfiscanf_r+0x2f0>)
 80057ea:	781a      	ldrb	r2, [r3, #0]
 80057ec:	5c8a      	ldrb	r2, [r1, r2]
 80057ee:	2108      	movs	r1, #8
 80057f0:	420a      	tst	r2, r1
 80057f2:	d14a      	bne.n	800588a <__ssvfiscanf_r+0x27a>
 80057f4:	9b49      	ldr	r3, [sp, #292]	; 0x124
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	dc5e      	bgt.n	80058b8 <__ssvfiscanf_r+0x2a8>
 80057fa:	0022      	movs	r2, r4
 80057fc:	0030      	movs	r0, r6
 80057fe:	ab02      	add	r3, sp, #8
 8005800:	a943      	add	r1, sp, #268	; 0x10c
 8005802:	f000 fa05 	bl	8005c10 <_scanf_chars>
 8005806:	2801      	cmp	r0, #1
 8005808:	d071      	beq.n	80058ee <__ssvfiscanf_r+0x2de>
 800580a:	2802      	cmp	r0, #2
 800580c:	d000      	beq.n	8005810 <__ssvfiscanf_r+0x200>
 800580e:	e72a      	b.n	8005666 <__ssvfiscanf_r+0x56>
 8005810:	e7c4      	b.n	800579c <__ssvfiscanf_r+0x18c>
 8005812:	230a      	movs	r3, #10
 8005814:	e7d9      	b.n	80057ca <__ssvfiscanf_r+0x1ba>
 8005816:	2300      	movs	r3, #0
 8005818:	2503      	movs	r5, #3
 800581a:	9344      	str	r3, [sp, #272]	; 0x110
 800581c:	e7db      	b.n	80057d6 <__ssvfiscanf_r+0x1c6>
 800581e:	2308      	movs	r3, #8
 8005820:	2504      	movs	r5, #4
 8005822:	9344      	str	r3, [sp, #272]	; 0x110
 8005824:	e7d7      	b.n	80057d6 <__ssvfiscanf_r+0x1c6>
 8005826:	0039      	movs	r1, r7
 8005828:	a803      	add	r0, sp, #12
 800582a:	f000 fb53 	bl	8005ed4 <__sccl>
 800582e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005830:	0007      	movs	r7, r0
 8005832:	9300      	str	r3, [sp, #0]
 8005834:	2340      	movs	r3, #64	; 0x40
 8005836:	9a00      	ldr	r2, [sp, #0]
 8005838:	4313      	orrs	r3, r2
 800583a:	9343      	str	r3, [sp, #268]	; 0x10c
 800583c:	2301      	movs	r3, #1
 800583e:	9349      	str	r3, [sp, #292]	; 0x124
 8005840:	e7ca      	b.n	80057d8 <__ssvfiscanf_r+0x1c8>
 8005842:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	2340      	movs	r3, #64	; 0x40
 8005848:	9a00      	ldr	r2, [sp, #0]
 800584a:	4313      	orrs	r3, r2
 800584c:	9343      	str	r3, [sp, #268]	; 0x10c
 800584e:	2300      	movs	r3, #0
 8005850:	e7f5      	b.n	800583e <__ssvfiscanf_r+0x22e>
 8005852:	2302      	movs	r3, #2
 8005854:	e7f3      	b.n	800583e <__ssvfiscanf_r+0x22e>
 8005856:	9843      	ldr	r0, [sp, #268]	; 0x10c
 8005858:	06c3      	lsls	r3, r0, #27
 800585a:	d500      	bpl.n	800585e <__ssvfiscanf_r+0x24e>
 800585c:	e703      	b.n	8005666 <__ssvfiscanf_r+0x56>
 800585e:	9b02      	ldr	r3, [sp, #8]
 8005860:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8005862:	1d19      	adds	r1, r3, #4
 8005864:	9102      	str	r1, [sp, #8]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	07c5      	lsls	r5, r0, #31
 800586a:	d501      	bpl.n	8005870 <__ssvfiscanf_r+0x260>
 800586c:	801a      	strh	r2, [r3, #0]
 800586e:	e6fa      	b.n	8005666 <__ssvfiscanf_r+0x56>
 8005870:	601a      	str	r2, [r3, #0]
 8005872:	e6f8      	b.n	8005666 <__ssvfiscanf_r+0x56>
 8005874:	22c0      	movs	r2, #192	; 0xc0
 8005876:	ab43      	add	r3, sp, #268	; 0x10c
 8005878:	0052      	lsls	r2, r2, #1
 800587a:	589b      	ldr	r3, [r3, r2]
 800587c:	0021      	movs	r1, r4
 800587e:	0030      	movs	r0, r6
 8005880:	9300      	str	r3, [sp, #0]
 8005882:	4798      	blx	r3
 8005884:	2800      	cmp	r0, #0
 8005886:	d0aa      	beq.n	80057de <__ssvfiscanf_r+0x1ce>
 8005888:	e788      	b.n	800579c <__ssvfiscanf_r+0x18c>
 800588a:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800588c:	9200      	str	r2, [sp, #0]
 800588e:	3201      	adds	r2, #1
 8005890:	9247      	str	r2, [sp, #284]	; 0x11c
 8005892:	6862      	ldr	r2, [r4, #4]
 8005894:	3a01      	subs	r2, #1
 8005896:	6062      	str	r2, [r4, #4]
 8005898:	2a00      	cmp	r2, #0
 800589a:	dd02      	ble.n	80058a2 <__ssvfiscanf_r+0x292>
 800589c:	3301      	adds	r3, #1
 800589e:	6023      	str	r3, [r4, #0]
 80058a0:	e7a1      	b.n	80057e6 <__ssvfiscanf_r+0x1d6>
 80058a2:	22c0      	movs	r2, #192	; 0xc0
 80058a4:	ab43      	add	r3, sp, #268	; 0x10c
 80058a6:	0052      	lsls	r2, r2, #1
 80058a8:	589b      	ldr	r3, [r3, r2]
 80058aa:	0021      	movs	r1, r4
 80058ac:	0030      	movs	r0, r6
 80058ae:	9300      	str	r3, [sp, #0]
 80058b0:	4798      	blx	r3
 80058b2:	2800      	cmp	r0, #0
 80058b4:	d097      	beq.n	80057e6 <__ssvfiscanf_r+0x1d6>
 80058b6:	e771      	b.n	800579c <__ssvfiscanf_r+0x18c>
 80058b8:	2b04      	cmp	r3, #4
 80058ba:	dc06      	bgt.n	80058ca <__ssvfiscanf_r+0x2ba>
 80058bc:	0022      	movs	r2, r4
 80058be:	0030      	movs	r0, r6
 80058c0:	ab02      	add	r3, sp, #8
 80058c2:	a943      	add	r1, sp, #268	; 0x10c
 80058c4:	f000 fa02 	bl	8005ccc <_scanf_i>
 80058c8:	e79d      	b.n	8005806 <__ssvfiscanf_r+0x1f6>
 80058ca:	4b0f      	ldr	r3, [pc, #60]	; (8005908 <__ssvfiscanf_r+0x2f8>)
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d100      	bne.n	80058d2 <__ssvfiscanf_r+0x2c2>
 80058d0:	e6c9      	b.n	8005666 <__ssvfiscanf_r+0x56>
 80058d2:	0022      	movs	r2, r4
 80058d4:	0030      	movs	r0, r6
 80058d6:	ab02      	add	r3, sp, #8
 80058d8:	a943      	add	r1, sp, #268	; 0x10c
 80058da:	e000      	b.n	80058de <__ssvfiscanf_r+0x2ce>
 80058dc:	bf00      	nop
 80058de:	e792      	b.n	8005806 <__ssvfiscanf_r+0x1f6>
 80058e0:	89a3      	ldrh	r3, [r4, #12]
 80058e2:	065b      	lsls	r3, r3, #25
 80058e4:	d400      	bmi.n	80058e8 <__ssvfiscanf_r+0x2d8>
 80058e6:	e75e      	b.n	80057a6 <__ssvfiscanf_r+0x196>
 80058e8:	2001      	movs	r0, #1
 80058ea:	4240      	negs	r0, r0
 80058ec:	e75b      	b.n	80057a6 <__ssvfiscanf_r+0x196>
 80058ee:	9846      	ldr	r0, [sp, #280]	; 0x118
 80058f0:	e759      	b.n	80057a6 <__ssvfiscanf_r+0x196>
 80058f2:	46c0      	nop			; (mov r8, r8)
 80058f4:	fffffd6c 	.word	0xfffffd6c
 80058f8:	08005559 	.word	0x08005559
 80058fc:	080055d1 	.word	0x080055d1
 8005900:	0800674b 	.word	0x0800674b
 8005904:	08006702 	.word	0x08006702
 8005908:	00000000 	.word	0x00000000

0800590c <_printf_common>:
 800590c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800590e:	0015      	movs	r5, r2
 8005910:	9301      	str	r3, [sp, #4]
 8005912:	688a      	ldr	r2, [r1, #8]
 8005914:	690b      	ldr	r3, [r1, #16]
 8005916:	000c      	movs	r4, r1
 8005918:	9000      	str	r0, [sp, #0]
 800591a:	4293      	cmp	r3, r2
 800591c:	da00      	bge.n	8005920 <_printf_common+0x14>
 800591e:	0013      	movs	r3, r2
 8005920:	0022      	movs	r2, r4
 8005922:	602b      	str	r3, [r5, #0]
 8005924:	3243      	adds	r2, #67	; 0x43
 8005926:	7812      	ldrb	r2, [r2, #0]
 8005928:	2a00      	cmp	r2, #0
 800592a:	d001      	beq.n	8005930 <_printf_common+0x24>
 800592c:	3301      	adds	r3, #1
 800592e:	602b      	str	r3, [r5, #0]
 8005930:	6823      	ldr	r3, [r4, #0]
 8005932:	069b      	lsls	r3, r3, #26
 8005934:	d502      	bpl.n	800593c <_printf_common+0x30>
 8005936:	682b      	ldr	r3, [r5, #0]
 8005938:	3302      	adds	r3, #2
 800593a:	602b      	str	r3, [r5, #0]
 800593c:	6822      	ldr	r2, [r4, #0]
 800593e:	2306      	movs	r3, #6
 8005940:	0017      	movs	r7, r2
 8005942:	401f      	ands	r7, r3
 8005944:	421a      	tst	r2, r3
 8005946:	d027      	beq.n	8005998 <_printf_common+0x8c>
 8005948:	0023      	movs	r3, r4
 800594a:	3343      	adds	r3, #67	; 0x43
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	1e5a      	subs	r2, r3, #1
 8005950:	4193      	sbcs	r3, r2
 8005952:	6822      	ldr	r2, [r4, #0]
 8005954:	0692      	lsls	r2, r2, #26
 8005956:	d430      	bmi.n	80059ba <_printf_common+0xae>
 8005958:	0022      	movs	r2, r4
 800595a:	9901      	ldr	r1, [sp, #4]
 800595c:	9800      	ldr	r0, [sp, #0]
 800595e:	9e08      	ldr	r6, [sp, #32]
 8005960:	3243      	adds	r2, #67	; 0x43
 8005962:	47b0      	blx	r6
 8005964:	1c43      	adds	r3, r0, #1
 8005966:	d025      	beq.n	80059b4 <_printf_common+0xa8>
 8005968:	2306      	movs	r3, #6
 800596a:	6820      	ldr	r0, [r4, #0]
 800596c:	682a      	ldr	r2, [r5, #0]
 800596e:	68e1      	ldr	r1, [r4, #12]
 8005970:	2500      	movs	r5, #0
 8005972:	4003      	ands	r3, r0
 8005974:	2b04      	cmp	r3, #4
 8005976:	d103      	bne.n	8005980 <_printf_common+0x74>
 8005978:	1a8d      	subs	r5, r1, r2
 800597a:	43eb      	mvns	r3, r5
 800597c:	17db      	asrs	r3, r3, #31
 800597e:	401d      	ands	r5, r3
 8005980:	68a3      	ldr	r3, [r4, #8]
 8005982:	6922      	ldr	r2, [r4, #16]
 8005984:	4293      	cmp	r3, r2
 8005986:	dd01      	ble.n	800598c <_printf_common+0x80>
 8005988:	1a9b      	subs	r3, r3, r2
 800598a:	18ed      	adds	r5, r5, r3
 800598c:	2700      	movs	r7, #0
 800598e:	42bd      	cmp	r5, r7
 8005990:	d120      	bne.n	80059d4 <_printf_common+0xc8>
 8005992:	2000      	movs	r0, #0
 8005994:	e010      	b.n	80059b8 <_printf_common+0xac>
 8005996:	3701      	adds	r7, #1
 8005998:	68e3      	ldr	r3, [r4, #12]
 800599a:	682a      	ldr	r2, [r5, #0]
 800599c:	1a9b      	subs	r3, r3, r2
 800599e:	42bb      	cmp	r3, r7
 80059a0:	ddd2      	ble.n	8005948 <_printf_common+0x3c>
 80059a2:	0022      	movs	r2, r4
 80059a4:	2301      	movs	r3, #1
 80059a6:	9901      	ldr	r1, [sp, #4]
 80059a8:	9800      	ldr	r0, [sp, #0]
 80059aa:	9e08      	ldr	r6, [sp, #32]
 80059ac:	3219      	adds	r2, #25
 80059ae:	47b0      	blx	r6
 80059b0:	1c43      	adds	r3, r0, #1
 80059b2:	d1f0      	bne.n	8005996 <_printf_common+0x8a>
 80059b4:	2001      	movs	r0, #1
 80059b6:	4240      	negs	r0, r0
 80059b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80059ba:	2030      	movs	r0, #48	; 0x30
 80059bc:	18e1      	adds	r1, r4, r3
 80059be:	3143      	adds	r1, #67	; 0x43
 80059c0:	7008      	strb	r0, [r1, #0]
 80059c2:	0021      	movs	r1, r4
 80059c4:	1c5a      	adds	r2, r3, #1
 80059c6:	3145      	adds	r1, #69	; 0x45
 80059c8:	7809      	ldrb	r1, [r1, #0]
 80059ca:	18a2      	adds	r2, r4, r2
 80059cc:	3243      	adds	r2, #67	; 0x43
 80059ce:	3302      	adds	r3, #2
 80059d0:	7011      	strb	r1, [r2, #0]
 80059d2:	e7c1      	b.n	8005958 <_printf_common+0x4c>
 80059d4:	0022      	movs	r2, r4
 80059d6:	2301      	movs	r3, #1
 80059d8:	9901      	ldr	r1, [sp, #4]
 80059da:	9800      	ldr	r0, [sp, #0]
 80059dc:	9e08      	ldr	r6, [sp, #32]
 80059de:	321a      	adds	r2, #26
 80059e0:	47b0      	blx	r6
 80059e2:	1c43      	adds	r3, r0, #1
 80059e4:	d0e6      	beq.n	80059b4 <_printf_common+0xa8>
 80059e6:	3701      	adds	r7, #1
 80059e8:	e7d1      	b.n	800598e <_printf_common+0x82>
	...

080059ec <_printf_i>:
 80059ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059ee:	b08b      	sub	sp, #44	; 0x2c
 80059f0:	9206      	str	r2, [sp, #24]
 80059f2:	000a      	movs	r2, r1
 80059f4:	3243      	adds	r2, #67	; 0x43
 80059f6:	9307      	str	r3, [sp, #28]
 80059f8:	9005      	str	r0, [sp, #20]
 80059fa:	9204      	str	r2, [sp, #16]
 80059fc:	7e0a      	ldrb	r2, [r1, #24]
 80059fe:	000c      	movs	r4, r1
 8005a00:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005a02:	2a78      	cmp	r2, #120	; 0x78
 8005a04:	d807      	bhi.n	8005a16 <_printf_i+0x2a>
 8005a06:	2a62      	cmp	r2, #98	; 0x62
 8005a08:	d809      	bhi.n	8005a1e <_printf_i+0x32>
 8005a0a:	2a00      	cmp	r2, #0
 8005a0c:	d100      	bne.n	8005a10 <_printf_i+0x24>
 8005a0e:	e0c1      	b.n	8005b94 <_printf_i+0x1a8>
 8005a10:	2a58      	cmp	r2, #88	; 0x58
 8005a12:	d100      	bne.n	8005a16 <_printf_i+0x2a>
 8005a14:	e08c      	b.n	8005b30 <_printf_i+0x144>
 8005a16:	0026      	movs	r6, r4
 8005a18:	3642      	adds	r6, #66	; 0x42
 8005a1a:	7032      	strb	r2, [r6, #0]
 8005a1c:	e022      	b.n	8005a64 <_printf_i+0x78>
 8005a1e:	0010      	movs	r0, r2
 8005a20:	3863      	subs	r0, #99	; 0x63
 8005a22:	2815      	cmp	r0, #21
 8005a24:	d8f7      	bhi.n	8005a16 <_printf_i+0x2a>
 8005a26:	f7fa fb75 	bl	8000114 <__gnu_thumb1_case_shi>
 8005a2a:	0016      	.short	0x0016
 8005a2c:	fff6001f 	.word	0xfff6001f
 8005a30:	fff6fff6 	.word	0xfff6fff6
 8005a34:	001ffff6 	.word	0x001ffff6
 8005a38:	fff6fff6 	.word	0xfff6fff6
 8005a3c:	fff6fff6 	.word	0xfff6fff6
 8005a40:	003600a8 	.word	0x003600a8
 8005a44:	fff6009a 	.word	0xfff6009a
 8005a48:	00b9fff6 	.word	0x00b9fff6
 8005a4c:	0036fff6 	.word	0x0036fff6
 8005a50:	fff6fff6 	.word	0xfff6fff6
 8005a54:	009e      	.short	0x009e
 8005a56:	0026      	movs	r6, r4
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	3642      	adds	r6, #66	; 0x42
 8005a5c:	1d11      	adds	r1, r2, #4
 8005a5e:	6019      	str	r1, [r3, #0]
 8005a60:	6813      	ldr	r3, [r2, #0]
 8005a62:	7033      	strb	r3, [r6, #0]
 8005a64:	2301      	movs	r3, #1
 8005a66:	e0a7      	b.n	8005bb8 <_printf_i+0x1cc>
 8005a68:	6808      	ldr	r0, [r1, #0]
 8005a6a:	6819      	ldr	r1, [r3, #0]
 8005a6c:	1d0a      	adds	r2, r1, #4
 8005a6e:	0605      	lsls	r5, r0, #24
 8005a70:	d50b      	bpl.n	8005a8a <_printf_i+0x9e>
 8005a72:	680d      	ldr	r5, [r1, #0]
 8005a74:	601a      	str	r2, [r3, #0]
 8005a76:	2d00      	cmp	r5, #0
 8005a78:	da03      	bge.n	8005a82 <_printf_i+0x96>
 8005a7a:	232d      	movs	r3, #45	; 0x2d
 8005a7c:	9a04      	ldr	r2, [sp, #16]
 8005a7e:	426d      	negs	r5, r5
 8005a80:	7013      	strb	r3, [r2, #0]
 8005a82:	4b61      	ldr	r3, [pc, #388]	; (8005c08 <_printf_i+0x21c>)
 8005a84:	270a      	movs	r7, #10
 8005a86:	9303      	str	r3, [sp, #12]
 8005a88:	e01b      	b.n	8005ac2 <_printf_i+0xd6>
 8005a8a:	680d      	ldr	r5, [r1, #0]
 8005a8c:	601a      	str	r2, [r3, #0]
 8005a8e:	0641      	lsls	r1, r0, #25
 8005a90:	d5f1      	bpl.n	8005a76 <_printf_i+0x8a>
 8005a92:	b22d      	sxth	r5, r5
 8005a94:	e7ef      	b.n	8005a76 <_printf_i+0x8a>
 8005a96:	680d      	ldr	r5, [r1, #0]
 8005a98:	6819      	ldr	r1, [r3, #0]
 8005a9a:	1d08      	adds	r0, r1, #4
 8005a9c:	6018      	str	r0, [r3, #0]
 8005a9e:	062e      	lsls	r6, r5, #24
 8005aa0:	d501      	bpl.n	8005aa6 <_printf_i+0xba>
 8005aa2:	680d      	ldr	r5, [r1, #0]
 8005aa4:	e003      	b.n	8005aae <_printf_i+0xc2>
 8005aa6:	066d      	lsls	r5, r5, #25
 8005aa8:	d5fb      	bpl.n	8005aa2 <_printf_i+0xb6>
 8005aaa:	680d      	ldr	r5, [r1, #0]
 8005aac:	b2ad      	uxth	r5, r5
 8005aae:	4b56      	ldr	r3, [pc, #344]	; (8005c08 <_printf_i+0x21c>)
 8005ab0:	2708      	movs	r7, #8
 8005ab2:	9303      	str	r3, [sp, #12]
 8005ab4:	2a6f      	cmp	r2, #111	; 0x6f
 8005ab6:	d000      	beq.n	8005aba <_printf_i+0xce>
 8005ab8:	3702      	adds	r7, #2
 8005aba:	0023      	movs	r3, r4
 8005abc:	2200      	movs	r2, #0
 8005abe:	3343      	adds	r3, #67	; 0x43
 8005ac0:	701a      	strb	r2, [r3, #0]
 8005ac2:	6863      	ldr	r3, [r4, #4]
 8005ac4:	60a3      	str	r3, [r4, #8]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	db03      	blt.n	8005ad2 <_printf_i+0xe6>
 8005aca:	2204      	movs	r2, #4
 8005acc:	6821      	ldr	r1, [r4, #0]
 8005ace:	4391      	bics	r1, r2
 8005ad0:	6021      	str	r1, [r4, #0]
 8005ad2:	2d00      	cmp	r5, #0
 8005ad4:	d102      	bne.n	8005adc <_printf_i+0xf0>
 8005ad6:	9e04      	ldr	r6, [sp, #16]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00c      	beq.n	8005af6 <_printf_i+0x10a>
 8005adc:	9e04      	ldr	r6, [sp, #16]
 8005ade:	0028      	movs	r0, r5
 8005ae0:	0039      	movs	r1, r7
 8005ae2:	f7fa fba7 	bl	8000234 <__aeabi_uidivmod>
 8005ae6:	9b03      	ldr	r3, [sp, #12]
 8005ae8:	3e01      	subs	r6, #1
 8005aea:	5c5b      	ldrb	r3, [r3, r1]
 8005aec:	7033      	strb	r3, [r6, #0]
 8005aee:	002b      	movs	r3, r5
 8005af0:	0005      	movs	r5, r0
 8005af2:	429f      	cmp	r7, r3
 8005af4:	d9f3      	bls.n	8005ade <_printf_i+0xf2>
 8005af6:	2f08      	cmp	r7, #8
 8005af8:	d109      	bne.n	8005b0e <_printf_i+0x122>
 8005afa:	6823      	ldr	r3, [r4, #0]
 8005afc:	07db      	lsls	r3, r3, #31
 8005afe:	d506      	bpl.n	8005b0e <_printf_i+0x122>
 8005b00:	6863      	ldr	r3, [r4, #4]
 8005b02:	6922      	ldr	r2, [r4, #16]
 8005b04:	4293      	cmp	r3, r2
 8005b06:	dc02      	bgt.n	8005b0e <_printf_i+0x122>
 8005b08:	2330      	movs	r3, #48	; 0x30
 8005b0a:	3e01      	subs	r6, #1
 8005b0c:	7033      	strb	r3, [r6, #0]
 8005b0e:	9b04      	ldr	r3, [sp, #16]
 8005b10:	1b9b      	subs	r3, r3, r6
 8005b12:	6123      	str	r3, [r4, #16]
 8005b14:	9b07      	ldr	r3, [sp, #28]
 8005b16:	0021      	movs	r1, r4
 8005b18:	9300      	str	r3, [sp, #0]
 8005b1a:	9805      	ldr	r0, [sp, #20]
 8005b1c:	9b06      	ldr	r3, [sp, #24]
 8005b1e:	aa09      	add	r2, sp, #36	; 0x24
 8005b20:	f7ff fef4 	bl	800590c <_printf_common>
 8005b24:	1c43      	adds	r3, r0, #1
 8005b26:	d14c      	bne.n	8005bc2 <_printf_i+0x1d6>
 8005b28:	2001      	movs	r0, #1
 8005b2a:	4240      	negs	r0, r0
 8005b2c:	b00b      	add	sp, #44	; 0x2c
 8005b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b30:	3145      	adds	r1, #69	; 0x45
 8005b32:	700a      	strb	r2, [r1, #0]
 8005b34:	4a34      	ldr	r2, [pc, #208]	; (8005c08 <_printf_i+0x21c>)
 8005b36:	9203      	str	r2, [sp, #12]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	6821      	ldr	r1, [r4, #0]
 8005b3c:	ca20      	ldmia	r2!, {r5}
 8005b3e:	601a      	str	r2, [r3, #0]
 8005b40:	0608      	lsls	r0, r1, #24
 8005b42:	d516      	bpl.n	8005b72 <_printf_i+0x186>
 8005b44:	07cb      	lsls	r3, r1, #31
 8005b46:	d502      	bpl.n	8005b4e <_printf_i+0x162>
 8005b48:	2320      	movs	r3, #32
 8005b4a:	4319      	orrs	r1, r3
 8005b4c:	6021      	str	r1, [r4, #0]
 8005b4e:	2710      	movs	r7, #16
 8005b50:	2d00      	cmp	r5, #0
 8005b52:	d1b2      	bne.n	8005aba <_printf_i+0xce>
 8005b54:	2320      	movs	r3, #32
 8005b56:	6822      	ldr	r2, [r4, #0]
 8005b58:	439a      	bics	r2, r3
 8005b5a:	6022      	str	r2, [r4, #0]
 8005b5c:	e7ad      	b.n	8005aba <_printf_i+0xce>
 8005b5e:	2220      	movs	r2, #32
 8005b60:	6809      	ldr	r1, [r1, #0]
 8005b62:	430a      	orrs	r2, r1
 8005b64:	6022      	str	r2, [r4, #0]
 8005b66:	0022      	movs	r2, r4
 8005b68:	2178      	movs	r1, #120	; 0x78
 8005b6a:	3245      	adds	r2, #69	; 0x45
 8005b6c:	7011      	strb	r1, [r2, #0]
 8005b6e:	4a27      	ldr	r2, [pc, #156]	; (8005c0c <_printf_i+0x220>)
 8005b70:	e7e1      	b.n	8005b36 <_printf_i+0x14a>
 8005b72:	0648      	lsls	r0, r1, #25
 8005b74:	d5e6      	bpl.n	8005b44 <_printf_i+0x158>
 8005b76:	b2ad      	uxth	r5, r5
 8005b78:	e7e4      	b.n	8005b44 <_printf_i+0x158>
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	680d      	ldr	r5, [r1, #0]
 8005b7e:	1d10      	adds	r0, r2, #4
 8005b80:	6949      	ldr	r1, [r1, #20]
 8005b82:	6018      	str	r0, [r3, #0]
 8005b84:	6813      	ldr	r3, [r2, #0]
 8005b86:	062e      	lsls	r6, r5, #24
 8005b88:	d501      	bpl.n	8005b8e <_printf_i+0x1a2>
 8005b8a:	6019      	str	r1, [r3, #0]
 8005b8c:	e002      	b.n	8005b94 <_printf_i+0x1a8>
 8005b8e:	066d      	lsls	r5, r5, #25
 8005b90:	d5fb      	bpl.n	8005b8a <_printf_i+0x19e>
 8005b92:	8019      	strh	r1, [r3, #0]
 8005b94:	2300      	movs	r3, #0
 8005b96:	9e04      	ldr	r6, [sp, #16]
 8005b98:	6123      	str	r3, [r4, #16]
 8005b9a:	e7bb      	b.n	8005b14 <_printf_i+0x128>
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	1d11      	adds	r1, r2, #4
 8005ba0:	6019      	str	r1, [r3, #0]
 8005ba2:	6816      	ldr	r6, [r2, #0]
 8005ba4:	2100      	movs	r1, #0
 8005ba6:	0030      	movs	r0, r6
 8005ba8:	6862      	ldr	r2, [r4, #4]
 8005baa:	f000 fb2f 	bl	800620c <memchr>
 8005bae:	2800      	cmp	r0, #0
 8005bb0:	d001      	beq.n	8005bb6 <_printf_i+0x1ca>
 8005bb2:	1b80      	subs	r0, r0, r6
 8005bb4:	6060      	str	r0, [r4, #4]
 8005bb6:	6863      	ldr	r3, [r4, #4]
 8005bb8:	6123      	str	r3, [r4, #16]
 8005bba:	2300      	movs	r3, #0
 8005bbc:	9a04      	ldr	r2, [sp, #16]
 8005bbe:	7013      	strb	r3, [r2, #0]
 8005bc0:	e7a8      	b.n	8005b14 <_printf_i+0x128>
 8005bc2:	6923      	ldr	r3, [r4, #16]
 8005bc4:	0032      	movs	r2, r6
 8005bc6:	9906      	ldr	r1, [sp, #24]
 8005bc8:	9805      	ldr	r0, [sp, #20]
 8005bca:	9d07      	ldr	r5, [sp, #28]
 8005bcc:	47a8      	blx	r5
 8005bce:	1c43      	adds	r3, r0, #1
 8005bd0:	d0aa      	beq.n	8005b28 <_printf_i+0x13c>
 8005bd2:	6823      	ldr	r3, [r4, #0]
 8005bd4:	079b      	lsls	r3, r3, #30
 8005bd6:	d415      	bmi.n	8005c04 <_printf_i+0x218>
 8005bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bda:	68e0      	ldr	r0, [r4, #12]
 8005bdc:	4298      	cmp	r0, r3
 8005bde:	daa5      	bge.n	8005b2c <_printf_i+0x140>
 8005be0:	0018      	movs	r0, r3
 8005be2:	e7a3      	b.n	8005b2c <_printf_i+0x140>
 8005be4:	0022      	movs	r2, r4
 8005be6:	2301      	movs	r3, #1
 8005be8:	9906      	ldr	r1, [sp, #24]
 8005bea:	9805      	ldr	r0, [sp, #20]
 8005bec:	9e07      	ldr	r6, [sp, #28]
 8005bee:	3219      	adds	r2, #25
 8005bf0:	47b0      	blx	r6
 8005bf2:	1c43      	adds	r3, r0, #1
 8005bf4:	d098      	beq.n	8005b28 <_printf_i+0x13c>
 8005bf6:	3501      	adds	r5, #1
 8005bf8:	68e3      	ldr	r3, [r4, #12]
 8005bfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bfc:	1a9b      	subs	r3, r3, r2
 8005bfe:	42ab      	cmp	r3, r5
 8005c00:	dcf0      	bgt.n	8005be4 <_printf_i+0x1f8>
 8005c02:	e7e9      	b.n	8005bd8 <_printf_i+0x1ec>
 8005c04:	2500      	movs	r5, #0
 8005c06:	e7f7      	b.n	8005bf8 <_printf_i+0x20c>
 8005c08:	0800670d 	.word	0x0800670d
 8005c0c:	0800671e 	.word	0x0800671e

08005c10 <_scanf_chars>:
 8005c10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c12:	0015      	movs	r5, r2
 8005c14:	688a      	ldr	r2, [r1, #8]
 8005c16:	000c      	movs	r4, r1
 8005c18:	9001      	str	r0, [sp, #4]
 8005c1a:	2a00      	cmp	r2, #0
 8005c1c:	d105      	bne.n	8005c2a <_scanf_chars+0x1a>
 8005c1e:	6989      	ldr	r1, [r1, #24]
 8005c20:	3201      	adds	r2, #1
 8005c22:	2900      	cmp	r1, #0
 8005c24:	d000      	beq.n	8005c28 <_scanf_chars+0x18>
 8005c26:	3a02      	subs	r2, #2
 8005c28:	60a2      	str	r2, [r4, #8]
 8005c2a:	6822      	ldr	r2, [r4, #0]
 8005c2c:	06d2      	lsls	r2, r2, #27
 8005c2e:	d403      	bmi.n	8005c38 <_scanf_chars+0x28>
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	1d11      	adds	r1, r2, #4
 8005c34:	6019      	str	r1, [r3, #0]
 8005c36:	6817      	ldr	r7, [r2, #0]
 8005c38:	2600      	movs	r6, #0
 8005c3a:	69a0      	ldr	r0, [r4, #24]
 8005c3c:	2800      	cmp	r0, #0
 8005c3e:	d013      	beq.n	8005c68 <_scanf_chars+0x58>
 8005c40:	2801      	cmp	r0, #1
 8005c42:	d108      	bne.n	8005c56 <_scanf_chars+0x46>
 8005c44:	682b      	ldr	r3, [r5, #0]
 8005c46:	6962      	ldr	r2, [r4, #20]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	5cd3      	ldrb	r3, [r2, r3]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d10b      	bne.n	8005c68 <_scanf_chars+0x58>
 8005c50:	2e00      	cmp	r6, #0
 8005c52:	d038      	beq.n	8005cc6 <_scanf_chars+0xb6>
 8005c54:	e026      	b.n	8005ca4 <_scanf_chars+0x94>
 8005c56:	2802      	cmp	r0, #2
 8005c58:	d124      	bne.n	8005ca4 <_scanf_chars+0x94>
 8005c5a:	682b      	ldr	r3, [r5, #0]
 8005c5c:	4a1a      	ldr	r2, [pc, #104]	; (8005cc8 <_scanf_chars+0xb8>)
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	5cd3      	ldrb	r3, [r2, r3]
 8005c62:	2208      	movs	r2, #8
 8005c64:	4213      	tst	r3, r2
 8005c66:	d11d      	bne.n	8005ca4 <_scanf_chars+0x94>
 8005c68:	2210      	movs	r2, #16
 8005c6a:	6823      	ldr	r3, [r4, #0]
 8005c6c:	3601      	adds	r6, #1
 8005c6e:	4213      	tst	r3, r2
 8005c70:	d103      	bne.n	8005c7a <_scanf_chars+0x6a>
 8005c72:	682b      	ldr	r3, [r5, #0]
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	703b      	strb	r3, [r7, #0]
 8005c78:	3701      	adds	r7, #1
 8005c7a:	682a      	ldr	r2, [r5, #0]
 8005c7c:	686b      	ldr	r3, [r5, #4]
 8005c7e:	3201      	adds	r2, #1
 8005c80:	602a      	str	r2, [r5, #0]
 8005c82:	68a2      	ldr	r2, [r4, #8]
 8005c84:	3b01      	subs	r3, #1
 8005c86:	3a01      	subs	r2, #1
 8005c88:	606b      	str	r3, [r5, #4]
 8005c8a:	60a2      	str	r2, [r4, #8]
 8005c8c:	2a00      	cmp	r2, #0
 8005c8e:	d009      	beq.n	8005ca4 <_scanf_chars+0x94>
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	dcd2      	bgt.n	8005c3a <_scanf_chars+0x2a>
 8005c94:	23c0      	movs	r3, #192	; 0xc0
 8005c96:	005b      	lsls	r3, r3, #1
 8005c98:	0029      	movs	r1, r5
 8005c9a:	58e3      	ldr	r3, [r4, r3]
 8005c9c:	9801      	ldr	r0, [sp, #4]
 8005c9e:	4798      	blx	r3
 8005ca0:	2800      	cmp	r0, #0
 8005ca2:	d0ca      	beq.n	8005c3a <_scanf_chars+0x2a>
 8005ca4:	6822      	ldr	r2, [r4, #0]
 8005ca6:	2310      	movs	r3, #16
 8005ca8:	0011      	movs	r1, r2
 8005caa:	4019      	ands	r1, r3
 8005cac:	421a      	tst	r2, r3
 8005cae:	d106      	bne.n	8005cbe <_scanf_chars+0xae>
 8005cb0:	68e3      	ldr	r3, [r4, #12]
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	60e3      	str	r3, [r4, #12]
 8005cb6:	69a3      	ldr	r3, [r4, #24]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d000      	beq.n	8005cbe <_scanf_chars+0xae>
 8005cbc:	7039      	strb	r1, [r7, #0]
 8005cbe:	2000      	movs	r0, #0
 8005cc0:	6923      	ldr	r3, [r4, #16]
 8005cc2:	199e      	adds	r6, r3, r6
 8005cc4:	6126      	str	r6, [r4, #16]
 8005cc6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005cc8:	0800674b 	.word	0x0800674b

08005ccc <_scanf_i>:
 8005ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cce:	000c      	movs	r4, r1
 8005cd0:	b08d      	sub	sp, #52	; 0x34
 8005cd2:	9302      	str	r3, [sp, #8]
 8005cd4:	4b79      	ldr	r3, [pc, #484]	; (8005ebc <_scanf_i+0x1f0>)
 8005cd6:	0016      	movs	r6, r2
 8005cd8:	9005      	str	r0, [sp, #20]
 8005cda:	aa09      	add	r2, sp, #36	; 0x24
 8005cdc:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005cde:	c223      	stmia	r2!, {r0, r1, r5}
 8005ce0:	4b77      	ldr	r3, [pc, #476]	; (8005ec0 <_scanf_i+0x1f4>)
 8005ce2:	9306      	str	r3, [sp, #24]
 8005ce4:	69a3      	ldr	r3, [r4, #24]
 8005ce6:	2b03      	cmp	r3, #3
 8005ce8:	d001      	beq.n	8005cee <_scanf_i+0x22>
 8005cea:	4b76      	ldr	r3, [pc, #472]	; (8005ec4 <_scanf_i+0x1f8>)
 8005cec:	9306      	str	r3, [sp, #24]
 8005cee:	22ae      	movs	r2, #174	; 0xae
 8005cf0:	2000      	movs	r0, #0
 8005cf2:	68a3      	ldr	r3, [r4, #8]
 8005cf4:	0052      	lsls	r2, r2, #1
 8005cf6:	1e59      	subs	r1, r3, #1
 8005cf8:	9004      	str	r0, [sp, #16]
 8005cfa:	4291      	cmp	r1, r2
 8005cfc:	d905      	bls.n	8005d0a <_scanf_i+0x3e>
 8005cfe:	3b5e      	subs	r3, #94	; 0x5e
 8005d00:	3bff      	subs	r3, #255	; 0xff
 8005d02:	9304      	str	r3, [sp, #16]
 8005d04:	235e      	movs	r3, #94	; 0x5e
 8005d06:	33ff      	adds	r3, #255	; 0xff
 8005d08:	60a3      	str	r3, [r4, #8]
 8005d0a:	0023      	movs	r3, r4
 8005d0c:	331c      	adds	r3, #28
 8005d0e:	9301      	str	r3, [sp, #4]
 8005d10:	23d0      	movs	r3, #208	; 0xd0
 8005d12:	2700      	movs	r7, #0
 8005d14:	6822      	ldr	r2, [r4, #0]
 8005d16:	011b      	lsls	r3, r3, #4
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	6023      	str	r3, [r4, #0]
 8005d1c:	9b01      	ldr	r3, [sp, #4]
 8005d1e:	9303      	str	r3, [sp, #12]
 8005d20:	6833      	ldr	r3, [r6, #0]
 8005d22:	a809      	add	r0, sp, #36	; 0x24
 8005d24:	7819      	ldrb	r1, [r3, #0]
 8005d26:	00bb      	lsls	r3, r7, #2
 8005d28:	2202      	movs	r2, #2
 8005d2a:	5818      	ldr	r0, [r3, r0]
 8005d2c:	f000 fa6e 	bl	800620c <memchr>
 8005d30:	2800      	cmp	r0, #0
 8005d32:	d02b      	beq.n	8005d8c <_scanf_i+0xc0>
 8005d34:	2f01      	cmp	r7, #1
 8005d36:	d162      	bne.n	8005dfe <_scanf_i+0x132>
 8005d38:	6863      	ldr	r3, [r4, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d106      	bne.n	8005d4c <_scanf_i+0x80>
 8005d3e:	3308      	adds	r3, #8
 8005d40:	6822      	ldr	r2, [r4, #0]
 8005d42:	6063      	str	r3, [r4, #4]
 8005d44:	33f9      	adds	r3, #249	; 0xf9
 8005d46:	33ff      	adds	r3, #255	; 0xff
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	6023      	str	r3, [r4, #0]
 8005d4c:	4b5e      	ldr	r3, [pc, #376]	; (8005ec8 <_scanf_i+0x1fc>)
 8005d4e:	6822      	ldr	r2, [r4, #0]
 8005d50:	4013      	ands	r3, r2
 8005d52:	6023      	str	r3, [r4, #0]
 8005d54:	68a3      	ldr	r3, [r4, #8]
 8005d56:	1e5a      	subs	r2, r3, #1
 8005d58:	60a2      	str	r2, [r4, #8]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d016      	beq.n	8005d8c <_scanf_i+0xc0>
 8005d5e:	6833      	ldr	r3, [r6, #0]
 8005d60:	1c5a      	adds	r2, r3, #1
 8005d62:	6032      	str	r2, [r6, #0]
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	9a03      	ldr	r2, [sp, #12]
 8005d68:	7013      	strb	r3, [r2, #0]
 8005d6a:	6873      	ldr	r3, [r6, #4]
 8005d6c:	1c55      	adds	r5, r2, #1
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	6073      	str	r3, [r6, #4]
 8005d72:	9503      	str	r5, [sp, #12]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	dc09      	bgt.n	8005d8c <_scanf_i+0xc0>
 8005d78:	23c0      	movs	r3, #192	; 0xc0
 8005d7a:	005b      	lsls	r3, r3, #1
 8005d7c:	58e3      	ldr	r3, [r4, r3]
 8005d7e:	0031      	movs	r1, r6
 8005d80:	9805      	ldr	r0, [sp, #20]
 8005d82:	9307      	str	r3, [sp, #28]
 8005d84:	4798      	blx	r3
 8005d86:	2800      	cmp	r0, #0
 8005d88:	d000      	beq.n	8005d8c <_scanf_i+0xc0>
 8005d8a:	e081      	b.n	8005e90 <_scanf_i+0x1c4>
 8005d8c:	3701      	adds	r7, #1
 8005d8e:	2f03      	cmp	r7, #3
 8005d90:	d1c6      	bne.n	8005d20 <_scanf_i+0x54>
 8005d92:	6863      	ldr	r3, [r4, #4]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d101      	bne.n	8005d9c <_scanf_i+0xd0>
 8005d98:	330a      	adds	r3, #10
 8005d9a:	6063      	str	r3, [r4, #4]
 8005d9c:	2110      	movs	r1, #16
 8005d9e:	2700      	movs	r7, #0
 8005da0:	6863      	ldr	r3, [r4, #4]
 8005da2:	6960      	ldr	r0, [r4, #20]
 8005da4:	1ac9      	subs	r1, r1, r3
 8005da6:	4b49      	ldr	r3, [pc, #292]	; (8005ecc <_scanf_i+0x200>)
 8005da8:	18c9      	adds	r1, r1, r3
 8005daa:	f000 f893 	bl	8005ed4 <__sccl>
 8005dae:	9d03      	ldr	r5, [sp, #12]
 8005db0:	68a3      	ldr	r3, [r4, #8]
 8005db2:	6822      	ldr	r2, [r4, #0]
 8005db4:	9303      	str	r3, [sp, #12]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d041      	beq.n	8005e3e <_scanf_i+0x172>
 8005dba:	6831      	ldr	r1, [r6, #0]
 8005dbc:	6963      	ldr	r3, [r4, #20]
 8005dbe:	7808      	ldrb	r0, [r1, #0]
 8005dc0:	5c1b      	ldrb	r3, [r3, r0]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d03b      	beq.n	8005e3e <_scanf_i+0x172>
 8005dc6:	2830      	cmp	r0, #48	; 0x30
 8005dc8:	d129      	bne.n	8005e1e <_scanf_i+0x152>
 8005dca:	2380      	movs	r3, #128	; 0x80
 8005dcc:	011b      	lsls	r3, r3, #4
 8005dce:	421a      	tst	r2, r3
 8005dd0:	d025      	beq.n	8005e1e <_scanf_i+0x152>
 8005dd2:	9b04      	ldr	r3, [sp, #16]
 8005dd4:	3701      	adds	r7, #1
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d005      	beq.n	8005de6 <_scanf_i+0x11a>
 8005dda:	001a      	movs	r2, r3
 8005ddc:	9b03      	ldr	r3, [sp, #12]
 8005dde:	3a01      	subs	r2, #1
 8005de0:	3301      	adds	r3, #1
 8005de2:	9204      	str	r2, [sp, #16]
 8005de4:	60a3      	str	r3, [r4, #8]
 8005de6:	6873      	ldr	r3, [r6, #4]
 8005de8:	3b01      	subs	r3, #1
 8005dea:	6073      	str	r3, [r6, #4]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	dd1d      	ble.n	8005e2c <_scanf_i+0x160>
 8005df0:	6833      	ldr	r3, [r6, #0]
 8005df2:	3301      	adds	r3, #1
 8005df4:	6033      	str	r3, [r6, #0]
 8005df6:	68a3      	ldr	r3, [r4, #8]
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	60a3      	str	r3, [r4, #8]
 8005dfc:	e7d8      	b.n	8005db0 <_scanf_i+0xe4>
 8005dfe:	2f02      	cmp	r7, #2
 8005e00:	d1a8      	bne.n	8005d54 <_scanf_i+0x88>
 8005e02:	21c0      	movs	r1, #192	; 0xc0
 8005e04:	2380      	movs	r3, #128	; 0x80
 8005e06:	6822      	ldr	r2, [r4, #0]
 8005e08:	00c9      	lsls	r1, r1, #3
 8005e0a:	4011      	ands	r1, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	4299      	cmp	r1, r3
 8005e10:	d1bf      	bne.n	8005d92 <_scanf_i+0xc6>
 8005e12:	3bf1      	subs	r3, #241	; 0xf1
 8005e14:	3bff      	subs	r3, #255	; 0xff
 8005e16:	6063      	str	r3, [r4, #4]
 8005e18:	33f0      	adds	r3, #240	; 0xf0
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	e799      	b.n	8005d52 <_scanf_i+0x86>
 8005e1e:	4b2c      	ldr	r3, [pc, #176]	; (8005ed0 <_scanf_i+0x204>)
 8005e20:	4013      	ands	r3, r2
 8005e22:	6023      	str	r3, [r4, #0]
 8005e24:	780b      	ldrb	r3, [r1, #0]
 8005e26:	702b      	strb	r3, [r5, #0]
 8005e28:	3501      	adds	r5, #1
 8005e2a:	e7dc      	b.n	8005de6 <_scanf_i+0x11a>
 8005e2c:	23c0      	movs	r3, #192	; 0xc0
 8005e2e:	005b      	lsls	r3, r3, #1
 8005e30:	58e3      	ldr	r3, [r4, r3]
 8005e32:	0031      	movs	r1, r6
 8005e34:	9805      	ldr	r0, [sp, #20]
 8005e36:	9303      	str	r3, [sp, #12]
 8005e38:	4798      	blx	r3
 8005e3a:	2800      	cmp	r0, #0
 8005e3c:	d0db      	beq.n	8005df6 <_scanf_i+0x12a>
 8005e3e:	6823      	ldr	r3, [r4, #0]
 8005e40:	05db      	lsls	r3, r3, #23
 8005e42:	d50e      	bpl.n	8005e62 <_scanf_i+0x196>
 8005e44:	9b01      	ldr	r3, [sp, #4]
 8005e46:	429d      	cmp	r5, r3
 8005e48:	d907      	bls.n	8005e5a <_scanf_i+0x18e>
 8005e4a:	23be      	movs	r3, #190	; 0xbe
 8005e4c:	3d01      	subs	r5, #1
 8005e4e:	005b      	lsls	r3, r3, #1
 8005e50:	0032      	movs	r2, r6
 8005e52:	7829      	ldrb	r1, [r5, #0]
 8005e54:	58e3      	ldr	r3, [r4, r3]
 8005e56:	9805      	ldr	r0, [sp, #20]
 8005e58:	4798      	blx	r3
 8005e5a:	9b01      	ldr	r3, [sp, #4]
 8005e5c:	2001      	movs	r0, #1
 8005e5e:	429d      	cmp	r5, r3
 8005e60:	d029      	beq.n	8005eb6 <_scanf_i+0x1ea>
 8005e62:	6821      	ldr	r1, [r4, #0]
 8005e64:	2310      	movs	r3, #16
 8005e66:	000a      	movs	r2, r1
 8005e68:	401a      	ands	r2, r3
 8005e6a:	4219      	tst	r1, r3
 8005e6c:	d11c      	bne.n	8005ea8 <_scanf_i+0x1dc>
 8005e6e:	702a      	strb	r2, [r5, #0]
 8005e70:	6863      	ldr	r3, [r4, #4]
 8005e72:	9901      	ldr	r1, [sp, #4]
 8005e74:	9805      	ldr	r0, [sp, #20]
 8005e76:	9e06      	ldr	r6, [sp, #24]
 8005e78:	47b0      	blx	r6
 8005e7a:	9b02      	ldr	r3, [sp, #8]
 8005e7c:	6821      	ldr	r1, [r4, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	068a      	lsls	r2, r1, #26
 8005e82:	d507      	bpl.n	8005e94 <_scanf_i+0x1c8>
 8005e84:	1d1a      	adds	r2, r3, #4
 8005e86:	9902      	ldr	r1, [sp, #8]
 8005e88:	600a      	str	r2, [r1, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	6018      	str	r0, [r3, #0]
 8005e8e:	e008      	b.n	8005ea2 <_scanf_i+0x1d6>
 8005e90:	2700      	movs	r7, #0
 8005e92:	e7d4      	b.n	8005e3e <_scanf_i+0x172>
 8005e94:	1d1a      	adds	r2, r3, #4
 8005e96:	07ce      	lsls	r6, r1, #31
 8005e98:	d5f5      	bpl.n	8005e86 <_scanf_i+0x1ba>
 8005e9a:	9902      	ldr	r1, [sp, #8]
 8005e9c:	600a      	str	r2, [r1, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	8018      	strh	r0, [r3, #0]
 8005ea2:	68e3      	ldr	r3, [r4, #12]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	60e3      	str	r3, [r4, #12]
 8005ea8:	2000      	movs	r0, #0
 8005eaa:	9b01      	ldr	r3, [sp, #4]
 8005eac:	1aed      	subs	r5, r5, r3
 8005eae:	6923      	ldr	r3, [r4, #16]
 8005eb0:	19ef      	adds	r7, r5, r7
 8005eb2:	19df      	adds	r7, r3, r7
 8005eb4:	6127      	str	r7, [r4, #16]
 8005eb6:	b00d      	add	sp, #52	; 0x34
 8005eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005eba:	46c0      	nop			; (mov r8, r8)
 8005ebc:	08006530 	.word	0x08006530
 8005ec0:	08006069 	.word	0x08006069
 8005ec4:	08006185 	.word	0x08006185
 8005ec8:	fffffaff 	.word	0xfffffaff
 8005ecc:	08006738 	.word	0x08006738
 8005ed0:	fffff6ff 	.word	0xfffff6ff

08005ed4 <__sccl>:
 8005ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ed6:	780b      	ldrb	r3, [r1, #0]
 8005ed8:	0004      	movs	r4, r0
 8005eda:	2b5e      	cmp	r3, #94	; 0x5e
 8005edc:	d00c      	beq.n	8005ef8 <__sccl+0x24>
 8005ede:	1c48      	adds	r0, r1, #1
 8005ee0:	2100      	movs	r1, #0
 8005ee2:	0022      	movs	r2, r4
 8005ee4:	1c65      	adds	r5, r4, #1
 8005ee6:	35ff      	adds	r5, #255	; 0xff
 8005ee8:	7011      	strb	r1, [r2, #0]
 8005eea:	3201      	adds	r2, #1
 8005eec:	42aa      	cmp	r2, r5
 8005eee:	d1fb      	bne.n	8005ee8 <__sccl+0x14>
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d105      	bne.n	8005f00 <__sccl+0x2c>
 8005ef4:	3801      	subs	r0, #1
 8005ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ef8:	784b      	ldrb	r3, [r1, #1]
 8005efa:	1c88      	adds	r0, r1, #2
 8005efc:	2101      	movs	r1, #1
 8005efe:	e7f0      	b.n	8005ee2 <__sccl+0xe>
 8005f00:	2201      	movs	r2, #1
 8005f02:	262d      	movs	r6, #45	; 0x2d
 8005f04:	4051      	eors	r1, r2
 8005f06:	0002      	movs	r2, r0
 8005f08:	54e1      	strb	r1, [r4, r3]
 8005f0a:	7815      	ldrb	r5, [r2, #0]
 8005f0c:	1c50      	adds	r0, r2, #1
 8005f0e:	2d2d      	cmp	r5, #45	; 0x2d
 8005f10:	d009      	beq.n	8005f26 <__sccl+0x52>
 8005f12:	2d5d      	cmp	r5, #93	; 0x5d
 8005f14:	d0ef      	beq.n	8005ef6 <__sccl+0x22>
 8005f16:	2d00      	cmp	r5, #0
 8005f18:	d101      	bne.n	8005f1e <__sccl+0x4a>
 8005f1a:	0010      	movs	r0, r2
 8005f1c:	e7eb      	b.n	8005ef6 <__sccl+0x22>
 8005f1e:	002b      	movs	r3, r5
 8005f20:	e7f1      	b.n	8005f06 <__sccl+0x32>
 8005f22:	0033      	movs	r3, r6
 8005f24:	e7ef      	b.n	8005f06 <__sccl+0x32>
 8005f26:	7855      	ldrb	r5, [r2, #1]
 8005f28:	2d5d      	cmp	r5, #93	; 0x5d
 8005f2a:	d0fa      	beq.n	8005f22 <__sccl+0x4e>
 8005f2c:	42ab      	cmp	r3, r5
 8005f2e:	dcf8      	bgt.n	8005f22 <__sccl+0x4e>
 8005f30:	0018      	movs	r0, r3
 8005f32:	3202      	adds	r2, #2
 8005f34:	3001      	adds	r0, #1
 8005f36:	5421      	strb	r1, [r4, r0]
 8005f38:	4285      	cmp	r5, r0
 8005f3a:	dcfb      	bgt.n	8005f34 <__sccl+0x60>
 8005f3c:	2000      	movs	r0, #0
 8005f3e:	1c5f      	adds	r7, r3, #1
 8005f40:	42ab      	cmp	r3, r5
 8005f42:	da01      	bge.n	8005f48 <__sccl+0x74>
 8005f44:	1ae8      	subs	r0, r5, r3
 8005f46:	3801      	subs	r0, #1
 8005f48:	183b      	adds	r3, r7, r0
 8005f4a:	e7de      	b.n	8005f0a <__sccl+0x36>

08005f4c <_strtol_l.constprop.0>:
 8005f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f4e:	b087      	sub	sp, #28
 8005f50:	001e      	movs	r6, r3
 8005f52:	9005      	str	r0, [sp, #20]
 8005f54:	9101      	str	r1, [sp, #4]
 8005f56:	9202      	str	r2, [sp, #8]
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d045      	beq.n	8005fe8 <_strtol_l.constprop.0+0x9c>
 8005f5c:	000b      	movs	r3, r1
 8005f5e:	2e24      	cmp	r6, #36	; 0x24
 8005f60:	d842      	bhi.n	8005fe8 <_strtol_l.constprop.0+0x9c>
 8005f62:	4a3f      	ldr	r2, [pc, #252]	; (8006060 <_strtol_l.constprop.0+0x114>)
 8005f64:	2108      	movs	r1, #8
 8005f66:	4694      	mov	ip, r2
 8005f68:	001a      	movs	r2, r3
 8005f6a:	4660      	mov	r0, ip
 8005f6c:	7814      	ldrb	r4, [r2, #0]
 8005f6e:	3301      	adds	r3, #1
 8005f70:	5d00      	ldrb	r0, [r0, r4]
 8005f72:	001d      	movs	r5, r3
 8005f74:	0007      	movs	r7, r0
 8005f76:	400f      	ands	r7, r1
 8005f78:	4208      	tst	r0, r1
 8005f7a:	d1f5      	bne.n	8005f68 <_strtol_l.constprop.0+0x1c>
 8005f7c:	2c2d      	cmp	r4, #45	; 0x2d
 8005f7e:	d13a      	bne.n	8005ff6 <_strtol_l.constprop.0+0xaa>
 8005f80:	2701      	movs	r7, #1
 8005f82:	781c      	ldrb	r4, [r3, #0]
 8005f84:	1c95      	adds	r5, r2, #2
 8005f86:	2e00      	cmp	r6, #0
 8005f88:	d065      	beq.n	8006056 <_strtol_l.constprop.0+0x10a>
 8005f8a:	2e10      	cmp	r6, #16
 8005f8c:	d109      	bne.n	8005fa2 <_strtol_l.constprop.0+0x56>
 8005f8e:	2c30      	cmp	r4, #48	; 0x30
 8005f90:	d107      	bne.n	8005fa2 <_strtol_l.constprop.0+0x56>
 8005f92:	2220      	movs	r2, #32
 8005f94:	782b      	ldrb	r3, [r5, #0]
 8005f96:	4393      	bics	r3, r2
 8005f98:	2b58      	cmp	r3, #88	; 0x58
 8005f9a:	d157      	bne.n	800604c <_strtol_l.constprop.0+0x100>
 8005f9c:	2610      	movs	r6, #16
 8005f9e:	786c      	ldrb	r4, [r5, #1]
 8005fa0:	3502      	adds	r5, #2
 8005fa2:	4b30      	ldr	r3, [pc, #192]	; (8006064 <_strtol_l.constprop.0+0x118>)
 8005fa4:	0031      	movs	r1, r6
 8005fa6:	18fb      	adds	r3, r7, r3
 8005fa8:	0018      	movs	r0, r3
 8005faa:	9303      	str	r3, [sp, #12]
 8005fac:	f7fa f942 	bl	8000234 <__aeabi_uidivmod>
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	4684      	mov	ip, r0
 8005fb6:	0018      	movs	r0, r3
 8005fb8:	9104      	str	r1, [sp, #16]
 8005fba:	4252      	negs	r2, r2
 8005fbc:	0021      	movs	r1, r4
 8005fbe:	3930      	subs	r1, #48	; 0x30
 8005fc0:	2909      	cmp	r1, #9
 8005fc2:	d81d      	bhi.n	8006000 <_strtol_l.constprop.0+0xb4>
 8005fc4:	000c      	movs	r4, r1
 8005fc6:	42a6      	cmp	r6, r4
 8005fc8:	dd28      	ble.n	800601c <_strtol_l.constprop.0+0xd0>
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	db24      	blt.n	8006018 <_strtol_l.constprop.0+0xcc>
 8005fce:	0013      	movs	r3, r2
 8005fd0:	4584      	cmp	ip, r0
 8005fd2:	d306      	bcc.n	8005fe2 <_strtol_l.constprop.0+0x96>
 8005fd4:	d102      	bne.n	8005fdc <_strtol_l.constprop.0+0x90>
 8005fd6:	9904      	ldr	r1, [sp, #16]
 8005fd8:	42a1      	cmp	r1, r4
 8005fda:	db02      	blt.n	8005fe2 <_strtol_l.constprop.0+0x96>
 8005fdc:	2301      	movs	r3, #1
 8005fde:	4370      	muls	r0, r6
 8005fe0:	1820      	adds	r0, r4, r0
 8005fe2:	782c      	ldrb	r4, [r5, #0]
 8005fe4:	3501      	adds	r5, #1
 8005fe6:	e7e9      	b.n	8005fbc <_strtol_l.constprop.0+0x70>
 8005fe8:	f7ff f8b8 	bl	800515c <__errno>
 8005fec:	2316      	movs	r3, #22
 8005fee:	6003      	str	r3, [r0, #0]
 8005ff0:	2000      	movs	r0, #0
 8005ff2:	b007      	add	sp, #28
 8005ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ff6:	2c2b      	cmp	r4, #43	; 0x2b
 8005ff8:	d1c5      	bne.n	8005f86 <_strtol_l.constprop.0+0x3a>
 8005ffa:	781c      	ldrb	r4, [r3, #0]
 8005ffc:	1c95      	adds	r5, r2, #2
 8005ffe:	e7c2      	b.n	8005f86 <_strtol_l.constprop.0+0x3a>
 8006000:	0021      	movs	r1, r4
 8006002:	3941      	subs	r1, #65	; 0x41
 8006004:	2919      	cmp	r1, #25
 8006006:	d801      	bhi.n	800600c <_strtol_l.constprop.0+0xc0>
 8006008:	3c37      	subs	r4, #55	; 0x37
 800600a:	e7dc      	b.n	8005fc6 <_strtol_l.constprop.0+0x7a>
 800600c:	0021      	movs	r1, r4
 800600e:	3961      	subs	r1, #97	; 0x61
 8006010:	2919      	cmp	r1, #25
 8006012:	d803      	bhi.n	800601c <_strtol_l.constprop.0+0xd0>
 8006014:	3c57      	subs	r4, #87	; 0x57
 8006016:	e7d6      	b.n	8005fc6 <_strtol_l.constprop.0+0x7a>
 8006018:	0013      	movs	r3, r2
 800601a:	e7e2      	b.n	8005fe2 <_strtol_l.constprop.0+0x96>
 800601c:	2b00      	cmp	r3, #0
 800601e:	da09      	bge.n	8006034 <_strtol_l.constprop.0+0xe8>
 8006020:	2322      	movs	r3, #34	; 0x22
 8006022:	9a05      	ldr	r2, [sp, #20]
 8006024:	9803      	ldr	r0, [sp, #12]
 8006026:	6013      	str	r3, [r2, #0]
 8006028:	9b02      	ldr	r3, [sp, #8]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d0e1      	beq.n	8005ff2 <_strtol_l.constprop.0+0xa6>
 800602e:	1e6b      	subs	r3, r5, #1
 8006030:	9301      	str	r3, [sp, #4]
 8006032:	e007      	b.n	8006044 <_strtol_l.constprop.0+0xf8>
 8006034:	2f00      	cmp	r7, #0
 8006036:	d000      	beq.n	800603a <_strtol_l.constprop.0+0xee>
 8006038:	4240      	negs	r0, r0
 800603a:	9a02      	ldr	r2, [sp, #8]
 800603c:	2a00      	cmp	r2, #0
 800603e:	d0d8      	beq.n	8005ff2 <_strtol_l.constprop.0+0xa6>
 8006040:	2b00      	cmp	r3, #0
 8006042:	d1f4      	bne.n	800602e <_strtol_l.constprop.0+0xe2>
 8006044:	9b02      	ldr	r3, [sp, #8]
 8006046:	9a01      	ldr	r2, [sp, #4]
 8006048:	601a      	str	r2, [r3, #0]
 800604a:	e7d2      	b.n	8005ff2 <_strtol_l.constprop.0+0xa6>
 800604c:	2430      	movs	r4, #48	; 0x30
 800604e:	2e00      	cmp	r6, #0
 8006050:	d1a7      	bne.n	8005fa2 <_strtol_l.constprop.0+0x56>
 8006052:	3608      	adds	r6, #8
 8006054:	e7a5      	b.n	8005fa2 <_strtol_l.constprop.0+0x56>
 8006056:	2c30      	cmp	r4, #48	; 0x30
 8006058:	d09b      	beq.n	8005f92 <_strtol_l.constprop.0+0x46>
 800605a:	260a      	movs	r6, #10
 800605c:	e7a1      	b.n	8005fa2 <_strtol_l.constprop.0+0x56>
 800605e:	46c0      	nop			; (mov r8, r8)
 8006060:	0800674b 	.word	0x0800674b
 8006064:	7fffffff 	.word	0x7fffffff

08006068 <_strtol_r>:
 8006068:	b510      	push	{r4, lr}
 800606a:	f7ff ff6f 	bl	8005f4c <_strtol_l.constprop.0>
 800606e:	bd10      	pop	{r4, pc}

08006070 <_strtoul_l.constprop.0>:
 8006070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006072:	b087      	sub	sp, #28
 8006074:	9202      	str	r2, [sp, #8]
 8006076:	4a42      	ldr	r2, [pc, #264]	; (8006180 <_strtoul_l.constprop.0+0x110>)
 8006078:	001e      	movs	r6, r3
 800607a:	9101      	str	r1, [sp, #4]
 800607c:	000b      	movs	r3, r1
 800607e:	4694      	mov	ip, r2
 8006080:	2108      	movs	r1, #8
 8006082:	9005      	str	r0, [sp, #20]
 8006084:	001a      	movs	r2, r3
 8006086:	4660      	mov	r0, ip
 8006088:	7814      	ldrb	r4, [r2, #0]
 800608a:	3301      	adds	r3, #1
 800608c:	5d00      	ldrb	r0, [r0, r4]
 800608e:	001d      	movs	r5, r3
 8006090:	0007      	movs	r7, r0
 8006092:	400f      	ands	r7, r1
 8006094:	4208      	tst	r0, r1
 8006096:	d1f5      	bne.n	8006084 <_strtoul_l.constprop.0+0x14>
 8006098:	2c2d      	cmp	r4, #45	; 0x2d
 800609a:	d13a      	bne.n	8006112 <_strtoul_l.constprop.0+0xa2>
 800609c:	2701      	movs	r7, #1
 800609e:	781c      	ldrb	r4, [r3, #0]
 80060a0:	1c95      	adds	r5, r2, #2
 80060a2:	2e00      	cmp	r6, #0
 80060a4:	d067      	beq.n	8006176 <_strtoul_l.constprop.0+0x106>
 80060a6:	2e10      	cmp	r6, #16
 80060a8:	d109      	bne.n	80060be <_strtoul_l.constprop.0+0x4e>
 80060aa:	2c30      	cmp	r4, #48	; 0x30
 80060ac:	d107      	bne.n	80060be <_strtoul_l.constprop.0+0x4e>
 80060ae:	2220      	movs	r2, #32
 80060b0:	782b      	ldrb	r3, [r5, #0]
 80060b2:	4393      	bics	r3, r2
 80060b4:	2b58      	cmp	r3, #88	; 0x58
 80060b6:	d159      	bne.n	800616c <_strtoul_l.constprop.0+0xfc>
 80060b8:	2610      	movs	r6, #16
 80060ba:	786c      	ldrb	r4, [r5, #1]
 80060bc:	3502      	adds	r5, #2
 80060be:	2001      	movs	r0, #1
 80060c0:	0031      	movs	r1, r6
 80060c2:	4240      	negs	r0, r0
 80060c4:	f7fa f830 	bl	8000128 <__udivsi3>
 80060c8:	9003      	str	r0, [sp, #12]
 80060ca:	2001      	movs	r0, #1
 80060cc:	0031      	movs	r1, r6
 80060ce:	4240      	negs	r0, r0
 80060d0:	f7fa f8b0 	bl	8000234 <__aeabi_uidivmod>
 80060d4:	2300      	movs	r3, #0
 80060d6:	9104      	str	r1, [sp, #16]
 80060d8:	2101      	movs	r1, #1
 80060da:	2201      	movs	r2, #1
 80060dc:	0018      	movs	r0, r3
 80060de:	468c      	mov	ip, r1
 80060e0:	4252      	negs	r2, r2
 80060e2:	0021      	movs	r1, r4
 80060e4:	3930      	subs	r1, #48	; 0x30
 80060e6:	2909      	cmp	r1, #9
 80060e8:	d818      	bhi.n	800611c <_strtoul_l.constprop.0+0xac>
 80060ea:	000c      	movs	r4, r1
 80060ec:	42a6      	cmp	r6, r4
 80060ee:	dd23      	ble.n	8006138 <_strtoul_l.constprop.0+0xc8>
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	db1f      	blt.n	8006134 <_strtoul_l.constprop.0+0xc4>
 80060f4:	9903      	ldr	r1, [sp, #12]
 80060f6:	0013      	movs	r3, r2
 80060f8:	4281      	cmp	r1, r0
 80060fa:	d307      	bcc.n	800610c <_strtoul_l.constprop.0+0x9c>
 80060fc:	d103      	bne.n	8006106 <_strtoul_l.constprop.0+0x96>
 80060fe:	9904      	ldr	r1, [sp, #16]
 8006100:	0013      	movs	r3, r2
 8006102:	42a1      	cmp	r1, r4
 8006104:	db02      	blt.n	800610c <_strtoul_l.constprop.0+0x9c>
 8006106:	4663      	mov	r3, ip
 8006108:	4370      	muls	r0, r6
 800610a:	1820      	adds	r0, r4, r0
 800610c:	782c      	ldrb	r4, [r5, #0]
 800610e:	3501      	adds	r5, #1
 8006110:	e7e7      	b.n	80060e2 <_strtoul_l.constprop.0+0x72>
 8006112:	2c2b      	cmp	r4, #43	; 0x2b
 8006114:	d1c5      	bne.n	80060a2 <_strtoul_l.constprop.0+0x32>
 8006116:	781c      	ldrb	r4, [r3, #0]
 8006118:	1c95      	adds	r5, r2, #2
 800611a:	e7c2      	b.n	80060a2 <_strtoul_l.constprop.0+0x32>
 800611c:	0021      	movs	r1, r4
 800611e:	3941      	subs	r1, #65	; 0x41
 8006120:	2919      	cmp	r1, #25
 8006122:	d801      	bhi.n	8006128 <_strtoul_l.constprop.0+0xb8>
 8006124:	3c37      	subs	r4, #55	; 0x37
 8006126:	e7e1      	b.n	80060ec <_strtoul_l.constprop.0+0x7c>
 8006128:	0021      	movs	r1, r4
 800612a:	3961      	subs	r1, #97	; 0x61
 800612c:	2919      	cmp	r1, #25
 800612e:	d803      	bhi.n	8006138 <_strtoul_l.constprop.0+0xc8>
 8006130:	3c57      	subs	r4, #87	; 0x57
 8006132:	e7db      	b.n	80060ec <_strtoul_l.constprop.0+0x7c>
 8006134:	0013      	movs	r3, r2
 8006136:	e7e9      	b.n	800610c <_strtoul_l.constprop.0+0x9c>
 8006138:	2b00      	cmp	r3, #0
 800613a:	da09      	bge.n	8006150 <_strtoul_l.constprop.0+0xe0>
 800613c:	2322      	movs	r3, #34	; 0x22
 800613e:	2001      	movs	r0, #1
 8006140:	9a05      	ldr	r2, [sp, #20]
 8006142:	4240      	negs	r0, r0
 8006144:	6013      	str	r3, [r2, #0]
 8006146:	9b02      	ldr	r3, [sp, #8]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d109      	bne.n	8006160 <_strtoul_l.constprop.0+0xf0>
 800614c:	b007      	add	sp, #28
 800614e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006150:	2f00      	cmp	r7, #0
 8006152:	d000      	beq.n	8006156 <_strtoul_l.constprop.0+0xe6>
 8006154:	4240      	negs	r0, r0
 8006156:	9a02      	ldr	r2, [sp, #8]
 8006158:	2a00      	cmp	r2, #0
 800615a:	d0f7      	beq.n	800614c <_strtoul_l.constprop.0+0xdc>
 800615c:	2b00      	cmp	r3, #0
 800615e:	d001      	beq.n	8006164 <_strtoul_l.constprop.0+0xf4>
 8006160:	1e6b      	subs	r3, r5, #1
 8006162:	9301      	str	r3, [sp, #4]
 8006164:	9b02      	ldr	r3, [sp, #8]
 8006166:	9a01      	ldr	r2, [sp, #4]
 8006168:	601a      	str	r2, [r3, #0]
 800616a:	e7ef      	b.n	800614c <_strtoul_l.constprop.0+0xdc>
 800616c:	2430      	movs	r4, #48	; 0x30
 800616e:	2e00      	cmp	r6, #0
 8006170:	d1a5      	bne.n	80060be <_strtoul_l.constprop.0+0x4e>
 8006172:	3608      	adds	r6, #8
 8006174:	e7a3      	b.n	80060be <_strtoul_l.constprop.0+0x4e>
 8006176:	2c30      	cmp	r4, #48	; 0x30
 8006178:	d099      	beq.n	80060ae <_strtoul_l.constprop.0+0x3e>
 800617a:	260a      	movs	r6, #10
 800617c:	e79f      	b.n	80060be <_strtoul_l.constprop.0+0x4e>
 800617e:	46c0      	nop			; (mov r8, r8)
 8006180:	0800674b 	.word	0x0800674b

08006184 <_strtoul_r>:
 8006184:	b510      	push	{r4, lr}
 8006186:	f7ff ff73 	bl	8006070 <_strtoul_l.constprop.0>
 800618a:	bd10      	pop	{r4, pc}

0800618c <__submore>:
 800618c:	000b      	movs	r3, r1
 800618e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006190:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8006192:	3344      	adds	r3, #68	; 0x44
 8006194:	000c      	movs	r4, r1
 8006196:	429d      	cmp	r5, r3
 8006198:	d11c      	bne.n	80061d4 <__submore+0x48>
 800619a:	2680      	movs	r6, #128	; 0x80
 800619c:	00f6      	lsls	r6, r6, #3
 800619e:	0031      	movs	r1, r6
 80061a0:	f000 f8c8 	bl	8006334 <_malloc_r>
 80061a4:	2800      	cmp	r0, #0
 80061a6:	d102      	bne.n	80061ae <__submore+0x22>
 80061a8:	2001      	movs	r0, #1
 80061aa:	4240      	negs	r0, r0
 80061ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80061ae:	0023      	movs	r3, r4
 80061b0:	6360      	str	r0, [r4, #52]	; 0x34
 80061b2:	63a6      	str	r6, [r4, #56]	; 0x38
 80061b4:	3346      	adds	r3, #70	; 0x46
 80061b6:	781a      	ldrb	r2, [r3, #0]
 80061b8:	4b10      	ldr	r3, [pc, #64]	; (80061fc <__submore+0x70>)
 80061ba:	54c2      	strb	r2, [r0, r3]
 80061bc:	0023      	movs	r3, r4
 80061be:	3345      	adds	r3, #69	; 0x45
 80061c0:	781a      	ldrb	r2, [r3, #0]
 80061c2:	4b0f      	ldr	r3, [pc, #60]	; (8006200 <__submore+0x74>)
 80061c4:	54c2      	strb	r2, [r0, r3]
 80061c6:	782a      	ldrb	r2, [r5, #0]
 80061c8:	4b0e      	ldr	r3, [pc, #56]	; (8006204 <__submore+0x78>)
 80061ca:	54c2      	strb	r2, [r0, r3]
 80061cc:	18c0      	adds	r0, r0, r3
 80061ce:	6020      	str	r0, [r4, #0]
 80061d0:	2000      	movs	r0, #0
 80061d2:	e7eb      	b.n	80061ac <__submore+0x20>
 80061d4:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 80061d6:	0029      	movs	r1, r5
 80061d8:	0073      	lsls	r3, r6, #1
 80061da:	001a      	movs	r2, r3
 80061dc:	9301      	str	r3, [sp, #4]
 80061de:	f000 f91f 	bl	8006420 <_realloc_r>
 80061e2:	1e05      	subs	r5, r0, #0
 80061e4:	d0e0      	beq.n	80061a8 <__submore+0x1c>
 80061e6:	1987      	adds	r7, r0, r6
 80061e8:	0001      	movs	r1, r0
 80061ea:	0032      	movs	r2, r6
 80061ec:	0038      	movs	r0, r7
 80061ee:	f000 f818 	bl	8006222 <memcpy>
 80061f2:	9b01      	ldr	r3, [sp, #4]
 80061f4:	6027      	str	r7, [r4, #0]
 80061f6:	6365      	str	r5, [r4, #52]	; 0x34
 80061f8:	63a3      	str	r3, [r4, #56]	; 0x38
 80061fa:	e7e9      	b.n	80061d0 <__submore+0x44>
 80061fc:	000003ff 	.word	0x000003ff
 8006200:	000003fe 	.word	0x000003fe
 8006204:	000003fd 	.word	0x000003fd

08006208 <__retarget_lock_acquire_recursive>:
 8006208:	4770      	bx	lr

0800620a <__retarget_lock_release_recursive>:
 800620a:	4770      	bx	lr

0800620c <memchr>:
 800620c:	b2c9      	uxtb	r1, r1
 800620e:	1882      	adds	r2, r0, r2
 8006210:	4290      	cmp	r0, r2
 8006212:	d101      	bne.n	8006218 <memchr+0xc>
 8006214:	2000      	movs	r0, #0
 8006216:	4770      	bx	lr
 8006218:	7803      	ldrb	r3, [r0, #0]
 800621a:	428b      	cmp	r3, r1
 800621c:	d0fb      	beq.n	8006216 <memchr+0xa>
 800621e:	3001      	adds	r0, #1
 8006220:	e7f6      	b.n	8006210 <memchr+0x4>

08006222 <memcpy>:
 8006222:	2300      	movs	r3, #0
 8006224:	b510      	push	{r4, lr}
 8006226:	429a      	cmp	r2, r3
 8006228:	d100      	bne.n	800622c <memcpy+0xa>
 800622a:	bd10      	pop	{r4, pc}
 800622c:	5ccc      	ldrb	r4, [r1, r3]
 800622e:	54c4      	strb	r4, [r0, r3]
 8006230:	3301      	adds	r3, #1
 8006232:	e7f8      	b.n	8006226 <memcpy+0x4>

08006234 <memmove>:
 8006234:	b510      	push	{r4, lr}
 8006236:	4288      	cmp	r0, r1
 8006238:	d902      	bls.n	8006240 <memmove+0xc>
 800623a:	188b      	adds	r3, r1, r2
 800623c:	4298      	cmp	r0, r3
 800623e:	d303      	bcc.n	8006248 <memmove+0x14>
 8006240:	2300      	movs	r3, #0
 8006242:	e007      	b.n	8006254 <memmove+0x20>
 8006244:	5c8b      	ldrb	r3, [r1, r2]
 8006246:	5483      	strb	r3, [r0, r2]
 8006248:	3a01      	subs	r2, #1
 800624a:	d2fb      	bcs.n	8006244 <memmove+0x10>
 800624c:	bd10      	pop	{r4, pc}
 800624e:	5ccc      	ldrb	r4, [r1, r3]
 8006250:	54c4      	strb	r4, [r0, r3]
 8006252:	3301      	adds	r3, #1
 8006254:	429a      	cmp	r2, r3
 8006256:	d1fa      	bne.n	800624e <memmove+0x1a>
 8006258:	e7f8      	b.n	800624c <memmove+0x18>
	...

0800625c <_free_r>:
 800625c:	b570      	push	{r4, r5, r6, lr}
 800625e:	0005      	movs	r5, r0
 8006260:	2900      	cmp	r1, #0
 8006262:	d010      	beq.n	8006286 <_free_r+0x2a>
 8006264:	1f0c      	subs	r4, r1, #4
 8006266:	6823      	ldr	r3, [r4, #0]
 8006268:	2b00      	cmp	r3, #0
 800626a:	da00      	bge.n	800626e <_free_r+0x12>
 800626c:	18e4      	adds	r4, r4, r3
 800626e:	0028      	movs	r0, r5
 8006270:	f000 f918 	bl	80064a4 <__malloc_lock>
 8006274:	4a1d      	ldr	r2, [pc, #116]	; (80062ec <_free_r+0x90>)
 8006276:	6813      	ldr	r3, [r2, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d105      	bne.n	8006288 <_free_r+0x2c>
 800627c:	6063      	str	r3, [r4, #4]
 800627e:	6014      	str	r4, [r2, #0]
 8006280:	0028      	movs	r0, r5
 8006282:	f000 f917 	bl	80064b4 <__malloc_unlock>
 8006286:	bd70      	pop	{r4, r5, r6, pc}
 8006288:	42a3      	cmp	r3, r4
 800628a:	d908      	bls.n	800629e <_free_r+0x42>
 800628c:	6821      	ldr	r1, [r4, #0]
 800628e:	1860      	adds	r0, r4, r1
 8006290:	4283      	cmp	r3, r0
 8006292:	d1f3      	bne.n	800627c <_free_r+0x20>
 8006294:	6818      	ldr	r0, [r3, #0]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	1841      	adds	r1, r0, r1
 800629a:	6021      	str	r1, [r4, #0]
 800629c:	e7ee      	b.n	800627c <_free_r+0x20>
 800629e:	001a      	movs	r2, r3
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d001      	beq.n	80062aa <_free_r+0x4e>
 80062a6:	42a3      	cmp	r3, r4
 80062a8:	d9f9      	bls.n	800629e <_free_r+0x42>
 80062aa:	6811      	ldr	r1, [r2, #0]
 80062ac:	1850      	adds	r0, r2, r1
 80062ae:	42a0      	cmp	r0, r4
 80062b0:	d10b      	bne.n	80062ca <_free_r+0x6e>
 80062b2:	6820      	ldr	r0, [r4, #0]
 80062b4:	1809      	adds	r1, r1, r0
 80062b6:	1850      	adds	r0, r2, r1
 80062b8:	6011      	str	r1, [r2, #0]
 80062ba:	4283      	cmp	r3, r0
 80062bc:	d1e0      	bne.n	8006280 <_free_r+0x24>
 80062be:	6818      	ldr	r0, [r3, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	1841      	adds	r1, r0, r1
 80062c4:	6011      	str	r1, [r2, #0]
 80062c6:	6053      	str	r3, [r2, #4]
 80062c8:	e7da      	b.n	8006280 <_free_r+0x24>
 80062ca:	42a0      	cmp	r0, r4
 80062cc:	d902      	bls.n	80062d4 <_free_r+0x78>
 80062ce:	230c      	movs	r3, #12
 80062d0:	602b      	str	r3, [r5, #0]
 80062d2:	e7d5      	b.n	8006280 <_free_r+0x24>
 80062d4:	6821      	ldr	r1, [r4, #0]
 80062d6:	1860      	adds	r0, r4, r1
 80062d8:	4283      	cmp	r3, r0
 80062da:	d103      	bne.n	80062e4 <_free_r+0x88>
 80062dc:	6818      	ldr	r0, [r3, #0]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	1841      	adds	r1, r0, r1
 80062e2:	6021      	str	r1, [r4, #0]
 80062e4:	6063      	str	r3, [r4, #4]
 80062e6:	6054      	str	r4, [r2, #4]
 80062e8:	e7ca      	b.n	8006280 <_free_r+0x24>
 80062ea:	46c0      	nop			; (mov r8, r8)
 80062ec:	200004b8 	.word	0x200004b8

080062f0 <sbrk_aligned>:
 80062f0:	b570      	push	{r4, r5, r6, lr}
 80062f2:	4e0f      	ldr	r6, [pc, #60]	; (8006330 <sbrk_aligned+0x40>)
 80062f4:	000d      	movs	r5, r1
 80062f6:	6831      	ldr	r1, [r6, #0]
 80062f8:	0004      	movs	r4, r0
 80062fa:	2900      	cmp	r1, #0
 80062fc:	d102      	bne.n	8006304 <sbrk_aligned+0x14>
 80062fe:	f000 f8bf 	bl	8006480 <_sbrk_r>
 8006302:	6030      	str	r0, [r6, #0]
 8006304:	0029      	movs	r1, r5
 8006306:	0020      	movs	r0, r4
 8006308:	f000 f8ba 	bl	8006480 <_sbrk_r>
 800630c:	1c43      	adds	r3, r0, #1
 800630e:	d00a      	beq.n	8006326 <sbrk_aligned+0x36>
 8006310:	2303      	movs	r3, #3
 8006312:	1cc5      	adds	r5, r0, #3
 8006314:	439d      	bics	r5, r3
 8006316:	42a8      	cmp	r0, r5
 8006318:	d007      	beq.n	800632a <sbrk_aligned+0x3a>
 800631a:	1a29      	subs	r1, r5, r0
 800631c:	0020      	movs	r0, r4
 800631e:	f000 f8af 	bl	8006480 <_sbrk_r>
 8006322:	1c43      	adds	r3, r0, #1
 8006324:	d101      	bne.n	800632a <sbrk_aligned+0x3a>
 8006326:	2501      	movs	r5, #1
 8006328:	426d      	negs	r5, r5
 800632a:	0028      	movs	r0, r5
 800632c:	bd70      	pop	{r4, r5, r6, pc}
 800632e:	46c0      	nop			; (mov r8, r8)
 8006330:	200004bc 	.word	0x200004bc

08006334 <_malloc_r>:
 8006334:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006336:	2203      	movs	r2, #3
 8006338:	1ccb      	adds	r3, r1, #3
 800633a:	4393      	bics	r3, r2
 800633c:	3308      	adds	r3, #8
 800633e:	0006      	movs	r6, r0
 8006340:	001f      	movs	r7, r3
 8006342:	2b0c      	cmp	r3, #12
 8006344:	d232      	bcs.n	80063ac <_malloc_r+0x78>
 8006346:	270c      	movs	r7, #12
 8006348:	42b9      	cmp	r1, r7
 800634a:	d831      	bhi.n	80063b0 <_malloc_r+0x7c>
 800634c:	0030      	movs	r0, r6
 800634e:	f000 f8a9 	bl	80064a4 <__malloc_lock>
 8006352:	4d32      	ldr	r5, [pc, #200]	; (800641c <_malloc_r+0xe8>)
 8006354:	682b      	ldr	r3, [r5, #0]
 8006356:	001c      	movs	r4, r3
 8006358:	2c00      	cmp	r4, #0
 800635a:	d12e      	bne.n	80063ba <_malloc_r+0x86>
 800635c:	0039      	movs	r1, r7
 800635e:	0030      	movs	r0, r6
 8006360:	f7ff ffc6 	bl	80062f0 <sbrk_aligned>
 8006364:	0004      	movs	r4, r0
 8006366:	1c43      	adds	r3, r0, #1
 8006368:	d11e      	bne.n	80063a8 <_malloc_r+0x74>
 800636a:	682c      	ldr	r4, [r5, #0]
 800636c:	0025      	movs	r5, r4
 800636e:	2d00      	cmp	r5, #0
 8006370:	d14a      	bne.n	8006408 <_malloc_r+0xd4>
 8006372:	6823      	ldr	r3, [r4, #0]
 8006374:	0029      	movs	r1, r5
 8006376:	18e3      	adds	r3, r4, r3
 8006378:	0030      	movs	r0, r6
 800637a:	9301      	str	r3, [sp, #4]
 800637c:	f000 f880 	bl	8006480 <_sbrk_r>
 8006380:	9b01      	ldr	r3, [sp, #4]
 8006382:	4283      	cmp	r3, r0
 8006384:	d143      	bne.n	800640e <_malloc_r+0xda>
 8006386:	6823      	ldr	r3, [r4, #0]
 8006388:	3703      	adds	r7, #3
 800638a:	1aff      	subs	r7, r7, r3
 800638c:	2303      	movs	r3, #3
 800638e:	439f      	bics	r7, r3
 8006390:	3708      	adds	r7, #8
 8006392:	2f0c      	cmp	r7, #12
 8006394:	d200      	bcs.n	8006398 <_malloc_r+0x64>
 8006396:	270c      	movs	r7, #12
 8006398:	0039      	movs	r1, r7
 800639a:	0030      	movs	r0, r6
 800639c:	f7ff ffa8 	bl	80062f0 <sbrk_aligned>
 80063a0:	1c43      	adds	r3, r0, #1
 80063a2:	d034      	beq.n	800640e <_malloc_r+0xda>
 80063a4:	6823      	ldr	r3, [r4, #0]
 80063a6:	19df      	adds	r7, r3, r7
 80063a8:	6027      	str	r7, [r4, #0]
 80063aa:	e013      	b.n	80063d4 <_malloc_r+0xa0>
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	dacb      	bge.n	8006348 <_malloc_r+0x14>
 80063b0:	230c      	movs	r3, #12
 80063b2:	2500      	movs	r5, #0
 80063b4:	6033      	str	r3, [r6, #0]
 80063b6:	0028      	movs	r0, r5
 80063b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80063ba:	6822      	ldr	r2, [r4, #0]
 80063bc:	1bd1      	subs	r1, r2, r7
 80063be:	d420      	bmi.n	8006402 <_malloc_r+0xce>
 80063c0:	290b      	cmp	r1, #11
 80063c2:	d917      	bls.n	80063f4 <_malloc_r+0xc0>
 80063c4:	19e2      	adds	r2, r4, r7
 80063c6:	6027      	str	r7, [r4, #0]
 80063c8:	42a3      	cmp	r3, r4
 80063ca:	d111      	bne.n	80063f0 <_malloc_r+0xbc>
 80063cc:	602a      	str	r2, [r5, #0]
 80063ce:	6863      	ldr	r3, [r4, #4]
 80063d0:	6011      	str	r1, [r2, #0]
 80063d2:	6053      	str	r3, [r2, #4]
 80063d4:	0030      	movs	r0, r6
 80063d6:	0025      	movs	r5, r4
 80063d8:	f000 f86c 	bl	80064b4 <__malloc_unlock>
 80063dc:	2207      	movs	r2, #7
 80063de:	350b      	adds	r5, #11
 80063e0:	1d23      	adds	r3, r4, #4
 80063e2:	4395      	bics	r5, r2
 80063e4:	1aea      	subs	r2, r5, r3
 80063e6:	429d      	cmp	r5, r3
 80063e8:	d0e5      	beq.n	80063b6 <_malloc_r+0x82>
 80063ea:	1b5b      	subs	r3, r3, r5
 80063ec:	50a3      	str	r3, [r4, r2]
 80063ee:	e7e2      	b.n	80063b6 <_malloc_r+0x82>
 80063f0:	605a      	str	r2, [r3, #4]
 80063f2:	e7ec      	b.n	80063ce <_malloc_r+0x9a>
 80063f4:	6862      	ldr	r2, [r4, #4]
 80063f6:	42a3      	cmp	r3, r4
 80063f8:	d101      	bne.n	80063fe <_malloc_r+0xca>
 80063fa:	602a      	str	r2, [r5, #0]
 80063fc:	e7ea      	b.n	80063d4 <_malloc_r+0xa0>
 80063fe:	605a      	str	r2, [r3, #4]
 8006400:	e7e8      	b.n	80063d4 <_malloc_r+0xa0>
 8006402:	0023      	movs	r3, r4
 8006404:	6864      	ldr	r4, [r4, #4]
 8006406:	e7a7      	b.n	8006358 <_malloc_r+0x24>
 8006408:	002c      	movs	r4, r5
 800640a:	686d      	ldr	r5, [r5, #4]
 800640c:	e7af      	b.n	800636e <_malloc_r+0x3a>
 800640e:	230c      	movs	r3, #12
 8006410:	0030      	movs	r0, r6
 8006412:	6033      	str	r3, [r6, #0]
 8006414:	f000 f84e 	bl	80064b4 <__malloc_unlock>
 8006418:	e7cd      	b.n	80063b6 <_malloc_r+0x82>
 800641a:	46c0      	nop			; (mov r8, r8)
 800641c:	200004b8 	.word	0x200004b8

08006420 <_realloc_r>:
 8006420:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006422:	0007      	movs	r7, r0
 8006424:	000e      	movs	r6, r1
 8006426:	0014      	movs	r4, r2
 8006428:	2900      	cmp	r1, #0
 800642a:	d105      	bne.n	8006438 <_realloc_r+0x18>
 800642c:	0011      	movs	r1, r2
 800642e:	f7ff ff81 	bl	8006334 <_malloc_r>
 8006432:	0005      	movs	r5, r0
 8006434:	0028      	movs	r0, r5
 8006436:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006438:	2a00      	cmp	r2, #0
 800643a:	d103      	bne.n	8006444 <_realloc_r+0x24>
 800643c:	f7ff ff0e 	bl	800625c <_free_r>
 8006440:	0025      	movs	r5, r4
 8006442:	e7f7      	b.n	8006434 <_realloc_r+0x14>
 8006444:	f000 f83e 	bl	80064c4 <_malloc_usable_size_r>
 8006448:	9001      	str	r0, [sp, #4]
 800644a:	4284      	cmp	r4, r0
 800644c:	d803      	bhi.n	8006456 <_realloc_r+0x36>
 800644e:	0035      	movs	r5, r6
 8006450:	0843      	lsrs	r3, r0, #1
 8006452:	42a3      	cmp	r3, r4
 8006454:	d3ee      	bcc.n	8006434 <_realloc_r+0x14>
 8006456:	0021      	movs	r1, r4
 8006458:	0038      	movs	r0, r7
 800645a:	f7ff ff6b 	bl	8006334 <_malloc_r>
 800645e:	1e05      	subs	r5, r0, #0
 8006460:	d0e8      	beq.n	8006434 <_realloc_r+0x14>
 8006462:	9b01      	ldr	r3, [sp, #4]
 8006464:	0022      	movs	r2, r4
 8006466:	429c      	cmp	r4, r3
 8006468:	d900      	bls.n	800646c <_realloc_r+0x4c>
 800646a:	001a      	movs	r2, r3
 800646c:	0031      	movs	r1, r6
 800646e:	0028      	movs	r0, r5
 8006470:	f7ff fed7 	bl	8006222 <memcpy>
 8006474:	0031      	movs	r1, r6
 8006476:	0038      	movs	r0, r7
 8006478:	f7ff fef0 	bl	800625c <_free_r>
 800647c:	e7da      	b.n	8006434 <_realloc_r+0x14>
	...

08006480 <_sbrk_r>:
 8006480:	2300      	movs	r3, #0
 8006482:	b570      	push	{r4, r5, r6, lr}
 8006484:	4d06      	ldr	r5, [pc, #24]	; (80064a0 <_sbrk_r+0x20>)
 8006486:	0004      	movs	r4, r0
 8006488:	0008      	movs	r0, r1
 800648a:	602b      	str	r3, [r5, #0]
 800648c:	f7fa fe74 	bl	8001178 <_sbrk>
 8006490:	1c43      	adds	r3, r0, #1
 8006492:	d103      	bne.n	800649c <_sbrk_r+0x1c>
 8006494:	682b      	ldr	r3, [r5, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d000      	beq.n	800649c <_sbrk_r+0x1c>
 800649a:	6023      	str	r3, [r4, #0]
 800649c:	bd70      	pop	{r4, r5, r6, pc}
 800649e:	46c0      	nop			; (mov r8, r8)
 80064a0:	200004b0 	.word	0x200004b0

080064a4 <__malloc_lock>:
 80064a4:	b510      	push	{r4, lr}
 80064a6:	4802      	ldr	r0, [pc, #8]	; (80064b0 <__malloc_lock+0xc>)
 80064a8:	f7ff feae 	bl	8006208 <__retarget_lock_acquire_recursive>
 80064ac:	bd10      	pop	{r4, pc}
 80064ae:	46c0      	nop			; (mov r8, r8)
 80064b0:	200004b4 	.word	0x200004b4

080064b4 <__malloc_unlock>:
 80064b4:	b510      	push	{r4, lr}
 80064b6:	4802      	ldr	r0, [pc, #8]	; (80064c0 <__malloc_unlock+0xc>)
 80064b8:	f7ff fea7 	bl	800620a <__retarget_lock_release_recursive>
 80064bc:	bd10      	pop	{r4, pc}
 80064be:	46c0      	nop			; (mov r8, r8)
 80064c0:	200004b4 	.word	0x200004b4

080064c4 <_malloc_usable_size_r>:
 80064c4:	1f0b      	subs	r3, r1, #4
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	1f18      	subs	r0, r3, #4
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	da01      	bge.n	80064d2 <_malloc_usable_size_r+0xe>
 80064ce:	580b      	ldr	r3, [r1, r0]
 80064d0:	18c0      	adds	r0, r0, r3
 80064d2:	4770      	bx	lr

080064d4 <_init>:
 80064d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064d6:	46c0      	nop			; (mov r8, r8)
 80064d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064da:	bc08      	pop	{r3}
 80064dc:	469e      	mov	lr, r3
 80064de:	4770      	bx	lr

080064e0 <_fini>:
 80064e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064e2:	46c0      	nop			; (mov r8, r8)
 80064e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064e6:	bc08      	pop	{r3}
 80064e8:	469e      	mov	lr, r3
 80064ea:	4770      	bx	lr
