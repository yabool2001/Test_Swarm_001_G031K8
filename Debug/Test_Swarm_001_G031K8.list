
Test_Swarm_001_G031K8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007288  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  08007344  08007344  00017344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077ec  080077ec  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  080077ec  080077ec  000177ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077f4  080077f4  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077f4  080077f4  000177f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077f8  080077f8  000177f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  080077fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f8  20000100  080078fc  00020100  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f8  080078fc  000204f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001531a  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b15  00000000  00000000  00035442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001248  00000000  00000000  00037f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001130  00000000  00000000  000391a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188b8  00000000  00000000  0003a2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014f81  00000000  00000000  00052b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b26c  00000000  00000000  00067b09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00102d75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050d4  00000000  00000000  00102dc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000100 	.word	0x20000100
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800732c 	.word	0x0800732c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000104 	.word	0x20000104
 8000100:	0800732c 	.word	0x0800732c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	469b      	mov	fp, r3
 800048a:	d433      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048c:	465a      	mov	r2, fp
 800048e:	4653      	mov	r3, sl
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83a      	bhi.n	8000516 <__udivmoddi4+0xc2>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e078      	b.n	8000598 <__udivmoddi4+0x144>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e075      	b.n	800059e <__udivmoddi4+0x14a>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e028      	b.n	800051e <__udivmoddi4+0xca>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	2320      	movs	r3, #32
 80004f8:	1a9b      	subs	r3, r3, r2
 80004fa:	4652      	mov	r2, sl
 80004fc:	40da      	lsrs	r2, r3
 80004fe:	4641      	mov	r1, r8
 8000500:	0013      	movs	r3, r2
 8000502:	464a      	mov	r2, r9
 8000504:	408a      	lsls	r2, r1
 8000506:	0017      	movs	r7, r2
 8000508:	4642      	mov	r2, r8
 800050a:	431f      	orrs	r7, r3
 800050c:	4653      	mov	r3, sl
 800050e:	4093      	lsls	r3, r2
 8000510:	001e      	movs	r6, r3
 8000512:	42af      	cmp	r7, r5
 8000514:	d9c4      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000516:	2200      	movs	r2, #0
 8000518:	2300      	movs	r3, #0
 800051a:	9200      	str	r2, [sp, #0]
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	4643      	mov	r3, r8
 8000520:	2b00      	cmp	r3, #0
 8000522:	d0d9      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000524:	07fb      	lsls	r3, r7, #31
 8000526:	0872      	lsrs	r2, r6, #1
 8000528:	431a      	orrs	r2, r3
 800052a:	4646      	mov	r6, r8
 800052c:	087b      	lsrs	r3, r7, #1
 800052e:	e00e      	b.n	800054e <__udivmoddi4+0xfa>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d101      	bne.n	8000538 <__udivmoddi4+0xe4>
 8000534:	42a2      	cmp	r2, r4
 8000536:	d80c      	bhi.n	8000552 <__udivmoddi4+0xfe>
 8000538:	1aa4      	subs	r4, r4, r2
 800053a:	419d      	sbcs	r5, r3
 800053c:	2001      	movs	r0, #1
 800053e:	1924      	adds	r4, r4, r4
 8000540:	416d      	adcs	r5, r5
 8000542:	2100      	movs	r1, #0
 8000544:	3e01      	subs	r6, #1
 8000546:	1824      	adds	r4, r4, r0
 8000548:	414d      	adcs	r5, r1
 800054a:	2e00      	cmp	r6, #0
 800054c:	d006      	beq.n	800055c <__udivmoddi4+0x108>
 800054e:	42ab      	cmp	r3, r5
 8000550:	d9ee      	bls.n	8000530 <__udivmoddi4+0xdc>
 8000552:	3e01      	subs	r6, #1
 8000554:	1924      	adds	r4, r4, r4
 8000556:	416d      	adcs	r5, r5
 8000558:	2e00      	cmp	r6, #0
 800055a:	d1f8      	bne.n	800054e <__udivmoddi4+0xfa>
 800055c:	9800      	ldr	r0, [sp, #0]
 800055e:	9901      	ldr	r1, [sp, #4]
 8000560:	465b      	mov	r3, fp
 8000562:	1900      	adds	r0, r0, r4
 8000564:	4169      	adcs	r1, r5
 8000566:	2b00      	cmp	r3, #0
 8000568:	db24      	blt.n	80005b4 <__udivmoddi4+0x160>
 800056a:	002b      	movs	r3, r5
 800056c:	465a      	mov	r2, fp
 800056e:	4644      	mov	r4, r8
 8000570:	40d3      	lsrs	r3, r2
 8000572:	002a      	movs	r2, r5
 8000574:	40e2      	lsrs	r2, r4
 8000576:	001c      	movs	r4, r3
 8000578:	465b      	mov	r3, fp
 800057a:	0015      	movs	r5, r2
 800057c:	2b00      	cmp	r3, #0
 800057e:	db2a      	blt.n	80005d6 <__udivmoddi4+0x182>
 8000580:	0026      	movs	r6, r4
 8000582:	409e      	lsls	r6, r3
 8000584:	0033      	movs	r3, r6
 8000586:	0026      	movs	r6, r4
 8000588:	4647      	mov	r7, r8
 800058a:	40be      	lsls	r6, r7
 800058c:	0032      	movs	r2, r6
 800058e:	1a80      	subs	r0, r0, r2
 8000590:	4199      	sbcs	r1, r3
 8000592:	9000      	str	r0, [sp, #0]
 8000594:	9101      	str	r1, [sp, #4]
 8000596:	e79f      	b.n	80004d8 <__udivmoddi4+0x84>
 8000598:	42a3      	cmp	r3, r4
 800059a:	d8bc      	bhi.n	8000516 <__udivmoddi4+0xc2>
 800059c:	e783      	b.n	80004a6 <__udivmoddi4+0x52>
 800059e:	4642      	mov	r2, r8
 80005a0:	2320      	movs	r3, #32
 80005a2:	2100      	movs	r1, #0
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	2200      	movs	r2, #0
 80005a8:	9100      	str	r1, [sp, #0]
 80005aa:	9201      	str	r2, [sp, #4]
 80005ac:	2201      	movs	r2, #1
 80005ae:	40da      	lsrs	r2, r3
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	e786      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	2320      	movs	r3, #32
 80005b8:	1a9b      	subs	r3, r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	4646      	mov	r6, r8
 80005be:	409a      	lsls	r2, r3
 80005c0:	0023      	movs	r3, r4
 80005c2:	40f3      	lsrs	r3, r6
 80005c4:	4644      	mov	r4, r8
 80005c6:	4313      	orrs	r3, r2
 80005c8:	002a      	movs	r2, r5
 80005ca:	40e2      	lsrs	r2, r4
 80005cc:	001c      	movs	r4, r3
 80005ce:	465b      	mov	r3, fp
 80005d0:	0015      	movs	r5, r2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	dad4      	bge.n	8000580 <__udivmoddi4+0x12c>
 80005d6:	4642      	mov	r2, r8
 80005d8:	002f      	movs	r7, r5
 80005da:	2320      	movs	r3, #32
 80005dc:	0026      	movs	r6, r4
 80005de:	4097      	lsls	r7, r2
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	40de      	lsrs	r6, r3
 80005e4:	003b      	movs	r3, r7
 80005e6:	4333      	orrs	r3, r6
 80005e8:	e7cd      	b.n	8000586 <__udivmoddi4+0x132>
 80005ea:	46c0      	nop			; (mov r8, r8)

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f000 fed1 	bl	80013ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064a:	f000 f96d 	bl	8000928 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064e:	f000 facb 	bl	8000be8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000652:	f000 faab 	bl	8000bac <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000656:	f000 fa5b 	bl	8000b10 <MX_USART1_UART_Init>
  MX_RTC_Init();
 800065a:	f000 f9bb 	bl	80009d4 <MX_RTC_Init>
  MX_TIM14_Init();
 800065e:	f000 fa2f 	bl	8000ac0 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  __HAL_TIM_CLEAR_IT ( &htim14 , TIM_IT_UPDATE ) ; // żeby nie generować przerwania TIM6 od razu: https://stackoverflow.com/questions/71099885/why-hal-tim-periodelapsedcallback-gets-called-immediately-after-hal-tim-base-sta
 8000662:	4b84      	ldr	r3, [pc, #528]	; (8000874 <main+0x234>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	2202      	movs	r2, #2
 8000668:	4252      	negs	r2, r2
 800066a:	611a      	str	r2, [r3, #16]
  HAL_UARTEx_ReceiveToIdle_DMA ( &huart1 , rx_buff , sizeof ( rx_buff ) ) ;
 800066c:	4982      	ldr	r1, [pc, #520]	; (8000878 <main+0x238>)
 800066e:	4b83      	ldr	r3, [pc, #524]	; (800087c <main+0x23c>)
 8000670:	22c8      	movs	r2, #200	; 0xc8
 8000672:	0018      	movs	r0, r3
 8000674:	f004 fd9a 	bl	80051ac <HAL_UARTEx_ReceiveToIdle_DMA>
  HAL_Delay ( 60000 ) ; // Na potrzeby Swarm Boot. Musi być!
 8000678:	4b81      	ldr	r3, [pc, #516]	; (8000880 <main+0x240>)
 800067a:	0018      	movs	r0, r3
 800067c:	f000 ff3c 	bl	80014f8 <HAL_Delay>
  send2swarm_at_command ( cs_at_comm , cs_answer , 1 ) ;
 8000680:	4b80      	ldr	r3, [pc, #512]	; (8000884 <main+0x244>)
 8000682:	6818      	ldr	r0, [r3, #0]
 8000684:	4b80      	ldr	r3, [pc, #512]	; (8000888 <main+0x248>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2201      	movs	r2, #1
 800068a:	0019      	movs	r1, r3
 800068c:	f000 fb0c 	bl	8000ca8 <send2swarm_at_command>
  if ( checklist == 1 )
 8000690:	4b7e      	ldr	r3, [pc, #504]	; (800088c <main+0x24c>)
 8000692:	881b      	ldrh	r3, [r3, #0]
 8000694:	2b01      	cmp	r3, #1
 8000696:	d107      	bne.n	80006a8 <main+0x68>
	  send2swarm_at_command ( rt_0_at_comm , rt_ok_answer , 2 ) ;
 8000698:	4b7d      	ldr	r3, [pc, #500]	; (8000890 <main+0x250>)
 800069a:	6818      	ldr	r0, [r3, #0]
 800069c:	4b7d      	ldr	r3, [pc, #500]	; (8000894 <main+0x254>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2202      	movs	r2, #2
 80006a2:	0019      	movs	r1, r3
 80006a4:	f000 fb00 	bl	8000ca8 <send2swarm_at_command>
  if ( checklist == 2 )
 80006a8:	4b78      	ldr	r3, [pc, #480]	; (800088c <main+0x24c>)
 80006aa:	881b      	ldrh	r3, [r3, #0]
 80006ac:	2b02      	cmp	r3, #2
 80006ae:	d107      	bne.n	80006c0 <main+0x80>
	  send2swarm_at_command ( rt_q_rate_at_comm , rt_0_answer , 3 ) ; // Query RT rate
 80006b0:	4b79      	ldr	r3, [pc, #484]	; (8000898 <main+0x258>)
 80006b2:	6818      	ldr	r0, [r3, #0]
 80006b4:	4b79      	ldr	r3, [pc, #484]	; (800089c <main+0x25c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2203      	movs	r2, #3
 80006ba:	0019      	movs	r1, r3
 80006bc:	f000 faf4 	bl	8000ca8 <send2swarm_at_command>
  if ( checklist == 3 )
 80006c0:	4b72      	ldr	r3, [pc, #456]	; (800088c <main+0x24c>)
 80006c2:	881b      	ldrh	r3, [r3, #0]
 80006c4:	2b03      	cmp	r3, #3
 80006c6:	d107      	bne.n	80006d8 <main+0x98>
	  send2swarm_at_command ( pw_0_at_comm , pw_ok_answer , 4 ) ;
 80006c8:	4b75      	ldr	r3, [pc, #468]	; (80008a0 <main+0x260>)
 80006ca:	6818      	ldr	r0, [r3, #0]
 80006cc:	4b75      	ldr	r3, [pc, #468]	; (80008a4 <main+0x264>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2204      	movs	r2, #4
 80006d2:	0019      	movs	r1, r3
 80006d4:	f000 fae8 	bl	8000ca8 <send2swarm_at_command>
  if ( checklist == 4 )
 80006d8:	4b6c      	ldr	r3, [pc, #432]	; (800088c <main+0x24c>)
 80006da:	881b      	ldrh	r3, [r3, #0]
 80006dc:	2b04      	cmp	r3, #4
 80006de:	d107      	bne.n	80006f0 <main+0xb0>
	  send2swarm_at_command ( pw_q_rate_at_comm , pw_0_answer , 5 ) ;
 80006e0:	4b71      	ldr	r3, [pc, #452]	; (80008a8 <main+0x268>)
 80006e2:	6818      	ldr	r0, [r3, #0]
 80006e4:	4b71      	ldr	r3, [pc, #452]	; (80008ac <main+0x26c>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2205      	movs	r2, #5
 80006ea:	0019      	movs	r1, r3
 80006ec:	f000 fadc 	bl	8000ca8 <send2swarm_at_command>
  if ( checklist == 5 )
 80006f0:	4b66      	ldr	r3, [pc, #408]	; (800088c <main+0x24c>)
 80006f2:	881b      	ldrh	r3, [r3, #0]
 80006f4:	2b05      	cmp	r3, #5
 80006f6:	d107      	bne.n	8000708 <main+0xc8>
	  send2swarm_at_command ( dt_0_at_comm , dt_ok_answer , 6 ) ;
 80006f8:	4b6d      	ldr	r3, [pc, #436]	; (80008b0 <main+0x270>)
 80006fa:	6818      	ldr	r0, [r3, #0]
 80006fc:	4b6d      	ldr	r3, [pc, #436]	; (80008b4 <main+0x274>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2206      	movs	r2, #6
 8000702:	0019      	movs	r1, r3
 8000704:	f000 fad0 	bl	8000ca8 <send2swarm_at_command>
  if ( checklist == 6 )
 8000708:	4b60      	ldr	r3, [pc, #384]	; (800088c <main+0x24c>)
 800070a:	881b      	ldrh	r3, [r3, #0]
 800070c:	2b06      	cmp	r3, #6
 800070e:	d107      	bne.n	8000720 <main+0xe0>
	  send2swarm_at_command ( dt_q_rate_at_comm , dt_0_answer , 7 ) ;
 8000710:	4b69      	ldr	r3, [pc, #420]	; (80008b8 <main+0x278>)
 8000712:	6818      	ldr	r0, [r3, #0]
 8000714:	4b69      	ldr	r3, [pc, #420]	; (80008bc <main+0x27c>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2207      	movs	r2, #7
 800071a:	0019      	movs	r1, r3
 800071c:	f000 fac4 	bl	8000ca8 <send2swarm_at_command>
  if ( checklist == 7 )
 8000720:	4b5a      	ldr	r3, [pc, #360]	; (800088c <main+0x24c>)
 8000722:	881b      	ldrh	r3, [r3, #0]
 8000724:	2b07      	cmp	r3, #7
 8000726:	d107      	bne.n	8000738 <main+0xf8>
	  send2swarm_at_command ( gs_0_at_comm , gs_ok_answer , 8 ) ;
 8000728:	4b65      	ldr	r3, [pc, #404]	; (80008c0 <main+0x280>)
 800072a:	6818      	ldr	r0, [r3, #0]
 800072c:	4b65      	ldr	r3, [pc, #404]	; (80008c4 <main+0x284>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2208      	movs	r2, #8
 8000732:	0019      	movs	r1, r3
 8000734:	f000 fab8 	bl	8000ca8 <send2swarm_at_command>
  if ( checklist == 8 )
 8000738:	4b54      	ldr	r3, [pc, #336]	; (800088c <main+0x24c>)
 800073a:	881b      	ldrh	r3, [r3, #0]
 800073c:	2b08      	cmp	r3, #8
 800073e:	d107      	bne.n	8000750 <main+0x110>
	  send2swarm_at_command ( gs_q_rate_at_comm , gs_0_answer , 9 ) ;
 8000740:	4b61      	ldr	r3, [pc, #388]	; (80008c8 <main+0x288>)
 8000742:	6818      	ldr	r0, [r3, #0]
 8000744:	4b61      	ldr	r3, [pc, #388]	; (80008cc <main+0x28c>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2209      	movs	r2, #9
 800074a:	0019      	movs	r1, r3
 800074c:	f000 faac 	bl	8000ca8 <send2swarm_at_command>
  if ( checklist == 9 )
 8000750:	4b4e      	ldr	r3, [pc, #312]	; (800088c <main+0x24c>)
 8000752:	881b      	ldrh	r3, [r3, #0]
 8000754:	2b09      	cmp	r3, #9
 8000756:	d107      	bne.n	8000768 <main+0x128>
	  send2swarm_at_command ( gj_0_at_comm , gj_ok_answer , 10 ) ;
 8000758:	4b5d      	ldr	r3, [pc, #372]	; (80008d0 <main+0x290>)
 800075a:	6818      	ldr	r0, [r3, #0]
 800075c:	4b5d      	ldr	r3, [pc, #372]	; (80008d4 <main+0x294>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	220a      	movs	r2, #10
 8000762:	0019      	movs	r1, r3
 8000764:	f000 faa0 	bl	8000ca8 <send2swarm_at_command>
  if ( checklist == 10 )
 8000768:	4b48      	ldr	r3, [pc, #288]	; (800088c <main+0x24c>)
 800076a:	881b      	ldrh	r3, [r3, #0]
 800076c:	2b0a      	cmp	r3, #10
 800076e:	d107      	bne.n	8000780 <main+0x140>
	  send2swarm_at_command ( gj_q_rate_at_comm , gj_0_answer , 11 ) ;
 8000770:	4b59      	ldr	r3, [pc, #356]	; (80008d8 <main+0x298>)
 8000772:	6818      	ldr	r0, [r3, #0]
 8000774:	4b59      	ldr	r3, [pc, #356]	; (80008dc <main+0x29c>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	220b      	movs	r2, #11
 800077a:	0019      	movs	r1, r3
 800077c:	f000 fa94 	bl	8000ca8 <send2swarm_at_command>
  if ( checklist == 11 )
 8000780:	4b42      	ldr	r3, [pc, #264]	; (800088c <main+0x24c>)
 8000782:	881b      	ldrh	r3, [r3, #0]
 8000784:	2b0b      	cmp	r3, #11
 8000786:	d107      	bne.n	8000798 <main+0x158>
	  send2swarm_at_command ( gn_0_at_comm , gn_ok_answer , 12 ) ;
 8000788:	4b55      	ldr	r3, [pc, #340]	; (80008e0 <main+0x2a0>)
 800078a:	6818      	ldr	r0, [r3, #0]
 800078c:	4b55      	ldr	r3, [pc, #340]	; (80008e4 <main+0x2a4>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	220c      	movs	r2, #12
 8000792:	0019      	movs	r1, r3
 8000794:	f000 fa88 	bl	8000ca8 <send2swarm_at_command>
  if ( checklist == 12 )
 8000798:	4b3c      	ldr	r3, [pc, #240]	; (800088c <main+0x24c>)
 800079a:	881b      	ldrh	r3, [r3, #0]
 800079c:	2b0c      	cmp	r3, #12
 800079e:	d107      	bne.n	80007b0 <main+0x170>
	  send2swarm_at_command ( gn_q_rate_at_comm , gn_0_answer , 13 ) ;
 80007a0:	4b51      	ldr	r3, [pc, #324]	; (80008e8 <main+0x2a8>)
 80007a2:	6818      	ldr	r0, [r3, #0]
 80007a4:	4b51      	ldr	r3, [pc, #324]	; (80008ec <main+0x2ac>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	220d      	movs	r2, #13
 80007aa:	0019      	movs	r1, r3
 80007ac:	f000 fa7c 	bl	8000ca8 <send2swarm_at_command>
  HAL_Delay ( 60000 ) ; // Na potrzeby Fix
 80007b0:	4b33      	ldr	r3, [pc, #204]	; (8000880 <main+0x240>)
 80007b2:	0018      	movs	r0, r3
 80007b4:	f000 fea0 	bl	80014f8 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if ( checklist == 13 )
 80007b8:	4b34      	ldr	r3, [pc, #208]	; (800088c <main+0x24c>)
 80007ba:	881b      	ldrh	r3, [r3, #0]
 80007bc:	2b0d      	cmp	r3, #13
 80007be:	d107      	bne.n	80007d0 <main+0x190>
	  	  send2swarm_at_command ( pw_mostrecent_at_comm , pw_mostrecent_answer , 14 ) ;
 80007c0:	4b4b      	ldr	r3, [pc, #300]	; (80008f0 <main+0x2b0>)
 80007c2:	6818      	ldr	r0, [r3, #0]
 80007c4:	4b4b      	ldr	r3, [pc, #300]	; (80008f4 <main+0x2b4>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	220e      	movs	r2, #14
 80007ca:	0019      	movs	r1, r3
 80007cc:	f000 fa6c 	bl	8000ca8 <send2swarm_at_command>
	  if ( checklist == 14 )
 80007d0:	4b2e      	ldr	r3, [pc, #184]	; (800088c <main+0x24c>)
 80007d2:	881b      	ldrh	r3, [r3, #0]
 80007d4:	2b0e      	cmp	r3, #14
 80007d6:	d107      	bne.n	80007e8 <main+0x1a8>
		  send2swarm_at_command ( gn_mostrecent_at_comm , gn_mostrecent_answer , 15 ) ;
 80007d8:	4b47      	ldr	r3, [pc, #284]	; (80008f8 <main+0x2b8>)
 80007da:	6818      	ldr	r0, [r3, #0]
 80007dc:	4b47      	ldr	r3, [pc, #284]	; (80008fc <main+0x2bc>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	220f      	movs	r2, #15
 80007e2:	0019      	movs	r1, r3
 80007e4:	f000 fa60 	bl	8000ca8 <send2swarm_at_command>
	  if ( checklist == 15 )
 80007e8:	4b28      	ldr	r3, [pc, #160]	; (800088c <main+0x24c>)
 80007ea:	881b      	ldrh	r3, [r3, #0]
 80007ec:	2b0f      	cmp	r3, #15
 80007ee:	d107      	bne.n	8000800 <main+0x1c0>
		  send2swarm_at_command ( mt_del_all_at_comm , mt_del_all_answer , 16 ) ;
 80007f0:	4b43      	ldr	r3, [pc, #268]	; (8000900 <main+0x2c0>)
 80007f2:	6818      	ldr	r0, [r3, #0]
 80007f4:	4b43      	ldr	r3, [pc, #268]	; (8000904 <main+0x2c4>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2210      	movs	r2, #16
 80007fa:	0019      	movs	r1, r3
 80007fc:	f000 fa54 	bl	8000ca8 <send2swarm_at_command>
	  if ( checklist == 16 )
 8000800:	4b22      	ldr	r3, [pc, #136]	; (800088c <main+0x24c>)
 8000802:	881b      	ldrh	r3, [r3, #0]
 8000804:	2b10      	cmp	r3, #16
 8000806:	d115      	bne.n	8000834 <main+0x1f4>
	  {
		  snprintf ( td_at_comm , TD_PAYLOAD_BUFF_SIZE , "$TD HD=60,\"%s;%s\"" , pw_buff , gn_buff ) ;
 8000808:	493f      	ldr	r1, [pc, #252]	; (8000908 <main+0x2c8>)
 800080a:	4a40      	ldr	r2, [pc, #256]	; (800090c <main+0x2cc>)
 800080c:	4840      	ldr	r0, [pc, #256]	; (8000910 <main+0x2d0>)
 800080e:	4b41      	ldr	r3, [pc, #260]	; (8000914 <main+0x2d4>)
 8000810:	9300      	str	r3, [sp, #0]
 8000812:	000b      	movs	r3, r1
 8000814:	215a      	movs	r1, #90	; 0x5a
 8000816:	f004 fdc1 	bl	800539c <sniprintf>
	  	  send2swarm_at_command ( td_at_comm , td_ok_answer , 17 ) ;
 800081a:	4b3f      	ldr	r3, [pc, #252]	; (8000918 <main+0x2d8>)
 800081c:	6819      	ldr	r1, [r3, #0]
 800081e:	4b3c      	ldr	r3, [pc, #240]	; (8000910 <main+0x2d0>)
 8000820:	2211      	movs	r2, #17
 8000822:	0018      	movs	r0, r3
 8000824:	f000 fa40 	bl	8000ca8 <send2swarm_at_command>
	  	  pw_buff[0] = 0 ;
 8000828:	4b37      	ldr	r3, [pc, #220]	; (8000908 <main+0x2c8>)
 800082a:	2200      	movs	r2, #0
 800082c:	701a      	strb	r2, [r3, #0]
	  	  gn_buff[0] = 0 ;
 800082e:	4b39      	ldr	r3, [pc, #228]	; (8000914 <main+0x2d4>)
 8000830:	2200      	movs	r2, #0
 8000832:	701a      	strb	r2, [r3, #0]
	  }
	  if ( checklist == 17 )
 8000834:	4b15      	ldr	r3, [pc, #84]	; (800088c <main+0x24c>)
 8000836:	881b      	ldrh	r3, [r3, #0]
 8000838:	2b11      	cmp	r3, #17
 800083a:	d10c      	bne.n	8000856 <main+0x216>
	  {
		  //__NOP ();
		  HAL_Delay ( 60000) ; // 1min. na wysłanie wiadomości
 800083c:	4b10      	ldr	r3, [pc, #64]	; (8000880 <main+0x240>)
 800083e:	0018      	movs	r0, r3
 8000840:	f000 fe5a 	bl	80014f8 <HAL_Delay>
		  send2swarm_at_command ( sl_3c4ks_at_comm , sl_ok_answer , 18 ) ; // Swarm sleep for 50 minutes
 8000844:	4b35      	ldr	r3, [pc, #212]	; (800091c <main+0x2dc>)
 8000846:	6818      	ldr	r0, [r3, #0]
 8000848:	4b35      	ldr	r3, [pc, #212]	; (8000920 <main+0x2e0>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2212      	movs	r2, #18
 800084e:	0019      	movs	r1, r3
 8000850:	f000 fa2a 	bl	8000ca8 <send2swarm_at_command>
 8000854:	e007      	b.n	8000866 <main+0x226>
	  }
	  else
	  {
		  //__NOP () ;
		  send2swarm_at_command ( sl_3c5ks_at_comm , sl_ok_answer , 18 ) ; // Swarm sleep for 50 minutes
 8000856:	4b33      	ldr	r3, [pc, #204]	; (8000924 <main+0x2e4>)
 8000858:	6818      	ldr	r0, [r3, #0]
 800085a:	4b31      	ldr	r3, [pc, #196]	; (8000920 <main+0x2e0>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	2212      	movs	r2, #18
 8000860:	0019      	movs	r1, r3
 8000862:	f000 fa21 	bl	8000ca8 <send2swarm_at_command>
	  }
	  checklist = 13 ;
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <main+0x24c>)
 8000868:	220d      	movs	r2, #13
 800086a:	801a      	strh	r2, [r3, #0]
	  //HAL_Delay(3000); // docelowo zamienić na poniższy sleep
	  HAL_PWREx_EnterSHUTDOWNMode () ; // Enter the SHUTDOWN mode. Docelowo rozważyć STOP Mode 2, żeby nie zaczynać zawsze od konfiguracji
 800086c:	f001 fc34 	bl	80020d8 <HAL_PWREx_EnterSHUTDOWNMode>
	  if ( checklist == 13 )
 8000870:	e7a2      	b.n	80007b8 <main+0x178>
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	20000148 	.word	0x20000148
 8000878:	20000290 	.word	0x20000290
 800087c:	20000194 	.word	0x20000194
 8000880:	0000ea60 	.word	0x0000ea60
 8000884:	20000000 	.word	0x20000000
 8000888:	20000048 	.word	0x20000048
 800088c:	20000284 	.word	0x20000284
 8000890:	20000004 	.word	0x20000004
 8000894:	2000004c 	.word	0x2000004c
 8000898:	20000008 	.word	0x20000008
 800089c:	20000050 	.word	0x20000050
 80008a0:	2000000c 	.word	0x2000000c
 80008a4:	20000054 	.word	0x20000054
 80008a8:	20000010 	.word	0x20000010
 80008ac:	20000058 	.word	0x20000058
 80008b0:	20000018 	.word	0x20000018
 80008b4:	20000060 	.word	0x20000060
 80008b8:	2000001c 	.word	0x2000001c
 80008bc:	20000064 	.word	0x20000064
 80008c0:	20000020 	.word	0x20000020
 80008c4:	20000068 	.word	0x20000068
 80008c8:	20000024 	.word	0x20000024
 80008cc:	2000006c 	.word	0x2000006c
 80008d0:	20000028 	.word	0x20000028
 80008d4:	20000070 	.word	0x20000070
 80008d8:	2000002c 	.word	0x2000002c
 80008dc:	20000074 	.word	0x20000074
 80008e0:	20000030 	.word	0x20000030
 80008e4:	20000078 	.word	0x20000078
 80008e8:	20000034 	.word	0x20000034
 80008ec:	2000007c 	.word	0x2000007c
 80008f0:	20000014 	.word	0x20000014
 80008f4:	2000005c 	.word	0x2000005c
 80008f8:	20000038 	.word	0x20000038
 80008fc:	20000080 	.word	0x20000080
 8000900:	2000003c 	.word	0x2000003c
 8000904:	20000084 	.word	0x20000084
 8000908:	20000454 	.word	0x20000454
 800090c:	080074c0 	.word	0x080074c0
 8000910:	20000480 	.word	0x20000480
 8000914:	2000045c 	.word	0x2000045c
 8000918:	20000088 	.word	0x20000088
 800091c:	20000044 	.word	0x20000044
 8000920:	2000008c 	.word	0x2000008c
 8000924:	20000040 	.word	0x20000040

08000928 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000928:	b590      	push	{r4, r7, lr}
 800092a:	b093      	sub	sp, #76	; 0x4c
 800092c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092e:	2410      	movs	r4, #16
 8000930:	193b      	adds	r3, r7, r4
 8000932:	0018      	movs	r0, r3
 8000934:	2338      	movs	r3, #56	; 0x38
 8000936:	001a      	movs	r2, r3
 8000938:	2100      	movs	r1, #0
 800093a:	f004 fd27 	bl	800538c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800093e:	003b      	movs	r3, r7
 8000940:	0018      	movs	r0, r3
 8000942:	2310      	movs	r3, #16
 8000944:	001a      	movs	r2, r3
 8000946:	2100      	movs	r1, #0
 8000948:	f004 fd20 	bl	800538c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800094c:	2380      	movs	r3, #128	; 0x80
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	0018      	movs	r0, r3
 8000952:	f001 fb81 	bl	8002058 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000956:	f001 fb71 	bl	800203c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800095a:	4b1d      	ldr	r3, [pc, #116]	; (80009d0 <SystemClock_Config+0xa8>)
 800095c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800095e:	4b1c      	ldr	r3, [pc, #112]	; (80009d0 <SystemClock_Config+0xa8>)
 8000960:	2118      	movs	r1, #24
 8000962:	438a      	bics	r2, r1
 8000964:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000966:	193b      	adds	r3, r7, r4
 8000968:	2206      	movs	r2, #6
 800096a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800096c:	193b      	adds	r3, r7, r4
 800096e:	2201      	movs	r2, #1
 8000970:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000972:	193b      	adds	r3, r7, r4
 8000974:	2280      	movs	r2, #128	; 0x80
 8000976:	0052      	lsls	r2, r2, #1
 8000978:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800097a:	193b      	adds	r3, r7, r4
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000980:	193b      	adds	r3, r7, r4
 8000982:	2240      	movs	r2, #64	; 0x40
 8000984:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000986:	193b      	adds	r3, r7, r4
 8000988:	2200      	movs	r2, #0
 800098a:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800098c:	193b      	adds	r3, r7, r4
 800098e:	0018      	movs	r0, r3
 8000990:	f001 fbc8 	bl	8002124 <HAL_RCC_OscConfig>
 8000994:	1e03      	subs	r3, r0, #0
 8000996:	d001      	beq.n	800099c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000998:	f000 fac2 	bl	8000f20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800099c:	003b      	movs	r3, r7
 800099e:	2207      	movs	r2, #7
 80009a0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009a2:	003b      	movs	r3, r7
 80009a4:	2200      	movs	r2, #0
 80009a6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a8:	003b      	movs	r3, r7
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009ae:	003b      	movs	r3, r7
 80009b0:	2200      	movs	r2, #0
 80009b2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009b4:	003b      	movs	r3, r7
 80009b6:	2100      	movs	r1, #0
 80009b8:	0018      	movs	r0, r3
 80009ba:	f001 fecd 	bl	8002758 <HAL_RCC_ClockConfig>
 80009be:	1e03      	subs	r3, r0, #0
 80009c0:	d001      	beq.n	80009c6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80009c2:	f000 faad 	bl	8000f20 <Error_Handler>
  }
}
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	46bd      	mov	sp, r7
 80009ca:	b013      	add	sp, #76	; 0x4c
 80009cc:	bd90      	pop	{r4, r7, pc}
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	40021000 	.word	0x40021000

080009d4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	0018      	movs	r0, r3
 80009de:	2314      	movs	r3, #20
 80009e0:	001a      	movs	r2, r3
 80009e2:	2100      	movs	r1, #0
 80009e4:	f004 fcd2 	bl	800538c <memset>
  RTC_DateTypeDef sDate = {0};
 80009e8:	003b      	movs	r3, r7
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009ee:	4b32      	ldr	r3, [pc, #200]	; (8000ab8 <MX_RTC_Init+0xe4>)
 80009f0:	4a32      	ldr	r2, [pc, #200]	; (8000abc <MX_RTC_Init+0xe8>)
 80009f2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009f4:	4b30      	ldr	r3, [pc, #192]	; (8000ab8 <MX_RTC_Init+0xe4>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80009fa:	4b2f      	ldr	r3, [pc, #188]	; (8000ab8 <MX_RTC_Init+0xe4>)
 80009fc:	227f      	movs	r2, #127	; 0x7f
 80009fe:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000a00:	4b2d      	ldr	r3, [pc, #180]	; (8000ab8 <MX_RTC_Init+0xe4>)
 8000a02:	22ff      	movs	r2, #255	; 0xff
 8000a04:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a06:	4b2c      	ldr	r3, [pc, #176]	; (8000ab8 <MX_RTC_Init+0xe4>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a0c:	4b2a      	ldr	r3, [pc, #168]	; (8000ab8 <MX_RTC_Init+0xe4>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a12:	4b29      	ldr	r3, [pc, #164]	; (8000ab8 <MX_RTC_Init+0xe4>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a18:	4b27      	ldr	r3, [pc, #156]	; (8000ab8 <MX_RTC_Init+0xe4>)
 8000a1a:	2280      	movs	r2, #128	; 0x80
 8000a1c:	05d2      	lsls	r2, r2, #23
 8000a1e:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000a20:	4b25      	ldr	r3, [pc, #148]	; (8000ab8 <MX_RTC_Init+0xe4>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a26:	4b24      	ldr	r3, [pc, #144]	; (8000ab8 <MX_RTC_Init+0xe4>)
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f002 f9b9 	bl	8002da0 <HAL_RTC_Init>
 8000a2e:	1e03      	subs	r3, r0, #0
 8000a30:	d001      	beq.n	8000a36 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000a32:	f000 fa75 	bl	8000f20 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	2200      	movs	r2, #0
 8000a3a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	2200      	movs	r2, #0
 8000a40:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	2200      	movs	r2, #0
 8000a46:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	2200      	movs	r2, #0
 8000a52:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	2200      	movs	r2, #0
 8000a58:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000a5a:	1d39      	adds	r1, r7, #4
 8000a5c:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <MX_RTC_Init+0xe4>)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	0018      	movs	r0, r3
 8000a62:	f002 fa3f 	bl	8002ee4 <HAL_RTC_SetTime>
 8000a66:	1e03      	subs	r3, r0, #0
 8000a68:	d001      	beq.n	8000a6e <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 8000a6a:	f000 fa59 	bl	8000f20 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000a6e:	003b      	movs	r3, r7
 8000a70:	2201      	movs	r2, #1
 8000a72:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000a74:	003b      	movs	r3, r7
 8000a76:	2201      	movs	r2, #1
 8000a78:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000a7a:	003b      	movs	r3, r7
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000a80:	003b      	movs	r3, r7
 8000a82:	2200      	movs	r2, #0
 8000a84:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000a86:	0039      	movs	r1, r7
 8000a88:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <MX_RTC_Init+0xe4>)
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f002 fad1 	bl	8003034 <HAL_RTC_SetDate>
 8000a92:	1e03      	subs	r3, r0, #0
 8000a94:	d001      	beq.n	8000a9a <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 8000a96:	f000 fa43 	bl	8000f20 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 3600, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8000a9a:	23e1      	movs	r3, #225	; 0xe1
 8000a9c:	0119      	lsls	r1, r3, #4
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <MX_RTC_Init+0xe4>)
 8000aa0:	2204      	movs	r2, #4
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f002 fc2e 	bl	8003304 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000aa8:	1e03      	subs	r3, r0, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8000aac:	f000 fa38 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ab0:	46c0      	nop			; (mov r8, r8)
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	b006      	add	sp, #24
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	2000011c 	.word	0x2000011c
 8000abc:	40002800 	.word	0x40002800

08000ac0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000ac4:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <MX_TIM14_Init+0x40>)
 8000ac6:	4a0f      	ldr	r2, [pc, #60]	; (8000b04 <MX_TIM14_Init+0x44>)
 8000ac8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16000-1;
 8000aca:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <MX_TIM14_Init+0x40>)
 8000acc:	4a0e      	ldr	r2, [pc, #56]	; (8000b08 <MX_TIM14_Init+0x48>)
 8000ace:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad0:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <MX_TIM14_Init+0x40>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2000-1;
 8000ad6:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <MX_TIM14_Init+0x40>)
 8000ad8:	4a0c      	ldr	r2, [pc, #48]	; (8000b0c <MX_TIM14_Init+0x4c>)
 8000ada:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000adc:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <MX_TIM14_Init+0x40>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ae2:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <MX_TIM14_Init+0x40>)
 8000ae4:	2280      	movs	r2, #128	; 0x80
 8000ae6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000ae8:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <MX_TIM14_Init+0x40>)
 8000aea:	0018      	movs	r0, r3
 8000aec:	f002 fcca 	bl	8003484 <HAL_TIM_Base_Init>
 8000af0:	1e03      	subs	r3, r0, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000af4:	f000 fa14 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000af8:	46c0      	nop			; (mov r8, r8)
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	20000148 	.word	0x20000148
 8000b04:	40002000 	.word	0x40002000
 8000b08:	00003e7f 	.word	0x00003e7f
 8000b0c:	000007cf 	.word	0x000007cf

08000b10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b14:	4b23      	ldr	r3, [pc, #140]	; (8000ba4 <MX_USART1_UART_Init+0x94>)
 8000b16:	4a24      	ldr	r2, [pc, #144]	; (8000ba8 <MX_USART1_UART_Init+0x98>)
 8000b18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b1a:	4b22      	ldr	r3, [pc, #136]	; (8000ba4 <MX_USART1_UART_Init+0x94>)
 8000b1c:	22e1      	movs	r2, #225	; 0xe1
 8000b1e:	0252      	lsls	r2, r2, #9
 8000b20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b22:	4b20      	ldr	r3, [pc, #128]	; (8000ba4 <MX_USART1_UART_Init+0x94>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b28:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <MX_USART1_UART_Init+0x94>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ba4 <MX_USART1_UART_Init+0x94>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b34:	4b1b      	ldr	r3, [pc, #108]	; (8000ba4 <MX_USART1_UART_Init+0x94>)
 8000b36:	220c      	movs	r2, #12
 8000b38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <MX_USART1_UART_Init+0x94>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b40:	4b18      	ldr	r3, [pc, #96]	; (8000ba4 <MX_USART1_UART_Init+0x94>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b46:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <MX_USART1_UART_Init+0x94>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b4c:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <MX_USART1_UART_Init+0x94>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b52:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <MX_USART1_UART_Init+0x94>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <MX_USART1_UART_Init+0x94>)
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f002 ff4c 	bl	80039f8 <HAL_UART_Init>
 8000b60:	1e03      	subs	r3, r0, #0
 8000b62:	d001      	beq.n	8000b68 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b64:	f000 f9dc 	bl	8000f20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b68:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <MX_USART1_UART_Init+0x94>)
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	f004 fa9b 	bl	80050a8 <HAL_UARTEx_SetTxFifoThreshold>
 8000b72:	1e03      	subs	r3, r0, #0
 8000b74:	d001      	beq.n	8000b7a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b76:	f000 f9d3 	bl	8000f20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <MX_USART1_UART_Init+0x94>)
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f004 fad2 	bl	8005128 <HAL_UARTEx_SetRxFifoThreshold>
 8000b84:	1e03      	subs	r3, r0, #0
 8000b86:	d001      	beq.n	8000b8c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b88:	f000 f9ca 	bl	8000f20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b8c:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <MX_USART1_UART_Init+0x94>)
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f004 fa50 	bl	8005034 <HAL_UARTEx_DisableFifoMode>
 8000b94:	1e03      	subs	r3, r0, #0
 8000b96:	d001      	beq.n	8000b9c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b98:	f000 f9c2 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b9c:	46c0      	nop			; (mov r8, r8)
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	20000194 	.word	0x20000194
 8000ba8:	40013800 	.word	0x40013800

08000bac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bb2:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <MX_DMA_Init+0x38>)
 8000bb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <MX_DMA_Init+0x38>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	430a      	orrs	r2, r1
 8000bbc:	639a      	str	r2, [r3, #56]	; 0x38
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <MX_DMA_Init+0x38>)
 8000bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2100      	movs	r1, #0
 8000bce:	2009      	movs	r0, #9
 8000bd0:	f000 fd62 	bl	8001698 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000bd4:	2009      	movs	r0, #9
 8000bd6:	f000 fd74 	bl	80016c2 <HAL_NVIC_EnableIRQ>

}
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	b002      	add	sp, #8
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	40021000 	.word	0x40021000

08000be8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000be8:	b590      	push	{r4, r7, lr}
 8000bea:	b089      	sub	sp, #36	; 0x24
 8000bec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bee:	240c      	movs	r4, #12
 8000bf0:	193b      	adds	r3, r7, r4
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	2314      	movs	r3, #20
 8000bf6:	001a      	movs	r2, r3
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	f004 fbc7 	bl	800538c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfe:	4b1a      	ldr	r3, [pc, #104]	; (8000c68 <MX_GPIO_Init+0x80>)
 8000c00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c02:	4b19      	ldr	r3, [pc, #100]	; (8000c68 <MX_GPIO_Init+0x80>)
 8000c04:	2104      	movs	r1, #4
 8000c06:	430a      	orrs	r2, r1
 8000c08:	635a      	str	r2, [r3, #52]	; 0x34
 8000c0a:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <MX_GPIO_Init+0x80>)
 8000c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c0e:	2204      	movs	r2, #4
 8000c10:	4013      	ands	r3, r2
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <MX_GPIO_Init+0x80>)
 8000c18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c1a:	4b13      	ldr	r3, [pc, #76]	; (8000c68 <MX_GPIO_Init+0x80>)
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	430a      	orrs	r2, r1
 8000c20:	635a      	str	r2, [r3, #52]	; 0x34
 8000c22:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <MX_GPIO_Init+0x80>)
 8000c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c26:	2201      	movs	r2, #1
 8000c28:	4013      	ands	r3, r2
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_RESET);
 8000c2e:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <MX_GPIO_Init+0x84>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	2140      	movs	r1, #64	; 0x40
 8000c34:	0018      	movs	r0, r3
 8000c36:	f001 f9e3 	bl	8002000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GREEN_Pin */
  GPIO_InitStruct.Pin = GREEN_Pin;
 8000c3a:	0021      	movs	r1, r4
 8000c3c:	187b      	adds	r3, r7, r1
 8000c3e:	2240      	movs	r2, #64	; 0x40
 8000c40:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c42:	187b      	adds	r3, r7, r1
 8000c44:	2201      	movs	r2, #1
 8000c46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	187b      	adds	r3, r7, r1
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	187b      	adds	r3, r7, r1
 8000c50:	2200      	movs	r2, #0
 8000c52:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GREEN_GPIO_Port, &GPIO_InitStruct);
 8000c54:	187b      	adds	r3, r7, r1
 8000c56:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <MX_GPIO_Init+0x84>)
 8000c58:	0019      	movs	r1, r3
 8000c5a:	0010      	movs	r0, r2
 8000c5c:	f001 f86c 	bl	8001d38 <HAL_GPIO_Init>

}
 8000c60:	46c0      	nop			; (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	b009      	add	sp, #36	; 0x24
 8000c66:	bd90      	pop	{r4, r7, pc}
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	50000800 	.word	0x50000800

08000c70 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback ( UART_HandleTypeDef *huart , uint16_t Size )
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	000a      	movs	r2, r1
 8000c7a:	1cbb      	adds	r3, r7, #2
 8000c7c:	801a      	strh	r2, [r3, #0]
    if ( huart->Instance == USART1 )
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a06      	ldr	r2, [pc, #24]	; (8000c9c <HAL_UARTEx_RxEventCallback+0x2c>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d105      	bne.n	8000c94 <HAL_UARTEx_RxEventCallback+0x24>
    	HAL_UARTEx_ReceiveToIdle_DMA ( &huart1 , rx_buff , sizeof ( rx_buff ) ) ;
 8000c88:	4905      	ldr	r1, [pc, #20]	; (8000ca0 <HAL_UARTEx_RxEventCallback+0x30>)
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_UARTEx_RxEventCallback+0x34>)
 8000c8c:	22c8      	movs	r2, #200	; 0xc8
 8000c8e:	0018      	movs	r0, r3
 8000c90:	f004 fa8c 	bl	80051ac <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8000c94:	46c0      	nop			; (mov r8, r8)
 8000c96:	46bd      	mov	sp, r7
 8000c98:	b002      	add	sp, #8
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40013800 	.word	0x40013800
 8000ca0:	20000290 	.word	0x20000290
 8000ca4:	20000194 	.word	0x20000194

08000ca8 <send2swarm_at_command>:

void send2swarm_at_command ( const char* at_command , const char* answer , uint16_t step )
{
 8000ca8:	b5b0      	push	{r4, r5, r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	1dbb      	adds	r3, r7, #6
 8000cb4:	801a      	strh	r2, [r3, #0]
	uint32_t temp_tickstart = HAL_GetTick () ; //temp
 8000cb6:	f000 fc15 	bl	80014e4 <HAL_GetTick>
 8000cba:	0003      	movs	r3, r0
 8000cbc:	617b      	str	r3, [r7, #20]
	uint8_t cs = nmea_checksum ( at_command , strlen ( at_command ) ) ;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f7ff fa1f 	bl	8000104 <strlen>
 8000cc6:	0002      	movs	r2, r0
 8000cc8:	2513      	movs	r5, #19
 8000cca:	197c      	adds	r4, r7, r5
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	0011      	movs	r1, r2
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	f000 f8d9 	bl	8000e88 <nmea_checksum>
 8000cd6:	0003      	movs	r3, r0
 8000cd8:	7023      	strb	r3, [r4, #0]

	sprintf ( (char*) tx_buff , "%s*%02x\n" , at_command , cs ) ;
 8000cda:	197b      	adds	r3, r7, r5
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	4934      	ldr	r1, [pc, #208]	; (8000db4 <send2swarm_at_command+0x10c>)
 8000ce2:	4835      	ldr	r0, [pc, #212]	; (8000db8 <send2swarm_at_command+0x110>)
 8000ce4:	f004 fb8e 	bl	8005404 <siprintf>
	uart_status = HAL_UART_Transmit ( &huart1 , (const uint8_t *) tx_buff ,  strlen ( (char*) tx_buff ) , UART_TX_TIMEOUT ) ;
 8000ce8:	4b33      	ldr	r3, [pc, #204]	; (8000db8 <send2swarm_at_command+0x110>)
 8000cea:	0018      	movs	r0, r3
 8000cec:	f7ff fa0a 	bl	8000104 <strlen>
 8000cf0:	0003      	movs	r3, r0
 8000cf2:	b29a      	uxth	r2, r3
 8000cf4:	23fa      	movs	r3, #250	; 0xfa
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	492f      	ldr	r1, [pc, #188]	; (8000db8 <send2swarm_at_command+0x110>)
 8000cfa:	4830      	ldr	r0, [pc, #192]	; (8000dbc <send2swarm_at_command+0x114>)
 8000cfc:	f002 fed2 	bl	8003aa4 <HAL_UART_Transmit>
 8000d00:	0003      	movs	r3, r0
 8000d02:	001a      	movs	r2, r3
 8000d04:	4b2e      	ldr	r3, [pc, #184]	; (8000dc0 <send2swarm_at_command+0x118>)
 8000d06:	701a      	strb	r2, [r3, #0]
	if ( checklist >= 13 )
 8000d08:	4b2e      	ldr	r3, [pc, #184]	; (8000dc4 <send2swarm_at_command+0x11c>)
 8000d0a:	881b      	ldrh	r3, [r3, #0]
 8000d0c:	2b0c      	cmp	r3, #12
 8000d0e:	d904      	bls.n	8000d1a <send2swarm_at_command+0x72>
		HAL_Delay ( 500 ) ;
 8000d10:	23fa      	movs	r3, #250	; 0xfa
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	0018      	movs	r0, r3
 8000d16:	f000 fbef 	bl	80014f8 <HAL_Delay>
	waiting_for_answer = 1 ;
 8000d1a:	4b2b      	ldr	r3, [pc, #172]	; (8000dc8 <send2swarm_at_command+0x120>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &htim14 ) ;
 8000d20:	4b2a      	ldr	r3, [pc, #168]	; (8000dcc <send2swarm_at_command+0x124>)
 8000d22:	0018      	movs	r0, r3
 8000d24:	f002 fc06 	bl	8003534 <HAL_TIM_Base_Start_IT>
	while ( waiting_for_answer )
 8000d28:	e010      	b.n	8000d4c <send2swarm_at_command+0xa4>
		if ( strncmp ( (char*) rx_buff , answer , strlen ( answer ) ) == 0 )
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	f7ff f9e9 	bl	8000104 <strlen>
 8000d32:	0002      	movs	r2, r0
 8000d34:	68b9      	ldr	r1, [r7, #8]
 8000d36:	4b26      	ldr	r3, [pc, #152]	; (8000dd0 <send2swarm_at_command+0x128>)
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f004 fbf9 	bl	8005530 <strncmp>
 8000d3e:	1e03      	subs	r3, r0, #0
 8000d40:	d104      	bne.n	8000d4c <send2swarm_at_command+0xa4>
		{
			checklist = step ;
 8000d42:	4b20      	ldr	r3, [pc, #128]	; (8000dc4 <send2swarm_at_command+0x11c>)
 8000d44:	1dba      	adds	r2, r7, #6
 8000d46:	8812      	ldrh	r2, [r2, #0]
 8000d48:	801a      	strh	r2, [r3, #0]
			break ;
 8000d4a:	e003      	b.n	8000d54 <send2swarm_at_command+0xac>
	while ( waiting_for_answer )
 8000d4c:	4b1e      	ldr	r3, [pc, #120]	; (8000dc8 <send2swarm_at_command+0x120>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d1ea      	bne.n	8000d2a <send2swarm_at_command+0x82>
		}
	if ( strncmp ( pw_mostrecent_at_comm , at_command , strlen ( pw_mostrecent_at_comm ) ) == 0 )
 8000d54:	4b1f      	ldr	r3, [pc, #124]	; (8000dd4 <send2swarm_at_command+0x12c>)
 8000d56:	681c      	ldr	r4, [r3, #0]
 8000d58:	4b1e      	ldr	r3, [pc, #120]	; (8000dd4 <send2swarm_at_command+0x12c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	f7ff f9d1 	bl	8000104 <strlen>
 8000d62:	0002      	movs	r2, r0
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	0019      	movs	r1, r3
 8000d68:	0020      	movs	r0, r4
 8000d6a:	f004 fbe1 	bl	8005530 <strncmp>
 8000d6e:	1e03      	subs	r3, r0, #0
 8000d70:	d101      	bne.n	8000d76 <send2swarm_at_command+0xce>
		pw2payload () ;
 8000d72:	f000 f835 	bl	8000de0 <pw2payload>
	if ( strncmp ( gn_mostrecent_at_comm , at_command , strlen ( gn_mostrecent_at_comm ) ) == 0 )
 8000d76:	4b18      	ldr	r3, [pc, #96]	; (8000dd8 <send2swarm_at_command+0x130>)
 8000d78:	681c      	ldr	r4, [r3, #0]
 8000d7a:	4b17      	ldr	r3, [pc, #92]	; (8000dd8 <send2swarm_at_command+0x130>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	0018      	movs	r0, r3
 8000d80:	f7ff f9c0 	bl	8000104 <strlen>
 8000d84:	0002      	movs	r2, r0
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	0019      	movs	r1, r3
 8000d8a:	0020      	movs	r0, r4
 8000d8c:	f004 fbd0 	bl	8005530 <strncmp>
 8000d90:	1e03      	subs	r3, r0, #0
 8000d92:	d101      	bne.n	8000d98 <send2swarm_at_command+0xf0>
		gn2payload () ;
 8000d94:	f000 f84e 	bl	8000e34 <gn2payload>
	rx_buff[0] = 0 ;
 8000d98:	4b0d      	ldr	r3, [pc, #52]	; (8000dd0 <send2swarm_at_command+0x128>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	701a      	strb	r2, [r3, #0]
	temp_tick = HAL_GetTick () - temp_tickstart ;
 8000d9e:	f000 fba1 	bl	80014e4 <HAL_GetTick>
 8000da2:	0002      	movs	r2, r0
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	1ad2      	subs	r2, r2, r3
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <send2swarm_at_command+0x134>)
 8000daa:	601a      	str	r2, [r3, #0]
}
 8000dac:	46c0      	nop			; (mov r8, r8)
 8000dae:	46bd      	mov	sp, r7
 8000db0:	b006      	add	sp, #24
 8000db2:	bdb0      	pop	{r4, r5, r7, pc}
 8000db4:	080074d4 	.word	0x080074d4
 8000db8:	20000358 	.word	0x20000358
 8000dbc:	20000194 	.word	0x20000194
 8000dc0:	2000028c 	.word	0x2000028c
 8000dc4:	20000284 	.word	0x20000284
 8000dc8:	20000286 	.word	0x20000286
 8000dcc:	20000148 	.word	0x20000148
 8000dd0:	20000290 	.word	0x20000290
 8000dd4:	20000014 	.word	0x20000014
 8000dd8:	20000038 	.word	0x20000038
 8000ddc:	20000288 	.word	0x20000288

08000de0 <pw2payload>:
void pw2payload ()
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
	chunk = strtok ( (char*) rx_buff , " " ) ;
 8000de4:	4a0d      	ldr	r2, [pc, #52]	; (8000e1c <pw2payload+0x3c>)
 8000de6:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <pw2payload+0x40>)
 8000de8:	0011      	movs	r1, r2
 8000dea:	0018      	movs	r0, r3
 8000dec:	f004 fbb2 	bl	8005554 <strtok>
 8000df0:	0002      	movs	r2, r0
 8000df2:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <pw2payload+0x44>)
 8000df4:	601a      	str	r2, [r3, #0]
	chunk = strtok ( NULL , "," ) ;
 8000df6:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <pw2payload+0x48>)
 8000df8:	0019      	movs	r1, r3
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f004 fbaa 	bl	8005554 <strtok>
 8000e00:	0002      	movs	r2, r0
 8000e02:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <pw2payload+0x44>)
 8000e04:	601a      	str	r2, [r3, #0]
	sscanf ( (const char *) chunk , "%4s" , pw_buff ) ;
 8000e06:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <pw2payload+0x44>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a08      	ldr	r2, [pc, #32]	; (8000e2c <pw2payload+0x4c>)
 8000e0c:	4908      	ldr	r1, [pc, #32]	; (8000e30 <pw2payload+0x50>)
 8000e0e:	0018      	movs	r0, r3
 8000e10:	f004 fb18 	bl	8005444 <siscanf>
}
 8000e14:	46c0      	nop			; (mov r8, r8)
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	080074e0 	.word	0x080074e0
 8000e20:	20000290 	.word	0x20000290
 8000e24:	200004dc 	.word	0x200004dc
 8000e28:	080074e4 	.word	0x080074e4
 8000e2c:	20000454 	.word	0x20000454
 8000e30:	080074e8 	.word	0x080074e8

08000e34 <gn2payload>:
void gn2payload ()
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
	chunk = strtok ( (char*) rx_buff , " " ) ;
 8000e38:	4a0d      	ldr	r2, [pc, #52]	; (8000e70 <gn2payload+0x3c>)
 8000e3a:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <gn2payload+0x40>)
 8000e3c:	0011      	movs	r1, r2
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f004 fb88 	bl	8005554 <strtok>
 8000e44:	0002      	movs	r2, r0
 8000e46:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <gn2payload+0x44>)
 8000e48:	601a      	str	r2, [r3, #0]
	chunk = strtok ( NULL , "*" ) ;
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <gn2payload+0x48>)
 8000e4c:	0019      	movs	r1, r3
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f004 fb80 	bl	8005554 <strtok>
 8000e54:	0002      	movs	r2, r0
 8000e56:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <gn2payload+0x44>)
 8000e58:	601a      	str	r2, [r3, #0]
	sprintf ( (char*) gn_buff , "%s" , chunk ) ;
 8000e5a:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <gn2payload+0x44>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	4908      	ldr	r1, [pc, #32]	; (8000e80 <gn2payload+0x4c>)
 8000e60:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <gn2payload+0x50>)
 8000e62:	0018      	movs	r0, r3
 8000e64:	f004 face 	bl	8005404 <siprintf>
}
 8000e68:	46c0      	nop			; (mov r8, r8)
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	080074e0 	.word	0x080074e0
 8000e74:	20000290 	.word	0x20000290
 8000e78:	200004dc 	.word	0x200004dc
 8000e7c:	080074ec 	.word	0x080074ec
 8000e80:	080074f0 	.word	0x080074f0
 8000e84:	2000045c 	.word	0x2000045c

08000e88 <nmea_checksum>:
uint8_t nmea_checksum ( const char *sz , size_t len )
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
	size_t i = 0 ;
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
	uint8_t cs ;
	if ( sz [0] == '$' )
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	2b24      	cmp	r3, #36	; 0x24
 8000e9c:	d102      	bne.n	8000ea4 <nmea_checksum+0x1c>
		i++ ;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	60fb      	str	r3, [r7, #12]
	for ( cs = 0 ; ( i < len ) && sz [i] ; i++ )
 8000ea4:	230b      	movs	r3, #11
 8000ea6:	18fb      	adds	r3, r7, r3
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	701a      	strb	r2, [r3, #0]
 8000eac:	e00c      	b.n	8000ec8 <nmea_checksum+0x40>
		cs ^= ( (uint8_t) sz [i] ) ;
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	18d3      	adds	r3, r2, r3
 8000eb4:	7819      	ldrb	r1, [r3, #0]
 8000eb6:	220b      	movs	r2, #11
 8000eb8:	18bb      	adds	r3, r7, r2
 8000eba:	18ba      	adds	r2, r7, r2
 8000ebc:	7812      	ldrb	r2, [r2, #0]
 8000ebe:	404a      	eors	r2, r1
 8000ec0:	701a      	strb	r2, [r3, #0]
	for ( cs = 0 ; ( i < len ) && sz [i] ; i++ )
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fa      	ldr	r2, [r7, #12]
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d205      	bcs.n	8000edc <nmea_checksum+0x54>
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	18d3      	adds	r3, r2, r3
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d1e8      	bne.n	8000eae <nmea_checksum+0x26>
	return cs;
 8000edc:	230b      	movs	r3, #11
 8000ede:	18fb      	adds	r3, r7, r3
 8000ee0:	781b      	ldrb	r3, [r3, #0]
}
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	b004      	add	sp, #16
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM14 )
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a06      	ldr	r2, [pc, #24]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d106      	bne.n	8000f0c <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		waiting_for_answer = 0 ;
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT ( &htim14 ) ;
 8000f04:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000f06:	0018      	movs	r0, r3
 8000f08:	f002 fb68 	bl	80035dc <HAL_TIM_Base_Stop_IT>
	}
}
 8000f0c:	46c0      	nop			; (mov r8, r8)
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	b002      	add	sp, #8
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40002000 	.word	0x40002000
 8000f18:	20000286 	.word	0x20000286
 8000f1c:	20000148 	.word	0x20000148

08000f20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f24:	b672      	cpsid	i
}
 8000f26:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <Error_Handler+0x8>
	...

08000f2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f32:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <HAL_MspInit+0x44>)
 8000f34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f36:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <HAL_MspInit+0x44>)
 8000f38:	2101      	movs	r1, #1
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	641a      	str	r2, [r3, #64]	; 0x40
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <HAL_MspInit+0x44>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	2201      	movs	r2, #1
 8000f44:	4013      	ands	r3, r2
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4a:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <HAL_MspInit+0x44>)
 8000f4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f4e:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <HAL_MspInit+0x44>)
 8000f50:	2180      	movs	r1, #128	; 0x80
 8000f52:	0549      	lsls	r1, r1, #21
 8000f54:	430a      	orrs	r2, r1
 8000f56:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f58:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <HAL_MspInit+0x44>)
 8000f5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f5c:	2380      	movs	r3, #128	; 0x80
 8000f5e:	055b      	lsls	r3, r3, #21
 8000f60:	4013      	ands	r3, r2
 8000f62:	603b      	str	r3, [r7, #0]
 8000f64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	b002      	add	sp, #8
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	46c0      	nop			; (mov r8, r8)
 8000f70:	40021000 	.word	0x40021000

08000f74 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000f74:	b590      	push	{r4, r7, lr}
 8000f76:	b08f      	sub	sp, #60	; 0x3c
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f7c:	2410      	movs	r4, #16
 8000f7e:	193b      	adds	r3, r7, r4
 8000f80:	0018      	movs	r0, r3
 8000f82:	2328      	movs	r3, #40	; 0x28
 8000f84:	001a      	movs	r2, r3
 8000f86:	2100      	movs	r1, #0
 8000f88:	f004 fa00 	bl	800538c <memset>
  if(hrtc->Instance==RTC)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a19      	ldr	r2, [pc, #100]	; (8000ff8 <HAL_RTC_MspInit+0x84>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d12c      	bne.n	8000ff0 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f96:	193b      	adds	r3, r7, r4
 8000f98:	2280      	movs	r2, #128	; 0x80
 8000f9a:	0292      	lsls	r2, r2, #10
 8000f9c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000f9e:	193b      	adds	r3, r7, r4
 8000fa0:	2280      	movs	r2, #128	; 0x80
 8000fa2:	0052      	lsls	r2, r2, #1
 8000fa4:	625a      	str	r2, [r3, #36]	; 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fa6:	193b      	adds	r3, r7, r4
 8000fa8:	0018      	movs	r0, r3
 8000faa:	f001 fd7f 	bl	8002aac <HAL_RCCEx_PeriphCLKConfig>
 8000fae:	1e03      	subs	r3, r0, #0
 8000fb0:	d001      	beq.n	8000fb6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000fb2:	f7ff ffb5 	bl	8000f20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000fb6:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <HAL_RTC_MspInit+0x88>)
 8000fb8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000fba:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <HAL_RTC_MspInit+0x88>)
 8000fbc:	2180      	movs	r1, #128	; 0x80
 8000fbe:	0209      	lsls	r1, r1, #8
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000fc4:	4b0d      	ldr	r3, [pc, #52]	; (8000ffc <HAL_RTC_MspInit+0x88>)
 8000fc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <HAL_RTC_MspInit+0x88>)
 8000fca:	2180      	movs	r1, #128	; 0x80
 8000fcc:	00c9      	lsls	r1, r1, #3
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	63da      	str	r2, [r3, #60]	; 0x3c
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	; (8000ffc <HAL_RTC_MspInit+0x88>)
 8000fd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fd6:	2380      	movs	r3, #128	; 0x80
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	4013      	ands	r3, r2
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	2002      	movs	r0, #2
 8000fe6:	f000 fb57 	bl	8001698 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8000fea:	2002      	movs	r0, #2
 8000fec:	f000 fb69 	bl	80016c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000ff0:	46c0      	nop			; (mov r8, r8)
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	b00f      	add	sp, #60	; 0x3c
 8000ff6:	bd90      	pop	{r4, r7, pc}
 8000ff8:	40002800 	.word	0x40002800
 8000ffc:	40021000 	.word	0x40021000

08001000 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a0e      	ldr	r2, [pc, #56]	; (8001048 <HAL_TIM_Base_MspInit+0x48>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d115      	bne.n	800103e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001012:	4b0e      	ldr	r3, [pc, #56]	; (800104c <HAL_TIM_Base_MspInit+0x4c>)
 8001014:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001016:	4b0d      	ldr	r3, [pc, #52]	; (800104c <HAL_TIM_Base_MspInit+0x4c>)
 8001018:	2180      	movs	r1, #128	; 0x80
 800101a:	0209      	lsls	r1, r1, #8
 800101c:	430a      	orrs	r2, r1
 800101e:	641a      	str	r2, [r3, #64]	; 0x40
 8001020:	4b0a      	ldr	r3, [pc, #40]	; (800104c <HAL_TIM_Base_MspInit+0x4c>)
 8001022:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001024:	2380      	movs	r3, #128	; 0x80
 8001026:	021b      	lsls	r3, r3, #8
 8001028:	4013      	ands	r3, r2
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 800102e:	2200      	movs	r2, #0
 8001030:	2100      	movs	r1, #0
 8001032:	2013      	movs	r0, #19
 8001034:	f000 fb30 	bl	8001698 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8001038:	2013      	movs	r0, #19
 800103a:	f000 fb42 	bl	80016c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	46bd      	mov	sp, r7
 8001042:	b004      	add	sp, #16
 8001044:	bd80      	pop	{r7, pc}
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	40002000 	.word	0x40002000
 800104c:	40021000 	.word	0x40021000

08001050 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001050:	b590      	push	{r4, r7, lr}
 8001052:	b095      	sub	sp, #84	; 0x54
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	233c      	movs	r3, #60	; 0x3c
 800105a:	18fb      	adds	r3, r7, r3
 800105c:	0018      	movs	r0, r3
 800105e:	2314      	movs	r3, #20
 8001060:	001a      	movs	r2, r3
 8001062:	2100      	movs	r1, #0
 8001064:	f004 f992 	bl	800538c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001068:	2414      	movs	r4, #20
 800106a:	193b      	adds	r3, r7, r4
 800106c:	0018      	movs	r0, r3
 800106e:	2328      	movs	r3, #40	; 0x28
 8001070:	001a      	movs	r2, r3
 8001072:	2100      	movs	r1, #0
 8001074:	f004 f98a 	bl	800538c <memset>
  if(huart->Instance==USART1)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a3c      	ldr	r2, [pc, #240]	; (8001170 <HAL_UART_MspInit+0x120>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d171      	bne.n	8001166 <HAL_UART_MspInit+0x116>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001082:	193b      	adds	r3, r7, r4
 8001084:	2201      	movs	r2, #1
 8001086:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001088:	193b      	adds	r3, r7, r4
 800108a:	2200      	movs	r2, #0
 800108c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800108e:	193b      	adds	r3, r7, r4
 8001090:	0018      	movs	r0, r3
 8001092:	f001 fd0b 	bl	8002aac <HAL_RCCEx_PeriphCLKConfig>
 8001096:	1e03      	subs	r3, r0, #0
 8001098:	d001      	beq.n	800109e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800109a:	f7ff ff41 	bl	8000f20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800109e:	4b35      	ldr	r3, [pc, #212]	; (8001174 <HAL_UART_MspInit+0x124>)
 80010a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010a2:	4b34      	ldr	r3, [pc, #208]	; (8001174 <HAL_UART_MspInit+0x124>)
 80010a4:	2180      	movs	r1, #128	; 0x80
 80010a6:	01c9      	lsls	r1, r1, #7
 80010a8:	430a      	orrs	r2, r1
 80010aa:	641a      	str	r2, [r3, #64]	; 0x40
 80010ac:	4b31      	ldr	r3, [pc, #196]	; (8001174 <HAL_UART_MspInit+0x124>)
 80010ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010b0:	2380      	movs	r3, #128	; 0x80
 80010b2:	01db      	lsls	r3, r3, #7
 80010b4:	4013      	ands	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ba:	4b2e      	ldr	r3, [pc, #184]	; (8001174 <HAL_UART_MspInit+0x124>)
 80010bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010be:	4b2d      	ldr	r3, [pc, #180]	; (8001174 <HAL_UART_MspInit+0x124>)
 80010c0:	2101      	movs	r1, #1
 80010c2:	430a      	orrs	r2, r1
 80010c4:	635a      	str	r2, [r3, #52]	; 0x34
 80010c6:	4b2b      	ldr	r3, [pc, #172]	; (8001174 <HAL_UART_MspInit+0x124>)
 80010c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010ca:	2201      	movs	r2, #1
 80010cc:	4013      	ands	r3, r2
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010d2:	213c      	movs	r1, #60	; 0x3c
 80010d4:	187b      	adds	r3, r7, r1
 80010d6:	22c0      	movs	r2, #192	; 0xc0
 80010d8:	00d2      	lsls	r2, r2, #3
 80010da:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010dc:	187b      	adds	r3, r7, r1
 80010de:	2202      	movs	r2, #2
 80010e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	187b      	adds	r3, r7, r1
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e8:	187b      	adds	r3, r7, r1
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80010ee:	187b      	adds	r3, r7, r1
 80010f0:	2201      	movs	r2, #1
 80010f2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f4:	187a      	adds	r2, r7, r1
 80010f6:	23a0      	movs	r3, #160	; 0xa0
 80010f8:	05db      	lsls	r3, r3, #23
 80010fa:	0011      	movs	r1, r2
 80010fc:	0018      	movs	r0, r3
 80010fe:	f000 fe1b 	bl	8001d38 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8001102:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <HAL_UART_MspInit+0x128>)
 8001104:	4a1d      	ldr	r2, [pc, #116]	; (800117c <HAL_UART_MspInit+0x12c>)
 8001106:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001108:	4b1b      	ldr	r3, [pc, #108]	; (8001178 <HAL_UART_MspInit+0x128>)
 800110a:	2232      	movs	r2, #50	; 0x32
 800110c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800110e:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <HAL_UART_MspInit+0x128>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001114:	4b18      	ldr	r3, [pc, #96]	; (8001178 <HAL_UART_MspInit+0x128>)
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800111a:	4b17      	ldr	r3, [pc, #92]	; (8001178 <HAL_UART_MspInit+0x128>)
 800111c:	2280      	movs	r2, #128	; 0x80
 800111e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001120:	4b15      	ldr	r3, [pc, #84]	; (8001178 <HAL_UART_MspInit+0x128>)
 8001122:	2200      	movs	r2, #0
 8001124:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001126:	4b14      	ldr	r3, [pc, #80]	; (8001178 <HAL_UART_MspInit+0x128>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800112c:	4b12      	ldr	r3, [pc, #72]	; (8001178 <HAL_UART_MspInit+0x128>)
 800112e:	2200      	movs	r2, #0
 8001130:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001132:	4b11      	ldr	r3, [pc, #68]	; (8001178 <HAL_UART_MspInit+0x128>)
 8001134:	2200      	movs	r2, #0
 8001136:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001138:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <HAL_UART_MspInit+0x128>)
 800113a:	0018      	movs	r0, r3
 800113c:	f000 fade 	bl	80016fc <HAL_DMA_Init>
 8001140:	1e03      	subs	r3, r0, #0
 8001142:	d001      	beq.n	8001148 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8001144:	f7ff feec 	bl	8000f20 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2180      	movs	r1, #128	; 0x80
 800114c:	4a0a      	ldr	r2, [pc, #40]	; (8001178 <HAL_UART_MspInit+0x128>)
 800114e:	505a      	str	r2, [r3, r1]
 8001150:	4b09      	ldr	r3, [pc, #36]	; (8001178 <HAL_UART_MspInit+0x128>)
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001156:	2200      	movs	r2, #0
 8001158:	2100      	movs	r1, #0
 800115a:	201b      	movs	r0, #27
 800115c:	f000 fa9c 	bl	8001698 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001160:	201b      	movs	r0, #27
 8001162:	f000 faae 	bl	80016c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001166:	46c0      	nop			; (mov r8, r8)
 8001168:	46bd      	mov	sp, r7
 800116a:	b015      	add	sp, #84	; 0x54
 800116c:	bd90      	pop	{r4, r7, pc}
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	40013800 	.word	0x40013800
 8001174:	40021000 	.word	0x40021000
 8001178:	20000228 	.word	0x20000228
 800117c:	40020008 	.word	0x40020008

08001180 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001184:	e7fe      	b.n	8001184 <NMI_Handler+0x4>

08001186 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800118a:	e7fe      	b.n	800118a <HardFault_Handler+0x4>

0800118c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001190:	46c0      	nop			; (mov r8, r8)
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011a4:	f000 f98c 	bl	80014c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011a8:	46c0      	nop			; (mov r8, r8)
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80011b4:	4b03      	ldr	r3, [pc, #12]	; (80011c4 <RTC_TAMP_IRQHandler+0x14>)
 80011b6:	0018      	movs	r0, r3
 80011b8:	f002 f93e 	bl	8003438 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 80011bc:	46c0      	nop			; (mov r8, r8)
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	2000011c 	.word	0x2000011c

080011c8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80011cc:	4b03      	ldr	r3, [pc, #12]	; (80011dc <DMA1_Channel1_IRQHandler+0x14>)
 80011ce:	0018      	movs	r0, r3
 80011d0:	f000 fc70 	bl	8001ab4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80011d4:	46c0      	nop			; (mov r8, r8)
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	20000228 	.word	0x20000228

080011e0 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80011e4:	4b03      	ldr	r3, [pc, #12]	; (80011f4 <TIM14_IRQHandler+0x14>)
 80011e6:	0018      	movs	r0, r3
 80011e8:	f002 fa26 	bl	8003638 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80011ec:	46c0      	nop			; (mov r8, r8)
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	46c0      	nop			; (mov r8, r8)
 80011f4:	20000148 	.word	0x20000148

080011f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011fc:	4b03      	ldr	r3, [pc, #12]	; (800120c <USART1_IRQHandler+0x14>)
 80011fe:	0018      	movs	r0, r3
 8001200:	f002 fcec 	bl	8003bdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001204:	46c0      	nop			; (mov r8, r8)
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	46c0      	nop			; (mov r8, r8)
 800120c:	20000194 	.word	0x20000194

08001210 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
	return 1;
 8001214:	2301      	movs	r3, #1
}
 8001216:	0018      	movs	r0, r3
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <_kill>:

int _kill(int pid, int sig)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001226:	f004 f887 	bl	8005338 <__errno>
 800122a:	0003      	movs	r3, r0
 800122c:	2216      	movs	r2, #22
 800122e:	601a      	str	r2, [r3, #0]
	return -1;
 8001230:	2301      	movs	r3, #1
 8001232:	425b      	negs	r3, r3
}
 8001234:	0018      	movs	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	b002      	add	sp, #8
 800123a:	bd80      	pop	{r7, pc}

0800123c <_exit>:

void _exit (int status)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001244:	2301      	movs	r3, #1
 8001246:	425a      	negs	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	0011      	movs	r1, r2
 800124c:	0018      	movs	r0, r3
 800124e:	f7ff ffe5 	bl	800121c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001252:	e7fe      	b.n	8001252 <_exit+0x16>

08001254 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	e00a      	b.n	800127c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001266:	e000      	b.n	800126a <_read+0x16>
 8001268:	bf00      	nop
 800126a:	0001      	movs	r1, r0
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	1c5a      	adds	r2, r3, #1
 8001270:	60ba      	str	r2, [r7, #8]
 8001272:	b2ca      	uxtb	r2, r1
 8001274:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	3301      	adds	r3, #1
 800127a:	617b      	str	r3, [r7, #20]
 800127c:	697a      	ldr	r2, [r7, #20]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	429a      	cmp	r2, r3
 8001282:	dbf0      	blt.n	8001266 <_read+0x12>
	}

return len;
 8001284:	687b      	ldr	r3, [r7, #4]
}
 8001286:	0018      	movs	r0, r3
 8001288:	46bd      	mov	sp, r7
 800128a:	b006      	add	sp, #24
 800128c:	bd80      	pop	{r7, pc}

0800128e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b086      	sub	sp, #24
 8001292:	af00      	add	r7, sp, #0
 8001294:	60f8      	str	r0, [r7, #12]
 8001296:	60b9      	str	r1, [r7, #8]
 8001298:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
 800129e:	e009      	b.n	80012b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	1c5a      	adds	r2, r3, #1
 80012a4:	60ba      	str	r2, [r7, #8]
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	0018      	movs	r0, r3
 80012aa:	e000      	b.n	80012ae <_write+0x20>
 80012ac:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	3301      	adds	r3, #1
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	697a      	ldr	r2, [r7, #20]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	dbf1      	blt.n	80012a0 <_write+0x12>
	}
	return len;
 80012bc:	687b      	ldr	r3, [r7, #4]
}
 80012be:	0018      	movs	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	b006      	add	sp, #24
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <_close>:

int _close(int file)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
	return -1;
 80012ce:	2301      	movs	r3, #1
 80012d0:	425b      	negs	r3, r3
}
 80012d2:	0018      	movs	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	b002      	add	sp, #8
 80012d8:	bd80      	pop	{r7, pc}

080012da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
 80012e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	2280      	movs	r2, #128	; 0x80
 80012e8:	0192      	lsls	r2, r2, #6
 80012ea:	605a      	str	r2, [r3, #4]
	return 0;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	0018      	movs	r0, r3
 80012f0:	46bd      	mov	sp, r7
 80012f2:	b002      	add	sp, #8
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <_isatty>:

int _isatty(int file)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
	return 1;
 80012fe:	2301      	movs	r3, #1
}
 8001300:	0018      	movs	r0, r3
 8001302:	46bd      	mov	sp, r7
 8001304:	b002      	add	sp, #8
 8001306:	bd80      	pop	{r7, pc}

08001308 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
	return 0;
 8001314:	2300      	movs	r3, #0
}
 8001316:	0018      	movs	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	b004      	add	sp, #16
 800131c:	bd80      	pop	{r7, pc}
	...

08001320 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001328:	4a14      	ldr	r2, [pc, #80]	; (800137c <_sbrk+0x5c>)
 800132a:	4b15      	ldr	r3, [pc, #84]	; (8001380 <_sbrk+0x60>)
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001334:	4b13      	ldr	r3, [pc, #76]	; (8001384 <_sbrk+0x64>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d102      	bne.n	8001342 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800133c:	4b11      	ldr	r3, [pc, #68]	; (8001384 <_sbrk+0x64>)
 800133e:	4a12      	ldr	r2, [pc, #72]	; (8001388 <_sbrk+0x68>)
 8001340:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001342:	4b10      	ldr	r3, [pc, #64]	; (8001384 <_sbrk+0x64>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	18d3      	adds	r3, r2, r3
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	429a      	cmp	r2, r3
 800134e:	d207      	bcs.n	8001360 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001350:	f003 fff2 	bl	8005338 <__errno>
 8001354:	0003      	movs	r3, r0
 8001356:	220c      	movs	r2, #12
 8001358:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800135a:	2301      	movs	r3, #1
 800135c:	425b      	negs	r3, r3
 800135e:	e009      	b.n	8001374 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001360:	4b08      	ldr	r3, [pc, #32]	; (8001384 <_sbrk+0x64>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001366:	4b07      	ldr	r3, [pc, #28]	; (8001384 <_sbrk+0x64>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	18d2      	adds	r2, r2, r3
 800136e:	4b05      	ldr	r3, [pc, #20]	; (8001384 <_sbrk+0x64>)
 8001370:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001372:	68fb      	ldr	r3, [r7, #12]
}
 8001374:	0018      	movs	r0, r3
 8001376:	46bd      	mov	sp, r7
 8001378:	b006      	add	sp, #24
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20002000 	.word	0x20002000
 8001380:	00000400 	.word	0x00000400
 8001384:	200004e0 	.word	0x200004e0
 8001388:	200004f8 	.word	0x200004f8

0800138c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001390:	46c0      	nop			; (mov r8, r8)
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001398:	480d      	ldr	r0, [pc, #52]	; (80013d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800139a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800139c:	f7ff fff6 	bl	800138c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013a0:	480c      	ldr	r0, [pc, #48]	; (80013d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80013a2:	490d      	ldr	r1, [pc, #52]	; (80013d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013a4:	4a0d      	ldr	r2, [pc, #52]	; (80013dc <LoopForever+0xe>)
  movs r3, #0
 80013a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a8:	e002      	b.n	80013b0 <LoopCopyDataInit>

080013aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ae:	3304      	adds	r3, #4

080013b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b4:	d3f9      	bcc.n	80013aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013b6:	4a0a      	ldr	r2, [pc, #40]	; (80013e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013b8:	4c0a      	ldr	r4, [pc, #40]	; (80013e4 <LoopForever+0x16>)
  movs r3, #0
 80013ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013bc:	e001      	b.n	80013c2 <LoopFillZerobss>

080013be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c0:	3204      	adds	r2, #4

080013c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c4:	d3fb      	bcc.n	80013be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80013c6:	f003 ffbd 	bl	8005344 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80013ca:	f7ff f939 	bl	8000640 <main>

080013ce <LoopForever>:

LoopForever:
  b LoopForever
 80013ce:	e7fe      	b.n	80013ce <LoopForever>
  ldr   r0, =_estack
 80013d0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80013d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d8:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 80013dc:	080077fc 	.word	0x080077fc
  ldr r2, =_sbss
 80013e0:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 80013e4:	200004f8 	.word	0x200004f8

080013e8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013e8:	e7fe      	b.n	80013e8 <ADC1_IRQHandler>
	...

080013ec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013f2:	1dfb      	adds	r3, r7, #7
 80013f4:	2200      	movs	r2, #0
 80013f6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013f8:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <HAL_Init+0x3c>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <HAL_Init+0x3c>)
 80013fe:	2180      	movs	r1, #128	; 0x80
 8001400:	0049      	lsls	r1, r1, #1
 8001402:	430a      	orrs	r2, r1
 8001404:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001406:	2000      	movs	r0, #0
 8001408:	f000 f810 	bl	800142c <HAL_InitTick>
 800140c:	1e03      	subs	r3, r0, #0
 800140e:	d003      	beq.n	8001418 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001410:	1dfb      	adds	r3, r7, #7
 8001412:	2201      	movs	r2, #1
 8001414:	701a      	strb	r2, [r3, #0]
 8001416:	e001      	b.n	800141c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001418:	f7ff fd88 	bl	8000f2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800141c:	1dfb      	adds	r3, r7, #7
 800141e:	781b      	ldrb	r3, [r3, #0]
}
 8001420:	0018      	movs	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	b002      	add	sp, #8
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40022000 	.word	0x40022000

0800142c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800142c:	b590      	push	{r4, r7, lr}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001434:	230f      	movs	r3, #15
 8001436:	18fb      	adds	r3, r7, r3
 8001438:	2200      	movs	r2, #0
 800143a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800143c:	4b1d      	ldr	r3, [pc, #116]	; (80014b4 <HAL_InitTick+0x88>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d02b      	beq.n	800149c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001444:	4b1c      	ldr	r3, [pc, #112]	; (80014b8 <HAL_InitTick+0x8c>)
 8001446:	681c      	ldr	r4, [r3, #0]
 8001448:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <HAL_InitTick+0x88>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	0019      	movs	r1, r3
 800144e:	23fa      	movs	r3, #250	; 0xfa
 8001450:	0098      	lsls	r0, r3, #2
 8001452:	f7fe fe69 	bl	8000128 <__udivsi3>
 8001456:	0003      	movs	r3, r0
 8001458:	0019      	movs	r1, r3
 800145a:	0020      	movs	r0, r4
 800145c:	f7fe fe64 	bl	8000128 <__udivsi3>
 8001460:	0003      	movs	r3, r0
 8001462:	0018      	movs	r0, r3
 8001464:	f000 f93d 	bl	80016e2 <HAL_SYSTICK_Config>
 8001468:	1e03      	subs	r3, r0, #0
 800146a:	d112      	bne.n	8001492 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2b03      	cmp	r3, #3
 8001470:	d80a      	bhi.n	8001488 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	2301      	movs	r3, #1
 8001476:	425b      	negs	r3, r3
 8001478:	2200      	movs	r2, #0
 800147a:	0018      	movs	r0, r3
 800147c:	f000 f90c 	bl	8001698 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001480:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <HAL_InitTick+0x90>)
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	e00d      	b.n	80014a4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001488:	230f      	movs	r3, #15
 800148a:	18fb      	adds	r3, r7, r3
 800148c:	2201      	movs	r2, #1
 800148e:	701a      	strb	r2, [r3, #0]
 8001490:	e008      	b.n	80014a4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001492:	230f      	movs	r3, #15
 8001494:	18fb      	adds	r3, r7, r3
 8001496:	2201      	movs	r2, #1
 8001498:	701a      	strb	r2, [r3, #0]
 800149a:	e003      	b.n	80014a4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800149c:	230f      	movs	r3, #15
 800149e:	18fb      	adds	r3, r7, r3
 80014a0:	2201      	movs	r2, #1
 80014a2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80014a4:	230f      	movs	r3, #15
 80014a6:	18fb      	adds	r3, r7, r3
 80014a8:	781b      	ldrb	r3, [r3, #0]
}
 80014aa:	0018      	movs	r0, r3
 80014ac:	46bd      	mov	sp, r7
 80014ae:	b005      	add	sp, #20
 80014b0:	bd90      	pop	{r4, r7, pc}
 80014b2:	46c0      	nop			; (mov r8, r8)
 80014b4:	20000098 	.word	0x20000098
 80014b8:	20000090 	.word	0x20000090
 80014bc:	20000094 	.word	0x20000094

080014c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014c4:	4b05      	ldr	r3, [pc, #20]	; (80014dc <HAL_IncTick+0x1c>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	001a      	movs	r2, r3
 80014ca:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <HAL_IncTick+0x20>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	18d2      	adds	r2, r2, r3
 80014d0:	4b03      	ldr	r3, [pc, #12]	; (80014e0 <HAL_IncTick+0x20>)
 80014d2:	601a      	str	r2, [r3, #0]
}
 80014d4:	46c0      	nop			; (mov r8, r8)
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	46c0      	nop			; (mov r8, r8)
 80014dc:	20000098 	.word	0x20000098
 80014e0:	200004e4 	.word	0x200004e4

080014e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  return uwTick;
 80014e8:	4b02      	ldr	r3, [pc, #8]	; (80014f4 <HAL_GetTick+0x10>)
 80014ea:	681b      	ldr	r3, [r3, #0]
}
 80014ec:	0018      	movs	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	46c0      	nop			; (mov r8, r8)
 80014f4:	200004e4 	.word	0x200004e4

080014f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001500:	f7ff fff0 	bl	80014e4 <HAL_GetTick>
 8001504:	0003      	movs	r3, r0
 8001506:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	3301      	adds	r3, #1
 8001510:	d005      	beq.n	800151e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001512:	4b0a      	ldr	r3, [pc, #40]	; (800153c <HAL_Delay+0x44>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	001a      	movs	r2, r3
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	189b      	adds	r3, r3, r2
 800151c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	f7ff ffe0 	bl	80014e4 <HAL_GetTick>
 8001524:	0002      	movs	r2, r0
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	429a      	cmp	r2, r3
 800152e:	d8f7      	bhi.n	8001520 <HAL_Delay+0x28>
  {
  }
}
 8001530:	46c0      	nop			; (mov r8, r8)
 8001532:	46c0      	nop			; (mov r8, r8)
 8001534:	46bd      	mov	sp, r7
 8001536:	b004      	add	sp, #16
 8001538:	bd80      	pop	{r7, pc}
 800153a:	46c0      	nop			; (mov r8, r8)
 800153c:	20000098 	.word	0x20000098

08001540 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	0002      	movs	r2, r0
 8001548:	1dfb      	adds	r3, r7, #7
 800154a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800154c:	1dfb      	adds	r3, r7, #7
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b7f      	cmp	r3, #127	; 0x7f
 8001552:	d809      	bhi.n	8001568 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001554:	1dfb      	adds	r3, r7, #7
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	001a      	movs	r2, r3
 800155a:	231f      	movs	r3, #31
 800155c:	401a      	ands	r2, r3
 800155e:	4b04      	ldr	r3, [pc, #16]	; (8001570 <__NVIC_EnableIRQ+0x30>)
 8001560:	2101      	movs	r1, #1
 8001562:	4091      	lsls	r1, r2
 8001564:	000a      	movs	r2, r1
 8001566:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001568:	46c0      	nop			; (mov r8, r8)
 800156a:	46bd      	mov	sp, r7
 800156c:	b002      	add	sp, #8
 800156e:	bd80      	pop	{r7, pc}
 8001570:	e000e100 	.word	0xe000e100

08001574 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001574:	b590      	push	{r4, r7, lr}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	0002      	movs	r2, r0
 800157c:	6039      	str	r1, [r7, #0]
 800157e:	1dfb      	adds	r3, r7, #7
 8001580:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001582:	1dfb      	adds	r3, r7, #7
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b7f      	cmp	r3, #127	; 0x7f
 8001588:	d828      	bhi.n	80015dc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800158a:	4a2f      	ldr	r2, [pc, #188]	; (8001648 <__NVIC_SetPriority+0xd4>)
 800158c:	1dfb      	adds	r3, r7, #7
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	b25b      	sxtb	r3, r3
 8001592:	089b      	lsrs	r3, r3, #2
 8001594:	33c0      	adds	r3, #192	; 0xc0
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	589b      	ldr	r3, [r3, r2]
 800159a:	1dfa      	adds	r2, r7, #7
 800159c:	7812      	ldrb	r2, [r2, #0]
 800159e:	0011      	movs	r1, r2
 80015a0:	2203      	movs	r2, #3
 80015a2:	400a      	ands	r2, r1
 80015a4:	00d2      	lsls	r2, r2, #3
 80015a6:	21ff      	movs	r1, #255	; 0xff
 80015a8:	4091      	lsls	r1, r2
 80015aa:	000a      	movs	r2, r1
 80015ac:	43d2      	mvns	r2, r2
 80015ae:	401a      	ands	r2, r3
 80015b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	019b      	lsls	r3, r3, #6
 80015b6:	22ff      	movs	r2, #255	; 0xff
 80015b8:	401a      	ands	r2, r3
 80015ba:	1dfb      	adds	r3, r7, #7
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	0018      	movs	r0, r3
 80015c0:	2303      	movs	r3, #3
 80015c2:	4003      	ands	r3, r0
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015c8:	481f      	ldr	r0, [pc, #124]	; (8001648 <__NVIC_SetPriority+0xd4>)
 80015ca:	1dfb      	adds	r3, r7, #7
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	b25b      	sxtb	r3, r3
 80015d0:	089b      	lsrs	r3, r3, #2
 80015d2:	430a      	orrs	r2, r1
 80015d4:	33c0      	adds	r3, #192	; 0xc0
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80015da:	e031      	b.n	8001640 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015dc:	4a1b      	ldr	r2, [pc, #108]	; (800164c <__NVIC_SetPriority+0xd8>)
 80015de:	1dfb      	adds	r3, r7, #7
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	0019      	movs	r1, r3
 80015e4:	230f      	movs	r3, #15
 80015e6:	400b      	ands	r3, r1
 80015e8:	3b08      	subs	r3, #8
 80015ea:	089b      	lsrs	r3, r3, #2
 80015ec:	3306      	adds	r3, #6
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	18d3      	adds	r3, r2, r3
 80015f2:	3304      	adds	r3, #4
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	1dfa      	adds	r2, r7, #7
 80015f8:	7812      	ldrb	r2, [r2, #0]
 80015fa:	0011      	movs	r1, r2
 80015fc:	2203      	movs	r2, #3
 80015fe:	400a      	ands	r2, r1
 8001600:	00d2      	lsls	r2, r2, #3
 8001602:	21ff      	movs	r1, #255	; 0xff
 8001604:	4091      	lsls	r1, r2
 8001606:	000a      	movs	r2, r1
 8001608:	43d2      	mvns	r2, r2
 800160a:	401a      	ands	r2, r3
 800160c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	019b      	lsls	r3, r3, #6
 8001612:	22ff      	movs	r2, #255	; 0xff
 8001614:	401a      	ands	r2, r3
 8001616:	1dfb      	adds	r3, r7, #7
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	0018      	movs	r0, r3
 800161c:	2303      	movs	r3, #3
 800161e:	4003      	ands	r3, r0
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001624:	4809      	ldr	r0, [pc, #36]	; (800164c <__NVIC_SetPriority+0xd8>)
 8001626:	1dfb      	adds	r3, r7, #7
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	001c      	movs	r4, r3
 800162c:	230f      	movs	r3, #15
 800162e:	4023      	ands	r3, r4
 8001630:	3b08      	subs	r3, #8
 8001632:	089b      	lsrs	r3, r3, #2
 8001634:	430a      	orrs	r2, r1
 8001636:	3306      	adds	r3, #6
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	18c3      	adds	r3, r0, r3
 800163c:	3304      	adds	r3, #4
 800163e:	601a      	str	r2, [r3, #0]
}
 8001640:	46c0      	nop			; (mov r8, r8)
 8001642:	46bd      	mov	sp, r7
 8001644:	b003      	add	sp, #12
 8001646:	bd90      	pop	{r4, r7, pc}
 8001648:	e000e100 	.word	0xe000e100
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	1e5a      	subs	r2, r3, #1
 800165c:	2380      	movs	r3, #128	; 0x80
 800165e:	045b      	lsls	r3, r3, #17
 8001660:	429a      	cmp	r2, r3
 8001662:	d301      	bcc.n	8001668 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001664:	2301      	movs	r3, #1
 8001666:	e010      	b.n	800168a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001668:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <SysTick_Config+0x44>)
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	3a01      	subs	r2, #1
 800166e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001670:	2301      	movs	r3, #1
 8001672:	425b      	negs	r3, r3
 8001674:	2103      	movs	r1, #3
 8001676:	0018      	movs	r0, r3
 8001678:	f7ff ff7c 	bl	8001574 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800167c:	4b05      	ldr	r3, [pc, #20]	; (8001694 <SysTick_Config+0x44>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001682:	4b04      	ldr	r3, [pc, #16]	; (8001694 <SysTick_Config+0x44>)
 8001684:	2207      	movs	r2, #7
 8001686:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001688:	2300      	movs	r3, #0
}
 800168a:	0018      	movs	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	b002      	add	sp, #8
 8001690:	bd80      	pop	{r7, pc}
 8001692:	46c0      	nop			; (mov r8, r8)
 8001694:	e000e010 	.word	0xe000e010

08001698 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	60b9      	str	r1, [r7, #8]
 80016a0:	607a      	str	r2, [r7, #4]
 80016a2:	210f      	movs	r1, #15
 80016a4:	187b      	adds	r3, r7, r1
 80016a6:	1c02      	adds	r2, r0, #0
 80016a8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80016aa:	68ba      	ldr	r2, [r7, #8]
 80016ac:	187b      	adds	r3, r7, r1
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	b25b      	sxtb	r3, r3
 80016b2:	0011      	movs	r1, r2
 80016b4:	0018      	movs	r0, r3
 80016b6:	f7ff ff5d 	bl	8001574 <__NVIC_SetPriority>
}
 80016ba:	46c0      	nop			; (mov r8, r8)
 80016bc:	46bd      	mov	sp, r7
 80016be:	b004      	add	sp, #16
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b082      	sub	sp, #8
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	0002      	movs	r2, r0
 80016ca:	1dfb      	adds	r3, r7, #7
 80016cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016ce:	1dfb      	adds	r3, r7, #7
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	b25b      	sxtb	r3, r3
 80016d4:	0018      	movs	r0, r3
 80016d6:	f7ff ff33 	bl	8001540 <__NVIC_EnableIRQ>
}
 80016da:	46c0      	nop			; (mov r8, r8)
 80016dc:	46bd      	mov	sp, r7
 80016de:	b002      	add	sp, #8
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b082      	sub	sp, #8
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	0018      	movs	r0, r3
 80016ee:	f7ff ffaf 	bl	8001650 <SysTick_Config>
 80016f2:	0003      	movs	r3, r0
}
 80016f4:	0018      	movs	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	b002      	add	sp, #8
 80016fa:	bd80      	pop	{r7, pc}

080016fc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e077      	b.n	80017fe <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a3d      	ldr	r2, [pc, #244]	; (8001808 <HAL_DMA_Init+0x10c>)
 8001714:	4694      	mov	ip, r2
 8001716:	4463      	add	r3, ip
 8001718:	2114      	movs	r1, #20
 800171a:	0018      	movs	r0, r3
 800171c:	f7fe fd04 	bl	8000128 <__udivsi3>
 8001720:	0003      	movs	r3, r0
 8001722:	009a      	lsls	r2, r3, #2
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2225      	movs	r2, #37	; 0x25
 800172c:	2102      	movs	r1, #2
 800172e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4934      	ldr	r1, [pc, #208]	; (800180c <HAL_DMA_Init+0x110>)
 800173c:	400a      	ands	r2, r1
 800173e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6819      	ldr	r1, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689a      	ldr	r2, [r3, #8]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	431a      	orrs	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	691b      	ldr	r3, [r3, #16]
 8001754:	431a      	orrs	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	695b      	ldr	r3, [r3, #20]
 800175a:	431a      	orrs	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	431a      	orrs	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	69db      	ldr	r3, [r3, #28]
 8001766:	431a      	orrs	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a1b      	ldr	r3, [r3, #32]
 800176c:	431a      	orrs	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	0018      	movs	r0, r3
 800177a:	f000 fa8d 	bl	8001c98 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	2380      	movs	r3, #128	; 0x80
 8001784:	01db      	lsls	r3, r3, #7
 8001786:	429a      	cmp	r2, r3
 8001788:	d102      	bne.n	8001790 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001798:	213f      	movs	r1, #63	; 0x3f
 800179a:	400a      	ands	r2, r1
 800179c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80017a6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d011      	beq.n	80017d4 <HAL_DMA_Init+0xd8>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	2b04      	cmp	r3, #4
 80017b6:	d80d      	bhi.n	80017d4 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	0018      	movs	r0, r3
 80017bc:	f000 fa98 	bl	8001cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	e008      	b.n	80017e6 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2225      	movs	r2, #37	; 0x25
 80017f0:	2101      	movs	r1, #1
 80017f2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2224      	movs	r2, #36	; 0x24
 80017f8:	2100      	movs	r1, #0
 80017fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	0018      	movs	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	b002      	add	sp, #8
 8001804:	bd80      	pop	{r7, pc}
 8001806:	46c0      	nop			; (mov r8, r8)
 8001808:	bffdfff8 	.word	0xbffdfff8
 800180c:	ffff800f 	.word	0xffff800f

08001810 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
 800181c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800181e:	2317      	movs	r3, #23
 8001820:	18fb      	adds	r3, r7, r3
 8001822:	2200      	movs	r2, #0
 8001824:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2224      	movs	r2, #36	; 0x24
 800182a:	5c9b      	ldrb	r3, [r3, r2]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d101      	bne.n	8001834 <HAL_DMA_Start_IT+0x24>
 8001830:	2302      	movs	r3, #2
 8001832:	e06f      	b.n	8001914 <HAL_DMA_Start_IT+0x104>
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2224      	movs	r2, #36	; 0x24
 8001838:	2101      	movs	r1, #1
 800183a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2225      	movs	r2, #37	; 0x25
 8001840:	5c9b      	ldrb	r3, [r3, r2]
 8001842:	b2db      	uxtb	r3, r3
 8001844:	2b01      	cmp	r3, #1
 8001846:	d157      	bne.n	80018f8 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2225      	movs	r2, #37	; 0x25
 800184c:	2102      	movs	r1, #2
 800184e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2200      	movs	r2, #0
 8001854:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2101      	movs	r1, #1
 8001862:	438a      	bics	r2, r1
 8001864:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	68b9      	ldr	r1, [r7, #8]
 800186c:	68f8      	ldr	r0, [r7, #12]
 800186e:	f000 f9d3 	bl	8001c18 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	2b00      	cmp	r3, #0
 8001878:	d008      	beq.n	800188c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	210e      	movs	r1, #14
 8001886:	430a      	orrs	r2, r1
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	e00f      	b.n	80018ac <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2104      	movs	r1, #4
 8001898:	438a      	bics	r2, r1
 800189a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	210a      	movs	r1, #10
 80018a8:	430a      	orrs	r2, r1
 80018aa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	2380      	movs	r3, #128	; 0x80
 80018b4:	025b      	lsls	r3, r3, #9
 80018b6:	4013      	ands	r3, r2
 80018b8:	d008      	beq.n	80018cc <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c4:	2180      	movs	r1, #128	; 0x80
 80018c6:	0049      	lsls	r1, r1, #1
 80018c8:	430a      	orrs	r2, r1
 80018ca:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d008      	beq.n	80018e6 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018de:	2180      	movs	r1, #128	; 0x80
 80018e0:	0049      	lsls	r1, r1, #1
 80018e2:	430a      	orrs	r2, r1
 80018e4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2101      	movs	r1, #1
 80018f2:	430a      	orrs	r2, r1
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	e00a      	b.n	800190e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2280      	movs	r2, #128	; 0x80
 80018fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2224      	movs	r2, #36	; 0x24
 8001902:	2100      	movs	r1, #0
 8001904:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8001906:	2317      	movs	r3, #23
 8001908:	18fb      	adds	r3, r7, r3
 800190a:	2201      	movs	r2, #1
 800190c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800190e:	2317      	movs	r3, #23
 8001910:	18fb      	adds	r3, r7, r3
 8001912:	781b      	ldrb	r3, [r3, #0]
}
 8001914:	0018      	movs	r0, r3
 8001916:	46bd      	mov	sp, r7
 8001918:	b006      	add	sp, #24
 800191a:	bd80      	pop	{r7, pc}

0800191c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e050      	b.n	80019d0 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2225      	movs	r2, #37	; 0x25
 8001932:	5c9b      	ldrb	r3, [r3, r2]
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d008      	beq.n	800194c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2204      	movs	r2, #4
 800193e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2224      	movs	r2, #36	; 0x24
 8001944:	2100      	movs	r1, #0
 8001946:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e041      	b.n	80019d0 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	210e      	movs	r1, #14
 8001958:	438a      	bics	r2, r1
 800195a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	491c      	ldr	r1, [pc, #112]	; (80019d8 <HAL_DMA_Abort+0xbc>)
 8001968:	400a      	ands	r2, r1
 800196a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2101      	movs	r1, #1
 8001978:	438a      	bics	r2, r1
 800197a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 800197c:	4b17      	ldr	r3, [pc, #92]	; (80019dc <HAL_DMA_Abort+0xc0>)
 800197e:	6859      	ldr	r1, [r3, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001984:	221c      	movs	r2, #28
 8001986:	4013      	ands	r3, r2
 8001988:	2201      	movs	r2, #1
 800198a:	409a      	lsls	r2, r3
 800198c:	4b13      	ldr	r3, [pc, #76]	; (80019dc <HAL_DMA_Abort+0xc0>)
 800198e:	430a      	orrs	r2, r1
 8001990:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800199a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d00c      	beq.n	80019be <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019ae:	490a      	ldr	r1, [pc, #40]	; (80019d8 <HAL_DMA_Abort+0xbc>)
 80019b0:	400a      	ands	r2, r1
 80019b2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80019bc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2225      	movs	r2, #37	; 0x25
 80019c2:	2101      	movs	r1, #1
 80019c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2224      	movs	r2, #36	; 0x24
 80019ca:	2100      	movs	r1, #0
 80019cc:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80019ce:	2300      	movs	r3, #0
}
 80019d0:	0018      	movs	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	b002      	add	sp, #8
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	fffffeff 	.word	0xfffffeff
 80019dc:	40020000 	.word	0x40020000

080019e0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019e8:	210f      	movs	r1, #15
 80019ea:	187b      	adds	r3, r7, r1
 80019ec:	2200      	movs	r2, #0
 80019ee:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2225      	movs	r2, #37	; 0x25
 80019f4:	5c9b      	ldrb	r3, [r3, r2]
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d006      	beq.n	8001a0a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2204      	movs	r2, #4
 8001a00:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001a02:	187b      	adds	r3, r7, r1
 8001a04:	2201      	movs	r2, #1
 8001a06:	701a      	strb	r2, [r3, #0]
 8001a08:	e049      	b.n	8001a9e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	210e      	movs	r1, #14
 8001a16:	438a      	bics	r2, r1
 8001a18:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2101      	movs	r1, #1
 8001a26:	438a      	bics	r2, r1
 8001a28:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a34:	491d      	ldr	r1, [pc, #116]	; (8001aac <HAL_DMA_Abort_IT+0xcc>)
 8001a36:	400a      	ands	r2, r1
 8001a38:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001a3a:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <HAL_DMA_Abort_IT+0xd0>)
 8001a3c:	6859      	ldr	r1, [r3, #4]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	221c      	movs	r2, #28
 8001a44:	4013      	ands	r3, r2
 8001a46:	2201      	movs	r2, #1
 8001a48:	409a      	lsls	r2, r3
 8001a4a:	4b19      	ldr	r3, [pc, #100]	; (8001ab0 <HAL_DMA_Abort_IT+0xd0>)
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001a58:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d00c      	beq.n	8001a7c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a6c:	490f      	ldr	r1, [pc, #60]	; (8001aac <HAL_DMA_Abort_IT+0xcc>)
 8001a6e:	400a      	ands	r2, r1
 8001a70:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001a7a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2225      	movs	r2, #37	; 0x25
 8001a80:	2101      	movs	r1, #1
 8001a82:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2224      	movs	r2, #36	; 0x24
 8001a88:	2100      	movs	r1, #0
 8001a8a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d004      	beq.n	8001a9e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	0010      	movs	r0, r2
 8001a9c:	4798      	blx	r3
    }
  }
  return status;
 8001a9e:	230f      	movs	r3, #15
 8001aa0:	18fb      	adds	r3, r7, r3
 8001aa2:	781b      	ldrb	r3, [r3, #0]
}
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	b004      	add	sp, #16
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	fffffeff 	.word	0xfffffeff
 8001ab0:	40020000 	.word	0x40020000

08001ab4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001abc:	4b55      	ldr	r3, [pc, #340]	; (8001c14 <HAL_DMA_IRQHandler+0x160>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	221c      	movs	r2, #28
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	2204      	movs	r2, #4
 8001ad4:	409a      	lsls	r2, r3
 8001ad6:	0013      	movs	r3, r2
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	4013      	ands	r3, r2
 8001adc:	d027      	beq.n	8001b2e <HAL_DMA_IRQHandler+0x7a>
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	2204      	movs	r2, #4
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d023      	beq.n	8001b2e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2220      	movs	r2, #32
 8001aee:	4013      	ands	r3, r2
 8001af0:	d107      	bne.n	8001b02 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2104      	movs	r1, #4
 8001afe:	438a      	bics	r2, r1
 8001b00:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8001b02:	4b44      	ldr	r3, [pc, #272]	; (8001c14 <HAL_DMA_IRQHandler+0x160>)
 8001b04:	6859      	ldr	r1, [r3, #4]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	221c      	movs	r2, #28
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	2204      	movs	r2, #4
 8001b10:	409a      	lsls	r2, r3
 8001b12:	4b40      	ldr	r3, [pc, #256]	; (8001c14 <HAL_DMA_IRQHandler+0x160>)
 8001b14:	430a      	orrs	r2, r1
 8001b16:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d100      	bne.n	8001b22 <HAL_DMA_IRQHandler+0x6e>
 8001b20:	e073      	b.n	8001c0a <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	0010      	movs	r0, r2
 8001b2a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001b2c:	e06d      	b.n	8001c0a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	221c      	movs	r2, #28
 8001b34:	4013      	ands	r3, r2
 8001b36:	2202      	movs	r2, #2
 8001b38:	409a      	lsls	r2, r3
 8001b3a:	0013      	movs	r3, r2
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	d02e      	beq.n	8001ba0 <HAL_DMA_IRQHandler+0xec>
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	2202      	movs	r2, #2
 8001b46:	4013      	ands	r3, r2
 8001b48:	d02a      	beq.n	8001ba0 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2220      	movs	r2, #32
 8001b52:	4013      	ands	r3, r2
 8001b54:	d10b      	bne.n	8001b6e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	210a      	movs	r1, #10
 8001b62:	438a      	bics	r2, r1
 8001b64:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2225      	movs	r2, #37	; 0x25
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001b6e:	4b29      	ldr	r3, [pc, #164]	; (8001c14 <HAL_DMA_IRQHandler+0x160>)
 8001b70:	6859      	ldr	r1, [r3, #4]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	221c      	movs	r2, #28
 8001b78:	4013      	ands	r3, r2
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	409a      	lsls	r2, r3
 8001b7e:	4b25      	ldr	r3, [pc, #148]	; (8001c14 <HAL_DMA_IRQHandler+0x160>)
 8001b80:	430a      	orrs	r2, r1
 8001b82:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2224      	movs	r2, #36	; 0x24
 8001b88:	2100      	movs	r1, #0
 8001b8a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d03a      	beq.n	8001c0a <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	0010      	movs	r0, r2
 8001b9c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001b9e:	e034      	b.n	8001c0a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba4:	221c      	movs	r2, #28
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	2208      	movs	r2, #8
 8001baa:	409a      	lsls	r2, r3
 8001bac:	0013      	movs	r3, r2
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	d02b      	beq.n	8001c0c <HAL_DMA_IRQHandler+0x158>
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	2208      	movs	r2, #8
 8001bb8:	4013      	ands	r3, r2
 8001bba:	d027      	beq.n	8001c0c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	210e      	movs	r1, #14
 8001bc8:	438a      	bics	r2, r1
 8001bca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001bcc:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <HAL_DMA_IRQHandler+0x160>)
 8001bce:	6859      	ldr	r1, [r3, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd4:	221c      	movs	r2, #28
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	2201      	movs	r2, #1
 8001bda:	409a      	lsls	r2, r3
 8001bdc:	4b0d      	ldr	r3, [pc, #52]	; (8001c14 <HAL_DMA_IRQHandler+0x160>)
 8001bde:	430a      	orrs	r2, r1
 8001be0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2225      	movs	r2, #37	; 0x25
 8001bec:	2101      	movs	r1, #1
 8001bee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2224      	movs	r2, #36	; 0x24
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d005      	beq.n	8001c0c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	0010      	movs	r0, r2
 8001c08:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001c0a:	46c0      	nop			; (mov r8, r8)
 8001c0c:	46c0      	nop			; (mov r8, r8)
}
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	b004      	add	sp, #16
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40020000 	.word	0x40020000

08001c18 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
 8001c24:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001c2e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d004      	beq.n	8001c42 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001c40:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001c42:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <DMA_SetConfig+0x7c>)
 8001c44:	6859      	ldr	r1, [r3, #4]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	221c      	movs	r2, #28
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	2201      	movs	r2, #1
 8001c50:	409a      	lsls	r2, r3
 8001c52:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <DMA_SetConfig+0x7c>)
 8001c54:	430a      	orrs	r2, r1
 8001c56:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2b10      	cmp	r3, #16
 8001c66:	d108      	bne.n	8001c7a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68ba      	ldr	r2, [r7, #8]
 8001c76:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001c78:	e007      	b.n	8001c8a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	60da      	str	r2, [r3, #12]
}
 8001c8a:	46c0      	nop			; (mov r8, r8)
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	b004      	add	sp, #16
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	46c0      	nop			; (mov r8, r8)
 8001c94:	40020000 	.word	0x40020000

08001c98 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca4:	089b      	lsrs	r3, r3, #2
 8001ca6:	4a10      	ldr	r2, [pc, #64]	; (8001ce8 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001ca8:	4694      	mov	ip, r2
 8001caa:	4463      	add	r3, ip
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	001a      	movs	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	001a      	movs	r2, r3
 8001cba:	23ff      	movs	r3, #255	; 0xff
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	3b08      	subs	r3, #8
 8001cc0:	2114      	movs	r1, #20
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	f7fe fa30 	bl	8000128 <__udivsi3>
 8001cc8:	0003      	movs	r3, r0
 8001cca:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a07      	ldr	r2, [pc, #28]	; (8001cec <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001cd0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	221f      	movs	r2, #31
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	2201      	movs	r2, #1
 8001cda:	409a      	lsls	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001ce0:	46c0      	nop			; (mov r8, r8)
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	b004      	add	sp, #16
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	10008200 	.word	0x10008200
 8001cec:	40020880 	.word	0x40020880

08001cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	223f      	movs	r2, #63	; 0x3f
 8001cfe:	4013      	ands	r3, r2
 8001d00:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	4a0a      	ldr	r2, [pc, #40]	; (8001d30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001d06:	4694      	mov	ip, r2
 8001d08:	4463      	add	r3, ip
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	001a      	movs	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a07      	ldr	r2, [pc, #28]	; (8001d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001d16:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	2203      	movs	r2, #3
 8001d1e:	4013      	ands	r3, r2
 8001d20:	2201      	movs	r2, #1
 8001d22:	409a      	lsls	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001d28:	46c0      	nop			; (mov r8, r8)
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	b004      	add	sp, #16
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	1000823f 	.word	0x1000823f
 8001d34:	40020940 	.word	0x40020940

08001d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d46:	e147      	b.n	8001fd8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	4091      	lsls	r1, r2
 8001d52:	000a      	movs	r2, r1
 8001d54:	4013      	ands	r3, r2
 8001d56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d100      	bne.n	8001d60 <HAL_GPIO_Init+0x28>
 8001d5e:	e138      	b.n	8001fd2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2203      	movs	r2, #3
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d005      	beq.n	8001d78 <HAL_GPIO_Init+0x40>
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2203      	movs	r2, #3
 8001d72:	4013      	ands	r3, r2
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d130      	bne.n	8001dda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	2203      	movs	r2, #3
 8001d84:	409a      	lsls	r2, r3
 8001d86:	0013      	movs	r3, r2
 8001d88:	43da      	mvns	r2, r3
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	68da      	ldr	r2, [r3, #12]
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	409a      	lsls	r2, r3
 8001d9a:	0013      	movs	r3, r2
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dae:	2201      	movs	r2, #1
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	409a      	lsls	r2, r3
 8001db4:	0013      	movs	r3, r2
 8001db6:	43da      	mvns	r2, r3
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	091b      	lsrs	r3, r3, #4
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	401a      	ands	r2, r3
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	409a      	lsls	r2, r3
 8001dcc:	0013      	movs	r3, r2
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2203      	movs	r2, #3
 8001de0:	4013      	ands	r3, r2
 8001de2:	2b03      	cmp	r3, #3
 8001de4:	d017      	beq.n	8001e16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	2203      	movs	r2, #3
 8001df2:	409a      	lsls	r2, r3
 8001df4:	0013      	movs	r3, r2
 8001df6:	43da      	mvns	r2, r3
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	689a      	ldr	r2, [r3, #8]
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	409a      	lsls	r2, r3
 8001e08:	0013      	movs	r3, r2
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2203      	movs	r2, #3
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d123      	bne.n	8001e6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	08da      	lsrs	r2, r3, #3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	3208      	adds	r2, #8
 8001e2a:	0092      	lsls	r2, r2, #2
 8001e2c:	58d3      	ldr	r3, [r2, r3]
 8001e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	2207      	movs	r2, #7
 8001e34:	4013      	ands	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	220f      	movs	r2, #15
 8001e3a:	409a      	lsls	r2, r3
 8001e3c:	0013      	movs	r3, r2
 8001e3e:	43da      	mvns	r2, r3
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	4013      	ands	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	691a      	ldr	r2, [r3, #16]
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	2107      	movs	r1, #7
 8001e4e:	400b      	ands	r3, r1
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	409a      	lsls	r2, r3
 8001e54:	0013      	movs	r3, r2
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	08da      	lsrs	r2, r3, #3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3208      	adds	r2, #8
 8001e64:	0092      	lsls	r2, r2, #2
 8001e66:	6939      	ldr	r1, [r7, #16]
 8001e68:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	2203      	movs	r2, #3
 8001e76:	409a      	lsls	r2, r3
 8001e78:	0013      	movs	r3, r2
 8001e7a:	43da      	mvns	r2, r3
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2203      	movs	r2, #3
 8001e88:	401a      	ands	r2, r3
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	409a      	lsls	r2, r3
 8001e90:	0013      	movs	r3, r2
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	23c0      	movs	r3, #192	; 0xc0
 8001ea4:	029b      	lsls	r3, r3, #10
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d100      	bne.n	8001eac <HAL_GPIO_Init+0x174>
 8001eaa:	e092      	b.n	8001fd2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001eac:	4a50      	ldr	r2, [pc, #320]	; (8001ff0 <HAL_GPIO_Init+0x2b8>)
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	089b      	lsrs	r3, r3, #2
 8001eb2:	3318      	adds	r3, #24
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	589b      	ldr	r3, [r3, r2]
 8001eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	2203      	movs	r2, #3
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	220f      	movs	r2, #15
 8001ec4:	409a      	lsls	r2, r3
 8001ec6:	0013      	movs	r3, r2
 8001ec8:	43da      	mvns	r2, r3
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	23a0      	movs	r3, #160	; 0xa0
 8001ed4:	05db      	lsls	r3, r3, #23
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d013      	beq.n	8001f02 <HAL_GPIO_Init+0x1ca>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a45      	ldr	r2, [pc, #276]	; (8001ff4 <HAL_GPIO_Init+0x2bc>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d00d      	beq.n	8001efe <HAL_GPIO_Init+0x1c6>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a44      	ldr	r2, [pc, #272]	; (8001ff8 <HAL_GPIO_Init+0x2c0>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d007      	beq.n	8001efa <HAL_GPIO_Init+0x1c2>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a43      	ldr	r2, [pc, #268]	; (8001ffc <HAL_GPIO_Init+0x2c4>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d101      	bne.n	8001ef6 <HAL_GPIO_Init+0x1be>
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e006      	b.n	8001f04 <HAL_GPIO_Init+0x1cc>
 8001ef6:	2305      	movs	r3, #5
 8001ef8:	e004      	b.n	8001f04 <HAL_GPIO_Init+0x1cc>
 8001efa:	2302      	movs	r3, #2
 8001efc:	e002      	b.n	8001f04 <HAL_GPIO_Init+0x1cc>
 8001efe:	2301      	movs	r3, #1
 8001f00:	e000      	b.n	8001f04 <HAL_GPIO_Init+0x1cc>
 8001f02:	2300      	movs	r3, #0
 8001f04:	697a      	ldr	r2, [r7, #20]
 8001f06:	2103      	movs	r1, #3
 8001f08:	400a      	ands	r2, r1
 8001f0a:	00d2      	lsls	r2, r2, #3
 8001f0c:	4093      	lsls	r3, r2
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001f14:	4936      	ldr	r1, [pc, #216]	; (8001ff0 <HAL_GPIO_Init+0x2b8>)
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	089b      	lsrs	r3, r3, #2
 8001f1a:	3318      	adds	r3, #24
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f22:	4b33      	ldr	r3, [pc, #204]	; (8001ff0 <HAL_GPIO_Init+0x2b8>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	43da      	mvns	r2, r3
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	2380      	movs	r3, #128	; 0x80
 8001f38:	035b      	lsls	r3, r3, #13
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d003      	beq.n	8001f46 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f46:	4b2a      	ldr	r3, [pc, #168]	; (8001ff0 <HAL_GPIO_Init+0x2b8>)
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001f4c:	4b28      	ldr	r3, [pc, #160]	; (8001ff0 <HAL_GPIO_Init+0x2b8>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	43da      	mvns	r2, r3
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	2380      	movs	r3, #128	; 0x80
 8001f62:	039b      	lsls	r3, r3, #14
 8001f64:	4013      	ands	r3, r2
 8001f66:	d003      	beq.n	8001f70 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f70:	4b1f      	ldr	r3, [pc, #124]	; (8001ff0 <HAL_GPIO_Init+0x2b8>)
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f76:	4a1e      	ldr	r2, [pc, #120]	; (8001ff0 <HAL_GPIO_Init+0x2b8>)
 8001f78:	2384      	movs	r3, #132	; 0x84
 8001f7a:	58d3      	ldr	r3, [r2, r3]
 8001f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	43da      	mvns	r2, r3
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	4013      	ands	r3, r2
 8001f86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685a      	ldr	r2, [r3, #4]
 8001f8c:	2380      	movs	r3, #128	; 0x80
 8001f8e:	029b      	lsls	r3, r3, #10
 8001f90:	4013      	ands	r3, r2
 8001f92:	d003      	beq.n	8001f9c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f9c:	4914      	ldr	r1, [pc, #80]	; (8001ff0 <HAL_GPIO_Init+0x2b8>)
 8001f9e:	2284      	movs	r2, #132	; 0x84
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001fa4:	4a12      	ldr	r2, [pc, #72]	; (8001ff0 <HAL_GPIO_Init+0x2b8>)
 8001fa6:	2380      	movs	r3, #128	; 0x80
 8001fa8:	58d3      	ldr	r3, [r2, r3]
 8001faa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	43da      	mvns	r2, r3
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	2380      	movs	r3, #128	; 0x80
 8001fbc:	025b      	lsls	r3, r3, #9
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d003      	beq.n	8001fca <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001fca:	4909      	ldr	r1, [pc, #36]	; (8001ff0 <HAL_GPIO_Init+0x2b8>)
 8001fcc:	2280      	movs	r2, #128	; 0x80
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	40da      	lsrs	r2, r3
 8001fe0:	1e13      	subs	r3, r2, #0
 8001fe2:	d000      	beq.n	8001fe6 <HAL_GPIO_Init+0x2ae>
 8001fe4:	e6b0      	b.n	8001d48 <HAL_GPIO_Init+0x10>
  }
}
 8001fe6:	46c0      	nop			; (mov r8, r8)
 8001fe8:	46c0      	nop			; (mov r8, r8)
 8001fea:	46bd      	mov	sp, r7
 8001fec:	b006      	add	sp, #24
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40021800 	.word	0x40021800
 8001ff4:	50000400 	.word	0x50000400
 8001ff8:	50000800 	.word	0x50000800
 8001ffc:	50000c00 	.word	0x50000c00

08002000 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	0008      	movs	r0, r1
 800200a:	0011      	movs	r1, r2
 800200c:	1cbb      	adds	r3, r7, #2
 800200e:	1c02      	adds	r2, r0, #0
 8002010:	801a      	strh	r2, [r3, #0]
 8002012:	1c7b      	adds	r3, r7, #1
 8002014:	1c0a      	adds	r2, r1, #0
 8002016:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002018:	1c7b      	adds	r3, r7, #1
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d004      	beq.n	800202a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002020:	1cbb      	adds	r3, r7, #2
 8002022:	881a      	ldrh	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002028:	e003      	b.n	8002032 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800202a:	1cbb      	adds	r3, r7, #2
 800202c:	881a      	ldrh	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002032:	46c0      	nop			; (mov r8, r8)
 8002034:	46bd      	mov	sp, r7
 8002036:	b002      	add	sp, #8
 8002038:	bd80      	pop	{r7, pc}
	...

0800203c <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002040:	4b04      	ldr	r3, [pc, #16]	; (8002054 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	4b03      	ldr	r3, [pc, #12]	; (8002054 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002046:	2180      	movs	r1, #128	; 0x80
 8002048:	0049      	lsls	r1, r1, #1
 800204a:	430a      	orrs	r2, r1
 800204c:	601a      	str	r2, [r3, #0]
}
 800204e:	46c0      	nop			; (mov r8, r8)
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40007000 	.word	0x40007000

08002058 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002060:	4b19      	ldr	r3, [pc, #100]	; (80020c8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a19      	ldr	r2, [pc, #100]	; (80020cc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002066:	4013      	ands	r3, r2
 8002068:	0019      	movs	r1, r3
 800206a:	4b17      	ldr	r3, [pc, #92]	; (80020c8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	430a      	orrs	r2, r1
 8002070:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	2380      	movs	r3, #128	; 0x80
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	429a      	cmp	r2, r3
 800207a:	d11f      	bne.n	80020bc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800207c:	4b14      	ldr	r3, [pc, #80]	; (80020d0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	0013      	movs	r3, r2
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	189b      	adds	r3, r3, r2
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	4912      	ldr	r1, [pc, #72]	; (80020d4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800208a:	0018      	movs	r0, r3
 800208c:	f7fe f84c 	bl	8000128 <__udivsi3>
 8002090:	0003      	movs	r3, r0
 8002092:	3301      	adds	r3, #1
 8002094:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002096:	e008      	b.n	80020aa <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	3b01      	subs	r3, #1
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	e001      	b.n	80020aa <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e009      	b.n	80020be <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020aa:	4b07      	ldr	r3, [pc, #28]	; (80020c8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80020ac:	695a      	ldr	r2, [r3, #20]
 80020ae:	2380      	movs	r3, #128	; 0x80
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	401a      	ands	r2, r3
 80020b4:	2380      	movs	r3, #128	; 0x80
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d0ed      	beq.n	8002098 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	0018      	movs	r0, r3
 80020c0:	46bd      	mov	sp, r7
 80020c2:	b004      	add	sp, #16
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	46c0      	nop			; (mov r8, r8)
 80020c8:	40007000 	.word	0x40007000
 80020cc:	fffff9ff 	.word	0xfffff9ff
 80020d0:	20000090 	.word	0x20000090
 80020d4:	000f4240 	.word	0x000f4240

080020d8 <HAL_PWREx_EnterSHUTDOWNMode>:
  * @retval None

  * @retval None
  */
void HAL_PWREx_EnterSHUTDOWNMode(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* Set Shutdown mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_SHUTDOWN);
 80020dc:	4b09      	ldr	r3, [pc, #36]	; (8002104 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2207      	movs	r2, #7
 80020e2:	4393      	bics	r3, r2
 80020e4:	001a      	movs	r2, r3
 80020e6:	4b07      	ldr	r3, [pc, #28]	; (8002104 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 80020e8:	2104      	movs	r1, #4
 80020ea:	430a      	orrs	r2, r1
 80020ec:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80020ee:	4b06      	ldr	r3, [pc, #24]	; (8002108 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 80020f0:	691a      	ldr	r2, [r3, #16]
 80020f2:	4b05      	ldr	r3, [pc, #20]	; (8002108 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 80020f4:	2104      	movs	r1, #4
 80020f6:	430a      	orrs	r2, r1
 80020f8:	611a      	str	r2, [r3, #16]
#if defined ( __CC_ARM)
  __force_stores();
#endif /* __CC_ARM */

  /* Request Wait For Interrupt */
  __WFI();
 80020fa:	bf30      	wfi
}
 80020fc:	46c0      	nop			; (mov r8, r8)
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	46c0      	nop			; (mov r8, r8)
 8002104:	40007000 	.word	0x40007000
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002110:	4b03      	ldr	r3, [pc, #12]	; (8002120 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	23e0      	movs	r3, #224	; 0xe0
 8002116:	01db      	lsls	r3, r3, #7
 8002118:	4013      	ands	r3, r2
}
 800211a:	0018      	movs	r0, r3
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40021000 	.word	0x40021000

08002124 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b088      	sub	sp, #32
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e2fe      	b.n	8002734 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2201      	movs	r2, #1
 800213c:	4013      	ands	r3, r2
 800213e:	d100      	bne.n	8002142 <HAL_RCC_OscConfig+0x1e>
 8002140:	e07c      	b.n	800223c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002142:	4bc3      	ldr	r3, [pc, #780]	; (8002450 <HAL_RCC_OscConfig+0x32c>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	2238      	movs	r2, #56	; 0x38
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800214c:	4bc0      	ldr	r3, [pc, #768]	; (8002450 <HAL_RCC_OscConfig+0x32c>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	2203      	movs	r2, #3
 8002152:	4013      	ands	r3, r2
 8002154:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	2b10      	cmp	r3, #16
 800215a:	d102      	bne.n	8002162 <HAL_RCC_OscConfig+0x3e>
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	2b03      	cmp	r3, #3
 8002160:	d002      	beq.n	8002168 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	2b08      	cmp	r3, #8
 8002166:	d10b      	bne.n	8002180 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002168:	4bb9      	ldr	r3, [pc, #740]	; (8002450 <HAL_RCC_OscConfig+0x32c>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	2380      	movs	r3, #128	; 0x80
 800216e:	029b      	lsls	r3, r3, #10
 8002170:	4013      	ands	r3, r2
 8002172:	d062      	beq.n	800223a <HAL_RCC_OscConfig+0x116>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d15e      	bne.n	800223a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e2d9      	b.n	8002734 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	2380      	movs	r3, #128	; 0x80
 8002186:	025b      	lsls	r3, r3, #9
 8002188:	429a      	cmp	r2, r3
 800218a:	d107      	bne.n	800219c <HAL_RCC_OscConfig+0x78>
 800218c:	4bb0      	ldr	r3, [pc, #704]	; (8002450 <HAL_RCC_OscConfig+0x32c>)
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	4baf      	ldr	r3, [pc, #700]	; (8002450 <HAL_RCC_OscConfig+0x32c>)
 8002192:	2180      	movs	r1, #128	; 0x80
 8002194:	0249      	lsls	r1, r1, #9
 8002196:	430a      	orrs	r2, r1
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	e020      	b.n	80021de <HAL_RCC_OscConfig+0xba>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	23a0      	movs	r3, #160	; 0xa0
 80021a2:	02db      	lsls	r3, r3, #11
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d10e      	bne.n	80021c6 <HAL_RCC_OscConfig+0xa2>
 80021a8:	4ba9      	ldr	r3, [pc, #676]	; (8002450 <HAL_RCC_OscConfig+0x32c>)
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	4ba8      	ldr	r3, [pc, #672]	; (8002450 <HAL_RCC_OscConfig+0x32c>)
 80021ae:	2180      	movs	r1, #128	; 0x80
 80021b0:	02c9      	lsls	r1, r1, #11
 80021b2:	430a      	orrs	r2, r1
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	4ba6      	ldr	r3, [pc, #664]	; (8002450 <HAL_RCC_OscConfig+0x32c>)
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	4ba5      	ldr	r3, [pc, #660]	; (8002450 <HAL_RCC_OscConfig+0x32c>)
 80021bc:	2180      	movs	r1, #128	; 0x80
 80021be:	0249      	lsls	r1, r1, #9
 80021c0:	430a      	orrs	r2, r1
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	e00b      	b.n	80021de <HAL_RCC_OscConfig+0xba>
 80021c6:	4ba2      	ldr	r3, [pc, #648]	; (8002450 <HAL_RCC_OscConfig+0x32c>)
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	4ba1      	ldr	r3, [pc, #644]	; (8002450 <HAL_RCC_OscConfig+0x32c>)
 80021cc:	49a1      	ldr	r1, [pc, #644]	; (8002454 <HAL_RCC_OscConfig+0x330>)
 80021ce:	400a      	ands	r2, r1
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	4b9f      	ldr	r3, [pc, #636]	; (8002450 <HAL_RCC_OscConfig+0x32c>)
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	4b9e      	ldr	r3, [pc, #632]	; (8002450 <HAL_RCC_OscConfig+0x32c>)
 80021d8:	499f      	ldr	r1, [pc, #636]	; (8002458 <HAL_RCC_OscConfig+0x334>)
 80021da:	400a      	ands	r2, r1
 80021dc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d014      	beq.n	8002210 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e6:	f7ff f97d 	bl	80014e4 <HAL_GetTick>
 80021ea:	0003      	movs	r3, r0
 80021ec:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021f0:	f7ff f978 	bl	80014e4 <HAL_GetTick>
 80021f4:	0002      	movs	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b64      	cmp	r3, #100	; 0x64
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e298      	b.n	8002734 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002202:	4b93      	ldr	r3, [pc, #588]	; (8002450 <HAL_RCC_OscConfig+0x32c>)
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	2380      	movs	r3, #128	; 0x80
 8002208:	029b      	lsls	r3, r3, #10
 800220a:	4013      	ands	r3, r2
 800220c:	d0f0      	beq.n	80021f0 <HAL_RCC_OscConfig+0xcc>
 800220e:	e015      	b.n	800223c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002210:	f7ff f968 	bl	80014e4 <HAL_GetTick>
 8002214:	0003      	movs	r3, r0
 8002216:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800221a:	f7ff f963 	bl	80014e4 <HAL_GetTick>
 800221e:	0002      	movs	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b64      	cmp	r3, #100	; 0x64
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e283      	b.n	8002734 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800222c:	4b88      	ldr	r3, [pc, #544]	; (8002450 <HAL_RCC_OscConfig+0x32c>)
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	2380      	movs	r3, #128	; 0x80
 8002232:	029b      	lsls	r3, r3, #10
 8002234:	4013      	ands	r3, r2
 8002236:	d1f0      	bne.n	800221a <HAL_RCC_OscConfig+0xf6>
 8002238:	e000      	b.n	800223c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800223a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2202      	movs	r2, #2
 8002242:	4013      	ands	r3, r2
 8002244:	d100      	bne.n	8002248 <HAL_RCC_OscConfig+0x124>
 8002246:	e099      	b.n	800237c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002248:	4b81      	ldr	r3, [pc, #516]	; (8002450 <HAL_RCC_OscConfig+0x32c>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	2238      	movs	r2, #56	; 0x38
 800224e:	4013      	ands	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002252:	4b7f      	ldr	r3, [pc, #508]	; (8002450 <HAL_RCC_OscConfig+0x32c>)
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	2203      	movs	r2, #3
 8002258:	4013      	ands	r3, r2
 800225a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	2b10      	cmp	r3, #16
 8002260:	d102      	bne.n	8002268 <HAL_RCC_OscConfig+0x144>
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	2b02      	cmp	r3, #2
 8002266:	d002      	beq.n	800226e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d135      	bne.n	80022da <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800226e:	4b78      	ldr	r3, [pc, #480]	; (8002450 <HAL_RCC_OscConfig+0x32c>)
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	2380      	movs	r3, #128	; 0x80
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	4013      	ands	r3, r2
 8002278:	d005      	beq.n	8002286 <HAL_RCC_OscConfig+0x162>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e256      	b.n	8002734 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002286:	4b72      	ldr	r3, [pc, #456]	; (8002450 <HAL_RCC_OscConfig+0x32c>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	4a74      	ldr	r2, [pc, #464]	; (800245c <HAL_RCC_OscConfig+0x338>)
 800228c:	4013      	ands	r3, r2
 800228e:	0019      	movs	r1, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	021a      	lsls	r2, r3, #8
 8002296:	4b6e      	ldr	r3, [pc, #440]	; (8002450 <HAL_RCC_OscConfig+0x32c>)
 8002298:	430a      	orrs	r2, r1
 800229a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d112      	bne.n	80022c8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80022a2:	4b6b      	ldr	r3, [pc, #428]	; (8002450 <HAL_RCC_OscConfig+0x32c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a6e      	ldr	r2, [pc, #440]	; (8002460 <HAL_RCC_OscConfig+0x33c>)
 80022a8:	4013      	ands	r3, r2
 80022aa:	0019      	movs	r1, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	691a      	ldr	r2, [r3, #16]
 80022b0:	4b67      	ldr	r3, [pc, #412]	; (8002450 <HAL_RCC_OscConfig+0x32c>)
 80022b2:	430a      	orrs	r2, r1
 80022b4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80022b6:	4b66      	ldr	r3, [pc, #408]	; (8002450 <HAL_RCC_OscConfig+0x32c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	0adb      	lsrs	r3, r3, #11
 80022bc:	2207      	movs	r2, #7
 80022be:	4013      	ands	r3, r2
 80022c0:	4a68      	ldr	r2, [pc, #416]	; (8002464 <HAL_RCC_OscConfig+0x340>)
 80022c2:	40da      	lsrs	r2, r3
 80022c4:	4b68      	ldr	r3, [pc, #416]	; (8002468 <HAL_RCC_OscConfig+0x344>)
 80022c6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80022c8:	4b68      	ldr	r3, [pc, #416]	; (800246c <HAL_RCC_OscConfig+0x348>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	0018      	movs	r0, r3
 80022ce:	f7ff f8ad 	bl	800142c <HAL_InitTick>
 80022d2:	1e03      	subs	r3, r0, #0
 80022d4:	d051      	beq.n	800237a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e22c      	b.n	8002734 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d030      	beq.n	8002344 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80022e2:	4b5b      	ldr	r3, [pc, #364]	; (8002450 <HAL_RCC_OscConfig+0x32c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a5e      	ldr	r2, [pc, #376]	; (8002460 <HAL_RCC_OscConfig+0x33c>)
 80022e8:	4013      	ands	r3, r2
 80022ea:	0019      	movs	r1, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	691a      	ldr	r2, [r3, #16]
 80022f0:	4b57      	ldr	r3, [pc, #348]	; (8002450 <HAL_RCC_OscConfig+0x32c>)
 80022f2:	430a      	orrs	r2, r1
 80022f4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80022f6:	4b56      	ldr	r3, [pc, #344]	; (8002450 <HAL_RCC_OscConfig+0x32c>)
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	4b55      	ldr	r3, [pc, #340]	; (8002450 <HAL_RCC_OscConfig+0x32c>)
 80022fc:	2180      	movs	r1, #128	; 0x80
 80022fe:	0049      	lsls	r1, r1, #1
 8002300:	430a      	orrs	r2, r1
 8002302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002304:	f7ff f8ee 	bl	80014e4 <HAL_GetTick>
 8002308:	0003      	movs	r3, r0
 800230a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800230c:	e008      	b.n	8002320 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800230e:	f7ff f8e9 	bl	80014e4 <HAL_GetTick>
 8002312:	0002      	movs	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e209      	b.n	8002734 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002320:	4b4b      	ldr	r3, [pc, #300]	; (8002450 <HAL_RCC_OscConfig+0x32c>)
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	2380      	movs	r3, #128	; 0x80
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	4013      	ands	r3, r2
 800232a:	d0f0      	beq.n	800230e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800232c:	4b48      	ldr	r3, [pc, #288]	; (8002450 <HAL_RCC_OscConfig+0x32c>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	4a4a      	ldr	r2, [pc, #296]	; (800245c <HAL_RCC_OscConfig+0x338>)
 8002332:	4013      	ands	r3, r2
 8002334:	0019      	movs	r1, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	021a      	lsls	r2, r3, #8
 800233c:	4b44      	ldr	r3, [pc, #272]	; (8002450 <HAL_RCC_OscConfig+0x32c>)
 800233e:	430a      	orrs	r2, r1
 8002340:	605a      	str	r2, [r3, #4]
 8002342:	e01b      	b.n	800237c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002344:	4b42      	ldr	r3, [pc, #264]	; (8002450 <HAL_RCC_OscConfig+0x32c>)
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	4b41      	ldr	r3, [pc, #260]	; (8002450 <HAL_RCC_OscConfig+0x32c>)
 800234a:	4949      	ldr	r1, [pc, #292]	; (8002470 <HAL_RCC_OscConfig+0x34c>)
 800234c:	400a      	ands	r2, r1
 800234e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002350:	f7ff f8c8 	bl	80014e4 <HAL_GetTick>
 8002354:	0003      	movs	r3, r0
 8002356:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800235a:	f7ff f8c3 	bl	80014e4 <HAL_GetTick>
 800235e:	0002      	movs	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e1e3      	b.n	8002734 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800236c:	4b38      	ldr	r3, [pc, #224]	; (8002450 <HAL_RCC_OscConfig+0x32c>)
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	2380      	movs	r3, #128	; 0x80
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	4013      	ands	r3, r2
 8002376:	d1f0      	bne.n	800235a <HAL_RCC_OscConfig+0x236>
 8002378:	e000      	b.n	800237c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800237a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2208      	movs	r2, #8
 8002382:	4013      	ands	r3, r2
 8002384:	d047      	beq.n	8002416 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002386:	4b32      	ldr	r3, [pc, #200]	; (8002450 <HAL_RCC_OscConfig+0x32c>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	2238      	movs	r2, #56	; 0x38
 800238c:	4013      	ands	r3, r2
 800238e:	2b18      	cmp	r3, #24
 8002390:	d10a      	bne.n	80023a8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002392:	4b2f      	ldr	r3, [pc, #188]	; (8002450 <HAL_RCC_OscConfig+0x32c>)
 8002394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002396:	2202      	movs	r2, #2
 8002398:	4013      	ands	r3, r2
 800239a:	d03c      	beq.n	8002416 <HAL_RCC_OscConfig+0x2f2>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d138      	bne.n	8002416 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e1c5      	b.n	8002734 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d019      	beq.n	80023e4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80023b0:	4b27      	ldr	r3, [pc, #156]	; (8002450 <HAL_RCC_OscConfig+0x32c>)
 80023b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023b4:	4b26      	ldr	r3, [pc, #152]	; (8002450 <HAL_RCC_OscConfig+0x32c>)
 80023b6:	2101      	movs	r1, #1
 80023b8:	430a      	orrs	r2, r1
 80023ba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023bc:	f7ff f892 	bl	80014e4 <HAL_GetTick>
 80023c0:	0003      	movs	r3, r0
 80023c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023c4:	e008      	b.n	80023d8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023c6:	f7ff f88d 	bl	80014e4 <HAL_GetTick>
 80023ca:	0002      	movs	r2, r0
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e1ad      	b.n	8002734 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023d8:	4b1d      	ldr	r3, [pc, #116]	; (8002450 <HAL_RCC_OscConfig+0x32c>)
 80023da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023dc:	2202      	movs	r2, #2
 80023de:	4013      	ands	r3, r2
 80023e0:	d0f1      	beq.n	80023c6 <HAL_RCC_OscConfig+0x2a2>
 80023e2:	e018      	b.n	8002416 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80023e4:	4b1a      	ldr	r3, [pc, #104]	; (8002450 <HAL_RCC_OscConfig+0x32c>)
 80023e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023e8:	4b19      	ldr	r3, [pc, #100]	; (8002450 <HAL_RCC_OscConfig+0x32c>)
 80023ea:	2101      	movs	r1, #1
 80023ec:	438a      	bics	r2, r1
 80023ee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f0:	f7ff f878 	bl	80014e4 <HAL_GetTick>
 80023f4:	0003      	movs	r3, r0
 80023f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023fa:	f7ff f873 	bl	80014e4 <HAL_GetTick>
 80023fe:	0002      	movs	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e193      	b.n	8002734 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800240c:	4b10      	ldr	r3, [pc, #64]	; (8002450 <HAL_RCC_OscConfig+0x32c>)
 800240e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002410:	2202      	movs	r2, #2
 8002412:	4013      	ands	r3, r2
 8002414:	d1f1      	bne.n	80023fa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2204      	movs	r2, #4
 800241c:	4013      	ands	r3, r2
 800241e:	d100      	bne.n	8002422 <HAL_RCC_OscConfig+0x2fe>
 8002420:	e0c6      	b.n	80025b0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002422:	231f      	movs	r3, #31
 8002424:	18fb      	adds	r3, r7, r3
 8002426:	2200      	movs	r2, #0
 8002428:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800242a:	4b09      	ldr	r3, [pc, #36]	; (8002450 <HAL_RCC_OscConfig+0x32c>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	2238      	movs	r2, #56	; 0x38
 8002430:	4013      	ands	r3, r2
 8002432:	2b20      	cmp	r3, #32
 8002434:	d11e      	bne.n	8002474 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002436:	4b06      	ldr	r3, [pc, #24]	; (8002450 <HAL_RCC_OscConfig+0x32c>)
 8002438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243a:	2202      	movs	r2, #2
 800243c:	4013      	ands	r3, r2
 800243e:	d100      	bne.n	8002442 <HAL_RCC_OscConfig+0x31e>
 8002440:	e0b6      	b.n	80025b0 <HAL_RCC_OscConfig+0x48c>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d000      	beq.n	800244c <HAL_RCC_OscConfig+0x328>
 800244a:	e0b1      	b.n	80025b0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e171      	b.n	8002734 <HAL_RCC_OscConfig+0x610>
 8002450:	40021000 	.word	0x40021000
 8002454:	fffeffff 	.word	0xfffeffff
 8002458:	fffbffff 	.word	0xfffbffff
 800245c:	ffff80ff 	.word	0xffff80ff
 8002460:	ffffc7ff 	.word	0xffffc7ff
 8002464:	00f42400 	.word	0x00f42400
 8002468:	20000090 	.word	0x20000090
 800246c:	20000094 	.word	0x20000094
 8002470:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002474:	4bb1      	ldr	r3, [pc, #708]	; (800273c <HAL_RCC_OscConfig+0x618>)
 8002476:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002478:	2380      	movs	r3, #128	; 0x80
 800247a:	055b      	lsls	r3, r3, #21
 800247c:	4013      	ands	r3, r2
 800247e:	d101      	bne.n	8002484 <HAL_RCC_OscConfig+0x360>
 8002480:	2301      	movs	r3, #1
 8002482:	e000      	b.n	8002486 <HAL_RCC_OscConfig+0x362>
 8002484:	2300      	movs	r3, #0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d011      	beq.n	80024ae <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800248a:	4bac      	ldr	r3, [pc, #688]	; (800273c <HAL_RCC_OscConfig+0x618>)
 800248c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800248e:	4bab      	ldr	r3, [pc, #684]	; (800273c <HAL_RCC_OscConfig+0x618>)
 8002490:	2180      	movs	r1, #128	; 0x80
 8002492:	0549      	lsls	r1, r1, #21
 8002494:	430a      	orrs	r2, r1
 8002496:	63da      	str	r2, [r3, #60]	; 0x3c
 8002498:	4ba8      	ldr	r3, [pc, #672]	; (800273c <HAL_RCC_OscConfig+0x618>)
 800249a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800249c:	2380      	movs	r3, #128	; 0x80
 800249e:	055b      	lsls	r3, r3, #21
 80024a0:	4013      	ands	r3, r2
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80024a6:	231f      	movs	r3, #31
 80024a8:	18fb      	adds	r3, r7, r3
 80024aa:	2201      	movs	r2, #1
 80024ac:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024ae:	4ba4      	ldr	r3, [pc, #656]	; (8002740 <HAL_RCC_OscConfig+0x61c>)
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	2380      	movs	r3, #128	; 0x80
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	4013      	ands	r3, r2
 80024b8:	d11a      	bne.n	80024f0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024ba:	4ba1      	ldr	r3, [pc, #644]	; (8002740 <HAL_RCC_OscConfig+0x61c>)
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	4ba0      	ldr	r3, [pc, #640]	; (8002740 <HAL_RCC_OscConfig+0x61c>)
 80024c0:	2180      	movs	r1, #128	; 0x80
 80024c2:	0049      	lsls	r1, r1, #1
 80024c4:	430a      	orrs	r2, r1
 80024c6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80024c8:	f7ff f80c 	bl	80014e4 <HAL_GetTick>
 80024cc:	0003      	movs	r3, r0
 80024ce:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d2:	f7ff f807 	bl	80014e4 <HAL_GetTick>
 80024d6:	0002      	movs	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e127      	b.n	8002734 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024e4:	4b96      	ldr	r3, [pc, #600]	; (8002740 <HAL_RCC_OscConfig+0x61c>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	2380      	movs	r3, #128	; 0x80
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	4013      	ands	r3, r2
 80024ee:	d0f0      	beq.n	80024d2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d106      	bne.n	8002506 <HAL_RCC_OscConfig+0x3e2>
 80024f8:	4b90      	ldr	r3, [pc, #576]	; (800273c <HAL_RCC_OscConfig+0x618>)
 80024fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80024fc:	4b8f      	ldr	r3, [pc, #572]	; (800273c <HAL_RCC_OscConfig+0x618>)
 80024fe:	2101      	movs	r1, #1
 8002500:	430a      	orrs	r2, r1
 8002502:	65da      	str	r2, [r3, #92]	; 0x5c
 8002504:	e01c      	b.n	8002540 <HAL_RCC_OscConfig+0x41c>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	2b05      	cmp	r3, #5
 800250c:	d10c      	bne.n	8002528 <HAL_RCC_OscConfig+0x404>
 800250e:	4b8b      	ldr	r3, [pc, #556]	; (800273c <HAL_RCC_OscConfig+0x618>)
 8002510:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002512:	4b8a      	ldr	r3, [pc, #552]	; (800273c <HAL_RCC_OscConfig+0x618>)
 8002514:	2104      	movs	r1, #4
 8002516:	430a      	orrs	r2, r1
 8002518:	65da      	str	r2, [r3, #92]	; 0x5c
 800251a:	4b88      	ldr	r3, [pc, #544]	; (800273c <HAL_RCC_OscConfig+0x618>)
 800251c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800251e:	4b87      	ldr	r3, [pc, #540]	; (800273c <HAL_RCC_OscConfig+0x618>)
 8002520:	2101      	movs	r1, #1
 8002522:	430a      	orrs	r2, r1
 8002524:	65da      	str	r2, [r3, #92]	; 0x5c
 8002526:	e00b      	b.n	8002540 <HAL_RCC_OscConfig+0x41c>
 8002528:	4b84      	ldr	r3, [pc, #528]	; (800273c <HAL_RCC_OscConfig+0x618>)
 800252a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800252c:	4b83      	ldr	r3, [pc, #524]	; (800273c <HAL_RCC_OscConfig+0x618>)
 800252e:	2101      	movs	r1, #1
 8002530:	438a      	bics	r2, r1
 8002532:	65da      	str	r2, [r3, #92]	; 0x5c
 8002534:	4b81      	ldr	r3, [pc, #516]	; (800273c <HAL_RCC_OscConfig+0x618>)
 8002536:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002538:	4b80      	ldr	r3, [pc, #512]	; (800273c <HAL_RCC_OscConfig+0x618>)
 800253a:	2104      	movs	r1, #4
 800253c:	438a      	bics	r2, r1
 800253e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d014      	beq.n	8002572 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002548:	f7fe ffcc 	bl	80014e4 <HAL_GetTick>
 800254c:	0003      	movs	r3, r0
 800254e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002550:	e009      	b.n	8002566 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002552:	f7fe ffc7 	bl	80014e4 <HAL_GetTick>
 8002556:	0002      	movs	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	4a79      	ldr	r2, [pc, #484]	; (8002744 <HAL_RCC_OscConfig+0x620>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e0e6      	b.n	8002734 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002566:	4b75      	ldr	r3, [pc, #468]	; (800273c <HAL_RCC_OscConfig+0x618>)
 8002568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800256a:	2202      	movs	r2, #2
 800256c:	4013      	ands	r3, r2
 800256e:	d0f0      	beq.n	8002552 <HAL_RCC_OscConfig+0x42e>
 8002570:	e013      	b.n	800259a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002572:	f7fe ffb7 	bl	80014e4 <HAL_GetTick>
 8002576:	0003      	movs	r3, r0
 8002578:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800257a:	e009      	b.n	8002590 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800257c:	f7fe ffb2 	bl	80014e4 <HAL_GetTick>
 8002580:	0002      	movs	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	4a6f      	ldr	r2, [pc, #444]	; (8002744 <HAL_RCC_OscConfig+0x620>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e0d1      	b.n	8002734 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002590:	4b6a      	ldr	r3, [pc, #424]	; (800273c <HAL_RCC_OscConfig+0x618>)
 8002592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002594:	2202      	movs	r2, #2
 8002596:	4013      	ands	r3, r2
 8002598:	d1f0      	bne.n	800257c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800259a:	231f      	movs	r3, #31
 800259c:	18fb      	adds	r3, r7, r3
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d105      	bne.n	80025b0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80025a4:	4b65      	ldr	r3, [pc, #404]	; (800273c <HAL_RCC_OscConfig+0x618>)
 80025a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025a8:	4b64      	ldr	r3, [pc, #400]	; (800273c <HAL_RCC_OscConfig+0x618>)
 80025aa:	4967      	ldr	r1, [pc, #412]	; (8002748 <HAL_RCC_OscConfig+0x624>)
 80025ac:	400a      	ands	r2, r1
 80025ae:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d100      	bne.n	80025ba <HAL_RCC_OscConfig+0x496>
 80025b8:	e0bb      	b.n	8002732 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025ba:	4b60      	ldr	r3, [pc, #384]	; (800273c <HAL_RCC_OscConfig+0x618>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	2238      	movs	r2, #56	; 0x38
 80025c0:	4013      	ands	r3, r2
 80025c2:	2b10      	cmp	r3, #16
 80025c4:	d100      	bne.n	80025c8 <HAL_RCC_OscConfig+0x4a4>
 80025c6:	e07b      	b.n	80026c0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	69db      	ldr	r3, [r3, #28]
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d156      	bne.n	800267e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d0:	4b5a      	ldr	r3, [pc, #360]	; (800273c <HAL_RCC_OscConfig+0x618>)
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	4b59      	ldr	r3, [pc, #356]	; (800273c <HAL_RCC_OscConfig+0x618>)
 80025d6:	495d      	ldr	r1, [pc, #372]	; (800274c <HAL_RCC_OscConfig+0x628>)
 80025d8:	400a      	ands	r2, r1
 80025da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025dc:	f7fe ff82 	bl	80014e4 <HAL_GetTick>
 80025e0:	0003      	movs	r3, r0
 80025e2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e6:	f7fe ff7d 	bl	80014e4 <HAL_GetTick>
 80025ea:	0002      	movs	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e09d      	b.n	8002734 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025f8:	4b50      	ldr	r3, [pc, #320]	; (800273c <HAL_RCC_OscConfig+0x618>)
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	2380      	movs	r3, #128	; 0x80
 80025fe:	049b      	lsls	r3, r3, #18
 8002600:	4013      	ands	r3, r2
 8002602:	d1f0      	bne.n	80025e6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002604:	4b4d      	ldr	r3, [pc, #308]	; (800273c <HAL_RCC_OscConfig+0x618>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	4a51      	ldr	r2, [pc, #324]	; (8002750 <HAL_RCC_OscConfig+0x62c>)
 800260a:	4013      	ands	r3, r2
 800260c:	0019      	movs	r1, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a1a      	ldr	r2, [r3, #32]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261c:	021b      	lsls	r3, r3, #8
 800261e:	431a      	orrs	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002624:	431a      	orrs	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	431a      	orrs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002630:	431a      	orrs	r2, r3
 8002632:	4b42      	ldr	r3, [pc, #264]	; (800273c <HAL_RCC_OscConfig+0x618>)
 8002634:	430a      	orrs	r2, r1
 8002636:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002638:	4b40      	ldr	r3, [pc, #256]	; (800273c <HAL_RCC_OscConfig+0x618>)
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	4b3f      	ldr	r3, [pc, #252]	; (800273c <HAL_RCC_OscConfig+0x618>)
 800263e:	2180      	movs	r1, #128	; 0x80
 8002640:	0449      	lsls	r1, r1, #17
 8002642:	430a      	orrs	r2, r1
 8002644:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002646:	4b3d      	ldr	r3, [pc, #244]	; (800273c <HAL_RCC_OscConfig+0x618>)
 8002648:	68da      	ldr	r2, [r3, #12]
 800264a:	4b3c      	ldr	r3, [pc, #240]	; (800273c <HAL_RCC_OscConfig+0x618>)
 800264c:	2180      	movs	r1, #128	; 0x80
 800264e:	0549      	lsls	r1, r1, #21
 8002650:	430a      	orrs	r2, r1
 8002652:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002654:	f7fe ff46 	bl	80014e4 <HAL_GetTick>
 8002658:	0003      	movs	r3, r0
 800265a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800265e:	f7fe ff41 	bl	80014e4 <HAL_GetTick>
 8002662:	0002      	movs	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e061      	b.n	8002734 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002670:	4b32      	ldr	r3, [pc, #200]	; (800273c <HAL_RCC_OscConfig+0x618>)
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	2380      	movs	r3, #128	; 0x80
 8002676:	049b      	lsls	r3, r3, #18
 8002678:	4013      	ands	r3, r2
 800267a:	d0f0      	beq.n	800265e <HAL_RCC_OscConfig+0x53a>
 800267c:	e059      	b.n	8002732 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800267e:	4b2f      	ldr	r3, [pc, #188]	; (800273c <HAL_RCC_OscConfig+0x618>)
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	4b2e      	ldr	r3, [pc, #184]	; (800273c <HAL_RCC_OscConfig+0x618>)
 8002684:	4931      	ldr	r1, [pc, #196]	; (800274c <HAL_RCC_OscConfig+0x628>)
 8002686:	400a      	ands	r2, r1
 8002688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268a:	f7fe ff2b 	bl	80014e4 <HAL_GetTick>
 800268e:	0003      	movs	r3, r0
 8002690:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002694:	f7fe ff26 	bl	80014e4 <HAL_GetTick>
 8002698:	0002      	movs	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e046      	b.n	8002734 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026a6:	4b25      	ldr	r3, [pc, #148]	; (800273c <HAL_RCC_OscConfig+0x618>)
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	2380      	movs	r3, #128	; 0x80
 80026ac:	049b      	lsls	r3, r3, #18
 80026ae:	4013      	ands	r3, r2
 80026b0:	d1f0      	bne.n	8002694 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80026b2:	4b22      	ldr	r3, [pc, #136]	; (800273c <HAL_RCC_OscConfig+0x618>)
 80026b4:	68da      	ldr	r2, [r3, #12]
 80026b6:	4b21      	ldr	r3, [pc, #132]	; (800273c <HAL_RCC_OscConfig+0x618>)
 80026b8:	4926      	ldr	r1, [pc, #152]	; (8002754 <HAL_RCC_OscConfig+0x630>)
 80026ba:	400a      	ands	r2, r1
 80026bc:	60da      	str	r2, [r3, #12]
 80026be:	e038      	b.n	8002732 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	69db      	ldr	r3, [r3, #28]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d101      	bne.n	80026cc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e033      	b.n	8002734 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80026cc:	4b1b      	ldr	r3, [pc, #108]	; (800273c <HAL_RCC_OscConfig+0x618>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	2203      	movs	r2, #3
 80026d6:	401a      	ands	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d126      	bne.n	800272e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	2270      	movs	r2, #112	; 0x70
 80026e4:	401a      	ands	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d11f      	bne.n	800272e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	23fe      	movs	r3, #254	; 0xfe
 80026f2:	01db      	lsls	r3, r3, #7
 80026f4:	401a      	ands	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fa:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d116      	bne.n	800272e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002700:	697a      	ldr	r2, [r7, #20]
 8002702:	23f8      	movs	r3, #248	; 0xf8
 8002704:	039b      	lsls	r3, r3, #14
 8002706:	401a      	ands	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800270c:	429a      	cmp	r2, r3
 800270e:	d10e      	bne.n	800272e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	23e0      	movs	r3, #224	; 0xe0
 8002714:	051b      	lsls	r3, r3, #20
 8002716:	401a      	ands	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800271c:	429a      	cmp	r2, r3
 800271e:	d106      	bne.n	800272e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	0f5b      	lsrs	r3, r3, #29
 8002724:	075a      	lsls	r2, r3, #29
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800272a:	429a      	cmp	r2, r3
 800272c:	d001      	beq.n	8002732 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e000      	b.n	8002734 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	0018      	movs	r0, r3
 8002736:	46bd      	mov	sp, r7
 8002738:	b008      	add	sp, #32
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40021000 	.word	0x40021000
 8002740:	40007000 	.word	0x40007000
 8002744:	00001388 	.word	0x00001388
 8002748:	efffffff 	.word	0xefffffff
 800274c:	feffffff 	.word	0xfeffffff
 8002750:	11c1808c 	.word	0x11c1808c
 8002754:	eefefffc 	.word	0xeefefffc

08002758 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d101      	bne.n	800276c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e0e9      	b.n	8002940 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800276c:	4b76      	ldr	r3, [pc, #472]	; (8002948 <HAL_RCC_ClockConfig+0x1f0>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2207      	movs	r2, #7
 8002772:	4013      	ands	r3, r2
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	429a      	cmp	r2, r3
 8002778:	d91e      	bls.n	80027b8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800277a:	4b73      	ldr	r3, [pc, #460]	; (8002948 <HAL_RCC_ClockConfig+0x1f0>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2207      	movs	r2, #7
 8002780:	4393      	bics	r3, r2
 8002782:	0019      	movs	r1, r3
 8002784:	4b70      	ldr	r3, [pc, #448]	; (8002948 <HAL_RCC_ClockConfig+0x1f0>)
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	430a      	orrs	r2, r1
 800278a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800278c:	f7fe feaa 	bl	80014e4 <HAL_GetTick>
 8002790:	0003      	movs	r3, r0
 8002792:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002794:	e009      	b.n	80027aa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002796:	f7fe fea5 	bl	80014e4 <HAL_GetTick>
 800279a:	0002      	movs	r2, r0
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	4a6a      	ldr	r2, [pc, #424]	; (800294c <HAL_RCC_ClockConfig+0x1f4>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e0ca      	b.n	8002940 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80027aa:	4b67      	ldr	r3, [pc, #412]	; (8002948 <HAL_RCC_ClockConfig+0x1f0>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2207      	movs	r2, #7
 80027b0:	4013      	ands	r3, r2
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d1ee      	bne.n	8002796 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2202      	movs	r2, #2
 80027be:	4013      	ands	r3, r2
 80027c0:	d015      	beq.n	80027ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2204      	movs	r2, #4
 80027c8:	4013      	ands	r3, r2
 80027ca:	d006      	beq.n	80027da <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80027cc:	4b60      	ldr	r3, [pc, #384]	; (8002950 <HAL_RCC_ClockConfig+0x1f8>)
 80027ce:	689a      	ldr	r2, [r3, #8]
 80027d0:	4b5f      	ldr	r3, [pc, #380]	; (8002950 <HAL_RCC_ClockConfig+0x1f8>)
 80027d2:	21e0      	movs	r1, #224	; 0xe0
 80027d4:	01c9      	lsls	r1, r1, #7
 80027d6:	430a      	orrs	r2, r1
 80027d8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027da:	4b5d      	ldr	r3, [pc, #372]	; (8002950 <HAL_RCC_ClockConfig+0x1f8>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	4a5d      	ldr	r2, [pc, #372]	; (8002954 <HAL_RCC_ClockConfig+0x1fc>)
 80027e0:	4013      	ands	r3, r2
 80027e2:	0019      	movs	r1, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	4b59      	ldr	r3, [pc, #356]	; (8002950 <HAL_RCC_ClockConfig+0x1f8>)
 80027ea:	430a      	orrs	r2, r1
 80027ec:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2201      	movs	r2, #1
 80027f4:	4013      	ands	r3, r2
 80027f6:	d057      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d107      	bne.n	8002810 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002800:	4b53      	ldr	r3, [pc, #332]	; (8002950 <HAL_RCC_ClockConfig+0x1f8>)
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	2380      	movs	r3, #128	; 0x80
 8002806:	029b      	lsls	r3, r3, #10
 8002808:	4013      	ands	r3, r2
 800280a:	d12b      	bne.n	8002864 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e097      	b.n	8002940 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	2b02      	cmp	r3, #2
 8002816:	d107      	bne.n	8002828 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002818:	4b4d      	ldr	r3, [pc, #308]	; (8002950 <HAL_RCC_ClockConfig+0x1f8>)
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	2380      	movs	r3, #128	; 0x80
 800281e:	049b      	lsls	r3, r3, #18
 8002820:	4013      	ands	r3, r2
 8002822:	d11f      	bne.n	8002864 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e08b      	b.n	8002940 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d107      	bne.n	8002840 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002830:	4b47      	ldr	r3, [pc, #284]	; (8002950 <HAL_RCC_ClockConfig+0x1f8>)
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	2380      	movs	r3, #128	; 0x80
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	4013      	ands	r3, r2
 800283a:	d113      	bne.n	8002864 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e07f      	b.n	8002940 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	2b03      	cmp	r3, #3
 8002846:	d106      	bne.n	8002856 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002848:	4b41      	ldr	r3, [pc, #260]	; (8002950 <HAL_RCC_ClockConfig+0x1f8>)
 800284a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800284c:	2202      	movs	r2, #2
 800284e:	4013      	ands	r3, r2
 8002850:	d108      	bne.n	8002864 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e074      	b.n	8002940 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002856:	4b3e      	ldr	r3, [pc, #248]	; (8002950 <HAL_RCC_ClockConfig+0x1f8>)
 8002858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800285a:	2202      	movs	r2, #2
 800285c:	4013      	ands	r3, r2
 800285e:	d101      	bne.n	8002864 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e06d      	b.n	8002940 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002864:	4b3a      	ldr	r3, [pc, #232]	; (8002950 <HAL_RCC_ClockConfig+0x1f8>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	2207      	movs	r2, #7
 800286a:	4393      	bics	r3, r2
 800286c:	0019      	movs	r1, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685a      	ldr	r2, [r3, #4]
 8002872:	4b37      	ldr	r3, [pc, #220]	; (8002950 <HAL_RCC_ClockConfig+0x1f8>)
 8002874:	430a      	orrs	r2, r1
 8002876:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002878:	f7fe fe34 	bl	80014e4 <HAL_GetTick>
 800287c:	0003      	movs	r3, r0
 800287e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002880:	e009      	b.n	8002896 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002882:	f7fe fe2f 	bl	80014e4 <HAL_GetTick>
 8002886:	0002      	movs	r2, r0
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	4a2f      	ldr	r2, [pc, #188]	; (800294c <HAL_RCC_ClockConfig+0x1f4>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e054      	b.n	8002940 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002896:	4b2e      	ldr	r3, [pc, #184]	; (8002950 <HAL_RCC_ClockConfig+0x1f8>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	2238      	movs	r2, #56	; 0x38
 800289c:	401a      	ands	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d1ec      	bne.n	8002882 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028a8:	4b27      	ldr	r3, [pc, #156]	; (8002948 <HAL_RCC_ClockConfig+0x1f0>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2207      	movs	r2, #7
 80028ae:	4013      	ands	r3, r2
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d21e      	bcs.n	80028f4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b6:	4b24      	ldr	r3, [pc, #144]	; (8002948 <HAL_RCC_ClockConfig+0x1f0>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2207      	movs	r2, #7
 80028bc:	4393      	bics	r3, r2
 80028be:	0019      	movs	r1, r3
 80028c0:	4b21      	ldr	r3, [pc, #132]	; (8002948 <HAL_RCC_ClockConfig+0x1f0>)
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80028c8:	f7fe fe0c 	bl	80014e4 <HAL_GetTick>
 80028cc:	0003      	movs	r3, r0
 80028ce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028d0:	e009      	b.n	80028e6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028d2:	f7fe fe07 	bl	80014e4 <HAL_GetTick>
 80028d6:	0002      	movs	r2, r0
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	4a1b      	ldr	r2, [pc, #108]	; (800294c <HAL_RCC_ClockConfig+0x1f4>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e02c      	b.n	8002940 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028e6:	4b18      	ldr	r3, [pc, #96]	; (8002948 <HAL_RCC_ClockConfig+0x1f0>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2207      	movs	r2, #7
 80028ec:	4013      	ands	r3, r2
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d1ee      	bne.n	80028d2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2204      	movs	r2, #4
 80028fa:	4013      	ands	r3, r2
 80028fc:	d009      	beq.n	8002912 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80028fe:	4b14      	ldr	r3, [pc, #80]	; (8002950 <HAL_RCC_ClockConfig+0x1f8>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	4a15      	ldr	r2, [pc, #84]	; (8002958 <HAL_RCC_ClockConfig+0x200>)
 8002904:	4013      	ands	r3, r2
 8002906:	0019      	movs	r1, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	4b10      	ldr	r3, [pc, #64]	; (8002950 <HAL_RCC_ClockConfig+0x1f8>)
 800290e:	430a      	orrs	r2, r1
 8002910:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002912:	f000 f829 	bl	8002968 <HAL_RCC_GetSysClockFreq>
 8002916:	0001      	movs	r1, r0
 8002918:	4b0d      	ldr	r3, [pc, #52]	; (8002950 <HAL_RCC_ClockConfig+0x1f8>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	0a1b      	lsrs	r3, r3, #8
 800291e:	220f      	movs	r2, #15
 8002920:	401a      	ands	r2, r3
 8002922:	4b0e      	ldr	r3, [pc, #56]	; (800295c <HAL_RCC_ClockConfig+0x204>)
 8002924:	0092      	lsls	r2, r2, #2
 8002926:	58d3      	ldr	r3, [r2, r3]
 8002928:	221f      	movs	r2, #31
 800292a:	4013      	ands	r3, r2
 800292c:	000a      	movs	r2, r1
 800292e:	40da      	lsrs	r2, r3
 8002930:	4b0b      	ldr	r3, [pc, #44]	; (8002960 <HAL_RCC_ClockConfig+0x208>)
 8002932:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002934:	4b0b      	ldr	r3, [pc, #44]	; (8002964 <HAL_RCC_ClockConfig+0x20c>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	0018      	movs	r0, r3
 800293a:	f7fe fd77 	bl	800142c <HAL_InitTick>
 800293e:	0003      	movs	r3, r0
}
 8002940:	0018      	movs	r0, r3
 8002942:	46bd      	mov	sp, r7
 8002944:	b004      	add	sp, #16
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40022000 	.word	0x40022000
 800294c:	00001388 	.word	0x00001388
 8002950:	40021000 	.word	0x40021000
 8002954:	fffff0ff 	.word	0xfffff0ff
 8002958:	ffff8fff 	.word	0xffff8fff
 800295c:	08007500 	.word	0x08007500
 8002960:	20000090 	.word	0x20000090
 8002964:	20000094 	.word	0x20000094

08002968 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800296e:	4b3c      	ldr	r3, [pc, #240]	; (8002a60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	2238      	movs	r2, #56	; 0x38
 8002974:	4013      	ands	r3, r2
 8002976:	d10f      	bne.n	8002998 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002978:	4b39      	ldr	r3, [pc, #228]	; (8002a60 <HAL_RCC_GetSysClockFreq+0xf8>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	0adb      	lsrs	r3, r3, #11
 800297e:	2207      	movs	r2, #7
 8002980:	4013      	ands	r3, r2
 8002982:	2201      	movs	r2, #1
 8002984:	409a      	lsls	r2, r3
 8002986:	0013      	movs	r3, r2
 8002988:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800298a:	6839      	ldr	r1, [r7, #0]
 800298c:	4835      	ldr	r0, [pc, #212]	; (8002a64 <HAL_RCC_GetSysClockFreq+0xfc>)
 800298e:	f7fd fbcb 	bl	8000128 <__udivsi3>
 8002992:	0003      	movs	r3, r0
 8002994:	613b      	str	r3, [r7, #16]
 8002996:	e05d      	b.n	8002a54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002998:	4b31      	ldr	r3, [pc, #196]	; (8002a60 <HAL_RCC_GetSysClockFreq+0xf8>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	2238      	movs	r2, #56	; 0x38
 800299e:	4013      	ands	r3, r2
 80029a0:	2b08      	cmp	r3, #8
 80029a2:	d102      	bne.n	80029aa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029a4:	4b30      	ldr	r3, [pc, #192]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x100>)
 80029a6:	613b      	str	r3, [r7, #16]
 80029a8:	e054      	b.n	8002a54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029aa:	4b2d      	ldr	r3, [pc, #180]	; (8002a60 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	2238      	movs	r2, #56	; 0x38
 80029b0:	4013      	ands	r3, r2
 80029b2:	2b10      	cmp	r3, #16
 80029b4:	d138      	bne.n	8002a28 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80029b6:	4b2a      	ldr	r3, [pc, #168]	; (8002a60 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	2203      	movs	r2, #3
 80029bc:	4013      	ands	r3, r2
 80029be:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029c0:	4b27      	ldr	r3, [pc, #156]	; (8002a60 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	091b      	lsrs	r3, r3, #4
 80029c6:	2207      	movs	r2, #7
 80029c8:	4013      	ands	r3, r2
 80029ca:	3301      	adds	r3, #1
 80029cc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2b03      	cmp	r3, #3
 80029d2:	d10d      	bne.n	80029f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029d4:	68b9      	ldr	r1, [r7, #8]
 80029d6:	4824      	ldr	r0, [pc, #144]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x100>)
 80029d8:	f7fd fba6 	bl	8000128 <__udivsi3>
 80029dc:	0003      	movs	r3, r0
 80029de:	0019      	movs	r1, r3
 80029e0:	4b1f      	ldr	r3, [pc, #124]	; (8002a60 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	0a1b      	lsrs	r3, r3, #8
 80029e6:	227f      	movs	r2, #127	; 0x7f
 80029e8:	4013      	ands	r3, r2
 80029ea:	434b      	muls	r3, r1
 80029ec:	617b      	str	r3, [r7, #20]
        break;
 80029ee:	e00d      	b.n	8002a0c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80029f0:	68b9      	ldr	r1, [r7, #8]
 80029f2:	481c      	ldr	r0, [pc, #112]	; (8002a64 <HAL_RCC_GetSysClockFreq+0xfc>)
 80029f4:	f7fd fb98 	bl	8000128 <__udivsi3>
 80029f8:	0003      	movs	r3, r0
 80029fa:	0019      	movs	r1, r3
 80029fc:	4b18      	ldr	r3, [pc, #96]	; (8002a60 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	0a1b      	lsrs	r3, r3, #8
 8002a02:	227f      	movs	r2, #127	; 0x7f
 8002a04:	4013      	ands	r3, r2
 8002a06:	434b      	muls	r3, r1
 8002a08:	617b      	str	r3, [r7, #20]
        break;
 8002a0a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002a0c:	4b14      	ldr	r3, [pc, #80]	; (8002a60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	0f5b      	lsrs	r3, r3, #29
 8002a12:	2207      	movs	r2, #7
 8002a14:	4013      	ands	r3, r2
 8002a16:	3301      	adds	r3, #1
 8002a18:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	6978      	ldr	r0, [r7, #20]
 8002a1e:	f7fd fb83 	bl	8000128 <__udivsi3>
 8002a22:	0003      	movs	r3, r0
 8002a24:	613b      	str	r3, [r7, #16]
 8002a26:	e015      	b.n	8002a54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002a28:	4b0d      	ldr	r3, [pc, #52]	; (8002a60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	2238      	movs	r2, #56	; 0x38
 8002a2e:	4013      	ands	r3, r2
 8002a30:	2b20      	cmp	r3, #32
 8002a32:	d103      	bne.n	8002a3c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002a34:	2380      	movs	r3, #128	; 0x80
 8002a36:	021b      	lsls	r3, r3, #8
 8002a38:	613b      	str	r3, [r7, #16]
 8002a3a:	e00b      	b.n	8002a54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002a3c:	4b08      	ldr	r3, [pc, #32]	; (8002a60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	2238      	movs	r2, #56	; 0x38
 8002a42:	4013      	ands	r3, r2
 8002a44:	2b18      	cmp	r3, #24
 8002a46:	d103      	bne.n	8002a50 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002a48:	23fa      	movs	r3, #250	; 0xfa
 8002a4a:	01db      	lsls	r3, r3, #7
 8002a4c:	613b      	str	r3, [r7, #16]
 8002a4e:	e001      	b.n	8002a54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002a50:	2300      	movs	r3, #0
 8002a52:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002a54:	693b      	ldr	r3, [r7, #16]
}
 8002a56:	0018      	movs	r0, r3
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	b006      	add	sp, #24
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	46c0      	nop			; (mov r8, r8)
 8002a60:	40021000 	.word	0x40021000
 8002a64:	00f42400 	.word	0x00f42400
 8002a68:	007a1200 	.word	0x007a1200

08002a6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a70:	4b02      	ldr	r3, [pc, #8]	; (8002a7c <HAL_RCC_GetHCLKFreq+0x10>)
 8002a72:	681b      	ldr	r3, [r3, #0]
}
 8002a74:	0018      	movs	r0, r3
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	20000090 	.word	0x20000090

08002a80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a80:	b5b0      	push	{r4, r5, r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002a84:	f7ff fff2 	bl	8002a6c <HAL_RCC_GetHCLKFreq>
 8002a88:	0004      	movs	r4, r0
 8002a8a:	f7ff fb3f 	bl	800210c <LL_RCC_GetAPB1Prescaler>
 8002a8e:	0003      	movs	r3, r0
 8002a90:	0b1a      	lsrs	r2, r3, #12
 8002a92:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a94:	0092      	lsls	r2, r2, #2
 8002a96:	58d3      	ldr	r3, [r2, r3]
 8002a98:	221f      	movs	r2, #31
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	40dc      	lsrs	r4, r3
 8002a9e:	0023      	movs	r3, r4
}
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bdb0      	pop	{r4, r5, r7, pc}
 8002aa6:	46c0      	nop			; (mov r8, r8)
 8002aa8:	08007540 	.word	0x08007540

08002aac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002ab4:	2313      	movs	r3, #19
 8002ab6:	18fb      	adds	r3, r7, r3
 8002ab8:	2200      	movs	r2, #0
 8002aba:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002abc:	2312      	movs	r3, #18
 8002abe:	18fb      	adds	r3, r7, r3
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	2380      	movs	r3, #128	; 0x80
 8002aca:	029b      	lsls	r3, r3, #10
 8002acc:	4013      	ands	r3, r2
 8002ace:	d100      	bne.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002ad0:	e0a3      	b.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ad2:	2011      	movs	r0, #17
 8002ad4:	183b      	adds	r3, r7, r0
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ada:	4ba5      	ldr	r3, [pc, #660]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002adc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ade:	2380      	movs	r3, #128	; 0x80
 8002ae0:	055b      	lsls	r3, r3, #21
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	d110      	bne.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ae6:	4ba2      	ldr	r3, [pc, #648]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ae8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002aea:	4ba1      	ldr	r3, [pc, #644]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002aec:	2180      	movs	r1, #128	; 0x80
 8002aee:	0549      	lsls	r1, r1, #21
 8002af0:	430a      	orrs	r2, r1
 8002af2:	63da      	str	r2, [r3, #60]	; 0x3c
 8002af4:	4b9e      	ldr	r3, [pc, #632]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002af6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002af8:	2380      	movs	r3, #128	; 0x80
 8002afa:	055b      	lsls	r3, r3, #21
 8002afc:	4013      	ands	r3, r2
 8002afe:	60bb      	str	r3, [r7, #8]
 8002b00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b02:	183b      	adds	r3, r7, r0
 8002b04:	2201      	movs	r2, #1
 8002b06:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b08:	4b9a      	ldr	r3, [pc, #616]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	4b99      	ldr	r3, [pc, #612]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002b0e:	2180      	movs	r1, #128	; 0x80
 8002b10:	0049      	lsls	r1, r1, #1
 8002b12:	430a      	orrs	r2, r1
 8002b14:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b16:	f7fe fce5 	bl	80014e4 <HAL_GetTick>
 8002b1a:	0003      	movs	r3, r0
 8002b1c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b1e:	e00b      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b20:	f7fe fce0 	bl	80014e4 <HAL_GetTick>
 8002b24:	0002      	movs	r2, r0
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d904      	bls.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002b2e:	2313      	movs	r3, #19
 8002b30:	18fb      	adds	r3, r7, r3
 8002b32:	2203      	movs	r2, #3
 8002b34:	701a      	strb	r2, [r3, #0]
        break;
 8002b36:	e005      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b38:	4b8e      	ldr	r3, [pc, #568]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	2380      	movs	r3, #128	; 0x80
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	4013      	ands	r3, r2
 8002b42:	d0ed      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002b44:	2313      	movs	r3, #19
 8002b46:	18fb      	adds	r3, r7, r3
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d154      	bne.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b4e:	4b88      	ldr	r3, [pc, #544]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b52:	23c0      	movs	r3, #192	; 0xc0
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4013      	ands	r3, r2
 8002b58:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d019      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d014      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b6a:	4b81      	ldr	r3, [pc, #516]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b6e:	4a82      	ldr	r2, [pc, #520]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002b70:	4013      	ands	r3, r2
 8002b72:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b74:	4b7e      	ldr	r3, [pc, #504]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b76:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b78:	4b7d      	ldr	r3, [pc, #500]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b7a:	2180      	movs	r1, #128	; 0x80
 8002b7c:	0249      	lsls	r1, r1, #9
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b82:	4b7b      	ldr	r3, [pc, #492]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b86:	4b7a      	ldr	r3, [pc, #488]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b88:	497c      	ldr	r1, [pc, #496]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8002b8a:	400a      	ands	r2, r1
 8002b8c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b8e:	4b78      	ldr	r3, [pc, #480]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	2201      	movs	r2, #1
 8002b98:	4013      	ands	r3, r2
 8002b9a:	d016      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9c:	f7fe fca2 	bl	80014e4 <HAL_GetTick>
 8002ba0:	0003      	movs	r3, r0
 8002ba2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ba4:	e00c      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba6:	f7fe fc9d 	bl	80014e4 <HAL_GetTick>
 8002baa:	0002      	movs	r2, r0
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	4a73      	ldr	r2, [pc, #460]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d904      	bls.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002bb6:	2313      	movs	r3, #19
 8002bb8:	18fb      	adds	r3, r7, r3
 8002bba:	2203      	movs	r2, #3
 8002bbc:	701a      	strb	r2, [r3, #0]
            break;
 8002bbe:	e004      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bc0:	4b6b      	ldr	r3, [pc, #428]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc4:	2202      	movs	r2, #2
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	d0ed      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002bca:	2313      	movs	r3, #19
 8002bcc:	18fb      	adds	r3, r7, r3
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10a      	bne.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bd4:	4b66      	ldr	r3, [pc, #408]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd8:	4a67      	ldr	r2, [pc, #412]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002bda:	4013      	ands	r3, r2
 8002bdc:	0019      	movs	r1, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002be2:	4b63      	ldr	r3, [pc, #396]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002be4:	430a      	orrs	r2, r1
 8002be6:	65da      	str	r2, [r3, #92]	; 0x5c
 8002be8:	e00c      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bea:	2312      	movs	r3, #18
 8002bec:	18fb      	adds	r3, r7, r3
 8002bee:	2213      	movs	r2, #19
 8002bf0:	18ba      	adds	r2, r7, r2
 8002bf2:	7812      	ldrb	r2, [r2, #0]
 8002bf4:	701a      	strb	r2, [r3, #0]
 8002bf6:	e005      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bf8:	2312      	movs	r3, #18
 8002bfa:	18fb      	adds	r3, r7, r3
 8002bfc:	2213      	movs	r2, #19
 8002bfe:	18ba      	adds	r2, r7, r2
 8002c00:	7812      	ldrb	r2, [r2, #0]
 8002c02:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c04:	2311      	movs	r3, #17
 8002c06:	18fb      	adds	r3, r7, r3
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d105      	bne.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c0e:	4b58      	ldr	r3, [pc, #352]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c12:	4b57      	ldr	r3, [pc, #348]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c14:	495b      	ldr	r1, [pc, #364]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002c16:	400a      	ands	r2, r1
 8002c18:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	4013      	ands	r3, r2
 8002c22:	d009      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c24:	4b52      	ldr	r3, [pc, #328]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c28:	2203      	movs	r2, #3
 8002c2a:	4393      	bics	r3, r2
 8002c2c:	0019      	movs	r1, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	4b4f      	ldr	r3, [pc, #316]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c34:	430a      	orrs	r2, r1
 8002c36:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2210      	movs	r2, #16
 8002c3e:	4013      	ands	r3, r2
 8002c40:	d009      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c42:	4b4b      	ldr	r3, [pc, #300]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c46:	4a50      	ldr	r2, [pc, #320]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002c48:	4013      	ands	r3, r2
 8002c4a:	0019      	movs	r1, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	4b47      	ldr	r3, [pc, #284]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c52:	430a      	orrs	r2, r1
 8002c54:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	2380      	movs	r3, #128	; 0x80
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4013      	ands	r3, r2
 8002c60:	d009      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c62:	4b43      	ldr	r3, [pc, #268]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c66:	4a49      	ldr	r2, [pc, #292]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002c68:	4013      	ands	r3, r2
 8002c6a:	0019      	movs	r1, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	695a      	ldr	r2, [r3, #20]
 8002c70:	4b3f      	ldr	r3, [pc, #252]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c72:	430a      	orrs	r2, r1
 8002c74:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	2380      	movs	r3, #128	; 0x80
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	4013      	ands	r3, r2
 8002c80:	d009      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c82:	4b3b      	ldr	r3, [pc, #236]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c86:	4a42      	ldr	r2, [pc, #264]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c88:	4013      	ands	r3, r2
 8002c8a:	0019      	movs	r1, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	699a      	ldr	r2, [r3, #24]
 8002c90:	4b37      	ldr	r3, [pc, #220]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c92:	430a      	orrs	r2, r1
 8002c94:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	d009      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ca0:	4b33      	ldr	r3, [pc, #204]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca4:	4a3b      	ldr	r2, [pc, #236]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	0019      	movs	r1, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68da      	ldr	r2, [r3, #12]
 8002cae:	4b30      	ldr	r3, [pc, #192]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	2380      	movs	r3, #128	; 0x80
 8002cba:	01db      	lsls	r3, r3, #7
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	d015      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cc0:	4b2b      	ldr	r3, [pc, #172]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	0899      	lsrs	r1, r3, #2
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	69da      	ldr	r2, [r3, #28]
 8002ccc:	4b28      	ldr	r3, [pc, #160]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69da      	ldr	r2, [r3, #28]
 8002cd6:	2380      	movs	r3, #128	; 0x80
 8002cd8:	05db      	lsls	r3, r3, #23
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d106      	bne.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002cde:	4b24      	ldr	r3, [pc, #144]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ce0:	68da      	ldr	r2, [r3, #12]
 8002ce2:	4b23      	ldr	r3, [pc, #140]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ce4:	2180      	movs	r1, #128	; 0x80
 8002ce6:	0249      	lsls	r1, r1, #9
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	2380      	movs	r3, #128	; 0x80
 8002cf2:	039b      	lsls	r3, r3, #14
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	d016      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002cf8:	4b1d      	ldr	r3, [pc, #116]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfc:	4a26      	ldr	r2, [pc, #152]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002cfe:	4013      	ands	r3, r2
 8002d00:	0019      	movs	r1, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a1a      	ldr	r2, [r3, #32]
 8002d06:	4b1a      	ldr	r3, [pc, #104]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a1a      	ldr	r2, [r3, #32]
 8002d10:	2380      	movs	r3, #128	; 0x80
 8002d12:	03db      	lsls	r3, r3, #15
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d106      	bne.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002d18:	4b15      	ldr	r3, [pc, #84]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d1a:	68da      	ldr	r2, [r3, #12]
 8002d1c:	4b14      	ldr	r3, [pc, #80]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d1e:	2180      	movs	r1, #128	; 0x80
 8002d20:	0449      	lsls	r1, r1, #17
 8002d22:	430a      	orrs	r2, r1
 8002d24:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	2380      	movs	r3, #128	; 0x80
 8002d2c:	011b      	lsls	r3, r3, #4
 8002d2e:	4013      	ands	r3, r2
 8002d30:	d016      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002d32:	4b0f      	ldr	r3, [pc, #60]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d36:	4a19      	ldr	r2, [pc, #100]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d38:	4013      	ands	r3, r2
 8002d3a:	0019      	movs	r1, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	691a      	ldr	r2, [r3, #16]
 8002d40:	4b0b      	ldr	r3, [pc, #44]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d42:	430a      	orrs	r2, r1
 8002d44:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	691a      	ldr	r2, [r3, #16]
 8002d4a:	2380      	movs	r3, #128	; 0x80
 8002d4c:	01db      	lsls	r3, r3, #7
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d106      	bne.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002d52:	4b07      	ldr	r3, [pc, #28]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d54:	68da      	ldr	r2, [r3, #12]
 8002d56:	4b06      	ldr	r3, [pc, #24]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d58:	2180      	movs	r1, #128	; 0x80
 8002d5a:	0249      	lsls	r1, r1, #9
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002d60:	2312      	movs	r3, #18
 8002d62:	18fb      	adds	r3, r7, r3
 8002d64:	781b      	ldrb	r3, [r3, #0]
}
 8002d66:	0018      	movs	r0, r3
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	b006      	add	sp, #24
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	46c0      	nop			; (mov r8, r8)
 8002d70:	40021000 	.word	0x40021000
 8002d74:	40007000 	.word	0x40007000
 8002d78:	fffffcff 	.word	0xfffffcff
 8002d7c:	fffeffff 	.word	0xfffeffff
 8002d80:	00001388 	.word	0x00001388
 8002d84:	efffffff 	.word	0xefffffff
 8002d88:	fffff3ff 	.word	0xfffff3ff
 8002d8c:	fff3ffff 	.word	0xfff3ffff
 8002d90:	ffcfffff 	.word	0xffcfffff
 8002d94:	ffffcfff 	.word	0xffffcfff
 8002d98:	ffbfffff 	.word	0xffbfffff
 8002d9c:	ffff3fff 	.word	0xffff3fff

08002da0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002da0:	b5b0      	push	{r4, r5, r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002da8:	230f      	movs	r3, #15
 8002daa:	18fb      	adds	r3, r7, r3
 8002dac:	2201      	movs	r2, #1
 8002dae:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d100      	bne.n	8002db8 <HAL_RTC_Init+0x18>
 8002db6:	e08c      	b.n	8002ed2 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2229      	movs	r2, #41	; 0x29
 8002dbc:	5c9b      	ldrb	r3, [r3, r2]
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10b      	bne.n	8002ddc <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2228      	movs	r2, #40	; 0x28
 8002dc8:	2100      	movs	r1, #0
 8002dca:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2288      	movs	r2, #136	; 0x88
 8002dd0:	0212      	lsls	r2, r2, #8
 8002dd2:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	f7fe f8cc 	bl	8000f74 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2229      	movs	r2, #41	; 0x29
 8002de0:	2102      	movs	r1, #2
 8002de2:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	2210      	movs	r2, #16
 8002dec:	4013      	ands	r3, r2
 8002dee:	2b10      	cmp	r3, #16
 8002df0:	d062      	beq.n	8002eb8 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	22ca      	movs	r2, #202	; 0xca
 8002df8:	625a      	str	r2, [r3, #36]	; 0x24
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2253      	movs	r2, #83	; 0x53
 8002e00:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002e02:	250f      	movs	r5, #15
 8002e04:	197c      	adds	r4, r7, r5
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	0018      	movs	r0, r3
 8002e0a:	f000 f9cc 	bl	80031a6 <RTC_EnterInitMode>
 8002e0e:	0003      	movs	r3, r0
 8002e10:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8002e12:	0028      	movs	r0, r5
 8002e14:	183b      	adds	r3, r7, r0
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d12c      	bne.n	8002e76 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	699a      	ldr	r2, [r3, #24]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	492e      	ldr	r1, [pc, #184]	; (8002ee0 <HAL_RTC_Init+0x140>)
 8002e28:	400a      	ands	r2, r1
 8002e2a:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6999      	ldr	r1, [r3, #24]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689a      	ldr	r2, [r3, #8]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	69db      	ldr	r3, [r3, #28]
 8002e40:	431a      	orrs	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	6912      	ldr	r2, [r2, #16]
 8002e52:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6919      	ldr	r1, [r3, #16]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	041a      	lsls	r2, r3, #16
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002e68:	183c      	adds	r4, r7, r0
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	f000 f9dd 	bl	800322c <RTC_ExitInitMode>
 8002e72:	0003      	movs	r3, r0
 8002e74:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8002e76:	230f      	movs	r3, #15
 8002e78:	18fb      	adds	r3, r7, r3
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d116      	bne.n	8002eae <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	699a      	ldr	r2, [r3, #24]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	00d2      	lsls	r2, r2, #3
 8002e8c:	08d2      	lsrs	r2, r2, #3
 8002e8e:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6999      	ldr	r1, [r3, #24]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	22ff      	movs	r2, #255	; 0xff
 8002eb4:	625a      	str	r2, [r3, #36]	; 0x24
 8002eb6:	e003      	b.n	8002ec0 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002eb8:	230f      	movs	r3, #15
 8002eba:	18fb      	adds	r3, r7, r3
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8002ec0:	230f      	movs	r3, #15
 8002ec2:	18fb      	adds	r3, r7, r3
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d103      	bne.n	8002ed2 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2229      	movs	r2, #41	; 0x29
 8002ece:	2101      	movs	r1, #1
 8002ed0:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8002ed2:	230f      	movs	r3, #15
 8002ed4:	18fb      	adds	r3, r7, r3
 8002ed6:	781b      	ldrb	r3, [r3, #0]
}
 8002ed8:	0018      	movs	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	b004      	add	sp, #16
 8002ede:	bdb0      	pop	{r4, r5, r7, pc}
 8002ee0:	fb8fffbf 	.word	0xfb8fffbf

08002ee4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002ee4:	b5b0      	push	{r4, r5, r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2228      	movs	r2, #40	; 0x28
 8002ef4:	5c9b      	ldrb	r3, [r3, r2]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d101      	bne.n	8002efe <HAL_RTC_SetTime+0x1a>
 8002efa:	2302      	movs	r3, #2
 8002efc:	e092      	b.n	8003024 <HAL_RTC_SetTime+0x140>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2228      	movs	r2, #40	; 0x28
 8002f02:	2101      	movs	r1, #1
 8002f04:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2229      	movs	r2, #41	; 0x29
 8002f0a:	2102      	movs	r1, #2
 8002f0c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	22ca      	movs	r2, #202	; 0xca
 8002f14:	625a      	str	r2, [r3, #36]	; 0x24
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2253      	movs	r2, #83	; 0x53
 8002f1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002f1e:	2513      	movs	r5, #19
 8002f20:	197c      	adds	r4, r7, r5
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	0018      	movs	r0, r3
 8002f26:	f000 f93e 	bl	80031a6 <RTC_EnterInitMode>
 8002f2a:	0003      	movs	r3, r0
 8002f2c:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8002f2e:	197b      	adds	r3, r7, r5
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d162      	bne.n	8002ffc <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d125      	bne.n	8002f88 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	2240      	movs	r2, #64	; 0x40
 8002f44:	4013      	ands	r3, r2
 8002f46:	d102      	bne.n	8002f4e <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	0018      	movs	r0, r3
 8002f54:	f000 f9ae 	bl	80032b4 <RTC_ByteToBcd2>
 8002f58:	0003      	movs	r3, r0
 8002f5a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	785b      	ldrb	r3, [r3, #1]
 8002f60:	0018      	movs	r0, r3
 8002f62:	f000 f9a7 	bl	80032b4 <RTC_ByteToBcd2>
 8002f66:	0003      	movs	r3, r0
 8002f68:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002f6a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	789b      	ldrb	r3, [r3, #2]
 8002f70:	0018      	movs	r0, r3
 8002f72:	f000 f99f 	bl	80032b4 <RTC_ByteToBcd2>
 8002f76:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002f78:	0022      	movs	r2, r4
 8002f7a:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	78db      	ldrb	r3, [r3, #3]
 8002f80:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002f82:	4313      	orrs	r3, r2
 8002f84:	617b      	str	r3, [r7, #20]
 8002f86:	e017      	b.n	8002fb8 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	2240      	movs	r2, #64	; 0x40
 8002f90:	4013      	ands	r3, r2
 8002f92:	d102      	bne.n	8002f9a <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	2200      	movs	r2, #0
 8002f98:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	785b      	ldrb	r3, [r3, #1]
 8002fa4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002fa6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002fac:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	78db      	ldrb	r3, [r3, #3]
 8002fb2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	491b      	ldr	r1, [pc, #108]	; (800302c <HAL_RTC_SetTime+0x148>)
 8002fc0:	400a      	ands	r2, r1
 8002fc2:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	699a      	ldr	r2, [r3, #24]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4918      	ldr	r1, [pc, #96]	; (8003030 <HAL_RTC_SetTime+0x14c>)
 8002fd0:	400a      	ands	r2, r1
 8002fd2:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	6999      	ldr	r1, [r3, #24]
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	68da      	ldr	r2, [r3, #12]
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002fec:	2313      	movs	r3, #19
 8002fee:	18fc      	adds	r4, r7, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	f000 f91a 	bl	800322c <RTC_ExitInitMode>
 8002ff8:	0003      	movs	r3, r0
 8002ffa:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	22ff      	movs	r2, #255	; 0xff
 8003002:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8003004:	2313      	movs	r3, #19
 8003006:	18fb      	adds	r3, r7, r3
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d103      	bne.n	8003016 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2229      	movs	r2, #41	; 0x29
 8003012:	2101      	movs	r1, #1
 8003014:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2228      	movs	r2, #40	; 0x28
 800301a:	2100      	movs	r1, #0
 800301c:	5499      	strb	r1, [r3, r2]

  return status;
 800301e:	2313      	movs	r3, #19
 8003020:	18fb      	adds	r3, r7, r3
 8003022:	781b      	ldrb	r3, [r3, #0]
}
 8003024:	0018      	movs	r0, r3
 8003026:	46bd      	mov	sp, r7
 8003028:	b006      	add	sp, #24
 800302a:	bdb0      	pop	{r4, r5, r7, pc}
 800302c:	007f7f7f 	.word	0x007f7f7f
 8003030:	fffbffff 	.word	0xfffbffff

08003034 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003034:	b5b0      	push	{r4, r5, r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2228      	movs	r2, #40	; 0x28
 8003044:	5c9b      	ldrb	r3, [r3, r2]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d101      	bne.n	800304e <HAL_RTC_SetDate+0x1a>
 800304a:	2302      	movs	r3, #2
 800304c:	e07e      	b.n	800314c <HAL_RTC_SetDate+0x118>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2228      	movs	r2, #40	; 0x28
 8003052:	2101      	movs	r1, #1
 8003054:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2229      	movs	r2, #41	; 0x29
 800305a:	2102      	movs	r1, #2
 800305c:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10e      	bne.n	8003082 <HAL_RTC_SetDate+0x4e>
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	785b      	ldrb	r3, [r3, #1]
 8003068:	001a      	movs	r2, r3
 800306a:	2310      	movs	r3, #16
 800306c:	4013      	ands	r3, r2
 800306e:	d008      	beq.n	8003082 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	785b      	ldrb	r3, [r3, #1]
 8003074:	2210      	movs	r2, #16
 8003076:	4393      	bics	r3, r2
 8003078:	b2db      	uxtb	r3, r3
 800307a:	330a      	adds	r3, #10
 800307c:	b2da      	uxtb	r2, r3
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d11c      	bne.n	80030c2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	78db      	ldrb	r3, [r3, #3]
 800308c:	0018      	movs	r0, r3
 800308e:	f000 f911 	bl	80032b4 <RTC_ByteToBcd2>
 8003092:	0003      	movs	r3, r0
 8003094:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	785b      	ldrb	r3, [r3, #1]
 800309a:	0018      	movs	r0, r3
 800309c:	f000 f90a 	bl	80032b4 <RTC_ByteToBcd2>
 80030a0:	0003      	movs	r3, r0
 80030a2:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80030a4:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	789b      	ldrb	r3, [r3, #2]
 80030aa:	0018      	movs	r0, r3
 80030ac:	f000 f902 	bl	80032b4 <RTC_ByteToBcd2>
 80030b0:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80030b2:	0022      	movs	r2, r4
 80030b4:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80030bc:	4313      	orrs	r3, r2
 80030be:	617b      	str	r3, [r7, #20]
 80030c0:	e00e      	b.n	80030e0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	78db      	ldrb	r3, [r3, #3]
 80030c6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	785b      	ldrb	r3, [r3, #1]
 80030cc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80030ce:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 80030d0:	68ba      	ldr	r2, [r7, #8]
 80030d2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80030d4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80030dc:	4313      	orrs	r3, r2
 80030de:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	22ca      	movs	r2, #202	; 0xca
 80030e6:	625a      	str	r2, [r3, #36]	; 0x24
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2253      	movs	r2, #83	; 0x53
 80030ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80030f0:	2513      	movs	r5, #19
 80030f2:	197c      	adds	r4, r7, r5
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	0018      	movs	r0, r3
 80030f8:	f000 f855 	bl	80031a6 <RTC_EnterInitMode>
 80030fc:	0003      	movs	r3, r0
 80030fe:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8003100:	0028      	movs	r0, r5
 8003102:	183b      	adds	r3, r7, r0
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10c      	bne.n	8003124 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	4910      	ldr	r1, [pc, #64]	; (8003154 <HAL_RTC_SetDate+0x120>)
 8003112:	400a      	ands	r2, r1
 8003114:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003116:	183c      	adds	r4, r7, r0
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	0018      	movs	r0, r3
 800311c:	f000 f886 	bl	800322c <RTC_ExitInitMode>
 8003120:	0003      	movs	r3, r0
 8003122:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	22ff      	movs	r2, #255	; 0xff
 800312a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800312c:	2313      	movs	r3, #19
 800312e:	18fb      	adds	r3, r7, r3
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d103      	bne.n	800313e <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2229      	movs	r2, #41	; 0x29
 800313a:	2101      	movs	r1, #1
 800313c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2228      	movs	r2, #40	; 0x28
 8003142:	2100      	movs	r1, #0
 8003144:	5499      	strb	r1, [r3, r2]

  return status;
 8003146:	2313      	movs	r3, #19
 8003148:	18fb      	adds	r3, r7, r3
 800314a:	781b      	ldrb	r3, [r3, #0]
}
 800314c:	0018      	movs	r0, r3
 800314e:	46bd      	mov	sp, r7
 8003150:	b006      	add	sp, #24
 8003152:	bdb0      	pop	{r4, r5, r7, pc}
 8003154:	00ffff3f 	.word	0x00ffff3f

08003158 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68da      	ldr	r2, [r3, #12]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	21a0      	movs	r1, #160	; 0xa0
 800316c:	438a      	bics	r2, r1
 800316e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003170:	f7fe f9b8 	bl	80014e4 <HAL_GetTick>
 8003174:	0003      	movs	r3, r0
 8003176:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8003178:	e00a      	b.n	8003190 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800317a:	f7fe f9b3 	bl	80014e4 <HAL_GetTick>
 800317e:	0002      	movs	r2, r0
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	1ad2      	subs	r2, r2, r3
 8003184:	23fa      	movs	r3, #250	; 0xfa
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	429a      	cmp	r2, r3
 800318a:	d901      	bls.n	8003190 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e006      	b.n	800319e <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	2220      	movs	r2, #32
 8003198:	4013      	ands	r3, r2
 800319a:	d0ee      	beq.n	800317a <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	0018      	movs	r0, r3
 80031a0:	46bd      	mov	sp, r7
 80031a2:	b004      	add	sp, #16
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b084      	sub	sp, #16
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80031ae:	230f      	movs	r3, #15
 80031b0:	18fb      	adds	r3, r7, r3
 80031b2:	2200      	movs	r2, #0
 80031b4:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	2240      	movs	r2, #64	; 0x40
 80031be:	4013      	ands	r3, r2
 80031c0:	d12c      	bne.n	800321c <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68da      	ldr	r2, [r3, #12]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2180      	movs	r1, #128	; 0x80
 80031ce:	430a      	orrs	r2, r1
 80031d0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80031d2:	f7fe f987 	bl	80014e4 <HAL_GetTick>
 80031d6:	0003      	movs	r3, r0
 80031d8:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80031da:	e014      	b.n	8003206 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80031dc:	f7fe f982 	bl	80014e4 <HAL_GetTick>
 80031e0:	0002      	movs	r2, r0
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	1ad2      	subs	r2, r2, r3
 80031e6:	200f      	movs	r0, #15
 80031e8:	183b      	adds	r3, r7, r0
 80031ea:	1839      	adds	r1, r7, r0
 80031ec:	7809      	ldrb	r1, [r1, #0]
 80031ee:	7019      	strb	r1, [r3, #0]
 80031f0:	23fa      	movs	r3, #250	; 0xfa
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d906      	bls.n	8003206 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 80031f8:	183b      	adds	r3, r7, r0
 80031fa:	2203      	movs	r2, #3
 80031fc:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2229      	movs	r2, #41	; 0x29
 8003202:	2103      	movs	r1, #3
 8003204:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	2240      	movs	r2, #64	; 0x40
 800320e:	4013      	ands	r3, r2
 8003210:	d104      	bne.n	800321c <RTC_EnterInitMode+0x76>
 8003212:	230f      	movs	r3, #15
 8003214:	18fb      	adds	r3, r7, r3
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	2b03      	cmp	r3, #3
 800321a:	d1df      	bne.n	80031dc <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800321c:	230f      	movs	r3, #15
 800321e:	18fb      	adds	r3, r7, r3
 8003220:	781b      	ldrb	r3, [r3, #0]
}
 8003222:	0018      	movs	r0, r3
 8003224:	46bd      	mov	sp, r7
 8003226:	b004      	add	sp, #16
 8003228:	bd80      	pop	{r7, pc}
	...

0800322c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800322c:	b590      	push	{r4, r7, lr}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003234:	240f      	movs	r4, #15
 8003236:	193b      	adds	r3, r7, r4
 8003238:	2200      	movs	r2, #0
 800323a:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800323c:	4b1c      	ldr	r3, [pc, #112]	; (80032b0 <RTC_ExitInitMode+0x84>)
 800323e:	68da      	ldr	r2, [r3, #12]
 8003240:	4b1b      	ldr	r3, [pc, #108]	; (80032b0 <RTC_ExitInitMode+0x84>)
 8003242:	2180      	movs	r1, #128	; 0x80
 8003244:	438a      	bics	r2, r1
 8003246:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003248:	4b19      	ldr	r3, [pc, #100]	; (80032b0 <RTC_ExitInitMode+0x84>)
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	2220      	movs	r2, #32
 800324e:	4013      	ands	r3, r2
 8003250:	d10d      	bne.n	800326e <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	0018      	movs	r0, r3
 8003256:	f7ff ff7f 	bl	8003158 <HAL_RTC_WaitForSynchro>
 800325a:	1e03      	subs	r3, r0, #0
 800325c:	d021      	beq.n	80032a2 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2229      	movs	r2, #41	; 0x29
 8003262:	2103      	movs	r1, #3
 8003264:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8003266:	193b      	adds	r3, r7, r4
 8003268:	2203      	movs	r2, #3
 800326a:	701a      	strb	r2, [r3, #0]
 800326c:	e019      	b.n	80032a2 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800326e:	4b10      	ldr	r3, [pc, #64]	; (80032b0 <RTC_ExitInitMode+0x84>)
 8003270:	699a      	ldr	r2, [r3, #24]
 8003272:	4b0f      	ldr	r3, [pc, #60]	; (80032b0 <RTC_ExitInitMode+0x84>)
 8003274:	2120      	movs	r1, #32
 8003276:	438a      	bics	r2, r1
 8003278:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	0018      	movs	r0, r3
 800327e:	f7ff ff6b 	bl	8003158 <HAL_RTC_WaitForSynchro>
 8003282:	1e03      	subs	r3, r0, #0
 8003284:	d007      	beq.n	8003296 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2229      	movs	r2, #41	; 0x29
 800328a:	2103      	movs	r1, #3
 800328c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800328e:	230f      	movs	r3, #15
 8003290:	18fb      	adds	r3, r7, r3
 8003292:	2203      	movs	r2, #3
 8003294:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003296:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <RTC_ExitInitMode+0x84>)
 8003298:	699a      	ldr	r2, [r3, #24]
 800329a:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <RTC_ExitInitMode+0x84>)
 800329c:	2120      	movs	r1, #32
 800329e:	430a      	orrs	r2, r1
 80032a0:	619a      	str	r2, [r3, #24]
  }

  return status;
 80032a2:	230f      	movs	r3, #15
 80032a4:	18fb      	adds	r3, r7, r3
 80032a6:	781b      	ldrb	r3, [r3, #0]
}
 80032a8:	0018      	movs	r0, r3
 80032aa:	46bd      	mov	sp, r7
 80032ac:	b005      	add	sp, #20
 80032ae:	bd90      	pop	{r4, r7, pc}
 80032b0:	40002800 	.word	0x40002800

080032b4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	0002      	movs	r2, r0
 80032bc:	1dfb      	adds	r3, r7, #7
 80032be:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80032c0:	2300      	movs	r3, #0
 80032c2:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80032c4:	230b      	movs	r3, #11
 80032c6:	18fb      	adds	r3, r7, r3
 80032c8:	1dfa      	adds	r2, r7, #7
 80032ca:	7812      	ldrb	r2, [r2, #0]
 80032cc:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 80032ce:	e008      	b.n	80032e2 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	3301      	adds	r3, #1
 80032d4:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80032d6:	220b      	movs	r2, #11
 80032d8:	18bb      	adds	r3, r7, r2
 80032da:	18ba      	adds	r2, r7, r2
 80032dc:	7812      	ldrb	r2, [r2, #0]
 80032de:	3a0a      	subs	r2, #10
 80032e0:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 80032e2:	210b      	movs	r1, #11
 80032e4:	187b      	adds	r3, r7, r1
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b09      	cmp	r3, #9
 80032ea:	d8f1      	bhi.n	80032d0 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	b2da      	uxtb	r2, r3
 80032f4:	187b      	adds	r3, r7, r1
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	b2db      	uxtb	r3, r3
}
 80032fc:	0018      	movs	r0, r3
 80032fe:	46bd      	mov	sp, r7
 8003300:	b004      	add	sp, #16
 8003302:	bd80      	pop	{r7, pc}

08003304 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2228      	movs	r2, #40	; 0x28
 8003314:	5c9b      	ldrb	r3, [r3, r2]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d101      	bne.n	800331e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800331a:	2302      	movs	r3, #2
 800331c:	e082      	b.n	8003424 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2228      	movs	r2, #40	; 0x28
 8003322:	2101      	movs	r1, #1
 8003324:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2229      	movs	r2, #41	; 0x29
 800332a:	2102      	movs	r1, #2
 800332c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	22ca      	movs	r2, #202	; 0xca
 8003334:	625a      	str	r2, [r3, #36]	; 0x24
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2253      	movs	r2, #83	; 0x53
 800333c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	699a      	ldr	r2, [r3, #24]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4938      	ldr	r1, [pc, #224]	; (800342c <HAL_RTCEx_SetWakeUpTimer_IT+0x128>)
 800334a:	400a      	ands	r2, r1
 800334c:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2104      	movs	r1, #4
 800335a:	430a      	orrs	r2, r1
 800335c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800335e:	4b34      	ldr	r3, [pc, #208]	; (8003430 <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>)
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	2240      	movs	r2, #64	; 0x40
 8003364:	4013      	ands	r3, r2
 8003366:	d121      	bne.n	80033ac <HAL_RTCEx_SetWakeUpTimer_IT+0xa8>
  {
    tickstart = HAL_GetTick();
 8003368:	f7fe f8bc 	bl	80014e4 <HAL_GetTick>
 800336c:	0003      	movs	r3, r0
 800336e:	617b      	str	r3, [r7, #20]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003370:	e016      	b.n	80033a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003372:	f7fe f8b7 	bl	80014e4 <HAL_GetTick>
 8003376:	0002      	movs	r2, r0
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	1ad2      	subs	r2, r2, r3
 800337c:	23fa      	movs	r3, #250	; 0xfa
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	429a      	cmp	r2, r3
 8003382:	d90d      	bls.n	80033a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	22ff      	movs	r2, #255	; 0xff
 800338a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2229      	movs	r2, #41	; 0x29
 8003390:	2103      	movs	r1, #3
 8003392:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2228      	movs	r2, #40	; 0x28
 8003398:	2100      	movs	r1, #0
 800339a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e041      	b.n	8003424 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	2204      	movs	r2, #4
 80033a8:	4013      	ands	r3, r2
 80033aa:	d0e2      	beq.n	8003372 <HAL_RTCEx_SetWakeUpTimer_IT+0x6e>
      }
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68ba      	ldr	r2, [r7, #8]
 80033b2:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	699a      	ldr	r2, [r3, #24]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2107      	movs	r1, #7
 80033c0:	438a      	bics	r2, r1
 80033c2:	619a      	str	r2, [r3, #24]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6999      	ldr	r1, [r3, #24]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	430a      	orrs	r2, r1
 80033d2:	619a      	str	r2, [r3, #24]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80033d4:	4a17      	ldr	r2, [pc, #92]	; (8003434 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 80033d6:	2380      	movs	r3, #128	; 0x80
 80033d8:	58d3      	ldr	r3, [r2, r3]
 80033da:	4916      	ldr	r1, [pc, #88]	; (8003434 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 80033dc:	2280      	movs	r2, #128	; 0x80
 80033de:	0312      	lsls	r2, r2, #12
 80033e0:	4313      	orrs	r3, r2
 80033e2:	2280      	movs	r2, #128	; 0x80
 80033e4:	508b      	str	r3, [r1, r2]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	699a      	ldr	r2, [r3, #24]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2180      	movs	r1, #128	; 0x80
 80033f2:	01c9      	lsls	r1, r1, #7
 80033f4:	430a      	orrs	r2, r1
 80033f6:	619a      	str	r2, [r3, #24]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	699a      	ldr	r2, [r3, #24]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2180      	movs	r1, #128	; 0x80
 8003404:	00c9      	lsls	r1, r1, #3
 8003406:	430a      	orrs	r2, r1
 8003408:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	22ff      	movs	r2, #255	; 0xff
 8003410:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2229      	movs	r2, #41	; 0x29
 8003416:	2101      	movs	r1, #1
 8003418:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2228      	movs	r2, #40	; 0x28
 800341e:	2100      	movs	r1, #0
 8003420:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	0018      	movs	r0, r3
 8003426:	46bd      	mov	sp, r7
 8003428:	b006      	add	sp, #24
 800342a:	bd80      	pop	{r7, pc}
 800342c:	fffffbff 	.word	0xfffffbff
 8003430:	40002800 	.word	0x40002800
 8003434:	40021800 	.word	0x40021800

08003438 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003446:	2204      	movs	r2, #4
 8003448:	4013      	ands	r3, r2
 800344a:	d00b      	beq.n	8003464 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2104      	movs	r1, #4
 8003458:	430a      	orrs	r2, r1
 800345a:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	0018      	movs	r0, r3
 8003460:	f000 f808 	bl	8003474 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2229      	movs	r2, #41	; 0x29
 8003468:	2101      	movs	r1, #1
 800346a:	5499      	strb	r1, [r3, r2]
}
 800346c:	46c0      	nop			; (mov r8, r8)
 800346e:	46bd      	mov	sp, r7
 8003470:	b002      	add	sp, #8
 8003472:	bd80      	pop	{r7, pc}

08003474 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 800347c:	46c0      	nop			; (mov r8, r8)
 800347e:	46bd      	mov	sp, r7
 8003480:	b002      	add	sp, #8
 8003482:	bd80      	pop	{r7, pc}

08003484 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e04a      	b.n	800352c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	223d      	movs	r2, #61	; 0x3d
 800349a:	5c9b      	ldrb	r3, [r3, r2]
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d107      	bne.n	80034b2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	223c      	movs	r2, #60	; 0x3c
 80034a6:	2100      	movs	r1, #0
 80034a8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	0018      	movs	r0, r3
 80034ae:	f7fd fda7 	bl	8001000 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	223d      	movs	r2, #61	; 0x3d
 80034b6:	2102      	movs	r1, #2
 80034b8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	3304      	adds	r3, #4
 80034c2:	0019      	movs	r1, r3
 80034c4:	0010      	movs	r0, r2
 80034c6:	f000 fa09 	bl	80038dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2248      	movs	r2, #72	; 0x48
 80034ce:	2101      	movs	r1, #1
 80034d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	223e      	movs	r2, #62	; 0x3e
 80034d6:	2101      	movs	r1, #1
 80034d8:	5499      	strb	r1, [r3, r2]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	223f      	movs	r2, #63	; 0x3f
 80034de:	2101      	movs	r1, #1
 80034e0:	5499      	strb	r1, [r3, r2]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2240      	movs	r2, #64	; 0x40
 80034e6:	2101      	movs	r1, #1
 80034e8:	5499      	strb	r1, [r3, r2]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2241      	movs	r2, #65	; 0x41
 80034ee:	2101      	movs	r1, #1
 80034f0:	5499      	strb	r1, [r3, r2]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2242      	movs	r2, #66	; 0x42
 80034f6:	2101      	movs	r1, #1
 80034f8:	5499      	strb	r1, [r3, r2]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2243      	movs	r2, #67	; 0x43
 80034fe:	2101      	movs	r1, #1
 8003500:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2244      	movs	r2, #68	; 0x44
 8003506:	2101      	movs	r1, #1
 8003508:	5499      	strb	r1, [r3, r2]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2245      	movs	r2, #69	; 0x45
 800350e:	2101      	movs	r1, #1
 8003510:	5499      	strb	r1, [r3, r2]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2246      	movs	r2, #70	; 0x46
 8003516:	2101      	movs	r1, #1
 8003518:	5499      	strb	r1, [r3, r2]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2247      	movs	r2, #71	; 0x47
 800351e:	2101      	movs	r1, #1
 8003520:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	223d      	movs	r2, #61	; 0x3d
 8003526:	2101      	movs	r1, #1
 8003528:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	0018      	movs	r0, r3
 800352e:	46bd      	mov	sp, r7
 8003530:	b002      	add	sp, #8
 8003532:	bd80      	pop	{r7, pc}

08003534 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	223d      	movs	r2, #61	; 0x3d
 8003540:	5c9b      	ldrb	r3, [r3, r2]
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b01      	cmp	r3, #1
 8003546:	d001      	beq.n	800354c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e03d      	b.n	80035c8 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	223d      	movs	r2, #61	; 0x3d
 8003550:	2102      	movs	r1, #2
 8003552:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68da      	ldr	r2, [r3, #12]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2101      	movs	r1, #1
 8003560:	430a      	orrs	r2, r1
 8003562:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a19      	ldr	r2, [pc, #100]	; (80035d0 <HAL_TIM_Base_Start_IT+0x9c>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d00a      	beq.n	8003584 <HAL_TIM_Base_Start_IT+0x50>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	2380      	movs	r3, #128	; 0x80
 8003574:	05db      	lsls	r3, r3, #23
 8003576:	429a      	cmp	r2, r3
 8003578:	d004      	beq.n	8003584 <HAL_TIM_Base_Start_IT+0x50>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a15      	ldr	r2, [pc, #84]	; (80035d4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d116      	bne.n	80035b2 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	4a13      	ldr	r2, [pc, #76]	; (80035d8 <HAL_TIM_Base_Start_IT+0xa4>)
 800358c:	4013      	ands	r3, r2
 800358e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2b06      	cmp	r3, #6
 8003594:	d016      	beq.n	80035c4 <HAL_TIM_Base_Start_IT+0x90>
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	2380      	movs	r3, #128	; 0x80
 800359a:	025b      	lsls	r3, r3, #9
 800359c:	429a      	cmp	r2, r3
 800359e:	d011      	beq.n	80035c4 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2101      	movs	r1, #1
 80035ac:	430a      	orrs	r2, r1
 80035ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035b0:	e008      	b.n	80035c4 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2101      	movs	r1, #1
 80035be:	430a      	orrs	r2, r1
 80035c0:	601a      	str	r2, [r3, #0]
 80035c2:	e000      	b.n	80035c6 <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035c4:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	0018      	movs	r0, r3
 80035ca:	46bd      	mov	sp, r7
 80035cc:	b004      	add	sp, #16
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40012c00 	.word	0x40012c00
 80035d4:	40000400 	.word	0x40000400
 80035d8:	00010007 	.word	0x00010007

080035dc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68da      	ldr	r2, [r3, #12]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2101      	movs	r1, #1
 80035f0:	438a      	bics	r2, r1
 80035f2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	4a0d      	ldr	r2, [pc, #52]	; (8003630 <HAL_TIM_Base_Stop_IT+0x54>)
 80035fc:	4013      	ands	r3, r2
 80035fe:	d10d      	bne.n	800361c <HAL_TIM_Base_Stop_IT+0x40>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	4a0b      	ldr	r2, [pc, #44]	; (8003634 <HAL_TIM_Base_Stop_IT+0x58>)
 8003608:	4013      	ands	r3, r2
 800360a:	d107      	bne.n	800361c <HAL_TIM_Base_Stop_IT+0x40>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2101      	movs	r1, #1
 8003618:	438a      	bics	r2, r1
 800361a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	223d      	movs	r2, #61	; 0x3d
 8003620:	2101      	movs	r1, #1
 8003622:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	0018      	movs	r0, r3
 8003628:	46bd      	mov	sp, r7
 800362a:	b002      	add	sp, #8
 800362c:	bd80      	pop	{r7, pc}
 800362e:	46c0      	nop			; (mov r8, r8)
 8003630:	00001111 	.word	0x00001111
 8003634:	00000444 	.word	0x00000444

08003638 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	2202      	movs	r2, #2
 8003648:	4013      	ands	r3, r2
 800364a:	2b02      	cmp	r3, #2
 800364c:	d124      	bne.n	8003698 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	2202      	movs	r2, #2
 8003656:	4013      	ands	r3, r2
 8003658:	2b02      	cmp	r3, #2
 800365a:	d11d      	bne.n	8003698 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2203      	movs	r2, #3
 8003662:	4252      	negs	r2, r2
 8003664:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	2203      	movs	r2, #3
 8003674:	4013      	ands	r3, r2
 8003676:	d004      	beq.n	8003682 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	0018      	movs	r0, r3
 800367c:	f000 f916 	bl	80038ac <HAL_TIM_IC_CaptureCallback>
 8003680:	e007      	b.n	8003692 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	0018      	movs	r0, r3
 8003686:	f000 f909 	bl	800389c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	0018      	movs	r0, r3
 800368e:	f000 f915 	bl	80038bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	2204      	movs	r2, #4
 80036a0:	4013      	ands	r3, r2
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	d125      	bne.n	80036f2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	2204      	movs	r2, #4
 80036ae:	4013      	ands	r3, r2
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	d11e      	bne.n	80036f2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2205      	movs	r2, #5
 80036ba:	4252      	negs	r2, r2
 80036bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2202      	movs	r2, #2
 80036c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	699a      	ldr	r2, [r3, #24]
 80036ca:	23c0      	movs	r3, #192	; 0xc0
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	4013      	ands	r3, r2
 80036d0:	d004      	beq.n	80036dc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	0018      	movs	r0, r3
 80036d6:	f000 f8e9 	bl	80038ac <HAL_TIM_IC_CaptureCallback>
 80036da:	e007      	b.n	80036ec <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	0018      	movs	r0, r3
 80036e0:	f000 f8dc 	bl	800389c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	0018      	movs	r0, r3
 80036e8:	f000 f8e8 	bl	80038bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	2208      	movs	r2, #8
 80036fa:	4013      	ands	r3, r2
 80036fc:	2b08      	cmp	r3, #8
 80036fe:	d124      	bne.n	800374a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	2208      	movs	r2, #8
 8003708:	4013      	ands	r3, r2
 800370a:	2b08      	cmp	r3, #8
 800370c:	d11d      	bne.n	800374a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2209      	movs	r2, #9
 8003714:	4252      	negs	r2, r2
 8003716:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2204      	movs	r2, #4
 800371c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	69db      	ldr	r3, [r3, #28]
 8003724:	2203      	movs	r2, #3
 8003726:	4013      	ands	r3, r2
 8003728:	d004      	beq.n	8003734 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	0018      	movs	r0, r3
 800372e:	f000 f8bd 	bl	80038ac <HAL_TIM_IC_CaptureCallback>
 8003732:	e007      	b.n	8003744 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	0018      	movs	r0, r3
 8003738:	f000 f8b0 	bl	800389c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	0018      	movs	r0, r3
 8003740:	f000 f8bc 	bl	80038bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	2210      	movs	r2, #16
 8003752:	4013      	ands	r3, r2
 8003754:	2b10      	cmp	r3, #16
 8003756:	d125      	bne.n	80037a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	2210      	movs	r2, #16
 8003760:	4013      	ands	r3, r2
 8003762:	2b10      	cmp	r3, #16
 8003764:	d11e      	bne.n	80037a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2211      	movs	r2, #17
 800376c:	4252      	negs	r2, r2
 800376e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2208      	movs	r2, #8
 8003774:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	69da      	ldr	r2, [r3, #28]
 800377c:	23c0      	movs	r3, #192	; 0xc0
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4013      	ands	r3, r2
 8003782:	d004      	beq.n	800378e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	0018      	movs	r0, r3
 8003788:	f000 f890 	bl	80038ac <HAL_TIM_IC_CaptureCallback>
 800378c:	e007      	b.n	800379e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	0018      	movs	r0, r3
 8003792:	f000 f883 	bl	800389c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	0018      	movs	r0, r3
 800379a:	f000 f88f 	bl	80038bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	2201      	movs	r2, #1
 80037ac:	4013      	ands	r3, r2
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d10f      	bne.n	80037d2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	2201      	movs	r2, #1
 80037ba:	4013      	ands	r3, r2
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d108      	bne.n	80037d2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2202      	movs	r2, #2
 80037c6:	4252      	negs	r2, r2
 80037c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	0018      	movs	r0, r3
 80037ce:	f7fd fb8d 	bl	8000eec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	2280      	movs	r2, #128	; 0x80
 80037da:	4013      	ands	r3, r2
 80037dc:	2b80      	cmp	r3, #128	; 0x80
 80037de:	d10f      	bne.n	8003800 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	2280      	movs	r2, #128	; 0x80
 80037e8:	4013      	ands	r3, r2
 80037ea:	2b80      	cmp	r3, #128	; 0x80
 80037ec:	d108      	bne.n	8003800 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2281      	movs	r2, #129	; 0x81
 80037f4:	4252      	negs	r2, r2
 80037f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	0018      	movs	r0, r3
 80037fc:	f000 f8ec 	bl	80039d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	691a      	ldr	r2, [r3, #16]
 8003806:	2380      	movs	r3, #128	; 0x80
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	401a      	ands	r2, r3
 800380c:	2380      	movs	r3, #128	; 0x80
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	429a      	cmp	r2, r3
 8003812:	d10e      	bne.n	8003832 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	2280      	movs	r2, #128	; 0x80
 800381c:	4013      	ands	r3, r2
 800381e:	2b80      	cmp	r3, #128	; 0x80
 8003820:	d107      	bne.n	8003832 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a1c      	ldr	r2, [pc, #112]	; (8003898 <HAL_TIM_IRQHandler+0x260>)
 8003828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	0018      	movs	r0, r3
 800382e:	f000 f8db 	bl	80039e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	2240      	movs	r2, #64	; 0x40
 800383a:	4013      	ands	r3, r2
 800383c:	2b40      	cmp	r3, #64	; 0x40
 800383e:	d10f      	bne.n	8003860 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	2240      	movs	r2, #64	; 0x40
 8003848:	4013      	ands	r3, r2
 800384a:	2b40      	cmp	r3, #64	; 0x40
 800384c:	d108      	bne.n	8003860 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2241      	movs	r2, #65	; 0x41
 8003854:	4252      	negs	r2, r2
 8003856:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	0018      	movs	r0, r3
 800385c:	f000 f836 	bl	80038cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	2220      	movs	r2, #32
 8003868:	4013      	ands	r3, r2
 800386a:	2b20      	cmp	r3, #32
 800386c:	d10f      	bne.n	800388e <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	2220      	movs	r2, #32
 8003876:	4013      	ands	r3, r2
 8003878:	2b20      	cmp	r3, #32
 800387a:	d108      	bne.n	800388e <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2221      	movs	r2, #33	; 0x21
 8003882:	4252      	negs	r2, r2
 8003884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	0018      	movs	r0, r3
 800388a:	f000 f89d 	bl	80039c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800388e:	46c0      	nop			; (mov r8, r8)
 8003890:	46bd      	mov	sp, r7
 8003892:	b002      	add	sp, #8
 8003894:	bd80      	pop	{r7, pc}
 8003896:	46c0      	nop			; (mov r8, r8)
 8003898:	fffffeff 	.word	0xfffffeff

0800389c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038a4:	46c0      	nop			; (mov r8, r8)
 80038a6:	46bd      	mov	sp, r7
 80038a8:	b002      	add	sp, #8
 80038aa:	bd80      	pop	{r7, pc}

080038ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038b4:	46c0      	nop			; (mov r8, r8)
 80038b6:	46bd      	mov	sp, r7
 80038b8:	b002      	add	sp, #8
 80038ba:	bd80      	pop	{r7, pc}

080038bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038c4:	46c0      	nop			; (mov r8, r8)
 80038c6:	46bd      	mov	sp, r7
 80038c8:	b002      	add	sp, #8
 80038ca:	bd80      	pop	{r7, pc}

080038cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038d4:	46c0      	nop			; (mov r8, r8)
 80038d6:	46bd      	mov	sp, r7
 80038d8:	b002      	add	sp, #8
 80038da:	bd80      	pop	{r7, pc}

080038dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a30      	ldr	r2, [pc, #192]	; (80039b0 <TIM_Base_SetConfig+0xd4>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d008      	beq.n	8003906 <TIM_Base_SetConfig+0x2a>
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	2380      	movs	r3, #128	; 0x80
 80038f8:	05db      	lsls	r3, r3, #23
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d003      	beq.n	8003906 <TIM_Base_SetConfig+0x2a>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a2c      	ldr	r2, [pc, #176]	; (80039b4 <TIM_Base_SetConfig+0xd8>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d108      	bne.n	8003918 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2270      	movs	r2, #112	; 0x70
 800390a:	4393      	bics	r3, r2
 800390c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	4313      	orrs	r3, r2
 8003916:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a25      	ldr	r2, [pc, #148]	; (80039b0 <TIM_Base_SetConfig+0xd4>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d014      	beq.n	800394a <TIM_Base_SetConfig+0x6e>
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	2380      	movs	r3, #128	; 0x80
 8003924:	05db      	lsls	r3, r3, #23
 8003926:	429a      	cmp	r2, r3
 8003928:	d00f      	beq.n	800394a <TIM_Base_SetConfig+0x6e>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a21      	ldr	r2, [pc, #132]	; (80039b4 <TIM_Base_SetConfig+0xd8>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d00b      	beq.n	800394a <TIM_Base_SetConfig+0x6e>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a20      	ldr	r2, [pc, #128]	; (80039b8 <TIM_Base_SetConfig+0xdc>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d007      	beq.n	800394a <TIM_Base_SetConfig+0x6e>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a1f      	ldr	r2, [pc, #124]	; (80039bc <TIM_Base_SetConfig+0xe0>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d003      	beq.n	800394a <TIM_Base_SetConfig+0x6e>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a1e      	ldr	r2, [pc, #120]	; (80039c0 <TIM_Base_SetConfig+0xe4>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d108      	bne.n	800395c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	4a1d      	ldr	r2, [pc, #116]	; (80039c4 <TIM_Base_SetConfig+0xe8>)
 800394e:	4013      	ands	r3, r2
 8003950:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	4313      	orrs	r3, r2
 800395a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2280      	movs	r2, #128	; 0x80
 8003960:	4393      	bics	r3, r2
 8003962:	001a      	movs	r2, r3
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	4313      	orrs	r3, r2
 800396a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	689a      	ldr	r2, [r3, #8]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a0a      	ldr	r2, [pc, #40]	; (80039b0 <TIM_Base_SetConfig+0xd4>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d007      	beq.n	800399a <TIM_Base_SetConfig+0xbe>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a0b      	ldr	r2, [pc, #44]	; (80039bc <TIM_Base_SetConfig+0xe0>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d003      	beq.n	800399a <TIM_Base_SetConfig+0xbe>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a0a      	ldr	r2, [pc, #40]	; (80039c0 <TIM_Base_SetConfig+0xe4>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d103      	bne.n	80039a2 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	691a      	ldr	r2, [r3, #16]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	615a      	str	r2, [r3, #20]
}
 80039a8:	46c0      	nop			; (mov r8, r8)
 80039aa:	46bd      	mov	sp, r7
 80039ac:	b004      	add	sp, #16
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	40012c00 	.word	0x40012c00
 80039b4:	40000400 	.word	0x40000400
 80039b8:	40002000 	.word	0x40002000
 80039bc:	40014400 	.word	0x40014400
 80039c0:	40014800 	.word	0x40014800
 80039c4:	fffffcff 	.word	0xfffffcff

080039c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039d0:	46c0      	nop			; (mov r8, r8)
 80039d2:	46bd      	mov	sp, r7
 80039d4:	b002      	add	sp, #8
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039e0:	46c0      	nop			; (mov r8, r8)
 80039e2:	46bd      	mov	sp, r7
 80039e4:	b002      	add	sp, #8
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80039f0:	46c0      	nop			; (mov r8, r8)
 80039f2:	46bd      	mov	sp, r7
 80039f4:	b002      	add	sp, #8
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e046      	b.n	8003a98 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2288      	movs	r2, #136	; 0x88
 8003a0e:	589b      	ldr	r3, [r3, r2]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d107      	bne.n	8003a24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2284      	movs	r2, #132	; 0x84
 8003a18:	2100      	movs	r1, #0
 8003a1a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	0018      	movs	r0, r3
 8003a20:	f7fd fb16 	bl	8001050 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2288      	movs	r2, #136	; 0x88
 8003a28:	2124      	movs	r1, #36	; 0x24
 8003a2a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2101      	movs	r1, #1
 8003a38:	438a      	bics	r2, r1
 8003a3a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	0018      	movs	r0, r3
 8003a40:	f000 fc12 	bl	8004268 <UART_SetConfig>
 8003a44:	0003      	movs	r3, r0
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d101      	bne.n	8003a4e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e024      	b.n	8003a98 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	0018      	movs	r0, r3
 8003a5a:	f000 fe7d 	bl	8004758 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	490d      	ldr	r1, [pc, #52]	; (8003aa0 <HAL_UART_Init+0xa8>)
 8003a6a:	400a      	ands	r2, r1
 8003a6c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	212a      	movs	r1, #42	; 0x2a
 8003a7a:	438a      	bics	r2, r1
 8003a7c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2101      	movs	r1, #1
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	0018      	movs	r0, r3
 8003a92:	f000 ff15 	bl	80048c0 <UART_CheckIdleState>
 8003a96:	0003      	movs	r3, r0
}
 8003a98:	0018      	movs	r0, r3
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	b002      	add	sp, #8
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	ffffb7ff 	.word	0xffffb7ff

08003aa4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b08a      	sub	sp, #40	; 0x28
 8003aa8:	af02      	add	r7, sp, #8
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	603b      	str	r3, [r7, #0]
 8003ab0:	1dbb      	adds	r3, r7, #6
 8003ab2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2288      	movs	r2, #136	; 0x88
 8003ab8:	589b      	ldr	r3, [r3, r2]
 8003aba:	2b20      	cmp	r3, #32
 8003abc:	d000      	beq.n	8003ac0 <HAL_UART_Transmit+0x1c>
 8003abe:	e088      	b.n	8003bd2 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <HAL_UART_Transmit+0x2a>
 8003ac6:	1dbb      	adds	r3, r7, #6
 8003ac8:	881b      	ldrh	r3, [r3, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e080      	b.n	8003bd4 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	689a      	ldr	r2, [r3, #8]
 8003ad6:	2380      	movs	r3, #128	; 0x80
 8003ad8:	015b      	lsls	r3, r3, #5
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d109      	bne.n	8003af2 <HAL_UART_Transmit+0x4e>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d105      	bne.n	8003af2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	4013      	ands	r3, r2
 8003aec:	d001      	beq.n	8003af2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e070      	b.n	8003bd4 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2290      	movs	r2, #144	; 0x90
 8003af6:	2100      	movs	r1, #0
 8003af8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2288      	movs	r2, #136	; 0x88
 8003afe:	2121      	movs	r1, #33	; 0x21
 8003b00:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b02:	f7fd fcef 	bl	80014e4 <HAL_GetTick>
 8003b06:	0003      	movs	r3, r0
 8003b08:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	1dba      	adds	r2, r7, #6
 8003b0e:	2154      	movs	r1, #84	; 0x54
 8003b10:	8812      	ldrh	r2, [r2, #0]
 8003b12:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	1dba      	adds	r2, r7, #6
 8003b18:	2156      	movs	r1, #86	; 0x56
 8003b1a:	8812      	ldrh	r2, [r2, #0]
 8003b1c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	689a      	ldr	r2, [r3, #8]
 8003b22:	2380      	movs	r3, #128	; 0x80
 8003b24:	015b      	lsls	r3, r3, #5
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d108      	bne.n	8003b3c <HAL_UART_Transmit+0x98>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d104      	bne.n	8003b3c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003b32:	2300      	movs	r3, #0
 8003b34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	61bb      	str	r3, [r7, #24]
 8003b3a:	e003      	b.n	8003b44 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b40:	2300      	movs	r3, #0
 8003b42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b44:	e02c      	b.n	8003ba0 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	0013      	movs	r3, r2
 8003b50:	2200      	movs	r2, #0
 8003b52:	2180      	movs	r1, #128	; 0x80
 8003b54:	f000 ff02 	bl	800495c <UART_WaitOnFlagUntilTimeout>
 8003b58:	1e03      	subs	r3, r0, #0
 8003b5a:	d001      	beq.n	8003b60 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e039      	b.n	8003bd4 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10b      	bne.n	8003b7e <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	881b      	ldrh	r3, [r3, #0]
 8003b6a:	001a      	movs	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	05d2      	lsls	r2, r2, #23
 8003b72:	0dd2      	lsrs	r2, r2, #23
 8003b74:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	3302      	adds	r3, #2
 8003b7a:	61bb      	str	r3, [r7, #24]
 8003b7c:	e007      	b.n	8003b8e <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	781a      	ldrb	r2, [r3, #0]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2256      	movs	r2, #86	; 0x56
 8003b92:	5a9b      	ldrh	r3, [r3, r2]
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	3b01      	subs	r3, #1
 8003b98:	b299      	uxth	r1, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2256      	movs	r2, #86	; 0x56
 8003b9e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2256      	movs	r2, #86	; 0x56
 8003ba4:	5a9b      	ldrh	r3, [r3, r2]
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1cc      	bne.n	8003b46 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	9300      	str	r3, [sp, #0]
 8003bb4:	0013      	movs	r3, r2
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	2140      	movs	r1, #64	; 0x40
 8003bba:	f000 fecf 	bl	800495c <UART_WaitOnFlagUntilTimeout>
 8003bbe:	1e03      	subs	r3, r0, #0
 8003bc0:	d001      	beq.n	8003bc6 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e006      	b.n	8003bd4 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2288      	movs	r2, #136	; 0x88
 8003bca:	2120      	movs	r1, #32
 8003bcc:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	e000      	b.n	8003bd4 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8003bd2:	2302      	movs	r3, #2
  }
}
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	b008      	add	sp, #32
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bdc:	b5b0      	push	{r4, r5, r7, lr}
 8003bde:	b0aa      	sub	sp, #168	; 0xa8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	22a4      	movs	r2, #164	; 0xa4
 8003bec:	18b9      	adds	r1, r7, r2
 8003bee:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	20a0      	movs	r0, #160	; 0xa0
 8003bf8:	1839      	adds	r1, r7, r0
 8003bfa:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	249c      	movs	r4, #156	; 0x9c
 8003c04:	1939      	adds	r1, r7, r4
 8003c06:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003c08:	0011      	movs	r1, r2
 8003c0a:	18bb      	adds	r3, r7, r2
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4aa2      	ldr	r2, [pc, #648]	; (8003e98 <HAL_UART_IRQHandler+0x2bc>)
 8003c10:	4013      	ands	r3, r2
 8003c12:	2298      	movs	r2, #152	; 0x98
 8003c14:	18bd      	adds	r5, r7, r2
 8003c16:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8003c18:	18bb      	adds	r3, r7, r2
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d11a      	bne.n	8003c56 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003c20:	187b      	adds	r3, r7, r1
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2220      	movs	r2, #32
 8003c26:	4013      	ands	r3, r2
 8003c28:	d015      	beq.n	8003c56 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003c2a:	183b      	adds	r3, r7, r0
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2220      	movs	r2, #32
 8003c30:	4013      	ands	r3, r2
 8003c32:	d105      	bne.n	8003c40 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003c34:	193b      	adds	r3, r7, r4
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	2380      	movs	r3, #128	; 0x80
 8003c3a:	055b      	lsls	r3, r3, #21
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	d00a      	beq.n	8003c56 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d100      	bne.n	8003c4a <HAL_UART_IRQHandler+0x6e>
 8003c48:	e2dc      	b.n	8004204 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	0010      	movs	r0, r2
 8003c52:	4798      	blx	r3
      }
      return;
 8003c54:	e2d6      	b.n	8004204 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003c56:	2398      	movs	r3, #152	; 0x98
 8003c58:	18fb      	adds	r3, r7, r3
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d100      	bne.n	8003c62 <HAL_UART_IRQHandler+0x86>
 8003c60:	e122      	b.n	8003ea8 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003c62:	239c      	movs	r3, #156	; 0x9c
 8003c64:	18fb      	adds	r3, r7, r3
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a8c      	ldr	r2, [pc, #560]	; (8003e9c <HAL_UART_IRQHandler+0x2c0>)
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	d106      	bne.n	8003c7c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003c6e:	23a0      	movs	r3, #160	; 0xa0
 8003c70:	18fb      	adds	r3, r7, r3
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a8a      	ldr	r2, [pc, #552]	; (8003ea0 <HAL_UART_IRQHandler+0x2c4>)
 8003c76:	4013      	ands	r3, r2
 8003c78:	d100      	bne.n	8003c7c <HAL_UART_IRQHandler+0xa0>
 8003c7a:	e115      	b.n	8003ea8 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c7c:	23a4      	movs	r3, #164	; 0xa4
 8003c7e:	18fb      	adds	r3, r7, r3
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2201      	movs	r2, #1
 8003c84:	4013      	ands	r3, r2
 8003c86:	d012      	beq.n	8003cae <HAL_UART_IRQHandler+0xd2>
 8003c88:	23a0      	movs	r3, #160	; 0xa0
 8003c8a:	18fb      	adds	r3, r7, r3
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	2380      	movs	r3, #128	; 0x80
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	4013      	ands	r3, r2
 8003c94:	d00b      	beq.n	8003cae <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2290      	movs	r2, #144	; 0x90
 8003ca2:	589b      	ldr	r3, [r3, r2]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2190      	movs	r1, #144	; 0x90
 8003cac:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003cae:	23a4      	movs	r3, #164	; 0xa4
 8003cb0:	18fb      	adds	r3, r7, r3
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2202      	movs	r2, #2
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	d011      	beq.n	8003cde <HAL_UART_IRQHandler+0x102>
 8003cba:	239c      	movs	r3, #156	; 0x9c
 8003cbc:	18fb      	adds	r3, r7, r3
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	d00b      	beq.n	8003cde <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2290      	movs	r2, #144	; 0x90
 8003cd2:	589b      	ldr	r3, [r3, r2]
 8003cd4:	2204      	movs	r2, #4
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2190      	movs	r1, #144	; 0x90
 8003cdc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003cde:	23a4      	movs	r3, #164	; 0xa4
 8003ce0:	18fb      	adds	r3, r7, r3
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2204      	movs	r2, #4
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	d011      	beq.n	8003d0e <HAL_UART_IRQHandler+0x132>
 8003cea:	239c      	movs	r3, #156	; 0x9c
 8003cec:	18fb      	adds	r3, r7, r3
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	d00b      	beq.n	8003d0e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2204      	movs	r2, #4
 8003cfc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2290      	movs	r2, #144	; 0x90
 8003d02:	589b      	ldr	r3, [r3, r2]
 8003d04:	2202      	movs	r2, #2
 8003d06:	431a      	orrs	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2190      	movs	r1, #144	; 0x90
 8003d0c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003d0e:	23a4      	movs	r3, #164	; 0xa4
 8003d10:	18fb      	adds	r3, r7, r3
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2208      	movs	r2, #8
 8003d16:	4013      	ands	r3, r2
 8003d18:	d017      	beq.n	8003d4a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003d1a:	23a0      	movs	r3, #160	; 0xa0
 8003d1c:	18fb      	adds	r3, r7, r3
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2220      	movs	r2, #32
 8003d22:	4013      	ands	r3, r2
 8003d24:	d105      	bne.n	8003d32 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003d26:	239c      	movs	r3, #156	; 0x9c
 8003d28:	18fb      	adds	r3, r7, r3
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a5b      	ldr	r2, [pc, #364]	; (8003e9c <HAL_UART_IRQHandler+0x2c0>)
 8003d2e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003d30:	d00b      	beq.n	8003d4a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2208      	movs	r2, #8
 8003d38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2290      	movs	r2, #144	; 0x90
 8003d3e:	589b      	ldr	r3, [r3, r2]
 8003d40:	2208      	movs	r2, #8
 8003d42:	431a      	orrs	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2190      	movs	r1, #144	; 0x90
 8003d48:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d4a:	23a4      	movs	r3, #164	; 0xa4
 8003d4c:	18fb      	adds	r3, r7, r3
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	2380      	movs	r3, #128	; 0x80
 8003d52:	011b      	lsls	r3, r3, #4
 8003d54:	4013      	ands	r3, r2
 8003d56:	d013      	beq.n	8003d80 <HAL_UART_IRQHandler+0x1a4>
 8003d58:	23a0      	movs	r3, #160	; 0xa0
 8003d5a:	18fb      	adds	r3, r7, r3
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	2380      	movs	r3, #128	; 0x80
 8003d60:	04db      	lsls	r3, r3, #19
 8003d62:	4013      	ands	r3, r2
 8003d64:	d00c      	beq.n	8003d80 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2280      	movs	r2, #128	; 0x80
 8003d6c:	0112      	lsls	r2, r2, #4
 8003d6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2290      	movs	r2, #144	; 0x90
 8003d74:	589b      	ldr	r3, [r3, r2]
 8003d76:	2220      	movs	r2, #32
 8003d78:	431a      	orrs	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2190      	movs	r1, #144	; 0x90
 8003d7e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2290      	movs	r2, #144	; 0x90
 8003d84:	589b      	ldr	r3, [r3, r2]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d100      	bne.n	8003d8c <HAL_UART_IRQHandler+0x1b0>
 8003d8a:	e23d      	b.n	8004208 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003d8c:	23a4      	movs	r3, #164	; 0xa4
 8003d8e:	18fb      	adds	r3, r7, r3
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2220      	movs	r2, #32
 8003d94:	4013      	ands	r3, r2
 8003d96:	d015      	beq.n	8003dc4 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003d98:	23a0      	movs	r3, #160	; 0xa0
 8003d9a:	18fb      	adds	r3, r7, r3
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	4013      	ands	r3, r2
 8003da2:	d106      	bne.n	8003db2 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003da4:	239c      	movs	r3, #156	; 0x9c
 8003da6:	18fb      	adds	r3, r7, r3
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	2380      	movs	r3, #128	; 0x80
 8003dac:	055b      	lsls	r3, r3, #21
 8003dae:	4013      	ands	r3, r2
 8003db0:	d008      	beq.n	8003dc4 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d004      	beq.n	8003dc4 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	0010      	movs	r0, r2
 8003dc2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2290      	movs	r2, #144	; 0x90
 8003dc8:	589b      	ldr	r3, [r3, r2]
 8003dca:	2194      	movs	r1, #148	; 0x94
 8003dcc:	187a      	adds	r2, r7, r1
 8003dce:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	2240      	movs	r2, #64	; 0x40
 8003dd8:	4013      	ands	r3, r2
 8003dda:	2b40      	cmp	r3, #64	; 0x40
 8003ddc:	d004      	beq.n	8003de8 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003dde:	187b      	adds	r3, r7, r1
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2228      	movs	r2, #40	; 0x28
 8003de4:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003de6:	d04c      	beq.n	8003e82 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	0018      	movs	r0, r3
 8003dec:	f000 ff64 	bl	8004cb8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	2240      	movs	r2, #64	; 0x40
 8003df8:	4013      	ands	r3, r2
 8003dfa:	2b40      	cmp	r3, #64	; 0x40
 8003dfc:	d13c      	bne.n	8003e78 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dfe:	f3ef 8310 	mrs	r3, PRIMASK
 8003e02:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003e04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e06:	2090      	movs	r0, #144	; 0x90
 8003e08:	183a      	adds	r2, r7, r0
 8003e0a:	6013      	str	r3, [r2, #0]
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e12:	f383 8810 	msr	PRIMASK, r3
}
 8003e16:	46c0      	nop			; (mov r8, r8)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	689a      	ldr	r2, [r3, #8]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2140      	movs	r1, #64	; 0x40
 8003e24:	438a      	bics	r2, r1
 8003e26:	609a      	str	r2, [r3, #8]
 8003e28:	183b      	adds	r3, r7, r0
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e30:	f383 8810 	msr	PRIMASK, r3
}
 8003e34:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2280      	movs	r2, #128	; 0x80
 8003e3a:	589b      	ldr	r3, [r3, r2]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d016      	beq.n	8003e6e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2280      	movs	r2, #128	; 0x80
 8003e44:	589b      	ldr	r3, [r3, r2]
 8003e46:	4a17      	ldr	r2, [pc, #92]	; (8003ea4 <HAL_UART_IRQHandler+0x2c8>)
 8003e48:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2280      	movs	r2, #128	; 0x80
 8003e4e:	589b      	ldr	r3, [r3, r2]
 8003e50:	0018      	movs	r0, r3
 8003e52:	f7fd fdc5 	bl	80019e0 <HAL_DMA_Abort_IT>
 8003e56:	1e03      	subs	r3, r0, #0
 8003e58:	d01c      	beq.n	8003e94 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2280      	movs	r2, #128	; 0x80
 8003e5e:	589b      	ldr	r3, [r3, r2]
 8003e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	2180      	movs	r1, #128	; 0x80
 8003e66:	5852      	ldr	r2, [r2, r1]
 8003e68:	0010      	movs	r0, r2
 8003e6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e6c:	e012      	b.n	8003e94 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	0018      	movs	r0, r3
 8003e72:	f000 f9f1 	bl	8004258 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e76:	e00d      	b.n	8003e94 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	0018      	movs	r0, r3
 8003e7c:	f000 f9ec 	bl	8004258 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e80:	e008      	b.n	8003e94 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	0018      	movs	r0, r3
 8003e86:	f000 f9e7 	bl	8004258 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2290      	movs	r2, #144	; 0x90
 8003e8e:	2100      	movs	r1, #0
 8003e90:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003e92:	e1b9      	b.n	8004208 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e94:	46c0      	nop			; (mov r8, r8)
    return;
 8003e96:	e1b7      	b.n	8004208 <HAL_UART_IRQHandler+0x62c>
 8003e98:	0000080f 	.word	0x0000080f
 8003e9c:	10000001 	.word	0x10000001
 8003ea0:	04000120 	.word	0x04000120
 8003ea4:	08004f7d 	.word	0x08004f7d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d000      	beq.n	8003eb2 <HAL_UART_IRQHandler+0x2d6>
 8003eb0:	e13e      	b.n	8004130 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003eb2:	23a4      	movs	r3, #164	; 0xa4
 8003eb4:	18fb      	adds	r3, r7, r3
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2210      	movs	r2, #16
 8003eba:	4013      	ands	r3, r2
 8003ebc:	d100      	bne.n	8003ec0 <HAL_UART_IRQHandler+0x2e4>
 8003ebe:	e137      	b.n	8004130 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003ec0:	23a0      	movs	r3, #160	; 0xa0
 8003ec2:	18fb      	adds	r3, r7, r3
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2210      	movs	r2, #16
 8003ec8:	4013      	ands	r3, r2
 8003eca:	d100      	bne.n	8003ece <HAL_UART_IRQHandler+0x2f2>
 8003ecc:	e130      	b.n	8004130 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2210      	movs	r2, #16
 8003ed4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	2240      	movs	r2, #64	; 0x40
 8003ede:	4013      	ands	r3, r2
 8003ee0:	2b40      	cmp	r3, #64	; 0x40
 8003ee2:	d000      	beq.n	8003ee6 <HAL_UART_IRQHandler+0x30a>
 8003ee4:	e0a4      	b.n	8004030 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2280      	movs	r2, #128	; 0x80
 8003eea:	589b      	ldr	r3, [r3, r2]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	217e      	movs	r1, #126	; 0x7e
 8003ef2:	187b      	adds	r3, r7, r1
 8003ef4:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003ef6:	187b      	adds	r3, r7, r1
 8003ef8:	881b      	ldrh	r3, [r3, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d100      	bne.n	8003f00 <HAL_UART_IRQHandler+0x324>
 8003efe:	e185      	b.n	800420c <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	225c      	movs	r2, #92	; 0x5c
 8003f04:	5a9b      	ldrh	r3, [r3, r2]
 8003f06:	187a      	adds	r2, r7, r1
 8003f08:	8812      	ldrh	r2, [r2, #0]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d300      	bcc.n	8003f10 <HAL_UART_IRQHandler+0x334>
 8003f0e:	e17d      	b.n	800420c <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	187a      	adds	r2, r7, r1
 8003f14:	215e      	movs	r1, #94	; 0x5e
 8003f16:	8812      	ldrh	r2, [r2, #0]
 8003f18:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2280      	movs	r2, #128	; 0x80
 8003f1e:	589b      	ldr	r3, [r3, r2]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2220      	movs	r2, #32
 8003f26:	4013      	ands	r3, r2
 8003f28:	d170      	bne.n	800400c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f2a:	f3ef 8310 	mrs	r3, PRIMASK
 8003f2e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f32:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f34:	2301      	movs	r3, #1
 8003f36:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f3a:	f383 8810 	msr	PRIMASK, r3
}
 8003f3e:	46c0      	nop			; (mov r8, r8)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	49b4      	ldr	r1, [pc, #720]	; (800421c <HAL_UART_IRQHandler+0x640>)
 8003f4c:	400a      	ands	r2, r1
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f52:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f56:	f383 8810 	msr	PRIMASK, r3
}
 8003f5a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f5c:	f3ef 8310 	mrs	r3, PRIMASK
 8003f60:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f64:	677b      	str	r3, [r7, #116]	; 0x74
 8003f66:	2301      	movs	r3, #1
 8003f68:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f6c:	f383 8810 	msr	PRIMASK, r3
}
 8003f70:	46c0      	nop			; (mov r8, r8)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2101      	movs	r1, #1
 8003f7e:	438a      	bics	r2, r1
 8003f80:	609a      	str	r2, [r3, #8]
 8003f82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f84:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f88:	f383 8810 	msr	PRIMASK, r3
}
 8003f8c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f8e:	f3ef 8310 	mrs	r3, PRIMASK
 8003f92:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003f94:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f96:	673b      	str	r3, [r7, #112]	; 0x70
 8003f98:	2301      	movs	r3, #1
 8003f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f9e:	f383 8810 	msr	PRIMASK, r3
}
 8003fa2:	46c0      	nop			; (mov r8, r8)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689a      	ldr	r2, [r3, #8]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2140      	movs	r1, #64	; 0x40
 8003fb0:	438a      	bics	r2, r1
 8003fb2:	609a      	str	r2, [r3, #8]
 8003fb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fb6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fba:	f383 8810 	msr	PRIMASK, r3
}
 8003fbe:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	228c      	movs	r2, #140	; 0x8c
 8003fc4:	2120      	movs	r1, #32
 8003fc6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fce:	f3ef 8310 	mrs	r3, PRIMASK
 8003fd2:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003fd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fd6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fd8:	2301      	movs	r3, #1
 8003fda:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fde:	f383 8810 	msr	PRIMASK, r3
}
 8003fe2:	46c0      	nop			; (mov r8, r8)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2110      	movs	r1, #16
 8003ff0:	438a      	bics	r2, r1
 8003ff2:	601a      	str	r2, [r3, #0]
 8003ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ff6:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ff8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ffa:	f383 8810 	msr	PRIMASK, r3
}
 8003ffe:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2280      	movs	r2, #128	; 0x80
 8004004:	589b      	ldr	r3, [r3, r2]
 8004006:	0018      	movs	r0, r3
 8004008:	f7fd fc88 	bl	800191c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2202      	movs	r2, #2
 8004010:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	225c      	movs	r2, #92	; 0x5c
 8004016:	5a9a      	ldrh	r2, [r3, r2]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	215e      	movs	r1, #94	; 0x5e
 800401c:	5a5b      	ldrh	r3, [r3, r1]
 800401e:	b29b      	uxth	r3, r3
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	b29a      	uxth	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	0011      	movs	r1, r2
 8004028:	0018      	movs	r0, r3
 800402a:	f7fc fe21 	bl	8000c70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800402e:	e0ed      	b.n	800420c <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	225c      	movs	r2, #92	; 0x5c
 8004034:	5a99      	ldrh	r1, [r3, r2]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	225e      	movs	r2, #94	; 0x5e
 800403a:	5a9b      	ldrh	r3, [r3, r2]
 800403c:	b29a      	uxth	r2, r3
 800403e:	208e      	movs	r0, #142	; 0x8e
 8004040:	183b      	adds	r3, r7, r0
 8004042:	1a8a      	subs	r2, r1, r2
 8004044:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	225e      	movs	r2, #94	; 0x5e
 800404a:	5a9b      	ldrh	r3, [r3, r2]
 800404c:	b29b      	uxth	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d100      	bne.n	8004054 <HAL_UART_IRQHandler+0x478>
 8004052:	e0dd      	b.n	8004210 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8004054:	183b      	adds	r3, r7, r0
 8004056:	881b      	ldrh	r3, [r3, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d100      	bne.n	800405e <HAL_UART_IRQHandler+0x482>
 800405c:	e0d8      	b.n	8004210 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800405e:	f3ef 8310 	mrs	r3, PRIMASK
 8004062:	60fb      	str	r3, [r7, #12]
  return(result);
 8004064:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004066:	2488      	movs	r4, #136	; 0x88
 8004068:	193a      	adds	r2, r7, r4
 800406a:	6013      	str	r3, [r2, #0]
 800406c:	2301      	movs	r3, #1
 800406e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	f383 8810 	msr	PRIMASK, r3
}
 8004076:	46c0      	nop			; (mov r8, r8)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4967      	ldr	r1, [pc, #412]	; (8004220 <HAL_UART_IRQHandler+0x644>)
 8004084:	400a      	ands	r2, r1
 8004086:	601a      	str	r2, [r3, #0]
 8004088:	193b      	adds	r3, r7, r4
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	f383 8810 	msr	PRIMASK, r3
}
 8004094:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004096:	f3ef 8310 	mrs	r3, PRIMASK
 800409a:	61bb      	str	r3, [r7, #24]
  return(result);
 800409c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800409e:	2484      	movs	r4, #132	; 0x84
 80040a0:	193a      	adds	r2, r7, r4
 80040a2:	6013      	str	r3, [r2, #0]
 80040a4:	2301      	movs	r3, #1
 80040a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	f383 8810 	msr	PRIMASK, r3
}
 80040ae:	46c0      	nop			; (mov r8, r8)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689a      	ldr	r2, [r3, #8]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	495a      	ldr	r1, [pc, #360]	; (8004224 <HAL_UART_IRQHandler+0x648>)
 80040bc:	400a      	ands	r2, r1
 80040be:	609a      	str	r2, [r3, #8]
 80040c0:	193b      	adds	r3, r7, r4
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040c6:	6a3b      	ldr	r3, [r7, #32]
 80040c8:	f383 8810 	msr	PRIMASK, r3
}
 80040cc:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	228c      	movs	r2, #140	; 0x8c
 80040d2:	2120      	movs	r1, #32
 80040d4:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040e2:	f3ef 8310 	mrs	r3, PRIMASK
 80040e6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80040e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040ea:	2480      	movs	r4, #128	; 0x80
 80040ec:	193a      	adds	r2, r7, r4
 80040ee:	6013      	str	r3, [r2, #0]
 80040f0:	2301      	movs	r3, #1
 80040f2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f6:	f383 8810 	msr	PRIMASK, r3
}
 80040fa:	46c0      	nop			; (mov r8, r8)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2110      	movs	r1, #16
 8004108:	438a      	bics	r2, r1
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	193b      	adds	r3, r7, r4
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004114:	f383 8810 	msr	PRIMASK, r3
}
 8004118:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2202      	movs	r2, #2
 800411e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004120:	183b      	adds	r3, r7, r0
 8004122:	881a      	ldrh	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	0011      	movs	r1, r2
 8004128:	0018      	movs	r0, r3
 800412a:	f7fc fda1 	bl	8000c70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800412e:	e06f      	b.n	8004210 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004130:	23a4      	movs	r3, #164	; 0xa4
 8004132:	18fb      	adds	r3, r7, r3
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	2380      	movs	r3, #128	; 0x80
 8004138:	035b      	lsls	r3, r3, #13
 800413a:	4013      	ands	r3, r2
 800413c:	d010      	beq.n	8004160 <HAL_UART_IRQHandler+0x584>
 800413e:	239c      	movs	r3, #156	; 0x9c
 8004140:	18fb      	adds	r3, r7, r3
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	2380      	movs	r3, #128	; 0x80
 8004146:	03db      	lsls	r3, r3, #15
 8004148:	4013      	ands	r3, r2
 800414a:	d009      	beq.n	8004160 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2280      	movs	r2, #128	; 0x80
 8004152:	0352      	lsls	r2, r2, #13
 8004154:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	0018      	movs	r0, r3
 800415a:	f000 ff52 	bl	8005002 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800415e:	e05a      	b.n	8004216 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004160:	23a4      	movs	r3, #164	; 0xa4
 8004162:	18fb      	adds	r3, r7, r3
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2280      	movs	r2, #128	; 0x80
 8004168:	4013      	ands	r3, r2
 800416a:	d016      	beq.n	800419a <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800416c:	23a0      	movs	r3, #160	; 0xa0
 800416e:	18fb      	adds	r3, r7, r3
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2280      	movs	r2, #128	; 0x80
 8004174:	4013      	ands	r3, r2
 8004176:	d106      	bne.n	8004186 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004178:	239c      	movs	r3, #156	; 0x9c
 800417a:	18fb      	adds	r3, r7, r3
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	2380      	movs	r3, #128	; 0x80
 8004180:	041b      	lsls	r3, r3, #16
 8004182:	4013      	ands	r3, r2
 8004184:	d009      	beq.n	800419a <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800418a:	2b00      	cmp	r3, #0
 800418c:	d042      	beq.n	8004214 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	0010      	movs	r0, r2
 8004196:	4798      	blx	r3
    }
    return;
 8004198:	e03c      	b.n	8004214 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800419a:	23a4      	movs	r3, #164	; 0xa4
 800419c:	18fb      	adds	r3, r7, r3
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2240      	movs	r2, #64	; 0x40
 80041a2:	4013      	ands	r3, r2
 80041a4:	d00a      	beq.n	80041bc <HAL_UART_IRQHandler+0x5e0>
 80041a6:	23a0      	movs	r3, #160	; 0xa0
 80041a8:	18fb      	adds	r3, r7, r3
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2240      	movs	r2, #64	; 0x40
 80041ae:	4013      	ands	r3, r2
 80041b0:	d004      	beq.n	80041bc <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	0018      	movs	r0, r3
 80041b6:	f000 fef8 	bl	8004faa <UART_EndTransmit_IT>
    return;
 80041ba:	e02c      	b.n	8004216 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80041bc:	23a4      	movs	r3, #164	; 0xa4
 80041be:	18fb      	adds	r3, r7, r3
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	2380      	movs	r3, #128	; 0x80
 80041c4:	041b      	lsls	r3, r3, #16
 80041c6:	4013      	ands	r3, r2
 80041c8:	d00b      	beq.n	80041e2 <HAL_UART_IRQHandler+0x606>
 80041ca:	23a0      	movs	r3, #160	; 0xa0
 80041cc:	18fb      	adds	r3, r7, r3
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	2380      	movs	r3, #128	; 0x80
 80041d2:	05db      	lsls	r3, r3, #23
 80041d4:	4013      	ands	r3, r2
 80041d6:	d004      	beq.n	80041e2 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	0018      	movs	r0, r3
 80041dc:	f000 ff21 	bl	8005022 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80041e0:	e019      	b.n	8004216 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80041e2:	23a4      	movs	r3, #164	; 0xa4
 80041e4:	18fb      	adds	r3, r7, r3
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	2380      	movs	r3, #128	; 0x80
 80041ea:	045b      	lsls	r3, r3, #17
 80041ec:	4013      	ands	r3, r2
 80041ee:	d012      	beq.n	8004216 <HAL_UART_IRQHandler+0x63a>
 80041f0:	23a0      	movs	r3, #160	; 0xa0
 80041f2:	18fb      	adds	r3, r7, r3
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	da0d      	bge.n	8004216 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	0018      	movs	r0, r3
 80041fe:	f000 ff08 	bl	8005012 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004202:	e008      	b.n	8004216 <HAL_UART_IRQHandler+0x63a>
      return;
 8004204:	46c0      	nop			; (mov r8, r8)
 8004206:	e006      	b.n	8004216 <HAL_UART_IRQHandler+0x63a>
    return;
 8004208:	46c0      	nop			; (mov r8, r8)
 800420a:	e004      	b.n	8004216 <HAL_UART_IRQHandler+0x63a>
      return;
 800420c:	46c0      	nop			; (mov r8, r8)
 800420e:	e002      	b.n	8004216 <HAL_UART_IRQHandler+0x63a>
      return;
 8004210:	46c0      	nop			; (mov r8, r8)
 8004212:	e000      	b.n	8004216 <HAL_UART_IRQHandler+0x63a>
    return;
 8004214:	46c0      	nop			; (mov r8, r8)
  }
}
 8004216:	46bd      	mov	sp, r7
 8004218:	b02a      	add	sp, #168	; 0xa8
 800421a:	bdb0      	pop	{r4, r5, r7, pc}
 800421c:	fffffeff 	.word	0xfffffeff
 8004220:	fffffedf 	.word	0xfffffedf
 8004224:	effffffe 	.word	0xeffffffe

08004228 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004230:	46c0      	nop			; (mov r8, r8)
 8004232:	46bd      	mov	sp, r7
 8004234:	b002      	add	sp, #8
 8004236:	bd80      	pop	{r7, pc}

08004238 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004240:	46c0      	nop			; (mov r8, r8)
 8004242:	46bd      	mov	sp, r7
 8004244:	b002      	add	sp, #8
 8004246:	bd80      	pop	{r7, pc}

08004248 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004250:	46c0      	nop			; (mov r8, r8)
 8004252:	46bd      	mov	sp, r7
 8004254:	b002      	add	sp, #8
 8004256:	bd80      	pop	{r7, pc}

08004258 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004260:	46c0      	nop			; (mov r8, r8)
 8004262:	46bd      	mov	sp, r7
 8004264:	b002      	add	sp, #8
 8004266:	bd80      	pop	{r7, pc}

08004268 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004268:	b5b0      	push	{r4, r5, r7, lr}
 800426a:	b090      	sub	sp, #64	; 0x40
 800426c:	af00      	add	r7, sp, #0
 800426e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004270:	231a      	movs	r3, #26
 8004272:	2220      	movs	r2, #32
 8004274:	189b      	adds	r3, r3, r2
 8004276:	19db      	adds	r3, r3, r7
 8004278:	2200      	movs	r2, #0
 800427a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800427c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	431a      	orrs	r2, r3
 8004286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	431a      	orrs	r2, r3
 800428c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428e:	69db      	ldr	r3, [r3, #28]
 8004290:	4313      	orrs	r3, r2
 8004292:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4ac4      	ldr	r2, [pc, #784]	; (80045ac <UART_SetConfig+0x344>)
 800429c:	4013      	ands	r3, r2
 800429e:	0019      	movs	r1, r3
 80042a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042a6:	430b      	orrs	r3, r1
 80042a8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	4abf      	ldr	r2, [pc, #764]	; (80045b0 <UART_SetConfig+0x348>)
 80042b2:	4013      	ands	r3, r2
 80042b4:	0018      	movs	r0, r3
 80042b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b8:	68d9      	ldr	r1, [r3, #12]
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	0003      	movs	r3, r0
 80042c0:	430b      	orrs	r3, r1
 80042c2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4ab9      	ldr	r2, [pc, #740]	; (80045b4 <UART_SetConfig+0x34c>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d004      	beq.n	80042de <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80042da:	4313      	orrs	r3, r2
 80042dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	4ab4      	ldr	r2, [pc, #720]	; (80045b8 <UART_SetConfig+0x350>)
 80042e6:	4013      	ands	r3, r2
 80042e8:	0019      	movs	r1, r3
 80042ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042f0:	430b      	orrs	r3, r1
 80042f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80042f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fa:	220f      	movs	r2, #15
 80042fc:	4393      	bics	r3, r2
 80042fe:	0018      	movs	r0, r3
 8004300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004302:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	0003      	movs	r3, r0
 800430a:	430b      	orrs	r3, r1
 800430c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4aaa      	ldr	r2, [pc, #680]	; (80045bc <UART_SetConfig+0x354>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d131      	bne.n	800437c <UART_SetConfig+0x114>
 8004318:	4ba9      	ldr	r3, [pc, #676]	; (80045c0 <UART_SetConfig+0x358>)
 800431a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431c:	2203      	movs	r2, #3
 800431e:	4013      	ands	r3, r2
 8004320:	2b03      	cmp	r3, #3
 8004322:	d01d      	beq.n	8004360 <UART_SetConfig+0xf8>
 8004324:	d823      	bhi.n	800436e <UART_SetConfig+0x106>
 8004326:	2b02      	cmp	r3, #2
 8004328:	d00c      	beq.n	8004344 <UART_SetConfig+0xdc>
 800432a:	d820      	bhi.n	800436e <UART_SetConfig+0x106>
 800432c:	2b00      	cmp	r3, #0
 800432e:	d002      	beq.n	8004336 <UART_SetConfig+0xce>
 8004330:	2b01      	cmp	r3, #1
 8004332:	d00e      	beq.n	8004352 <UART_SetConfig+0xea>
 8004334:	e01b      	b.n	800436e <UART_SetConfig+0x106>
 8004336:	231b      	movs	r3, #27
 8004338:	2220      	movs	r2, #32
 800433a:	189b      	adds	r3, r3, r2
 800433c:	19db      	adds	r3, r3, r7
 800433e:	2200      	movs	r2, #0
 8004340:	701a      	strb	r2, [r3, #0]
 8004342:	e071      	b.n	8004428 <UART_SetConfig+0x1c0>
 8004344:	231b      	movs	r3, #27
 8004346:	2220      	movs	r2, #32
 8004348:	189b      	adds	r3, r3, r2
 800434a:	19db      	adds	r3, r3, r7
 800434c:	2202      	movs	r2, #2
 800434e:	701a      	strb	r2, [r3, #0]
 8004350:	e06a      	b.n	8004428 <UART_SetConfig+0x1c0>
 8004352:	231b      	movs	r3, #27
 8004354:	2220      	movs	r2, #32
 8004356:	189b      	adds	r3, r3, r2
 8004358:	19db      	adds	r3, r3, r7
 800435a:	2204      	movs	r2, #4
 800435c:	701a      	strb	r2, [r3, #0]
 800435e:	e063      	b.n	8004428 <UART_SetConfig+0x1c0>
 8004360:	231b      	movs	r3, #27
 8004362:	2220      	movs	r2, #32
 8004364:	189b      	adds	r3, r3, r2
 8004366:	19db      	adds	r3, r3, r7
 8004368:	2208      	movs	r2, #8
 800436a:	701a      	strb	r2, [r3, #0]
 800436c:	e05c      	b.n	8004428 <UART_SetConfig+0x1c0>
 800436e:	231b      	movs	r3, #27
 8004370:	2220      	movs	r2, #32
 8004372:	189b      	adds	r3, r3, r2
 8004374:	19db      	adds	r3, r3, r7
 8004376:	2210      	movs	r2, #16
 8004378:	701a      	strb	r2, [r3, #0]
 800437a:	e055      	b.n	8004428 <UART_SetConfig+0x1c0>
 800437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a90      	ldr	r2, [pc, #576]	; (80045c4 <UART_SetConfig+0x35c>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d106      	bne.n	8004394 <UART_SetConfig+0x12c>
 8004386:	231b      	movs	r3, #27
 8004388:	2220      	movs	r2, #32
 800438a:	189b      	adds	r3, r3, r2
 800438c:	19db      	adds	r3, r3, r7
 800438e:	2200      	movs	r2, #0
 8004390:	701a      	strb	r2, [r3, #0]
 8004392:	e049      	b.n	8004428 <UART_SetConfig+0x1c0>
 8004394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a86      	ldr	r2, [pc, #536]	; (80045b4 <UART_SetConfig+0x34c>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d13e      	bne.n	800441c <UART_SetConfig+0x1b4>
 800439e:	4b88      	ldr	r3, [pc, #544]	; (80045c0 <UART_SetConfig+0x358>)
 80043a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043a2:	23c0      	movs	r3, #192	; 0xc0
 80043a4:	011b      	lsls	r3, r3, #4
 80043a6:	4013      	ands	r3, r2
 80043a8:	22c0      	movs	r2, #192	; 0xc0
 80043aa:	0112      	lsls	r2, r2, #4
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d027      	beq.n	8004400 <UART_SetConfig+0x198>
 80043b0:	22c0      	movs	r2, #192	; 0xc0
 80043b2:	0112      	lsls	r2, r2, #4
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d82a      	bhi.n	800440e <UART_SetConfig+0x1a6>
 80043b8:	2280      	movs	r2, #128	; 0x80
 80043ba:	0112      	lsls	r2, r2, #4
 80043bc:	4293      	cmp	r3, r2
 80043be:	d011      	beq.n	80043e4 <UART_SetConfig+0x17c>
 80043c0:	2280      	movs	r2, #128	; 0x80
 80043c2:	0112      	lsls	r2, r2, #4
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d822      	bhi.n	800440e <UART_SetConfig+0x1a6>
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d004      	beq.n	80043d6 <UART_SetConfig+0x16e>
 80043cc:	2280      	movs	r2, #128	; 0x80
 80043ce:	00d2      	lsls	r2, r2, #3
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d00e      	beq.n	80043f2 <UART_SetConfig+0x18a>
 80043d4:	e01b      	b.n	800440e <UART_SetConfig+0x1a6>
 80043d6:	231b      	movs	r3, #27
 80043d8:	2220      	movs	r2, #32
 80043da:	189b      	adds	r3, r3, r2
 80043dc:	19db      	adds	r3, r3, r7
 80043de:	2200      	movs	r2, #0
 80043e0:	701a      	strb	r2, [r3, #0]
 80043e2:	e021      	b.n	8004428 <UART_SetConfig+0x1c0>
 80043e4:	231b      	movs	r3, #27
 80043e6:	2220      	movs	r2, #32
 80043e8:	189b      	adds	r3, r3, r2
 80043ea:	19db      	adds	r3, r3, r7
 80043ec:	2202      	movs	r2, #2
 80043ee:	701a      	strb	r2, [r3, #0]
 80043f0:	e01a      	b.n	8004428 <UART_SetConfig+0x1c0>
 80043f2:	231b      	movs	r3, #27
 80043f4:	2220      	movs	r2, #32
 80043f6:	189b      	adds	r3, r3, r2
 80043f8:	19db      	adds	r3, r3, r7
 80043fa:	2204      	movs	r2, #4
 80043fc:	701a      	strb	r2, [r3, #0]
 80043fe:	e013      	b.n	8004428 <UART_SetConfig+0x1c0>
 8004400:	231b      	movs	r3, #27
 8004402:	2220      	movs	r2, #32
 8004404:	189b      	adds	r3, r3, r2
 8004406:	19db      	adds	r3, r3, r7
 8004408:	2208      	movs	r2, #8
 800440a:	701a      	strb	r2, [r3, #0]
 800440c:	e00c      	b.n	8004428 <UART_SetConfig+0x1c0>
 800440e:	231b      	movs	r3, #27
 8004410:	2220      	movs	r2, #32
 8004412:	189b      	adds	r3, r3, r2
 8004414:	19db      	adds	r3, r3, r7
 8004416:	2210      	movs	r2, #16
 8004418:	701a      	strb	r2, [r3, #0]
 800441a:	e005      	b.n	8004428 <UART_SetConfig+0x1c0>
 800441c:	231b      	movs	r3, #27
 800441e:	2220      	movs	r2, #32
 8004420:	189b      	adds	r3, r3, r2
 8004422:	19db      	adds	r3, r3, r7
 8004424:	2210      	movs	r2, #16
 8004426:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a61      	ldr	r2, [pc, #388]	; (80045b4 <UART_SetConfig+0x34c>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d000      	beq.n	8004434 <UART_SetConfig+0x1cc>
 8004432:	e092      	b.n	800455a <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004434:	231b      	movs	r3, #27
 8004436:	2220      	movs	r2, #32
 8004438:	189b      	adds	r3, r3, r2
 800443a:	19db      	adds	r3, r3, r7
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	2b08      	cmp	r3, #8
 8004440:	d015      	beq.n	800446e <UART_SetConfig+0x206>
 8004442:	dc18      	bgt.n	8004476 <UART_SetConfig+0x20e>
 8004444:	2b04      	cmp	r3, #4
 8004446:	d00d      	beq.n	8004464 <UART_SetConfig+0x1fc>
 8004448:	dc15      	bgt.n	8004476 <UART_SetConfig+0x20e>
 800444a:	2b00      	cmp	r3, #0
 800444c:	d002      	beq.n	8004454 <UART_SetConfig+0x1ec>
 800444e:	2b02      	cmp	r3, #2
 8004450:	d005      	beq.n	800445e <UART_SetConfig+0x1f6>
 8004452:	e010      	b.n	8004476 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004454:	f7fe fb14 	bl	8002a80 <HAL_RCC_GetPCLK1Freq>
 8004458:	0003      	movs	r3, r0
 800445a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800445c:	e014      	b.n	8004488 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800445e:	4b5a      	ldr	r3, [pc, #360]	; (80045c8 <UART_SetConfig+0x360>)
 8004460:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004462:	e011      	b.n	8004488 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004464:	f7fe fa80 	bl	8002968 <HAL_RCC_GetSysClockFreq>
 8004468:	0003      	movs	r3, r0
 800446a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800446c:	e00c      	b.n	8004488 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800446e:	2380      	movs	r3, #128	; 0x80
 8004470:	021b      	lsls	r3, r3, #8
 8004472:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004474:	e008      	b.n	8004488 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8004476:	2300      	movs	r3, #0
 8004478:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800447a:	231a      	movs	r3, #26
 800447c:	2220      	movs	r2, #32
 800447e:	189b      	adds	r3, r3, r2
 8004480:	19db      	adds	r3, r3, r7
 8004482:	2201      	movs	r2, #1
 8004484:	701a      	strb	r2, [r3, #0]
        break;
 8004486:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800448a:	2b00      	cmp	r3, #0
 800448c:	d100      	bne.n	8004490 <UART_SetConfig+0x228>
 800448e:	e147      	b.n	8004720 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004492:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004494:	4b4d      	ldr	r3, [pc, #308]	; (80045cc <UART_SetConfig+0x364>)
 8004496:	0052      	lsls	r2, r2, #1
 8004498:	5ad3      	ldrh	r3, [r2, r3]
 800449a:	0019      	movs	r1, r3
 800449c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800449e:	f7fb fe43 	bl	8000128 <__udivsi3>
 80044a2:	0003      	movs	r3, r0
 80044a4:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80044a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a8:	685a      	ldr	r2, [r3, #4]
 80044aa:	0013      	movs	r3, r2
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	189b      	adds	r3, r3, r2
 80044b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d305      	bcc.n	80044c2 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80044b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80044bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044be:	429a      	cmp	r2, r3
 80044c0:	d906      	bls.n	80044d0 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 80044c2:	231a      	movs	r3, #26
 80044c4:	2220      	movs	r2, #32
 80044c6:	189b      	adds	r3, r3, r2
 80044c8:	19db      	adds	r3, r3, r7
 80044ca:	2201      	movs	r2, #1
 80044cc:	701a      	strb	r2, [r3, #0]
 80044ce:	e127      	b.n	8004720 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044d2:	61bb      	str	r3, [r7, #24]
 80044d4:	2300      	movs	r3, #0
 80044d6:	61fb      	str	r3, [r7, #28]
 80044d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044dc:	4b3b      	ldr	r3, [pc, #236]	; (80045cc <UART_SetConfig+0x364>)
 80044de:	0052      	lsls	r2, r2, #1
 80044e0:	5ad3      	ldrh	r3, [r2, r3]
 80044e2:	613b      	str	r3, [r7, #16]
 80044e4:	2300      	movs	r3, #0
 80044e6:	617b      	str	r3, [r7, #20]
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	69b8      	ldr	r0, [r7, #24]
 80044ee:	69f9      	ldr	r1, [r7, #28]
 80044f0:	f7fb ff90 	bl	8000414 <__aeabi_uldivmod>
 80044f4:	0002      	movs	r2, r0
 80044f6:	000b      	movs	r3, r1
 80044f8:	0e11      	lsrs	r1, r2, #24
 80044fa:	021d      	lsls	r5, r3, #8
 80044fc:	430d      	orrs	r5, r1
 80044fe:	0214      	lsls	r4, r2, #8
 8004500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	085b      	lsrs	r3, r3, #1
 8004506:	60bb      	str	r3, [r7, #8]
 8004508:	2300      	movs	r3, #0
 800450a:	60fb      	str	r3, [r7, #12]
 800450c:	68b8      	ldr	r0, [r7, #8]
 800450e:	68f9      	ldr	r1, [r7, #12]
 8004510:	1900      	adds	r0, r0, r4
 8004512:	4169      	adcs	r1, r5
 8004514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	603b      	str	r3, [r7, #0]
 800451a:	2300      	movs	r3, #0
 800451c:	607b      	str	r3, [r7, #4]
 800451e:	683a      	ldr	r2, [r7, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f7fb ff77 	bl	8000414 <__aeabi_uldivmod>
 8004526:	0002      	movs	r2, r0
 8004528:	000b      	movs	r3, r1
 800452a:	0013      	movs	r3, r2
 800452c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800452e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004530:	23c0      	movs	r3, #192	; 0xc0
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	429a      	cmp	r2, r3
 8004536:	d309      	bcc.n	800454c <UART_SetConfig+0x2e4>
 8004538:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800453a:	2380      	movs	r3, #128	; 0x80
 800453c:	035b      	lsls	r3, r3, #13
 800453e:	429a      	cmp	r2, r3
 8004540:	d204      	bcs.n	800454c <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8004542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004548:	60da      	str	r2, [r3, #12]
 800454a:	e0e9      	b.n	8004720 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 800454c:	231a      	movs	r3, #26
 800454e:	2220      	movs	r2, #32
 8004550:	189b      	adds	r3, r3, r2
 8004552:	19db      	adds	r3, r3, r7
 8004554:	2201      	movs	r2, #1
 8004556:	701a      	strb	r2, [r3, #0]
 8004558:	e0e2      	b.n	8004720 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800455a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455c:	69da      	ldr	r2, [r3, #28]
 800455e:	2380      	movs	r3, #128	; 0x80
 8004560:	021b      	lsls	r3, r3, #8
 8004562:	429a      	cmp	r2, r3
 8004564:	d000      	beq.n	8004568 <UART_SetConfig+0x300>
 8004566:	e083      	b.n	8004670 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004568:	231b      	movs	r3, #27
 800456a:	2220      	movs	r2, #32
 800456c:	189b      	adds	r3, r3, r2
 800456e:	19db      	adds	r3, r3, r7
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	2b08      	cmp	r3, #8
 8004574:	d015      	beq.n	80045a2 <UART_SetConfig+0x33a>
 8004576:	dc2b      	bgt.n	80045d0 <UART_SetConfig+0x368>
 8004578:	2b04      	cmp	r3, #4
 800457a:	d00d      	beq.n	8004598 <UART_SetConfig+0x330>
 800457c:	dc28      	bgt.n	80045d0 <UART_SetConfig+0x368>
 800457e:	2b00      	cmp	r3, #0
 8004580:	d002      	beq.n	8004588 <UART_SetConfig+0x320>
 8004582:	2b02      	cmp	r3, #2
 8004584:	d005      	beq.n	8004592 <UART_SetConfig+0x32a>
 8004586:	e023      	b.n	80045d0 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004588:	f7fe fa7a 	bl	8002a80 <HAL_RCC_GetPCLK1Freq>
 800458c:	0003      	movs	r3, r0
 800458e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004590:	e027      	b.n	80045e2 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004592:	4b0d      	ldr	r3, [pc, #52]	; (80045c8 <UART_SetConfig+0x360>)
 8004594:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004596:	e024      	b.n	80045e2 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004598:	f7fe f9e6 	bl	8002968 <HAL_RCC_GetSysClockFreq>
 800459c:	0003      	movs	r3, r0
 800459e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80045a0:	e01f      	b.n	80045e2 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045a2:	2380      	movs	r3, #128	; 0x80
 80045a4:	021b      	lsls	r3, r3, #8
 80045a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80045a8:	e01b      	b.n	80045e2 <UART_SetConfig+0x37a>
 80045aa:	46c0      	nop			; (mov r8, r8)
 80045ac:	cfff69f3 	.word	0xcfff69f3
 80045b0:	ffffcfff 	.word	0xffffcfff
 80045b4:	40008000 	.word	0x40008000
 80045b8:	11fff4ff 	.word	0x11fff4ff
 80045bc:	40013800 	.word	0x40013800
 80045c0:	40021000 	.word	0x40021000
 80045c4:	40004400 	.word	0x40004400
 80045c8:	00f42400 	.word	0x00f42400
 80045cc:	08007560 	.word	0x08007560
      default:
        pclk = 0U;
 80045d0:	2300      	movs	r3, #0
 80045d2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80045d4:	231a      	movs	r3, #26
 80045d6:	2220      	movs	r2, #32
 80045d8:	189b      	adds	r3, r3, r2
 80045da:	19db      	adds	r3, r3, r7
 80045dc:	2201      	movs	r2, #1
 80045de:	701a      	strb	r2, [r3, #0]
        break;
 80045e0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d100      	bne.n	80045ea <UART_SetConfig+0x382>
 80045e8:	e09a      	b.n	8004720 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045ee:	4b58      	ldr	r3, [pc, #352]	; (8004750 <UART_SetConfig+0x4e8>)
 80045f0:	0052      	lsls	r2, r2, #1
 80045f2:	5ad3      	ldrh	r3, [r2, r3]
 80045f4:	0019      	movs	r1, r3
 80045f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80045f8:	f7fb fd96 	bl	8000128 <__udivsi3>
 80045fc:	0003      	movs	r3, r0
 80045fe:	005a      	lsls	r2, r3, #1
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	085b      	lsrs	r3, r3, #1
 8004606:	18d2      	adds	r2, r2, r3
 8004608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	0019      	movs	r1, r3
 800460e:	0010      	movs	r0, r2
 8004610:	f7fb fd8a 	bl	8000128 <__udivsi3>
 8004614:	0003      	movs	r3, r0
 8004616:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461a:	2b0f      	cmp	r3, #15
 800461c:	d921      	bls.n	8004662 <UART_SetConfig+0x3fa>
 800461e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004620:	2380      	movs	r3, #128	; 0x80
 8004622:	025b      	lsls	r3, r3, #9
 8004624:	429a      	cmp	r2, r3
 8004626:	d21c      	bcs.n	8004662 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462a:	b29a      	uxth	r2, r3
 800462c:	200e      	movs	r0, #14
 800462e:	2420      	movs	r4, #32
 8004630:	1903      	adds	r3, r0, r4
 8004632:	19db      	adds	r3, r3, r7
 8004634:	210f      	movs	r1, #15
 8004636:	438a      	bics	r2, r1
 8004638:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800463a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800463c:	085b      	lsrs	r3, r3, #1
 800463e:	b29b      	uxth	r3, r3
 8004640:	2207      	movs	r2, #7
 8004642:	4013      	ands	r3, r2
 8004644:	b299      	uxth	r1, r3
 8004646:	1903      	adds	r3, r0, r4
 8004648:	19db      	adds	r3, r3, r7
 800464a:	1902      	adds	r2, r0, r4
 800464c:	19d2      	adds	r2, r2, r7
 800464e:	8812      	ldrh	r2, [r2, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	1902      	adds	r2, r0, r4
 800465a:	19d2      	adds	r2, r2, r7
 800465c:	8812      	ldrh	r2, [r2, #0]
 800465e:	60da      	str	r2, [r3, #12]
 8004660:	e05e      	b.n	8004720 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8004662:	231a      	movs	r3, #26
 8004664:	2220      	movs	r2, #32
 8004666:	189b      	adds	r3, r3, r2
 8004668:	19db      	adds	r3, r3, r7
 800466a:	2201      	movs	r2, #1
 800466c:	701a      	strb	r2, [r3, #0]
 800466e:	e057      	b.n	8004720 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004670:	231b      	movs	r3, #27
 8004672:	2220      	movs	r2, #32
 8004674:	189b      	adds	r3, r3, r2
 8004676:	19db      	adds	r3, r3, r7
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	2b08      	cmp	r3, #8
 800467c:	d015      	beq.n	80046aa <UART_SetConfig+0x442>
 800467e:	dc18      	bgt.n	80046b2 <UART_SetConfig+0x44a>
 8004680:	2b04      	cmp	r3, #4
 8004682:	d00d      	beq.n	80046a0 <UART_SetConfig+0x438>
 8004684:	dc15      	bgt.n	80046b2 <UART_SetConfig+0x44a>
 8004686:	2b00      	cmp	r3, #0
 8004688:	d002      	beq.n	8004690 <UART_SetConfig+0x428>
 800468a:	2b02      	cmp	r3, #2
 800468c:	d005      	beq.n	800469a <UART_SetConfig+0x432>
 800468e:	e010      	b.n	80046b2 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004690:	f7fe f9f6 	bl	8002a80 <HAL_RCC_GetPCLK1Freq>
 8004694:	0003      	movs	r3, r0
 8004696:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004698:	e014      	b.n	80046c4 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800469a:	4b2e      	ldr	r3, [pc, #184]	; (8004754 <UART_SetConfig+0x4ec>)
 800469c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800469e:	e011      	b.n	80046c4 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046a0:	f7fe f962 	bl	8002968 <HAL_RCC_GetSysClockFreq>
 80046a4:	0003      	movs	r3, r0
 80046a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80046a8:	e00c      	b.n	80046c4 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046aa:	2380      	movs	r3, #128	; 0x80
 80046ac:	021b      	lsls	r3, r3, #8
 80046ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80046b0:	e008      	b.n	80046c4 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 80046b2:	2300      	movs	r3, #0
 80046b4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80046b6:	231a      	movs	r3, #26
 80046b8:	2220      	movs	r2, #32
 80046ba:	189b      	adds	r3, r3, r2
 80046bc:	19db      	adds	r3, r3, r7
 80046be:	2201      	movs	r2, #1
 80046c0:	701a      	strb	r2, [r3, #0]
        break;
 80046c2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80046c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d02a      	beq.n	8004720 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046ce:	4b20      	ldr	r3, [pc, #128]	; (8004750 <UART_SetConfig+0x4e8>)
 80046d0:	0052      	lsls	r2, r2, #1
 80046d2:	5ad3      	ldrh	r3, [r2, r3]
 80046d4:	0019      	movs	r1, r3
 80046d6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80046d8:	f7fb fd26 	bl	8000128 <__udivsi3>
 80046dc:	0003      	movs	r3, r0
 80046de:	001a      	movs	r2, r3
 80046e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	085b      	lsrs	r3, r3, #1
 80046e6:	18d2      	adds	r2, r2, r3
 80046e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	0019      	movs	r1, r3
 80046ee:	0010      	movs	r0, r2
 80046f0:	f7fb fd1a 	bl	8000128 <__udivsi3>
 80046f4:	0003      	movs	r3, r0
 80046f6:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fa:	2b0f      	cmp	r3, #15
 80046fc:	d90a      	bls.n	8004714 <UART_SetConfig+0x4ac>
 80046fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004700:	2380      	movs	r3, #128	; 0x80
 8004702:	025b      	lsls	r3, r3, #9
 8004704:	429a      	cmp	r2, r3
 8004706:	d205      	bcs.n	8004714 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800470a:	b29a      	uxth	r2, r3
 800470c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	60da      	str	r2, [r3, #12]
 8004712:	e005      	b.n	8004720 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8004714:	231a      	movs	r3, #26
 8004716:	2220      	movs	r2, #32
 8004718:	189b      	adds	r3, r3, r2
 800471a:	19db      	adds	r3, r3, r7
 800471c:	2201      	movs	r2, #1
 800471e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004722:	226a      	movs	r2, #106	; 0x6a
 8004724:	2101      	movs	r1, #1
 8004726:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472a:	2268      	movs	r2, #104	; 0x68
 800472c:	2101      	movs	r1, #1
 800472e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004732:	2200      	movs	r2, #0
 8004734:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004738:	2200      	movs	r2, #0
 800473a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800473c:	231a      	movs	r3, #26
 800473e:	2220      	movs	r2, #32
 8004740:	189b      	adds	r3, r3, r2
 8004742:	19db      	adds	r3, r3, r7
 8004744:	781b      	ldrb	r3, [r3, #0]
}
 8004746:	0018      	movs	r0, r3
 8004748:	46bd      	mov	sp, r7
 800474a:	b010      	add	sp, #64	; 0x40
 800474c:	bdb0      	pop	{r4, r5, r7, pc}
 800474e:	46c0      	nop			; (mov r8, r8)
 8004750:	08007560 	.word	0x08007560
 8004754:	00f42400 	.word	0x00f42400

08004758 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004764:	2201      	movs	r2, #1
 8004766:	4013      	ands	r3, r2
 8004768:	d00b      	beq.n	8004782 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	4a4a      	ldr	r2, [pc, #296]	; (800489c <UART_AdvFeatureConfig+0x144>)
 8004772:	4013      	ands	r3, r2
 8004774:	0019      	movs	r1, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	430a      	orrs	r2, r1
 8004780:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004786:	2202      	movs	r2, #2
 8004788:	4013      	ands	r3, r2
 800478a:	d00b      	beq.n	80047a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	4a43      	ldr	r2, [pc, #268]	; (80048a0 <UART_AdvFeatureConfig+0x148>)
 8004794:	4013      	ands	r3, r2
 8004796:	0019      	movs	r1, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	430a      	orrs	r2, r1
 80047a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a8:	2204      	movs	r2, #4
 80047aa:	4013      	ands	r3, r2
 80047ac:	d00b      	beq.n	80047c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	4a3b      	ldr	r2, [pc, #236]	; (80048a4 <UART_AdvFeatureConfig+0x14c>)
 80047b6:	4013      	ands	r3, r2
 80047b8:	0019      	movs	r1, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	430a      	orrs	r2, r1
 80047c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ca:	2208      	movs	r2, #8
 80047cc:	4013      	ands	r3, r2
 80047ce:	d00b      	beq.n	80047e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	4a34      	ldr	r2, [pc, #208]	; (80048a8 <UART_AdvFeatureConfig+0x150>)
 80047d8:	4013      	ands	r3, r2
 80047da:	0019      	movs	r1, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	430a      	orrs	r2, r1
 80047e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ec:	2210      	movs	r2, #16
 80047ee:	4013      	ands	r3, r2
 80047f0:	d00b      	beq.n	800480a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	4a2c      	ldr	r2, [pc, #176]	; (80048ac <UART_AdvFeatureConfig+0x154>)
 80047fa:	4013      	ands	r3, r2
 80047fc:	0019      	movs	r1, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	430a      	orrs	r2, r1
 8004808:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480e:	2220      	movs	r2, #32
 8004810:	4013      	ands	r3, r2
 8004812:	d00b      	beq.n	800482c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	4a25      	ldr	r2, [pc, #148]	; (80048b0 <UART_AdvFeatureConfig+0x158>)
 800481c:	4013      	ands	r3, r2
 800481e:	0019      	movs	r1, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004830:	2240      	movs	r2, #64	; 0x40
 8004832:	4013      	ands	r3, r2
 8004834:	d01d      	beq.n	8004872 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	4a1d      	ldr	r2, [pc, #116]	; (80048b4 <UART_AdvFeatureConfig+0x15c>)
 800483e:	4013      	ands	r3, r2
 8004840:	0019      	movs	r1, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	430a      	orrs	r2, r1
 800484c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004852:	2380      	movs	r3, #128	; 0x80
 8004854:	035b      	lsls	r3, r3, #13
 8004856:	429a      	cmp	r2, r3
 8004858:	d10b      	bne.n	8004872 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	4a15      	ldr	r2, [pc, #84]	; (80048b8 <UART_AdvFeatureConfig+0x160>)
 8004862:	4013      	ands	r3, r2
 8004864:	0019      	movs	r1, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	430a      	orrs	r2, r1
 8004870:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004876:	2280      	movs	r2, #128	; 0x80
 8004878:	4013      	ands	r3, r2
 800487a:	d00b      	beq.n	8004894 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	4a0e      	ldr	r2, [pc, #56]	; (80048bc <UART_AdvFeatureConfig+0x164>)
 8004884:	4013      	ands	r3, r2
 8004886:	0019      	movs	r1, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	430a      	orrs	r2, r1
 8004892:	605a      	str	r2, [r3, #4]
  }
}
 8004894:	46c0      	nop			; (mov r8, r8)
 8004896:	46bd      	mov	sp, r7
 8004898:	b002      	add	sp, #8
 800489a:	bd80      	pop	{r7, pc}
 800489c:	fffdffff 	.word	0xfffdffff
 80048a0:	fffeffff 	.word	0xfffeffff
 80048a4:	fffbffff 	.word	0xfffbffff
 80048a8:	ffff7fff 	.word	0xffff7fff
 80048ac:	ffffefff 	.word	0xffffefff
 80048b0:	ffffdfff 	.word	0xffffdfff
 80048b4:	ffefffff 	.word	0xffefffff
 80048b8:	ff9fffff 	.word	0xff9fffff
 80048bc:	fff7ffff 	.word	0xfff7ffff

080048c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b086      	sub	sp, #24
 80048c4:	af02      	add	r7, sp, #8
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2290      	movs	r2, #144	; 0x90
 80048cc:	2100      	movs	r1, #0
 80048ce:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048d0:	f7fc fe08 	bl	80014e4 <HAL_GetTick>
 80048d4:	0003      	movs	r3, r0
 80048d6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2208      	movs	r2, #8
 80048e0:	4013      	ands	r3, r2
 80048e2:	2b08      	cmp	r3, #8
 80048e4:	d10c      	bne.n	8004900 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2280      	movs	r2, #128	; 0x80
 80048ea:	0391      	lsls	r1, r2, #14
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	4a1a      	ldr	r2, [pc, #104]	; (8004958 <UART_CheckIdleState+0x98>)
 80048f0:	9200      	str	r2, [sp, #0]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f000 f832 	bl	800495c <UART_WaitOnFlagUntilTimeout>
 80048f8:	1e03      	subs	r3, r0, #0
 80048fa:	d001      	beq.n	8004900 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e026      	b.n	800494e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2204      	movs	r2, #4
 8004908:	4013      	ands	r3, r2
 800490a:	2b04      	cmp	r3, #4
 800490c:	d10c      	bne.n	8004928 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2280      	movs	r2, #128	; 0x80
 8004912:	03d1      	lsls	r1, r2, #15
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	4a10      	ldr	r2, [pc, #64]	; (8004958 <UART_CheckIdleState+0x98>)
 8004918:	9200      	str	r2, [sp, #0]
 800491a:	2200      	movs	r2, #0
 800491c:	f000 f81e 	bl	800495c <UART_WaitOnFlagUntilTimeout>
 8004920:	1e03      	subs	r3, r0, #0
 8004922:	d001      	beq.n	8004928 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e012      	b.n	800494e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2288      	movs	r2, #136	; 0x88
 800492c:	2120      	movs	r1, #32
 800492e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	228c      	movs	r2, #140	; 0x8c
 8004934:	2120      	movs	r1, #32
 8004936:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2284      	movs	r2, #132	; 0x84
 8004948:	2100      	movs	r1, #0
 800494a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	0018      	movs	r0, r3
 8004950:	46bd      	mov	sp, r7
 8004952:	b004      	add	sp, #16
 8004954:	bd80      	pop	{r7, pc}
 8004956:	46c0      	nop			; (mov r8, r8)
 8004958:	01ffffff 	.word	0x01ffffff

0800495c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b094      	sub	sp, #80	; 0x50
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	603b      	str	r3, [r7, #0]
 8004968:	1dfb      	adds	r3, r7, #7
 800496a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800496c:	e0a7      	b.n	8004abe <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800496e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004970:	3301      	adds	r3, #1
 8004972:	d100      	bne.n	8004976 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004974:	e0a3      	b.n	8004abe <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004976:	f7fc fdb5 	bl	80014e4 <HAL_GetTick>
 800497a:	0002      	movs	r2, r0
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004982:	429a      	cmp	r2, r3
 8004984:	d302      	bcc.n	800498c <UART_WaitOnFlagUntilTimeout+0x30>
 8004986:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004988:	2b00      	cmp	r3, #0
 800498a:	d13f      	bne.n	8004a0c <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800498c:	f3ef 8310 	mrs	r3, PRIMASK
 8004990:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004992:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004994:	647b      	str	r3, [r7, #68]	; 0x44
 8004996:	2301      	movs	r3, #1
 8004998:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800499a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800499c:	f383 8810 	msr	PRIMASK, r3
}
 80049a0:	46c0      	nop			; (mov r8, r8)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	494e      	ldr	r1, [pc, #312]	; (8004ae8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80049ae:	400a      	ands	r2, r1
 80049b0:	601a      	str	r2, [r3, #0]
 80049b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049b4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b8:	f383 8810 	msr	PRIMASK, r3
}
 80049bc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049be:	f3ef 8310 	mrs	r3, PRIMASK
 80049c2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80049c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049c6:	643b      	str	r3, [r7, #64]	; 0x40
 80049c8:	2301      	movs	r3, #1
 80049ca:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ce:	f383 8810 	msr	PRIMASK, r3
}
 80049d2:	46c0      	nop			; (mov r8, r8)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689a      	ldr	r2, [r3, #8]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2101      	movs	r1, #1
 80049e0:	438a      	bics	r2, r1
 80049e2:	609a      	str	r2, [r3, #8]
 80049e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ea:	f383 8810 	msr	PRIMASK, r3
}
 80049ee:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2288      	movs	r2, #136	; 0x88
 80049f4:	2120      	movs	r1, #32
 80049f6:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	228c      	movs	r2, #140	; 0x8c
 80049fc:	2120      	movs	r1, #32
 80049fe:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2284      	movs	r2, #132	; 0x84
 8004a04:	2100      	movs	r1, #0
 8004a06:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e069      	b.n	8004ae0 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2204      	movs	r2, #4
 8004a14:	4013      	ands	r3, r2
 8004a16:	d052      	beq.n	8004abe <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	69da      	ldr	r2, [r3, #28]
 8004a1e:	2380      	movs	r3, #128	; 0x80
 8004a20:	011b      	lsls	r3, r3, #4
 8004a22:	401a      	ands	r2, r3
 8004a24:	2380      	movs	r3, #128	; 0x80
 8004a26:	011b      	lsls	r3, r3, #4
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d148      	bne.n	8004abe <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2280      	movs	r2, #128	; 0x80
 8004a32:	0112      	lsls	r2, r2, #4
 8004a34:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a36:	f3ef 8310 	mrs	r3, PRIMASK
 8004a3a:	613b      	str	r3, [r7, #16]
  return(result);
 8004a3c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a40:	2301      	movs	r3, #1
 8004a42:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	f383 8810 	msr	PRIMASK, r3
}
 8004a4a:	46c0      	nop			; (mov r8, r8)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4924      	ldr	r1, [pc, #144]	; (8004ae8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004a58:	400a      	ands	r2, r1
 8004a5a:	601a      	str	r2, [r3, #0]
 8004a5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a5e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	f383 8810 	msr	PRIMASK, r3
}
 8004a66:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a68:	f3ef 8310 	mrs	r3, PRIMASK
 8004a6c:	61fb      	str	r3, [r7, #28]
  return(result);
 8004a6e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a70:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a72:	2301      	movs	r3, #1
 8004a74:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a76:	6a3b      	ldr	r3, [r7, #32]
 8004a78:	f383 8810 	msr	PRIMASK, r3
}
 8004a7c:	46c0      	nop			; (mov r8, r8)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	689a      	ldr	r2, [r3, #8]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2101      	movs	r1, #1
 8004a8a:	438a      	bics	r2, r1
 8004a8c:	609a      	str	r2, [r3, #8]
 8004a8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a90:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a94:	f383 8810 	msr	PRIMASK, r3
}
 8004a98:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2288      	movs	r2, #136	; 0x88
 8004a9e:	2120      	movs	r1, #32
 8004aa0:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	228c      	movs	r2, #140	; 0x8c
 8004aa6:	2120      	movs	r1, #32
 8004aa8:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2290      	movs	r2, #144	; 0x90
 8004aae:	2120      	movs	r1, #32
 8004ab0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2284      	movs	r2, #132	; 0x84
 8004ab6:	2100      	movs	r1, #0
 8004ab8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e010      	b.n	8004ae0 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	425a      	negs	r2, r3
 8004ace:	4153      	adcs	r3, r2
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	001a      	movs	r2, r3
 8004ad4:	1dfb      	adds	r3, r7, #7
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d100      	bne.n	8004ade <UART_WaitOnFlagUntilTimeout+0x182>
 8004adc:	e747      	b.n	800496e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	0018      	movs	r0, r3
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	b014      	add	sp, #80	; 0x50
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	fffffe5f 	.word	0xfffffe5f

08004aec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b090      	sub	sp, #64	; 0x40
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	1dbb      	adds	r3, r7, #6
 8004af8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	1dba      	adds	r2, r7, #6
 8004b04:	215c      	movs	r1, #92	; 0x5c
 8004b06:	8812      	ldrh	r2, [r2, #0]
 8004b08:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2290      	movs	r2, #144	; 0x90
 8004b0e:	2100      	movs	r1, #0
 8004b10:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	228c      	movs	r2, #140	; 0x8c
 8004b16:	2122      	movs	r1, #34	; 0x22
 8004b18:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2280      	movs	r2, #128	; 0x80
 8004b1e:	589b      	ldr	r3, [r3, r2]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d02d      	beq.n	8004b80 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2280      	movs	r2, #128	; 0x80
 8004b28:	589b      	ldr	r3, [r3, r2]
 8004b2a:	4a40      	ldr	r2, [pc, #256]	; (8004c2c <UART_Start_Receive_DMA+0x140>)
 8004b2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2280      	movs	r2, #128	; 0x80
 8004b32:	589b      	ldr	r3, [r3, r2]
 8004b34:	4a3e      	ldr	r2, [pc, #248]	; (8004c30 <UART_Start_Receive_DMA+0x144>)
 8004b36:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2280      	movs	r2, #128	; 0x80
 8004b3c:	589b      	ldr	r3, [r3, r2]
 8004b3e:	4a3d      	ldr	r2, [pc, #244]	; (8004c34 <UART_Start_Receive_DMA+0x148>)
 8004b40:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2280      	movs	r2, #128	; 0x80
 8004b46:	589b      	ldr	r3, [r3, r2]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2280      	movs	r2, #128	; 0x80
 8004b50:	5898      	ldr	r0, [r3, r2]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	3324      	adds	r3, #36	; 0x24
 8004b58:	0019      	movs	r1, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b5e:	001a      	movs	r2, r3
 8004b60:	1dbb      	adds	r3, r7, #6
 8004b62:	881b      	ldrh	r3, [r3, #0]
 8004b64:	f7fc fe54 	bl	8001810 <HAL_DMA_Start_IT>
 8004b68:	1e03      	subs	r3, r0, #0
 8004b6a:	d009      	beq.n	8004b80 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2290      	movs	r2, #144	; 0x90
 8004b70:	2110      	movs	r1, #16
 8004b72:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	228c      	movs	r2, #140	; 0x8c
 8004b78:	2120      	movs	r1, #32
 8004b7a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e050      	b.n	8004c22 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d019      	beq.n	8004bbc <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b88:	f3ef 8310 	mrs	r3, PRIMASK
 8004b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b92:	2301      	movs	r3, #1
 8004b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b98:	f383 8810 	msr	PRIMASK, r3
}
 8004b9c:	46c0      	nop			; (mov r8, r8)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2180      	movs	r1, #128	; 0x80
 8004baa:	0049      	lsls	r1, r1, #1
 8004bac:	430a      	orrs	r2, r1
 8004bae:	601a      	str	r2, [r3, #0]
 8004bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bb2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb6:	f383 8810 	msr	PRIMASK, r3
}
 8004bba:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bbc:	f3ef 8310 	mrs	r3, PRIMASK
 8004bc0:	613b      	str	r3, [r7, #16]
  return(result);
 8004bc2:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f383 8810 	msr	PRIMASK, r3
}
 8004bd0:	46c0      	nop			; (mov r8, r8)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	689a      	ldr	r2, [r3, #8]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2101      	movs	r1, #1
 8004bde:	430a      	orrs	r2, r1
 8004be0:	609a      	str	r2, [r3, #8]
 8004be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	f383 8810 	msr	PRIMASK, r3
}
 8004bec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bee:	f3ef 8310 	mrs	r3, PRIMASK
 8004bf2:	61fb      	str	r3, [r7, #28]
  return(result);
 8004bf4:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bf6:	637b      	str	r3, [r7, #52]	; 0x34
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bfc:	6a3b      	ldr	r3, [r7, #32]
 8004bfe:	f383 8810 	msr	PRIMASK, r3
}
 8004c02:	46c0      	nop			; (mov r8, r8)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689a      	ldr	r2, [r3, #8]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2140      	movs	r1, #64	; 0x40
 8004c10:	430a      	orrs	r2, r1
 8004c12:	609a      	str	r2, [r3, #8]
 8004c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c16:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1a:	f383 8810 	msr	PRIMASK, r3
}
 8004c1e:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	0018      	movs	r0, r3
 8004c24:	46bd      	mov	sp, r7
 8004c26:	b010      	add	sp, #64	; 0x40
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	46c0      	nop			; (mov r8, r8)
 8004c2c:	08004d85 	.word	0x08004d85
 8004c30:	08004eb5 	.word	0x08004eb5
 8004c34:	08004ef7 	.word	0x08004ef7

08004c38 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b08a      	sub	sp, #40	; 0x28
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c40:	f3ef 8310 	mrs	r3, PRIMASK
 8004c44:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c46:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004c48:	627b      	str	r3, [r7, #36]	; 0x24
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f383 8810 	msr	PRIMASK, r3
}
 8004c54:	46c0      	nop			; (mov r8, r8)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	21c0      	movs	r1, #192	; 0xc0
 8004c62:	438a      	bics	r2, r1
 8004c64:	601a      	str	r2, [r3, #0]
 8004c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	f383 8810 	msr	PRIMASK, r3
}
 8004c70:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c72:	f3ef 8310 	mrs	r3, PRIMASK
 8004c76:	617b      	str	r3, [r7, #20]
  return(result);
 8004c78:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004c7a:	623b      	str	r3, [r7, #32]
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	f383 8810 	msr	PRIMASK, r3
}
 8004c86:	46c0      	nop			; (mov r8, r8)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	689a      	ldr	r2, [r3, #8]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4908      	ldr	r1, [pc, #32]	; (8004cb4 <UART_EndTxTransfer+0x7c>)
 8004c94:	400a      	ands	r2, r1
 8004c96:	609a      	str	r2, [r3, #8]
 8004c98:	6a3b      	ldr	r3, [r7, #32]
 8004c9a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	f383 8810 	msr	PRIMASK, r3
}
 8004ca2:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2288      	movs	r2, #136	; 0x88
 8004ca8:	2120      	movs	r1, #32
 8004caa:	5099      	str	r1, [r3, r2]
}
 8004cac:	46c0      	nop			; (mov r8, r8)
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	b00a      	add	sp, #40	; 0x28
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	ff7fffff 	.word	0xff7fffff

08004cb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b08e      	sub	sp, #56	; 0x38
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cc0:	f3ef 8310 	mrs	r3, PRIMASK
 8004cc4:	617b      	str	r3, [r7, #20]
  return(result);
 8004cc6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004cc8:	637b      	str	r3, [r7, #52]	; 0x34
 8004cca:	2301      	movs	r3, #1
 8004ccc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	f383 8810 	msr	PRIMASK, r3
}
 8004cd4:	46c0      	nop			; (mov r8, r8)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4926      	ldr	r1, [pc, #152]	; (8004d7c <UART_EndRxTransfer+0xc4>)
 8004ce2:	400a      	ands	r2, r1
 8004ce4:	601a      	str	r2, [r3, #0]
 8004ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ce8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	f383 8810 	msr	PRIMASK, r3
}
 8004cf0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cf2:	f3ef 8310 	mrs	r3, PRIMASK
 8004cf6:	623b      	str	r3, [r7, #32]
  return(result);
 8004cf8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004cfa:	633b      	str	r3, [r7, #48]	; 0x30
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d02:	f383 8810 	msr	PRIMASK, r3
}
 8004d06:	46c0      	nop			; (mov r8, r8)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689a      	ldr	r2, [r3, #8]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	491b      	ldr	r1, [pc, #108]	; (8004d80 <UART_EndRxTransfer+0xc8>)
 8004d14:	400a      	ands	r2, r1
 8004d16:	609a      	str	r2, [r3, #8]
 8004d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1e:	f383 8810 	msr	PRIMASK, r3
}
 8004d22:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d118      	bne.n	8004d5e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d2c:	f3ef 8310 	mrs	r3, PRIMASK
 8004d30:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d32:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d36:	2301      	movs	r3, #1
 8004d38:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f383 8810 	msr	PRIMASK, r3
}
 8004d40:	46c0      	nop			; (mov r8, r8)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2110      	movs	r1, #16
 8004d4e:	438a      	bics	r2, r1
 8004d50:	601a      	str	r2, [r3, #0]
 8004d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	f383 8810 	msr	PRIMASK, r3
}
 8004d5c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	228c      	movs	r2, #140	; 0x8c
 8004d62:	2120      	movs	r1, #32
 8004d64:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004d72:	46c0      	nop			; (mov r8, r8)
 8004d74:	46bd      	mov	sp, r7
 8004d76:	b00e      	add	sp, #56	; 0x38
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	46c0      	nop			; (mov r8, r8)
 8004d7c:	fffffedf 	.word	0xfffffedf
 8004d80:	effffffe 	.word	0xeffffffe

08004d84 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b094      	sub	sp, #80	; 0x50
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d90:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2220      	movs	r2, #32
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	d16f      	bne.n	8004e7e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8004d9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004da0:	225e      	movs	r2, #94	; 0x5e
 8004da2:	2100      	movs	r1, #0
 8004da4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004da6:	f3ef 8310 	mrs	r3, PRIMASK
 8004daa:	61bb      	str	r3, [r7, #24]
  return(result);
 8004dac:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004dae:	64bb      	str	r3, [r7, #72]	; 0x48
 8004db0:	2301      	movs	r3, #1
 8004db2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	f383 8810 	msr	PRIMASK, r3
}
 8004dba:	46c0      	nop			; (mov r8, r8)
 8004dbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	493a      	ldr	r1, [pc, #232]	; (8004eb0 <UART_DMAReceiveCplt+0x12c>)
 8004dc8:	400a      	ands	r2, r1
 8004dca:	601a      	str	r2, [r3, #0]
 8004dcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dd0:	6a3b      	ldr	r3, [r7, #32]
 8004dd2:	f383 8810 	msr	PRIMASK, r3
}
 8004dd6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dd8:	f3ef 8310 	mrs	r3, PRIMASK
 8004ddc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004de0:	647b      	str	r3, [r7, #68]	; 0x44
 8004de2:	2301      	movs	r3, #1
 8004de4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de8:	f383 8810 	msr	PRIMASK, r3
}
 8004dec:	46c0      	nop			; (mov r8, r8)
 8004dee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	689a      	ldr	r2, [r3, #8]
 8004df4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2101      	movs	r1, #1
 8004dfa:	438a      	bics	r2, r1
 8004dfc:	609a      	str	r2, [r3, #8]
 8004dfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e04:	f383 8810 	msr	PRIMASK, r3
}
 8004e08:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e0a:	f3ef 8310 	mrs	r3, PRIMASK
 8004e0e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e12:	643b      	str	r3, [r7, #64]	; 0x40
 8004e14:	2301      	movs	r3, #1
 8004e16:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e1a:	f383 8810 	msr	PRIMASK, r3
}
 8004e1e:	46c0      	nop			; (mov r8, r8)
 8004e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	689a      	ldr	r2, [r3, #8]
 8004e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2140      	movs	r1, #64	; 0x40
 8004e2c:	438a      	bics	r2, r1
 8004e2e:	609a      	str	r2, [r3, #8]
 8004e30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e32:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e36:	f383 8810 	msr	PRIMASK, r3
}
 8004e3a:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004e3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e3e:	228c      	movs	r2, #140	; 0x8c
 8004e40:	2120      	movs	r1, #32
 8004e42:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d118      	bne.n	8004e7e <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e4c:	f3ef 8310 	mrs	r3, PRIMASK
 8004e50:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e52:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e56:	2301      	movs	r3, #1
 8004e58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	f383 8810 	msr	PRIMASK, r3
}
 8004e60:	46c0      	nop			; (mov r8, r8)
 8004e62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2110      	movs	r1, #16
 8004e6e:	438a      	bics	r2, r1
 8004e70:	601a      	str	r2, [r3, #0]
 8004e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	f383 8810 	msr	PRIMASK, r3
}
 8004e7c:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e80:	2200      	movs	r2, #0
 8004e82:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d108      	bne.n	8004e9e <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e8e:	225c      	movs	r2, #92	; 0x5c
 8004e90:	5a9a      	ldrh	r2, [r3, r2]
 8004e92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e94:	0011      	movs	r1, r2
 8004e96:	0018      	movs	r0, r3
 8004e98:	f7fb feea 	bl	8000c70 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004e9c:	e003      	b.n	8004ea6 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8004e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ea0:	0018      	movs	r0, r3
 8004ea2:	f7ff f9c9 	bl	8004238 <HAL_UART_RxCpltCallback>
}
 8004ea6:	46c0      	nop			; (mov r8, r8)
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	b014      	add	sp, #80	; 0x50
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	46c0      	nop			; (mov r8, r8)
 8004eb0:	fffffeff 	.word	0xfffffeff

08004eb4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d10a      	bne.n	8004ee6 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	225c      	movs	r2, #92	; 0x5c
 8004ed4:	5a9b      	ldrh	r3, [r3, r2]
 8004ed6:	085b      	lsrs	r3, r3, #1
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	0011      	movs	r1, r2
 8004ede:	0018      	movs	r0, r3
 8004ee0:	f7fb fec6 	bl	8000c70 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004ee4:	e003      	b.n	8004eee <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	0018      	movs	r0, r3
 8004eea:	f7ff f9ad 	bl	8004248 <HAL_UART_RxHalfCpltCallback>
}
 8004eee:	46c0      	nop			; (mov r8, r8)
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	b004      	add	sp, #16
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b086      	sub	sp, #24
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f02:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	2288      	movs	r2, #136	; 0x88
 8004f08:	589b      	ldr	r3, [r3, r2]
 8004f0a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	228c      	movs	r2, #140	; 0x8c
 8004f10:	589b      	ldr	r3, [r3, r2]
 8004f12:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	2280      	movs	r2, #128	; 0x80
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	2b80      	cmp	r3, #128	; 0x80
 8004f20:	d10a      	bne.n	8004f38 <UART_DMAError+0x42>
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	2b21      	cmp	r3, #33	; 0x21
 8004f26:	d107      	bne.n	8004f38 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	2256      	movs	r2, #86	; 0x56
 8004f2c:	2100      	movs	r1, #0
 8004f2e:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	0018      	movs	r0, r3
 8004f34:	f7ff fe80 	bl	8004c38 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	2240      	movs	r2, #64	; 0x40
 8004f40:	4013      	ands	r3, r2
 8004f42:	2b40      	cmp	r3, #64	; 0x40
 8004f44:	d10a      	bne.n	8004f5c <UART_DMAError+0x66>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2b22      	cmp	r3, #34	; 0x22
 8004f4a:	d107      	bne.n	8004f5c <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	225e      	movs	r2, #94	; 0x5e
 8004f50:	2100      	movs	r1, #0
 8004f52:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	0018      	movs	r0, r3
 8004f58:	f7ff feae 	bl	8004cb8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	2290      	movs	r2, #144	; 0x90
 8004f60:	589b      	ldr	r3, [r3, r2]
 8004f62:	2210      	movs	r2, #16
 8004f64:	431a      	orrs	r2, r3
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	2190      	movs	r1, #144	; 0x90
 8004f6a:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	0018      	movs	r0, r3
 8004f70:	f7ff f972 	bl	8004258 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f74:	46c0      	nop			; (mov r8, r8)
 8004f76:	46bd      	mov	sp, r7
 8004f78:	b006      	add	sp, #24
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	225e      	movs	r2, #94	; 0x5e
 8004f8e:	2100      	movs	r1, #0
 8004f90:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2256      	movs	r2, #86	; 0x56
 8004f96:	2100      	movs	r1, #0
 8004f98:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	0018      	movs	r0, r3
 8004f9e:	f7ff f95b 	bl	8004258 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fa2:	46c0      	nop			; (mov r8, r8)
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	b004      	add	sp, #16
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b086      	sub	sp, #24
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fb2:	f3ef 8310 	mrs	r3, PRIMASK
 8004fb6:	60bb      	str	r3, [r7, #8]
  return(result);
 8004fb8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004fba:	617b      	str	r3, [r7, #20]
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f383 8810 	msr	PRIMASK, r3
}
 8004fc6:	46c0      	nop			; (mov r8, r8)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2140      	movs	r1, #64	; 0x40
 8004fd4:	438a      	bics	r2, r1
 8004fd6:	601a      	str	r2, [r3, #0]
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	f383 8810 	msr	PRIMASK, r3
}
 8004fe2:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2288      	movs	r2, #136	; 0x88
 8004fe8:	2120      	movs	r1, #32
 8004fea:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	0018      	movs	r0, r3
 8004ff6:	f7ff f917 	bl	8004228 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ffa:	46c0      	nop			; (mov r8, r8)
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	b006      	add	sp, #24
 8005000:	bd80      	pop	{r7, pc}

08005002 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b082      	sub	sp, #8
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800500a:	46c0      	nop			; (mov r8, r8)
 800500c:	46bd      	mov	sp, r7
 800500e:	b002      	add	sp, #8
 8005010:	bd80      	pop	{r7, pc}

08005012 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005012:	b580      	push	{r7, lr}
 8005014:	b082      	sub	sp, #8
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800501a:	46c0      	nop			; (mov r8, r8)
 800501c:	46bd      	mov	sp, r7
 800501e:	b002      	add	sp, #8
 8005020:	bd80      	pop	{r7, pc}

08005022 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005022:	b580      	push	{r7, lr}
 8005024:	b082      	sub	sp, #8
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800502a:	46c0      	nop			; (mov r8, r8)
 800502c:	46bd      	mov	sp, r7
 800502e:	b002      	add	sp, #8
 8005030:	bd80      	pop	{r7, pc}
	...

08005034 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2284      	movs	r2, #132	; 0x84
 8005040:	5c9b      	ldrb	r3, [r3, r2]
 8005042:	2b01      	cmp	r3, #1
 8005044:	d101      	bne.n	800504a <HAL_UARTEx_DisableFifoMode+0x16>
 8005046:	2302      	movs	r3, #2
 8005048:	e027      	b.n	800509a <HAL_UARTEx_DisableFifoMode+0x66>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2284      	movs	r2, #132	; 0x84
 800504e:	2101      	movs	r1, #1
 8005050:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2288      	movs	r2, #136	; 0x88
 8005056:	2124      	movs	r1, #36	; 0x24
 8005058:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2101      	movs	r1, #1
 800506e:	438a      	bics	r2, r1
 8005070:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	4a0b      	ldr	r2, [pc, #44]	; (80050a4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005076:	4013      	ands	r3, r2
 8005078:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2288      	movs	r2, #136	; 0x88
 800508c:	2120      	movs	r1, #32
 800508e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2284      	movs	r2, #132	; 0x84
 8005094:	2100      	movs	r1, #0
 8005096:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	0018      	movs	r0, r3
 800509c:	46bd      	mov	sp, r7
 800509e:	b004      	add	sp, #16
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	46c0      	nop			; (mov r8, r8)
 80050a4:	dfffffff 	.word	0xdfffffff

080050a8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2284      	movs	r2, #132	; 0x84
 80050b6:	5c9b      	ldrb	r3, [r3, r2]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d101      	bne.n	80050c0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80050bc:	2302      	movs	r3, #2
 80050be:	e02e      	b.n	800511e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2284      	movs	r2, #132	; 0x84
 80050c4:	2101      	movs	r1, #1
 80050c6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2288      	movs	r2, #136	; 0x88
 80050cc:	2124      	movs	r1, #36	; 0x24
 80050ce:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2101      	movs	r1, #1
 80050e4:	438a      	bics	r2, r1
 80050e6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	00db      	lsls	r3, r3, #3
 80050f0:	08d9      	lsrs	r1, r3, #3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	430a      	orrs	r2, r1
 80050fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	0018      	movs	r0, r3
 8005100:	f000 f8bc 	bl	800527c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2288      	movs	r2, #136	; 0x88
 8005110:	2120      	movs	r1, #32
 8005112:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2284      	movs	r2, #132	; 0x84
 8005118:	2100      	movs	r1, #0
 800511a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	0018      	movs	r0, r3
 8005120:	46bd      	mov	sp, r7
 8005122:	b004      	add	sp, #16
 8005124:	bd80      	pop	{r7, pc}
	...

08005128 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2284      	movs	r2, #132	; 0x84
 8005136:	5c9b      	ldrb	r3, [r3, r2]
 8005138:	2b01      	cmp	r3, #1
 800513a:	d101      	bne.n	8005140 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800513c:	2302      	movs	r3, #2
 800513e:	e02f      	b.n	80051a0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2284      	movs	r2, #132	; 0x84
 8005144:	2101      	movs	r1, #1
 8005146:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2288      	movs	r2, #136	; 0x88
 800514c:	2124      	movs	r1, #36	; 0x24
 800514e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2101      	movs	r1, #1
 8005164:	438a      	bics	r2, r1
 8005166:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	4a0e      	ldr	r2, [pc, #56]	; (80051a8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005170:	4013      	ands	r3, r2
 8005172:	0019      	movs	r1, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	683a      	ldr	r2, [r7, #0]
 800517a:	430a      	orrs	r2, r1
 800517c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	0018      	movs	r0, r3
 8005182:	f000 f87b 	bl	800527c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2288      	movs	r2, #136	; 0x88
 8005192:	2120      	movs	r1, #32
 8005194:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2284      	movs	r2, #132	; 0x84
 800519a:	2100      	movs	r1, #0
 800519c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	0018      	movs	r0, r3
 80051a2:	46bd      	mov	sp, r7
 80051a4:	b004      	add	sp, #16
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	f1ffffff 	.word	0xf1ffffff

080051ac <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051ac:	b5b0      	push	{r4, r5, r7, lr}
 80051ae:	b08a      	sub	sp, #40	; 0x28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	1dbb      	adds	r3, r7, #6
 80051b8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	228c      	movs	r2, #140	; 0x8c
 80051be:	589b      	ldr	r3, [r3, r2]
 80051c0:	2b20      	cmp	r3, #32
 80051c2:	d156      	bne.n	8005272 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d003      	beq.n	80051d2 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80051ca:	1dbb      	adds	r3, r7, #6
 80051cc:	881b      	ldrh	r3, [r3, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d101      	bne.n	80051d6 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e04e      	b.n	8005274 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	689a      	ldr	r2, [r3, #8]
 80051da:	2380      	movs	r3, #128	; 0x80
 80051dc:	015b      	lsls	r3, r3, #5
 80051de:	429a      	cmp	r2, r3
 80051e0:	d109      	bne.n	80051f6 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d105      	bne.n	80051f6 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	2201      	movs	r2, #1
 80051ee:	4013      	ands	r3, r2
 80051f0:	d001      	beq.n	80051f6 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e03e      	b.n	8005274 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2201      	movs	r2, #1
 80051fa:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005202:	2527      	movs	r5, #39	; 0x27
 8005204:	197c      	adds	r4, r7, r5
 8005206:	1dbb      	adds	r3, r7, #6
 8005208:	881a      	ldrh	r2, [r3, #0]
 800520a:	68b9      	ldr	r1, [r7, #8]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	0018      	movs	r0, r3
 8005210:	f7ff fc6c 	bl	8004aec <UART_Start_Receive_DMA>
 8005214:	0003      	movs	r3, r0
 8005216:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005218:	197b      	adds	r3, r7, r5
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d124      	bne.n	800526a <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005224:	2b01      	cmp	r3, #1
 8005226:	d11c      	bne.n	8005262 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2210      	movs	r2, #16
 800522e:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005230:	f3ef 8310 	mrs	r3, PRIMASK
 8005234:	617b      	str	r3, [r7, #20]
  return(result);
 8005236:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005238:	623b      	str	r3, [r7, #32]
 800523a:	2301      	movs	r3, #1
 800523c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	f383 8810 	msr	PRIMASK, r3
}
 8005244:	46c0      	nop			; (mov r8, r8)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2110      	movs	r1, #16
 8005252:	430a      	orrs	r2, r1
 8005254:	601a      	str	r2, [r3, #0]
 8005256:	6a3b      	ldr	r3, [r7, #32]
 8005258:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	f383 8810 	msr	PRIMASK, r3
}
 8005260:	e003      	b.n	800526a <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005262:	2327      	movs	r3, #39	; 0x27
 8005264:	18fb      	adds	r3, r7, r3
 8005266:	2201      	movs	r2, #1
 8005268:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 800526a:	2327      	movs	r3, #39	; 0x27
 800526c:	18fb      	adds	r3, r7, r3
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	e000      	b.n	8005274 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8005272:	2302      	movs	r3, #2
  }
}
 8005274:	0018      	movs	r0, r3
 8005276:	46bd      	mov	sp, r7
 8005278:	b00a      	add	sp, #40	; 0x28
 800527a:	bdb0      	pop	{r4, r5, r7, pc}

0800527c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800527c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005288:	2b00      	cmp	r3, #0
 800528a:	d108      	bne.n	800529e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	226a      	movs	r2, #106	; 0x6a
 8005290:	2101      	movs	r1, #1
 8005292:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2268      	movs	r2, #104	; 0x68
 8005298:	2101      	movs	r1, #1
 800529a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800529c:	e043      	b.n	8005326 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800529e:	260f      	movs	r6, #15
 80052a0:	19bb      	adds	r3, r7, r6
 80052a2:	2208      	movs	r2, #8
 80052a4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80052a6:	200e      	movs	r0, #14
 80052a8:	183b      	adds	r3, r7, r0
 80052aa:	2208      	movs	r2, #8
 80052ac:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	0e5b      	lsrs	r3, r3, #25
 80052b6:	b2da      	uxtb	r2, r3
 80052b8:	240d      	movs	r4, #13
 80052ba:	193b      	adds	r3, r7, r4
 80052bc:	2107      	movs	r1, #7
 80052be:	400a      	ands	r2, r1
 80052c0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	0f5b      	lsrs	r3, r3, #29
 80052ca:	b2da      	uxtb	r2, r3
 80052cc:	250c      	movs	r5, #12
 80052ce:	197b      	adds	r3, r7, r5
 80052d0:	2107      	movs	r1, #7
 80052d2:	400a      	ands	r2, r1
 80052d4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80052d6:	183b      	adds	r3, r7, r0
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	197a      	adds	r2, r7, r5
 80052dc:	7812      	ldrb	r2, [r2, #0]
 80052de:	4914      	ldr	r1, [pc, #80]	; (8005330 <UARTEx_SetNbDataToProcess+0xb4>)
 80052e0:	5c8a      	ldrb	r2, [r1, r2]
 80052e2:	435a      	muls	r2, r3
 80052e4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80052e6:	197b      	adds	r3, r7, r5
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	4a12      	ldr	r2, [pc, #72]	; (8005334 <UARTEx_SetNbDataToProcess+0xb8>)
 80052ec:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80052ee:	0019      	movs	r1, r3
 80052f0:	f7fa ffa4 	bl	800023c <__divsi3>
 80052f4:	0003      	movs	r3, r0
 80052f6:	b299      	uxth	r1, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	226a      	movs	r2, #106	; 0x6a
 80052fc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052fe:	19bb      	adds	r3, r7, r6
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	193a      	adds	r2, r7, r4
 8005304:	7812      	ldrb	r2, [r2, #0]
 8005306:	490a      	ldr	r1, [pc, #40]	; (8005330 <UARTEx_SetNbDataToProcess+0xb4>)
 8005308:	5c8a      	ldrb	r2, [r1, r2]
 800530a:	435a      	muls	r2, r3
 800530c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800530e:	193b      	adds	r3, r7, r4
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	4a08      	ldr	r2, [pc, #32]	; (8005334 <UARTEx_SetNbDataToProcess+0xb8>)
 8005314:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005316:	0019      	movs	r1, r3
 8005318:	f7fa ff90 	bl	800023c <__divsi3>
 800531c:	0003      	movs	r3, r0
 800531e:	b299      	uxth	r1, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2268      	movs	r2, #104	; 0x68
 8005324:	5299      	strh	r1, [r3, r2]
}
 8005326:	46c0      	nop			; (mov r8, r8)
 8005328:	46bd      	mov	sp, r7
 800532a:	b005      	add	sp, #20
 800532c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800532e:	46c0      	nop			; (mov r8, r8)
 8005330:	08007578 	.word	0x08007578
 8005334:	08007580 	.word	0x08007580

08005338 <__errno>:
 8005338:	4b01      	ldr	r3, [pc, #4]	; (8005340 <__errno+0x8>)
 800533a:	6818      	ldr	r0, [r3, #0]
 800533c:	4770      	bx	lr
 800533e:	46c0      	nop			; (mov r8, r8)
 8005340:	2000009c 	.word	0x2000009c

08005344 <__libc_init_array>:
 8005344:	b570      	push	{r4, r5, r6, lr}
 8005346:	2600      	movs	r6, #0
 8005348:	4d0c      	ldr	r5, [pc, #48]	; (800537c <__libc_init_array+0x38>)
 800534a:	4c0d      	ldr	r4, [pc, #52]	; (8005380 <__libc_init_array+0x3c>)
 800534c:	1b64      	subs	r4, r4, r5
 800534e:	10a4      	asrs	r4, r4, #2
 8005350:	42a6      	cmp	r6, r4
 8005352:	d109      	bne.n	8005368 <__libc_init_array+0x24>
 8005354:	2600      	movs	r6, #0
 8005356:	f001 ffe9 	bl	800732c <_init>
 800535a:	4d0a      	ldr	r5, [pc, #40]	; (8005384 <__libc_init_array+0x40>)
 800535c:	4c0a      	ldr	r4, [pc, #40]	; (8005388 <__libc_init_array+0x44>)
 800535e:	1b64      	subs	r4, r4, r5
 8005360:	10a4      	asrs	r4, r4, #2
 8005362:	42a6      	cmp	r6, r4
 8005364:	d105      	bne.n	8005372 <__libc_init_array+0x2e>
 8005366:	bd70      	pop	{r4, r5, r6, pc}
 8005368:	00b3      	lsls	r3, r6, #2
 800536a:	58eb      	ldr	r3, [r5, r3]
 800536c:	4798      	blx	r3
 800536e:	3601      	adds	r6, #1
 8005370:	e7ee      	b.n	8005350 <__libc_init_array+0xc>
 8005372:	00b3      	lsls	r3, r6, #2
 8005374:	58eb      	ldr	r3, [r5, r3]
 8005376:	4798      	blx	r3
 8005378:	3601      	adds	r6, #1
 800537a:	e7f2      	b.n	8005362 <__libc_init_array+0x1e>
 800537c:	080077f4 	.word	0x080077f4
 8005380:	080077f4 	.word	0x080077f4
 8005384:	080077f4 	.word	0x080077f4
 8005388:	080077f8 	.word	0x080077f8

0800538c <memset>:
 800538c:	0003      	movs	r3, r0
 800538e:	1882      	adds	r2, r0, r2
 8005390:	4293      	cmp	r3, r2
 8005392:	d100      	bne.n	8005396 <memset+0xa>
 8005394:	4770      	bx	lr
 8005396:	7019      	strb	r1, [r3, #0]
 8005398:	3301      	adds	r3, #1
 800539a:	e7f9      	b.n	8005390 <memset+0x4>

0800539c <sniprintf>:
 800539c:	b40c      	push	{r2, r3}
 800539e:	b530      	push	{r4, r5, lr}
 80053a0:	4b17      	ldr	r3, [pc, #92]	; (8005400 <sniprintf+0x64>)
 80053a2:	000c      	movs	r4, r1
 80053a4:	681d      	ldr	r5, [r3, #0]
 80053a6:	b09d      	sub	sp, #116	; 0x74
 80053a8:	2900      	cmp	r1, #0
 80053aa:	da08      	bge.n	80053be <sniprintf+0x22>
 80053ac:	238b      	movs	r3, #139	; 0x8b
 80053ae:	2001      	movs	r0, #1
 80053b0:	602b      	str	r3, [r5, #0]
 80053b2:	4240      	negs	r0, r0
 80053b4:	b01d      	add	sp, #116	; 0x74
 80053b6:	bc30      	pop	{r4, r5}
 80053b8:	bc08      	pop	{r3}
 80053ba:	b002      	add	sp, #8
 80053bc:	4718      	bx	r3
 80053be:	2382      	movs	r3, #130	; 0x82
 80053c0:	466a      	mov	r2, sp
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	8293      	strh	r3, [r2, #20]
 80053c6:	2300      	movs	r3, #0
 80053c8:	9002      	str	r0, [sp, #8]
 80053ca:	9006      	str	r0, [sp, #24]
 80053cc:	4299      	cmp	r1, r3
 80053ce:	d000      	beq.n	80053d2 <sniprintf+0x36>
 80053d0:	1e4b      	subs	r3, r1, #1
 80053d2:	9304      	str	r3, [sp, #16]
 80053d4:	9307      	str	r3, [sp, #28]
 80053d6:	2301      	movs	r3, #1
 80053d8:	466a      	mov	r2, sp
 80053da:	425b      	negs	r3, r3
 80053dc:	82d3      	strh	r3, [r2, #22]
 80053de:	0028      	movs	r0, r5
 80053e0:	ab21      	add	r3, sp, #132	; 0x84
 80053e2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80053e4:	a902      	add	r1, sp, #8
 80053e6:	9301      	str	r3, [sp, #4]
 80053e8:	f000 face 	bl	8005988 <_svfiprintf_r>
 80053ec:	1c43      	adds	r3, r0, #1
 80053ee:	da01      	bge.n	80053f4 <sniprintf+0x58>
 80053f0:	238b      	movs	r3, #139	; 0x8b
 80053f2:	602b      	str	r3, [r5, #0]
 80053f4:	2c00      	cmp	r4, #0
 80053f6:	d0dd      	beq.n	80053b4 <sniprintf+0x18>
 80053f8:	2300      	movs	r3, #0
 80053fa:	9a02      	ldr	r2, [sp, #8]
 80053fc:	7013      	strb	r3, [r2, #0]
 80053fe:	e7d9      	b.n	80053b4 <sniprintf+0x18>
 8005400:	2000009c 	.word	0x2000009c

08005404 <siprintf>:
 8005404:	b40e      	push	{r1, r2, r3}
 8005406:	b500      	push	{lr}
 8005408:	490b      	ldr	r1, [pc, #44]	; (8005438 <siprintf+0x34>)
 800540a:	b09c      	sub	sp, #112	; 0x70
 800540c:	ab1d      	add	r3, sp, #116	; 0x74
 800540e:	9002      	str	r0, [sp, #8]
 8005410:	9006      	str	r0, [sp, #24]
 8005412:	9107      	str	r1, [sp, #28]
 8005414:	9104      	str	r1, [sp, #16]
 8005416:	4809      	ldr	r0, [pc, #36]	; (800543c <siprintf+0x38>)
 8005418:	4909      	ldr	r1, [pc, #36]	; (8005440 <siprintf+0x3c>)
 800541a:	cb04      	ldmia	r3!, {r2}
 800541c:	9105      	str	r1, [sp, #20]
 800541e:	6800      	ldr	r0, [r0, #0]
 8005420:	a902      	add	r1, sp, #8
 8005422:	9301      	str	r3, [sp, #4]
 8005424:	f000 fab0 	bl	8005988 <_svfiprintf_r>
 8005428:	2300      	movs	r3, #0
 800542a:	9a02      	ldr	r2, [sp, #8]
 800542c:	7013      	strb	r3, [r2, #0]
 800542e:	b01c      	add	sp, #112	; 0x70
 8005430:	bc08      	pop	{r3}
 8005432:	b003      	add	sp, #12
 8005434:	4718      	bx	r3
 8005436:	46c0      	nop			; (mov r8, r8)
 8005438:	7fffffff 	.word	0x7fffffff
 800543c:	2000009c 	.word	0x2000009c
 8005440:	ffff0208 	.word	0xffff0208

08005444 <siscanf>:
 8005444:	b40e      	push	{r1, r2, r3}
 8005446:	b530      	push	{r4, r5, lr}
 8005448:	2381      	movs	r3, #129	; 0x81
 800544a:	b09c      	sub	sp, #112	; 0x70
 800544c:	466a      	mov	r2, sp
 800544e:	ac1f      	add	r4, sp, #124	; 0x7c
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	cc20      	ldmia	r4!, {r5}
 8005454:	8293      	strh	r3, [r2, #20]
 8005456:	9002      	str	r0, [sp, #8]
 8005458:	9006      	str	r0, [sp, #24]
 800545a:	f7fa fe53 	bl	8000104 <strlen>
 800545e:	4b0b      	ldr	r3, [pc, #44]	; (800548c <siscanf+0x48>)
 8005460:	466a      	mov	r2, sp
 8005462:	930b      	str	r3, [sp, #44]	; 0x2c
 8005464:	2300      	movs	r3, #0
 8005466:	9003      	str	r0, [sp, #12]
 8005468:	9007      	str	r0, [sp, #28]
 800546a:	4809      	ldr	r0, [pc, #36]	; (8005490 <siscanf+0x4c>)
 800546c:	930f      	str	r3, [sp, #60]	; 0x3c
 800546e:	9314      	str	r3, [sp, #80]	; 0x50
 8005470:	3b01      	subs	r3, #1
 8005472:	82d3      	strh	r3, [r2, #22]
 8005474:	a902      	add	r1, sp, #8
 8005476:	0023      	movs	r3, r4
 8005478:	002a      	movs	r2, r5
 800547a:	6800      	ldr	r0, [r0, #0]
 800547c:	9401      	str	r4, [sp, #4]
 800547e:	f000 fbdf 	bl	8005c40 <__ssvfiscanf_r>
 8005482:	b01c      	add	sp, #112	; 0x70
 8005484:	bc30      	pop	{r4, r5}
 8005486:	bc08      	pop	{r3}
 8005488:	b003      	add	sp, #12
 800548a:	4718      	bx	r3
 800548c:	080054bd 	.word	0x080054bd
 8005490:	2000009c 	.word	0x2000009c

08005494 <__sread>:
 8005494:	b570      	push	{r4, r5, r6, lr}
 8005496:	000c      	movs	r4, r1
 8005498:	250e      	movs	r5, #14
 800549a:	5f49      	ldrsh	r1, [r1, r5]
 800549c:	f001 f994 	bl	80067c8 <_read_r>
 80054a0:	2800      	cmp	r0, #0
 80054a2:	db03      	blt.n	80054ac <__sread+0x18>
 80054a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80054a6:	181b      	adds	r3, r3, r0
 80054a8:	6563      	str	r3, [r4, #84]	; 0x54
 80054aa:	bd70      	pop	{r4, r5, r6, pc}
 80054ac:	89a3      	ldrh	r3, [r4, #12]
 80054ae:	4a02      	ldr	r2, [pc, #8]	; (80054b8 <__sread+0x24>)
 80054b0:	4013      	ands	r3, r2
 80054b2:	81a3      	strh	r3, [r4, #12]
 80054b4:	e7f9      	b.n	80054aa <__sread+0x16>
 80054b6:	46c0      	nop			; (mov r8, r8)
 80054b8:	ffffefff 	.word	0xffffefff

080054bc <__seofread>:
 80054bc:	2000      	movs	r0, #0
 80054be:	4770      	bx	lr

080054c0 <__swrite>:
 80054c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054c2:	001f      	movs	r7, r3
 80054c4:	898b      	ldrh	r3, [r1, #12]
 80054c6:	0005      	movs	r5, r0
 80054c8:	000c      	movs	r4, r1
 80054ca:	0016      	movs	r6, r2
 80054cc:	05db      	lsls	r3, r3, #23
 80054ce:	d505      	bpl.n	80054dc <__swrite+0x1c>
 80054d0:	230e      	movs	r3, #14
 80054d2:	5ec9      	ldrsh	r1, [r1, r3]
 80054d4:	2200      	movs	r2, #0
 80054d6:	2302      	movs	r3, #2
 80054d8:	f000 f8f4 	bl	80056c4 <_lseek_r>
 80054dc:	89a3      	ldrh	r3, [r4, #12]
 80054de:	4a05      	ldr	r2, [pc, #20]	; (80054f4 <__swrite+0x34>)
 80054e0:	0028      	movs	r0, r5
 80054e2:	4013      	ands	r3, r2
 80054e4:	81a3      	strh	r3, [r4, #12]
 80054e6:	0032      	movs	r2, r6
 80054e8:	230e      	movs	r3, #14
 80054ea:	5ee1      	ldrsh	r1, [r4, r3]
 80054ec:	003b      	movs	r3, r7
 80054ee:	f000 f895 	bl	800561c <_write_r>
 80054f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054f4:	ffffefff 	.word	0xffffefff

080054f8 <__sseek>:
 80054f8:	b570      	push	{r4, r5, r6, lr}
 80054fa:	000c      	movs	r4, r1
 80054fc:	250e      	movs	r5, #14
 80054fe:	5f49      	ldrsh	r1, [r1, r5]
 8005500:	f000 f8e0 	bl	80056c4 <_lseek_r>
 8005504:	89a3      	ldrh	r3, [r4, #12]
 8005506:	1c42      	adds	r2, r0, #1
 8005508:	d103      	bne.n	8005512 <__sseek+0x1a>
 800550a:	4a05      	ldr	r2, [pc, #20]	; (8005520 <__sseek+0x28>)
 800550c:	4013      	ands	r3, r2
 800550e:	81a3      	strh	r3, [r4, #12]
 8005510:	bd70      	pop	{r4, r5, r6, pc}
 8005512:	2280      	movs	r2, #128	; 0x80
 8005514:	0152      	lsls	r2, r2, #5
 8005516:	4313      	orrs	r3, r2
 8005518:	81a3      	strh	r3, [r4, #12]
 800551a:	6560      	str	r0, [r4, #84]	; 0x54
 800551c:	e7f8      	b.n	8005510 <__sseek+0x18>
 800551e:	46c0      	nop			; (mov r8, r8)
 8005520:	ffffefff 	.word	0xffffefff

08005524 <__sclose>:
 8005524:	b510      	push	{r4, lr}
 8005526:	230e      	movs	r3, #14
 8005528:	5ec9      	ldrsh	r1, [r1, r3]
 800552a:	f000 f8a9 	bl	8005680 <_close_r>
 800552e:	bd10      	pop	{r4, pc}

08005530 <strncmp>:
 8005530:	b530      	push	{r4, r5, lr}
 8005532:	0005      	movs	r5, r0
 8005534:	1e10      	subs	r0, r2, #0
 8005536:	d008      	beq.n	800554a <strncmp+0x1a>
 8005538:	2400      	movs	r4, #0
 800553a:	3a01      	subs	r2, #1
 800553c:	5d2b      	ldrb	r3, [r5, r4]
 800553e:	5d08      	ldrb	r0, [r1, r4]
 8005540:	4283      	cmp	r3, r0
 8005542:	d101      	bne.n	8005548 <strncmp+0x18>
 8005544:	4294      	cmp	r4, r2
 8005546:	d101      	bne.n	800554c <strncmp+0x1c>
 8005548:	1a18      	subs	r0, r3, r0
 800554a:	bd30      	pop	{r4, r5, pc}
 800554c:	3401      	adds	r4, #1
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1f4      	bne.n	800553c <strncmp+0xc>
 8005552:	e7f9      	b.n	8005548 <strncmp+0x18>

08005554 <strtok>:
 8005554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005556:	4b16      	ldr	r3, [pc, #88]	; (80055b0 <strtok+0x5c>)
 8005558:	0005      	movs	r5, r0
 800555a:	681f      	ldr	r7, [r3, #0]
 800555c:	000e      	movs	r6, r1
 800555e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8005560:	2c00      	cmp	r4, #0
 8005562:	d11d      	bne.n	80055a0 <strtok+0x4c>
 8005564:	2050      	movs	r0, #80	; 0x50
 8005566:	f000 f8c1 	bl	80056ec <malloc>
 800556a:	1e02      	subs	r2, r0, #0
 800556c:	65b8      	str	r0, [r7, #88]	; 0x58
 800556e:	d104      	bne.n	800557a <strtok+0x26>
 8005570:	2157      	movs	r1, #87	; 0x57
 8005572:	4b10      	ldr	r3, [pc, #64]	; (80055b4 <strtok+0x60>)
 8005574:	4810      	ldr	r0, [pc, #64]	; (80055b8 <strtok+0x64>)
 8005576:	f000 f865 	bl	8005644 <__assert_func>
 800557a:	6004      	str	r4, [r0, #0]
 800557c:	6044      	str	r4, [r0, #4]
 800557e:	6084      	str	r4, [r0, #8]
 8005580:	60c4      	str	r4, [r0, #12]
 8005582:	6104      	str	r4, [r0, #16]
 8005584:	6144      	str	r4, [r0, #20]
 8005586:	6184      	str	r4, [r0, #24]
 8005588:	6284      	str	r4, [r0, #40]	; 0x28
 800558a:	62c4      	str	r4, [r0, #44]	; 0x2c
 800558c:	6304      	str	r4, [r0, #48]	; 0x30
 800558e:	6344      	str	r4, [r0, #52]	; 0x34
 8005590:	6384      	str	r4, [r0, #56]	; 0x38
 8005592:	63c4      	str	r4, [r0, #60]	; 0x3c
 8005594:	6404      	str	r4, [r0, #64]	; 0x40
 8005596:	6444      	str	r4, [r0, #68]	; 0x44
 8005598:	6484      	str	r4, [r0, #72]	; 0x48
 800559a:	64c4      	str	r4, [r0, #76]	; 0x4c
 800559c:	7704      	strb	r4, [r0, #28]
 800559e:	6244      	str	r4, [r0, #36]	; 0x24
 80055a0:	0031      	movs	r1, r6
 80055a2:	0028      	movs	r0, r5
 80055a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80055a6:	2301      	movs	r3, #1
 80055a8:	f000 f808 	bl	80055bc <__strtok_r>
 80055ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055ae:	46c0      	nop			; (mov r8, r8)
 80055b0:	2000009c 	.word	0x2000009c
 80055b4:	0800758c 	.word	0x0800758c
 80055b8:	080075a3 	.word	0x080075a3

080055bc <__strtok_r>:
 80055bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055be:	2800      	cmp	r0, #0
 80055c0:	d102      	bne.n	80055c8 <__strtok_r+0xc>
 80055c2:	6810      	ldr	r0, [r2, #0]
 80055c4:	2800      	cmp	r0, #0
 80055c6:	d013      	beq.n	80055f0 <__strtok_r+0x34>
 80055c8:	0004      	movs	r4, r0
 80055ca:	0020      	movs	r0, r4
 80055cc:	000e      	movs	r6, r1
 80055ce:	7805      	ldrb	r5, [r0, #0]
 80055d0:	3401      	adds	r4, #1
 80055d2:	7837      	ldrb	r7, [r6, #0]
 80055d4:	2f00      	cmp	r7, #0
 80055d6:	d104      	bne.n	80055e2 <__strtok_r+0x26>
 80055d8:	2d00      	cmp	r5, #0
 80055da:	d10f      	bne.n	80055fc <__strtok_r+0x40>
 80055dc:	0028      	movs	r0, r5
 80055de:	6015      	str	r5, [r2, #0]
 80055e0:	e006      	b.n	80055f0 <__strtok_r+0x34>
 80055e2:	3601      	adds	r6, #1
 80055e4:	42bd      	cmp	r5, r7
 80055e6:	d1f4      	bne.n	80055d2 <__strtok_r+0x16>
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d1ee      	bne.n	80055ca <__strtok_r+0xe>
 80055ec:	6014      	str	r4, [r2, #0]
 80055ee:	7003      	strb	r3, [r0, #0]
 80055f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055f2:	002f      	movs	r7, r5
 80055f4:	e00f      	b.n	8005616 <__strtok_r+0x5a>
 80055f6:	3301      	adds	r3, #1
 80055f8:	2e00      	cmp	r6, #0
 80055fa:	d104      	bne.n	8005606 <__strtok_r+0x4a>
 80055fc:	0023      	movs	r3, r4
 80055fe:	3401      	adds	r4, #1
 8005600:	781d      	ldrb	r5, [r3, #0]
 8005602:	0027      	movs	r7, r4
 8005604:	000b      	movs	r3, r1
 8005606:	781e      	ldrb	r6, [r3, #0]
 8005608:	42b5      	cmp	r5, r6
 800560a:	d1f4      	bne.n	80055f6 <__strtok_r+0x3a>
 800560c:	2d00      	cmp	r5, #0
 800560e:	d0f0      	beq.n	80055f2 <__strtok_r+0x36>
 8005610:	2300      	movs	r3, #0
 8005612:	3c01      	subs	r4, #1
 8005614:	7023      	strb	r3, [r4, #0]
 8005616:	6017      	str	r7, [r2, #0]
 8005618:	e7ea      	b.n	80055f0 <__strtok_r+0x34>
	...

0800561c <_write_r>:
 800561c:	b570      	push	{r4, r5, r6, lr}
 800561e:	0004      	movs	r4, r0
 8005620:	0008      	movs	r0, r1
 8005622:	0011      	movs	r1, r2
 8005624:	001a      	movs	r2, r3
 8005626:	2300      	movs	r3, #0
 8005628:	4d05      	ldr	r5, [pc, #20]	; (8005640 <_write_r+0x24>)
 800562a:	602b      	str	r3, [r5, #0]
 800562c:	f7fb fe2f 	bl	800128e <_write>
 8005630:	1c43      	adds	r3, r0, #1
 8005632:	d103      	bne.n	800563c <_write_r+0x20>
 8005634:	682b      	ldr	r3, [r5, #0]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d000      	beq.n	800563c <_write_r+0x20>
 800563a:	6023      	str	r3, [r4, #0]
 800563c:	bd70      	pop	{r4, r5, r6, pc}
 800563e:	46c0      	nop			; (mov r8, r8)
 8005640:	200004f0 	.word	0x200004f0

08005644 <__assert_func>:
 8005644:	b530      	push	{r4, r5, lr}
 8005646:	0014      	movs	r4, r2
 8005648:	001a      	movs	r2, r3
 800564a:	4b09      	ldr	r3, [pc, #36]	; (8005670 <__assert_func+0x2c>)
 800564c:	0005      	movs	r5, r0
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	b085      	sub	sp, #20
 8005652:	68d8      	ldr	r0, [r3, #12]
 8005654:	4b07      	ldr	r3, [pc, #28]	; (8005674 <__assert_func+0x30>)
 8005656:	2c00      	cmp	r4, #0
 8005658:	d101      	bne.n	800565e <__assert_func+0x1a>
 800565a:	4b07      	ldr	r3, [pc, #28]	; (8005678 <__assert_func+0x34>)
 800565c:	001c      	movs	r4, r3
 800565e:	9301      	str	r3, [sp, #4]
 8005660:	9100      	str	r1, [sp, #0]
 8005662:	002b      	movs	r3, r5
 8005664:	4905      	ldr	r1, [pc, #20]	; (800567c <__assert_func+0x38>)
 8005666:	9402      	str	r4, [sp, #8]
 8005668:	f000 f81c 	bl	80056a4 <fiprintf>
 800566c:	f001 fb3a 	bl	8006ce4 <abort>
 8005670:	2000009c 	.word	0x2000009c
 8005674:	08007600 	.word	0x08007600
 8005678:	0800763b 	.word	0x0800763b
 800567c:	0800760d 	.word	0x0800760d

08005680 <_close_r>:
 8005680:	2300      	movs	r3, #0
 8005682:	b570      	push	{r4, r5, r6, lr}
 8005684:	4d06      	ldr	r5, [pc, #24]	; (80056a0 <_close_r+0x20>)
 8005686:	0004      	movs	r4, r0
 8005688:	0008      	movs	r0, r1
 800568a:	602b      	str	r3, [r5, #0]
 800568c:	f7fb fe1b 	bl	80012c6 <_close>
 8005690:	1c43      	adds	r3, r0, #1
 8005692:	d103      	bne.n	800569c <_close_r+0x1c>
 8005694:	682b      	ldr	r3, [r5, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d000      	beq.n	800569c <_close_r+0x1c>
 800569a:	6023      	str	r3, [r4, #0]
 800569c:	bd70      	pop	{r4, r5, r6, pc}
 800569e:	46c0      	nop			; (mov r8, r8)
 80056a0:	200004f0 	.word	0x200004f0

080056a4 <fiprintf>:
 80056a4:	b40e      	push	{r1, r2, r3}
 80056a6:	b503      	push	{r0, r1, lr}
 80056a8:	0001      	movs	r1, r0
 80056aa:	ab03      	add	r3, sp, #12
 80056ac:	4804      	ldr	r0, [pc, #16]	; (80056c0 <fiprintf+0x1c>)
 80056ae:	cb04      	ldmia	r3!, {r2}
 80056b0:	6800      	ldr	r0, [r0, #0]
 80056b2:	9301      	str	r3, [sp, #4]
 80056b4:	f000 fc6a 	bl	8005f8c <_vfiprintf_r>
 80056b8:	b002      	add	sp, #8
 80056ba:	bc08      	pop	{r3}
 80056bc:	b003      	add	sp, #12
 80056be:	4718      	bx	r3
 80056c0:	2000009c 	.word	0x2000009c

080056c4 <_lseek_r>:
 80056c4:	b570      	push	{r4, r5, r6, lr}
 80056c6:	0004      	movs	r4, r0
 80056c8:	0008      	movs	r0, r1
 80056ca:	0011      	movs	r1, r2
 80056cc:	001a      	movs	r2, r3
 80056ce:	2300      	movs	r3, #0
 80056d0:	4d05      	ldr	r5, [pc, #20]	; (80056e8 <_lseek_r+0x24>)
 80056d2:	602b      	str	r3, [r5, #0]
 80056d4:	f7fb fe18 	bl	8001308 <_lseek>
 80056d8:	1c43      	adds	r3, r0, #1
 80056da:	d103      	bne.n	80056e4 <_lseek_r+0x20>
 80056dc:	682b      	ldr	r3, [r5, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d000      	beq.n	80056e4 <_lseek_r+0x20>
 80056e2:	6023      	str	r3, [r4, #0]
 80056e4:	bd70      	pop	{r4, r5, r6, pc}
 80056e6:	46c0      	nop			; (mov r8, r8)
 80056e8:	200004f0 	.word	0x200004f0

080056ec <malloc>:
 80056ec:	b510      	push	{r4, lr}
 80056ee:	4b03      	ldr	r3, [pc, #12]	; (80056fc <malloc+0x10>)
 80056f0:	0001      	movs	r1, r0
 80056f2:	6818      	ldr	r0, [r3, #0]
 80056f4:	f000 f870 	bl	80057d8 <_malloc_r>
 80056f8:	bd10      	pop	{r4, pc}
 80056fa:	46c0      	nop			; (mov r8, r8)
 80056fc:	2000009c 	.word	0x2000009c

08005700 <_free_r>:
 8005700:	b570      	push	{r4, r5, r6, lr}
 8005702:	0005      	movs	r5, r0
 8005704:	2900      	cmp	r1, #0
 8005706:	d010      	beq.n	800572a <_free_r+0x2a>
 8005708:	1f0c      	subs	r4, r1, #4
 800570a:	6823      	ldr	r3, [r4, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	da00      	bge.n	8005712 <_free_r+0x12>
 8005710:	18e4      	adds	r4, r4, r3
 8005712:	0028      	movs	r0, r5
 8005714:	f001 fd54 	bl	80071c0 <__malloc_lock>
 8005718:	4a1d      	ldr	r2, [pc, #116]	; (8005790 <_free_r+0x90>)
 800571a:	6813      	ldr	r3, [r2, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d105      	bne.n	800572c <_free_r+0x2c>
 8005720:	6063      	str	r3, [r4, #4]
 8005722:	6014      	str	r4, [r2, #0]
 8005724:	0028      	movs	r0, r5
 8005726:	f001 fd53 	bl	80071d0 <__malloc_unlock>
 800572a:	bd70      	pop	{r4, r5, r6, pc}
 800572c:	42a3      	cmp	r3, r4
 800572e:	d908      	bls.n	8005742 <_free_r+0x42>
 8005730:	6821      	ldr	r1, [r4, #0]
 8005732:	1860      	adds	r0, r4, r1
 8005734:	4283      	cmp	r3, r0
 8005736:	d1f3      	bne.n	8005720 <_free_r+0x20>
 8005738:	6818      	ldr	r0, [r3, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	1841      	adds	r1, r0, r1
 800573e:	6021      	str	r1, [r4, #0]
 8005740:	e7ee      	b.n	8005720 <_free_r+0x20>
 8005742:	001a      	movs	r2, r3
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d001      	beq.n	800574e <_free_r+0x4e>
 800574a:	42a3      	cmp	r3, r4
 800574c:	d9f9      	bls.n	8005742 <_free_r+0x42>
 800574e:	6811      	ldr	r1, [r2, #0]
 8005750:	1850      	adds	r0, r2, r1
 8005752:	42a0      	cmp	r0, r4
 8005754:	d10b      	bne.n	800576e <_free_r+0x6e>
 8005756:	6820      	ldr	r0, [r4, #0]
 8005758:	1809      	adds	r1, r1, r0
 800575a:	1850      	adds	r0, r2, r1
 800575c:	6011      	str	r1, [r2, #0]
 800575e:	4283      	cmp	r3, r0
 8005760:	d1e0      	bne.n	8005724 <_free_r+0x24>
 8005762:	6818      	ldr	r0, [r3, #0]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	1841      	adds	r1, r0, r1
 8005768:	6011      	str	r1, [r2, #0]
 800576a:	6053      	str	r3, [r2, #4]
 800576c:	e7da      	b.n	8005724 <_free_r+0x24>
 800576e:	42a0      	cmp	r0, r4
 8005770:	d902      	bls.n	8005778 <_free_r+0x78>
 8005772:	230c      	movs	r3, #12
 8005774:	602b      	str	r3, [r5, #0]
 8005776:	e7d5      	b.n	8005724 <_free_r+0x24>
 8005778:	6821      	ldr	r1, [r4, #0]
 800577a:	1860      	adds	r0, r4, r1
 800577c:	4283      	cmp	r3, r0
 800577e:	d103      	bne.n	8005788 <_free_r+0x88>
 8005780:	6818      	ldr	r0, [r3, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	1841      	adds	r1, r0, r1
 8005786:	6021      	str	r1, [r4, #0]
 8005788:	6063      	str	r3, [r4, #4]
 800578a:	6054      	str	r4, [r2, #4]
 800578c:	e7ca      	b.n	8005724 <_free_r+0x24>
 800578e:	46c0      	nop			; (mov r8, r8)
 8005790:	200004e8 	.word	0x200004e8

08005794 <sbrk_aligned>:
 8005794:	b570      	push	{r4, r5, r6, lr}
 8005796:	4e0f      	ldr	r6, [pc, #60]	; (80057d4 <sbrk_aligned+0x40>)
 8005798:	000d      	movs	r5, r1
 800579a:	6831      	ldr	r1, [r6, #0]
 800579c:	0004      	movs	r4, r0
 800579e:	2900      	cmp	r1, #0
 80057a0:	d102      	bne.n	80057a8 <sbrk_aligned+0x14>
 80057a2:	f001 f825 	bl	80067f0 <_sbrk_r>
 80057a6:	6030      	str	r0, [r6, #0]
 80057a8:	0029      	movs	r1, r5
 80057aa:	0020      	movs	r0, r4
 80057ac:	f001 f820 	bl	80067f0 <_sbrk_r>
 80057b0:	1c43      	adds	r3, r0, #1
 80057b2:	d00a      	beq.n	80057ca <sbrk_aligned+0x36>
 80057b4:	2303      	movs	r3, #3
 80057b6:	1cc5      	adds	r5, r0, #3
 80057b8:	439d      	bics	r5, r3
 80057ba:	42a8      	cmp	r0, r5
 80057bc:	d007      	beq.n	80057ce <sbrk_aligned+0x3a>
 80057be:	1a29      	subs	r1, r5, r0
 80057c0:	0020      	movs	r0, r4
 80057c2:	f001 f815 	bl	80067f0 <_sbrk_r>
 80057c6:	1c43      	adds	r3, r0, #1
 80057c8:	d101      	bne.n	80057ce <sbrk_aligned+0x3a>
 80057ca:	2501      	movs	r5, #1
 80057cc:	426d      	negs	r5, r5
 80057ce:	0028      	movs	r0, r5
 80057d0:	bd70      	pop	{r4, r5, r6, pc}
 80057d2:	46c0      	nop			; (mov r8, r8)
 80057d4:	200004ec 	.word	0x200004ec

080057d8 <_malloc_r>:
 80057d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057da:	2203      	movs	r2, #3
 80057dc:	1ccb      	adds	r3, r1, #3
 80057de:	4393      	bics	r3, r2
 80057e0:	3308      	adds	r3, #8
 80057e2:	0006      	movs	r6, r0
 80057e4:	001f      	movs	r7, r3
 80057e6:	2b0c      	cmp	r3, #12
 80057e8:	d232      	bcs.n	8005850 <_malloc_r+0x78>
 80057ea:	270c      	movs	r7, #12
 80057ec:	42b9      	cmp	r1, r7
 80057ee:	d831      	bhi.n	8005854 <_malloc_r+0x7c>
 80057f0:	0030      	movs	r0, r6
 80057f2:	f001 fce5 	bl	80071c0 <__malloc_lock>
 80057f6:	4d32      	ldr	r5, [pc, #200]	; (80058c0 <_malloc_r+0xe8>)
 80057f8:	682b      	ldr	r3, [r5, #0]
 80057fa:	001c      	movs	r4, r3
 80057fc:	2c00      	cmp	r4, #0
 80057fe:	d12e      	bne.n	800585e <_malloc_r+0x86>
 8005800:	0039      	movs	r1, r7
 8005802:	0030      	movs	r0, r6
 8005804:	f7ff ffc6 	bl	8005794 <sbrk_aligned>
 8005808:	0004      	movs	r4, r0
 800580a:	1c43      	adds	r3, r0, #1
 800580c:	d11e      	bne.n	800584c <_malloc_r+0x74>
 800580e:	682c      	ldr	r4, [r5, #0]
 8005810:	0025      	movs	r5, r4
 8005812:	2d00      	cmp	r5, #0
 8005814:	d14a      	bne.n	80058ac <_malloc_r+0xd4>
 8005816:	6823      	ldr	r3, [r4, #0]
 8005818:	0029      	movs	r1, r5
 800581a:	18e3      	adds	r3, r4, r3
 800581c:	0030      	movs	r0, r6
 800581e:	9301      	str	r3, [sp, #4]
 8005820:	f000 ffe6 	bl	80067f0 <_sbrk_r>
 8005824:	9b01      	ldr	r3, [sp, #4]
 8005826:	4283      	cmp	r3, r0
 8005828:	d143      	bne.n	80058b2 <_malloc_r+0xda>
 800582a:	6823      	ldr	r3, [r4, #0]
 800582c:	3703      	adds	r7, #3
 800582e:	1aff      	subs	r7, r7, r3
 8005830:	2303      	movs	r3, #3
 8005832:	439f      	bics	r7, r3
 8005834:	3708      	adds	r7, #8
 8005836:	2f0c      	cmp	r7, #12
 8005838:	d200      	bcs.n	800583c <_malloc_r+0x64>
 800583a:	270c      	movs	r7, #12
 800583c:	0039      	movs	r1, r7
 800583e:	0030      	movs	r0, r6
 8005840:	f7ff ffa8 	bl	8005794 <sbrk_aligned>
 8005844:	1c43      	adds	r3, r0, #1
 8005846:	d034      	beq.n	80058b2 <_malloc_r+0xda>
 8005848:	6823      	ldr	r3, [r4, #0]
 800584a:	19df      	adds	r7, r3, r7
 800584c:	6027      	str	r7, [r4, #0]
 800584e:	e013      	b.n	8005878 <_malloc_r+0xa0>
 8005850:	2b00      	cmp	r3, #0
 8005852:	dacb      	bge.n	80057ec <_malloc_r+0x14>
 8005854:	230c      	movs	r3, #12
 8005856:	2500      	movs	r5, #0
 8005858:	6033      	str	r3, [r6, #0]
 800585a:	0028      	movs	r0, r5
 800585c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800585e:	6822      	ldr	r2, [r4, #0]
 8005860:	1bd1      	subs	r1, r2, r7
 8005862:	d420      	bmi.n	80058a6 <_malloc_r+0xce>
 8005864:	290b      	cmp	r1, #11
 8005866:	d917      	bls.n	8005898 <_malloc_r+0xc0>
 8005868:	19e2      	adds	r2, r4, r7
 800586a:	6027      	str	r7, [r4, #0]
 800586c:	42a3      	cmp	r3, r4
 800586e:	d111      	bne.n	8005894 <_malloc_r+0xbc>
 8005870:	602a      	str	r2, [r5, #0]
 8005872:	6863      	ldr	r3, [r4, #4]
 8005874:	6011      	str	r1, [r2, #0]
 8005876:	6053      	str	r3, [r2, #4]
 8005878:	0030      	movs	r0, r6
 800587a:	0025      	movs	r5, r4
 800587c:	f001 fca8 	bl	80071d0 <__malloc_unlock>
 8005880:	2207      	movs	r2, #7
 8005882:	350b      	adds	r5, #11
 8005884:	1d23      	adds	r3, r4, #4
 8005886:	4395      	bics	r5, r2
 8005888:	1aea      	subs	r2, r5, r3
 800588a:	429d      	cmp	r5, r3
 800588c:	d0e5      	beq.n	800585a <_malloc_r+0x82>
 800588e:	1b5b      	subs	r3, r3, r5
 8005890:	50a3      	str	r3, [r4, r2]
 8005892:	e7e2      	b.n	800585a <_malloc_r+0x82>
 8005894:	605a      	str	r2, [r3, #4]
 8005896:	e7ec      	b.n	8005872 <_malloc_r+0x9a>
 8005898:	6862      	ldr	r2, [r4, #4]
 800589a:	42a3      	cmp	r3, r4
 800589c:	d101      	bne.n	80058a2 <_malloc_r+0xca>
 800589e:	602a      	str	r2, [r5, #0]
 80058a0:	e7ea      	b.n	8005878 <_malloc_r+0xa0>
 80058a2:	605a      	str	r2, [r3, #4]
 80058a4:	e7e8      	b.n	8005878 <_malloc_r+0xa0>
 80058a6:	0023      	movs	r3, r4
 80058a8:	6864      	ldr	r4, [r4, #4]
 80058aa:	e7a7      	b.n	80057fc <_malloc_r+0x24>
 80058ac:	002c      	movs	r4, r5
 80058ae:	686d      	ldr	r5, [r5, #4]
 80058b0:	e7af      	b.n	8005812 <_malloc_r+0x3a>
 80058b2:	230c      	movs	r3, #12
 80058b4:	0030      	movs	r0, r6
 80058b6:	6033      	str	r3, [r6, #0]
 80058b8:	f001 fc8a 	bl	80071d0 <__malloc_unlock>
 80058bc:	e7cd      	b.n	800585a <_malloc_r+0x82>
 80058be:	46c0      	nop			; (mov r8, r8)
 80058c0:	200004e8 	.word	0x200004e8

080058c4 <__ssputs_r>:
 80058c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058c6:	688e      	ldr	r6, [r1, #8]
 80058c8:	b085      	sub	sp, #20
 80058ca:	0007      	movs	r7, r0
 80058cc:	000c      	movs	r4, r1
 80058ce:	9203      	str	r2, [sp, #12]
 80058d0:	9301      	str	r3, [sp, #4]
 80058d2:	429e      	cmp	r6, r3
 80058d4:	d83c      	bhi.n	8005950 <__ssputs_r+0x8c>
 80058d6:	2390      	movs	r3, #144	; 0x90
 80058d8:	898a      	ldrh	r2, [r1, #12]
 80058da:	00db      	lsls	r3, r3, #3
 80058dc:	421a      	tst	r2, r3
 80058de:	d034      	beq.n	800594a <__ssputs_r+0x86>
 80058e0:	6909      	ldr	r1, [r1, #16]
 80058e2:	6823      	ldr	r3, [r4, #0]
 80058e4:	6960      	ldr	r0, [r4, #20]
 80058e6:	1a5b      	subs	r3, r3, r1
 80058e8:	9302      	str	r3, [sp, #8]
 80058ea:	2303      	movs	r3, #3
 80058ec:	4343      	muls	r3, r0
 80058ee:	0fdd      	lsrs	r5, r3, #31
 80058f0:	18ed      	adds	r5, r5, r3
 80058f2:	9b01      	ldr	r3, [sp, #4]
 80058f4:	9802      	ldr	r0, [sp, #8]
 80058f6:	3301      	adds	r3, #1
 80058f8:	181b      	adds	r3, r3, r0
 80058fa:	106d      	asrs	r5, r5, #1
 80058fc:	42ab      	cmp	r3, r5
 80058fe:	d900      	bls.n	8005902 <__ssputs_r+0x3e>
 8005900:	001d      	movs	r5, r3
 8005902:	0553      	lsls	r3, r2, #21
 8005904:	d532      	bpl.n	800596c <__ssputs_r+0xa8>
 8005906:	0029      	movs	r1, r5
 8005908:	0038      	movs	r0, r7
 800590a:	f7ff ff65 	bl	80057d8 <_malloc_r>
 800590e:	1e06      	subs	r6, r0, #0
 8005910:	d109      	bne.n	8005926 <__ssputs_r+0x62>
 8005912:	230c      	movs	r3, #12
 8005914:	603b      	str	r3, [r7, #0]
 8005916:	2340      	movs	r3, #64	; 0x40
 8005918:	2001      	movs	r0, #1
 800591a:	89a2      	ldrh	r2, [r4, #12]
 800591c:	4240      	negs	r0, r0
 800591e:	4313      	orrs	r3, r2
 8005920:	81a3      	strh	r3, [r4, #12]
 8005922:	b005      	add	sp, #20
 8005924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005926:	9a02      	ldr	r2, [sp, #8]
 8005928:	6921      	ldr	r1, [r4, #16]
 800592a:	f001 fc2c 	bl	8007186 <memcpy>
 800592e:	89a3      	ldrh	r3, [r4, #12]
 8005930:	4a14      	ldr	r2, [pc, #80]	; (8005984 <__ssputs_r+0xc0>)
 8005932:	401a      	ands	r2, r3
 8005934:	2380      	movs	r3, #128	; 0x80
 8005936:	4313      	orrs	r3, r2
 8005938:	81a3      	strh	r3, [r4, #12]
 800593a:	9b02      	ldr	r3, [sp, #8]
 800593c:	6126      	str	r6, [r4, #16]
 800593e:	18f6      	adds	r6, r6, r3
 8005940:	6026      	str	r6, [r4, #0]
 8005942:	6165      	str	r5, [r4, #20]
 8005944:	9e01      	ldr	r6, [sp, #4]
 8005946:	1aed      	subs	r5, r5, r3
 8005948:	60a5      	str	r5, [r4, #8]
 800594a:	9b01      	ldr	r3, [sp, #4]
 800594c:	429e      	cmp	r6, r3
 800594e:	d900      	bls.n	8005952 <__ssputs_r+0x8e>
 8005950:	9e01      	ldr	r6, [sp, #4]
 8005952:	0032      	movs	r2, r6
 8005954:	9903      	ldr	r1, [sp, #12]
 8005956:	6820      	ldr	r0, [r4, #0]
 8005958:	f001 fc1e 	bl	8007198 <memmove>
 800595c:	68a3      	ldr	r3, [r4, #8]
 800595e:	2000      	movs	r0, #0
 8005960:	1b9b      	subs	r3, r3, r6
 8005962:	60a3      	str	r3, [r4, #8]
 8005964:	6823      	ldr	r3, [r4, #0]
 8005966:	199e      	adds	r6, r3, r6
 8005968:	6026      	str	r6, [r4, #0]
 800596a:	e7da      	b.n	8005922 <__ssputs_r+0x5e>
 800596c:	002a      	movs	r2, r5
 800596e:	0038      	movs	r0, r7
 8005970:	f001 fc36 	bl	80071e0 <_realloc_r>
 8005974:	1e06      	subs	r6, r0, #0
 8005976:	d1e0      	bne.n	800593a <__ssputs_r+0x76>
 8005978:	0038      	movs	r0, r7
 800597a:	6921      	ldr	r1, [r4, #16]
 800597c:	f7ff fec0 	bl	8005700 <_free_r>
 8005980:	e7c7      	b.n	8005912 <__ssputs_r+0x4e>
 8005982:	46c0      	nop			; (mov r8, r8)
 8005984:	fffffb7f 	.word	0xfffffb7f

08005988 <_svfiprintf_r>:
 8005988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800598a:	b0a1      	sub	sp, #132	; 0x84
 800598c:	9003      	str	r0, [sp, #12]
 800598e:	001d      	movs	r5, r3
 8005990:	898b      	ldrh	r3, [r1, #12]
 8005992:	000f      	movs	r7, r1
 8005994:	0016      	movs	r6, r2
 8005996:	061b      	lsls	r3, r3, #24
 8005998:	d511      	bpl.n	80059be <_svfiprintf_r+0x36>
 800599a:	690b      	ldr	r3, [r1, #16]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d10e      	bne.n	80059be <_svfiprintf_r+0x36>
 80059a0:	2140      	movs	r1, #64	; 0x40
 80059a2:	f7ff ff19 	bl	80057d8 <_malloc_r>
 80059a6:	6038      	str	r0, [r7, #0]
 80059a8:	6138      	str	r0, [r7, #16]
 80059aa:	2800      	cmp	r0, #0
 80059ac:	d105      	bne.n	80059ba <_svfiprintf_r+0x32>
 80059ae:	230c      	movs	r3, #12
 80059b0:	9a03      	ldr	r2, [sp, #12]
 80059b2:	3801      	subs	r0, #1
 80059b4:	6013      	str	r3, [r2, #0]
 80059b6:	b021      	add	sp, #132	; 0x84
 80059b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059ba:	2340      	movs	r3, #64	; 0x40
 80059bc:	617b      	str	r3, [r7, #20]
 80059be:	2300      	movs	r3, #0
 80059c0:	ac08      	add	r4, sp, #32
 80059c2:	6163      	str	r3, [r4, #20]
 80059c4:	3320      	adds	r3, #32
 80059c6:	7663      	strb	r3, [r4, #25]
 80059c8:	3310      	adds	r3, #16
 80059ca:	76a3      	strb	r3, [r4, #26]
 80059cc:	9507      	str	r5, [sp, #28]
 80059ce:	0035      	movs	r5, r6
 80059d0:	782b      	ldrb	r3, [r5, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d001      	beq.n	80059da <_svfiprintf_r+0x52>
 80059d6:	2b25      	cmp	r3, #37	; 0x25
 80059d8:	d147      	bne.n	8005a6a <_svfiprintf_r+0xe2>
 80059da:	1bab      	subs	r3, r5, r6
 80059dc:	9305      	str	r3, [sp, #20]
 80059de:	42b5      	cmp	r5, r6
 80059e0:	d00c      	beq.n	80059fc <_svfiprintf_r+0x74>
 80059e2:	0032      	movs	r2, r6
 80059e4:	0039      	movs	r1, r7
 80059e6:	9803      	ldr	r0, [sp, #12]
 80059e8:	f7ff ff6c 	bl	80058c4 <__ssputs_r>
 80059ec:	1c43      	adds	r3, r0, #1
 80059ee:	d100      	bne.n	80059f2 <_svfiprintf_r+0x6a>
 80059f0:	e0ae      	b.n	8005b50 <_svfiprintf_r+0x1c8>
 80059f2:	6962      	ldr	r2, [r4, #20]
 80059f4:	9b05      	ldr	r3, [sp, #20]
 80059f6:	4694      	mov	ip, r2
 80059f8:	4463      	add	r3, ip
 80059fa:	6163      	str	r3, [r4, #20]
 80059fc:	782b      	ldrb	r3, [r5, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d100      	bne.n	8005a04 <_svfiprintf_r+0x7c>
 8005a02:	e0a5      	b.n	8005b50 <_svfiprintf_r+0x1c8>
 8005a04:	2201      	movs	r2, #1
 8005a06:	2300      	movs	r3, #0
 8005a08:	4252      	negs	r2, r2
 8005a0a:	6062      	str	r2, [r4, #4]
 8005a0c:	a904      	add	r1, sp, #16
 8005a0e:	3254      	adds	r2, #84	; 0x54
 8005a10:	1852      	adds	r2, r2, r1
 8005a12:	1c6e      	adds	r6, r5, #1
 8005a14:	6023      	str	r3, [r4, #0]
 8005a16:	60e3      	str	r3, [r4, #12]
 8005a18:	60a3      	str	r3, [r4, #8]
 8005a1a:	7013      	strb	r3, [r2, #0]
 8005a1c:	65a3      	str	r3, [r4, #88]	; 0x58
 8005a1e:	2205      	movs	r2, #5
 8005a20:	7831      	ldrb	r1, [r6, #0]
 8005a22:	4854      	ldr	r0, [pc, #336]	; (8005b74 <_svfiprintf_r+0x1ec>)
 8005a24:	f001 fba4 	bl	8007170 <memchr>
 8005a28:	1c75      	adds	r5, r6, #1
 8005a2a:	2800      	cmp	r0, #0
 8005a2c:	d11f      	bne.n	8005a6e <_svfiprintf_r+0xe6>
 8005a2e:	6822      	ldr	r2, [r4, #0]
 8005a30:	06d3      	lsls	r3, r2, #27
 8005a32:	d504      	bpl.n	8005a3e <_svfiprintf_r+0xb6>
 8005a34:	2353      	movs	r3, #83	; 0x53
 8005a36:	a904      	add	r1, sp, #16
 8005a38:	185b      	adds	r3, r3, r1
 8005a3a:	2120      	movs	r1, #32
 8005a3c:	7019      	strb	r1, [r3, #0]
 8005a3e:	0713      	lsls	r3, r2, #28
 8005a40:	d504      	bpl.n	8005a4c <_svfiprintf_r+0xc4>
 8005a42:	2353      	movs	r3, #83	; 0x53
 8005a44:	a904      	add	r1, sp, #16
 8005a46:	185b      	adds	r3, r3, r1
 8005a48:	212b      	movs	r1, #43	; 0x2b
 8005a4a:	7019      	strb	r1, [r3, #0]
 8005a4c:	7833      	ldrb	r3, [r6, #0]
 8005a4e:	2b2a      	cmp	r3, #42	; 0x2a
 8005a50:	d016      	beq.n	8005a80 <_svfiprintf_r+0xf8>
 8005a52:	0035      	movs	r5, r6
 8005a54:	2100      	movs	r1, #0
 8005a56:	200a      	movs	r0, #10
 8005a58:	68e3      	ldr	r3, [r4, #12]
 8005a5a:	782a      	ldrb	r2, [r5, #0]
 8005a5c:	1c6e      	adds	r6, r5, #1
 8005a5e:	3a30      	subs	r2, #48	; 0x30
 8005a60:	2a09      	cmp	r2, #9
 8005a62:	d94e      	bls.n	8005b02 <_svfiprintf_r+0x17a>
 8005a64:	2900      	cmp	r1, #0
 8005a66:	d111      	bne.n	8005a8c <_svfiprintf_r+0x104>
 8005a68:	e017      	b.n	8005a9a <_svfiprintf_r+0x112>
 8005a6a:	3501      	adds	r5, #1
 8005a6c:	e7b0      	b.n	80059d0 <_svfiprintf_r+0x48>
 8005a6e:	4b41      	ldr	r3, [pc, #260]	; (8005b74 <_svfiprintf_r+0x1ec>)
 8005a70:	6822      	ldr	r2, [r4, #0]
 8005a72:	1ac0      	subs	r0, r0, r3
 8005a74:	2301      	movs	r3, #1
 8005a76:	4083      	lsls	r3, r0
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	002e      	movs	r6, r5
 8005a7c:	6023      	str	r3, [r4, #0]
 8005a7e:	e7ce      	b.n	8005a1e <_svfiprintf_r+0x96>
 8005a80:	9b07      	ldr	r3, [sp, #28]
 8005a82:	1d19      	adds	r1, r3, #4
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	9107      	str	r1, [sp, #28]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	db01      	blt.n	8005a90 <_svfiprintf_r+0x108>
 8005a8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a8e:	e004      	b.n	8005a9a <_svfiprintf_r+0x112>
 8005a90:	425b      	negs	r3, r3
 8005a92:	60e3      	str	r3, [r4, #12]
 8005a94:	2302      	movs	r3, #2
 8005a96:	4313      	orrs	r3, r2
 8005a98:	6023      	str	r3, [r4, #0]
 8005a9a:	782b      	ldrb	r3, [r5, #0]
 8005a9c:	2b2e      	cmp	r3, #46	; 0x2e
 8005a9e:	d10a      	bne.n	8005ab6 <_svfiprintf_r+0x12e>
 8005aa0:	786b      	ldrb	r3, [r5, #1]
 8005aa2:	2b2a      	cmp	r3, #42	; 0x2a
 8005aa4:	d135      	bne.n	8005b12 <_svfiprintf_r+0x18a>
 8005aa6:	9b07      	ldr	r3, [sp, #28]
 8005aa8:	3502      	adds	r5, #2
 8005aaa:	1d1a      	adds	r2, r3, #4
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	9207      	str	r2, [sp, #28]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	db2b      	blt.n	8005b0c <_svfiprintf_r+0x184>
 8005ab4:	9309      	str	r3, [sp, #36]	; 0x24
 8005ab6:	4e30      	ldr	r6, [pc, #192]	; (8005b78 <_svfiprintf_r+0x1f0>)
 8005ab8:	2203      	movs	r2, #3
 8005aba:	0030      	movs	r0, r6
 8005abc:	7829      	ldrb	r1, [r5, #0]
 8005abe:	f001 fb57 	bl	8007170 <memchr>
 8005ac2:	2800      	cmp	r0, #0
 8005ac4:	d006      	beq.n	8005ad4 <_svfiprintf_r+0x14c>
 8005ac6:	2340      	movs	r3, #64	; 0x40
 8005ac8:	1b80      	subs	r0, r0, r6
 8005aca:	4083      	lsls	r3, r0
 8005acc:	6822      	ldr	r2, [r4, #0]
 8005ace:	3501      	adds	r5, #1
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	6023      	str	r3, [r4, #0]
 8005ad4:	7829      	ldrb	r1, [r5, #0]
 8005ad6:	2206      	movs	r2, #6
 8005ad8:	4828      	ldr	r0, [pc, #160]	; (8005b7c <_svfiprintf_r+0x1f4>)
 8005ada:	1c6e      	adds	r6, r5, #1
 8005adc:	7621      	strb	r1, [r4, #24]
 8005ade:	f001 fb47 	bl	8007170 <memchr>
 8005ae2:	2800      	cmp	r0, #0
 8005ae4:	d03c      	beq.n	8005b60 <_svfiprintf_r+0x1d8>
 8005ae6:	4b26      	ldr	r3, [pc, #152]	; (8005b80 <_svfiprintf_r+0x1f8>)
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d125      	bne.n	8005b38 <_svfiprintf_r+0x1b0>
 8005aec:	2207      	movs	r2, #7
 8005aee:	9b07      	ldr	r3, [sp, #28]
 8005af0:	3307      	adds	r3, #7
 8005af2:	4393      	bics	r3, r2
 8005af4:	3308      	adds	r3, #8
 8005af6:	9307      	str	r3, [sp, #28]
 8005af8:	6963      	ldr	r3, [r4, #20]
 8005afa:	9a04      	ldr	r2, [sp, #16]
 8005afc:	189b      	adds	r3, r3, r2
 8005afe:	6163      	str	r3, [r4, #20]
 8005b00:	e765      	b.n	80059ce <_svfiprintf_r+0x46>
 8005b02:	4343      	muls	r3, r0
 8005b04:	0035      	movs	r5, r6
 8005b06:	2101      	movs	r1, #1
 8005b08:	189b      	adds	r3, r3, r2
 8005b0a:	e7a6      	b.n	8005a5a <_svfiprintf_r+0xd2>
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	425b      	negs	r3, r3
 8005b10:	e7d0      	b.n	8005ab4 <_svfiprintf_r+0x12c>
 8005b12:	2300      	movs	r3, #0
 8005b14:	200a      	movs	r0, #10
 8005b16:	001a      	movs	r2, r3
 8005b18:	3501      	adds	r5, #1
 8005b1a:	6063      	str	r3, [r4, #4]
 8005b1c:	7829      	ldrb	r1, [r5, #0]
 8005b1e:	1c6e      	adds	r6, r5, #1
 8005b20:	3930      	subs	r1, #48	; 0x30
 8005b22:	2909      	cmp	r1, #9
 8005b24:	d903      	bls.n	8005b2e <_svfiprintf_r+0x1a6>
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d0c5      	beq.n	8005ab6 <_svfiprintf_r+0x12e>
 8005b2a:	9209      	str	r2, [sp, #36]	; 0x24
 8005b2c:	e7c3      	b.n	8005ab6 <_svfiprintf_r+0x12e>
 8005b2e:	4342      	muls	r2, r0
 8005b30:	0035      	movs	r5, r6
 8005b32:	2301      	movs	r3, #1
 8005b34:	1852      	adds	r2, r2, r1
 8005b36:	e7f1      	b.n	8005b1c <_svfiprintf_r+0x194>
 8005b38:	ab07      	add	r3, sp, #28
 8005b3a:	9300      	str	r3, [sp, #0]
 8005b3c:	003a      	movs	r2, r7
 8005b3e:	0021      	movs	r1, r4
 8005b40:	4b10      	ldr	r3, [pc, #64]	; (8005b84 <_svfiprintf_r+0x1fc>)
 8005b42:	9803      	ldr	r0, [sp, #12]
 8005b44:	e000      	b.n	8005b48 <_svfiprintf_r+0x1c0>
 8005b46:	bf00      	nop
 8005b48:	9004      	str	r0, [sp, #16]
 8005b4a:	9b04      	ldr	r3, [sp, #16]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	d1d3      	bne.n	8005af8 <_svfiprintf_r+0x170>
 8005b50:	89bb      	ldrh	r3, [r7, #12]
 8005b52:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005b54:	065b      	lsls	r3, r3, #25
 8005b56:	d400      	bmi.n	8005b5a <_svfiprintf_r+0x1d2>
 8005b58:	e72d      	b.n	80059b6 <_svfiprintf_r+0x2e>
 8005b5a:	2001      	movs	r0, #1
 8005b5c:	4240      	negs	r0, r0
 8005b5e:	e72a      	b.n	80059b6 <_svfiprintf_r+0x2e>
 8005b60:	ab07      	add	r3, sp, #28
 8005b62:	9300      	str	r3, [sp, #0]
 8005b64:	003a      	movs	r2, r7
 8005b66:	0021      	movs	r1, r4
 8005b68:	4b06      	ldr	r3, [pc, #24]	; (8005b84 <_svfiprintf_r+0x1fc>)
 8005b6a:	9803      	ldr	r0, [sp, #12]
 8005b6c:	f000 fbb8 	bl	80062e0 <_printf_i>
 8005b70:	e7ea      	b.n	8005b48 <_svfiprintf_r+0x1c0>
 8005b72:	46c0      	nop			; (mov r8, r8)
 8005b74:	0800763c 	.word	0x0800763c
 8005b78:	08007642 	.word	0x08007642
 8005b7c:	08007646 	.word	0x08007646
 8005b80:	00000000 	.word	0x00000000
 8005b84:	080058c5 	.word	0x080058c5

08005b88 <_sungetc_r>:
 8005b88:	b570      	push	{r4, r5, r6, lr}
 8005b8a:	0014      	movs	r4, r2
 8005b8c:	1c4b      	adds	r3, r1, #1
 8005b8e:	d103      	bne.n	8005b98 <_sungetc_r+0x10>
 8005b90:	2501      	movs	r5, #1
 8005b92:	426d      	negs	r5, r5
 8005b94:	0028      	movs	r0, r5
 8005b96:	bd70      	pop	{r4, r5, r6, pc}
 8005b98:	8993      	ldrh	r3, [r2, #12]
 8005b9a:	2220      	movs	r2, #32
 8005b9c:	4393      	bics	r3, r2
 8005b9e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005ba0:	81a3      	strh	r3, [r4, #12]
 8005ba2:	b2ce      	uxtb	r6, r1
 8005ba4:	6863      	ldr	r3, [r4, #4]
 8005ba6:	b2cd      	uxtb	r5, r1
 8005ba8:	2a00      	cmp	r2, #0
 8005baa:	d010      	beq.n	8005bce <_sungetc_r+0x46>
 8005bac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	dd07      	ble.n	8005bc2 <_sungetc_r+0x3a>
 8005bb2:	6823      	ldr	r3, [r4, #0]
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	6023      	str	r3, [r4, #0]
 8005bb8:	701e      	strb	r6, [r3, #0]
 8005bba:	6863      	ldr	r3, [r4, #4]
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	6063      	str	r3, [r4, #4]
 8005bc0:	e7e8      	b.n	8005b94 <_sungetc_r+0xc>
 8005bc2:	0021      	movs	r1, r4
 8005bc4:	f000 ff82 	bl	8006acc <__submore>
 8005bc8:	2800      	cmp	r0, #0
 8005bca:	d0f2      	beq.n	8005bb2 <_sungetc_r+0x2a>
 8005bcc:	e7e0      	b.n	8005b90 <_sungetc_r+0x8>
 8005bce:	6921      	ldr	r1, [r4, #16]
 8005bd0:	6822      	ldr	r2, [r4, #0]
 8005bd2:	2900      	cmp	r1, #0
 8005bd4:	d007      	beq.n	8005be6 <_sungetc_r+0x5e>
 8005bd6:	4291      	cmp	r1, r2
 8005bd8:	d205      	bcs.n	8005be6 <_sungetc_r+0x5e>
 8005bda:	1e51      	subs	r1, r2, #1
 8005bdc:	7808      	ldrb	r0, [r1, #0]
 8005bde:	42a8      	cmp	r0, r5
 8005be0:	d101      	bne.n	8005be6 <_sungetc_r+0x5e>
 8005be2:	6021      	str	r1, [r4, #0]
 8005be4:	e7ea      	b.n	8005bbc <_sungetc_r+0x34>
 8005be6:	6423      	str	r3, [r4, #64]	; 0x40
 8005be8:	0023      	movs	r3, r4
 8005bea:	3344      	adds	r3, #68	; 0x44
 8005bec:	6363      	str	r3, [r4, #52]	; 0x34
 8005bee:	2303      	movs	r3, #3
 8005bf0:	63a3      	str	r3, [r4, #56]	; 0x38
 8005bf2:	0023      	movs	r3, r4
 8005bf4:	3346      	adds	r3, #70	; 0x46
 8005bf6:	63e2      	str	r2, [r4, #60]	; 0x3c
 8005bf8:	701e      	strb	r6, [r3, #0]
 8005bfa:	6023      	str	r3, [r4, #0]
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e7de      	b.n	8005bbe <_sungetc_r+0x36>

08005c00 <__ssrefill_r>:
 8005c00:	b510      	push	{r4, lr}
 8005c02:	000c      	movs	r4, r1
 8005c04:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005c06:	2900      	cmp	r1, #0
 8005c08:	d00e      	beq.n	8005c28 <__ssrefill_r+0x28>
 8005c0a:	0023      	movs	r3, r4
 8005c0c:	3344      	adds	r3, #68	; 0x44
 8005c0e:	4299      	cmp	r1, r3
 8005c10:	d001      	beq.n	8005c16 <__ssrefill_r+0x16>
 8005c12:	f7ff fd75 	bl	8005700 <_free_r>
 8005c16:	2000      	movs	r0, #0
 8005c18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c1a:	6360      	str	r0, [r4, #52]	; 0x34
 8005c1c:	6063      	str	r3, [r4, #4]
 8005c1e:	4283      	cmp	r3, r0
 8005c20:	d002      	beq.n	8005c28 <__ssrefill_r+0x28>
 8005c22:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005c24:	6023      	str	r3, [r4, #0]
 8005c26:	bd10      	pop	{r4, pc}
 8005c28:	6923      	ldr	r3, [r4, #16]
 8005c2a:	2001      	movs	r0, #1
 8005c2c:	6023      	str	r3, [r4, #0]
 8005c2e:	2300      	movs	r3, #0
 8005c30:	89a2      	ldrh	r2, [r4, #12]
 8005c32:	6063      	str	r3, [r4, #4]
 8005c34:	3320      	adds	r3, #32
 8005c36:	4313      	orrs	r3, r2
 8005c38:	81a3      	strh	r3, [r4, #12]
 8005c3a:	4240      	negs	r0, r0
 8005c3c:	e7f3      	b.n	8005c26 <__ssrefill_r+0x26>
	...

08005c40 <__ssvfiscanf_r>:
 8005c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c42:	4cb8      	ldr	r4, [pc, #736]	; (8005f24 <__ssvfiscanf_r+0x2e4>)
 8005c44:	0006      	movs	r6, r0
 8005c46:	44a5      	add	sp, r4
 8005c48:	000c      	movs	r4, r1
 8005c4a:	2100      	movs	r1, #0
 8005c4c:	9146      	str	r1, [sp, #280]	; 0x118
 8005c4e:	9147      	str	r1, [sp, #284]	; 0x11c
 8005c50:	a903      	add	r1, sp, #12
 8005c52:	9148      	str	r1, [sp, #288]	; 0x120
 8005c54:	21be      	movs	r1, #190	; 0xbe
 8005c56:	48b4      	ldr	r0, [pc, #720]	; (8005f28 <__ssvfiscanf_r+0x2e8>)
 8005c58:	0049      	lsls	r1, r1, #1
 8005c5a:	ad43      	add	r5, sp, #268	; 0x10c
 8005c5c:	5068      	str	r0, [r5, r1]
 8005c5e:	25c0      	movs	r5, #192	; 0xc0
 8005c60:	49b2      	ldr	r1, [pc, #712]	; (8005f2c <__ssvfiscanf_r+0x2ec>)
 8005c62:	006d      	lsls	r5, r5, #1
 8005c64:	a843      	add	r0, sp, #268	; 0x10c
 8005c66:	5141      	str	r1, [r0, r5]
 8005c68:	9302      	str	r3, [sp, #8]
 8005c6a:	7813      	ldrb	r3, [r2, #0]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d100      	bne.n	8005c72 <__ssvfiscanf_r+0x32>
 8005c70:	e155      	b.n	8005f1e <__ssvfiscanf_r+0x2de>
 8005c72:	49af      	ldr	r1, [pc, #700]	; (8005f30 <__ssvfiscanf_r+0x2f0>)
 8005c74:	2508      	movs	r5, #8
 8005c76:	5cc8      	ldrb	r0, [r1, r3]
 8005c78:	2108      	movs	r1, #8
 8005c7a:	1c57      	adds	r7, r2, #1
 8005c7c:	4001      	ands	r1, r0
 8005c7e:	4228      	tst	r0, r5
 8005c80:	d020      	beq.n	8005cc4 <__ssvfiscanf_r+0x84>
 8005c82:	6863      	ldr	r3, [r4, #4]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	dd12      	ble.n	8005cae <__ssvfiscanf_r+0x6e>
 8005c88:	6823      	ldr	r3, [r4, #0]
 8005c8a:	49a9      	ldr	r1, [pc, #676]	; (8005f30 <__ssvfiscanf_r+0x2f0>)
 8005c8c:	781a      	ldrb	r2, [r3, #0]
 8005c8e:	5c8a      	ldrb	r2, [r1, r2]
 8005c90:	2108      	movs	r1, #8
 8005c92:	420a      	tst	r2, r1
 8005c94:	d101      	bne.n	8005c9a <__ssvfiscanf_r+0x5a>
 8005c96:	003a      	movs	r2, r7
 8005c98:	e7e7      	b.n	8005c6a <__ssvfiscanf_r+0x2a>
 8005c9a:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	9200      	str	r2, [sp, #0]
 8005ca0:	3201      	adds	r2, #1
 8005ca2:	9247      	str	r2, [sp, #284]	; 0x11c
 8005ca4:	6862      	ldr	r2, [r4, #4]
 8005ca6:	6023      	str	r3, [r4, #0]
 8005ca8:	3a01      	subs	r2, #1
 8005caa:	6062      	str	r2, [r4, #4]
 8005cac:	e7e9      	b.n	8005c82 <__ssvfiscanf_r+0x42>
 8005cae:	22c0      	movs	r2, #192	; 0xc0
 8005cb0:	ab43      	add	r3, sp, #268	; 0x10c
 8005cb2:	0052      	lsls	r2, r2, #1
 8005cb4:	589b      	ldr	r3, [r3, r2]
 8005cb6:	0021      	movs	r1, r4
 8005cb8:	0030      	movs	r0, r6
 8005cba:	9300      	str	r3, [sp, #0]
 8005cbc:	4798      	blx	r3
 8005cbe:	2800      	cmp	r0, #0
 8005cc0:	d0e2      	beq.n	8005c88 <__ssvfiscanf_r+0x48>
 8005cc2:	e7e8      	b.n	8005c96 <__ssvfiscanf_r+0x56>
 8005cc4:	001d      	movs	r5, r3
 8005cc6:	2b25      	cmp	r3, #37	; 0x25
 8005cc8:	d164      	bne.n	8005d94 <__ssvfiscanf_r+0x154>
 8005cca:	9145      	str	r1, [sp, #276]	; 0x114
 8005ccc:	9143      	str	r1, [sp, #268]	; 0x10c
 8005cce:	7853      	ldrb	r3, [r2, #1]
 8005cd0:	2b2a      	cmp	r3, #42	; 0x2a
 8005cd2:	d102      	bne.n	8005cda <__ssvfiscanf_r+0x9a>
 8005cd4:	3b1a      	subs	r3, #26
 8005cd6:	9343      	str	r3, [sp, #268]	; 0x10c
 8005cd8:	1c97      	adds	r7, r2, #2
 8005cda:	003d      	movs	r5, r7
 8005cdc:	220a      	movs	r2, #10
 8005cde:	7829      	ldrb	r1, [r5, #0]
 8005ce0:	1c6b      	adds	r3, r5, #1
 8005ce2:	9300      	str	r3, [sp, #0]
 8005ce4:	000b      	movs	r3, r1
 8005ce6:	3b30      	subs	r3, #48	; 0x30
 8005ce8:	2b09      	cmp	r3, #9
 8005cea:	d91f      	bls.n	8005d2c <__ssvfiscanf_r+0xec>
 8005cec:	4f91      	ldr	r7, [pc, #580]	; (8005f34 <__ssvfiscanf_r+0x2f4>)
 8005cee:	2203      	movs	r2, #3
 8005cf0:	0038      	movs	r0, r7
 8005cf2:	f001 fa3d 	bl	8007170 <memchr>
 8005cf6:	2800      	cmp	r0, #0
 8005cf8:	d007      	beq.n	8005d0a <__ssvfiscanf_r+0xca>
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	1bc0      	subs	r0, r0, r7
 8005cfe:	4083      	lsls	r3, r0
 8005d00:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8005d02:	9d00      	ldr	r5, [sp, #0]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	9201      	str	r2, [sp, #4]
 8005d08:	9343      	str	r3, [sp, #268]	; 0x10c
 8005d0a:	1c6f      	adds	r7, r5, #1
 8005d0c:	782d      	ldrb	r5, [r5, #0]
 8005d0e:	2d78      	cmp	r5, #120	; 0x78
 8005d10:	d807      	bhi.n	8005d22 <__ssvfiscanf_r+0xe2>
 8005d12:	2d57      	cmp	r5, #87	; 0x57
 8005d14:	d812      	bhi.n	8005d3c <__ssvfiscanf_r+0xfc>
 8005d16:	2d25      	cmp	r5, #37	; 0x25
 8005d18:	d03c      	beq.n	8005d94 <__ssvfiscanf_r+0x154>
 8005d1a:	d836      	bhi.n	8005d8a <__ssvfiscanf_r+0x14a>
 8005d1c:	2d00      	cmp	r5, #0
 8005d1e:	d100      	bne.n	8005d22 <__ssvfiscanf_r+0xe2>
 8005d20:	e0fa      	b.n	8005f18 <__ssvfiscanf_r+0x2d8>
 8005d22:	2303      	movs	r3, #3
 8005d24:	9349      	str	r3, [sp, #292]	; 0x124
 8005d26:	3307      	adds	r3, #7
 8005d28:	9344      	str	r3, [sp, #272]	; 0x110
 8005d2a:	e06d      	b.n	8005e08 <__ssvfiscanf_r+0x1c8>
 8005d2c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8005d2e:	9d00      	ldr	r5, [sp, #0]
 8005d30:	9301      	str	r3, [sp, #4]
 8005d32:	4353      	muls	r3, r2
 8005d34:	3b30      	subs	r3, #48	; 0x30
 8005d36:	185b      	adds	r3, r3, r1
 8005d38:	9345      	str	r3, [sp, #276]	; 0x114
 8005d3a:	e7d0      	b.n	8005cde <__ssvfiscanf_r+0x9e>
 8005d3c:	0028      	movs	r0, r5
 8005d3e:	3858      	subs	r0, #88	; 0x58
 8005d40:	2820      	cmp	r0, #32
 8005d42:	d8ee      	bhi.n	8005d22 <__ssvfiscanf_r+0xe2>
 8005d44:	f7fa f9e6 	bl	8000114 <__gnu_thumb1_case_shi>
 8005d48:	ffed0051 	.word	0xffed0051
 8005d4c:	0087ffed 	.word	0x0087ffed
 8005d50:	ffedffed 	.word	0xffedffed
 8005d54:	ffedffed 	.word	0xffedffed
 8005d58:	ffedffed 	.word	0xffedffed
 8005d5c:	0095ffed 	.word	0x0095ffed
 8005d60:	0024007d 	.word	0x0024007d
 8005d64:	00240024 	.word	0x00240024
 8005d68:	007fffed 	.word	0x007fffed
 8005d6c:	ffedffed 	.word	0xffedffed
 8005d70:	ffedffed 	.word	0xffedffed
 8005d74:	0083009f 	.word	0x0083009f
 8005d78:	ffed004b 	.word	0xffed004b
 8005d7c:	009dffed 	.word	0x009dffed
 8005d80:	007dffed 	.word	0x007dffed
 8005d84:	ffedffed 	.word	0xffedffed
 8005d88:	0051      	.short	0x0051
 8005d8a:	3d45      	subs	r5, #69	; 0x45
 8005d8c:	2d02      	cmp	r5, #2
 8005d8e:	d8c8      	bhi.n	8005d22 <__ssvfiscanf_r+0xe2>
 8005d90:	2305      	movs	r3, #5
 8005d92:	e06c      	b.n	8005e6e <__ssvfiscanf_r+0x22e>
 8005d94:	6863      	ldr	r3, [r4, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	dd0e      	ble.n	8005db8 <__ssvfiscanf_r+0x178>
 8005d9a:	6823      	ldr	r3, [r4, #0]
 8005d9c:	781a      	ldrb	r2, [r3, #0]
 8005d9e:	42aa      	cmp	r2, r5
 8005da0:	d000      	beq.n	8005da4 <__ssvfiscanf_r+0x164>
 8005da2:	e0bc      	b.n	8005f1e <__ssvfiscanf_r+0x2de>
 8005da4:	3301      	adds	r3, #1
 8005da6:	6862      	ldr	r2, [r4, #4]
 8005da8:	6023      	str	r3, [r4, #0]
 8005daa:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005dac:	3a01      	subs	r2, #1
 8005dae:	9300      	str	r3, [sp, #0]
 8005db0:	3301      	adds	r3, #1
 8005db2:	6062      	str	r2, [r4, #4]
 8005db4:	9347      	str	r3, [sp, #284]	; 0x11c
 8005db6:	e76e      	b.n	8005c96 <__ssvfiscanf_r+0x56>
 8005db8:	22c0      	movs	r2, #192	; 0xc0
 8005dba:	ab43      	add	r3, sp, #268	; 0x10c
 8005dbc:	0052      	lsls	r2, r2, #1
 8005dbe:	589b      	ldr	r3, [r3, r2]
 8005dc0:	0021      	movs	r1, r4
 8005dc2:	0030      	movs	r0, r6
 8005dc4:	9300      	str	r3, [sp, #0]
 8005dc6:	4798      	blx	r3
 8005dc8:	2800      	cmp	r0, #0
 8005dca:	d0e6      	beq.n	8005d9a <__ssvfiscanf_r+0x15a>
 8005dcc:	9846      	ldr	r0, [sp, #280]	; 0x118
 8005dce:	2800      	cmp	r0, #0
 8005dd0:	d000      	beq.n	8005dd4 <__ssvfiscanf_r+0x194>
 8005dd2:	e09d      	b.n	8005f10 <__ssvfiscanf_r+0x2d0>
 8005dd4:	3801      	subs	r0, #1
 8005dd6:	23a5      	movs	r3, #165	; 0xa5
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	449d      	add	sp, r3
 8005ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dde:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005de0:	9300      	str	r3, [sp, #0]
 8005de2:	2320      	movs	r3, #32
 8005de4:	9a00      	ldr	r2, [sp, #0]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	9343      	str	r3, [sp, #268]	; 0x10c
 8005dea:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005dec:	9300      	str	r3, [sp, #0]
 8005dee:	2380      	movs	r3, #128	; 0x80
 8005df0:	9a00      	ldr	r2, [sp, #0]
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	4313      	orrs	r3, r2
 8005df6:	9343      	str	r3, [sp, #268]	; 0x10c
 8005df8:	2310      	movs	r3, #16
 8005dfa:	9344      	str	r3, [sp, #272]	; 0x110
 8005dfc:	236e      	movs	r3, #110	; 0x6e
 8005dfe:	42ab      	cmp	r3, r5
 8005e00:	41ad      	sbcs	r5, r5
 8005e02:	426d      	negs	r5, r5
 8005e04:	3503      	adds	r5, #3
 8005e06:	9549      	str	r5, [sp, #292]	; 0x124
 8005e08:	6863      	ldr	r3, [r4, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	dd4a      	ble.n	8005ea4 <__ssvfiscanf_r+0x264>
 8005e0e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005e10:	9300      	str	r3, [sp, #0]
 8005e12:	065b      	lsls	r3, r3, #25
 8005e14:	d406      	bmi.n	8005e24 <__ssvfiscanf_r+0x1e4>
 8005e16:	6823      	ldr	r3, [r4, #0]
 8005e18:	4945      	ldr	r1, [pc, #276]	; (8005f30 <__ssvfiscanf_r+0x2f0>)
 8005e1a:	781a      	ldrb	r2, [r3, #0]
 8005e1c:	5c8a      	ldrb	r2, [r1, r2]
 8005e1e:	2108      	movs	r1, #8
 8005e20:	420a      	tst	r2, r1
 8005e22:	d14a      	bne.n	8005eba <__ssvfiscanf_r+0x27a>
 8005e24:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	dc5e      	bgt.n	8005ee8 <__ssvfiscanf_r+0x2a8>
 8005e2a:	0022      	movs	r2, r4
 8005e2c:	0030      	movs	r0, r6
 8005e2e:	ab02      	add	r3, sp, #8
 8005e30:	a943      	add	r1, sp, #268	; 0x10c
 8005e32:	f000 fb67 	bl	8006504 <_scanf_chars>
 8005e36:	2801      	cmp	r0, #1
 8005e38:	d071      	beq.n	8005f1e <__ssvfiscanf_r+0x2de>
 8005e3a:	2802      	cmp	r0, #2
 8005e3c:	d000      	beq.n	8005e40 <__ssvfiscanf_r+0x200>
 8005e3e:	e72a      	b.n	8005c96 <__ssvfiscanf_r+0x56>
 8005e40:	e7c4      	b.n	8005dcc <__ssvfiscanf_r+0x18c>
 8005e42:	230a      	movs	r3, #10
 8005e44:	e7d9      	b.n	8005dfa <__ssvfiscanf_r+0x1ba>
 8005e46:	2300      	movs	r3, #0
 8005e48:	2503      	movs	r5, #3
 8005e4a:	9344      	str	r3, [sp, #272]	; 0x110
 8005e4c:	e7db      	b.n	8005e06 <__ssvfiscanf_r+0x1c6>
 8005e4e:	2308      	movs	r3, #8
 8005e50:	2504      	movs	r5, #4
 8005e52:	9344      	str	r3, [sp, #272]	; 0x110
 8005e54:	e7d7      	b.n	8005e06 <__ssvfiscanf_r+0x1c6>
 8005e56:	0039      	movs	r1, r7
 8005e58:	a803      	add	r0, sp, #12
 8005e5a:	f000 fcdb 	bl	8006814 <__sccl>
 8005e5e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005e60:	0007      	movs	r7, r0
 8005e62:	9300      	str	r3, [sp, #0]
 8005e64:	2340      	movs	r3, #64	; 0x40
 8005e66:	9a00      	ldr	r2, [sp, #0]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	9343      	str	r3, [sp, #268]	; 0x10c
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	9349      	str	r3, [sp, #292]	; 0x124
 8005e70:	e7ca      	b.n	8005e08 <__ssvfiscanf_r+0x1c8>
 8005e72:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005e74:	9300      	str	r3, [sp, #0]
 8005e76:	2340      	movs	r3, #64	; 0x40
 8005e78:	9a00      	ldr	r2, [sp, #0]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	9343      	str	r3, [sp, #268]	; 0x10c
 8005e7e:	2300      	movs	r3, #0
 8005e80:	e7f5      	b.n	8005e6e <__ssvfiscanf_r+0x22e>
 8005e82:	2302      	movs	r3, #2
 8005e84:	e7f3      	b.n	8005e6e <__ssvfiscanf_r+0x22e>
 8005e86:	9843      	ldr	r0, [sp, #268]	; 0x10c
 8005e88:	06c3      	lsls	r3, r0, #27
 8005e8a:	d500      	bpl.n	8005e8e <__ssvfiscanf_r+0x24e>
 8005e8c:	e703      	b.n	8005c96 <__ssvfiscanf_r+0x56>
 8005e8e:	9b02      	ldr	r3, [sp, #8]
 8005e90:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8005e92:	1d19      	adds	r1, r3, #4
 8005e94:	9102      	str	r1, [sp, #8]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	07c5      	lsls	r5, r0, #31
 8005e9a:	d501      	bpl.n	8005ea0 <__ssvfiscanf_r+0x260>
 8005e9c:	801a      	strh	r2, [r3, #0]
 8005e9e:	e6fa      	b.n	8005c96 <__ssvfiscanf_r+0x56>
 8005ea0:	601a      	str	r2, [r3, #0]
 8005ea2:	e6f8      	b.n	8005c96 <__ssvfiscanf_r+0x56>
 8005ea4:	22c0      	movs	r2, #192	; 0xc0
 8005ea6:	ab43      	add	r3, sp, #268	; 0x10c
 8005ea8:	0052      	lsls	r2, r2, #1
 8005eaa:	589b      	ldr	r3, [r3, r2]
 8005eac:	0021      	movs	r1, r4
 8005eae:	0030      	movs	r0, r6
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	4798      	blx	r3
 8005eb4:	2800      	cmp	r0, #0
 8005eb6:	d0aa      	beq.n	8005e0e <__ssvfiscanf_r+0x1ce>
 8005eb8:	e788      	b.n	8005dcc <__ssvfiscanf_r+0x18c>
 8005eba:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8005ebc:	9200      	str	r2, [sp, #0]
 8005ebe:	3201      	adds	r2, #1
 8005ec0:	9247      	str	r2, [sp, #284]	; 0x11c
 8005ec2:	6862      	ldr	r2, [r4, #4]
 8005ec4:	3a01      	subs	r2, #1
 8005ec6:	6062      	str	r2, [r4, #4]
 8005ec8:	2a00      	cmp	r2, #0
 8005eca:	dd02      	ble.n	8005ed2 <__ssvfiscanf_r+0x292>
 8005ecc:	3301      	adds	r3, #1
 8005ece:	6023      	str	r3, [r4, #0]
 8005ed0:	e7a1      	b.n	8005e16 <__ssvfiscanf_r+0x1d6>
 8005ed2:	22c0      	movs	r2, #192	; 0xc0
 8005ed4:	ab43      	add	r3, sp, #268	; 0x10c
 8005ed6:	0052      	lsls	r2, r2, #1
 8005ed8:	589b      	ldr	r3, [r3, r2]
 8005eda:	0021      	movs	r1, r4
 8005edc:	0030      	movs	r0, r6
 8005ede:	9300      	str	r3, [sp, #0]
 8005ee0:	4798      	blx	r3
 8005ee2:	2800      	cmp	r0, #0
 8005ee4:	d097      	beq.n	8005e16 <__ssvfiscanf_r+0x1d6>
 8005ee6:	e771      	b.n	8005dcc <__ssvfiscanf_r+0x18c>
 8005ee8:	2b04      	cmp	r3, #4
 8005eea:	dc06      	bgt.n	8005efa <__ssvfiscanf_r+0x2ba>
 8005eec:	0022      	movs	r2, r4
 8005eee:	0030      	movs	r0, r6
 8005ef0:	ab02      	add	r3, sp, #8
 8005ef2:	a943      	add	r1, sp, #268	; 0x10c
 8005ef4:	f000 fb64 	bl	80065c0 <_scanf_i>
 8005ef8:	e79d      	b.n	8005e36 <__ssvfiscanf_r+0x1f6>
 8005efa:	4b0f      	ldr	r3, [pc, #60]	; (8005f38 <__ssvfiscanf_r+0x2f8>)
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d100      	bne.n	8005f02 <__ssvfiscanf_r+0x2c2>
 8005f00:	e6c9      	b.n	8005c96 <__ssvfiscanf_r+0x56>
 8005f02:	0022      	movs	r2, r4
 8005f04:	0030      	movs	r0, r6
 8005f06:	ab02      	add	r3, sp, #8
 8005f08:	a943      	add	r1, sp, #268	; 0x10c
 8005f0a:	e000      	b.n	8005f0e <__ssvfiscanf_r+0x2ce>
 8005f0c:	bf00      	nop
 8005f0e:	e792      	b.n	8005e36 <__ssvfiscanf_r+0x1f6>
 8005f10:	89a3      	ldrh	r3, [r4, #12]
 8005f12:	065b      	lsls	r3, r3, #25
 8005f14:	d400      	bmi.n	8005f18 <__ssvfiscanf_r+0x2d8>
 8005f16:	e75e      	b.n	8005dd6 <__ssvfiscanf_r+0x196>
 8005f18:	2001      	movs	r0, #1
 8005f1a:	4240      	negs	r0, r0
 8005f1c:	e75b      	b.n	8005dd6 <__ssvfiscanf_r+0x196>
 8005f1e:	9846      	ldr	r0, [sp, #280]	; 0x118
 8005f20:	e759      	b.n	8005dd6 <__ssvfiscanf_r+0x196>
 8005f22:	46c0      	nop			; (mov r8, r8)
 8005f24:	fffffd6c 	.word	0xfffffd6c
 8005f28:	08005b89 	.word	0x08005b89
 8005f2c:	08005c01 	.word	0x08005c01
 8005f30:	0800768b 	.word	0x0800768b
 8005f34:	08007642 	.word	0x08007642
 8005f38:	00000000 	.word	0x00000000

08005f3c <__sfputc_r>:
 8005f3c:	6893      	ldr	r3, [r2, #8]
 8005f3e:	b510      	push	{r4, lr}
 8005f40:	3b01      	subs	r3, #1
 8005f42:	6093      	str	r3, [r2, #8]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	da04      	bge.n	8005f52 <__sfputc_r+0x16>
 8005f48:	6994      	ldr	r4, [r2, #24]
 8005f4a:	42a3      	cmp	r3, r4
 8005f4c:	db07      	blt.n	8005f5e <__sfputc_r+0x22>
 8005f4e:	290a      	cmp	r1, #10
 8005f50:	d005      	beq.n	8005f5e <__sfputc_r+0x22>
 8005f52:	6813      	ldr	r3, [r2, #0]
 8005f54:	1c58      	adds	r0, r3, #1
 8005f56:	6010      	str	r0, [r2, #0]
 8005f58:	7019      	strb	r1, [r3, #0]
 8005f5a:	0008      	movs	r0, r1
 8005f5c:	bd10      	pop	{r4, pc}
 8005f5e:	f000 fdf3 	bl	8006b48 <__swbuf_r>
 8005f62:	0001      	movs	r1, r0
 8005f64:	e7f9      	b.n	8005f5a <__sfputc_r+0x1e>

08005f66 <__sfputs_r>:
 8005f66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f68:	0006      	movs	r6, r0
 8005f6a:	000f      	movs	r7, r1
 8005f6c:	0014      	movs	r4, r2
 8005f6e:	18d5      	adds	r5, r2, r3
 8005f70:	42ac      	cmp	r4, r5
 8005f72:	d101      	bne.n	8005f78 <__sfputs_r+0x12>
 8005f74:	2000      	movs	r0, #0
 8005f76:	e007      	b.n	8005f88 <__sfputs_r+0x22>
 8005f78:	7821      	ldrb	r1, [r4, #0]
 8005f7a:	003a      	movs	r2, r7
 8005f7c:	0030      	movs	r0, r6
 8005f7e:	f7ff ffdd 	bl	8005f3c <__sfputc_r>
 8005f82:	3401      	adds	r4, #1
 8005f84:	1c43      	adds	r3, r0, #1
 8005f86:	d1f3      	bne.n	8005f70 <__sfputs_r+0xa>
 8005f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005f8c <_vfiprintf_r>:
 8005f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f8e:	b0a1      	sub	sp, #132	; 0x84
 8005f90:	0006      	movs	r6, r0
 8005f92:	000c      	movs	r4, r1
 8005f94:	001f      	movs	r7, r3
 8005f96:	9203      	str	r2, [sp, #12]
 8005f98:	2800      	cmp	r0, #0
 8005f9a:	d004      	beq.n	8005fa6 <_vfiprintf_r+0x1a>
 8005f9c:	6983      	ldr	r3, [r0, #24]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d101      	bne.n	8005fa6 <_vfiprintf_r+0x1a>
 8005fa2:	f000 ffd5 	bl	8006f50 <__sinit>
 8005fa6:	4b8e      	ldr	r3, [pc, #568]	; (80061e0 <_vfiprintf_r+0x254>)
 8005fa8:	429c      	cmp	r4, r3
 8005faa:	d11c      	bne.n	8005fe6 <_vfiprintf_r+0x5a>
 8005fac:	6874      	ldr	r4, [r6, #4]
 8005fae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005fb0:	07db      	lsls	r3, r3, #31
 8005fb2:	d405      	bmi.n	8005fc0 <_vfiprintf_r+0x34>
 8005fb4:	89a3      	ldrh	r3, [r4, #12]
 8005fb6:	059b      	lsls	r3, r3, #22
 8005fb8:	d402      	bmi.n	8005fc0 <_vfiprintf_r+0x34>
 8005fba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fbc:	f001 f869 	bl	8007092 <__retarget_lock_acquire_recursive>
 8005fc0:	89a3      	ldrh	r3, [r4, #12]
 8005fc2:	071b      	lsls	r3, r3, #28
 8005fc4:	d502      	bpl.n	8005fcc <_vfiprintf_r+0x40>
 8005fc6:	6923      	ldr	r3, [r4, #16]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d11d      	bne.n	8006008 <_vfiprintf_r+0x7c>
 8005fcc:	0021      	movs	r1, r4
 8005fce:	0030      	movs	r0, r6
 8005fd0:	f000 fe10 	bl	8006bf4 <__swsetup_r>
 8005fd4:	2800      	cmp	r0, #0
 8005fd6:	d017      	beq.n	8006008 <_vfiprintf_r+0x7c>
 8005fd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005fda:	07db      	lsls	r3, r3, #31
 8005fdc:	d50d      	bpl.n	8005ffa <_vfiprintf_r+0x6e>
 8005fde:	2001      	movs	r0, #1
 8005fe0:	4240      	negs	r0, r0
 8005fe2:	b021      	add	sp, #132	; 0x84
 8005fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fe6:	4b7f      	ldr	r3, [pc, #508]	; (80061e4 <_vfiprintf_r+0x258>)
 8005fe8:	429c      	cmp	r4, r3
 8005fea:	d101      	bne.n	8005ff0 <_vfiprintf_r+0x64>
 8005fec:	68b4      	ldr	r4, [r6, #8]
 8005fee:	e7de      	b.n	8005fae <_vfiprintf_r+0x22>
 8005ff0:	4b7d      	ldr	r3, [pc, #500]	; (80061e8 <_vfiprintf_r+0x25c>)
 8005ff2:	429c      	cmp	r4, r3
 8005ff4:	d1db      	bne.n	8005fae <_vfiprintf_r+0x22>
 8005ff6:	68f4      	ldr	r4, [r6, #12]
 8005ff8:	e7d9      	b.n	8005fae <_vfiprintf_r+0x22>
 8005ffa:	89a3      	ldrh	r3, [r4, #12]
 8005ffc:	059b      	lsls	r3, r3, #22
 8005ffe:	d4ee      	bmi.n	8005fde <_vfiprintf_r+0x52>
 8006000:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006002:	f001 f847 	bl	8007094 <__retarget_lock_release_recursive>
 8006006:	e7ea      	b.n	8005fde <_vfiprintf_r+0x52>
 8006008:	2300      	movs	r3, #0
 800600a:	ad08      	add	r5, sp, #32
 800600c:	616b      	str	r3, [r5, #20]
 800600e:	3320      	adds	r3, #32
 8006010:	766b      	strb	r3, [r5, #25]
 8006012:	3310      	adds	r3, #16
 8006014:	76ab      	strb	r3, [r5, #26]
 8006016:	9707      	str	r7, [sp, #28]
 8006018:	9f03      	ldr	r7, [sp, #12]
 800601a:	783b      	ldrb	r3, [r7, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d001      	beq.n	8006024 <_vfiprintf_r+0x98>
 8006020:	2b25      	cmp	r3, #37	; 0x25
 8006022:	d14e      	bne.n	80060c2 <_vfiprintf_r+0x136>
 8006024:	9b03      	ldr	r3, [sp, #12]
 8006026:	1afb      	subs	r3, r7, r3
 8006028:	9305      	str	r3, [sp, #20]
 800602a:	9b03      	ldr	r3, [sp, #12]
 800602c:	429f      	cmp	r7, r3
 800602e:	d00d      	beq.n	800604c <_vfiprintf_r+0xc0>
 8006030:	9b05      	ldr	r3, [sp, #20]
 8006032:	0021      	movs	r1, r4
 8006034:	0030      	movs	r0, r6
 8006036:	9a03      	ldr	r2, [sp, #12]
 8006038:	f7ff ff95 	bl	8005f66 <__sfputs_r>
 800603c:	1c43      	adds	r3, r0, #1
 800603e:	d100      	bne.n	8006042 <_vfiprintf_r+0xb6>
 8006040:	e0b5      	b.n	80061ae <_vfiprintf_r+0x222>
 8006042:	696a      	ldr	r2, [r5, #20]
 8006044:	9b05      	ldr	r3, [sp, #20]
 8006046:	4694      	mov	ip, r2
 8006048:	4463      	add	r3, ip
 800604a:	616b      	str	r3, [r5, #20]
 800604c:	783b      	ldrb	r3, [r7, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d100      	bne.n	8006054 <_vfiprintf_r+0xc8>
 8006052:	e0ac      	b.n	80061ae <_vfiprintf_r+0x222>
 8006054:	2201      	movs	r2, #1
 8006056:	1c7b      	adds	r3, r7, #1
 8006058:	9303      	str	r3, [sp, #12]
 800605a:	2300      	movs	r3, #0
 800605c:	4252      	negs	r2, r2
 800605e:	606a      	str	r2, [r5, #4]
 8006060:	a904      	add	r1, sp, #16
 8006062:	3254      	adds	r2, #84	; 0x54
 8006064:	1852      	adds	r2, r2, r1
 8006066:	602b      	str	r3, [r5, #0]
 8006068:	60eb      	str	r3, [r5, #12]
 800606a:	60ab      	str	r3, [r5, #8]
 800606c:	7013      	strb	r3, [r2, #0]
 800606e:	65ab      	str	r3, [r5, #88]	; 0x58
 8006070:	9b03      	ldr	r3, [sp, #12]
 8006072:	2205      	movs	r2, #5
 8006074:	7819      	ldrb	r1, [r3, #0]
 8006076:	485d      	ldr	r0, [pc, #372]	; (80061ec <_vfiprintf_r+0x260>)
 8006078:	f001 f87a 	bl	8007170 <memchr>
 800607c:	9b03      	ldr	r3, [sp, #12]
 800607e:	1c5f      	adds	r7, r3, #1
 8006080:	2800      	cmp	r0, #0
 8006082:	d120      	bne.n	80060c6 <_vfiprintf_r+0x13a>
 8006084:	682a      	ldr	r2, [r5, #0]
 8006086:	06d3      	lsls	r3, r2, #27
 8006088:	d504      	bpl.n	8006094 <_vfiprintf_r+0x108>
 800608a:	2353      	movs	r3, #83	; 0x53
 800608c:	a904      	add	r1, sp, #16
 800608e:	185b      	adds	r3, r3, r1
 8006090:	2120      	movs	r1, #32
 8006092:	7019      	strb	r1, [r3, #0]
 8006094:	0713      	lsls	r3, r2, #28
 8006096:	d504      	bpl.n	80060a2 <_vfiprintf_r+0x116>
 8006098:	2353      	movs	r3, #83	; 0x53
 800609a:	a904      	add	r1, sp, #16
 800609c:	185b      	adds	r3, r3, r1
 800609e:	212b      	movs	r1, #43	; 0x2b
 80060a0:	7019      	strb	r1, [r3, #0]
 80060a2:	9b03      	ldr	r3, [sp, #12]
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	2b2a      	cmp	r3, #42	; 0x2a
 80060a8:	d016      	beq.n	80060d8 <_vfiprintf_r+0x14c>
 80060aa:	2100      	movs	r1, #0
 80060ac:	68eb      	ldr	r3, [r5, #12]
 80060ae:	9f03      	ldr	r7, [sp, #12]
 80060b0:	783a      	ldrb	r2, [r7, #0]
 80060b2:	1c78      	adds	r0, r7, #1
 80060b4:	3a30      	subs	r2, #48	; 0x30
 80060b6:	4684      	mov	ip, r0
 80060b8:	2a09      	cmp	r2, #9
 80060ba:	d94f      	bls.n	800615c <_vfiprintf_r+0x1d0>
 80060bc:	2900      	cmp	r1, #0
 80060be:	d111      	bne.n	80060e4 <_vfiprintf_r+0x158>
 80060c0:	e017      	b.n	80060f2 <_vfiprintf_r+0x166>
 80060c2:	3701      	adds	r7, #1
 80060c4:	e7a9      	b.n	800601a <_vfiprintf_r+0x8e>
 80060c6:	4b49      	ldr	r3, [pc, #292]	; (80061ec <_vfiprintf_r+0x260>)
 80060c8:	682a      	ldr	r2, [r5, #0]
 80060ca:	1ac0      	subs	r0, r0, r3
 80060cc:	2301      	movs	r3, #1
 80060ce:	4083      	lsls	r3, r0
 80060d0:	4313      	orrs	r3, r2
 80060d2:	602b      	str	r3, [r5, #0]
 80060d4:	9703      	str	r7, [sp, #12]
 80060d6:	e7cb      	b.n	8006070 <_vfiprintf_r+0xe4>
 80060d8:	9b07      	ldr	r3, [sp, #28]
 80060da:	1d19      	adds	r1, r3, #4
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	9107      	str	r1, [sp, #28]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	db01      	blt.n	80060e8 <_vfiprintf_r+0x15c>
 80060e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80060e6:	e004      	b.n	80060f2 <_vfiprintf_r+0x166>
 80060e8:	425b      	negs	r3, r3
 80060ea:	60eb      	str	r3, [r5, #12]
 80060ec:	2302      	movs	r3, #2
 80060ee:	4313      	orrs	r3, r2
 80060f0:	602b      	str	r3, [r5, #0]
 80060f2:	783b      	ldrb	r3, [r7, #0]
 80060f4:	2b2e      	cmp	r3, #46	; 0x2e
 80060f6:	d10a      	bne.n	800610e <_vfiprintf_r+0x182>
 80060f8:	787b      	ldrb	r3, [r7, #1]
 80060fa:	2b2a      	cmp	r3, #42	; 0x2a
 80060fc:	d137      	bne.n	800616e <_vfiprintf_r+0x1e2>
 80060fe:	9b07      	ldr	r3, [sp, #28]
 8006100:	3702      	adds	r7, #2
 8006102:	1d1a      	adds	r2, r3, #4
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	9207      	str	r2, [sp, #28]
 8006108:	2b00      	cmp	r3, #0
 800610a:	db2d      	blt.n	8006168 <_vfiprintf_r+0x1dc>
 800610c:	9309      	str	r3, [sp, #36]	; 0x24
 800610e:	2203      	movs	r2, #3
 8006110:	7839      	ldrb	r1, [r7, #0]
 8006112:	4837      	ldr	r0, [pc, #220]	; (80061f0 <_vfiprintf_r+0x264>)
 8006114:	f001 f82c 	bl	8007170 <memchr>
 8006118:	2800      	cmp	r0, #0
 800611a:	d007      	beq.n	800612c <_vfiprintf_r+0x1a0>
 800611c:	4b34      	ldr	r3, [pc, #208]	; (80061f0 <_vfiprintf_r+0x264>)
 800611e:	682a      	ldr	r2, [r5, #0]
 8006120:	1ac0      	subs	r0, r0, r3
 8006122:	2340      	movs	r3, #64	; 0x40
 8006124:	4083      	lsls	r3, r0
 8006126:	4313      	orrs	r3, r2
 8006128:	3701      	adds	r7, #1
 800612a:	602b      	str	r3, [r5, #0]
 800612c:	7839      	ldrb	r1, [r7, #0]
 800612e:	1c7b      	adds	r3, r7, #1
 8006130:	2206      	movs	r2, #6
 8006132:	4830      	ldr	r0, [pc, #192]	; (80061f4 <_vfiprintf_r+0x268>)
 8006134:	9303      	str	r3, [sp, #12]
 8006136:	7629      	strb	r1, [r5, #24]
 8006138:	f001 f81a 	bl	8007170 <memchr>
 800613c:	2800      	cmp	r0, #0
 800613e:	d045      	beq.n	80061cc <_vfiprintf_r+0x240>
 8006140:	4b2d      	ldr	r3, [pc, #180]	; (80061f8 <_vfiprintf_r+0x26c>)
 8006142:	2b00      	cmp	r3, #0
 8006144:	d127      	bne.n	8006196 <_vfiprintf_r+0x20a>
 8006146:	2207      	movs	r2, #7
 8006148:	9b07      	ldr	r3, [sp, #28]
 800614a:	3307      	adds	r3, #7
 800614c:	4393      	bics	r3, r2
 800614e:	3308      	adds	r3, #8
 8006150:	9307      	str	r3, [sp, #28]
 8006152:	696b      	ldr	r3, [r5, #20]
 8006154:	9a04      	ldr	r2, [sp, #16]
 8006156:	189b      	adds	r3, r3, r2
 8006158:	616b      	str	r3, [r5, #20]
 800615a:	e75d      	b.n	8006018 <_vfiprintf_r+0x8c>
 800615c:	210a      	movs	r1, #10
 800615e:	434b      	muls	r3, r1
 8006160:	4667      	mov	r7, ip
 8006162:	189b      	adds	r3, r3, r2
 8006164:	3909      	subs	r1, #9
 8006166:	e7a3      	b.n	80060b0 <_vfiprintf_r+0x124>
 8006168:	2301      	movs	r3, #1
 800616a:	425b      	negs	r3, r3
 800616c:	e7ce      	b.n	800610c <_vfiprintf_r+0x180>
 800616e:	2300      	movs	r3, #0
 8006170:	001a      	movs	r2, r3
 8006172:	3701      	adds	r7, #1
 8006174:	606b      	str	r3, [r5, #4]
 8006176:	7839      	ldrb	r1, [r7, #0]
 8006178:	1c78      	adds	r0, r7, #1
 800617a:	3930      	subs	r1, #48	; 0x30
 800617c:	4684      	mov	ip, r0
 800617e:	2909      	cmp	r1, #9
 8006180:	d903      	bls.n	800618a <_vfiprintf_r+0x1fe>
 8006182:	2b00      	cmp	r3, #0
 8006184:	d0c3      	beq.n	800610e <_vfiprintf_r+0x182>
 8006186:	9209      	str	r2, [sp, #36]	; 0x24
 8006188:	e7c1      	b.n	800610e <_vfiprintf_r+0x182>
 800618a:	230a      	movs	r3, #10
 800618c:	435a      	muls	r2, r3
 800618e:	4667      	mov	r7, ip
 8006190:	1852      	adds	r2, r2, r1
 8006192:	3b09      	subs	r3, #9
 8006194:	e7ef      	b.n	8006176 <_vfiprintf_r+0x1ea>
 8006196:	ab07      	add	r3, sp, #28
 8006198:	9300      	str	r3, [sp, #0]
 800619a:	0022      	movs	r2, r4
 800619c:	0029      	movs	r1, r5
 800619e:	0030      	movs	r0, r6
 80061a0:	4b16      	ldr	r3, [pc, #88]	; (80061fc <_vfiprintf_r+0x270>)
 80061a2:	e000      	b.n	80061a6 <_vfiprintf_r+0x21a>
 80061a4:	bf00      	nop
 80061a6:	9004      	str	r0, [sp, #16]
 80061a8:	9b04      	ldr	r3, [sp, #16]
 80061aa:	3301      	adds	r3, #1
 80061ac:	d1d1      	bne.n	8006152 <_vfiprintf_r+0x1c6>
 80061ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061b0:	07db      	lsls	r3, r3, #31
 80061b2:	d405      	bmi.n	80061c0 <_vfiprintf_r+0x234>
 80061b4:	89a3      	ldrh	r3, [r4, #12]
 80061b6:	059b      	lsls	r3, r3, #22
 80061b8:	d402      	bmi.n	80061c0 <_vfiprintf_r+0x234>
 80061ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061bc:	f000 ff6a 	bl	8007094 <__retarget_lock_release_recursive>
 80061c0:	89a3      	ldrh	r3, [r4, #12]
 80061c2:	065b      	lsls	r3, r3, #25
 80061c4:	d500      	bpl.n	80061c8 <_vfiprintf_r+0x23c>
 80061c6:	e70a      	b.n	8005fde <_vfiprintf_r+0x52>
 80061c8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80061ca:	e70a      	b.n	8005fe2 <_vfiprintf_r+0x56>
 80061cc:	ab07      	add	r3, sp, #28
 80061ce:	9300      	str	r3, [sp, #0]
 80061d0:	0022      	movs	r2, r4
 80061d2:	0029      	movs	r1, r5
 80061d4:	0030      	movs	r0, r6
 80061d6:	4b09      	ldr	r3, [pc, #36]	; (80061fc <_vfiprintf_r+0x270>)
 80061d8:	f000 f882 	bl	80062e0 <_printf_i>
 80061dc:	e7e3      	b.n	80061a6 <_vfiprintf_r+0x21a>
 80061de:	46c0      	nop			; (mov r8, r8)
 80061e0:	080077ac 	.word	0x080077ac
 80061e4:	080077cc 	.word	0x080077cc
 80061e8:	0800778c 	.word	0x0800778c
 80061ec:	0800763c 	.word	0x0800763c
 80061f0:	08007642 	.word	0x08007642
 80061f4:	08007646 	.word	0x08007646
 80061f8:	00000000 	.word	0x00000000
 80061fc:	08005f67 	.word	0x08005f67

08006200 <_printf_common>:
 8006200:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006202:	0015      	movs	r5, r2
 8006204:	9301      	str	r3, [sp, #4]
 8006206:	688a      	ldr	r2, [r1, #8]
 8006208:	690b      	ldr	r3, [r1, #16]
 800620a:	000c      	movs	r4, r1
 800620c:	9000      	str	r0, [sp, #0]
 800620e:	4293      	cmp	r3, r2
 8006210:	da00      	bge.n	8006214 <_printf_common+0x14>
 8006212:	0013      	movs	r3, r2
 8006214:	0022      	movs	r2, r4
 8006216:	602b      	str	r3, [r5, #0]
 8006218:	3243      	adds	r2, #67	; 0x43
 800621a:	7812      	ldrb	r2, [r2, #0]
 800621c:	2a00      	cmp	r2, #0
 800621e:	d001      	beq.n	8006224 <_printf_common+0x24>
 8006220:	3301      	adds	r3, #1
 8006222:	602b      	str	r3, [r5, #0]
 8006224:	6823      	ldr	r3, [r4, #0]
 8006226:	069b      	lsls	r3, r3, #26
 8006228:	d502      	bpl.n	8006230 <_printf_common+0x30>
 800622a:	682b      	ldr	r3, [r5, #0]
 800622c:	3302      	adds	r3, #2
 800622e:	602b      	str	r3, [r5, #0]
 8006230:	6822      	ldr	r2, [r4, #0]
 8006232:	2306      	movs	r3, #6
 8006234:	0017      	movs	r7, r2
 8006236:	401f      	ands	r7, r3
 8006238:	421a      	tst	r2, r3
 800623a:	d027      	beq.n	800628c <_printf_common+0x8c>
 800623c:	0023      	movs	r3, r4
 800623e:	3343      	adds	r3, #67	; 0x43
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	1e5a      	subs	r2, r3, #1
 8006244:	4193      	sbcs	r3, r2
 8006246:	6822      	ldr	r2, [r4, #0]
 8006248:	0692      	lsls	r2, r2, #26
 800624a:	d430      	bmi.n	80062ae <_printf_common+0xae>
 800624c:	0022      	movs	r2, r4
 800624e:	9901      	ldr	r1, [sp, #4]
 8006250:	9800      	ldr	r0, [sp, #0]
 8006252:	9e08      	ldr	r6, [sp, #32]
 8006254:	3243      	adds	r2, #67	; 0x43
 8006256:	47b0      	blx	r6
 8006258:	1c43      	adds	r3, r0, #1
 800625a:	d025      	beq.n	80062a8 <_printf_common+0xa8>
 800625c:	2306      	movs	r3, #6
 800625e:	6820      	ldr	r0, [r4, #0]
 8006260:	682a      	ldr	r2, [r5, #0]
 8006262:	68e1      	ldr	r1, [r4, #12]
 8006264:	2500      	movs	r5, #0
 8006266:	4003      	ands	r3, r0
 8006268:	2b04      	cmp	r3, #4
 800626a:	d103      	bne.n	8006274 <_printf_common+0x74>
 800626c:	1a8d      	subs	r5, r1, r2
 800626e:	43eb      	mvns	r3, r5
 8006270:	17db      	asrs	r3, r3, #31
 8006272:	401d      	ands	r5, r3
 8006274:	68a3      	ldr	r3, [r4, #8]
 8006276:	6922      	ldr	r2, [r4, #16]
 8006278:	4293      	cmp	r3, r2
 800627a:	dd01      	ble.n	8006280 <_printf_common+0x80>
 800627c:	1a9b      	subs	r3, r3, r2
 800627e:	18ed      	adds	r5, r5, r3
 8006280:	2700      	movs	r7, #0
 8006282:	42bd      	cmp	r5, r7
 8006284:	d120      	bne.n	80062c8 <_printf_common+0xc8>
 8006286:	2000      	movs	r0, #0
 8006288:	e010      	b.n	80062ac <_printf_common+0xac>
 800628a:	3701      	adds	r7, #1
 800628c:	68e3      	ldr	r3, [r4, #12]
 800628e:	682a      	ldr	r2, [r5, #0]
 8006290:	1a9b      	subs	r3, r3, r2
 8006292:	42bb      	cmp	r3, r7
 8006294:	ddd2      	ble.n	800623c <_printf_common+0x3c>
 8006296:	0022      	movs	r2, r4
 8006298:	2301      	movs	r3, #1
 800629a:	9901      	ldr	r1, [sp, #4]
 800629c:	9800      	ldr	r0, [sp, #0]
 800629e:	9e08      	ldr	r6, [sp, #32]
 80062a0:	3219      	adds	r2, #25
 80062a2:	47b0      	blx	r6
 80062a4:	1c43      	adds	r3, r0, #1
 80062a6:	d1f0      	bne.n	800628a <_printf_common+0x8a>
 80062a8:	2001      	movs	r0, #1
 80062aa:	4240      	negs	r0, r0
 80062ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80062ae:	2030      	movs	r0, #48	; 0x30
 80062b0:	18e1      	adds	r1, r4, r3
 80062b2:	3143      	adds	r1, #67	; 0x43
 80062b4:	7008      	strb	r0, [r1, #0]
 80062b6:	0021      	movs	r1, r4
 80062b8:	1c5a      	adds	r2, r3, #1
 80062ba:	3145      	adds	r1, #69	; 0x45
 80062bc:	7809      	ldrb	r1, [r1, #0]
 80062be:	18a2      	adds	r2, r4, r2
 80062c0:	3243      	adds	r2, #67	; 0x43
 80062c2:	3302      	adds	r3, #2
 80062c4:	7011      	strb	r1, [r2, #0]
 80062c6:	e7c1      	b.n	800624c <_printf_common+0x4c>
 80062c8:	0022      	movs	r2, r4
 80062ca:	2301      	movs	r3, #1
 80062cc:	9901      	ldr	r1, [sp, #4]
 80062ce:	9800      	ldr	r0, [sp, #0]
 80062d0:	9e08      	ldr	r6, [sp, #32]
 80062d2:	321a      	adds	r2, #26
 80062d4:	47b0      	blx	r6
 80062d6:	1c43      	adds	r3, r0, #1
 80062d8:	d0e6      	beq.n	80062a8 <_printf_common+0xa8>
 80062da:	3701      	adds	r7, #1
 80062dc:	e7d1      	b.n	8006282 <_printf_common+0x82>
	...

080062e0 <_printf_i>:
 80062e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062e2:	b08b      	sub	sp, #44	; 0x2c
 80062e4:	9206      	str	r2, [sp, #24]
 80062e6:	000a      	movs	r2, r1
 80062e8:	3243      	adds	r2, #67	; 0x43
 80062ea:	9307      	str	r3, [sp, #28]
 80062ec:	9005      	str	r0, [sp, #20]
 80062ee:	9204      	str	r2, [sp, #16]
 80062f0:	7e0a      	ldrb	r2, [r1, #24]
 80062f2:	000c      	movs	r4, r1
 80062f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80062f6:	2a78      	cmp	r2, #120	; 0x78
 80062f8:	d807      	bhi.n	800630a <_printf_i+0x2a>
 80062fa:	2a62      	cmp	r2, #98	; 0x62
 80062fc:	d809      	bhi.n	8006312 <_printf_i+0x32>
 80062fe:	2a00      	cmp	r2, #0
 8006300:	d100      	bne.n	8006304 <_printf_i+0x24>
 8006302:	e0c1      	b.n	8006488 <_printf_i+0x1a8>
 8006304:	2a58      	cmp	r2, #88	; 0x58
 8006306:	d100      	bne.n	800630a <_printf_i+0x2a>
 8006308:	e08c      	b.n	8006424 <_printf_i+0x144>
 800630a:	0026      	movs	r6, r4
 800630c:	3642      	adds	r6, #66	; 0x42
 800630e:	7032      	strb	r2, [r6, #0]
 8006310:	e022      	b.n	8006358 <_printf_i+0x78>
 8006312:	0010      	movs	r0, r2
 8006314:	3863      	subs	r0, #99	; 0x63
 8006316:	2815      	cmp	r0, #21
 8006318:	d8f7      	bhi.n	800630a <_printf_i+0x2a>
 800631a:	f7f9 fefb 	bl	8000114 <__gnu_thumb1_case_shi>
 800631e:	0016      	.short	0x0016
 8006320:	fff6001f 	.word	0xfff6001f
 8006324:	fff6fff6 	.word	0xfff6fff6
 8006328:	001ffff6 	.word	0x001ffff6
 800632c:	fff6fff6 	.word	0xfff6fff6
 8006330:	fff6fff6 	.word	0xfff6fff6
 8006334:	003600a8 	.word	0x003600a8
 8006338:	fff6009a 	.word	0xfff6009a
 800633c:	00b9fff6 	.word	0x00b9fff6
 8006340:	0036fff6 	.word	0x0036fff6
 8006344:	fff6fff6 	.word	0xfff6fff6
 8006348:	009e      	.short	0x009e
 800634a:	0026      	movs	r6, r4
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	3642      	adds	r6, #66	; 0x42
 8006350:	1d11      	adds	r1, r2, #4
 8006352:	6019      	str	r1, [r3, #0]
 8006354:	6813      	ldr	r3, [r2, #0]
 8006356:	7033      	strb	r3, [r6, #0]
 8006358:	2301      	movs	r3, #1
 800635a:	e0a7      	b.n	80064ac <_printf_i+0x1cc>
 800635c:	6808      	ldr	r0, [r1, #0]
 800635e:	6819      	ldr	r1, [r3, #0]
 8006360:	1d0a      	adds	r2, r1, #4
 8006362:	0605      	lsls	r5, r0, #24
 8006364:	d50b      	bpl.n	800637e <_printf_i+0x9e>
 8006366:	680d      	ldr	r5, [r1, #0]
 8006368:	601a      	str	r2, [r3, #0]
 800636a:	2d00      	cmp	r5, #0
 800636c:	da03      	bge.n	8006376 <_printf_i+0x96>
 800636e:	232d      	movs	r3, #45	; 0x2d
 8006370:	9a04      	ldr	r2, [sp, #16]
 8006372:	426d      	negs	r5, r5
 8006374:	7013      	strb	r3, [r2, #0]
 8006376:	4b61      	ldr	r3, [pc, #388]	; (80064fc <_printf_i+0x21c>)
 8006378:	270a      	movs	r7, #10
 800637a:	9303      	str	r3, [sp, #12]
 800637c:	e01b      	b.n	80063b6 <_printf_i+0xd6>
 800637e:	680d      	ldr	r5, [r1, #0]
 8006380:	601a      	str	r2, [r3, #0]
 8006382:	0641      	lsls	r1, r0, #25
 8006384:	d5f1      	bpl.n	800636a <_printf_i+0x8a>
 8006386:	b22d      	sxth	r5, r5
 8006388:	e7ef      	b.n	800636a <_printf_i+0x8a>
 800638a:	680d      	ldr	r5, [r1, #0]
 800638c:	6819      	ldr	r1, [r3, #0]
 800638e:	1d08      	adds	r0, r1, #4
 8006390:	6018      	str	r0, [r3, #0]
 8006392:	062e      	lsls	r6, r5, #24
 8006394:	d501      	bpl.n	800639a <_printf_i+0xba>
 8006396:	680d      	ldr	r5, [r1, #0]
 8006398:	e003      	b.n	80063a2 <_printf_i+0xc2>
 800639a:	066d      	lsls	r5, r5, #25
 800639c:	d5fb      	bpl.n	8006396 <_printf_i+0xb6>
 800639e:	680d      	ldr	r5, [r1, #0]
 80063a0:	b2ad      	uxth	r5, r5
 80063a2:	4b56      	ldr	r3, [pc, #344]	; (80064fc <_printf_i+0x21c>)
 80063a4:	2708      	movs	r7, #8
 80063a6:	9303      	str	r3, [sp, #12]
 80063a8:	2a6f      	cmp	r2, #111	; 0x6f
 80063aa:	d000      	beq.n	80063ae <_printf_i+0xce>
 80063ac:	3702      	adds	r7, #2
 80063ae:	0023      	movs	r3, r4
 80063b0:	2200      	movs	r2, #0
 80063b2:	3343      	adds	r3, #67	; 0x43
 80063b4:	701a      	strb	r2, [r3, #0]
 80063b6:	6863      	ldr	r3, [r4, #4]
 80063b8:	60a3      	str	r3, [r4, #8]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	db03      	blt.n	80063c6 <_printf_i+0xe6>
 80063be:	2204      	movs	r2, #4
 80063c0:	6821      	ldr	r1, [r4, #0]
 80063c2:	4391      	bics	r1, r2
 80063c4:	6021      	str	r1, [r4, #0]
 80063c6:	2d00      	cmp	r5, #0
 80063c8:	d102      	bne.n	80063d0 <_printf_i+0xf0>
 80063ca:	9e04      	ldr	r6, [sp, #16]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00c      	beq.n	80063ea <_printf_i+0x10a>
 80063d0:	9e04      	ldr	r6, [sp, #16]
 80063d2:	0028      	movs	r0, r5
 80063d4:	0039      	movs	r1, r7
 80063d6:	f7f9 ff2d 	bl	8000234 <__aeabi_uidivmod>
 80063da:	9b03      	ldr	r3, [sp, #12]
 80063dc:	3e01      	subs	r6, #1
 80063de:	5c5b      	ldrb	r3, [r3, r1]
 80063e0:	7033      	strb	r3, [r6, #0]
 80063e2:	002b      	movs	r3, r5
 80063e4:	0005      	movs	r5, r0
 80063e6:	429f      	cmp	r7, r3
 80063e8:	d9f3      	bls.n	80063d2 <_printf_i+0xf2>
 80063ea:	2f08      	cmp	r7, #8
 80063ec:	d109      	bne.n	8006402 <_printf_i+0x122>
 80063ee:	6823      	ldr	r3, [r4, #0]
 80063f0:	07db      	lsls	r3, r3, #31
 80063f2:	d506      	bpl.n	8006402 <_printf_i+0x122>
 80063f4:	6863      	ldr	r3, [r4, #4]
 80063f6:	6922      	ldr	r2, [r4, #16]
 80063f8:	4293      	cmp	r3, r2
 80063fa:	dc02      	bgt.n	8006402 <_printf_i+0x122>
 80063fc:	2330      	movs	r3, #48	; 0x30
 80063fe:	3e01      	subs	r6, #1
 8006400:	7033      	strb	r3, [r6, #0]
 8006402:	9b04      	ldr	r3, [sp, #16]
 8006404:	1b9b      	subs	r3, r3, r6
 8006406:	6123      	str	r3, [r4, #16]
 8006408:	9b07      	ldr	r3, [sp, #28]
 800640a:	0021      	movs	r1, r4
 800640c:	9300      	str	r3, [sp, #0]
 800640e:	9805      	ldr	r0, [sp, #20]
 8006410:	9b06      	ldr	r3, [sp, #24]
 8006412:	aa09      	add	r2, sp, #36	; 0x24
 8006414:	f7ff fef4 	bl	8006200 <_printf_common>
 8006418:	1c43      	adds	r3, r0, #1
 800641a:	d14c      	bne.n	80064b6 <_printf_i+0x1d6>
 800641c:	2001      	movs	r0, #1
 800641e:	4240      	negs	r0, r0
 8006420:	b00b      	add	sp, #44	; 0x2c
 8006422:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006424:	3145      	adds	r1, #69	; 0x45
 8006426:	700a      	strb	r2, [r1, #0]
 8006428:	4a34      	ldr	r2, [pc, #208]	; (80064fc <_printf_i+0x21c>)
 800642a:	9203      	str	r2, [sp, #12]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	6821      	ldr	r1, [r4, #0]
 8006430:	ca20      	ldmia	r2!, {r5}
 8006432:	601a      	str	r2, [r3, #0]
 8006434:	0608      	lsls	r0, r1, #24
 8006436:	d516      	bpl.n	8006466 <_printf_i+0x186>
 8006438:	07cb      	lsls	r3, r1, #31
 800643a:	d502      	bpl.n	8006442 <_printf_i+0x162>
 800643c:	2320      	movs	r3, #32
 800643e:	4319      	orrs	r1, r3
 8006440:	6021      	str	r1, [r4, #0]
 8006442:	2710      	movs	r7, #16
 8006444:	2d00      	cmp	r5, #0
 8006446:	d1b2      	bne.n	80063ae <_printf_i+0xce>
 8006448:	2320      	movs	r3, #32
 800644a:	6822      	ldr	r2, [r4, #0]
 800644c:	439a      	bics	r2, r3
 800644e:	6022      	str	r2, [r4, #0]
 8006450:	e7ad      	b.n	80063ae <_printf_i+0xce>
 8006452:	2220      	movs	r2, #32
 8006454:	6809      	ldr	r1, [r1, #0]
 8006456:	430a      	orrs	r2, r1
 8006458:	6022      	str	r2, [r4, #0]
 800645a:	0022      	movs	r2, r4
 800645c:	2178      	movs	r1, #120	; 0x78
 800645e:	3245      	adds	r2, #69	; 0x45
 8006460:	7011      	strb	r1, [r2, #0]
 8006462:	4a27      	ldr	r2, [pc, #156]	; (8006500 <_printf_i+0x220>)
 8006464:	e7e1      	b.n	800642a <_printf_i+0x14a>
 8006466:	0648      	lsls	r0, r1, #25
 8006468:	d5e6      	bpl.n	8006438 <_printf_i+0x158>
 800646a:	b2ad      	uxth	r5, r5
 800646c:	e7e4      	b.n	8006438 <_printf_i+0x158>
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	680d      	ldr	r5, [r1, #0]
 8006472:	1d10      	adds	r0, r2, #4
 8006474:	6949      	ldr	r1, [r1, #20]
 8006476:	6018      	str	r0, [r3, #0]
 8006478:	6813      	ldr	r3, [r2, #0]
 800647a:	062e      	lsls	r6, r5, #24
 800647c:	d501      	bpl.n	8006482 <_printf_i+0x1a2>
 800647e:	6019      	str	r1, [r3, #0]
 8006480:	e002      	b.n	8006488 <_printf_i+0x1a8>
 8006482:	066d      	lsls	r5, r5, #25
 8006484:	d5fb      	bpl.n	800647e <_printf_i+0x19e>
 8006486:	8019      	strh	r1, [r3, #0]
 8006488:	2300      	movs	r3, #0
 800648a:	9e04      	ldr	r6, [sp, #16]
 800648c:	6123      	str	r3, [r4, #16]
 800648e:	e7bb      	b.n	8006408 <_printf_i+0x128>
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	1d11      	adds	r1, r2, #4
 8006494:	6019      	str	r1, [r3, #0]
 8006496:	6816      	ldr	r6, [r2, #0]
 8006498:	2100      	movs	r1, #0
 800649a:	0030      	movs	r0, r6
 800649c:	6862      	ldr	r2, [r4, #4]
 800649e:	f000 fe67 	bl	8007170 <memchr>
 80064a2:	2800      	cmp	r0, #0
 80064a4:	d001      	beq.n	80064aa <_printf_i+0x1ca>
 80064a6:	1b80      	subs	r0, r0, r6
 80064a8:	6060      	str	r0, [r4, #4]
 80064aa:	6863      	ldr	r3, [r4, #4]
 80064ac:	6123      	str	r3, [r4, #16]
 80064ae:	2300      	movs	r3, #0
 80064b0:	9a04      	ldr	r2, [sp, #16]
 80064b2:	7013      	strb	r3, [r2, #0]
 80064b4:	e7a8      	b.n	8006408 <_printf_i+0x128>
 80064b6:	6923      	ldr	r3, [r4, #16]
 80064b8:	0032      	movs	r2, r6
 80064ba:	9906      	ldr	r1, [sp, #24]
 80064bc:	9805      	ldr	r0, [sp, #20]
 80064be:	9d07      	ldr	r5, [sp, #28]
 80064c0:	47a8      	blx	r5
 80064c2:	1c43      	adds	r3, r0, #1
 80064c4:	d0aa      	beq.n	800641c <_printf_i+0x13c>
 80064c6:	6823      	ldr	r3, [r4, #0]
 80064c8:	079b      	lsls	r3, r3, #30
 80064ca:	d415      	bmi.n	80064f8 <_printf_i+0x218>
 80064cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064ce:	68e0      	ldr	r0, [r4, #12]
 80064d0:	4298      	cmp	r0, r3
 80064d2:	daa5      	bge.n	8006420 <_printf_i+0x140>
 80064d4:	0018      	movs	r0, r3
 80064d6:	e7a3      	b.n	8006420 <_printf_i+0x140>
 80064d8:	0022      	movs	r2, r4
 80064da:	2301      	movs	r3, #1
 80064dc:	9906      	ldr	r1, [sp, #24]
 80064de:	9805      	ldr	r0, [sp, #20]
 80064e0:	9e07      	ldr	r6, [sp, #28]
 80064e2:	3219      	adds	r2, #25
 80064e4:	47b0      	blx	r6
 80064e6:	1c43      	adds	r3, r0, #1
 80064e8:	d098      	beq.n	800641c <_printf_i+0x13c>
 80064ea:	3501      	adds	r5, #1
 80064ec:	68e3      	ldr	r3, [r4, #12]
 80064ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064f0:	1a9b      	subs	r3, r3, r2
 80064f2:	42ab      	cmp	r3, r5
 80064f4:	dcf0      	bgt.n	80064d8 <_printf_i+0x1f8>
 80064f6:	e7e9      	b.n	80064cc <_printf_i+0x1ec>
 80064f8:	2500      	movs	r5, #0
 80064fa:	e7f7      	b.n	80064ec <_printf_i+0x20c>
 80064fc:	0800764d 	.word	0x0800764d
 8006500:	0800765e 	.word	0x0800765e

08006504 <_scanf_chars>:
 8006504:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006506:	0015      	movs	r5, r2
 8006508:	688a      	ldr	r2, [r1, #8]
 800650a:	000c      	movs	r4, r1
 800650c:	9001      	str	r0, [sp, #4]
 800650e:	2a00      	cmp	r2, #0
 8006510:	d105      	bne.n	800651e <_scanf_chars+0x1a>
 8006512:	6989      	ldr	r1, [r1, #24]
 8006514:	3201      	adds	r2, #1
 8006516:	2900      	cmp	r1, #0
 8006518:	d000      	beq.n	800651c <_scanf_chars+0x18>
 800651a:	3a02      	subs	r2, #2
 800651c:	60a2      	str	r2, [r4, #8]
 800651e:	6822      	ldr	r2, [r4, #0]
 8006520:	06d2      	lsls	r2, r2, #27
 8006522:	d403      	bmi.n	800652c <_scanf_chars+0x28>
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	1d11      	adds	r1, r2, #4
 8006528:	6019      	str	r1, [r3, #0]
 800652a:	6817      	ldr	r7, [r2, #0]
 800652c:	2600      	movs	r6, #0
 800652e:	69a0      	ldr	r0, [r4, #24]
 8006530:	2800      	cmp	r0, #0
 8006532:	d013      	beq.n	800655c <_scanf_chars+0x58>
 8006534:	2801      	cmp	r0, #1
 8006536:	d108      	bne.n	800654a <_scanf_chars+0x46>
 8006538:	682b      	ldr	r3, [r5, #0]
 800653a:	6962      	ldr	r2, [r4, #20]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	5cd3      	ldrb	r3, [r2, r3]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d10b      	bne.n	800655c <_scanf_chars+0x58>
 8006544:	2e00      	cmp	r6, #0
 8006546:	d038      	beq.n	80065ba <_scanf_chars+0xb6>
 8006548:	e026      	b.n	8006598 <_scanf_chars+0x94>
 800654a:	2802      	cmp	r0, #2
 800654c:	d124      	bne.n	8006598 <_scanf_chars+0x94>
 800654e:	682b      	ldr	r3, [r5, #0]
 8006550:	4a1a      	ldr	r2, [pc, #104]	; (80065bc <_scanf_chars+0xb8>)
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	5cd3      	ldrb	r3, [r2, r3]
 8006556:	2208      	movs	r2, #8
 8006558:	4213      	tst	r3, r2
 800655a:	d11d      	bne.n	8006598 <_scanf_chars+0x94>
 800655c:	2210      	movs	r2, #16
 800655e:	6823      	ldr	r3, [r4, #0]
 8006560:	3601      	adds	r6, #1
 8006562:	4213      	tst	r3, r2
 8006564:	d103      	bne.n	800656e <_scanf_chars+0x6a>
 8006566:	682b      	ldr	r3, [r5, #0]
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	703b      	strb	r3, [r7, #0]
 800656c:	3701      	adds	r7, #1
 800656e:	682a      	ldr	r2, [r5, #0]
 8006570:	686b      	ldr	r3, [r5, #4]
 8006572:	3201      	adds	r2, #1
 8006574:	602a      	str	r2, [r5, #0]
 8006576:	68a2      	ldr	r2, [r4, #8]
 8006578:	3b01      	subs	r3, #1
 800657a:	3a01      	subs	r2, #1
 800657c:	606b      	str	r3, [r5, #4]
 800657e:	60a2      	str	r2, [r4, #8]
 8006580:	2a00      	cmp	r2, #0
 8006582:	d009      	beq.n	8006598 <_scanf_chars+0x94>
 8006584:	2b00      	cmp	r3, #0
 8006586:	dcd2      	bgt.n	800652e <_scanf_chars+0x2a>
 8006588:	23c0      	movs	r3, #192	; 0xc0
 800658a:	005b      	lsls	r3, r3, #1
 800658c:	0029      	movs	r1, r5
 800658e:	58e3      	ldr	r3, [r4, r3]
 8006590:	9801      	ldr	r0, [sp, #4]
 8006592:	4798      	blx	r3
 8006594:	2800      	cmp	r0, #0
 8006596:	d0ca      	beq.n	800652e <_scanf_chars+0x2a>
 8006598:	6822      	ldr	r2, [r4, #0]
 800659a:	2310      	movs	r3, #16
 800659c:	0011      	movs	r1, r2
 800659e:	4019      	ands	r1, r3
 80065a0:	421a      	tst	r2, r3
 80065a2:	d106      	bne.n	80065b2 <_scanf_chars+0xae>
 80065a4:	68e3      	ldr	r3, [r4, #12]
 80065a6:	3301      	adds	r3, #1
 80065a8:	60e3      	str	r3, [r4, #12]
 80065aa:	69a3      	ldr	r3, [r4, #24]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d000      	beq.n	80065b2 <_scanf_chars+0xae>
 80065b0:	7039      	strb	r1, [r7, #0]
 80065b2:	2000      	movs	r0, #0
 80065b4:	6923      	ldr	r3, [r4, #16]
 80065b6:	199e      	adds	r6, r3, r6
 80065b8:	6126      	str	r6, [r4, #16]
 80065ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80065bc:	0800768b 	.word	0x0800768b

080065c0 <_scanf_i>:
 80065c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065c2:	000c      	movs	r4, r1
 80065c4:	b08d      	sub	sp, #52	; 0x34
 80065c6:	9302      	str	r3, [sp, #8]
 80065c8:	4b79      	ldr	r3, [pc, #484]	; (80067b0 <_scanf_i+0x1f0>)
 80065ca:	0016      	movs	r6, r2
 80065cc:	9005      	str	r0, [sp, #20]
 80065ce:	aa09      	add	r2, sp, #36	; 0x24
 80065d0:	cb23      	ldmia	r3!, {r0, r1, r5}
 80065d2:	c223      	stmia	r2!, {r0, r1, r5}
 80065d4:	4b77      	ldr	r3, [pc, #476]	; (80067b4 <_scanf_i+0x1f4>)
 80065d6:	9306      	str	r3, [sp, #24]
 80065d8:	69a3      	ldr	r3, [r4, #24]
 80065da:	2b03      	cmp	r3, #3
 80065dc:	d001      	beq.n	80065e2 <_scanf_i+0x22>
 80065de:	4b76      	ldr	r3, [pc, #472]	; (80067b8 <_scanf_i+0x1f8>)
 80065e0:	9306      	str	r3, [sp, #24]
 80065e2:	22ae      	movs	r2, #174	; 0xae
 80065e4:	2000      	movs	r0, #0
 80065e6:	68a3      	ldr	r3, [r4, #8]
 80065e8:	0052      	lsls	r2, r2, #1
 80065ea:	1e59      	subs	r1, r3, #1
 80065ec:	9004      	str	r0, [sp, #16]
 80065ee:	4291      	cmp	r1, r2
 80065f0:	d905      	bls.n	80065fe <_scanf_i+0x3e>
 80065f2:	3b5e      	subs	r3, #94	; 0x5e
 80065f4:	3bff      	subs	r3, #255	; 0xff
 80065f6:	9304      	str	r3, [sp, #16]
 80065f8:	235e      	movs	r3, #94	; 0x5e
 80065fa:	33ff      	adds	r3, #255	; 0xff
 80065fc:	60a3      	str	r3, [r4, #8]
 80065fe:	0023      	movs	r3, r4
 8006600:	331c      	adds	r3, #28
 8006602:	9301      	str	r3, [sp, #4]
 8006604:	23d0      	movs	r3, #208	; 0xd0
 8006606:	2700      	movs	r7, #0
 8006608:	6822      	ldr	r2, [r4, #0]
 800660a:	011b      	lsls	r3, r3, #4
 800660c:	4313      	orrs	r3, r2
 800660e:	6023      	str	r3, [r4, #0]
 8006610:	9b01      	ldr	r3, [sp, #4]
 8006612:	9303      	str	r3, [sp, #12]
 8006614:	6833      	ldr	r3, [r6, #0]
 8006616:	a809      	add	r0, sp, #36	; 0x24
 8006618:	7819      	ldrb	r1, [r3, #0]
 800661a:	00bb      	lsls	r3, r7, #2
 800661c:	2202      	movs	r2, #2
 800661e:	5818      	ldr	r0, [r3, r0]
 8006620:	f000 fda6 	bl	8007170 <memchr>
 8006624:	2800      	cmp	r0, #0
 8006626:	d02b      	beq.n	8006680 <_scanf_i+0xc0>
 8006628:	2f01      	cmp	r7, #1
 800662a:	d162      	bne.n	80066f2 <_scanf_i+0x132>
 800662c:	6863      	ldr	r3, [r4, #4]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d106      	bne.n	8006640 <_scanf_i+0x80>
 8006632:	3308      	adds	r3, #8
 8006634:	6822      	ldr	r2, [r4, #0]
 8006636:	6063      	str	r3, [r4, #4]
 8006638:	33f9      	adds	r3, #249	; 0xf9
 800663a:	33ff      	adds	r3, #255	; 0xff
 800663c:	4313      	orrs	r3, r2
 800663e:	6023      	str	r3, [r4, #0]
 8006640:	4b5e      	ldr	r3, [pc, #376]	; (80067bc <_scanf_i+0x1fc>)
 8006642:	6822      	ldr	r2, [r4, #0]
 8006644:	4013      	ands	r3, r2
 8006646:	6023      	str	r3, [r4, #0]
 8006648:	68a3      	ldr	r3, [r4, #8]
 800664a:	1e5a      	subs	r2, r3, #1
 800664c:	60a2      	str	r2, [r4, #8]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d016      	beq.n	8006680 <_scanf_i+0xc0>
 8006652:	6833      	ldr	r3, [r6, #0]
 8006654:	1c5a      	adds	r2, r3, #1
 8006656:	6032      	str	r2, [r6, #0]
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	9a03      	ldr	r2, [sp, #12]
 800665c:	7013      	strb	r3, [r2, #0]
 800665e:	6873      	ldr	r3, [r6, #4]
 8006660:	1c55      	adds	r5, r2, #1
 8006662:	3b01      	subs	r3, #1
 8006664:	6073      	str	r3, [r6, #4]
 8006666:	9503      	str	r5, [sp, #12]
 8006668:	2b00      	cmp	r3, #0
 800666a:	dc09      	bgt.n	8006680 <_scanf_i+0xc0>
 800666c:	23c0      	movs	r3, #192	; 0xc0
 800666e:	005b      	lsls	r3, r3, #1
 8006670:	58e3      	ldr	r3, [r4, r3]
 8006672:	0031      	movs	r1, r6
 8006674:	9805      	ldr	r0, [sp, #20]
 8006676:	9307      	str	r3, [sp, #28]
 8006678:	4798      	blx	r3
 800667a:	2800      	cmp	r0, #0
 800667c:	d000      	beq.n	8006680 <_scanf_i+0xc0>
 800667e:	e081      	b.n	8006784 <_scanf_i+0x1c4>
 8006680:	3701      	adds	r7, #1
 8006682:	2f03      	cmp	r7, #3
 8006684:	d1c6      	bne.n	8006614 <_scanf_i+0x54>
 8006686:	6863      	ldr	r3, [r4, #4]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d101      	bne.n	8006690 <_scanf_i+0xd0>
 800668c:	330a      	adds	r3, #10
 800668e:	6063      	str	r3, [r4, #4]
 8006690:	2110      	movs	r1, #16
 8006692:	2700      	movs	r7, #0
 8006694:	6863      	ldr	r3, [r4, #4]
 8006696:	6960      	ldr	r0, [r4, #20]
 8006698:	1ac9      	subs	r1, r1, r3
 800669a:	4b49      	ldr	r3, [pc, #292]	; (80067c0 <_scanf_i+0x200>)
 800669c:	18c9      	adds	r1, r1, r3
 800669e:	f000 f8b9 	bl	8006814 <__sccl>
 80066a2:	9d03      	ldr	r5, [sp, #12]
 80066a4:	68a3      	ldr	r3, [r4, #8]
 80066a6:	6822      	ldr	r2, [r4, #0]
 80066a8:	9303      	str	r3, [sp, #12]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d041      	beq.n	8006732 <_scanf_i+0x172>
 80066ae:	6831      	ldr	r1, [r6, #0]
 80066b0:	6963      	ldr	r3, [r4, #20]
 80066b2:	7808      	ldrb	r0, [r1, #0]
 80066b4:	5c1b      	ldrb	r3, [r3, r0]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d03b      	beq.n	8006732 <_scanf_i+0x172>
 80066ba:	2830      	cmp	r0, #48	; 0x30
 80066bc:	d129      	bne.n	8006712 <_scanf_i+0x152>
 80066be:	2380      	movs	r3, #128	; 0x80
 80066c0:	011b      	lsls	r3, r3, #4
 80066c2:	421a      	tst	r2, r3
 80066c4:	d025      	beq.n	8006712 <_scanf_i+0x152>
 80066c6:	9b04      	ldr	r3, [sp, #16]
 80066c8:	3701      	adds	r7, #1
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d005      	beq.n	80066da <_scanf_i+0x11a>
 80066ce:	001a      	movs	r2, r3
 80066d0:	9b03      	ldr	r3, [sp, #12]
 80066d2:	3a01      	subs	r2, #1
 80066d4:	3301      	adds	r3, #1
 80066d6:	9204      	str	r2, [sp, #16]
 80066d8:	60a3      	str	r3, [r4, #8]
 80066da:	6873      	ldr	r3, [r6, #4]
 80066dc:	3b01      	subs	r3, #1
 80066de:	6073      	str	r3, [r6, #4]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	dd1d      	ble.n	8006720 <_scanf_i+0x160>
 80066e4:	6833      	ldr	r3, [r6, #0]
 80066e6:	3301      	adds	r3, #1
 80066e8:	6033      	str	r3, [r6, #0]
 80066ea:	68a3      	ldr	r3, [r4, #8]
 80066ec:	3b01      	subs	r3, #1
 80066ee:	60a3      	str	r3, [r4, #8]
 80066f0:	e7d8      	b.n	80066a4 <_scanf_i+0xe4>
 80066f2:	2f02      	cmp	r7, #2
 80066f4:	d1a8      	bne.n	8006648 <_scanf_i+0x88>
 80066f6:	21c0      	movs	r1, #192	; 0xc0
 80066f8:	2380      	movs	r3, #128	; 0x80
 80066fa:	6822      	ldr	r2, [r4, #0]
 80066fc:	00c9      	lsls	r1, r1, #3
 80066fe:	4011      	ands	r1, r2
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	4299      	cmp	r1, r3
 8006704:	d1bf      	bne.n	8006686 <_scanf_i+0xc6>
 8006706:	3bf1      	subs	r3, #241	; 0xf1
 8006708:	3bff      	subs	r3, #255	; 0xff
 800670a:	6063      	str	r3, [r4, #4]
 800670c:	33f0      	adds	r3, #240	; 0xf0
 800670e:	4313      	orrs	r3, r2
 8006710:	e799      	b.n	8006646 <_scanf_i+0x86>
 8006712:	4b2c      	ldr	r3, [pc, #176]	; (80067c4 <_scanf_i+0x204>)
 8006714:	4013      	ands	r3, r2
 8006716:	6023      	str	r3, [r4, #0]
 8006718:	780b      	ldrb	r3, [r1, #0]
 800671a:	702b      	strb	r3, [r5, #0]
 800671c:	3501      	adds	r5, #1
 800671e:	e7dc      	b.n	80066da <_scanf_i+0x11a>
 8006720:	23c0      	movs	r3, #192	; 0xc0
 8006722:	005b      	lsls	r3, r3, #1
 8006724:	58e3      	ldr	r3, [r4, r3]
 8006726:	0031      	movs	r1, r6
 8006728:	9805      	ldr	r0, [sp, #20]
 800672a:	9303      	str	r3, [sp, #12]
 800672c:	4798      	blx	r3
 800672e:	2800      	cmp	r0, #0
 8006730:	d0db      	beq.n	80066ea <_scanf_i+0x12a>
 8006732:	6823      	ldr	r3, [r4, #0]
 8006734:	05db      	lsls	r3, r3, #23
 8006736:	d50e      	bpl.n	8006756 <_scanf_i+0x196>
 8006738:	9b01      	ldr	r3, [sp, #4]
 800673a:	429d      	cmp	r5, r3
 800673c:	d907      	bls.n	800674e <_scanf_i+0x18e>
 800673e:	23be      	movs	r3, #190	; 0xbe
 8006740:	3d01      	subs	r5, #1
 8006742:	005b      	lsls	r3, r3, #1
 8006744:	0032      	movs	r2, r6
 8006746:	7829      	ldrb	r1, [r5, #0]
 8006748:	58e3      	ldr	r3, [r4, r3]
 800674a:	9805      	ldr	r0, [sp, #20]
 800674c:	4798      	blx	r3
 800674e:	9b01      	ldr	r3, [sp, #4]
 8006750:	2001      	movs	r0, #1
 8006752:	429d      	cmp	r5, r3
 8006754:	d029      	beq.n	80067aa <_scanf_i+0x1ea>
 8006756:	6821      	ldr	r1, [r4, #0]
 8006758:	2310      	movs	r3, #16
 800675a:	000a      	movs	r2, r1
 800675c:	401a      	ands	r2, r3
 800675e:	4219      	tst	r1, r3
 8006760:	d11c      	bne.n	800679c <_scanf_i+0x1dc>
 8006762:	702a      	strb	r2, [r5, #0]
 8006764:	6863      	ldr	r3, [r4, #4]
 8006766:	9901      	ldr	r1, [sp, #4]
 8006768:	9805      	ldr	r0, [sp, #20]
 800676a:	9e06      	ldr	r6, [sp, #24]
 800676c:	47b0      	blx	r6
 800676e:	9b02      	ldr	r3, [sp, #8]
 8006770:	6821      	ldr	r1, [r4, #0]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	068a      	lsls	r2, r1, #26
 8006776:	d507      	bpl.n	8006788 <_scanf_i+0x1c8>
 8006778:	1d1a      	adds	r2, r3, #4
 800677a:	9902      	ldr	r1, [sp, #8]
 800677c:	600a      	str	r2, [r1, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	6018      	str	r0, [r3, #0]
 8006782:	e008      	b.n	8006796 <_scanf_i+0x1d6>
 8006784:	2700      	movs	r7, #0
 8006786:	e7d4      	b.n	8006732 <_scanf_i+0x172>
 8006788:	1d1a      	adds	r2, r3, #4
 800678a:	07ce      	lsls	r6, r1, #31
 800678c:	d5f5      	bpl.n	800677a <_scanf_i+0x1ba>
 800678e:	9902      	ldr	r1, [sp, #8]
 8006790:	600a      	str	r2, [r1, #0]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	8018      	strh	r0, [r3, #0]
 8006796:	68e3      	ldr	r3, [r4, #12]
 8006798:	3301      	adds	r3, #1
 800679a:	60e3      	str	r3, [r4, #12]
 800679c:	2000      	movs	r0, #0
 800679e:	9b01      	ldr	r3, [sp, #4]
 80067a0:	1aed      	subs	r5, r5, r3
 80067a2:	6923      	ldr	r3, [r4, #16]
 80067a4:	19ef      	adds	r7, r5, r7
 80067a6:	19df      	adds	r7, r3, r7
 80067a8:	6127      	str	r7, [r4, #16]
 80067aa:	b00d      	add	sp, #52	; 0x34
 80067ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067ae:	46c0      	nop			; (mov r8, r8)
 80067b0:	080074f4 	.word	0x080074f4
 80067b4:	080069a9 	.word	0x080069a9
 80067b8:	08006ac5 	.word	0x08006ac5
 80067bc:	fffffaff 	.word	0xfffffaff
 80067c0:	08007678 	.word	0x08007678
 80067c4:	fffff6ff 	.word	0xfffff6ff

080067c8 <_read_r>:
 80067c8:	b570      	push	{r4, r5, r6, lr}
 80067ca:	0004      	movs	r4, r0
 80067cc:	0008      	movs	r0, r1
 80067ce:	0011      	movs	r1, r2
 80067d0:	001a      	movs	r2, r3
 80067d2:	2300      	movs	r3, #0
 80067d4:	4d05      	ldr	r5, [pc, #20]	; (80067ec <_read_r+0x24>)
 80067d6:	602b      	str	r3, [r5, #0]
 80067d8:	f7fa fd3c 	bl	8001254 <_read>
 80067dc:	1c43      	adds	r3, r0, #1
 80067de:	d103      	bne.n	80067e8 <_read_r+0x20>
 80067e0:	682b      	ldr	r3, [r5, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d000      	beq.n	80067e8 <_read_r+0x20>
 80067e6:	6023      	str	r3, [r4, #0]
 80067e8:	bd70      	pop	{r4, r5, r6, pc}
 80067ea:	46c0      	nop			; (mov r8, r8)
 80067ec:	200004f0 	.word	0x200004f0

080067f0 <_sbrk_r>:
 80067f0:	2300      	movs	r3, #0
 80067f2:	b570      	push	{r4, r5, r6, lr}
 80067f4:	4d06      	ldr	r5, [pc, #24]	; (8006810 <_sbrk_r+0x20>)
 80067f6:	0004      	movs	r4, r0
 80067f8:	0008      	movs	r0, r1
 80067fa:	602b      	str	r3, [r5, #0]
 80067fc:	f7fa fd90 	bl	8001320 <_sbrk>
 8006800:	1c43      	adds	r3, r0, #1
 8006802:	d103      	bne.n	800680c <_sbrk_r+0x1c>
 8006804:	682b      	ldr	r3, [r5, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d000      	beq.n	800680c <_sbrk_r+0x1c>
 800680a:	6023      	str	r3, [r4, #0]
 800680c:	bd70      	pop	{r4, r5, r6, pc}
 800680e:	46c0      	nop			; (mov r8, r8)
 8006810:	200004f0 	.word	0x200004f0

08006814 <__sccl>:
 8006814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006816:	780b      	ldrb	r3, [r1, #0]
 8006818:	0004      	movs	r4, r0
 800681a:	2b5e      	cmp	r3, #94	; 0x5e
 800681c:	d00c      	beq.n	8006838 <__sccl+0x24>
 800681e:	1c48      	adds	r0, r1, #1
 8006820:	2100      	movs	r1, #0
 8006822:	0022      	movs	r2, r4
 8006824:	1c65      	adds	r5, r4, #1
 8006826:	35ff      	adds	r5, #255	; 0xff
 8006828:	7011      	strb	r1, [r2, #0]
 800682a:	3201      	adds	r2, #1
 800682c:	42aa      	cmp	r2, r5
 800682e:	d1fb      	bne.n	8006828 <__sccl+0x14>
 8006830:	2b00      	cmp	r3, #0
 8006832:	d105      	bne.n	8006840 <__sccl+0x2c>
 8006834:	3801      	subs	r0, #1
 8006836:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006838:	784b      	ldrb	r3, [r1, #1]
 800683a:	1c88      	adds	r0, r1, #2
 800683c:	2101      	movs	r1, #1
 800683e:	e7f0      	b.n	8006822 <__sccl+0xe>
 8006840:	2201      	movs	r2, #1
 8006842:	262d      	movs	r6, #45	; 0x2d
 8006844:	4051      	eors	r1, r2
 8006846:	0002      	movs	r2, r0
 8006848:	54e1      	strb	r1, [r4, r3]
 800684a:	7815      	ldrb	r5, [r2, #0]
 800684c:	1c50      	adds	r0, r2, #1
 800684e:	2d2d      	cmp	r5, #45	; 0x2d
 8006850:	d009      	beq.n	8006866 <__sccl+0x52>
 8006852:	2d5d      	cmp	r5, #93	; 0x5d
 8006854:	d0ef      	beq.n	8006836 <__sccl+0x22>
 8006856:	2d00      	cmp	r5, #0
 8006858:	d101      	bne.n	800685e <__sccl+0x4a>
 800685a:	0010      	movs	r0, r2
 800685c:	e7eb      	b.n	8006836 <__sccl+0x22>
 800685e:	002b      	movs	r3, r5
 8006860:	e7f1      	b.n	8006846 <__sccl+0x32>
 8006862:	0033      	movs	r3, r6
 8006864:	e7ef      	b.n	8006846 <__sccl+0x32>
 8006866:	7855      	ldrb	r5, [r2, #1]
 8006868:	2d5d      	cmp	r5, #93	; 0x5d
 800686a:	d0fa      	beq.n	8006862 <__sccl+0x4e>
 800686c:	42ab      	cmp	r3, r5
 800686e:	dcf8      	bgt.n	8006862 <__sccl+0x4e>
 8006870:	0018      	movs	r0, r3
 8006872:	3202      	adds	r2, #2
 8006874:	3001      	adds	r0, #1
 8006876:	5421      	strb	r1, [r4, r0]
 8006878:	4285      	cmp	r5, r0
 800687a:	dcfb      	bgt.n	8006874 <__sccl+0x60>
 800687c:	2000      	movs	r0, #0
 800687e:	1c5f      	adds	r7, r3, #1
 8006880:	42ab      	cmp	r3, r5
 8006882:	da01      	bge.n	8006888 <__sccl+0x74>
 8006884:	1ae8      	subs	r0, r5, r3
 8006886:	3801      	subs	r0, #1
 8006888:	183b      	adds	r3, r7, r0
 800688a:	e7de      	b.n	800684a <__sccl+0x36>

0800688c <_strtol_l.constprop.0>:
 800688c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800688e:	b087      	sub	sp, #28
 8006890:	001e      	movs	r6, r3
 8006892:	9005      	str	r0, [sp, #20]
 8006894:	9101      	str	r1, [sp, #4]
 8006896:	9202      	str	r2, [sp, #8]
 8006898:	2b01      	cmp	r3, #1
 800689a:	d045      	beq.n	8006928 <_strtol_l.constprop.0+0x9c>
 800689c:	000b      	movs	r3, r1
 800689e:	2e24      	cmp	r6, #36	; 0x24
 80068a0:	d842      	bhi.n	8006928 <_strtol_l.constprop.0+0x9c>
 80068a2:	4a3f      	ldr	r2, [pc, #252]	; (80069a0 <_strtol_l.constprop.0+0x114>)
 80068a4:	2108      	movs	r1, #8
 80068a6:	4694      	mov	ip, r2
 80068a8:	001a      	movs	r2, r3
 80068aa:	4660      	mov	r0, ip
 80068ac:	7814      	ldrb	r4, [r2, #0]
 80068ae:	3301      	adds	r3, #1
 80068b0:	5d00      	ldrb	r0, [r0, r4]
 80068b2:	001d      	movs	r5, r3
 80068b4:	0007      	movs	r7, r0
 80068b6:	400f      	ands	r7, r1
 80068b8:	4208      	tst	r0, r1
 80068ba:	d1f5      	bne.n	80068a8 <_strtol_l.constprop.0+0x1c>
 80068bc:	2c2d      	cmp	r4, #45	; 0x2d
 80068be:	d13a      	bne.n	8006936 <_strtol_l.constprop.0+0xaa>
 80068c0:	2701      	movs	r7, #1
 80068c2:	781c      	ldrb	r4, [r3, #0]
 80068c4:	1c95      	adds	r5, r2, #2
 80068c6:	2e00      	cmp	r6, #0
 80068c8:	d065      	beq.n	8006996 <_strtol_l.constprop.0+0x10a>
 80068ca:	2e10      	cmp	r6, #16
 80068cc:	d109      	bne.n	80068e2 <_strtol_l.constprop.0+0x56>
 80068ce:	2c30      	cmp	r4, #48	; 0x30
 80068d0:	d107      	bne.n	80068e2 <_strtol_l.constprop.0+0x56>
 80068d2:	2220      	movs	r2, #32
 80068d4:	782b      	ldrb	r3, [r5, #0]
 80068d6:	4393      	bics	r3, r2
 80068d8:	2b58      	cmp	r3, #88	; 0x58
 80068da:	d157      	bne.n	800698c <_strtol_l.constprop.0+0x100>
 80068dc:	2610      	movs	r6, #16
 80068de:	786c      	ldrb	r4, [r5, #1]
 80068e0:	3502      	adds	r5, #2
 80068e2:	4b30      	ldr	r3, [pc, #192]	; (80069a4 <_strtol_l.constprop.0+0x118>)
 80068e4:	0031      	movs	r1, r6
 80068e6:	18fb      	adds	r3, r7, r3
 80068e8:	0018      	movs	r0, r3
 80068ea:	9303      	str	r3, [sp, #12]
 80068ec:	f7f9 fca2 	bl	8000234 <__aeabi_uidivmod>
 80068f0:	2300      	movs	r3, #0
 80068f2:	2201      	movs	r2, #1
 80068f4:	4684      	mov	ip, r0
 80068f6:	0018      	movs	r0, r3
 80068f8:	9104      	str	r1, [sp, #16]
 80068fa:	4252      	negs	r2, r2
 80068fc:	0021      	movs	r1, r4
 80068fe:	3930      	subs	r1, #48	; 0x30
 8006900:	2909      	cmp	r1, #9
 8006902:	d81d      	bhi.n	8006940 <_strtol_l.constprop.0+0xb4>
 8006904:	000c      	movs	r4, r1
 8006906:	42a6      	cmp	r6, r4
 8006908:	dd28      	ble.n	800695c <_strtol_l.constprop.0+0xd0>
 800690a:	2b00      	cmp	r3, #0
 800690c:	db24      	blt.n	8006958 <_strtol_l.constprop.0+0xcc>
 800690e:	0013      	movs	r3, r2
 8006910:	4584      	cmp	ip, r0
 8006912:	d306      	bcc.n	8006922 <_strtol_l.constprop.0+0x96>
 8006914:	d102      	bne.n	800691c <_strtol_l.constprop.0+0x90>
 8006916:	9904      	ldr	r1, [sp, #16]
 8006918:	42a1      	cmp	r1, r4
 800691a:	db02      	blt.n	8006922 <_strtol_l.constprop.0+0x96>
 800691c:	2301      	movs	r3, #1
 800691e:	4370      	muls	r0, r6
 8006920:	1820      	adds	r0, r4, r0
 8006922:	782c      	ldrb	r4, [r5, #0]
 8006924:	3501      	adds	r5, #1
 8006926:	e7e9      	b.n	80068fc <_strtol_l.constprop.0+0x70>
 8006928:	f7fe fd06 	bl	8005338 <__errno>
 800692c:	2316      	movs	r3, #22
 800692e:	6003      	str	r3, [r0, #0]
 8006930:	2000      	movs	r0, #0
 8006932:	b007      	add	sp, #28
 8006934:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006936:	2c2b      	cmp	r4, #43	; 0x2b
 8006938:	d1c5      	bne.n	80068c6 <_strtol_l.constprop.0+0x3a>
 800693a:	781c      	ldrb	r4, [r3, #0]
 800693c:	1c95      	adds	r5, r2, #2
 800693e:	e7c2      	b.n	80068c6 <_strtol_l.constprop.0+0x3a>
 8006940:	0021      	movs	r1, r4
 8006942:	3941      	subs	r1, #65	; 0x41
 8006944:	2919      	cmp	r1, #25
 8006946:	d801      	bhi.n	800694c <_strtol_l.constprop.0+0xc0>
 8006948:	3c37      	subs	r4, #55	; 0x37
 800694a:	e7dc      	b.n	8006906 <_strtol_l.constprop.0+0x7a>
 800694c:	0021      	movs	r1, r4
 800694e:	3961      	subs	r1, #97	; 0x61
 8006950:	2919      	cmp	r1, #25
 8006952:	d803      	bhi.n	800695c <_strtol_l.constprop.0+0xd0>
 8006954:	3c57      	subs	r4, #87	; 0x57
 8006956:	e7d6      	b.n	8006906 <_strtol_l.constprop.0+0x7a>
 8006958:	0013      	movs	r3, r2
 800695a:	e7e2      	b.n	8006922 <_strtol_l.constprop.0+0x96>
 800695c:	2b00      	cmp	r3, #0
 800695e:	da09      	bge.n	8006974 <_strtol_l.constprop.0+0xe8>
 8006960:	2322      	movs	r3, #34	; 0x22
 8006962:	9a05      	ldr	r2, [sp, #20]
 8006964:	9803      	ldr	r0, [sp, #12]
 8006966:	6013      	str	r3, [r2, #0]
 8006968:	9b02      	ldr	r3, [sp, #8]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d0e1      	beq.n	8006932 <_strtol_l.constprop.0+0xa6>
 800696e:	1e6b      	subs	r3, r5, #1
 8006970:	9301      	str	r3, [sp, #4]
 8006972:	e007      	b.n	8006984 <_strtol_l.constprop.0+0xf8>
 8006974:	2f00      	cmp	r7, #0
 8006976:	d000      	beq.n	800697a <_strtol_l.constprop.0+0xee>
 8006978:	4240      	negs	r0, r0
 800697a:	9a02      	ldr	r2, [sp, #8]
 800697c:	2a00      	cmp	r2, #0
 800697e:	d0d8      	beq.n	8006932 <_strtol_l.constprop.0+0xa6>
 8006980:	2b00      	cmp	r3, #0
 8006982:	d1f4      	bne.n	800696e <_strtol_l.constprop.0+0xe2>
 8006984:	9b02      	ldr	r3, [sp, #8]
 8006986:	9a01      	ldr	r2, [sp, #4]
 8006988:	601a      	str	r2, [r3, #0]
 800698a:	e7d2      	b.n	8006932 <_strtol_l.constprop.0+0xa6>
 800698c:	2430      	movs	r4, #48	; 0x30
 800698e:	2e00      	cmp	r6, #0
 8006990:	d1a7      	bne.n	80068e2 <_strtol_l.constprop.0+0x56>
 8006992:	3608      	adds	r6, #8
 8006994:	e7a5      	b.n	80068e2 <_strtol_l.constprop.0+0x56>
 8006996:	2c30      	cmp	r4, #48	; 0x30
 8006998:	d09b      	beq.n	80068d2 <_strtol_l.constprop.0+0x46>
 800699a:	260a      	movs	r6, #10
 800699c:	e7a1      	b.n	80068e2 <_strtol_l.constprop.0+0x56>
 800699e:	46c0      	nop			; (mov r8, r8)
 80069a0:	0800768b 	.word	0x0800768b
 80069a4:	7fffffff 	.word	0x7fffffff

080069a8 <_strtol_r>:
 80069a8:	b510      	push	{r4, lr}
 80069aa:	f7ff ff6f 	bl	800688c <_strtol_l.constprop.0>
 80069ae:	bd10      	pop	{r4, pc}

080069b0 <_strtoul_l.constprop.0>:
 80069b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069b2:	b087      	sub	sp, #28
 80069b4:	9202      	str	r2, [sp, #8]
 80069b6:	4a42      	ldr	r2, [pc, #264]	; (8006ac0 <_strtoul_l.constprop.0+0x110>)
 80069b8:	001e      	movs	r6, r3
 80069ba:	9101      	str	r1, [sp, #4]
 80069bc:	000b      	movs	r3, r1
 80069be:	4694      	mov	ip, r2
 80069c0:	2108      	movs	r1, #8
 80069c2:	9005      	str	r0, [sp, #20]
 80069c4:	001a      	movs	r2, r3
 80069c6:	4660      	mov	r0, ip
 80069c8:	7814      	ldrb	r4, [r2, #0]
 80069ca:	3301      	adds	r3, #1
 80069cc:	5d00      	ldrb	r0, [r0, r4]
 80069ce:	001d      	movs	r5, r3
 80069d0:	0007      	movs	r7, r0
 80069d2:	400f      	ands	r7, r1
 80069d4:	4208      	tst	r0, r1
 80069d6:	d1f5      	bne.n	80069c4 <_strtoul_l.constprop.0+0x14>
 80069d8:	2c2d      	cmp	r4, #45	; 0x2d
 80069da:	d13a      	bne.n	8006a52 <_strtoul_l.constprop.0+0xa2>
 80069dc:	2701      	movs	r7, #1
 80069de:	781c      	ldrb	r4, [r3, #0]
 80069e0:	1c95      	adds	r5, r2, #2
 80069e2:	2e00      	cmp	r6, #0
 80069e4:	d067      	beq.n	8006ab6 <_strtoul_l.constprop.0+0x106>
 80069e6:	2e10      	cmp	r6, #16
 80069e8:	d109      	bne.n	80069fe <_strtoul_l.constprop.0+0x4e>
 80069ea:	2c30      	cmp	r4, #48	; 0x30
 80069ec:	d107      	bne.n	80069fe <_strtoul_l.constprop.0+0x4e>
 80069ee:	2220      	movs	r2, #32
 80069f0:	782b      	ldrb	r3, [r5, #0]
 80069f2:	4393      	bics	r3, r2
 80069f4:	2b58      	cmp	r3, #88	; 0x58
 80069f6:	d159      	bne.n	8006aac <_strtoul_l.constprop.0+0xfc>
 80069f8:	2610      	movs	r6, #16
 80069fa:	786c      	ldrb	r4, [r5, #1]
 80069fc:	3502      	adds	r5, #2
 80069fe:	2001      	movs	r0, #1
 8006a00:	0031      	movs	r1, r6
 8006a02:	4240      	negs	r0, r0
 8006a04:	f7f9 fb90 	bl	8000128 <__udivsi3>
 8006a08:	9003      	str	r0, [sp, #12]
 8006a0a:	2001      	movs	r0, #1
 8006a0c:	0031      	movs	r1, r6
 8006a0e:	4240      	negs	r0, r0
 8006a10:	f7f9 fc10 	bl	8000234 <__aeabi_uidivmod>
 8006a14:	2300      	movs	r3, #0
 8006a16:	9104      	str	r1, [sp, #16]
 8006a18:	2101      	movs	r1, #1
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	0018      	movs	r0, r3
 8006a1e:	468c      	mov	ip, r1
 8006a20:	4252      	negs	r2, r2
 8006a22:	0021      	movs	r1, r4
 8006a24:	3930      	subs	r1, #48	; 0x30
 8006a26:	2909      	cmp	r1, #9
 8006a28:	d818      	bhi.n	8006a5c <_strtoul_l.constprop.0+0xac>
 8006a2a:	000c      	movs	r4, r1
 8006a2c:	42a6      	cmp	r6, r4
 8006a2e:	dd23      	ble.n	8006a78 <_strtoul_l.constprop.0+0xc8>
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	db1f      	blt.n	8006a74 <_strtoul_l.constprop.0+0xc4>
 8006a34:	9903      	ldr	r1, [sp, #12]
 8006a36:	0013      	movs	r3, r2
 8006a38:	4281      	cmp	r1, r0
 8006a3a:	d307      	bcc.n	8006a4c <_strtoul_l.constprop.0+0x9c>
 8006a3c:	d103      	bne.n	8006a46 <_strtoul_l.constprop.0+0x96>
 8006a3e:	9904      	ldr	r1, [sp, #16]
 8006a40:	0013      	movs	r3, r2
 8006a42:	42a1      	cmp	r1, r4
 8006a44:	db02      	blt.n	8006a4c <_strtoul_l.constprop.0+0x9c>
 8006a46:	4663      	mov	r3, ip
 8006a48:	4370      	muls	r0, r6
 8006a4a:	1820      	adds	r0, r4, r0
 8006a4c:	782c      	ldrb	r4, [r5, #0]
 8006a4e:	3501      	adds	r5, #1
 8006a50:	e7e7      	b.n	8006a22 <_strtoul_l.constprop.0+0x72>
 8006a52:	2c2b      	cmp	r4, #43	; 0x2b
 8006a54:	d1c5      	bne.n	80069e2 <_strtoul_l.constprop.0+0x32>
 8006a56:	781c      	ldrb	r4, [r3, #0]
 8006a58:	1c95      	adds	r5, r2, #2
 8006a5a:	e7c2      	b.n	80069e2 <_strtoul_l.constprop.0+0x32>
 8006a5c:	0021      	movs	r1, r4
 8006a5e:	3941      	subs	r1, #65	; 0x41
 8006a60:	2919      	cmp	r1, #25
 8006a62:	d801      	bhi.n	8006a68 <_strtoul_l.constprop.0+0xb8>
 8006a64:	3c37      	subs	r4, #55	; 0x37
 8006a66:	e7e1      	b.n	8006a2c <_strtoul_l.constprop.0+0x7c>
 8006a68:	0021      	movs	r1, r4
 8006a6a:	3961      	subs	r1, #97	; 0x61
 8006a6c:	2919      	cmp	r1, #25
 8006a6e:	d803      	bhi.n	8006a78 <_strtoul_l.constprop.0+0xc8>
 8006a70:	3c57      	subs	r4, #87	; 0x57
 8006a72:	e7db      	b.n	8006a2c <_strtoul_l.constprop.0+0x7c>
 8006a74:	0013      	movs	r3, r2
 8006a76:	e7e9      	b.n	8006a4c <_strtoul_l.constprop.0+0x9c>
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	da09      	bge.n	8006a90 <_strtoul_l.constprop.0+0xe0>
 8006a7c:	2322      	movs	r3, #34	; 0x22
 8006a7e:	2001      	movs	r0, #1
 8006a80:	9a05      	ldr	r2, [sp, #20]
 8006a82:	4240      	negs	r0, r0
 8006a84:	6013      	str	r3, [r2, #0]
 8006a86:	9b02      	ldr	r3, [sp, #8]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d109      	bne.n	8006aa0 <_strtoul_l.constprop.0+0xf0>
 8006a8c:	b007      	add	sp, #28
 8006a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a90:	2f00      	cmp	r7, #0
 8006a92:	d000      	beq.n	8006a96 <_strtoul_l.constprop.0+0xe6>
 8006a94:	4240      	negs	r0, r0
 8006a96:	9a02      	ldr	r2, [sp, #8]
 8006a98:	2a00      	cmp	r2, #0
 8006a9a:	d0f7      	beq.n	8006a8c <_strtoul_l.constprop.0+0xdc>
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d001      	beq.n	8006aa4 <_strtoul_l.constprop.0+0xf4>
 8006aa0:	1e6b      	subs	r3, r5, #1
 8006aa2:	9301      	str	r3, [sp, #4]
 8006aa4:	9b02      	ldr	r3, [sp, #8]
 8006aa6:	9a01      	ldr	r2, [sp, #4]
 8006aa8:	601a      	str	r2, [r3, #0]
 8006aaa:	e7ef      	b.n	8006a8c <_strtoul_l.constprop.0+0xdc>
 8006aac:	2430      	movs	r4, #48	; 0x30
 8006aae:	2e00      	cmp	r6, #0
 8006ab0:	d1a5      	bne.n	80069fe <_strtoul_l.constprop.0+0x4e>
 8006ab2:	3608      	adds	r6, #8
 8006ab4:	e7a3      	b.n	80069fe <_strtoul_l.constprop.0+0x4e>
 8006ab6:	2c30      	cmp	r4, #48	; 0x30
 8006ab8:	d099      	beq.n	80069ee <_strtoul_l.constprop.0+0x3e>
 8006aba:	260a      	movs	r6, #10
 8006abc:	e79f      	b.n	80069fe <_strtoul_l.constprop.0+0x4e>
 8006abe:	46c0      	nop			; (mov r8, r8)
 8006ac0:	0800768b 	.word	0x0800768b

08006ac4 <_strtoul_r>:
 8006ac4:	b510      	push	{r4, lr}
 8006ac6:	f7ff ff73 	bl	80069b0 <_strtoul_l.constprop.0>
 8006aca:	bd10      	pop	{r4, pc}

08006acc <__submore>:
 8006acc:	000b      	movs	r3, r1
 8006ace:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ad0:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8006ad2:	3344      	adds	r3, #68	; 0x44
 8006ad4:	000c      	movs	r4, r1
 8006ad6:	429d      	cmp	r5, r3
 8006ad8:	d11c      	bne.n	8006b14 <__submore+0x48>
 8006ada:	2680      	movs	r6, #128	; 0x80
 8006adc:	00f6      	lsls	r6, r6, #3
 8006ade:	0031      	movs	r1, r6
 8006ae0:	f7fe fe7a 	bl	80057d8 <_malloc_r>
 8006ae4:	2800      	cmp	r0, #0
 8006ae6:	d102      	bne.n	8006aee <__submore+0x22>
 8006ae8:	2001      	movs	r0, #1
 8006aea:	4240      	negs	r0, r0
 8006aec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006aee:	0023      	movs	r3, r4
 8006af0:	6360      	str	r0, [r4, #52]	; 0x34
 8006af2:	63a6      	str	r6, [r4, #56]	; 0x38
 8006af4:	3346      	adds	r3, #70	; 0x46
 8006af6:	781a      	ldrb	r2, [r3, #0]
 8006af8:	4b10      	ldr	r3, [pc, #64]	; (8006b3c <__submore+0x70>)
 8006afa:	54c2      	strb	r2, [r0, r3]
 8006afc:	0023      	movs	r3, r4
 8006afe:	3345      	adds	r3, #69	; 0x45
 8006b00:	781a      	ldrb	r2, [r3, #0]
 8006b02:	4b0f      	ldr	r3, [pc, #60]	; (8006b40 <__submore+0x74>)
 8006b04:	54c2      	strb	r2, [r0, r3]
 8006b06:	782a      	ldrb	r2, [r5, #0]
 8006b08:	4b0e      	ldr	r3, [pc, #56]	; (8006b44 <__submore+0x78>)
 8006b0a:	54c2      	strb	r2, [r0, r3]
 8006b0c:	18c0      	adds	r0, r0, r3
 8006b0e:	6020      	str	r0, [r4, #0]
 8006b10:	2000      	movs	r0, #0
 8006b12:	e7eb      	b.n	8006aec <__submore+0x20>
 8006b14:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 8006b16:	0029      	movs	r1, r5
 8006b18:	0073      	lsls	r3, r6, #1
 8006b1a:	001a      	movs	r2, r3
 8006b1c:	9301      	str	r3, [sp, #4]
 8006b1e:	f000 fb5f 	bl	80071e0 <_realloc_r>
 8006b22:	1e05      	subs	r5, r0, #0
 8006b24:	d0e0      	beq.n	8006ae8 <__submore+0x1c>
 8006b26:	1987      	adds	r7, r0, r6
 8006b28:	0001      	movs	r1, r0
 8006b2a:	0032      	movs	r2, r6
 8006b2c:	0038      	movs	r0, r7
 8006b2e:	f000 fb2a 	bl	8007186 <memcpy>
 8006b32:	9b01      	ldr	r3, [sp, #4]
 8006b34:	6027      	str	r7, [r4, #0]
 8006b36:	6365      	str	r5, [r4, #52]	; 0x34
 8006b38:	63a3      	str	r3, [r4, #56]	; 0x38
 8006b3a:	e7e9      	b.n	8006b10 <__submore+0x44>
 8006b3c:	000003ff 	.word	0x000003ff
 8006b40:	000003fe 	.word	0x000003fe
 8006b44:	000003fd 	.word	0x000003fd

08006b48 <__swbuf_r>:
 8006b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b4a:	0005      	movs	r5, r0
 8006b4c:	000e      	movs	r6, r1
 8006b4e:	0014      	movs	r4, r2
 8006b50:	2800      	cmp	r0, #0
 8006b52:	d004      	beq.n	8006b5e <__swbuf_r+0x16>
 8006b54:	6983      	ldr	r3, [r0, #24]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d101      	bne.n	8006b5e <__swbuf_r+0x16>
 8006b5a:	f000 f9f9 	bl	8006f50 <__sinit>
 8006b5e:	4b22      	ldr	r3, [pc, #136]	; (8006be8 <__swbuf_r+0xa0>)
 8006b60:	429c      	cmp	r4, r3
 8006b62:	d12e      	bne.n	8006bc2 <__swbuf_r+0x7a>
 8006b64:	686c      	ldr	r4, [r5, #4]
 8006b66:	69a3      	ldr	r3, [r4, #24]
 8006b68:	60a3      	str	r3, [r4, #8]
 8006b6a:	89a3      	ldrh	r3, [r4, #12]
 8006b6c:	071b      	lsls	r3, r3, #28
 8006b6e:	d532      	bpl.n	8006bd6 <__swbuf_r+0x8e>
 8006b70:	6923      	ldr	r3, [r4, #16]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d02f      	beq.n	8006bd6 <__swbuf_r+0x8e>
 8006b76:	6823      	ldr	r3, [r4, #0]
 8006b78:	6922      	ldr	r2, [r4, #16]
 8006b7a:	b2f7      	uxtb	r7, r6
 8006b7c:	1a98      	subs	r0, r3, r2
 8006b7e:	6963      	ldr	r3, [r4, #20]
 8006b80:	b2f6      	uxtb	r6, r6
 8006b82:	4283      	cmp	r3, r0
 8006b84:	dc05      	bgt.n	8006b92 <__swbuf_r+0x4a>
 8006b86:	0021      	movs	r1, r4
 8006b88:	0028      	movs	r0, r5
 8006b8a:	f000 f93f 	bl	8006e0c <_fflush_r>
 8006b8e:	2800      	cmp	r0, #0
 8006b90:	d127      	bne.n	8006be2 <__swbuf_r+0x9a>
 8006b92:	68a3      	ldr	r3, [r4, #8]
 8006b94:	3001      	adds	r0, #1
 8006b96:	3b01      	subs	r3, #1
 8006b98:	60a3      	str	r3, [r4, #8]
 8006b9a:	6823      	ldr	r3, [r4, #0]
 8006b9c:	1c5a      	adds	r2, r3, #1
 8006b9e:	6022      	str	r2, [r4, #0]
 8006ba0:	701f      	strb	r7, [r3, #0]
 8006ba2:	6963      	ldr	r3, [r4, #20]
 8006ba4:	4283      	cmp	r3, r0
 8006ba6:	d004      	beq.n	8006bb2 <__swbuf_r+0x6a>
 8006ba8:	89a3      	ldrh	r3, [r4, #12]
 8006baa:	07db      	lsls	r3, r3, #31
 8006bac:	d507      	bpl.n	8006bbe <__swbuf_r+0x76>
 8006bae:	2e0a      	cmp	r6, #10
 8006bb0:	d105      	bne.n	8006bbe <__swbuf_r+0x76>
 8006bb2:	0021      	movs	r1, r4
 8006bb4:	0028      	movs	r0, r5
 8006bb6:	f000 f929 	bl	8006e0c <_fflush_r>
 8006bba:	2800      	cmp	r0, #0
 8006bbc:	d111      	bne.n	8006be2 <__swbuf_r+0x9a>
 8006bbe:	0030      	movs	r0, r6
 8006bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bc2:	4b0a      	ldr	r3, [pc, #40]	; (8006bec <__swbuf_r+0xa4>)
 8006bc4:	429c      	cmp	r4, r3
 8006bc6:	d101      	bne.n	8006bcc <__swbuf_r+0x84>
 8006bc8:	68ac      	ldr	r4, [r5, #8]
 8006bca:	e7cc      	b.n	8006b66 <__swbuf_r+0x1e>
 8006bcc:	4b08      	ldr	r3, [pc, #32]	; (8006bf0 <__swbuf_r+0xa8>)
 8006bce:	429c      	cmp	r4, r3
 8006bd0:	d1c9      	bne.n	8006b66 <__swbuf_r+0x1e>
 8006bd2:	68ec      	ldr	r4, [r5, #12]
 8006bd4:	e7c7      	b.n	8006b66 <__swbuf_r+0x1e>
 8006bd6:	0021      	movs	r1, r4
 8006bd8:	0028      	movs	r0, r5
 8006bda:	f000 f80b 	bl	8006bf4 <__swsetup_r>
 8006bde:	2800      	cmp	r0, #0
 8006be0:	d0c9      	beq.n	8006b76 <__swbuf_r+0x2e>
 8006be2:	2601      	movs	r6, #1
 8006be4:	4276      	negs	r6, r6
 8006be6:	e7ea      	b.n	8006bbe <__swbuf_r+0x76>
 8006be8:	080077ac 	.word	0x080077ac
 8006bec:	080077cc 	.word	0x080077cc
 8006bf0:	0800778c 	.word	0x0800778c

08006bf4 <__swsetup_r>:
 8006bf4:	4b37      	ldr	r3, [pc, #220]	; (8006cd4 <__swsetup_r+0xe0>)
 8006bf6:	b570      	push	{r4, r5, r6, lr}
 8006bf8:	681d      	ldr	r5, [r3, #0]
 8006bfa:	0006      	movs	r6, r0
 8006bfc:	000c      	movs	r4, r1
 8006bfe:	2d00      	cmp	r5, #0
 8006c00:	d005      	beq.n	8006c0e <__swsetup_r+0x1a>
 8006c02:	69ab      	ldr	r3, [r5, #24]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d102      	bne.n	8006c0e <__swsetup_r+0x1a>
 8006c08:	0028      	movs	r0, r5
 8006c0a:	f000 f9a1 	bl	8006f50 <__sinit>
 8006c0e:	4b32      	ldr	r3, [pc, #200]	; (8006cd8 <__swsetup_r+0xe4>)
 8006c10:	429c      	cmp	r4, r3
 8006c12:	d10f      	bne.n	8006c34 <__swsetup_r+0x40>
 8006c14:	686c      	ldr	r4, [r5, #4]
 8006c16:	230c      	movs	r3, #12
 8006c18:	5ee2      	ldrsh	r2, [r4, r3]
 8006c1a:	b293      	uxth	r3, r2
 8006c1c:	0711      	lsls	r1, r2, #28
 8006c1e:	d42d      	bmi.n	8006c7c <__swsetup_r+0x88>
 8006c20:	06d9      	lsls	r1, r3, #27
 8006c22:	d411      	bmi.n	8006c48 <__swsetup_r+0x54>
 8006c24:	2309      	movs	r3, #9
 8006c26:	2001      	movs	r0, #1
 8006c28:	6033      	str	r3, [r6, #0]
 8006c2a:	3337      	adds	r3, #55	; 0x37
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	81a3      	strh	r3, [r4, #12]
 8006c30:	4240      	negs	r0, r0
 8006c32:	bd70      	pop	{r4, r5, r6, pc}
 8006c34:	4b29      	ldr	r3, [pc, #164]	; (8006cdc <__swsetup_r+0xe8>)
 8006c36:	429c      	cmp	r4, r3
 8006c38:	d101      	bne.n	8006c3e <__swsetup_r+0x4a>
 8006c3a:	68ac      	ldr	r4, [r5, #8]
 8006c3c:	e7eb      	b.n	8006c16 <__swsetup_r+0x22>
 8006c3e:	4b28      	ldr	r3, [pc, #160]	; (8006ce0 <__swsetup_r+0xec>)
 8006c40:	429c      	cmp	r4, r3
 8006c42:	d1e8      	bne.n	8006c16 <__swsetup_r+0x22>
 8006c44:	68ec      	ldr	r4, [r5, #12]
 8006c46:	e7e6      	b.n	8006c16 <__swsetup_r+0x22>
 8006c48:	075b      	lsls	r3, r3, #29
 8006c4a:	d513      	bpl.n	8006c74 <__swsetup_r+0x80>
 8006c4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c4e:	2900      	cmp	r1, #0
 8006c50:	d008      	beq.n	8006c64 <__swsetup_r+0x70>
 8006c52:	0023      	movs	r3, r4
 8006c54:	3344      	adds	r3, #68	; 0x44
 8006c56:	4299      	cmp	r1, r3
 8006c58:	d002      	beq.n	8006c60 <__swsetup_r+0x6c>
 8006c5a:	0030      	movs	r0, r6
 8006c5c:	f7fe fd50 	bl	8005700 <_free_r>
 8006c60:	2300      	movs	r3, #0
 8006c62:	6363      	str	r3, [r4, #52]	; 0x34
 8006c64:	2224      	movs	r2, #36	; 0x24
 8006c66:	89a3      	ldrh	r3, [r4, #12]
 8006c68:	4393      	bics	r3, r2
 8006c6a:	81a3      	strh	r3, [r4, #12]
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	6063      	str	r3, [r4, #4]
 8006c70:	6923      	ldr	r3, [r4, #16]
 8006c72:	6023      	str	r3, [r4, #0]
 8006c74:	2308      	movs	r3, #8
 8006c76:	89a2      	ldrh	r2, [r4, #12]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	81a3      	strh	r3, [r4, #12]
 8006c7c:	6923      	ldr	r3, [r4, #16]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d10b      	bne.n	8006c9a <__swsetup_r+0xa6>
 8006c82:	21a0      	movs	r1, #160	; 0xa0
 8006c84:	2280      	movs	r2, #128	; 0x80
 8006c86:	89a3      	ldrh	r3, [r4, #12]
 8006c88:	0089      	lsls	r1, r1, #2
 8006c8a:	0092      	lsls	r2, r2, #2
 8006c8c:	400b      	ands	r3, r1
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d003      	beq.n	8006c9a <__swsetup_r+0xa6>
 8006c92:	0021      	movs	r1, r4
 8006c94:	0030      	movs	r0, r6
 8006c96:	f000 fa27 	bl	80070e8 <__smakebuf_r>
 8006c9a:	220c      	movs	r2, #12
 8006c9c:	5ea3      	ldrsh	r3, [r4, r2]
 8006c9e:	2001      	movs	r0, #1
 8006ca0:	001a      	movs	r2, r3
 8006ca2:	b299      	uxth	r1, r3
 8006ca4:	4002      	ands	r2, r0
 8006ca6:	4203      	tst	r3, r0
 8006ca8:	d00f      	beq.n	8006cca <__swsetup_r+0xd6>
 8006caa:	2200      	movs	r2, #0
 8006cac:	60a2      	str	r2, [r4, #8]
 8006cae:	6962      	ldr	r2, [r4, #20]
 8006cb0:	4252      	negs	r2, r2
 8006cb2:	61a2      	str	r2, [r4, #24]
 8006cb4:	2000      	movs	r0, #0
 8006cb6:	6922      	ldr	r2, [r4, #16]
 8006cb8:	4282      	cmp	r2, r0
 8006cba:	d1ba      	bne.n	8006c32 <__swsetup_r+0x3e>
 8006cbc:	060a      	lsls	r2, r1, #24
 8006cbe:	d5b8      	bpl.n	8006c32 <__swsetup_r+0x3e>
 8006cc0:	2240      	movs	r2, #64	; 0x40
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	81a3      	strh	r3, [r4, #12]
 8006cc6:	3801      	subs	r0, #1
 8006cc8:	e7b3      	b.n	8006c32 <__swsetup_r+0x3e>
 8006cca:	0788      	lsls	r0, r1, #30
 8006ccc:	d400      	bmi.n	8006cd0 <__swsetup_r+0xdc>
 8006cce:	6962      	ldr	r2, [r4, #20]
 8006cd0:	60a2      	str	r2, [r4, #8]
 8006cd2:	e7ef      	b.n	8006cb4 <__swsetup_r+0xc0>
 8006cd4:	2000009c 	.word	0x2000009c
 8006cd8:	080077ac 	.word	0x080077ac
 8006cdc:	080077cc 	.word	0x080077cc
 8006ce0:	0800778c 	.word	0x0800778c

08006ce4 <abort>:
 8006ce4:	2006      	movs	r0, #6
 8006ce6:	b510      	push	{r4, lr}
 8006ce8:	f000 fad4 	bl	8007294 <raise>
 8006cec:	2001      	movs	r0, #1
 8006cee:	f7fa faa5 	bl	800123c <_exit>
	...

08006cf4 <__sflush_r>:
 8006cf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cf6:	898b      	ldrh	r3, [r1, #12]
 8006cf8:	0005      	movs	r5, r0
 8006cfa:	000c      	movs	r4, r1
 8006cfc:	071a      	lsls	r2, r3, #28
 8006cfe:	d45f      	bmi.n	8006dc0 <__sflush_r+0xcc>
 8006d00:	684a      	ldr	r2, [r1, #4]
 8006d02:	2a00      	cmp	r2, #0
 8006d04:	dc04      	bgt.n	8006d10 <__sflush_r+0x1c>
 8006d06:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8006d08:	2a00      	cmp	r2, #0
 8006d0a:	dc01      	bgt.n	8006d10 <__sflush_r+0x1c>
 8006d0c:	2000      	movs	r0, #0
 8006d0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006d10:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006d12:	2f00      	cmp	r7, #0
 8006d14:	d0fa      	beq.n	8006d0c <__sflush_r+0x18>
 8006d16:	2200      	movs	r2, #0
 8006d18:	2180      	movs	r1, #128	; 0x80
 8006d1a:	682e      	ldr	r6, [r5, #0]
 8006d1c:	602a      	str	r2, [r5, #0]
 8006d1e:	001a      	movs	r2, r3
 8006d20:	0149      	lsls	r1, r1, #5
 8006d22:	400a      	ands	r2, r1
 8006d24:	420b      	tst	r3, r1
 8006d26:	d034      	beq.n	8006d92 <__sflush_r+0x9e>
 8006d28:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d2a:	89a3      	ldrh	r3, [r4, #12]
 8006d2c:	075b      	lsls	r3, r3, #29
 8006d2e:	d506      	bpl.n	8006d3e <__sflush_r+0x4a>
 8006d30:	6863      	ldr	r3, [r4, #4]
 8006d32:	1ac0      	subs	r0, r0, r3
 8006d34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d001      	beq.n	8006d3e <__sflush_r+0x4a>
 8006d3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d3c:	1ac0      	subs	r0, r0, r3
 8006d3e:	0002      	movs	r2, r0
 8006d40:	6a21      	ldr	r1, [r4, #32]
 8006d42:	2300      	movs	r3, #0
 8006d44:	0028      	movs	r0, r5
 8006d46:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006d48:	47b8      	blx	r7
 8006d4a:	89a1      	ldrh	r1, [r4, #12]
 8006d4c:	1c43      	adds	r3, r0, #1
 8006d4e:	d106      	bne.n	8006d5e <__sflush_r+0x6a>
 8006d50:	682b      	ldr	r3, [r5, #0]
 8006d52:	2b1d      	cmp	r3, #29
 8006d54:	d831      	bhi.n	8006dba <__sflush_r+0xc6>
 8006d56:	4a2c      	ldr	r2, [pc, #176]	; (8006e08 <__sflush_r+0x114>)
 8006d58:	40da      	lsrs	r2, r3
 8006d5a:	07d3      	lsls	r3, r2, #31
 8006d5c:	d52d      	bpl.n	8006dba <__sflush_r+0xc6>
 8006d5e:	2300      	movs	r3, #0
 8006d60:	6063      	str	r3, [r4, #4]
 8006d62:	6923      	ldr	r3, [r4, #16]
 8006d64:	6023      	str	r3, [r4, #0]
 8006d66:	04cb      	lsls	r3, r1, #19
 8006d68:	d505      	bpl.n	8006d76 <__sflush_r+0x82>
 8006d6a:	1c43      	adds	r3, r0, #1
 8006d6c:	d102      	bne.n	8006d74 <__sflush_r+0x80>
 8006d6e:	682b      	ldr	r3, [r5, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d100      	bne.n	8006d76 <__sflush_r+0x82>
 8006d74:	6560      	str	r0, [r4, #84]	; 0x54
 8006d76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d78:	602e      	str	r6, [r5, #0]
 8006d7a:	2900      	cmp	r1, #0
 8006d7c:	d0c6      	beq.n	8006d0c <__sflush_r+0x18>
 8006d7e:	0023      	movs	r3, r4
 8006d80:	3344      	adds	r3, #68	; 0x44
 8006d82:	4299      	cmp	r1, r3
 8006d84:	d002      	beq.n	8006d8c <__sflush_r+0x98>
 8006d86:	0028      	movs	r0, r5
 8006d88:	f7fe fcba 	bl	8005700 <_free_r>
 8006d8c:	2000      	movs	r0, #0
 8006d8e:	6360      	str	r0, [r4, #52]	; 0x34
 8006d90:	e7bd      	b.n	8006d0e <__sflush_r+0x1a>
 8006d92:	2301      	movs	r3, #1
 8006d94:	0028      	movs	r0, r5
 8006d96:	6a21      	ldr	r1, [r4, #32]
 8006d98:	47b8      	blx	r7
 8006d9a:	1c43      	adds	r3, r0, #1
 8006d9c:	d1c5      	bne.n	8006d2a <__sflush_r+0x36>
 8006d9e:	682b      	ldr	r3, [r5, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d0c2      	beq.n	8006d2a <__sflush_r+0x36>
 8006da4:	2b1d      	cmp	r3, #29
 8006da6:	d001      	beq.n	8006dac <__sflush_r+0xb8>
 8006da8:	2b16      	cmp	r3, #22
 8006daa:	d101      	bne.n	8006db0 <__sflush_r+0xbc>
 8006dac:	602e      	str	r6, [r5, #0]
 8006dae:	e7ad      	b.n	8006d0c <__sflush_r+0x18>
 8006db0:	2340      	movs	r3, #64	; 0x40
 8006db2:	89a2      	ldrh	r2, [r4, #12]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	81a3      	strh	r3, [r4, #12]
 8006db8:	e7a9      	b.n	8006d0e <__sflush_r+0x1a>
 8006dba:	2340      	movs	r3, #64	; 0x40
 8006dbc:	430b      	orrs	r3, r1
 8006dbe:	e7fa      	b.n	8006db6 <__sflush_r+0xc2>
 8006dc0:	690f      	ldr	r7, [r1, #16]
 8006dc2:	2f00      	cmp	r7, #0
 8006dc4:	d0a2      	beq.n	8006d0c <__sflush_r+0x18>
 8006dc6:	680a      	ldr	r2, [r1, #0]
 8006dc8:	600f      	str	r7, [r1, #0]
 8006dca:	1bd2      	subs	r2, r2, r7
 8006dcc:	9201      	str	r2, [sp, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	079b      	lsls	r3, r3, #30
 8006dd2:	d100      	bne.n	8006dd6 <__sflush_r+0xe2>
 8006dd4:	694a      	ldr	r2, [r1, #20]
 8006dd6:	60a2      	str	r2, [r4, #8]
 8006dd8:	9b01      	ldr	r3, [sp, #4]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	dc00      	bgt.n	8006de0 <__sflush_r+0xec>
 8006dde:	e795      	b.n	8006d0c <__sflush_r+0x18>
 8006de0:	003a      	movs	r2, r7
 8006de2:	0028      	movs	r0, r5
 8006de4:	9b01      	ldr	r3, [sp, #4]
 8006de6:	6a21      	ldr	r1, [r4, #32]
 8006de8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006dea:	47b0      	blx	r6
 8006dec:	2800      	cmp	r0, #0
 8006dee:	dc06      	bgt.n	8006dfe <__sflush_r+0x10a>
 8006df0:	2340      	movs	r3, #64	; 0x40
 8006df2:	2001      	movs	r0, #1
 8006df4:	89a2      	ldrh	r2, [r4, #12]
 8006df6:	4240      	negs	r0, r0
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	81a3      	strh	r3, [r4, #12]
 8006dfc:	e787      	b.n	8006d0e <__sflush_r+0x1a>
 8006dfe:	9b01      	ldr	r3, [sp, #4]
 8006e00:	183f      	adds	r7, r7, r0
 8006e02:	1a1b      	subs	r3, r3, r0
 8006e04:	9301      	str	r3, [sp, #4]
 8006e06:	e7e7      	b.n	8006dd8 <__sflush_r+0xe4>
 8006e08:	20400001 	.word	0x20400001

08006e0c <_fflush_r>:
 8006e0c:	690b      	ldr	r3, [r1, #16]
 8006e0e:	b570      	push	{r4, r5, r6, lr}
 8006e10:	0005      	movs	r5, r0
 8006e12:	000c      	movs	r4, r1
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d102      	bne.n	8006e1e <_fflush_r+0x12>
 8006e18:	2500      	movs	r5, #0
 8006e1a:	0028      	movs	r0, r5
 8006e1c:	bd70      	pop	{r4, r5, r6, pc}
 8006e1e:	2800      	cmp	r0, #0
 8006e20:	d004      	beq.n	8006e2c <_fflush_r+0x20>
 8006e22:	6983      	ldr	r3, [r0, #24]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d101      	bne.n	8006e2c <_fflush_r+0x20>
 8006e28:	f000 f892 	bl	8006f50 <__sinit>
 8006e2c:	4b14      	ldr	r3, [pc, #80]	; (8006e80 <_fflush_r+0x74>)
 8006e2e:	429c      	cmp	r4, r3
 8006e30:	d11b      	bne.n	8006e6a <_fflush_r+0x5e>
 8006e32:	686c      	ldr	r4, [r5, #4]
 8006e34:	220c      	movs	r2, #12
 8006e36:	5ea3      	ldrsh	r3, [r4, r2]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d0ed      	beq.n	8006e18 <_fflush_r+0xc>
 8006e3c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e3e:	07d2      	lsls	r2, r2, #31
 8006e40:	d404      	bmi.n	8006e4c <_fflush_r+0x40>
 8006e42:	059b      	lsls	r3, r3, #22
 8006e44:	d402      	bmi.n	8006e4c <_fflush_r+0x40>
 8006e46:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e48:	f000 f923 	bl	8007092 <__retarget_lock_acquire_recursive>
 8006e4c:	0028      	movs	r0, r5
 8006e4e:	0021      	movs	r1, r4
 8006e50:	f7ff ff50 	bl	8006cf4 <__sflush_r>
 8006e54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e56:	0005      	movs	r5, r0
 8006e58:	07db      	lsls	r3, r3, #31
 8006e5a:	d4de      	bmi.n	8006e1a <_fflush_r+0xe>
 8006e5c:	89a3      	ldrh	r3, [r4, #12]
 8006e5e:	059b      	lsls	r3, r3, #22
 8006e60:	d4db      	bmi.n	8006e1a <_fflush_r+0xe>
 8006e62:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e64:	f000 f916 	bl	8007094 <__retarget_lock_release_recursive>
 8006e68:	e7d7      	b.n	8006e1a <_fflush_r+0xe>
 8006e6a:	4b06      	ldr	r3, [pc, #24]	; (8006e84 <_fflush_r+0x78>)
 8006e6c:	429c      	cmp	r4, r3
 8006e6e:	d101      	bne.n	8006e74 <_fflush_r+0x68>
 8006e70:	68ac      	ldr	r4, [r5, #8]
 8006e72:	e7df      	b.n	8006e34 <_fflush_r+0x28>
 8006e74:	4b04      	ldr	r3, [pc, #16]	; (8006e88 <_fflush_r+0x7c>)
 8006e76:	429c      	cmp	r4, r3
 8006e78:	d1dc      	bne.n	8006e34 <_fflush_r+0x28>
 8006e7a:	68ec      	ldr	r4, [r5, #12]
 8006e7c:	e7da      	b.n	8006e34 <_fflush_r+0x28>
 8006e7e:	46c0      	nop			; (mov r8, r8)
 8006e80:	080077ac 	.word	0x080077ac
 8006e84:	080077cc 	.word	0x080077cc
 8006e88:	0800778c 	.word	0x0800778c

08006e8c <std>:
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	b510      	push	{r4, lr}
 8006e90:	0004      	movs	r4, r0
 8006e92:	6003      	str	r3, [r0, #0]
 8006e94:	6043      	str	r3, [r0, #4]
 8006e96:	6083      	str	r3, [r0, #8]
 8006e98:	8181      	strh	r1, [r0, #12]
 8006e9a:	6643      	str	r3, [r0, #100]	; 0x64
 8006e9c:	0019      	movs	r1, r3
 8006e9e:	81c2      	strh	r2, [r0, #14]
 8006ea0:	6103      	str	r3, [r0, #16]
 8006ea2:	6143      	str	r3, [r0, #20]
 8006ea4:	6183      	str	r3, [r0, #24]
 8006ea6:	2208      	movs	r2, #8
 8006ea8:	305c      	adds	r0, #92	; 0x5c
 8006eaa:	f7fe fa6f 	bl	800538c <memset>
 8006eae:	4b05      	ldr	r3, [pc, #20]	; (8006ec4 <std+0x38>)
 8006eb0:	6224      	str	r4, [r4, #32]
 8006eb2:	6263      	str	r3, [r4, #36]	; 0x24
 8006eb4:	4b04      	ldr	r3, [pc, #16]	; (8006ec8 <std+0x3c>)
 8006eb6:	62a3      	str	r3, [r4, #40]	; 0x28
 8006eb8:	4b04      	ldr	r3, [pc, #16]	; (8006ecc <std+0x40>)
 8006eba:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ebc:	4b04      	ldr	r3, [pc, #16]	; (8006ed0 <std+0x44>)
 8006ebe:	6323      	str	r3, [r4, #48]	; 0x30
 8006ec0:	bd10      	pop	{r4, pc}
 8006ec2:	46c0      	nop			; (mov r8, r8)
 8006ec4:	08005495 	.word	0x08005495
 8006ec8:	080054c1 	.word	0x080054c1
 8006ecc:	080054f9 	.word	0x080054f9
 8006ed0:	08005525 	.word	0x08005525

08006ed4 <_cleanup_r>:
 8006ed4:	b510      	push	{r4, lr}
 8006ed6:	4902      	ldr	r1, [pc, #8]	; (8006ee0 <_cleanup_r+0xc>)
 8006ed8:	f000 f8ba 	bl	8007050 <_fwalk_reent>
 8006edc:	bd10      	pop	{r4, pc}
 8006ede:	46c0      	nop			; (mov r8, r8)
 8006ee0:	08006e0d 	.word	0x08006e0d

08006ee4 <__sfmoreglue>:
 8006ee4:	b570      	push	{r4, r5, r6, lr}
 8006ee6:	2568      	movs	r5, #104	; 0x68
 8006ee8:	1e4a      	subs	r2, r1, #1
 8006eea:	4355      	muls	r5, r2
 8006eec:	000e      	movs	r6, r1
 8006eee:	0029      	movs	r1, r5
 8006ef0:	3174      	adds	r1, #116	; 0x74
 8006ef2:	f7fe fc71 	bl	80057d8 <_malloc_r>
 8006ef6:	1e04      	subs	r4, r0, #0
 8006ef8:	d008      	beq.n	8006f0c <__sfmoreglue+0x28>
 8006efa:	2100      	movs	r1, #0
 8006efc:	002a      	movs	r2, r5
 8006efe:	6001      	str	r1, [r0, #0]
 8006f00:	6046      	str	r6, [r0, #4]
 8006f02:	300c      	adds	r0, #12
 8006f04:	60a0      	str	r0, [r4, #8]
 8006f06:	3268      	adds	r2, #104	; 0x68
 8006f08:	f7fe fa40 	bl	800538c <memset>
 8006f0c:	0020      	movs	r0, r4
 8006f0e:	bd70      	pop	{r4, r5, r6, pc}

08006f10 <__sfp_lock_acquire>:
 8006f10:	b510      	push	{r4, lr}
 8006f12:	4802      	ldr	r0, [pc, #8]	; (8006f1c <__sfp_lock_acquire+0xc>)
 8006f14:	f000 f8bd 	bl	8007092 <__retarget_lock_acquire_recursive>
 8006f18:	bd10      	pop	{r4, pc}
 8006f1a:	46c0      	nop			; (mov r8, r8)
 8006f1c:	200004f5 	.word	0x200004f5

08006f20 <__sfp_lock_release>:
 8006f20:	b510      	push	{r4, lr}
 8006f22:	4802      	ldr	r0, [pc, #8]	; (8006f2c <__sfp_lock_release+0xc>)
 8006f24:	f000 f8b6 	bl	8007094 <__retarget_lock_release_recursive>
 8006f28:	bd10      	pop	{r4, pc}
 8006f2a:	46c0      	nop			; (mov r8, r8)
 8006f2c:	200004f5 	.word	0x200004f5

08006f30 <__sinit_lock_acquire>:
 8006f30:	b510      	push	{r4, lr}
 8006f32:	4802      	ldr	r0, [pc, #8]	; (8006f3c <__sinit_lock_acquire+0xc>)
 8006f34:	f000 f8ad 	bl	8007092 <__retarget_lock_acquire_recursive>
 8006f38:	bd10      	pop	{r4, pc}
 8006f3a:	46c0      	nop			; (mov r8, r8)
 8006f3c:	200004f6 	.word	0x200004f6

08006f40 <__sinit_lock_release>:
 8006f40:	b510      	push	{r4, lr}
 8006f42:	4802      	ldr	r0, [pc, #8]	; (8006f4c <__sinit_lock_release+0xc>)
 8006f44:	f000 f8a6 	bl	8007094 <__retarget_lock_release_recursive>
 8006f48:	bd10      	pop	{r4, pc}
 8006f4a:	46c0      	nop			; (mov r8, r8)
 8006f4c:	200004f6 	.word	0x200004f6

08006f50 <__sinit>:
 8006f50:	b513      	push	{r0, r1, r4, lr}
 8006f52:	0004      	movs	r4, r0
 8006f54:	f7ff ffec 	bl	8006f30 <__sinit_lock_acquire>
 8006f58:	69a3      	ldr	r3, [r4, #24]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d002      	beq.n	8006f64 <__sinit+0x14>
 8006f5e:	f7ff ffef 	bl	8006f40 <__sinit_lock_release>
 8006f62:	bd13      	pop	{r0, r1, r4, pc}
 8006f64:	64a3      	str	r3, [r4, #72]	; 0x48
 8006f66:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006f68:	6523      	str	r3, [r4, #80]	; 0x50
 8006f6a:	4b13      	ldr	r3, [pc, #76]	; (8006fb8 <__sinit+0x68>)
 8006f6c:	4a13      	ldr	r2, [pc, #76]	; (8006fbc <__sinit+0x6c>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	62a2      	str	r2, [r4, #40]	; 0x28
 8006f72:	9301      	str	r3, [sp, #4]
 8006f74:	42a3      	cmp	r3, r4
 8006f76:	d101      	bne.n	8006f7c <__sinit+0x2c>
 8006f78:	2301      	movs	r3, #1
 8006f7a:	61a3      	str	r3, [r4, #24]
 8006f7c:	0020      	movs	r0, r4
 8006f7e:	f000 f81f 	bl	8006fc0 <__sfp>
 8006f82:	6060      	str	r0, [r4, #4]
 8006f84:	0020      	movs	r0, r4
 8006f86:	f000 f81b 	bl	8006fc0 <__sfp>
 8006f8a:	60a0      	str	r0, [r4, #8]
 8006f8c:	0020      	movs	r0, r4
 8006f8e:	f000 f817 	bl	8006fc0 <__sfp>
 8006f92:	2200      	movs	r2, #0
 8006f94:	2104      	movs	r1, #4
 8006f96:	60e0      	str	r0, [r4, #12]
 8006f98:	6860      	ldr	r0, [r4, #4]
 8006f9a:	f7ff ff77 	bl	8006e8c <std>
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	2109      	movs	r1, #9
 8006fa2:	68a0      	ldr	r0, [r4, #8]
 8006fa4:	f7ff ff72 	bl	8006e8c <std>
 8006fa8:	2202      	movs	r2, #2
 8006faa:	2112      	movs	r1, #18
 8006fac:	68e0      	ldr	r0, [r4, #12]
 8006fae:	f7ff ff6d 	bl	8006e8c <std>
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	61a3      	str	r3, [r4, #24]
 8006fb6:	e7d2      	b.n	8006f5e <__sinit+0xe>
 8006fb8:	08007588 	.word	0x08007588
 8006fbc:	08006ed5 	.word	0x08006ed5

08006fc0 <__sfp>:
 8006fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fc2:	0007      	movs	r7, r0
 8006fc4:	f7ff ffa4 	bl	8006f10 <__sfp_lock_acquire>
 8006fc8:	4b1f      	ldr	r3, [pc, #124]	; (8007048 <__sfp+0x88>)
 8006fca:	681e      	ldr	r6, [r3, #0]
 8006fcc:	69b3      	ldr	r3, [r6, #24]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d102      	bne.n	8006fd8 <__sfp+0x18>
 8006fd2:	0030      	movs	r0, r6
 8006fd4:	f7ff ffbc 	bl	8006f50 <__sinit>
 8006fd8:	3648      	adds	r6, #72	; 0x48
 8006fda:	68b4      	ldr	r4, [r6, #8]
 8006fdc:	6873      	ldr	r3, [r6, #4]
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	d504      	bpl.n	8006fec <__sfp+0x2c>
 8006fe2:	6833      	ldr	r3, [r6, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d022      	beq.n	800702e <__sfp+0x6e>
 8006fe8:	6836      	ldr	r6, [r6, #0]
 8006fea:	e7f6      	b.n	8006fda <__sfp+0x1a>
 8006fec:	220c      	movs	r2, #12
 8006fee:	5ea5      	ldrsh	r5, [r4, r2]
 8006ff0:	2d00      	cmp	r5, #0
 8006ff2:	d11a      	bne.n	800702a <__sfp+0x6a>
 8006ff4:	0020      	movs	r0, r4
 8006ff6:	4b15      	ldr	r3, [pc, #84]	; (800704c <__sfp+0x8c>)
 8006ff8:	3058      	adds	r0, #88	; 0x58
 8006ffa:	60e3      	str	r3, [r4, #12]
 8006ffc:	6665      	str	r5, [r4, #100]	; 0x64
 8006ffe:	f000 f847 	bl	8007090 <__retarget_lock_init_recursive>
 8007002:	f7ff ff8d 	bl	8006f20 <__sfp_lock_release>
 8007006:	0020      	movs	r0, r4
 8007008:	2208      	movs	r2, #8
 800700a:	0029      	movs	r1, r5
 800700c:	6025      	str	r5, [r4, #0]
 800700e:	60a5      	str	r5, [r4, #8]
 8007010:	6065      	str	r5, [r4, #4]
 8007012:	6125      	str	r5, [r4, #16]
 8007014:	6165      	str	r5, [r4, #20]
 8007016:	61a5      	str	r5, [r4, #24]
 8007018:	305c      	adds	r0, #92	; 0x5c
 800701a:	f7fe f9b7 	bl	800538c <memset>
 800701e:	6365      	str	r5, [r4, #52]	; 0x34
 8007020:	63a5      	str	r5, [r4, #56]	; 0x38
 8007022:	64a5      	str	r5, [r4, #72]	; 0x48
 8007024:	64e5      	str	r5, [r4, #76]	; 0x4c
 8007026:	0020      	movs	r0, r4
 8007028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800702a:	3468      	adds	r4, #104	; 0x68
 800702c:	e7d7      	b.n	8006fde <__sfp+0x1e>
 800702e:	2104      	movs	r1, #4
 8007030:	0038      	movs	r0, r7
 8007032:	f7ff ff57 	bl	8006ee4 <__sfmoreglue>
 8007036:	1e04      	subs	r4, r0, #0
 8007038:	6030      	str	r0, [r6, #0]
 800703a:	d1d5      	bne.n	8006fe8 <__sfp+0x28>
 800703c:	f7ff ff70 	bl	8006f20 <__sfp_lock_release>
 8007040:	230c      	movs	r3, #12
 8007042:	603b      	str	r3, [r7, #0]
 8007044:	e7ef      	b.n	8007026 <__sfp+0x66>
 8007046:	46c0      	nop			; (mov r8, r8)
 8007048:	08007588 	.word	0x08007588
 800704c:	ffff0001 	.word	0xffff0001

08007050 <_fwalk_reent>:
 8007050:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007052:	0004      	movs	r4, r0
 8007054:	0006      	movs	r6, r0
 8007056:	2700      	movs	r7, #0
 8007058:	9101      	str	r1, [sp, #4]
 800705a:	3448      	adds	r4, #72	; 0x48
 800705c:	6863      	ldr	r3, [r4, #4]
 800705e:	68a5      	ldr	r5, [r4, #8]
 8007060:	9300      	str	r3, [sp, #0]
 8007062:	9b00      	ldr	r3, [sp, #0]
 8007064:	3b01      	subs	r3, #1
 8007066:	9300      	str	r3, [sp, #0]
 8007068:	d504      	bpl.n	8007074 <_fwalk_reent+0x24>
 800706a:	6824      	ldr	r4, [r4, #0]
 800706c:	2c00      	cmp	r4, #0
 800706e:	d1f5      	bne.n	800705c <_fwalk_reent+0xc>
 8007070:	0038      	movs	r0, r7
 8007072:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007074:	89ab      	ldrh	r3, [r5, #12]
 8007076:	2b01      	cmp	r3, #1
 8007078:	d908      	bls.n	800708c <_fwalk_reent+0x3c>
 800707a:	220e      	movs	r2, #14
 800707c:	5eab      	ldrsh	r3, [r5, r2]
 800707e:	3301      	adds	r3, #1
 8007080:	d004      	beq.n	800708c <_fwalk_reent+0x3c>
 8007082:	0029      	movs	r1, r5
 8007084:	0030      	movs	r0, r6
 8007086:	9b01      	ldr	r3, [sp, #4]
 8007088:	4798      	blx	r3
 800708a:	4307      	orrs	r7, r0
 800708c:	3568      	adds	r5, #104	; 0x68
 800708e:	e7e8      	b.n	8007062 <_fwalk_reent+0x12>

08007090 <__retarget_lock_init_recursive>:
 8007090:	4770      	bx	lr

08007092 <__retarget_lock_acquire_recursive>:
 8007092:	4770      	bx	lr

08007094 <__retarget_lock_release_recursive>:
 8007094:	4770      	bx	lr
	...

08007098 <__swhatbuf_r>:
 8007098:	b570      	push	{r4, r5, r6, lr}
 800709a:	000e      	movs	r6, r1
 800709c:	001d      	movs	r5, r3
 800709e:	230e      	movs	r3, #14
 80070a0:	5ec9      	ldrsh	r1, [r1, r3]
 80070a2:	0014      	movs	r4, r2
 80070a4:	b096      	sub	sp, #88	; 0x58
 80070a6:	2900      	cmp	r1, #0
 80070a8:	da08      	bge.n	80070bc <__swhatbuf_r+0x24>
 80070aa:	220c      	movs	r2, #12
 80070ac:	5eb3      	ldrsh	r3, [r6, r2]
 80070ae:	2200      	movs	r2, #0
 80070b0:	602a      	str	r2, [r5, #0]
 80070b2:	061b      	lsls	r3, r3, #24
 80070b4:	d411      	bmi.n	80070da <__swhatbuf_r+0x42>
 80070b6:	2380      	movs	r3, #128	; 0x80
 80070b8:	00db      	lsls	r3, r3, #3
 80070ba:	e00f      	b.n	80070dc <__swhatbuf_r+0x44>
 80070bc:	466a      	mov	r2, sp
 80070be:	f000 f909 	bl	80072d4 <_fstat_r>
 80070c2:	2800      	cmp	r0, #0
 80070c4:	dbf1      	blt.n	80070aa <__swhatbuf_r+0x12>
 80070c6:	23f0      	movs	r3, #240	; 0xf0
 80070c8:	9901      	ldr	r1, [sp, #4]
 80070ca:	021b      	lsls	r3, r3, #8
 80070cc:	4019      	ands	r1, r3
 80070ce:	4b05      	ldr	r3, [pc, #20]	; (80070e4 <__swhatbuf_r+0x4c>)
 80070d0:	18c9      	adds	r1, r1, r3
 80070d2:	424b      	negs	r3, r1
 80070d4:	4159      	adcs	r1, r3
 80070d6:	6029      	str	r1, [r5, #0]
 80070d8:	e7ed      	b.n	80070b6 <__swhatbuf_r+0x1e>
 80070da:	2340      	movs	r3, #64	; 0x40
 80070dc:	2000      	movs	r0, #0
 80070de:	6023      	str	r3, [r4, #0]
 80070e0:	b016      	add	sp, #88	; 0x58
 80070e2:	bd70      	pop	{r4, r5, r6, pc}
 80070e4:	ffffe000 	.word	0xffffe000

080070e8 <__smakebuf_r>:
 80070e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070ea:	2602      	movs	r6, #2
 80070ec:	898b      	ldrh	r3, [r1, #12]
 80070ee:	0005      	movs	r5, r0
 80070f0:	000c      	movs	r4, r1
 80070f2:	4233      	tst	r3, r6
 80070f4:	d006      	beq.n	8007104 <__smakebuf_r+0x1c>
 80070f6:	0023      	movs	r3, r4
 80070f8:	3347      	adds	r3, #71	; 0x47
 80070fa:	6023      	str	r3, [r4, #0]
 80070fc:	6123      	str	r3, [r4, #16]
 80070fe:	2301      	movs	r3, #1
 8007100:	6163      	str	r3, [r4, #20]
 8007102:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8007104:	466a      	mov	r2, sp
 8007106:	ab01      	add	r3, sp, #4
 8007108:	f7ff ffc6 	bl	8007098 <__swhatbuf_r>
 800710c:	9900      	ldr	r1, [sp, #0]
 800710e:	0007      	movs	r7, r0
 8007110:	0028      	movs	r0, r5
 8007112:	f7fe fb61 	bl	80057d8 <_malloc_r>
 8007116:	2800      	cmp	r0, #0
 8007118:	d108      	bne.n	800712c <__smakebuf_r+0x44>
 800711a:	220c      	movs	r2, #12
 800711c:	5ea3      	ldrsh	r3, [r4, r2]
 800711e:	059a      	lsls	r2, r3, #22
 8007120:	d4ef      	bmi.n	8007102 <__smakebuf_r+0x1a>
 8007122:	2203      	movs	r2, #3
 8007124:	4393      	bics	r3, r2
 8007126:	431e      	orrs	r6, r3
 8007128:	81a6      	strh	r6, [r4, #12]
 800712a:	e7e4      	b.n	80070f6 <__smakebuf_r+0xe>
 800712c:	4b0f      	ldr	r3, [pc, #60]	; (800716c <__smakebuf_r+0x84>)
 800712e:	62ab      	str	r3, [r5, #40]	; 0x28
 8007130:	2380      	movs	r3, #128	; 0x80
 8007132:	89a2      	ldrh	r2, [r4, #12]
 8007134:	6020      	str	r0, [r4, #0]
 8007136:	4313      	orrs	r3, r2
 8007138:	81a3      	strh	r3, [r4, #12]
 800713a:	9b00      	ldr	r3, [sp, #0]
 800713c:	6120      	str	r0, [r4, #16]
 800713e:	6163      	str	r3, [r4, #20]
 8007140:	9b01      	ldr	r3, [sp, #4]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d00d      	beq.n	8007162 <__smakebuf_r+0x7a>
 8007146:	0028      	movs	r0, r5
 8007148:	230e      	movs	r3, #14
 800714a:	5ee1      	ldrsh	r1, [r4, r3]
 800714c:	f000 f8d4 	bl	80072f8 <_isatty_r>
 8007150:	2800      	cmp	r0, #0
 8007152:	d006      	beq.n	8007162 <__smakebuf_r+0x7a>
 8007154:	2203      	movs	r2, #3
 8007156:	89a3      	ldrh	r3, [r4, #12]
 8007158:	4393      	bics	r3, r2
 800715a:	001a      	movs	r2, r3
 800715c:	2301      	movs	r3, #1
 800715e:	4313      	orrs	r3, r2
 8007160:	81a3      	strh	r3, [r4, #12]
 8007162:	89a0      	ldrh	r0, [r4, #12]
 8007164:	4307      	orrs	r7, r0
 8007166:	81a7      	strh	r7, [r4, #12]
 8007168:	e7cb      	b.n	8007102 <__smakebuf_r+0x1a>
 800716a:	46c0      	nop			; (mov r8, r8)
 800716c:	08006ed5 	.word	0x08006ed5

08007170 <memchr>:
 8007170:	b2c9      	uxtb	r1, r1
 8007172:	1882      	adds	r2, r0, r2
 8007174:	4290      	cmp	r0, r2
 8007176:	d101      	bne.n	800717c <memchr+0xc>
 8007178:	2000      	movs	r0, #0
 800717a:	4770      	bx	lr
 800717c:	7803      	ldrb	r3, [r0, #0]
 800717e:	428b      	cmp	r3, r1
 8007180:	d0fb      	beq.n	800717a <memchr+0xa>
 8007182:	3001      	adds	r0, #1
 8007184:	e7f6      	b.n	8007174 <memchr+0x4>

08007186 <memcpy>:
 8007186:	2300      	movs	r3, #0
 8007188:	b510      	push	{r4, lr}
 800718a:	429a      	cmp	r2, r3
 800718c:	d100      	bne.n	8007190 <memcpy+0xa>
 800718e:	bd10      	pop	{r4, pc}
 8007190:	5ccc      	ldrb	r4, [r1, r3]
 8007192:	54c4      	strb	r4, [r0, r3]
 8007194:	3301      	adds	r3, #1
 8007196:	e7f8      	b.n	800718a <memcpy+0x4>

08007198 <memmove>:
 8007198:	b510      	push	{r4, lr}
 800719a:	4288      	cmp	r0, r1
 800719c:	d902      	bls.n	80071a4 <memmove+0xc>
 800719e:	188b      	adds	r3, r1, r2
 80071a0:	4298      	cmp	r0, r3
 80071a2:	d303      	bcc.n	80071ac <memmove+0x14>
 80071a4:	2300      	movs	r3, #0
 80071a6:	e007      	b.n	80071b8 <memmove+0x20>
 80071a8:	5c8b      	ldrb	r3, [r1, r2]
 80071aa:	5483      	strb	r3, [r0, r2]
 80071ac:	3a01      	subs	r2, #1
 80071ae:	d2fb      	bcs.n	80071a8 <memmove+0x10>
 80071b0:	bd10      	pop	{r4, pc}
 80071b2:	5ccc      	ldrb	r4, [r1, r3]
 80071b4:	54c4      	strb	r4, [r0, r3]
 80071b6:	3301      	adds	r3, #1
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d1fa      	bne.n	80071b2 <memmove+0x1a>
 80071bc:	e7f8      	b.n	80071b0 <memmove+0x18>
	...

080071c0 <__malloc_lock>:
 80071c0:	b510      	push	{r4, lr}
 80071c2:	4802      	ldr	r0, [pc, #8]	; (80071cc <__malloc_lock+0xc>)
 80071c4:	f7ff ff65 	bl	8007092 <__retarget_lock_acquire_recursive>
 80071c8:	bd10      	pop	{r4, pc}
 80071ca:	46c0      	nop			; (mov r8, r8)
 80071cc:	200004f4 	.word	0x200004f4

080071d0 <__malloc_unlock>:
 80071d0:	b510      	push	{r4, lr}
 80071d2:	4802      	ldr	r0, [pc, #8]	; (80071dc <__malloc_unlock+0xc>)
 80071d4:	f7ff ff5e 	bl	8007094 <__retarget_lock_release_recursive>
 80071d8:	bd10      	pop	{r4, pc}
 80071da:	46c0      	nop			; (mov r8, r8)
 80071dc:	200004f4 	.word	0x200004f4

080071e0 <_realloc_r>:
 80071e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071e2:	0007      	movs	r7, r0
 80071e4:	000e      	movs	r6, r1
 80071e6:	0014      	movs	r4, r2
 80071e8:	2900      	cmp	r1, #0
 80071ea:	d105      	bne.n	80071f8 <_realloc_r+0x18>
 80071ec:	0011      	movs	r1, r2
 80071ee:	f7fe faf3 	bl	80057d8 <_malloc_r>
 80071f2:	0005      	movs	r5, r0
 80071f4:	0028      	movs	r0, r5
 80071f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80071f8:	2a00      	cmp	r2, #0
 80071fa:	d103      	bne.n	8007204 <_realloc_r+0x24>
 80071fc:	f7fe fa80 	bl	8005700 <_free_r>
 8007200:	0025      	movs	r5, r4
 8007202:	e7f7      	b.n	80071f4 <_realloc_r+0x14>
 8007204:	f000 f88a 	bl	800731c <_malloc_usable_size_r>
 8007208:	9001      	str	r0, [sp, #4]
 800720a:	4284      	cmp	r4, r0
 800720c:	d803      	bhi.n	8007216 <_realloc_r+0x36>
 800720e:	0035      	movs	r5, r6
 8007210:	0843      	lsrs	r3, r0, #1
 8007212:	42a3      	cmp	r3, r4
 8007214:	d3ee      	bcc.n	80071f4 <_realloc_r+0x14>
 8007216:	0021      	movs	r1, r4
 8007218:	0038      	movs	r0, r7
 800721a:	f7fe fadd 	bl	80057d8 <_malloc_r>
 800721e:	1e05      	subs	r5, r0, #0
 8007220:	d0e8      	beq.n	80071f4 <_realloc_r+0x14>
 8007222:	9b01      	ldr	r3, [sp, #4]
 8007224:	0022      	movs	r2, r4
 8007226:	429c      	cmp	r4, r3
 8007228:	d900      	bls.n	800722c <_realloc_r+0x4c>
 800722a:	001a      	movs	r2, r3
 800722c:	0031      	movs	r1, r6
 800722e:	0028      	movs	r0, r5
 8007230:	f7ff ffa9 	bl	8007186 <memcpy>
 8007234:	0031      	movs	r1, r6
 8007236:	0038      	movs	r0, r7
 8007238:	f7fe fa62 	bl	8005700 <_free_r>
 800723c:	e7da      	b.n	80071f4 <_realloc_r+0x14>

0800723e <_raise_r>:
 800723e:	b570      	push	{r4, r5, r6, lr}
 8007240:	0004      	movs	r4, r0
 8007242:	000d      	movs	r5, r1
 8007244:	291f      	cmp	r1, #31
 8007246:	d904      	bls.n	8007252 <_raise_r+0x14>
 8007248:	2316      	movs	r3, #22
 800724a:	6003      	str	r3, [r0, #0]
 800724c:	2001      	movs	r0, #1
 800724e:	4240      	negs	r0, r0
 8007250:	bd70      	pop	{r4, r5, r6, pc}
 8007252:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007254:	2b00      	cmp	r3, #0
 8007256:	d004      	beq.n	8007262 <_raise_r+0x24>
 8007258:	008a      	lsls	r2, r1, #2
 800725a:	189b      	adds	r3, r3, r2
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	2a00      	cmp	r2, #0
 8007260:	d108      	bne.n	8007274 <_raise_r+0x36>
 8007262:	0020      	movs	r0, r4
 8007264:	f000 f832 	bl	80072cc <_getpid_r>
 8007268:	002a      	movs	r2, r5
 800726a:	0001      	movs	r1, r0
 800726c:	0020      	movs	r0, r4
 800726e:	f000 f81b 	bl	80072a8 <_kill_r>
 8007272:	e7ed      	b.n	8007250 <_raise_r+0x12>
 8007274:	2000      	movs	r0, #0
 8007276:	2a01      	cmp	r2, #1
 8007278:	d0ea      	beq.n	8007250 <_raise_r+0x12>
 800727a:	1c51      	adds	r1, r2, #1
 800727c:	d103      	bne.n	8007286 <_raise_r+0x48>
 800727e:	2316      	movs	r3, #22
 8007280:	3001      	adds	r0, #1
 8007282:	6023      	str	r3, [r4, #0]
 8007284:	e7e4      	b.n	8007250 <_raise_r+0x12>
 8007286:	2400      	movs	r4, #0
 8007288:	0028      	movs	r0, r5
 800728a:	601c      	str	r4, [r3, #0]
 800728c:	4790      	blx	r2
 800728e:	0020      	movs	r0, r4
 8007290:	e7de      	b.n	8007250 <_raise_r+0x12>
	...

08007294 <raise>:
 8007294:	b510      	push	{r4, lr}
 8007296:	4b03      	ldr	r3, [pc, #12]	; (80072a4 <raise+0x10>)
 8007298:	0001      	movs	r1, r0
 800729a:	6818      	ldr	r0, [r3, #0]
 800729c:	f7ff ffcf 	bl	800723e <_raise_r>
 80072a0:	bd10      	pop	{r4, pc}
 80072a2:	46c0      	nop			; (mov r8, r8)
 80072a4:	2000009c 	.word	0x2000009c

080072a8 <_kill_r>:
 80072a8:	2300      	movs	r3, #0
 80072aa:	b570      	push	{r4, r5, r6, lr}
 80072ac:	4d06      	ldr	r5, [pc, #24]	; (80072c8 <_kill_r+0x20>)
 80072ae:	0004      	movs	r4, r0
 80072b0:	0008      	movs	r0, r1
 80072b2:	0011      	movs	r1, r2
 80072b4:	602b      	str	r3, [r5, #0]
 80072b6:	f7f9 ffb1 	bl	800121c <_kill>
 80072ba:	1c43      	adds	r3, r0, #1
 80072bc:	d103      	bne.n	80072c6 <_kill_r+0x1e>
 80072be:	682b      	ldr	r3, [r5, #0]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d000      	beq.n	80072c6 <_kill_r+0x1e>
 80072c4:	6023      	str	r3, [r4, #0]
 80072c6:	bd70      	pop	{r4, r5, r6, pc}
 80072c8:	200004f0 	.word	0x200004f0

080072cc <_getpid_r>:
 80072cc:	b510      	push	{r4, lr}
 80072ce:	f7f9 ff9f 	bl	8001210 <_getpid>
 80072d2:	bd10      	pop	{r4, pc}

080072d4 <_fstat_r>:
 80072d4:	2300      	movs	r3, #0
 80072d6:	b570      	push	{r4, r5, r6, lr}
 80072d8:	4d06      	ldr	r5, [pc, #24]	; (80072f4 <_fstat_r+0x20>)
 80072da:	0004      	movs	r4, r0
 80072dc:	0008      	movs	r0, r1
 80072de:	0011      	movs	r1, r2
 80072e0:	602b      	str	r3, [r5, #0]
 80072e2:	f7f9 fffa 	bl	80012da <_fstat>
 80072e6:	1c43      	adds	r3, r0, #1
 80072e8:	d103      	bne.n	80072f2 <_fstat_r+0x1e>
 80072ea:	682b      	ldr	r3, [r5, #0]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d000      	beq.n	80072f2 <_fstat_r+0x1e>
 80072f0:	6023      	str	r3, [r4, #0]
 80072f2:	bd70      	pop	{r4, r5, r6, pc}
 80072f4:	200004f0 	.word	0x200004f0

080072f8 <_isatty_r>:
 80072f8:	2300      	movs	r3, #0
 80072fa:	b570      	push	{r4, r5, r6, lr}
 80072fc:	4d06      	ldr	r5, [pc, #24]	; (8007318 <_isatty_r+0x20>)
 80072fe:	0004      	movs	r4, r0
 8007300:	0008      	movs	r0, r1
 8007302:	602b      	str	r3, [r5, #0]
 8007304:	f7f9 fff7 	bl	80012f6 <_isatty>
 8007308:	1c43      	adds	r3, r0, #1
 800730a:	d103      	bne.n	8007314 <_isatty_r+0x1c>
 800730c:	682b      	ldr	r3, [r5, #0]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d000      	beq.n	8007314 <_isatty_r+0x1c>
 8007312:	6023      	str	r3, [r4, #0]
 8007314:	bd70      	pop	{r4, r5, r6, pc}
 8007316:	46c0      	nop			; (mov r8, r8)
 8007318:	200004f0 	.word	0x200004f0

0800731c <_malloc_usable_size_r>:
 800731c:	1f0b      	subs	r3, r1, #4
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	1f18      	subs	r0, r3, #4
 8007322:	2b00      	cmp	r3, #0
 8007324:	da01      	bge.n	800732a <_malloc_usable_size_r+0xe>
 8007326:	580b      	ldr	r3, [r1, r0]
 8007328:	18c0      	adds	r0, r0, r3
 800732a:	4770      	bx	lr

0800732c <_init>:
 800732c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800732e:	46c0      	nop			; (mov r8, r8)
 8007330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007332:	bc08      	pop	{r3}
 8007334:	469e      	mov	lr, r3
 8007336:	4770      	bx	lr

08007338 <_fini>:
 8007338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800733a:	46c0      	nop			; (mov r8, r8)
 800733c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800733e:	bc08      	pop	{r3}
 8007340:	469e      	mov	lr, r3
 8007342:	4770      	bx	lr
