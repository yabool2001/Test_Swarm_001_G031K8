
Test_Swarm_001_G031K8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072e4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  080073a0  080073a0  000173a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007854  08007854  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08007854  08007854  00017854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800785c  0800785c  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800785c  0800785c  0001785c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007860  08007860  00017860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08007864  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000440  200000fc  08007960  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000053c  08007960  0002053c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015354  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002af9  00000000  00000000  00035478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001258  00000000  00000000  00037f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001140  00000000  00000000  000391d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188b8  00000000  00000000  0003a310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001501b  00000000  00000000  00052bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b29b  00000000  00000000  00067be3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00102e7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000510c  00000000  00000000  00102ed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200000fc 	.word	0x200000fc
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08007388 	.word	0x08007388

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000100 	.word	0x20000100
 8000100:	08007388 	.word	0x08007388

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	469b      	mov	fp, r3
 800048a:	d433      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048c:	465a      	mov	r2, fp
 800048e:	4653      	mov	r3, sl
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83a      	bhi.n	8000516 <__udivmoddi4+0xc2>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e078      	b.n	8000598 <__udivmoddi4+0x144>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e075      	b.n	800059e <__udivmoddi4+0x14a>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e028      	b.n	800051e <__udivmoddi4+0xca>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	2320      	movs	r3, #32
 80004f8:	1a9b      	subs	r3, r3, r2
 80004fa:	4652      	mov	r2, sl
 80004fc:	40da      	lsrs	r2, r3
 80004fe:	4641      	mov	r1, r8
 8000500:	0013      	movs	r3, r2
 8000502:	464a      	mov	r2, r9
 8000504:	408a      	lsls	r2, r1
 8000506:	0017      	movs	r7, r2
 8000508:	4642      	mov	r2, r8
 800050a:	431f      	orrs	r7, r3
 800050c:	4653      	mov	r3, sl
 800050e:	4093      	lsls	r3, r2
 8000510:	001e      	movs	r6, r3
 8000512:	42af      	cmp	r7, r5
 8000514:	d9c4      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000516:	2200      	movs	r2, #0
 8000518:	2300      	movs	r3, #0
 800051a:	9200      	str	r2, [sp, #0]
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	4643      	mov	r3, r8
 8000520:	2b00      	cmp	r3, #0
 8000522:	d0d9      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000524:	07fb      	lsls	r3, r7, #31
 8000526:	0872      	lsrs	r2, r6, #1
 8000528:	431a      	orrs	r2, r3
 800052a:	4646      	mov	r6, r8
 800052c:	087b      	lsrs	r3, r7, #1
 800052e:	e00e      	b.n	800054e <__udivmoddi4+0xfa>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d101      	bne.n	8000538 <__udivmoddi4+0xe4>
 8000534:	42a2      	cmp	r2, r4
 8000536:	d80c      	bhi.n	8000552 <__udivmoddi4+0xfe>
 8000538:	1aa4      	subs	r4, r4, r2
 800053a:	419d      	sbcs	r5, r3
 800053c:	2001      	movs	r0, #1
 800053e:	1924      	adds	r4, r4, r4
 8000540:	416d      	adcs	r5, r5
 8000542:	2100      	movs	r1, #0
 8000544:	3e01      	subs	r6, #1
 8000546:	1824      	adds	r4, r4, r0
 8000548:	414d      	adcs	r5, r1
 800054a:	2e00      	cmp	r6, #0
 800054c:	d006      	beq.n	800055c <__udivmoddi4+0x108>
 800054e:	42ab      	cmp	r3, r5
 8000550:	d9ee      	bls.n	8000530 <__udivmoddi4+0xdc>
 8000552:	3e01      	subs	r6, #1
 8000554:	1924      	adds	r4, r4, r4
 8000556:	416d      	adcs	r5, r5
 8000558:	2e00      	cmp	r6, #0
 800055a:	d1f8      	bne.n	800054e <__udivmoddi4+0xfa>
 800055c:	9800      	ldr	r0, [sp, #0]
 800055e:	9901      	ldr	r1, [sp, #4]
 8000560:	465b      	mov	r3, fp
 8000562:	1900      	adds	r0, r0, r4
 8000564:	4169      	adcs	r1, r5
 8000566:	2b00      	cmp	r3, #0
 8000568:	db24      	blt.n	80005b4 <__udivmoddi4+0x160>
 800056a:	002b      	movs	r3, r5
 800056c:	465a      	mov	r2, fp
 800056e:	4644      	mov	r4, r8
 8000570:	40d3      	lsrs	r3, r2
 8000572:	002a      	movs	r2, r5
 8000574:	40e2      	lsrs	r2, r4
 8000576:	001c      	movs	r4, r3
 8000578:	465b      	mov	r3, fp
 800057a:	0015      	movs	r5, r2
 800057c:	2b00      	cmp	r3, #0
 800057e:	db2a      	blt.n	80005d6 <__udivmoddi4+0x182>
 8000580:	0026      	movs	r6, r4
 8000582:	409e      	lsls	r6, r3
 8000584:	0033      	movs	r3, r6
 8000586:	0026      	movs	r6, r4
 8000588:	4647      	mov	r7, r8
 800058a:	40be      	lsls	r6, r7
 800058c:	0032      	movs	r2, r6
 800058e:	1a80      	subs	r0, r0, r2
 8000590:	4199      	sbcs	r1, r3
 8000592:	9000      	str	r0, [sp, #0]
 8000594:	9101      	str	r1, [sp, #4]
 8000596:	e79f      	b.n	80004d8 <__udivmoddi4+0x84>
 8000598:	42a3      	cmp	r3, r4
 800059a:	d8bc      	bhi.n	8000516 <__udivmoddi4+0xc2>
 800059c:	e783      	b.n	80004a6 <__udivmoddi4+0x52>
 800059e:	4642      	mov	r2, r8
 80005a0:	2320      	movs	r3, #32
 80005a2:	2100      	movs	r1, #0
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	2200      	movs	r2, #0
 80005a8:	9100      	str	r1, [sp, #0]
 80005aa:	9201      	str	r2, [sp, #4]
 80005ac:	2201      	movs	r2, #1
 80005ae:	40da      	lsrs	r2, r3
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	e786      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	2320      	movs	r3, #32
 80005b8:	1a9b      	subs	r3, r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	4646      	mov	r6, r8
 80005be:	409a      	lsls	r2, r3
 80005c0:	0023      	movs	r3, r4
 80005c2:	40f3      	lsrs	r3, r6
 80005c4:	4644      	mov	r4, r8
 80005c6:	4313      	orrs	r3, r2
 80005c8:	002a      	movs	r2, r5
 80005ca:	40e2      	lsrs	r2, r4
 80005cc:	001c      	movs	r4, r3
 80005ce:	465b      	mov	r3, fp
 80005d0:	0015      	movs	r5, r2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	dad4      	bge.n	8000580 <__udivmoddi4+0x12c>
 80005d6:	4642      	mov	r2, r8
 80005d8:	002f      	movs	r7, r5
 80005da:	2320      	movs	r3, #32
 80005dc:	0026      	movs	r6, r4
 80005de:	4097      	lsls	r7, r2
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	40de      	lsrs	r6, r3
 80005e4:	003b      	movs	r3, r7
 80005e6:	4333      	orrs	r3, r6
 80005e8:	e7cd      	b.n	8000586 <__udivmoddi4+0x132>
 80005ea:	46c0      	nop			; (mov r8, r8)

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f000 ff3d 	bl	80014c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064a:	f000 f985 	bl	8000958 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064e:	f000 fb0d 	bl	8000c6c <MX_GPIO_Init>
  MX_DMA_Init();
 8000652:	f000 faed 	bl	8000c30 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000656:	f000 fa9d 	bl	8000b94 <MX_USART1_UART_Init>
  MX_RTC_Init();
 800065a:	f000 f9d3 	bl	8000a04 <MX_RTC_Init>
  MX_TIM14_Init();
 800065e:	f000 fa47 	bl	8000af0 <MX_TIM14_Init>
  MX_TIM16_Init();
 8000662:	f000 fa6d 	bl	8000b40 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  __HAL_TIM_CLEAR_IT ( &htim14 , TIM_IT_UPDATE ) ; // żeby nie generować przerwania TIM6 od razu: https://stackoverflow.com/questions/71099885/why-hal-tim-periodelapsedcallback-gets-called-immediately-after-hal-tim-base-sta
 8000666:	4b8f      	ldr	r3, [pc, #572]	; (80008a4 <main+0x264>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	2202      	movs	r2, #2
 800066c:	4252      	negs	r2, r2
 800066e:	611a      	str	r2, [r3, #16]
  __HAL_TIM_CLEAR_IT ( &htim16 , TIM_IT_UPDATE ) ; // żeby nie generować przerwania TIM6 od razu: https://stackoverflow.com/questions/71099885/why-hal-tim-periodelapsedcallback-gets-called-immediately-after-hal-tim-base-sta
 8000670:	4b8d      	ldr	r3, [pc, #564]	; (80008a8 <main+0x268>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2202      	movs	r2, #2
 8000676:	4252      	negs	r2, r2
 8000678:	611a      	str	r2, [r3, #16]
  HAL_UARTEx_ReceiveToIdle_DMA ( &huart1 , rx_buff , sizeof ( rx_buff ) ) ;
 800067a:	498c      	ldr	r1, [pc, #560]	; (80008ac <main+0x26c>)
 800067c:	4b8c      	ldr	r3, [pc, #560]	; (80008b0 <main+0x270>)
 800067e:	22c8      	movs	r2, #200	; 0xc8
 8000680:	0018      	movs	r0, r3
 8000682:	f004 fdc1 	bl	8005208 <HAL_UARTEx_ReceiveToIdle_DMA>

  send2swarm_at_command ( cs_at_comm , cs_answer , 1 ) ;
 8000686:	4b8b      	ldr	r3, [pc, #556]	; (80008b4 <main+0x274>)
 8000688:	6818      	ldr	r0, [r3, #0]
 800068a:	4b8b      	ldr	r3, [pc, #556]	; (80008b8 <main+0x278>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2201      	movs	r2, #1
 8000690:	0019      	movs	r1, r3
 8000692:	f000 fb4b 	bl	8000d2c <send2swarm_at_command>
  if ( checklist == 1 )
 8000696:	4b89      	ldr	r3, [pc, #548]	; (80008bc <main+0x27c>)
 8000698:	881b      	ldrh	r3, [r3, #0]
 800069a:	2b01      	cmp	r3, #1
 800069c:	d107      	bne.n	80006ae <main+0x6e>
	  send2swarm_at_command ( rt_0_at_comm , rt_ok_answer , 2 ) ;
 800069e:	4b88      	ldr	r3, [pc, #544]	; (80008c0 <main+0x280>)
 80006a0:	6818      	ldr	r0, [r3, #0]
 80006a2:	4b88      	ldr	r3, [pc, #544]	; (80008c4 <main+0x284>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	2202      	movs	r2, #2
 80006a8:	0019      	movs	r1, r3
 80006aa:	f000 fb3f 	bl	8000d2c <send2swarm_at_command>
  if ( checklist == 2 )
 80006ae:	4b83      	ldr	r3, [pc, #524]	; (80008bc <main+0x27c>)
 80006b0:	881b      	ldrh	r3, [r3, #0]
 80006b2:	2b02      	cmp	r3, #2
 80006b4:	d107      	bne.n	80006c6 <main+0x86>
	  send2swarm_at_command ( rt_q_rate_at_comm , rt_0_answer , 3 ) ; // Query RT rate
 80006b6:	4b84      	ldr	r3, [pc, #528]	; (80008c8 <main+0x288>)
 80006b8:	6818      	ldr	r0, [r3, #0]
 80006ba:	4b84      	ldr	r3, [pc, #528]	; (80008cc <main+0x28c>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	2203      	movs	r2, #3
 80006c0:	0019      	movs	r1, r3
 80006c2:	f000 fb33 	bl	8000d2c <send2swarm_at_command>
  if ( checklist == 3 )
 80006c6:	4b7d      	ldr	r3, [pc, #500]	; (80008bc <main+0x27c>)
 80006c8:	881b      	ldrh	r3, [r3, #0]
 80006ca:	2b03      	cmp	r3, #3
 80006cc:	d107      	bne.n	80006de <main+0x9e>
	  send2swarm_at_command ( pw_0_at_comm , pw_ok_answer , 4 ) ;
 80006ce:	4b80      	ldr	r3, [pc, #512]	; (80008d0 <main+0x290>)
 80006d0:	6818      	ldr	r0, [r3, #0]
 80006d2:	4b80      	ldr	r3, [pc, #512]	; (80008d4 <main+0x294>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	2204      	movs	r2, #4
 80006d8:	0019      	movs	r1, r3
 80006da:	f000 fb27 	bl	8000d2c <send2swarm_at_command>
  if ( checklist == 4 )
 80006de:	4b77      	ldr	r3, [pc, #476]	; (80008bc <main+0x27c>)
 80006e0:	881b      	ldrh	r3, [r3, #0]
 80006e2:	2b04      	cmp	r3, #4
 80006e4:	d107      	bne.n	80006f6 <main+0xb6>
	  send2swarm_at_command ( pw_q_rate_at_comm , pw_0_answer , 5 ) ;
 80006e6:	4b7c      	ldr	r3, [pc, #496]	; (80008d8 <main+0x298>)
 80006e8:	6818      	ldr	r0, [r3, #0]
 80006ea:	4b7c      	ldr	r3, [pc, #496]	; (80008dc <main+0x29c>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2205      	movs	r2, #5
 80006f0:	0019      	movs	r1, r3
 80006f2:	f000 fb1b 	bl	8000d2c <send2swarm_at_command>
  if ( checklist == 5 )
 80006f6:	4b71      	ldr	r3, [pc, #452]	; (80008bc <main+0x27c>)
 80006f8:	881b      	ldrh	r3, [r3, #0]
 80006fa:	2b05      	cmp	r3, #5
 80006fc:	d107      	bne.n	800070e <main+0xce>
	  send2swarm_at_command ( dt_0_at_comm , dt_ok_answer , 6 ) ;
 80006fe:	4b78      	ldr	r3, [pc, #480]	; (80008e0 <main+0x2a0>)
 8000700:	6818      	ldr	r0, [r3, #0]
 8000702:	4b78      	ldr	r3, [pc, #480]	; (80008e4 <main+0x2a4>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	2206      	movs	r2, #6
 8000708:	0019      	movs	r1, r3
 800070a:	f000 fb0f 	bl	8000d2c <send2swarm_at_command>
  if ( checklist == 6 )
 800070e:	4b6b      	ldr	r3, [pc, #428]	; (80008bc <main+0x27c>)
 8000710:	881b      	ldrh	r3, [r3, #0]
 8000712:	2b06      	cmp	r3, #6
 8000714:	d107      	bne.n	8000726 <main+0xe6>
	  send2swarm_at_command ( dt_q_rate_at_comm , dt_0_answer , 7 ) ;
 8000716:	4b74      	ldr	r3, [pc, #464]	; (80008e8 <main+0x2a8>)
 8000718:	6818      	ldr	r0, [r3, #0]
 800071a:	4b74      	ldr	r3, [pc, #464]	; (80008ec <main+0x2ac>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2207      	movs	r2, #7
 8000720:	0019      	movs	r1, r3
 8000722:	f000 fb03 	bl	8000d2c <send2swarm_at_command>
  if ( checklist == 7 )
 8000726:	4b65      	ldr	r3, [pc, #404]	; (80008bc <main+0x27c>)
 8000728:	881b      	ldrh	r3, [r3, #0]
 800072a:	2b07      	cmp	r3, #7
 800072c:	d107      	bne.n	800073e <main+0xfe>
	  send2swarm_at_command ( gs_0_at_comm , gs_ok_answer , 8 ) ;
 800072e:	4b70      	ldr	r3, [pc, #448]	; (80008f0 <main+0x2b0>)
 8000730:	6818      	ldr	r0, [r3, #0]
 8000732:	4b70      	ldr	r3, [pc, #448]	; (80008f4 <main+0x2b4>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	2208      	movs	r2, #8
 8000738:	0019      	movs	r1, r3
 800073a:	f000 faf7 	bl	8000d2c <send2swarm_at_command>
  if ( checklist == 8 )
 800073e:	4b5f      	ldr	r3, [pc, #380]	; (80008bc <main+0x27c>)
 8000740:	881b      	ldrh	r3, [r3, #0]
 8000742:	2b08      	cmp	r3, #8
 8000744:	d107      	bne.n	8000756 <main+0x116>
	  send2swarm_at_command ( gs_q_rate_at_comm , gs_0_answer , 9 ) ;
 8000746:	4b6c      	ldr	r3, [pc, #432]	; (80008f8 <main+0x2b8>)
 8000748:	6818      	ldr	r0, [r3, #0]
 800074a:	4b6c      	ldr	r3, [pc, #432]	; (80008fc <main+0x2bc>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	2209      	movs	r2, #9
 8000750:	0019      	movs	r1, r3
 8000752:	f000 faeb 	bl	8000d2c <send2swarm_at_command>
  if ( checklist == 9 )
 8000756:	4b59      	ldr	r3, [pc, #356]	; (80008bc <main+0x27c>)
 8000758:	881b      	ldrh	r3, [r3, #0]
 800075a:	2b09      	cmp	r3, #9
 800075c:	d107      	bne.n	800076e <main+0x12e>
	  send2swarm_at_command ( gj_0_at_comm , gj_ok_answer , 10 ) ;
 800075e:	4b68      	ldr	r3, [pc, #416]	; (8000900 <main+0x2c0>)
 8000760:	6818      	ldr	r0, [r3, #0]
 8000762:	4b68      	ldr	r3, [pc, #416]	; (8000904 <main+0x2c4>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	220a      	movs	r2, #10
 8000768:	0019      	movs	r1, r3
 800076a:	f000 fadf 	bl	8000d2c <send2swarm_at_command>
  if ( checklist == 10 )
 800076e:	4b53      	ldr	r3, [pc, #332]	; (80008bc <main+0x27c>)
 8000770:	881b      	ldrh	r3, [r3, #0]
 8000772:	2b0a      	cmp	r3, #10
 8000774:	d107      	bne.n	8000786 <main+0x146>
	  send2swarm_at_command ( gj_q_rate_at_comm , gj_0_answer , 11 ) ;
 8000776:	4b64      	ldr	r3, [pc, #400]	; (8000908 <main+0x2c8>)
 8000778:	6818      	ldr	r0, [r3, #0]
 800077a:	4b64      	ldr	r3, [pc, #400]	; (800090c <main+0x2cc>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	220b      	movs	r2, #11
 8000780:	0019      	movs	r1, r3
 8000782:	f000 fad3 	bl	8000d2c <send2swarm_at_command>
  if ( checklist == 11 )
 8000786:	4b4d      	ldr	r3, [pc, #308]	; (80008bc <main+0x27c>)
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	2b0b      	cmp	r3, #11
 800078c:	d107      	bne.n	800079e <main+0x15e>
	  send2swarm_at_command ( gn_0_at_comm , gn_ok_answer , 12 ) ;
 800078e:	4b60      	ldr	r3, [pc, #384]	; (8000910 <main+0x2d0>)
 8000790:	6818      	ldr	r0, [r3, #0]
 8000792:	4b60      	ldr	r3, [pc, #384]	; (8000914 <main+0x2d4>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	220c      	movs	r2, #12
 8000798:	0019      	movs	r1, r3
 800079a:	f000 fac7 	bl	8000d2c <send2swarm_at_command>
  if ( checklist == 12 )
 800079e:	4b47      	ldr	r3, [pc, #284]	; (80008bc <main+0x27c>)
 80007a0:	881b      	ldrh	r3, [r3, #0]
 80007a2:	2b0c      	cmp	r3, #12
 80007a4:	d107      	bne.n	80007b6 <main+0x176>
	  send2swarm_at_command ( gn_q_rate_at_comm , gn_0_answer , 13 ) ;
 80007a6:	4b5c      	ldr	r3, [pc, #368]	; (8000918 <main+0x2d8>)
 80007a8:	6818      	ldr	r0, [r3, #0]
 80007aa:	4b5c      	ldr	r3, [pc, #368]	; (800091c <main+0x2dc>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	220d      	movs	r2, #13
 80007b0:	0019      	movs	r1, r3
 80007b2:	f000 fabb 	bl	8000d2c <send2swarm_at_command>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* 60s TIM16 Timer for Swarm Fix */
	  tim16_on = 1 ;
 80007b6:	4b5a      	ldr	r3, [pc, #360]	; (8000920 <main+0x2e0>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	701a      	strb	r2, [r3, #0]
	  HAL_TIM_Base_Start_IT ( &htim16 ) ;
 80007bc:	4b3a      	ldr	r3, [pc, #232]	; (80008a8 <main+0x268>)
 80007be:	0018      	movs	r0, r3
 80007c0:	f002 fee6 	bl	8003590 <HAL_TIM_Base_Start_IT>
	  while ( tim16_on )
 80007c4:	e000      	b.n	80007c8 <main+0x188>
		  __NOP () ;
 80007c6:	46c0      	nop			; (mov r8, r8)
	  while ( tim16_on )
 80007c8:	4b55      	ldr	r3, [pc, #340]	; (8000920 <main+0x2e0>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d1fa      	bne.n	80007c6 <main+0x186>

	  if ( checklist == 13 )
 80007d0:	4b3a      	ldr	r3, [pc, #232]	; (80008bc <main+0x27c>)
 80007d2:	881b      	ldrh	r3, [r3, #0]
 80007d4:	2b0d      	cmp	r3, #13
 80007d6:	d107      	bne.n	80007e8 <main+0x1a8>
	  	  send2swarm_at_command ( pw_mostrecent_at_comm , pw_mostrecent_answer , 14 ) ;
 80007d8:	4b52      	ldr	r3, [pc, #328]	; (8000924 <main+0x2e4>)
 80007da:	6818      	ldr	r0, [r3, #0]
 80007dc:	4b52      	ldr	r3, [pc, #328]	; (8000928 <main+0x2e8>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	220e      	movs	r2, #14
 80007e2:	0019      	movs	r1, r3
 80007e4:	f000 faa2 	bl	8000d2c <send2swarm_at_command>
	  if ( checklist == 14 )
 80007e8:	4b34      	ldr	r3, [pc, #208]	; (80008bc <main+0x27c>)
 80007ea:	881b      	ldrh	r3, [r3, #0]
 80007ec:	2b0e      	cmp	r3, #14
 80007ee:	d107      	bne.n	8000800 <main+0x1c0>
		  send2swarm_at_command ( gn_mostrecent_at_comm , gn_mostrecent_answer , 15 ) ;
 80007f0:	4b4e      	ldr	r3, [pc, #312]	; (800092c <main+0x2ec>)
 80007f2:	6818      	ldr	r0, [r3, #0]
 80007f4:	4b4e      	ldr	r3, [pc, #312]	; (8000930 <main+0x2f0>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	220f      	movs	r2, #15
 80007fa:	0019      	movs	r1, r3
 80007fc:	f000 fa96 	bl	8000d2c <send2swarm_at_command>
	  if ( checklist == 15 )
 8000800:	4b2e      	ldr	r3, [pc, #184]	; (80008bc <main+0x27c>)
 8000802:	881b      	ldrh	r3, [r3, #0]
 8000804:	2b0f      	cmp	r3, #15
 8000806:	d107      	bne.n	8000818 <main+0x1d8>
		  send2swarm_at_command ( mt_del_all_at_comm , mt_del_all_answer , 16 ) ;
 8000808:	4b4a      	ldr	r3, [pc, #296]	; (8000934 <main+0x2f4>)
 800080a:	6818      	ldr	r0, [r3, #0]
 800080c:	4b4a      	ldr	r3, [pc, #296]	; (8000938 <main+0x2f8>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2210      	movs	r2, #16
 8000812:	0019      	movs	r1, r3
 8000814:	f000 fa8a 	bl	8000d2c <send2swarm_at_command>
	  if ( checklist == 16 )
 8000818:	4b28      	ldr	r3, [pc, #160]	; (80008bc <main+0x27c>)
 800081a:	881b      	ldrh	r3, [r3, #0]
 800081c:	2b10      	cmp	r3, #16
 800081e:	d115      	bne.n	800084c <main+0x20c>
	  {
		  snprintf ( td_at_comm , TD_PAYLOAD_BUFF_SIZE , "$TD HD=60,\"%s;%s\"" , pw_buff , gn_buff ) ;
 8000820:	4946      	ldr	r1, [pc, #280]	; (800093c <main+0x2fc>)
 8000822:	4a47      	ldr	r2, [pc, #284]	; (8000940 <main+0x300>)
 8000824:	4847      	ldr	r0, [pc, #284]	; (8000944 <main+0x304>)
 8000826:	4b48      	ldr	r3, [pc, #288]	; (8000948 <main+0x308>)
 8000828:	9300      	str	r3, [sp, #0]
 800082a:	000b      	movs	r3, r1
 800082c:	215a      	movs	r1, #90	; 0x5a
 800082e:	f004 fde3 	bl	80053f8 <sniprintf>
	  	  send2swarm_at_command ( td_at_comm , td_ok_answer , 17 ) ;
 8000832:	4b46      	ldr	r3, [pc, #280]	; (800094c <main+0x30c>)
 8000834:	6819      	ldr	r1, [r3, #0]
 8000836:	4b43      	ldr	r3, [pc, #268]	; (8000944 <main+0x304>)
 8000838:	2211      	movs	r2, #17
 800083a:	0018      	movs	r0, r3
 800083c:	f000 fa76 	bl	8000d2c <send2swarm_at_command>
	  	  pw_buff[0] = 0 ;
 8000840:	4b3e      	ldr	r3, [pc, #248]	; (800093c <main+0x2fc>)
 8000842:	2200      	movs	r2, #0
 8000844:	701a      	strb	r2, [r3, #0]
	  	  gn_buff[0] = 0 ;
 8000846:	4b40      	ldr	r3, [pc, #256]	; (8000948 <main+0x308>)
 8000848:	2200      	movs	r2, #0
 800084a:	701a      	strb	r2, [r3, #0]
	  }
	  if ( checklist == 17 )
 800084c:	4b1b      	ldr	r3, [pc, #108]	; (80008bc <main+0x27c>)
 800084e:	881b      	ldrh	r3, [r3, #0]
 8000850:	2b11      	cmp	r3, #17
 8000852:	d10d      	bne.n	8000870 <main+0x230>
	  {
		  /* 60s TIM16 Timer for Swarm TD */
		  tim16_on = 1 ;
 8000854:	4b32      	ldr	r3, [pc, #200]	; (8000920 <main+0x2e0>)
 8000856:	2201      	movs	r2, #1
 8000858:	701a      	strb	r2, [r3, #0]
		  HAL_TIM_Base_Start_IT ( &htim16 ) ;
 800085a:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <main+0x268>)
 800085c:	0018      	movs	r0, r3
 800085e:	f002 fe97 	bl	8003590 <HAL_TIM_Base_Start_IT>
		  while ( tim16_on )
 8000862:	e000      	b.n	8000866 <main+0x226>
			  __NOP () ;
 8000864:	46c0      	nop			; (mov r8, r8)
		  while ( tim16_on )
 8000866:	4b2e      	ldr	r3, [pc, #184]	; (8000920 <main+0x2e0>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d1fa      	bne.n	8000864 <main+0x224>
 800086e:	e000      	b.n	8000872 <main+0x232>

		  //send2swarm_at_command ( sl_3c4ks_at_comm , sl_ok_answer , 18 ) ; // Swarm sleep for 50 minutes
	  }
	  else
		  __NOP();
 8000870:	46c0      	nop			; (mov r8, r8)
		  //send2swarm_at_command ( sl_3c5ks_at_comm , sl_ok_answer , 18 ) ; // Swarm sleep for 50 minutes
	  send2swarm_at_command ( sl_60s_at_comm , sl_ok_answer , 18 ) ; // TEST Swarm sleep for 1 minutes
 8000872:	4b37      	ldr	r3, [pc, #220]	; (8000950 <main+0x310>)
 8000874:	6818      	ldr	r0, [r3, #0]
 8000876:	4b37      	ldr	r3, [pc, #220]	; (8000954 <main+0x314>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	2212      	movs	r2, #18
 800087c:	0019      	movs	r1, r3
 800087e:	f000 fa55 	bl	8000d2c <send2swarm_at_command>

	  checklist = 13 ;
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <main+0x27c>)
 8000884:	220d      	movs	r2, #13
 8000886:	801a      	strh	r2, [r3, #0]

	  /* 60s TIM16 Timer docelowo zamienić na poniższy shutdown/stop/sleep */
	  tim16_on = 1 ;
 8000888:	4b25      	ldr	r3, [pc, #148]	; (8000920 <main+0x2e0>)
 800088a:	2201      	movs	r2, #1
 800088c:	701a      	strb	r2, [r3, #0]
	  HAL_TIM_Base_Start_IT ( &htim16 ) ;
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <main+0x268>)
 8000890:	0018      	movs	r0, r3
 8000892:	f002 fe7d 	bl	8003590 <HAL_TIM_Base_Start_IT>
	  while ( tim16_on )
 8000896:	e000      	b.n	800089a <main+0x25a>
		  __NOP () ;
 8000898:	46c0      	nop			; (mov r8, r8)
	  while ( tim16_on )
 800089a:	4b21      	ldr	r3, [pc, #132]	; (8000920 <main+0x2e0>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d1fa      	bne.n	8000898 <main+0x258>
	  tim16_on = 1 ;
 80008a2:	e788      	b.n	80007b6 <main+0x176>
 80008a4:	20000144 	.word	0x20000144
 80008a8:	20000190 	.word	0x20000190
 80008ac:	200002d4 	.word	0x200002d4
 80008b0:	200001dc 	.word	0x200001dc
 80008b4:	20000000 	.word	0x20000000
 80008b8:	20000044 	.word	0x20000044
 80008bc:	200002cc 	.word	0x200002cc
 80008c0:	20000004 	.word	0x20000004
 80008c4:	20000048 	.word	0x20000048
 80008c8:	20000008 	.word	0x20000008
 80008cc:	2000004c 	.word	0x2000004c
 80008d0:	2000000c 	.word	0x2000000c
 80008d4:	20000050 	.word	0x20000050
 80008d8:	20000010 	.word	0x20000010
 80008dc:	20000054 	.word	0x20000054
 80008e0:	20000018 	.word	0x20000018
 80008e4:	2000005c 	.word	0x2000005c
 80008e8:	2000001c 	.word	0x2000001c
 80008ec:	20000060 	.word	0x20000060
 80008f0:	20000020 	.word	0x20000020
 80008f4:	20000064 	.word	0x20000064
 80008f8:	20000024 	.word	0x20000024
 80008fc:	20000068 	.word	0x20000068
 8000900:	20000028 	.word	0x20000028
 8000904:	2000006c 	.word	0x2000006c
 8000908:	2000002c 	.word	0x2000002c
 800090c:	20000070 	.word	0x20000070
 8000910:	20000030 	.word	0x20000030
 8000914:	20000074 	.word	0x20000074
 8000918:	20000034 	.word	0x20000034
 800091c:	20000078 	.word	0x20000078
 8000920:	200002ce 	.word	0x200002ce
 8000924:	20000014 	.word	0x20000014
 8000928:	20000058 	.word	0x20000058
 800092c:	20000038 	.word	0x20000038
 8000930:	2000007c 	.word	0x2000007c
 8000934:	2000003c 	.word	0x2000003c
 8000938:	20000080 	.word	0x20000080
 800093c:	20000498 	.word	0x20000498
 8000940:	08007528 	.word	0x08007528
 8000944:	200004c4 	.word	0x200004c4
 8000948:	200004a0 	.word	0x200004a0
 800094c:	20000084 	.word	0x20000084
 8000950:	20000040 	.word	0x20000040
 8000954:	20000088 	.word	0x20000088

08000958 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000958:	b590      	push	{r4, r7, lr}
 800095a:	b093      	sub	sp, #76	; 0x4c
 800095c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095e:	2410      	movs	r4, #16
 8000960:	193b      	adds	r3, r7, r4
 8000962:	0018      	movs	r0, r3
 8000964:	2338      	movs	r3, #56	; 0x38
 8000966:	001a      	movs	r2, r3
 8000968:	2100      	movs	r1, #0
 800096a:	f004 fd3d 	bl	80053e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800096e:	003b      	movs	r3, r7
 8000970:	0018      	movs	r0, r3
 8000972:	2310      	movs	r3, #16
 8000974:	001a      	movs	r2, r3
 8000976:	2100      	movs	r1, #0
 8000978:	f004 fd36 	bl	80053e8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800097c:	2380      	movs	r3, #128	; 0x80
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	0018      	movs	r0, r3
 8000982:	f001 fbb1 	bl	80020e8 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000986:	f001 fba1 	bl	80020cc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800098a:	4b1d      	ldr	r3, [pc, #116]	; (8000a00 <SystemClock_Config+0xa8>)
 800098c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800098e:	4b1c      	ldr	r3, [pc, #112]	; (8000a00 <SystemClock_Config+0xa8>)
 8000990:	2118      	movs	r1, #24
 8000992:	438a      	bics	r2, r1
 8000994:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000996:	193b      	adds	r3, r7, r4
 8000998:	2206      	movs	r2, #6
 800099a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800099c:	193b      	adds	r3, r7, r4
 800099e:	2201      	movs	r2, #1
 80009a0:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a2:	193b      	adds	r3, r7, r4
 80009a4:	2280      	movs	r2, #128	; 0x80
 80009a6:	0052      	lsls	r2, r2, #1
 80009a8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80009aa:	193b      	adds	r3, r7, r4
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009b0:	193b      	adds	r3, r7, r4
 80009b2:	2240      	movs	r2, #64	; 0x40
 80009b4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009b6:	193b      	adds	r3, r7, r4
 80009b8:	2200      	movs	r2, #0
 80009ba:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009bc:	193b      	adds	r3, r7, r4
 80009be:	0018      	movs	r0, r3
 80009c0:	f001 fbde 	bl	8002180 <HAL_RCC_OscConfig>
 80009c4:	1e03      	subs	r3, r0, #0
 80009c6:	d001      	beq.n	80009cc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80009c8:	f000 faec 	bl	8000fa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009cc:	003b      	movs	r3, r7
 80009ce:	2207      	movs	r2, #7
 80009d0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009d2:	003b      	movs	r3, r7
 80009d4:	2200      	movs	r2, #0
 80009d6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d8:	003b      	movs	r3, r7
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009de:	003b      	movs	r3, r7
 80009e0:	2200      	movs	r2, #0
 80009e2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009e4:	003b      	movs	r3, r7
 80009e6:	2100      	movs	r1, #0
 80009e8:	0018      	movs	r0, r3
 80009ea:	f001 fee3 	bl	80027b4 <HAL_RCC_ClockConfig>
 80009ee:	1e03      	subs	r3, r0, #0
 80009f0:	d001      	beq.n	80009f6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80009f2:	f000 fad7 	bl	8000fa4 <Error_Handler>
  }
}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	46bd      	mov	sp, r7
 80009fa:	b013      	add	sp, #76	; 0x4c
 80009fc:	bd90      	pop	{r4, r7, pc}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	40021000 	.word	0x40021000

08000a04 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	2314      	movs	r3, #20
 8000a10:	001a      	movs	r2, r3
 8000a12:	2100      	movs	r1, #0
 8000a14:	f004 fce8 	bl	80053e8 <memset>
  RTC_DateTypeDef sDate = {0};
 8000a18:	003b      	movs	r3, r7
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a1e:	4b32      	ldr	r3, [pc, #200]	; (8000ae8 <MX_RTC_Init+0xe4>)
 8000a20:	4a32      	ldr	r2, [pc, #200]	; (8000aec <MX_RTC_Init+0xe8>)
 8000a22:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a24:	4b30      	ldr	r3, [pc, #192]	; (8000ae8 <MX_RTC_Init+0xe4>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000a2a:	4b2f      	ldr	r3, [pc, #188]	; (8000ae8 <MX_RTC_Init+0xe4>)
 8000a2c:	227f      	movs	r2, #127	; 0x7f
 8000a2e:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000a30:	4b2d      	ldr	r3, [pc, #180]	; (8000ae8 <MX_RTC_Init+0xe4>)
 8000a32:	22ff      	movs	r2, #255	; 0xff
 8000a34:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a36:	4b2c      	ldr	r3, [pc, #176]	; (8000ae8 <MX_RTC_Init+0xe4>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a3c:	4b2a      	ldr	r3, [pc, #168]	; (8000ae8 <MX_RTC_Init+0xe4>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a42:	4b29      	ldr	r3, [pc, #164]	; (8000ae8 <MX_RTC_Init+0xe4>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a48:	4b27      	ldr	r3, [pc, #156]	; (8000ae8 <MX_RTC_Init+0xe4>)
 8000a4a:	2280      	movs	r2, #128	; 0x80
 8000a4c:	05d2      	lsls	r2, r2, #23
 8000a4e:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000a50:	4b25      	ldr	r3, [pc, #148]	; (8000ae8 <MX_RTC_Init+0xe4>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a56:	4b24      	ldr	r3, [pc, #144]	; (8000ae8 <MX_RTC_Init+0xe4>)
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f002 f9cf 	bl	8002dfc <HAL_RTC_Init>
 8000a5e:	1e03      	subs	r3, r0, #0
 8000a60:	d001      	beq.n	8000a66 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000a62:	f000 fa9f 	bl	8000fa4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	2200      	movs	r2, #0
 8000a6a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	2200      	movs	r2, #0
 8000a70:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	2200      	movs	r2, #0
 8000a76:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8000a78:	1d3b      	adds	r3, r7, #4
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	2200      	movs	r2, #0
 8000a82:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	2200      	movs	r2, #0
 8000a88:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000a8a:	1d39      	adds	r1, r7, #4
 8000a8c:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <MX_RTC_Init+0xe4>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	0018      	movs	r0, r3
 8000a92:	f002 fa55 	bl	8002f40 <HAL_RTC_SetTime>
 8000a96:	1e03      	subs	r3, r0, #0
 8000a98:	d001      	beq.n	8000a9e <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 8000a9a:	f000 fa83 	bl	8000fa4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000a9e:	003b      	movs	r3, r7
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000aa4:	003b      	movs	r3, r7
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000aaa:	003b      	movs	r3, r7
 8000aac:	2201      	movs	r2, #1
 8000aae:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000ab0:	003b      	movs	r3, r7
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000ab6:	0039      	movs	r1, r7
 8000ab8:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <MX_RTC_Init+0xe4>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	0018      	movs	r0, r3
 8000abe:	f002 fae7 	bl	8003090 <HAL_RTC_SetDate>
 8000ac2:	1e03      	subs	r3, r0, #0
 8000ac4:	d001      	beq.n	8000aca <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 8000ac6:	f000 fa6d 	bl	8000fa4 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 120, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8000aca:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <MX_RTC_Init+0xe4>)
 8000acc:	2204      	movs	r2, #4
 8000ace:	2178      	movs	r1, #120	; 0x78
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f002 fc45 	bl	8003360 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000ad6:	1e03      	subs	r3, r0, #0
 8000ad8:	d001      	beq.n	8000ade <MX_RTC_Init+0xda>
  {
    Error_Handler();
 8000ada:	f000 fa63 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	b006      	add	sp, #24
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	20000118 	.word	0x20000118
 8000aec:	40002800 	.word	0x40002800

08000af0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000af4:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <MX_TIM14_Init+0x40>)
 8000af6:	4a0f      	ldr	r2, [pc, #60]	; (8000b34 <MX_TIM14_Init+0x44>)
 8000af8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16000-1;
 8000afa:	4b0d      	ldr	r3, [pc, #52]	; (8000b30 <MX_TIM14_Init+0x40>)
 8000afc:	4a0e      	ldr	r2, [pc, #56]	; (8000b38 <MX_TIM14_Init+0x48>)
 8000afe:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b00:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <MX_TIM14_Init+0x40>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2000-1;
 8000b06:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <MX_TIM14_Init+0x40>)
 8000b08:	4a0c      	ldr	r2, [pc, #48]	; (8000b3c <MX_TIM14_Init+0x4c>)
 8000b0a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0c:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <MX_TIM14_Init+0x40>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b12:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <MX_TIM14_Init+0x40>)
 8000b14:	2280      	movs	r2, #128	; 0x80
 8000b16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000b18:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <MX_TIM14_Init+0x40>)
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f002 fce0 	bl	80034e0 <HAL_TIM_Base_Init>
 8000b20:	1e03      	subs	r3, r0, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000b24:	f000 fa3e 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000b28:	46c0      	nop			; (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	20000144 	.word	0x20000144
 8000b34:	40002000 	.word	0x40002000
 8000b38:	00003e7f 	.word	0x00003e7f
 8000b3c:	000007cf 	.word	0x000007cf

08000b40 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000b44:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <MX_TIM16_Init+0x44>)
 8000b46:	4a10      	ldr	r2, [pc, #64]	; (8000b88 <MX_TIM16_Init+0x48>)
 8000b48:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 16000-1;
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <MX_TIM16_Init+0x44>)
 8000b4c:	4a0f      	ldr	r2, [pc, #60]	; (8000b8c <MX_TIM16_Init+0x4c>)
 8000b4e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <MX_TIM16_Init+0x44>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 60000-1;
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <MX_TIM16_Init+0x44>)
 8000b58:	4a0d      	ldr	r2, [pc, #52]	; (8000b90 <MX_TIM16_Init+0x50>)
 8000b5a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b5c:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <MX_TIM16_Init+0x44>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000b62:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <MX_TIM16_Init+0x44>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <MX_TIM16_Init+0x44>)
 8000b6a:	2280      	movs	r2, #128	; 0x80
 8000b6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000b6e:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <MX_TIM16_Init+0x44>)
 8000b70:	0018      	movs	r0, r3
 8000b72:	f002 fcb5 	bl	80034e0 <HAL_TIM_Base_Init>
 8000b76:	1e03      	subs	r3, r0, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8000b7a:	f000 fa13 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000190 	.word	0x20000190
 8000b88:	40014400 	.word	0x40014400
 8000b8c:	00003e7f 	.word	0x00003e7f
 8000b90:	0000ea5f 	.word	0x0000ea5f

08000b94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b98:	4b23      	ldr	r3, [pc, #140]	; (8000c28 <MX_USART1_UART_Init+0x94>)
 8000b9a:	4a24      	ldr	r2, [pc, #144]	; (8000c2c <MX_USART1_UART_Init+0x98>)
 8000b9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b9e:	4b22      	ldr	r3, [pc, #136]	; (8000c28 <MX_USART1_UART_Init+0x94>)
 8000ba0:	22e1      	movs	r2, #225	; 0xe1
 8000ba2:	0252      	lsls	r2, r2, #9
 8000ba4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba6:	4b20      	ldr	r3, [pc, #128]	; (8000c28 <MX_USART1_UART_Init+0x94>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bac:	4b1e      	ldr	r3, [pc, #120]	; (8000c28 <MX_USART1_UART_Init+0x94>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bb2:	4b1d      	ldr	r3, [pc, #116]	; (8000c28 <MX_USART1_UART_Init+0x94>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bb8:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <MX_USART1_UART_Init+0x94>)
 8000bba:	220c      	movs	r2, #12
 8000bbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bbe:	4b1a      	ldr	r3, [pc, #104]	; (8000c28 <MX_USART1_UART_Init+0x94>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc4:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <MX_USART1_UART_Init+0x94>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bca:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <MX_USART1_UART_Init+0x94>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bd0:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <MX_USART1_UART_Init+0x94>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bd6:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <MX_USART1_UART_Init+0x94>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <MX_USART1_UART_Init+0x94>)
 8000bde:	0018      	movs	r0, r3
 8000be0:	f002 ff38 	bl	8003a54 <HAL_UART_Init>
 8000be4:	1e03      	subs	r3, r0, #0
 8000be6:	d001      	beq.n	8000bec <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000be8:	f000 f9dc 	bl	8000fa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bec:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <MX_USART1_UART_Init+0x94>)
 8000bee:	2100      	movs	r1, #0
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f004 fa87 	bl	8005104 <HAL_UARTEx_SetTxFifoThreshold>
 8000bf6:	1e03      	subs	r3, r0, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000bfa:	f000 f9d3 	bl	8000fa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bfe:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <MX_USART1_UART_Init+0x94>)
 8000c00:	2100      	movs	r1, #0
 8000c02:	0018      	movs	r0, r3
 8000c04:	f004 fabe 	bl	8005184 <HAL_UARTEx_SetRxFifoThreshold>
 8000c08:	1e03      	subs	r3, r0, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c0c:	f000 f9ca 	bl	8000fa4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c10:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <MX_USART1_UART_Init+0x94>)
 8000c12:	0018      	movs	r0, r3
 8000c14:	f004 fa3c 	bl	8005090 <HAL_UARTEx_DisableFifoMode>
 8000c18:	1e03      	subs	r3, r0, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c1c:	f000 f9c2 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c20:	46c0      	nop			; (mov r8, r8)
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	200001dc 	.word	0x200001dc
 8000c2c:	40013800 	.word	0x40013800

08000c30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c36:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <MX_DMA_Init+0x38>)
 8000c38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <MX_DMA_Init+0x38>)
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	639a      	str	r2, [r3, #56]	; 0x38
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <MX_DMA_Init+0x38>)
 8000c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c46:	2201      	movs	r2, #1
 8000c48:	4013      	ands	r3, r2
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2100      	movs	r1, #0
 8000c52:	2009      	movs	r0, #9
 8000c54:	f000 fd68 	bl	8001728 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c58:	2009      	movs	r0, #9
 8000c5a:	f000 fd7a 	bl	8001752 <HAL_NVIC_EnableIRQ>

}
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	46bd      	mov	sp, r7
 8000c62:	b002      	add	sp, #8
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	40021000 	.word	0x40021000

08000c6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c6c:	b590      	push	{r4, r7, lr}
 8000c6e:	b089      	sub	sp, #36	; 0x24
 8000c70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c72:	240c      	movs	r4, #12
 8000c74:	193b      	adds	r3, r7, r4
 8000c76:	0018      	movs	r0, r3
 8000c78:	2314      	movs	r3, #20
 8000c7a:	001a      	movs	r2, r3
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	f004 fbb3 	bl	80053e8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c82:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <MX_GPIO_Init+0x80>)
 8000c84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c86:	4b19      	ldr	r3, [pc, #100]	; (8000cec <MX_GPIO_Init+0x80>)
 8000c88:	2104      	movs	r1, #4
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	635a      	str	r2, [r3, #52]	; 0x34
 8000c8e:	4b17      	ldr	r3, [pc, #92]	; (8000cec <MX_GPIO_Init+0x80>)
 8000c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c92:	2204      	movs	r2, #4
 8000c94:	4013      	ands	r3, r2
 8000c96:	60bb      	str	r3, [r7, #8]
 8000c98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9a:	4b14      	ldr	r3, [pc, #80]	; (8000cec <MX_GPIO_Init+0x80>)
 8000c9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c9e:	4b13      	ldr	r3, [pc, #76]	; (8000cec <MX_GPIO_Init+0x80>)
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	430a      	orrs	r2, r1
 8000ca4:	635a      	str	r2, [r3, #52]	; 0x34
 8000ca6:	4b11      	ldr	r3, [pc, #68]	; (8000cec <MX_GPIO_Init+0x80>)
 8000ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000caa:	2201      	movs	r2, #1
 8000cac:	4013      	ands	r3, r2
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_RESET);
 8000cb2:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <MX_GPIO_Init+0x84>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2140      	movs	r1, #64	; 0x40
 8000cb8:	0018      	movs	r0, r3
 8000cba:	f001 f9e9 	bl	8002090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GREEN_Pin */
  GPIO_InitStruct.Pin = GREEN_Pin;
 8000cbe:	0021      	movs	r1, r4
 8000cc0:	187b      	adds	r3, r7, r1
 8000cc2:	2240      	movs	r2, #64	; 0x40
 8000cc4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc6:	187b      	adds	r3, r7, r1
 8000cc8:	2201      	movs	r2, #1
 8000cca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	187b      	adds	r3, r7, r1
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	187b      	adds	r3, r7, r1
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GREEN_GPIO_Port, &GPIO_InitStruct);
 8000cd8:	187b      	adds	r3, r7, r1
 8000cda:	4a05      	ldr	r2, [pc, #20]	; (8000cf0 <MX_GPIO_Init+0x84>)
 8000cdc:	0019      	movs	r1, r3
 8000cde:	0010      	movs	r0, r2
 8000ce0:	f001 f872 	bl	8001dc8 <HAL_GPIO_Init>

}
 8000ce4:	46c0      	nop			; (mov r8, r8)
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	b009      	add	sp, #36	; 0x24
 8000cea:	bd90      	pop	{r4, r7, pc}
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	50000800 	.word	0x50000800

08000cf4 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback ( UART_HandleTypeDef *huart , uint16_t Size )
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	000a      	movs	r2, r1
 8000cfe:	1cbb      	adds	r3, r7, #2
 8000d00:	801a      	strh	r2, [r3, #0]
    if ( huart->Instance == USART1 )
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a06      	ldr	r2, [pc, #24]	; (8000d20 <HAL_UARTEx_RxEventCallback+0x2c>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d105      	bne.n	8000d18 <HAL_UARTEx_RxEventCallback+0x24>
    	HAL_UARTEx_ReceiveToIdle_DMA ( &huart1 , rx_buff , sizeof ( rx_buff ) ) ;
 8000d0c:	4905      	ldr	r1, [pc, #20]	; (8000d24 <HAL_UARTEx_RxEventCallback+0x30>)
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_UARTEx_RxEventCallback+0x34>)
 8000d10:	22c8      	movs	r2, #200	; 0xc8
 8000d12:	0018      	movs	r0, r3
 8000d14:	f004 fa78 	bl	8005208 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8000d18:	46c0      	nop			; (mov r8, r8)
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	b002      	add	sp, #8
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40013800 	.word	0x40013800
 8000d24:	200002d4 	.word	0x200002d4
 8000d28:	200001dc 	.word	0x200001dc

08000d2c <send2swarm_at_command>:

void send2swarm_at_command ( const char* at_command , const char* answer , uint16_t step )
{
 8000d2c:	b5b0      	push	{r4, r5, r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	1dbb      	adds	r3, r7, #6
 8000d38:	801a      	strh	r2, [r3, #0]
	//uint32_t temp_tickstart = HAL_GetTick () ; //temp
	uint8_t cs = nmea_checksum ( at_command , strlen ( at_command ) ) ;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f7ff f9e1 	bl	8000104 <strlen>
 8000d42:	0002      	movs	r2, r0
 8000d44:	2517      	movs	r5, #23
 8000d46:	197c      	adds	r4, r7, r5
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	0011      	movs	r1, r2
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f000 f8cb 	bl	8000ee8 <nmea_checksum>
 8000d52:	0003      	movs	r3, r0
 8000d54:	7023      	strb	r3, [r4, #0]

	sprintf ( (char*) tx_buff , "%s*%02x\n" , at_command , cs ) ;
 8000d56:	197b      	adds	r3, r7, r5
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	492e      	ldr	r1, [pc, #184]	; (8000e18 <send2swarm_at_command+0xec>)
 8000d5e:	482f      	ldr	r0, [pc, #188]	; (8000e1c <send2swarm_at_command+0xf0>)
 8000d60:	f004 fb7e 	bl	8005460 <siprintf>
	uart_status = HAL_UART_Transmit ( &huart1 , (const uint8_t *) tx_buff ,  strlen ( (char*) tx_buff ) , UART_TX_TIMEOUT ) ;
 8000d64:	4b2d      	ldr	r3, [pc, #180]	; (8000e1c <send2swarm_at_command+0xf0>)
 8000d66:	0018      	movs	r0, r3
 8000d68:	f7ff f9cc 	bl	8000104 <strlen>
 8000d6c:	0003      	movs	r3, r0
 8000d6e:	b29a      	uxth	r2, r3
 8000d70:	23fa      	movs	r3, #250	; 0xfa
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	4929      	ldr	r1, [pc, #164]	; (8000e1c <send2swarm_at_command+0xf0>)
 8000d76:	482a      	ldr	r0, [pc, #168]	; (8000e20 <send2swarm_at_command+0xf4>)
 8000d78:	f002 fec2 	bl	8003b00 <HAL_UART_Transmit>
 8000d7c:	0003      	movs	r3, r0
 8000d7e:	001a      	movs	r2, r3
 8000d80:	4b28      	ldr	r3, [pc, #160]	; (8000e24 <send2swarm_at_command+0xf8>)
 8000d82:	701a      	strb	r2, [r3, #0]
	tx_buff[0] = 0 ;
 8000d84:	4b25      	ldr	r3, [pc, #148]	; (8000e1c <send2swarm_at_command+0xf0>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	701a      	strb	r2, [r3, #0]
	waiting_for_answer = 1 ;
 8000d8a:	4b27      	ldr	r3, [pc, #156]	; (8000e28 <send2swarm_at_command+0xfc>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &htim14 ) ;
 8000d90:	4b26      	ldr	r3, [pc, #152]	; (8000e2c <send2swarm_at_command+0x100>)
 8000d92:	0018      	movs	r0, r3
 8000d94:	f002 fbfc 	bl	8003590 <HAL_TIM_Base_Start_IT>
	while ( waiting_for_answer )
 8000d98:	e00b      	b.n	8000db2 <send2swarm_at_command+0x86>
		if ( strncmp ( (char*) rx_buff , answer , strlen ( answer ) ) == 0 )
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f7ff f9b1 	bl	8000104 <strlen>
 8000da2:	0002      	movs	r2, r0
 8000da4:	68b9      	ldr	r1, [r7, #8]
 8000da6:	4b22      	ldr	r3, [pc, #136]	; (8000e30 <send2swarm_at_command+0x104>)
 8000da8:	0018      	movs	r0, r3
 8000daa:	f004 fbef 	bl	800558c <strncmp>
 8000dae:	1e03      	subs	r3, r0, #0
 8000db0:	d004      	beq.n	8000dbc <send2swarm_at_command+0x90>
	while ( waiting_for_answer )
 8000db2:	4b1d      	ldr	r3, [pc, #116]	; (8000e28 <send2swarm_at_command+0xfc>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d1ef      	bne.n	8000d9a <send2swarm_at_command+0x6e>
 8000dba:	e000      	b.n	8000dbe <send2swarm_at_command+0x92>
		{
			//checklist = step ;
			break ;
 8000dbc:	46c0      	nop			; (mov r8, r8)
		}
	checklist = step ;
 8000dbe:	4b1d      	ldr	r3, [pc, #116]	; (8000e34 <send2swarm_at_command+0x108>)
 8000dc0:	1dba      	adds	r2, r7, #6
 8000dc2:	8812      	ldrh	r2, [r2, #0]
 8000dc4:	801a      	strh	r2, [r3, #0]
	if ( strncmp ( pw_mostrecent_at_comm , at_command , strlen ( pw_mostrecent_at_comm ) ) == 0 )
 8000dc6:	4b1c      	ldr	r3, [pc, #112]	; (8000e38 <send2swarm_at_command+0x10c>)
 8000dc8:	681c      	ldr	r4, [r3, #0]
 8000dca:	4b1b      	ldr	r3, [pc, #108]	; (8000e38 <send2swarm_at_command+0x10c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f7ff f998 	bl	8000104 <strlen>
 8000dd4:	0002      	movs	r2, r0
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	0019      	movs	r1, r3
 8000dda:	0020      	movs	r0, r4
 8000ddc:	f004 fbd6 	bl	800558c <strncmp>
 8000de0:	1e03      	subs	r3, r0, #0
 8000de2:	d101      	bne.n	8000de8 <send2swarm_at_command+0xbc>
		pw2payload () ;
 8000de4:	f000 f82c 	bl	8000e40 <pw2payload>
	if ( strncmp ( gn_mostrecent_at_comm , at_command , strlen ( gn_mostrecent_at_comm ) ) == 0 )
 8000de8:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <send2swarm_at_command+0x110>)
 8000dea:	681c      	ldr	r4, [r3, #0]
 8000dec:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <send2swarm_at_command+0x110>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	0018      	movs	r0, r3
 8000df2:	f7ff f987 	bl	8000104 <strlen>
 8000df6:	0002      	movs	r2, r0
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	0019      	movs	r1, r3
 8000dfc:	0020      	movs	r0, r4
 8000dfe:	f004 fbc5 	bl	800558c <strncmp>
 8000e02:	1e03      	subs	r3, r0, #0
 8000e04:	d101      	bne.n	8000e0a <send2swarm_at_command+0xde>
		gn2payload () ;
 8000e06:	f000 f845 	bl	8000e94 <gn2payload>
	rx_buff[0] = 0 ;
 8000e0a:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <send2swarm_at_command+0x104>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	701a      	strb	r2, [r3, #0]
	//temp_tick = HAL_GetTick () - temp_tickstart ;
}
 8000e10:	46c0      	nop			; (mov r8, r8)
 8000e12:	46bd      	mov	sp, r7
 8000e14:	b006      	add	sp, #24
 8000e16:	bdb0      	pop	{r4, r5, r7, pc}
 8000e18:	0800753c 	.word	0x0800753c
 8000e1c:	2000039c 	.word	0x2000039c
 8000e20:	200001dc 	.word	0x200001dc
 8000e24:	200002d0 	.word	0x200002d0
 8000e28:	200002cf 	.word	0x200002cf
 8000e2c:	20000144 	.word	0x20000144
 8000e30:	200002d4 	.word	0x200002d4
 8000e34:	200002cc 	.word	0x200002cc
 8000e38:	20000014 	.word	0x20000014
 8000e3c:	20000038 	.word	0x20000038

08000e40 <pw2payload>:
void pw2payload ()
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
	chunk = strtok ( (char*) rx_buff , " " ) ;
 8000e44:	4a0d      	ldr	r2, [pc, #52]	; (8000e7c <pw2payload+0x3c>)
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <pw2payload+0x40>)
 8000e48:	0011      	movs	r1, r2
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f004 fbb0 	bl	80055b0 <strtok>
 8000e50:	0002      	movs	r2, r0
 8000e52:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <pw2payload+0x44>)
 8000e54:	601a      	str	r2, [r3, #0]
	chunk = strtok ( NULL , "," ) ;
 8000e56:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <pw2payload+0x48>)
 8000e58:	0019      	movs	r1, r3
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f004 fba8 	bl	80055b0 <strtok>
 8000e60:	0002      	movs	r2, r0
 8000e62:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <pw2payload+0x44>)
 8000e64:	601a      	str	r2, [r3, #0]
	sscanf ( (const char *) chunk , "%4s" , pw_buff ) ;
 8000e66:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <pw2payload+0x44>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a08      	ldr	r2, [pc, #32]	; (8000e8c <pw2payload+0x4c>)
 8000e6c:	4908      	ldr	r1, [pc, #32]	; (8000e90 <pw2payload+0x50>)
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f004 fb16 	bl	80054a0 <siscanf>
}
 8000e74:	46c0      	nop			; (mov r8, r8)
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	08007548 	.word	0x08007548
 8000e80:	200002d4 	.word	0x200002d4
 8000e84:	20000520 	.word	0x20000520
 8000e88:	0800754c 	.word	0x0800754c
 8000e8c:	20000498 	.word	0x20000498
 8000e90:	08007550 	.word	0x08007550

08000e94 <gn2payload>:
void gn2payload ()
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
	chunk = strtok ( (char*) rx_buff , " " ) ;
 8000e98:	4a0d      	ldr	r2, [pc, #52]	; (8000ed0 <gn2payload+0x3c>)
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <gn2payload+0x40>)
 8000e9c:	0011      	movs	r1, r2
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f004 fb86 	bl	80055b0 <strtok>
 8000ea4:	0002      	movs	r2, r0
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <gn2payload+0x44>)
 8000ea8:	601a      	str	r2, [r3, #0]
	chunk = strtok ( NULL , "*" ) ;
 8000eaa:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <gn2payload+0x48>)
 8000eac:	0019      	movs	r1, r3
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f004 fb7e 	bl	80055b0 <strtok>
 8000eb4:	0002      	movs	r2, r0
 8000eb6:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <gn2payload+0x44>)
 8000eb8:	601a      	str	r2, [r3, #0]
	sprintf ( (char*) gn_buff , "%s" , chunk ) ;
 8000eba:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <gn2payload+0x44>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	4908      	ldr	r1, [pc, #32]	; (8000ee0 <gn2payload+0x4c>)
 8000ec0:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <gn2payload+0x50>)
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	f004 facc 	bl	8005460 <siprintf>
}
 8000ec8:	46c0      	nop			; (mov r8, r8)
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	08007548 	.word	0x08007548
 8000ed4:	200002d4 	.word	0x200002d4
 8000ed8:	20000520 	.word	0x20000520
 8000edc:	08007554 	.word	0x08007554
 8000ee0:	08007558 	.word	0x08007558
 8000ee4:	200004a0 	.word	0x200004a0

08000ee8 <nmea_checksum>:
uint8_t nmea_checksum ( const char *sz , size_t len )
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
	size_t i = 0 ;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
	uint8_t cs ;
	if ( sz [0] == '$' )
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	2b24      	cmp	r3, #36	; 0x24
 8000efc:	d102      	bne.n	8000f04 <nmea_checksum+0x1c>
		i++ ;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	3301      	adds	r3, #1
 8000f02:	60fb      	str	r3, [r7, #12]
	for ( cs = 0 ; ( i < len ) && sz [i] ; i++ )
 8000f04:	230b      	movs	r3, #11
 8000f06:	18fb      	adds	r3, r7, r3
 8000f08:	2200      	movs	r2, #0
 8000f0a:	701a      	strb	r2, [r3, #0]
 8000f0c:	e00c      	b.n	8000f28 <nmea_checksum+0x40>
		cs ^= ( (uint8_t) sz [i] ) ;
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	18d3      	adds	r3, r2, r3
 8000f14:	7819      	ldrb	r1, [r3, #0]
 8000f16:	220b      	movs	r2, #11
 8000f18:	18bb      	adds	r3, r7, r2
 8000f1a:	18ba      	adds	r2, r7, r2
 8000f1c:	7812      	ldrb	r2, [r2, #0]
 8000f1e:	404a      	eors	r2, r1
 8000f20:	701a      	strb	r2, [r3, #0]
	for ( cs = 0 ; ( i < len ) && sz [i] ; i++ )
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	3301      	adds	r3, #1
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fa      	ldr	r2, [r7, #12]
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d205      	bcs.n	8000f3c <nmea_checksum+0x54>
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	18d3      	adds	r3, r2, r3
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d1e8      	bne.n	8000f0e <nmea_checksum+0x26>
	return cs;
 8000f3c:	230b      	movs	r3, #11
 8000f3e:	18fb      	adds	r3, r7, r3
 8000f40:	781b      	ldrb	r3, [r3, #0]
}
 8000f42:	0018      	movs	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	b004      	add	sp, #16
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM14 )
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a0c      	ldr	r2, [pc, #48]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d106      	bne.n	8000f6c <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		waiting_for_answer = 0 ;
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT ( &htim14 ) ;
 8000f64:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000f66:	0018      	movs	r0, r3
 8000f68:	f002 fb66 	bl	8003638 <HAL_TIM_Base_Stop_IT>
	}
	if ( htim->Instance == TIM16 )
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a09      	ldr	r2, [pc, #36]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d106      	bne.n	8000f84 <HAL_TIM_PeriodElapsedCallback+0x38>
	{
		tim16_on = 0 ;
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT ( &htim16 ) ;
 8000f7c:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f002 fb5a 	bl	8003638 <HAL_TIM_Base_Stop_IT>
	}
}
 8000f84:	46c0      	nop			; (mov r8, r8)
 8000f86:	46bd      	mov	sp, r7
 8000f88:	b002      	add	sp, #8
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40002000 	.word	0x40002000
 8000f90:	200002cf 	.word	0x200002cf
 8000f94:	20000144 	.word	0x20000144
 8000f98:	40014400 	.word	0x40014400
 8000f9c:	200002ce 	.word	0x200002ce
 8000fa0:	20000190 	.word	0x20000190

08000fa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa8:	b672      	cpsid	i
}
 8000faa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fac:	e7fe      	b.n	8000fac <Error_Handler+0x8>
	...

08000fb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <HAL_MspInit+0x44>)
 8000fb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fba:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <HAL_MspInit+0x44>)
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	641a      	str	r2, [r3, #64]	; 0x40
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <HAL_MspInit+0x44>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	4013      	ands	r3, r2
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <HAL_MspInit+0x44>)
 8000fd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fd2:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <HAL_MspInit+0x44>)
 8000fd4:	2180      	movs	r1, #128	; 0x80
 8000fd6:	0549      	lsls	r1, r1, #21
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	63da      	str	r2, [r3, #60]	; 0x3c
 8000fdc:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <HAL_MspInit+0x44>)
 8000fde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fe0:	2380      	movs	r3, #128	; 0x80
 8000fe2:	055b      	lsls	r3, r3, #21
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	603b      	str	r3, [r7, #0]
 8000fe8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	46bd      	mov	sp, r7
 8000fee:	b002      	add	sp, #8
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	46c0      	nop			; (mov r8, r8)
 8000ff4:	40021000 	.word	0x40021000

08000ff8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ff8:	b590      	push	{r4, r7, lr}
 8000ffa:	b08f      	sub	sp, #60	; 0x3c
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001000:	2410      	movs	r4, #16
 8001002:	193b      	adds	r3, r7, r4
 8001004:	0018      	movs	r0, r3
 8001006:	2328      	movs	r3, #40	; 0x28
 8001008:	001a      	movs	r2, r3
 800100a:	2100      	movs	r1, #0
 800100c:	f004 f9ec 	bl	80053e8 <memset>
  if(hrtc->Instance==RTC)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a19      	ldr	r2, [pc, #100]	; (800107c <HAL_RTC_MspInit+0x84>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d12c      	bne.n	8001074 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800101a:	193b      	adds	r3, r7, r4
 800101c:	2280      	movs	r2, #128	; 0x80
 800101e:	0292      	lsls	r2, r2, #10
 8001020:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001022:	193b      	adds	r3, r7, r4
 8001024:	2280      	movs	r2, #128	; 0x80
 8001026:	0052      	lsls	r2, r2, #1
 8001028:	625a      	str	r2, [r3, #36]	; 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800102a:	193b      	adds	r3, r7, r4
 800102c:	0018      	movs	r0, r3
 800102e:	f001 fd6b 	bl	8002b08 <HAL_RCCEx_PeriphCLKConfig>
 8001032:	1e03      	subs	r3, r0, #0
 8001034:	d001      	beq.n	800103a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001036:	f7ff ffb5 	bl	8000fa4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800103a:	4b11      	ldr	r3, [pc, #68]	; (8001080 <HAL_RTC_MspInit+0x88>)
 800103c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800103e:	4b10      	ldr	r3, [pc, #64]	; (8001080 <HAL_RTC_MspInit+0x88>)
 8001040:	2180      	movs	r1, #128	; 0x80
 8001042:	0209      	lsls	r1, r1, #8
 8001044:	430a      	orrs	r2, r1
 8001046:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001048:	4b0d      	ldr	r3, [pc, #52]	; (8001080 <HAL_RTC_MspInit+0x88>)
 800104a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800104c:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <HAL_RTC_MspInit+0x88>)
 800104e:	2180      	movs	r1, #128	; 0x80
 8001050:	00c9      	lsls	r1, r1, #3
 8001052:	430a      	orrs	r2, r1
 8001054:	63da      	str	r2, [r3, #60]	; 0x3c
 8001056:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <HAL_RTC_MspInit+0x88>)
 8001058:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800105a:	2380      	movs	r3, #128	; 0x80
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	4013      	ands	r3, r2
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8001064:	2200      	movs	r2, #0
 8001066:	2100      	movs	r1, #0
 8001068:	2002      	movs	r0, #2
 800106a:	f000 fb5d 	bl	8001728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 800106e:	2002      	movs	r0, #2
 8001070:	f000 fb6f 	bl	8001752 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001074:	46c0      	nop			; (mov r8, r8)
 8001076:	46bd      	mov	sp, r7
 8001078:	b00f      	add	sp, #60	; 0x3c
 800107a:	bd90      	pop	{r4, r7, pc}
 800107c:	40002800 	.word	0x40002800
 8001080:	40021000 	.word	0x40021000

08001084 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a1c      	ldr	r2, [pc, #112]	; (8001104 <HAL_TIM_Base_MspInit+0x80>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d116      	bne.n	80010c4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001096:	4b1c      	ldr	r3, [pc, #112]	; (8001108 <HAL_TIM_Base_MspInit+0x84>)
 8001098:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800109a:	4b1b      	ldr	r3, [pc, #108]	; (8001108 <HAL_TIM_Base_MspInit+0x84>)
 800109c:	2180      	movs	r1, #128	; 0x80
 800109e:	0209      	lsls	r1, r1, #8
 80010a0:	430a      	orrs	r2, r1
 80010a2:	641a      	str	r2, [r3, #64]	; 0x40
 80010a4:	4b18      	ldr	r3, [pc, #96]	; (8001108 <HAL_TIM_Base_MspInit+0x84>)
 80010a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010a8:	2380      	movs	r3, #128	; 0x80
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	4013      	ands	r3, r2
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2100      	movs	r1, #0
 80010b6:	2013      	movs	r0, #19
 80010b8:	f000 fb36 	bl	8001728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80010bc:	2013      	movs	r0, #19
 80010be:	f000 fb48 	bl	8001752 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80010c2:	e01a      	b.n	80010fa <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM16)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a10      	ldr	r2, [pc, #64]	; (800110c <HAL_TIM_Base_MspInit+0x88>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d115      	bne.n	80010fa <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <HAL_TIM_Base_MspInit+0x84>)
 80010d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010d2:	4b0d      	ldr	r3, [pc, #52]	; (8001108 <HAL_TIM_Base_MspInit+0x84>)
 80010d4:	2180      	movs	r1, #128	; 0x80
 80010d6:	0289      	lsls	r1, r1, #10
 80010d8:	430a      	orrs	r2, r1
 80010da:	641a      	str	r2, [r3, #64]	; 0x40
 80010dc:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <HAL_TIM_Base_MspInit+0x84>)
 80010de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010e0:	2380      	movs	r3, #128	; 0x80
 80010e2:	029b      	lsls	r3, r3, #10
 80010e4:	4013      	ands	r3, r2
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2100      	movs	r1, #0
 80010ee:	2015      	movs	r0, #21
 80010f0:	f000 fb1a 	bl	8001728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80010f4:	2015      	movs	r0, #21
 80010f6:	f000 fb2c 	bl	8001752 <HAL_NVIC_EnableIRQ>
}
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	46bd      	mov	sp, r7
 80010fe:	b004      	add	sp, #16
 8001100:	bd80      	pop	{r7, pc}
 8001102:	46c0      	nop			; (mov r8, r8)
 8001104:	40002000 	.word	0x40002000
 8001108:	40021000 	.word	0x40021000
 800110c:	40014400 	.word	0x40014400

08001110 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001110:	b590      	push	{r4, r7, lr}
 8001112:	b095      	sub	sp, #84	; 0x54
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	233c      	movs	r3, #60	; 0x3c
 800111a:	18fb      	adds	r3, r7, r3
 800111c:	0018      	movs	r0, r3
 800111e:	2314      	movs	r3, #20
 8001120:	001a      	movs	r2, r3
 8001122:	2100      	movs	r1, #0
 8001124:	f004 f960 	bl	80053e8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001128:	2414      	movs	r4, #20
 800112a:	193b      	adds	r3, r7, r4
 800112c:	0018      	movs	r0, r3
 800112e:	2328      	movs	r3, #40	; 0x28
 8001130:	001a      	movs	r2, r3
 8001132:	2100      	movs	r1, #0
 8001134:	f004 f958 	bl	80053e8 <memset>
  if(huart->Instance==USART1)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a3c      	ldr	r2, [pc, #240]	; (8001230 <HAL_UART_MspInit+0x120>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d171      	bne.n	8001226 <HAL_UART_MspInit+0x116>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001142:	193b      	adds	r3, r7, r4
 8001144:	2201      	movs	r2, #1
 8001146:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001148:	193b      	adds	r3, r7, r4
 800114a:	2200      	movs	r2, #0
 800114c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800114e:	193b      	adds	r3, r7, r4
 8001150:	0018      	movs	r0, r3
 8001152:	f001 fcd9 	bl	8002b08 <HAL_RCCEx_PeriphCLKConfig>
 8001156:	1e03      	subs	r3, r0, #0
 8001158:	d001      	beq.n	800115e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800115a:	f7ff ff23 	bl	8000fa4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800115e:	4b35      	ldr	r3, [pc, #212]	; (8001234 <HAL_UART_MspInit+0x124>)
 8001160:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001162:	4b34      	ldr	r3, [pc, #208]	; (8001234 <HAL_UART_MspInit+0x124>)
 8001164:	2180      	movs	r1, #128	; 0x80
 8001166:	01c9      	lsls	r1, r1, #7
 8001168:	430a      	orrs	r2, r1
 800116a:	641a      	str	r2, [r3, #64]	; 0x40
 800116c:	4b31      	ldr	r3, [pc, #196]	; (8001234 <HAL_UART_MspInit+0x124>)
 800116e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001170:	2380      	movs	r3, #128	; 0x80
 8001172:	01db      	lsls	r3, r3, #7
 8001174:	4013      	ands	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
 8001178:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117a:	4b2e      	ldr	r3, [pc, #184]	; (8001234 <HAL_UART_MspInit+0x124>)
 800117c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800117e:	4b2d      	ldr	r3, [pc, #180]	; (8001234 <HAL_UART_MspInit+0x124>)
 8001180:	2101      	movs	r1, #1
 8001182:	430a      	orrs	r2, r1
 8001184:	635a      	str	r2, [r3, #52]	; 0x34
 8001186:	4b2b      	ldr	r3, [pc, #172]	; (8001234 <HAL_UART_MspInit+0x124>)
 8001188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800118a:	2201      	movs	r2, #1
 800118c:	4013      	ands	r3, r2
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001192:	213c      	movs	r1, #60	; 0x3c
 8001194:	187b      	adds	r3, r7, r1
 8001196:	22c0      	movs	r2, #192	; 0xc0
 8001198:	00d2      	lsls	r2, r2, #3
 800119a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119c:	187b      	adds	r3, r7, r1
 800119e:	2202      	movs	r2, #2
 80011a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	187b      	adds	r3, r7, r1
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a8:	187b      	adds	r3, r7, r1
 80011aa:	2200      	movs	r2, #0
 80011ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80011ae:	187b      	adds	r3, r7, r1
 80011b0:	2201      	movs	r2, #1
 80011b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b4:	187a      	adds	r2, r7, r1
 80011b6:	23a0      	movs	r3, #160	; 0xa0
 80011b8:	05db      	lsls	r3, r3, #23
 80011ba:	0011      	movs	r1, r2
 80011bc:	0018      	movs	r0, r3
 80011be:	f000 fe03 	bl	8001dc8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80011c2:	4b1d      	ldr	r3, [pc, #116]	; (8001238 <HAL_UART_MspInit+0x128>)
 80011c4:	4a1d      	ldr	r2, [pc, #116]	; (800123c <HAL_UART_MspInit+0x12c>)
 80011c6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80011c8:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <HAL_UART_MspInit+0x128>)
 80011ca:	2232      	movs	r2, #50	; 0x32
 80011cc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011ce:	4b1a      	ldr	r3, [pc, #104]	; (8001238 <HAL_UART_MspInit+0x128>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011d4:	4b18      	ldr	r3, [pc, #96]	; (8001238 <HAL_UART_MspInit+0x128>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011da:	4b17      	ldr	r3, [pc, #92]	; (8001238 <HAL_UART_MspInit+0x128>)
 80011dc:	2280      	movs	r2, #128	; 0x80
 80011de:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011e0:	4b15      	ldr	r3, [pc, #84]	; (8001238 <HAL_UART_MspInit+0x128>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011e6:	4b14      	ldr	r3, [pc, #80]	; (8001238 <HAL_UART_MspInit+0x128>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80011ec:	4b12      	ldr	r3, [pc, #72]	; (8001238 <HAL_UART_MspInit+0x128>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011f2:	4b11      	ldr	r3, [pc, #68]	; (8001238 <HAL_UART_MspInit+0x128>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80011f8:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <HAL_UART_MspInit+0x128>)
 80011fa:	0018      	movs	r0, r3
 80011fc:	f000 fac6 	bl	800178c <HAL_DMA_Init>
 8001200:	1e03      	subs	r3, r0, #0
 8001202:	d001      	beq.n	8001208 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8001204:	f7ff fece 	bl	8000fa4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2180      	movs	r1, #128	; 0x80
 800120c:	4a0a      	ldr	r2, [pc, #40]	; (8001238 <HAL_UART_MspInit+0x128>)
 800120e:	505a      	str	r2, [r3, r1]
 8001210:	4b09      	ldr	r3, [pc, #36]	; (8001238 <HAL_UART_MspInit+0x128>)
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001216:	2200      	movs	r2, #0
 8001218:	2100      	movs	r1, #0
 800121a:	201b      	movs	r0, #27
 800121c:	f000 fa84 	bl	8001728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001220:	201b      	movs	r0, #27
 8001222:	f000 fa96 	bl	8001752 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001226:	46c0      	nop			; (mov r8, r8)
 8001228:	46bd      	mov	sp, r7
 800122a:	b015      	add	sp, #84	; 0x54
 800122c:	bd90      	pop	{r4, r7, pc}
 800122e:	46c0      	nop			; (mov r8, r8)
 8001230:	40013800 	.word	0x40013800
 8001234:	40021000 	.word	0x40021000
 8001238:	20000270 	.word	0x20000270
 800123c:	40020008 	.word	0x40020008

08001240 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001244:	e7fe      	b.n	8001244 <NMI_Handler+0x4>

08001246 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800124a:	e7fe      	b.n	800124a <HardFault_Handler+0x4>

0800124c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001250:	46c0      	nop			; (mov r8, r8)
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001264:	f000 f998 	bl	8001598 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001268:	46c0      	nop			; (mov r8, r8)
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001274:	4b03      	ldr	r3, [pc, #12]	; (8001284 <RTC_TAMP_IRQHandler+0x14>)
 8001276:	0018      	movs	r0, r3
 8001278:	f002 f90c 	bl	8003494 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 800127c:	46c0      	nop			; (mov r8, r8)
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	20000118 	.word	0x20000118

08001288 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800128c:	4b03      	ldr	r3, [pc, #12]	; (800129c <DMA1_Channel1_IRQHandler+0x14>)
 800128e:	0018      	movs	r0, r3
 8001290:	f000 fc58 	bl	8001b44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001294:	46c0      	nop			; (mov r8, r8)
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	46c0      	nop			; (mov r8, r8)
 800129c:	20000270 	.word	0x20000270

080012a0 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80012a4:	4b03      	ldr	r3, [pc, #12]	; (80012b4 <TIM14_IRQHandler+0x14>)
 80012a6:	0018      	movs	r0, r3
 80012a8:	f002 f9f4 	bl	8003694 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80012ac:	46c0      	nop			; (mov r8, r8)
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	46c0      	nop			; (mov r8, r8)
 80012b4:	20000144 	.word	0x20000144

080012b8 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80012bc:	4b03      	ldr	r3, [pc, #12]	; (80012cc <TIM16_IRQHandler+0x14>)
 80012be:	0018      	movs	r0, r3
 80012c0:	f002 f9e8 	bl	8003694 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80012c4:	46c0      	nop			; (mov r8, r8)
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	46c0      	nop			; (mov r8, r8)
 80012cc:	20000190 	.word	0x20000190

080012d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80012d4:	4b03      	ldr	r3, [pc, #12]	; (80012e4 <USART1_IRQHandler+0x14>)
 80012d6:	0018      	movs	r0, r3
 80012d8:	f002 fcae 	bl	8003c38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80012dc:	46c0      	nop			; (mov r8, r8)
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	46c0      	nop			; (mov r8, r8)
 80012e4:	200001dc 	.word	0x200001dc

080012e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
	return 1;
 80012ec:	2301      	movs	r3, #1
}
 80012ee:	0018      	movs	r0, r3
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <_kill>:

int _kill(int pid, int sig)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80012fe:	f004 f849 	bl	8005394 <__errno>
 8001302:	0003      	movs	r3, r0
 8001304:	2216      	movs	r2, #22
 8001306:	601a      	str	r2, [r3, #0]
	return -1;
 8001308:	2301      	movs	r3, #1
 800130a:	425b      	negs	r3, r3
}
 800130c:	0018      	movs	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	b002      	add	sp, #8
 8001312:	bd80      	pop	{r7, pc}

08001314 <_exit>:

void _exit (int status)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800131c:	2301      	movs	r3, #1
 800131e:	425a      	negs	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	0011      	movs	r1, r2
 8001324:	0018      	movs	r0, r3
 8001326:	f7ff ffe5 	bl	80012f4 <_kill>
	while (1) {}		/* Make sure we hang here */
 800132a:	e7fe      	b.n	800132a <_exit+0x16>

0800132c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]
 800133c:	e00a      	b.n	8001354 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800133e:	e000      	b.n	8001342 <_read+0x16>
 8001340:	bf00      	nop
 8001342:	0001      	movs	r1, r0
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	1c5a      	adds	r2, r3, #1
 8001348:	60ba      	str	r2, [r7, #8]
 800134a:	b2ca      	uxtb	r2, r1
 800134c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	3301      	adds	r3, #1
 8001352:	617b      	str	r3, [r7, #20]
 8001354:	697a      	ldr	r2, [r7, #20]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	429a      	cmp	r2, r3
 800135a:	dbf0      	blt.n	800133e <_read+0x12>
	}

return len;
 800135c:	687b      	ldr	r3, [r7, #4]
}
 800135e:	0018      	movs	r0, r3
 8001360:	46bd      	mov	sp, r7
 8001362:	b006      	add	sp, #24
 8001364:	bd80      	pop	{r7, pc}

08001366 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b086      	sub	sp, #24
 800136a:	af00      	add	r7, sp, #0
 800136c:	60f8      	str	r0, [r7, #12]
 800136e:	60b9      	str	r1, [r7, #8]
 8001370:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
 8001376:	e009      	b.n	800138c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	1c5a      	adds	r2, r3, #1
 800137c:	60ba      	str	r2, [r7, #8]
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	0018      	movs	r0, r3
 8001382:	e000      	b.n	8001386 <_write+0x20>
 8001384:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	3301      	adds	r3, #1
 800138a:	617b      	str	r3, [r7, #20]
 800138c:	697a      	ldr	r2, [r7, #20]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	429a      	cmp	r2, r3
 8001392:	dbf1      	blt.n	8001378 <_write+0x12>
	}
	return len;
 8001394:	687b      	ldr	r3, [r7, #4]
}
 8001396:	0018      	movs	r0, r3
 8001398:	46bd      	mov	sp, r7
 800139a:	b006      	add	sp, #24
 800139c:	bd80      	pop	{r7, pc}

0800139e <_close>:

int _close(int file)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
	return -1;
 80013a6:	2301      	movs	r3, #1
 80013a8:	425b      	negs	r3, r3
}
 80013aa:	0018      	movs	r0, r3
 80013ac:	46bd      	mov	sp, r7
 80013ae:	b002      	add	sp, #8
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
 80013ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	2280      	movs	r2, #128	; 0x80
 80013c0:	0192      	lsls	r2, r2, #6
 80013c2:	605a      	str	r2, [r3, #4]
	return 0;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	0018      	movs	r0, r3
 80013c8:	46bd      	mov	sp, r7
 80013ca:	b002      	add	sp, #8
 80013cc:	bd80      	pop	{r7, pc}

080013ce <_isatty>:

int _isatty(int file)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
	return 1;
 80013d6:	2301      	movs	r3, #1
}
 80013d8:	0018      	movs	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	b002      	add	sp, #8
 80013de:	bd80      	pop	{r7, pc}

080013e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
	return 0;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	0018      	movs	r0, r3
 80013f0:	46bd      	mov	sp, r7
 80013f2:	b004      	add	sp, #16
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001400:	4a14      	ldr	r2, [pc, #80]	; (8001454 <_sbrk+0x5c>)
 8001402:	4b15      	ldr	r3, [pc, #84]	; (8001458 <_sbrk+0x60>)
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800140c:	4b13      	ldr	r3, [pc, #76]	; (800145c <_sbrk+0x64>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d102      	bne.n	800141a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001414:	4b11      	ldr	r3, [pc, #68]	; (800145c <_sbrk+0x64>)
 8001416:	4a12      	ldr	r2, [pc, #72]	; (8001460 <_sbrk+0x68>)
 8001418:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800141a:	4b10      	ldr	r3, [pc, #64]	; (800145c <_sbrk+0x64>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	18d3      	adds	r3, r2, r3
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	429a      	cmp	r2, r3
 8001426:	d207      	bcs.n	8001438 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001428:	f003 ffb4 	bl	8005394 <__errno>
 800142c:	0003      	movs	r3, r0
 800142e:	220c      	movs	r2, #12
 8001430:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001432:	2301      	movs	r3, #1
 8001434:	425b      	negs	r3, r3
 8001436:	e009      	b.n	800144c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001438:	4b08      	ldr	r3, [pc, #32]	; (800145c <_sbrk+0x64>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800143e:	4b07      	ldr	r3, [pc, #28]	; (800145c <_sbrk+0x64>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	18d2      	adds	r2, r2, r3
 8001446:	4b05      	ldr	r3, [pc, #20]	; (800145c <_sbrk+0x64>)
 8001448:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800144a:	68fb      	ldr	r3, [r7, #12]
}
 800144c:	0018      	movs	r0, r3
 800144e:	46bd      	mov	sp, r7
 8001450:	b006      	add	sp, #24
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20002000 	.word	0x20002000
 8001458:	00000400 	.word	0x00000400
 800145c:	20000524 	.word	0x20000524
 8001460:	20000540 	.word	0x20000540

08001464 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001468:	46c0      	nop			; (mov r8, r8)
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001470:	480d      	ldr	r0, [pc, #52]	; (80014a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001472:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001474:	f7ff fff6 	bl	8001464 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001478:	480c      	ldr	r0, [pc, #48]	; (80014ac <LoopForever+0x6>)
  ldr r1, =_edata
 800147a:	490d      	ldr	r1, [pc, #52]	; (80014b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800147c:	4a0d      	ldr	r2, [pc, #52]	; (80014b4 <LoopForever+0xe>)
  movs r3, #0
 800147e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001480:	e002      	b.n	8001488 <LoopCopyDataInit>

08001482 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001482:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001484:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001486:	3304      	adds	r3, #4

08001488 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001488:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800148a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800148c:	d3f9      	bcc.n	8001482 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800148e:	4a0a      	ldr	r2, [pc, #40]	; (80014b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001490:	4c0a      	ldr	r4, [pc, #40]	; (80014bc <LoopForever+0x16>)
  movs r3, #0
 8001492:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001494:	e001      	b.n	800149a <LoopFillZerobss>

08001496 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001496:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001498:	3204      	adds	r2, #4

0800149a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800149a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800149c:	d3fb      	bcc.n	8001496 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800149e:	f003 ff7f 	bl	80053a0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80014a2:	f7ff f8cd 	bl	8000640 <main>

080014a6 <LoopForever>:

LoopForever:
  b LoopForever
 80014a6:	e7fe      	b.n	80014a6 <LoopForever>
  ldr   r0, =_estack
 80014a8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80014ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014b0:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80014b4:	08007864 	.word	0x08007864
  ldr r2, =_sbss
 80014b8:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 80014bc:	2000053c 	.word	0x2000053c

080014c0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014c0:	e7fe      	b.n	80014c0 <ADC1_IRQHandler>
	...

080014c4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014ca:	1dfb      	adds	r3, r7, #7
 80014cc:	2200      	movs	r2, #0
 80014ce:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014d0:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <HAL_Init+0x3c>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <HAL_Init+0x3c>)
 80014d6:	2180      	movs	r1, #128	; 0x80
 80014d8:	0049      	lsls	r1, r1, #1
 80014da:	430a      	orrs	r2, r1
 80014dc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014de:	2000      	movs	r0, #0
 80014e0:	f000 f810 	bl	8001504 <HAL_InitTick>
 80014e4:	1e03      	subs	r3, r0, #0
 80014e6:	d003      	beq.n	80014f0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80014e8:	1dfb      	adds	r3, r7, #7
 80014ea:	2201      	movs	r2, #1
 80014ec:	701a      	strb	r2, [r3, #0]
 80014ee:	e001      	b.n	80014f4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80014f0:	f7ff fd5e 	bl	8000fb0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014f4:	1dfb      	adds	r3, r7, #7
 80014f6:	781b      	ldrb	r3, [r3, #0]
}
 80014f8:	0018      	movs	r0, r3
 80014fa:	46bd      	mov	sp, r7
 80014fc:	b002      	add	sp, #8
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40022000 	.word	0x40022000

08001504 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001504:	b590      	push	{r4, r7, lr}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800150c:	230f      	movs	r3, #15
 800150e:	18fb      	adds	r3, r7, r3
 8001510:	2200      	movs	r2, #0
 8001512:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001514:	4b1d      	ldr	r3, [pc, #116]	; (800158c <HAL_InitTick+0x88>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d02b      	beq.n	8001574 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800151c:	4b1c      	ldr	r3, [pc, #112]	; (8001590 <HAL_InitTick+0x8c>)
 800151e:	681c      	ldr	r4, [r3, #0]
 8001520:	4b1a      	ldr	r3, [pc, #104]	; (800158c <HAL_InitTick+0x88>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	0019      	movs	r1, r3
 8001526:	23fa      	movs	r3, #250	; 0xfa
 8001528:	0098      	lsls	r0, r3, #2
 800152a:	f7fe fdfd 	bl	8000128 <__udivsi3>
 800152e:	0003      	movs	r3, r0
 8001530:	0019      	movs	r1, r3
 8001532:	0020      	movs	r0, r4
 8001534:	f7fe fdf8 	bl	8000128 <__udivsi3>
 8001538:	0003      	movs	r3, r0
 800153a:	0018      	movs	r0, r3
 800153c:	f000 f919 	bl	8001772 <HAL_SYSTICK_Config>
 8001540:	1e03      	subs	r3, r0, #0
 8001542:	d112      	bne.n	800156a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b03      	cmp	r3, #3
 8001548:	d80a      	bhi.n	8001560 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800154a:	6879      	ldr	r1, [r7, #4]
 800154c:	2301      	movs	r3, #1
 800154e:	425b      	negs	r3, r3
 8001550:	2200      	movs	r2, #0
 8001552:	0018      	movs	r0, r3
 8001554:	f000 f8e8 	bl	8001728 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001558:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <HAL_InitTick+0x90>)
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	e00d      	b.n	800157c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001560:	230f      	movs	r3, #15
 8001562:	18fb      	adds	r3, r7, r3
 8001564:	2201      	movs	r2, #1
 8001566:	701a      	strb	r2, [r3, #0]
 8001568:	e008      	b.n	800157c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800156a:	230f      	movs	r3, #15
 800156c:	18fb      	adds	r3, r7, r3
 800156e:	2201      	movs	r2, #1
 8001570:	701a      	strb	r2, [r3, #0]
 8001572:	e003      	b.n	800157c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001574:	230f      	movs	r3, #15
 8001576:	18fb      	adds	r3, r7, r3
 8001578:	2201      	movs	r2, #1
 800157a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800157c:	230f      	movs	r3, #15
 800157e:	18fb      	adds	r3, r7, r3
 8001580:	781b      	ldrb	r3, [r3, #0]
}
 8001582:	0018      	movs	r0, r3
 8001584:	46bd      	mov	sp, r7
 8001586:	b005      	add	sp, #20
 8001588:	bd90      	pop	{r4, r7, pc}
 800158a:	46c0      	nop			; (mov r8, r8)
 800158c:	20000094 	.word	0x20000094
 8001590:	2000008c 	.word	0x2000008c
 8001594:	20000090 	.word	0x20000090

08001598 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800159c:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <HAL_IncTick+0x1c>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	001a      	movs	r2, r3
 80015a2:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <HAL_IncTick+0x20>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	18d2      	adds	r2, r2, r3
 80015a8:	4b03      	ldr	r3, [pc, #12]	; (80015b8 <HAL_IncTick+0x20>)
 80015aa:	601a      	str	r2, [r3, #0]
}
 80015ac:	46c0      	nop			; (mov r8, r8)
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	46c0      	nop			; (mov r8, r8)
 80015b4:	20000094 	.word	0x20000094
 80015b8:	20000528 	.word	0x20000528

080015bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  return uwTick;
 80015c0:	4b02      	ldr	r3, [pc, #8]	; (80015cc <HAL_GetTick+0x10>)
 80015c2:	681b      	ldr	r3, [r3, #0]
}
 80015c4:	0018      	movs	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	46c0      	nop			; (mov r8, r8)
 80015cc:	20000528 	.word	0x20000528

080015d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	0002      	movs	r2, r0
 80015d8:	1dfb      	adds	r3, r7, #7
 80015da:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015dc:	1dfb      	adds	r3, r7, #7
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b7f      	cmp	r3, #127	; 0x7f
 80015e2:	d809      	bhi.n	80015f8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015e4:	1dfb      	adds	r3, r7, #7
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	001a      	movs	r2, r3
 80015ea:	231f      	movs	r3, #31
 80015ec:	401a      	ands	r2, r3
 80015ee:	4b04      	ldr	r3, [pc, #16]	; (8001600 <__NVIC_EnableIRQ+0x30>)
 80015f0:	2101      	movs	r1, #1
 80015f2:	4091      	lsls	r1, r2
 80015f4:	000a      	movs	r2, r1
 80015f6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80015f8:	46c0      	nop			; (mov r8, r8)
 80015fa:	46bd      	mov	sp, r7
 80015fc:	b002      	add	sp, #8
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	e000e100 	.word	0xe000e100

08001604 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001604:	b590      	push	{r4, r7, lr}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	0002      	movs	r2, r0
 800160c:	6039      	str	r1, [r7, #0]
 800160e:	1dfb      	adds	r3, r7, #7
 8001610:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001612:	1dfb      	adds	r3, r7, #7
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b7f      	cmp	r3, #127	; 0x7f
 8001618:	d828      	bhi.n	800166c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800161a:	4a2f      	ldr	r2, [pc, #188]	; (80016d8 <__NVIC_SetPriority+0xd4>)
 800161c:	1dfb      	adds	r3, r7, #7
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	b25b      	sxtb	r3, r3
 8001622:	089b      	lsrs	r3, r3, #2
 8001624:	33c0      	adds	r3, #192	; 0xc0
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	589b      	ldr	r3, [r3, r2]
 800162a:	1dfa      	adds	r2, r7, #7
 800162c:	7812      	ldrb	r2, [r2, #0]
 800162e:	0011      	movs	r1, r2
 8001630:	2203      	movs	r2, #3
 8001632:	400a      	ands	r2, r1
 8001634:	00d2      	lsls	r2, r2, #3
 8001636:	21ff      	movs	r1, #255	; 0xff
 8001638:	4091      	lsls	r1, r2
 800163a:	000a      	movs	r2, r1
 800163c:	43d2      	mvns	r2, r2
 800163e:	401a      	ands	r2, r3
 8001640:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	019b      	lsls	r3, r3, #6
 8001646:	22ff      	movs	r2, #255	; 0xff
 8001648:	401a      	ands	r2, r3
 800164a:	1dfb      	adds	r3, r7, #7
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	0018      	movs	r0, r3
 8001650:	2303      	movs	r3, #3
 8001652:	4003      	ands	r3, r0
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001658:	481f      	ldr	r0, [pc, #124]	; (80016d8 <__NVIC_SetPriority+0xd4>)
 800165a:	1dfb      	adds	r3, r7, #7
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	b25b      	sxtb	r3, r3
 8001660:	089b      	lsrs	r3, r3, #2
 8001662:	430a      	orrs	r2, r1
 8001664:	33c0      	adds	r3, #192	; 0xc0
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800166a:	e031      	b.n	80016d0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800166c:	4a1b      	ldr	r2, [pc, #108]	; (80016dc <__NVIC_SetPriority+0xd8>)
 800166e:	1dfb      	adds	r3, r7, #7
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	0019      	movs	r1, r3
 8001674:	230f      	movs	r3, #15
 8001676:	400b      	ands	r3, r1
 8001678:	3b08      	subs	r3, #8
 800167a:	089b      	lsrs	r3, r3, #2
 800167c:	3306      	adds	r3, #6
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	18d3      	adds	r3, r2, r3
 8001682:	3304      	adds	r3, #4
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	1dfa      	adds	r2, r7, #7
 8001688:	7812      	ldrb	r2, [r2, #0]
 800168a:	0011      	movs	r1, r2
 800168c:	2203      	movs	r2, #3
 800168e:	400a      	ands	r2, r1
 8001690:	00d2      	lsls	r2, r2, #3
 8001692:	21ff      	movs	r1, #255	; 0xff
 8001694:	4091      	lsls	r1, r2
 8001696:	000a      	movs	r2, r1
 8001698:	43d2      	mvns	r2, r2
 800169a:	401a      	ands	r2, r3
 800169c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	019b      	lsls	r3, r3, #6
 80016a2:	22ff      	movs	r2, #255	; 0xff
 80016a4:	401a      	ands	r2, r3
 80016a6:	1dfb      	adds	r3, r7, #7
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	0018      	movs	r0, r3
 80016ac:	2303      	movs	r3, #3
 80016ae:	4003      	ands	r3, r0
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016b4:	4809      	ldr	r0, [pc, #36]	; (80016dc <__NVIC_SetPriority+0xd8>)
 80016b6:	1dfb      	adds	r3, r7, #7
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	001c      	movs	r4, r3
 80016bc:	230f      	movs	r3, #15
 80016be:	4023      	ands	r3, r4
 80016c0:	3b08      	subs	r3, #8
 80016c2:	089b      	lsrs	r3, r3, #2
 80016c4:	430a      	orrs	r2, r1
 80016c6:	3306      	adds	r3, #6
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	18c3      	adds	r3, r0, r3
 80016cc:	3304      	adds	r3, #4
 80016ce:	601a      	str	r2, [r3, #0]
}
 80016d0:	46c0      	nop			; (mov r8, r8)
 80016d2:	46bd      	mov	sp, r7
 80016d4:	b003      	add	sp, #12
 80016d6:	bd90      	pop	{r4, r7, pc}
 80016d8:	e000e100 	.word	0xe000e100
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	1e5a      	subs	r2, r3, #1
 80016ec:	2380      	movs	r3, #128	; 0x80
 80016ee:	045b      	lsls	r3, r3, #17
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d301      	bcc.n	80016f8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016f4:	2301      	movs	r3, #1
 80016f6:	e010      	b.n	800171a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016f8:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <SysTick_Config+0x44>)
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	3a01      	subs	r2, #1
 80016fe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001700:	2301      	movs	r3, #1
 8001702:	425b      	negs	r3, r3
 8001704:	2103      	movs	r1, #3
 8001706:	0018      	movs	r0, r3
 8001708:	f7ff ff7c 	bl	8001604 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800170c:	4b05      	ldr	r3, [pc, #20]	; (8001724 <SysTick_Config+0x44>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001712:	4b04      	ldr	r3, [pc, #16]	; (8001724 <SysTick_Config+0x44>)
 8001714:	2207      	movs	r2, #7
 8001716:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001718:	2300      	movs	r3, #0
}
 800171a:	0018      	movs	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	b002      	add	sp, #8
 8001720:	bd80      	pop	{r7, pc}
 8001722:	46c0      	nop			; (mov r8, r8)
 8001724:	e000e010 	.word	0xe000e010

08001728 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	60b9      	str	r1, [r7, #8]
 8001730:	607a      	str	r2, [r7, #4]
 8001732:	210f      	movs	r1, #15
 8001734:	187b      	adds	r3, r7, r1
 8001736:	1c02      	adds	r2, r0, #0
 8001738:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800173a:	68ba      	ldr	r2, [r7, #8]
 800173c:	187b      	adds	r3, r7, r1
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	b25b      	sxtb	r3, r3
 8001742:	0011      	movs	r1, r2
 8001744:	0018      	movs	r0, r3
 8001746:	f7ff ff5d 	bl	8001604 <__NVIC_SetPriority>
}
 800174a:	46c0      	nop			; (mov r8, r8)
 800174c:	46bd      	mov	sp, r7
 800174e:	b004      	add	sp, #16
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b082      	sub	sp, #8
 8001756:	af00      	add	r7, sp, #0
 8001758:	0002      	movs	r2, r0
 800175a:	1dfb      	adds	r3, r7, #7
 800175c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800175e:	1dfb      	adds	r3, r7, #7
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	b25b      	sxtb	r3, r3
 8001764:	0018      	movs	r0, r3
 8001766:	f7ff ff33 	bl	80015d0 <__NVIC_EnableIRQ>
}
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	46bd      	mov	sp, r7
 800176e:	b002      	add	sp, #8
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	0018      	movs	r0, r3
 800177e:	f7ff ffaf 	bl	80016e0 <SysTick_Config>
 8001782:	0003      	movs	r3, r0
}
 8001784:	0018      	movs	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	b002      	add	sp, #8
 800178a:	bd80      	pop	{r7, pc}

0800178c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d101      	bne.n	800179e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e077      	b.n	800188e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a3d      	ldr	r2, [pc, #244]	; (8001898 <HAL_DMA_Init+0x10c>)
 80017a4:	4694      	mov	ip, r2
 80017a6:	4463      	add	r3, ip
 80017a8:	2114      	movs	r1, #20
 80017aa:	0018      	movs	r0, r3
 80017ac:	f7fe fcbc 	bl	8000128 <__udivsi3>
 80017b0:	0003      	movs	r3, r0
 80017b2:	009a      	lsls	r2, r3, #2
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2225      	movs	r2, #37	; 0x25
 80017bc:	2102      	movs	r1, #2
 80017be:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4934      	ldr	r1, [pc, #208]	; (800189c <HAL_DMA_Init+0x110>)
 80017cc:	400a      	ands	r2, r1
 80017ce:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6819      	ldr	r1, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	689a      	ldr	r2, [r3, #8]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	431a      	orrs	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	691b      	ldr	r3, [r3, #16]
 80017e4:	431a      	orrs	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	695b      	ldr	r3, [r3, #20]
 80017ea:	431a      	orrs	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	431a      	orrs	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	431a      	orrs	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a1b      	ldr	r3, [r3, #32]
 80017fc:	431a      	orrs	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	430a      	orrs	r2, r1
 8001804:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	0018      	movs	r0, r3
 800180a:	f000 fa8d 	bl	8001d28 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	689a      	ldr	r2, [r3, #8]
 8001812:	2380      	movs	r3, #128	; 0x80
 8001814:	01db      	lsls	r3, r3, #7
 8001816:	429a      	cmp	r2, r3
 8001818:	d102      	bne.n	8001820 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001828:	213f      	movs	r1, #63	; 0x3f
 800182a:	400a      	ands	r2, r1
 800182c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001836:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d011      	beq.n	8001864 <HAL_DMA_Init+0xd8>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	2b04      	cmp	r3, #4
 8001846:	d80d      	bhi.n	8001864 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	0018      	movs	r0, r3
 800184c:	f000 fa98 	bl	8001d80 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	e008      	b.n	8001876 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2225      	movs	r2, #37	; 0x25
 8001880:	2101      	movs	r1, #1
 8001882:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2224      	movs	r2, #36	; 0x24
 8001888:	2100      	movs	r1, #0
 800188a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	0018      	movs	r0, r3
 8001890:	46bd      	mov	sp, r7
 8001892:	b002      	add	sp, #8
 8001894:	bd80      	pop	{r7, pc}
 8001896:	46c0      	nop			; (mov r8, r8)
 8001898:	bffdfff8 	.word	0xbffdfff8
 800189c:	ffff800f 	.word	0xffff800f

080018a0 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
 80018ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018ae:	2317      	movs	r3, #23
 80018b0:	18fb      	adds	r3, r7, r3
 80018b2:	2200      	movs	r2, #0
 80018b4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2224      	movs	r2, #36	; 0x24
 80018ba:	5c9b      	ldrb	r3, [r3, r2]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d101      	bne.n	80018c4 <HAL_DMA_Start_IT+0x24>
 80018c0:	2302      	movs	r3, #2
 80018c2:	e06f      	b.n	80019a4 <HAL_DMA_Start_IT+0x104>
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2224      	movs	r2, #36	; 0x24
 80018c8:	2101      	movs	r1, #1
 80018ca:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2225      	movs	r2, #37	; 0x25
 80018d0:	5c9b      	ldrb	r3, [r3, r2]
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d157      	bne.n	8001988 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2225      	movs	r2, #37	; 0x25
 80018dc:	2102      	movs	r1, #2
 80018de:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2200      	movs	r2, #0
 80018e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2101      	movs	r1, #1
 80018f2:	438a      	bics	r2, r1
 80018f4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	68b9      	ldr	r1, [r7, #8]
 80018fc:	68f8      	ldr	r0, [r7, #12]
 80018fe:	f000 f9d3 	bl	8001ca8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	2b00      	cmp	r3, #0
 8001908:	d008      	beq.n	800191c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	210e      	movs	r1, #14
 8001916:	430a      	orrs	r2, r1
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	e00f      	b.n	800193c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2104      	movs	r1, #4
 8001928:	438a      	bics	r2, r1
 800192a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	210a      	movs	r1, #10
 8001938:	430a      	orrs	r2, r1
 800193a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	2380      	movs	r3, #128	; 0x80
 8001944:	025b      	lsls	r3, r3, #9
 8001946:	4013      	ands	r3, r2
 8001948:	d008      	beq.n	800195c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001954:	2180      	movs	r1, #128	; 0x80
 8001956:	0049      	lsls	r1, r1, #1
 8001958:	430a      	orrs	r2, r1
 800195a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001960:	2b00      	cmp	r3, #0
 8001962:	d008      	beq.n	8001976 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800196e:	2180      	movs	r1, #128	; 0x80
 8001970:	0049      	lsls	r1, r1, #1
 8001972:	430a      	orrs	r2, r1
 8001974:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2101      	movs	r1, #1
 8001982:	430a      	orrs	r2, r1
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	e00a      	b.n	800199e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2280      	movs	r2, #128	; 0x80
 800198c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2224      	movs	r2, #36	; 0x24
 8001992:	2100      	movs	r1, #0
 8001994:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8001996:	2317      	movs	r3, #23
 8001998:	18fb      	adds	r3, r7, r3
 800199a:	2201      	movs	r2, #1
 800199c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800199e:	2317      	movs	r3, #23
 80019a0:	18fb      	adds	r3, r7, r3
 80019a2:	781b      	ldrb	r3, [r3, #0]
}
 80019a4:	0018      	movs	r0, r3
 80019a6:	46bd      	mov	sp, r7
 80019a8:	b006      	add	sp, #24
 80019aa:	bd80      	pop	{r7, pc}

080019ac <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e050      	b.n	8001a60 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2225      	movs	r2, #37	; 0x25
 80019c2:	5c9b      	ldrb	r3, [r3, r2]
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d008      	beq.n	80019dc <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2204      	movs	r2, #4
 80019ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2224      	movs	r2, #36	; 0x24
 80019d4:	2100      	movs	r1, #0
 80019d6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e041      	b.n	8001a60 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	210e      	movs	r1, #14
 80019e8:	438a      	bics	r2, r1
 80019ea:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f6:	491c      	ldr	r1, [pc, #112]	; (8001a68 <HAL_DMA_Abort+0xbc>)
 80019f8:	400a      	ands	r2, r1
 80019fa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2101      	movs	r1, #1
 8001a08:	438a      	bics	r2, r1
 8001a0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8001a0c:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <HAL_DMA_Abort+0xc0>)
 8001a0e:	6859      	ldr	r1, [r3, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a14:	221c      	movs	r2, #28
 8001a16:	4013      	ands	r3, r2
 8001a18:	2201      	movs	r2, #1
 8001a1a:	409a      	lsls	r2, r3
 8001a1c:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <HAL_DMA_Abort+0xc0>)
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001a2a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d00c      	beq.n	8001a4e <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a3e:	490a      	ldr	r1, [pc, #40]	; (8001a68 <HAL_DMA_Abort+0xbc>)
 8001a40:	400a      	ands	r2, r1
 8001a42:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001a4c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2225      	movs	r2, #37	; 0x25
 8001a52:	2101      	movs	r1, #1
 8001a54:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2224      	movs	r2, #36	; 0x24
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	0018      	movs	r0, r3
 8001a62:	46bd      	mov	sp, r7
 8001a64:	b002      	add	sp, #8
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	fffffeff 	.word	0xfffffeff
 8001a6c:	40020000 	.word	0x40020000

08001a70 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a78:	210f      	movs	r1, #15
 8001a7a:	187b      	adds	r3, r7, r1
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2225      	movs	r2, #37	; 0x25
 8001a84:	5c9b      	ldrb	r3, [r3, r2]
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d006      	beq.n	8001a9a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2204      	movs	r2, #4
 8001a90:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001a92:	187b      	adds	r3, r7, r1
 8001a94:	2201      	movs	r2, #1
 8001a96:	701a      	strb	r2, [r3, #0]
 8001a98:	e049      	b.n	8001b2e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	210e      	movs	r1, #14
 8001aa6:	438a      	bics	r2, r1
 8001aa8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	438a      	bics	r2, r1
 8001ab8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac4:	491d      	ldr	r1, [pc, #116]	; (8001b3c <HAL_DMA_Abort_IT+0xcc>)
 8001ac6:	400a      	ands	r2, r1
 8001ac8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001aca:	4b1d      	ldr	r3, [pc, #116]	; (8001b40 <HAL_DMA_Abort_IT+0xd0>)
 8001acc:	6859      	ldr	r1, [r3, #4]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	221c      	movs	r2, #28
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	409a      	lsls	r2, r3
 8001ada:	4b19      	ldr	r3, [pc, #100]	; (8001b40 <HAL_DMA_Abort_IT+0xd0>)
 8001adc:	430a      	orrs	r2, r1
 8001ade:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001ae8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d00c      	beq.n	8001b0c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001afc:	490f      	ldr	r1, [pc, #60]	; (8001b3c <HAL_DMA_Abort_IT+0xcc>)
 8001afe:	400a      	ands	r2, r1
 8001b00:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001b0a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2225      	movs	r2, #37	; 0x25
 8001b10:	2101      	movs	r1, #1
 8001b12:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2224      	movs	r2, #36	; 0x24
 8001b18:	2100      	movs	r1, #0
 8001b1a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d004      	beq.n	8001b2e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	0010      	movs	r0, r2
 8001b2c:	4798      	blx	r3
    }
  }
  return status;
 8001b2e:	230f      	movs	r3, #15
 8001b30:	18fb      	adds	r3, r7, r3
 8001b32:	781b      	ldrb	r3, [r3, #0]
}
 8001b34:	0018      	movs	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	b004      	add	sp, #16
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	fffffeff 	.word	0xfffffeff
 8001b40:	40020000 	.word	0x40020000

08001b44 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001b4c:	4b55      	ldr	r3, [pc, #340]	; (8001ca4 <HAL_DMA_IRQHandler+0x160>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	221c      	movs	r2, #28
 8001b60:	4013      	ands	r3, r2
 8001b62:	2204      	movs	r2, #4
 8001b64:	409a      	lsls	r2, r3
 8001b66:	0013      	movs	r3, r2
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d027      	beq.n	8001bbe <HAL_DMA_IRQHandler+0x7a>
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	2204      	movs	r2, #4
 8001b72:	4013      	ands	r3, r2
 8001b74:	d023      	beq.n	8001bbe <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2220      	movs	r2, #32
 8001b7e:	4013      	ands	r3, r2
 8001b80:	d107      	bne.n	8001b92 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2104      	movs	r1, #4
 8001b8e:	438a      	bics	r2, r1
 8001b90:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8001b92:	4b44      	ldr	r3, [pc, #272]	; (8001ca4 <HAL_DMA_IRQHandler+0x160>)
 8001b94:	6859      	ldr	r1, [r3, #4]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	221c      	movs	r2, #28
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	2204      	movs	r2, #4
 8001ba0:	409a      	lsls	r2, r3
 8001ba2:	4b40      	ldr	r3, [pc, #256]	; (8001ca4 <HAL_DMA_IRQHandler+0x160>)
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d100      	bne.n	8001bb2 <HAL_DMA_IRQHandler+0x6e>
 8001bb0:	e073      	b.n	8001c9a <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	0010      	movs	r0, r2
 8001bba:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001bbc:	e06d      	b.n	8001c9a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	221c      	movs	r2, #28
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	409a      	lsls	r2, r3
 8001bca:	0013      	movs	r3, r2
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	d02e      	beq.n	8001c30 <HAL_DMA_IRQHandler+0xec>
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	d02a      	beq.n	8001c30 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2220      	movs	r2, #32
 8001be2:	4013      	ands	r3, r2
 8001be4:	d10b      	bne.n	8001bfe <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	210a      	movs	r1, #10
 8001bf2:	438a      	bics	r2, r1
 8001bf4:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2225      	movs	r2, #37	; 0x25
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001bfe:	4b29      	ldr	r3, [pc, #164]	; (8001ca4 <HAL_DMA_IRQHandler+0x160>)
 8001c00:	6859      	ldr	r1, [r3, #4]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	221c      	movs	r2, #28
 8001c08:	4013      	ands	r3, r2
 8001c0a:	2202      	movs	r2, #2
 8001c0c:	409a      	lsls	r2, r3
 8001c0e:	4b25      	ldr	r3, [pc, #148]	; (8001ca4 <HAL_DMA_IRQHandler+0x160>)
 8001c10:	430a      	orrs	r2, r1
 8001c12:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2224      	movs	r2, #36	; 0x24
 8001c18:	2100      	movs	r1, #0
 8001c1a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d03a      	beq.n	8001c9a <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	0010      	movs	r0, r2
 8001c2c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001c2e:	e034      	b.n	8001c9a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c34:	221c      	movs	r2, #28
 8001c36:	4013      	ands	r3, r2
 8001c38:	2208      	movs	r2, #8
 8001c3a:	409a      	lsls	r2, r3
 8001c3c:	0013      	movs	r3, r2
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	4013      	ands	r3, r2
 8001c42:	d02b      	beq.n	8001c9c <HAL_DMA_IRQHandler+0x158>
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	2208      	movs	r2, #8
 8001c48:	4013      	ands	r3, r2
 8001c4a:	d027      	beq.n	8001c9c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	210e      	movs	r1, #14
 8001c58:	438a      	bics	r2, r1
 8001c5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001c5c:	4b11      	ldr	r3, [pc, #68]	; (8001ca4 <HAL_DMA_IRQHandler+0x160>)
 8001c5e:	6859      	ldr	r1, [r3, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c64:	221c      	movs	r2, #28
 8001c66:	4013      	ands	r3, r2
 8001c68:	2201      	movs	r2, #1
 8001c6a:	409a      	lsls	r2, r3
 8001c6c:	4b0d      	ldr	r3, [pc, #52]	; (8001ca4 <HAL_DMA_IRQHandler+0x160>)
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2201      	movs	r2, #1
 8001c76:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2225      	movs	r2, #37	; 0x25
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2224      	movs	r2, #36	; 0x24
 8001c84:	2100      	movs	r1, #0
 8001c86:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d005      	beq.n	8001c9c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	0010      	movs	r0, r2
 8001c98:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001c9a:	46c0      	nop			; (mov r8, r8)
 8001c9c:	46c0      	nop			; (mov r8, r8)
}
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	b004      	add	sp, #16
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40020000 	.word	0x40020000

08001ca8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
 8001cb4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001cbe:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d004      	beq.n	8001cd2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001cd0:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001cd2:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <DMA_SetConfig+0x7c>)
 8001cd4:	6859      	ldr	r1, [r3, #4]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	221c      	movs	r2, #28
 8001cdc:	4013      	ands	r3, r2
 8001cde:	2201      	movs	r2, #1
 8001ce0:	409a      	lsls	r2, r3
 8001ce2:	4b10      	ldr	r3, [pc, #64]	; (8001d24 <DMA_SetConfig+0x7c>)
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	2b10      	cmp	r3, #16
 8001cf6:	d108      	bne.n	8001d0a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68ba      	ldr	r2, [r7, #8]
 8001d06:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001d08:	e007      	b.n	8001d1a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	60da      	str	r2, [r3, #12]
}
 8001d1a:	46c0      	nop			; (mov r8, r8)
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	b004      	add	sp, #16
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	46c0      	nop			; (mov r8, r8)
 8001d24:	40020000 	.word	0x40020000

08001d28 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	089b      	lsrs	r3, r3, #2
 8001d36:	4a10      	ldr	r2, [pc, #64]	; (8001d78 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001d38:	4694      	mov	ip, r2
 8001d3a:	4463      	add	r3, ip
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	001a      	movs	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	001a      	movs	r2, r3
 8001d4a:	23ff      	movs	r3, #255	; 0xff
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	3b08      	subs	r3, #8
 8001d50:	2114      	movs	r1, #20
 8001d52:	0018      	movs	r0, r3
 8001d54:	f7fe f9e8 	bl	8000128 <__udivsi3>
 8001d58:	0003      	movs	r3, r0
 8001d5a:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a07      	ldr	r2, [pc, #28]	; (8001d7c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001d60:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	221f      	movs	r2, #31
 8001d66:	4013      	ands	r3, r2
 8001d68:	2201      	movs	r2, #1
 8001d6a:	409a      	lsls	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001d70:	46c0      	nop			; (mov r8, r8)
 8001d72:	46bd      	mov	sp, r7
 8001d74:	b004      	add	sp, #16
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	10008200 	.word	0x10008200
 8001d7c:	40020880 	.word	0x40020880

08001d80 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	223f      	movs	r2, #63	; 0x3f
 8001d8e:	4013      	ands	r3, r2
 8001d90:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	4a0a      	ldr	r2, [pc, #40]	; (8001dc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001d96:	4694      	mov	ip, r2
 8001d98:	4463      	add	r3, ip
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	001a      	movs	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a07      	ldr	r2, [pc, #28]	; (8001dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001da6:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	2203      	movs	r2, #3
 8001dae:	4013      	ands	r3, r2
 8001db0:	2201      	movs	r2, #1
 8001db2:	409a      	lsls	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001db8:	46c0      	nop			; (mov r8, r8)
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	b004      	add	sp, #16
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	1000823f 	.word	0x1000823f
 8001dc4:	40020940 	.word	0x40020940

08001dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dd6:	e147      	b.n	8002068 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2101      	movs	r1, #1
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	4091      	lsls	r1, r2
 8001de2:	000a      	movs	r2, r1
 8001de4:	4013      	ands	r3, r2
 8001de6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d100      	bne.n	8001df0 <HAL_GPIO_Init+0x28>
 8001dee:	e138      	b.n	8002062 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2203      	movs	r2, #3
 8001df6:	4013      	ands	r3, r2
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d005      	beq.n	8001e08 <HAL_GPIO_Init+0x40>
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2203      	movs	r2, #3
 8001e02:	4013      	ands	r3, r2
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d130      	bne.n	8001e6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	2203      	movs	r2, #3
 8001e14:	409a      	lsls	r2, r3
 8001e16:	0013      	movs	r3, r2
 8001e18:	43da      	mvns	r2, r3
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	68da      	ldr	r2, [r3, #12]
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	409a      	lsls	r2, r3
 8001e2a:	0013      	movs	r3, r2
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e3e:	2201      	movs	r2, #1
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	409a      	lsls	r2, r3
 8001e44:	0013      	movs	r3, r2
 8001e46:	43da      	mvns	r2, r3
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	091b      	lsrs	r3, r3, #4
 8001e54:	2201      	movs	r2, #1
 8001e56:	401a      	ands	r2, r3
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	409a      	lsls	r2, r3
 8001e5c:	0013      	movs	r3, r2
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2203      	movs	r2, #3
 8001e70:	4013      	ands	r3, r2
 8001e72:	2b03      	cmp	r3, #3
 8001e74:	d017      	beq.n	8001ea6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	2203      	movs	r2, #3
 8001e82:	409a      	lsls	r2, r3
 8001e84:	0013      	movs	r3, r2
 8001e86:	43da      	mvns	r2, r3
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	689a      	ldr	r2, [r3, #8]
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	409a      	lsls	r2, r3
 8001e98:	0013      	movs	r3, r2
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2203      	movs	r2, #3
 8001eac:	4013      	ands	r3, r2
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d123      	bne.n	8001efa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	08da      	lsrs	r2, r3, #3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	3208      	adds	r2, #8
 8001eba:	0092      	lsls	r2, r2, #2
 8001ebc:	58d3      	ldr	r3, [r2, r3]
 8001ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	2207      	movs	r2, #7
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	220f      	movs	r2, #15
 8001eca:	409a      	lsls	r2, r3
 8001ecc:	0013      	movs	r3, r2
 8001ece:	43da      	mvns	r2, r3
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	691a      	ldr	r2, [r3, #16]
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	2107      	movs	r1, #7
 8001ede:	400b      	ands	r3, r1
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	409a      	lsls	r2, r3
 8001ee4:	0013      	movs	r3, r2
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	08da      	lsrs	r2, r3, #3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3208      	adds	r2, #8
 8001ef4:	0092      	lsls	r2, r2, #2
 8001ef6:	6939      	ldr	r1, [r7, #16]
 8001ef8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	2203      	movs	r2, #3
 8001f06:	409a      	lsls	r2, r3
 8001f08:	0013      	movs	r3, r2
 8001f0a:	43da      	mvns	r2, r3
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2203      	movs	r2, #3
 8001f18:	401a      	ands	r2, r3
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	409a      	lsls	r2, r3
 8001f20:	0013      	movs	r3, r2
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685a      	ldr	r2, [r3, #4]
 8001f32:	23c0      	movs	r3, #192	; 0xc0
 8001f34:	029b      	lsls	r3, r3, #10
 8001f36:	4013      	ands	r3, r2
 8001f38:	d100      	bne.n	8001f3c <HAL_GPIO_Init+0x174>
 8001f3a:	e092      	b.n	8002062 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001f3c:	4a50      	ldr	r2, [pc, #320]	; (8002080 <HAL_GPIO_Init+0x2b8>)
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	089b      	lsrs	r3, r3, #2
 8001f42:	3318      	adds	r3, #24
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	589b      	ldr	r3, [r3, r2]
 8001f48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	2203      	movs	r2, #3
 8001f4e:	4013      	ands	r3, r2
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	220f      	movs	r2, #15
 8001f54:	409a      	lsls	r2, r3
 8001f56:	0013      	movs	r3, r2
 8001f58:	43da      	mvns	r2, r3
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	23a0      	movs	r3, #160	; 0xa0
 8001f64:	05db      	lsls	r3, r3, #23
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d013      	beq.n	8001f92 <HAL_GPIO_Init+0x1ca>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a45      	ldr	r2, [pc, #276]	; (8002084 <HAL_GPIO_Init+0x2bc>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d00d      	beq.n	8001f8e <HAL_GPIO_Init+0x1c6>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a44      	ldr	r2, [pc, #272]	; (8002088 <HAL_GPIO_Init+0x2c0>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d007      	beq.n	8001f8a <HAL_GPIO_Init+0x1c2>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a43      	ldr	r2, [pc, #268]	; (800208c <HAL_GPIO_Init+0x2c4>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d101      	bne.n	8001f86 <HAL_GPIO_Init+0x1be>
 8001f82:	2303      	movs	r3, #3
 8001f84:	e006      	b.n	8001f94 <HAL_GPIO_Init+0x1cc>
 8001f86:	2305      	movs	r3, #5
 8001f88:	e004      	b.n	8001f94 <HAL_GPIO_Init+0x1cc>
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	e002      	b.n	8001f94 <HAL_GPIO_Init+0x1cc>
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e000      	b.n	8001f94 <HAL_GPIO_Init+0x1cc>
 8001f92:	2300      	movs	r3, #0
 8001f94:	697a      	ldr	r2, [r7, #20]
 8001f96:	2103      	movs	r1, #3
 8001f98:	400a      	ands	r2, r1
 8001f9a:	00d2      	lsls	r2, r2, #3
 8001f9c:	4093      	lsls	r3, r2
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001fa4:	4936      	ldr	r1, [pc, #216]	; (8002080 <HAL_GPIO_Init+0x2b8>)
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	089b      	lsrs	r3, r3, #2
 8001faa:	3318      	adds	r3, #24
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fb2:	4b33      	ldr	r3, [pc, #204]	; (8002080 <HAL_GPIO_Init+0x2b8>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	43da      	mvns	r2, r3
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685a      	ldr	r2, [r3, #4]
 8001fc6:	2380      	movs	r3, #128	; 0x80
 8001fc8:	035b      	lsls	r3, r3, #13
 8001fca:	4013      	ands	r3, r2
 8001fcc:	d003      	beq.n	8001fd6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fd6:	4b2a      	ldr	r3, [pc, #168]	; (8002080 <HAL_GPIO_Init+0x2b8>)
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001fdc:	4b28      	ldr	r3, [pc, #160]	; (8002080 <HAL_GPIO_Init+0x2b8>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	43da      	mvns	r2, r3
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685a      	ldr	r2, [r3, #4]
 8001ff0:	2380      	movs	r3, #128	; 0x80
 8001ff2:	039b      	lsls	r3, r3, #14
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d003      	beq.n	8002000 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002000:	4b1f      	ldr	r3, [pc, #124]	; (8002080 <HAL_GPIO_Init+0x2b8>)
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002006:	4a1e      	ldr	r2, [pc, #120]	; (8002080 <HAL_GPIO_Init+0x2b8>)
 8002008:	2384      	movs	r3, #132	; 0x84
 800200a:	58d3      	ldr	r3, [r2, r3]
 800200c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	43da      	mvns	r2, r3
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	4013      	ands	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	2380      	movs	r3, #128	; 0x80
 800201e:	029b      	lsls	r3, r3, #10
 8002020:	4013      	ands	r3, r2
 8002022:	d003      	beq.n	800202c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	4313      	orrs	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800202c:	4914      	ldr	r1, [pc, #80]	; (8002080 <HAL_GPIO_Init+0x2b8>)
 800202e:	2284      	movs	r2, #132	; 0x84
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002034:	4a12      	ldr	r2, [pc, #72]	; (8002080 <HAL_GPIO_Init+0x2b8>)
 8002036:	2380      	movs	r3, #128	; 0x80
 8002038:	58d3      	ldr	r3, [r2, r3]
 800203a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	43da      	mvns	r2, r3
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	4013      	ands	r3, r2
 8002044:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685a      	ldr	r2, [r3, #4]
 800204a:	2380      	movs	r3, #128	; 0x80
 800204c:	025b      	lsls	r3, r3, #9
 800204e:	4013      	ands	r3, r2
 8002050:	d003      	beq.n	800205a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4313      	orrs	r3, r2
 8002058:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800205a:	4909      	ldr	r1, [pc, #36]	; (8002080 <HAL_GPIO_Init+0x2b8>)
 800205c:	2280      	movs	r2, #128	; 0x80
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	3301      	adds	r3, #1
 8002066:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	40da      	lsrs	r2, r3
 8002070:	1e13      	subs	r3, r2, #0
 8002072:	d000      	beq.n	8002076 <HAL_GPIO_Init+0x2ae>
 8002074:	e6b0      	b.n	8001dd8 <HAL_GPIO_Init+0x10>
  }
}
 8002076:	46c0      	nop			; (mov r8, r8)
 8002078:	46c0      	nop			; (mov r8, r8)
 800207a:	46bd      	mov	sp, r7
 800207c:	b006      	add	sp, #24
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40021800 	.word	0x40021800
 8002084:	50000400 	.word	0x50000400
 8002088:	50000800 	.word	0x50000800
 800208c:	50000c00 	.word	0x50000c00

08002090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	0008      	movs	r0, r1
 800209a:	0011      	movs	r1, r2
 800209c:	1cbb      	adds	r3, r7, #2
 800209e:	1c02      	adds	r2, r0, #0
 80020a0:	801a      	strh	r2, [r3, #0]
 80020a2:	1c7b      	adds	r3, r7, #1
 80020a4:	1c0a      	adds	r2, r1, #0
 80020a6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020a8:	1c7b      	adds	r3, r7, #1
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d004      	beq.n	80020ba <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020b0:	1cbb      	adds	r3, r7, #2
 80020b2:	881a      	ldrh	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020b8:	e003      	b.n	80020c2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020ba:	1cbb      	adds	r3, r7, #2
 80020bc:	881a      	ldrh	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020c2:	46c0      	nop			; (mov r8, r8)
 80020c4:	46bd      	mov	sp, r7
 80020c6:	b002      	add	sp, #8
 80020c8:	bd80      	pop	{r7, pc}
	...

080020cc <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020d0:	4b04      	ldr	r3, [pc, #16]	; (80020e4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	4b03      	ldr	r3, [pc, #12]	; (80020e4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80020d6:	2180      	movs	r1, #128	; 0x80
 80020d8:	0049      	lsls	r1, r1, #1
 80020da:	430a      	orrs	r2, r1
 80020dc:	601a      	str	r2, [r3, #0]
}
 80020de:	46c0      	nop			; (mov r8, r8)
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40007000 	.word	0x40007000

080020e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80020f0:	4b19      	ldr	r3, [pc, #100]	; (8002158 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a19      	ldr	r2, [pc, #100]	; (800215c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80020f6:	4013      	ands	r3, r2
 80020f8:	0019      	movs	r1, r3
 80020fa:	4b17      	ldr	r3, [pc, #92]	; (8002158 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	430a      	orrs	r2, r1
 8002100:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	2380      	movs	r3, #128	; 0x80
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	429a      	cmp	r2, r3
 800210a:	d11f      	bne.n	800214c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800210c:	4b14      	ldr	r3, [pc, #80]	; (8002160 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	0013      	movs	r3, r2
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	189b      	adds	r3, r3, r2
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	4912      	ldr	r1, [pc, #72]	; (8002164 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800211a:	0018      	movs	r0, r3
 800211c:	f7fe f804 	bl	8000128 <__udivsi3>
 8002120:	0003      	movs	r3, r0
 8002122:	3301      	adds	r3, #1
 8002124:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002126:	e008      	b.n	800213a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	3b01      	subs	r3, #1
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	e001      	b.n	800213a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e009      	b.n	800214e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800213a:	4b07      	ldr	r3, [pc, #28]	; (8002158 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800213c:	695a      	ldr	r2, [r3, #20]
 800213e:	2380      	movs	r3, #128	; 0x80
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	401a      	ands	r2, r3
 8002144:	2380      	movs	r3, #128	; 0x80
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	429a      	cmp	r2, r3
 800214a:	d0ed      	beq.n	8002128 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	0018      	movs	r0, r3
 8002150:	46bd      	mov	sp, r7
 8002152:	b004      	add	sp, #16
 8002154:	bd80      	pop	{r7, pc}
 8002156:	46c0      	nop			; (mov r8, r8)
 8002158:	40007000 	.word	0x40007000
 800215c:	fffff9ff 	.word	0xfffff9ff
 8002160:	2000008c 	.word	0x2000008c
 8002164:	000f4240 	.word	0x000f4240

08002168 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800216c:	4b03      	ldr	r3, [pc, #12]	; (800217c <LL_RCC_GetAPB1Prescaler+0x14>)
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	23e0      	movs	r3, #224	; 0xe0
 8002172:	01db      	lsls	r3, r3, #7
 8002174:	4013      	ands	r3, r2
}
 8002176:	0018      	movs	r0, r3
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40021000 	.word	0x40021000

08002180 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b088      	sub	sp, #32
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e2fe      	b.n	8002790 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2201      	movs	r2, #1
 8002198:	4013      	ands	r3, r2
 800219a:	d100      	bne.n	800219e <HAL_RCC_OscConfig+0x1e>
 800219c:	e07c      	b.n	8002298 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800219e:	4bc3      	ldr	r3, [pc, #780]	; (80024ac <HAL_RCC_OscConfig+0x32c>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	2238      	movs	r2, #56	; 0x38
 80021a4:	4013      	ands	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021a8:	4bc0      	ldr	r3, [pc, #768]	; (80024ac <HAL_RCC_OscConfig+0x32c>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	2203      	movs	r2, #3
 80021ae:	4013      	ands	r3, r2
 80021b0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	2b10      	cmp	r3, #16
 80021b6:	d102      	bne.n	80021be <HAL_RCC_OscConfig+0x3e>
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	2b03      	cmp	r3, #3
 80021bc:	d002      	beq.n	80021c4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	2b08      	cmp	r3, #8
 80021c2:	d10b      	bne.n	80021dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c4:	4bb9      	ldr	r3, [pc, #740]	; (80024ac <HAL_RCC_OscConfig+0x32c>)
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	2380      	movs	r3, #128	; 0x80
 80021ca:	029b      	lsls	r3, r3, #10
 80021cc:	4013      	ands	r3, r2
 80021ce:	d062      	beq.n	8002296 <HAL_RCC_OscConfig+0x116>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d15e      	bne.n	8002296 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e2d9      	b.n	8002790 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	2380      	movs	r3, #128	; 0x80
 80021e2:	025b      	lsls	r3, r3, #9
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d107      	bne.n	80021f8 <HAL_RCC_OscConfig+0x78>
 80021e8:	4bb0      	ldr	r3, [pc, #704]	; (80024ac <HAL_RCC_OscConfig+0x32c>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	4baf      	ldr	r3, [pc, #700]	; (80024ac <HAL_RCC_OscConfig+0x32c>)
 80021ee:	2180      	movs	r1, #128	; 0x80
 80021f0:	0249      	lsls	r1, r1, #9
 80021f2:	430a      	orrs	r2, r1
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	e020      	b.n	800223a <HAL_RCC_OscConfig+0xba>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	23a0      	movs	r3, #160	; 0xa0
 80021fe:	02db      	lsls	r3, r3, #11
 8002200:	429a      	cmp	r2, r3
 8002202:	d10e      	bne.n	8002222 <HAL_RCC_OscConfig+0xa2>
 8002204:	4ba9      	ldr	r3, [pc, #676]	; (80024ac <HAL_RCC_OscConfig+0x32c>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	4ba8      	ldr	r3, [pc, #672]	; (80024ac <HAL_RCC_OscConfig+0x32c>)
 800220a:	2180      	movs	r1, #128	; 0x80
 800220c:	02c9      	lsls	r1, r1, #11
 800220e:	430a      	orrs	r2, r1
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	4ba6      	ldr	r3, [pc, #664]	; (80024ac <HAL_RCC_OscConfig+0x32c>)
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	4ba5      	ldr	r3, [pc, #660]	; (80024ac <HAL_RCC_OscConfig+0x32c>)
 8002218:	2180      	movs	r1, #128	; 0x80
 800221a:	0249      	lsls	r1, r1, #9
 800221c:	430a      	orrs	r2, r1
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	e00b      	b.n	800223a <HAL_RCC_OscConfig+0xba>
 8002222:	4ba2      	ldr	r3, [pc, #648]	; (80024ac <HAL_RCC_OscConfig+0x32c>)
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	4ba1      	ldr	r3, [pc, #644]	; (80024ac <HAL_RCC_OscConfig+0x32c>)
 8002228:	49a1      	ldr	r1, [pc, #644]	; (80024b0 <HAL_RCC_OscConfig+0x330>)
 800222a:	400a      	ands	r2, r1
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	4b9f      	ldr	r3, [pc, #636]	; (80024ac <HAL_RCC_OscConfig+0x32c>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	4b9e      	ldr	r3, [pc, #632]	; (80024ac <HAL_RCC_OscConfig+0x32c>)
 8002234:	499f      	ldr	r1, [pc, #636]	; (80024b4 <HAL_RCC_OscConfig+0x334>)
 8002236:	400a      	ands	r2, r1
 8002238:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d014      	beq.n	800226c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002242:	f7ff f9bb 	bl	80015bc <HAL_GetTick>
 8002246:	0003      	movs	r3, r0
 8002248:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800224c:	f7ff f9b6 	bl	80015bc <HAL_GetTick>
 8002250:	0002      	movs	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b64      	cmp	r3, #100	; 0x64
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e298      	b.n	8002790 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800225e:	4b93      	ldr	r3, [pc, #588]	; (80024ac <HAL_RCC_OscConfig+0x32c>)
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	2380      	movs	r3, #128	; 0x80
 8002264:	029b      	lsls	r3, r3, #10
 8002266:	4013      	ands	r3, r2
 8002268:	d0f0      	beq.n	800224c <HAL_RCC_OscConfig+0xcc>
 800226a:	e015      	b.n	8002298 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800226c:	f7ff f9a6 	bl	80015bc <HAL_GetTick>
 8002270:	0003      	movs	r3, r0
 8002272:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002274:	e008      	b.n	8002288 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002276:	f7ff f9a1 	bl	80015bc <HAL_GetTick>
 800227a:	0002      	movs	r2, r0
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b64      	cmp	r3, #100	; 0x64
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e283      	b.n	8002790 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002288:	4b88      	ldr	r3, [pc, #544]	; (80024ac <HAL_RCC_OscConfig+0x32c>)
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	2380      	movs	r3, #128	; 0x80
 800228e:	029b      	lsls	r3, r3, #10
 8002290:	4013      	ands	r3, r2
 8002292:	d1f0      	bne.n	8002276 <HAL_RCC_OscConfig+0xf6>
 8002294:	e000      	b.n	8002298 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002296:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2202      	movs	r2, #2
 800229e:	4013      	ands	r3, r2
 80022a0:	d100      	bne.n	80022a4 <HAL_RCC_OscConfig+0x124>
 80022a2:	e099      	b.n	80023d8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022a4:	4b81      	ldr	r3, [pc, #516]	; (80024ac <HAL_RCC_OscConfig+0x32c>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	2238      	movs	r2, #56	; 0x38
 80022aa:	4013      	ands	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022ae:	4b7f      	ldr	r3, [pc, #508]	; (80024ac <HAL_RCC_OscConfig+0x32c>)
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	2203      	movs	r2, #3
 80022b4:	4013      	ands	r3, r2
 80022b6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	2b10      	cmp	r3, #16
 80022bc:	d102      	bne.n	80022c4 <HAL_RCC_OscConfig+0x144>
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d002      	beq.n	80022ca <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d135      	bne.n	8002336 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022ca:	4b78      	ldr	r3, [pc, #480]	; (80024ac <HAL_RCC_OscConfig+0x32c>)
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	2380      	movs	r3, #128	; 0x80
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	4013      	ands	r3, r2
 80022d4:	d005      	beq.n	80022e2 <HAL_RCC_OscConfig+0x162>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e256      	b.n	8002790 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e2:	4b72      	ldr	r3, [pc, #456]	; (80024ac <HAL_RCC_OscConfig+0x32c>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	4a74      	ldr	r2, [pc, #464]	; (80024b8 <HAL_RCC_OscConfig+0x338>)
 80022e8:	4013      	ands	r3, r2
 80022ea:	0019      	movs	r1, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	695b      	ldr	r3, [r3, #20]
 80022f0:	021a      	lsls	r2, r3, #8
 80022f2:	4b6e      	ldr	r3, [pc, #440]	; (80024ac <HAL_RCC_OscConfig+0x32c>)
 80022f4:	430a      	orrs	r2, r1
 80022f6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d112      	bne.n	8002324 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80022fe:	4b6b      	ldr	r3, [pc, #428]	; (80024ac <HAL_RCC_OscConfig+0x32c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a6e      	ldr	r2, [pc, #440]	; (80024bc <HAL_RCC_OscConfig+0x33c>)
 8002304:	4013      	ands	r3, r2
 8002306:	0019      	movs	r1, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	691a      	ldr	r2, [r3, #16]
 800230c:	4b67      	ldr	r3, [pc, #412]	; (80024ac <HAL_RCC_OscConfig+0x32c>)
 800230e:	430a      	orrs	r2, r1
 8002310:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002312:	4b66      	ldr	r3, [pc, #408]	; (80024ac <HAL_RCC_OscConfig+0x32c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	0adb      	lsrs	r3, r3, #11
 8002318:	2207      	movs	r2, #7
 800231a:	4013      	ands	r3, r2
 800231c:	4a68      	ldr	r2, [pc, #416]	; (80024c0 <HAL_RCC_OscConfig+0x340>)
 800231e:	40da      	lsrs	r2, r3
 8002320:	4b68      	ldr	r3, [pc, #416]	; (80024c4 <HAL_RCC_OscConfig+0x344>)
 8002322:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002324:	4b68      	ldr	r3, [pc, #416]	; (80024c8 <HAL_RCC_OscConfig+0x348>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	0018      	movs	r0, r3
 800232a:	f7ff f8eb 	bl	8001504 <HAL_InitTick>
 800232e:	1e03      	subs	r3, r0, #0
 8002330:	d051      	beq.n	80023d6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e22c      	b.n	8002790 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d030      	beq.n	80023a0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800233e:	4b5b      	ldr	r3, [pc, #364]	; (80024ac <HAL_RCC_OscConfig+0x32c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a5e      	ldr	r2, [pc, #376]	; (80024bc <HAL_RCC_OscConfig+0x33c>)
 8002344:	4013      	ands	r3, r2
 8002346:	0019      	movs	r1, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	691a      	ldr	r2, [r3, #16]
 800234c:	4b57      	ldr	r3, [pc, #348]	; (80024ac <HAL_RCC_OscConfig+0x32c>)
 800234e:	430a      	orrs	r2, r1
 8002350:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002352:	4b56      	ldr	r3, [pc, #344]	; (80024ac <HAL_RCC_OscConfig+0x32c>)
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	4b55      	ldr	r3, [pc, #340]	; (80024ac <HAL_RCC_OscConfig+0x32c>)
 8002358:	2180      	movs	r1, #128	; 0x80
 800235a:	0049      	lsls	r1, r1, #1
 800235c:	430a      	orrs	r2, r1
 800235e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002360:	f7ff f92c 	bl	80015bc <HAL_GetTick>
 8002364:	0003      	movs	r3, r0
 8002366:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002368:	e008      	b.n	800237c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800236a:	f7ff f927 	bl	80015bc <HAL_GetTick>
 800236e:	0002      	movs	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e209      	b.n	8002790 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800237c:	4b4b      	ldr	r3, [pc, #300]	; (80024ac <HAL_RCC_OscConfig+0x32c>)
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	2380      	movs	r3, #128	; 0x80
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	4013      	ands	r3, r2
 8002386:	d0f0      	beq.n	800236a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002388:	4b48      	ldr	r3, [pc, #288]	; (80024ac <HAL_RCC_OscConfig+0x32c>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	4a4a      	ldr	r2, [pc, #296]	; (80024b8 <HAL_RCC_OscConfig+0x338>)
 800238e:	4013      	ands	r3, r2
 8002390:	0019      	movs	r1, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	021a      	lsls	r2, r3, #8
 8002398:	4b44      	ldr	r3, [pc, #272]	; (80024ac <HAL_RCC_OscConfig+0x32c>)
 800239a:	430a      	orrs	r2, r1
 800239c:	605a      	str	r2, [r3, #4]
 800239e:	e01b      	b.n	80023d8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80023a0:	4b42      	ldr	r3, [pc, #264]	; (80024ac <HAL_RCC_OscConfig+0x32c>)
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	4b41      	ldr	r3, [pc, #260]	; (80024ac <HAL_RCC_OscConfig+0x32c>)
 80023a6:	4949      	ldr	r1, [pc, #292]	; (80024cc <HAL_RCC_OscConfig+0x34c>)
 80023a8:	400a      	ands	r2, r1
 80023aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ac:	f7ff f906 	bl	80015bc <HAL_GetTick>
 80023b0:	0003      	movs	r3, r0
 80023b2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023b6:	f7ff f901 	bl	80015bc <HAL_GetTick>
 80023ba:	0002      	movs	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e1e3      	b.n	8002790 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023c8:	4b38      	ldr	r3, [pc, #224]	; (80024ac <HAL_RCC_OscConfig+0x32c>)
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	2380      	movs	r3, #128	; 0x80
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	4013      	ands	r3, r2
 80023d2:	d1f0      	bne.n	80023b6 <HAL_RCC_OscConfig+0x236>
 80023d4:	e000      	b.n	80023d8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023d6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2208      	movs	r2, #8
 80023de:	4013      	ands	r3, r2
 80023e0:	d047      	beq.n	8002472 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80023e2:	4b32      	ldr	r3, [pc, #200]	; (80024ac <HAL_RCC_OscConfig+0x32c>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	2238      	movs	r2, #56	; 0x38
 80023e8:	4013      	ands	r3, r2
 80023ea:	2b18      	cmp	r3, #24
 80023ec:	d10a      	bne.n	8002404 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80023ee:	4b2f      	ldr	r3, [pc, #188]	; (80024ac <HAL_RCC_OscConfig+0x32c>)
 80023f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023f2:	2202      	movs	r2, #2
 80023f4:	4013      	ands	r3, r2
 80023f6:	d03c      	beq.n	8002472 <HAL_RCC_OscConfig+0x2f2>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d138      	bne.n	8002472 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e1c5      	b.n	8002790 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d019      	beq.n	8002440 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800240c:	4b27      	ldr	r3, [pc, #156]	; (80024ac <HAL_RCC_OscConfig+0x32c>)
 800240e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002410:	4b26      	ldr	r3, [pc, #152]	; (80024ac <HAL_RCC_OscConfig+0x32c>)
 8002412:	2101      	movs	r1, #1
 8002414:	430a      	orrs	r2, r1
 8002416:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002418:	f7ff f8d0 	bl	80015bc <HAL_GetTick>
 800241c:	0003      	movs	r3, r0
 800241e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002422:	f7ff f8cb 	bl	80015bc <HAL_GetTick>
 8002426:	0002      	movs	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e1ad      	b.n	8002790 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002434:	4b1d      	ldr	r3, [pc, #116]	; (80024ac <HAL_RCC_OscConfig+0x32c>)
 8002436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002438:	2202      	movs	r2, #2
 800243a:	4013      	ands	r3, r2
 800243c:	d0f1      	beq.n	8002422 <HAL_RCC_OscConfig+0x2a2>
 800243e:	e018      	b.n	8002472 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002440:	4b1a      	ldr	r3, [pc, #104]	; (80024ac <HAL_RCC_OscConfig+0x32c>)
 8002442:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002444:	4b19      	ldr	r3, [pc, #100]	; (80024ac <HAL_RCC_OscConfig+0x32c>)
 8002446:	2101      	movs	r1, #1
 8002448:	438a      	bics	r2, r1
 800244a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244c:	f7ff f8b6 	bl	80015bc <HAL_GetTick>
 8002450:	0003      	movs	r3, r0
 8002452:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002454:	e008      	b.n	8002468 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002456:	f7ff f8b1 	bl	80015bc <HAL_GetTick>
 800245a:	0002      	movs	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e193      	b.n	8002790 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002468:	4b10      	ldr	r3, [pc, #64]	; (80024ac <HAL_RCC_OscConfig+0x32c>)
 800246a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800246c:	2202      	movs	r2, #2
 800246e:	4013      	ands	r3, r2
 8002470:	d1f1      	bne.n	8002456 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2204      	movs	r2, #4
 8002478:	4013      	ands	r3, r2
 800247a:	d100      	bne.n	800247e <HAL_RCC_OscConfig+0x2fe>
 800247c:	e0c6      	b.n	800260c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800247e:	231f      	movs	r3, #31
 8002480:	18fb      	adds	r3, r7, r3
 8002482:	2200      	movs	r2, #0
 8002484:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002486:	4b09      	ldr	r3, [pc, #36]	; (80024ac <HAL_RCC_OscConfig+0x32c>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	2238      	movs	r2, #56	; 0x38
 800248c:	4013      	ands	r3, r2
 800248e:	2b20      	cmp	r3, #32
 8002490:	d11e      	bne.n	80024d0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002492:	4b06      	ldr	r3, [pc, #24]	; (80024ac <HAL_RCC_OscConfig+0x32c>)
 8002494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002496:	2202      	movs	r2, #2
 8002498:	4013      	ands	r3, r2
 800249a:	d100      	bne.n	800249e <HAL_RCC_OscConfig+0x31e>
 800249c:	e0b6      	b.n	800260c <HAL_RCC_OscConfig+0x48c>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d000      	beq.n	80024a8 <HAL_RCC_OscConfig+0x328>
 80024a6:	e0b1      	b.n	800260c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e171      	b.n	8002790 <HAL_RCC_OscConfig+0x610>
 80024ac:	40021000 	.word	0x40021000
 80024b0:	fffeffff 	.word	0xfffeffff
 80024b4:	fffbffff 	.word	0xfffbffff
 80024b8:	ffff80ff 	.word	0xffff80ff
 80024bc:	ffffc7ff 	.word	0xffffc7ff
 80024c0:	00f42400 	.word	0x00f42400
 80024c4:	2000008c 	.word	0x2000008c
 80024c8:	20000090 	.word	0x20000090
 80024cc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024d0:	4bb1      	ldr	r3, [pc, #708]	; (8002798 <HAL_RCC_OscConfig+0x618>)
 80024d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024d4:	2380      	movs	r3, #128	; 0x80
 80024d6:	055b      	lsls	r3, r3, #21
 80024d8:	4013      	ands	r3, r2
 80024da:	d101      	bne.n	80024e0 <HAL_RCC_OscConfig+0x360>
 80024dc:	2301      	movs	r3, #1
 80024de:	e000      	b.n	80024e2 <HAL_RCC_OscConfig+0x362>
 80024e0:	2300      	movs	r3, #0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d011      	beq.n	800250a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80024e6:	4bac      	ldr	r3, [pc, #688]	; (8002798 <HAL_RCC_OscConfig+0x618>)
 80024e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024ea:	4bab      	ldr	r3, [pc, #684]	; (8002798 <HAL_RCC_OscConfig+0x618>)
 80024ec:	2180      	movs	r1, #128	; 0x80
 80024ee:	0549      	lsls	r1, r1, #21
 80024f0:	430a      	orrs	r2, r1
 80024f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80024f4:	4ba8      	ldr	r3, [pc, #672]	; (8002798 <HAL_RCC_OscConfig+0x618>)
 80024f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024f8:	2380      	movs	r3, #128	; 0x80
 80024fa:	055b      	lsls	r3, r3, #21
 80024fc:	4013      	ands	r3, r2
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002502:	231f      	movs	r3, #31
 8002504:	18fb      	adds	r3, r7, r3
 8002506:	2201      	movs	r2, #1
 8002508:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800250a:	4ba4      	ldr	r3, [pc, #656]	; (800279c <HAL_RCC_OscConfig+0x61c>)
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	2380      	movs	r3, #128	; 0x80
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	4013      	ands	r3, r2
 8002514:	d11a      	bne.n	800254c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002516:	4ba1      	ldr	r3, [pc, #644]	; (800279c <HAL_RCC_OscConfig+0x61c>)
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	4ba0      	ldr	r3, [pc, #640]	; (800279c <HAL_RCC_OscConfig+0x61c>)
 800251c:	2180      	movs	r1, #128	; 0x80
 800251e:	0049      	lsls	r1, r1, #1
 8002520:	430a      	orrs	r2, r1
 8002522:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002524:	f7ff f84a 	bl	80015bc <HAL_GetTick>
 8002528:	0003      	movs	r3, r0
 800252a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800252c:	e008      	b.n	8002540 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800252e:	f7ff f845 	bl	80015bc <HAL_GetTick>
 8002532:	0002      	movs	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e127      	b.n	8002790 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002540:	4b96      	ldr	r3, [pc, #600]	; (800279c <HAL_RCC_OscConfig+0x61c>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	2380      	movs	r3, #128	; 0x80
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	4013      	ands	r3, r2
 800254a:	d0f0      	beq.n	800252e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d106      	bne.n	8002562 <HAL_RCC_OscConfig+0x3e2>
 8002554:	4b90      	ldr	r3, [pc, #576]	; (8002798 <HAL_RCC_OscConfig+0x618>)
 8002556:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002558:	4b8f      	ldr	r3, [pc, #572]	; (8002798 <HAL_RCC_OscConfig+0x618>)
 800255a:	2101      	movs	r1, #1
 800255c:	430a      	orrs	r2, r1
 800255e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002560:	e01c      	b.n	800259c <HAL_RCC_OscConfig+0x41c>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	2b05      	cmp	r3, #5
 8002568:	d10c      	bne.n	8002584 <HAL_RCC_OscConfig+0x404>
 800256a:	4b8b      	ldr	r3, [pc, #556]	; (8002798 <HAL_RCC_OscConfig+0x618>)
 800256c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800256e:	4b8a      	ldr	r3, [pc, #552]	; (8002798 <HAL_RCC_OscConfig+0x618>)
 8002570:	2104      	movs	r1, #4
 8002572:	430a      	orrs	r2, r1
 8002574:	65da      	str	r2, [r3, #92]	; 0x5c
 8002576:	4b88      	ldr	r3, [pc, #544]	; (8002798 <HAL_RCC_OscConfig+0x618>)
 8002578:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800257a:	4b87      	ldr	r3, [pc, #540]	; (8002798 <HAL_RCC_OscConfig+0x618>)
 800257c:	2101      	movs	r1, #1
 800257e:	430a      	orrs	r2, r1
 8002580:	65da      	str	r2, [r3, #92]	; 0x5c
 8002582:	e00b      	b.n	800259c <HAL_RCC_OscConfig+0x41c>
 8002584:	4b84      	ldr	r3, [pc, #528]	; (8002798 <HAL_RCC_OscConfig+0x618>)
 8002586:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002588:	4b83      	ldr	r3, [pc, #524]	; (8002798 <HAL_RCC_OscConfig+0x618>)
 800258a:	2101      	movs	r1, #1
 800258c:	438a      	bics	r2, r1
 800258e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002590:	4b81      	ldr	r3, [pc, #516]	; (8002798 <HAL_RCC_OscConfig+0x618>)
 8002592:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002594:	4b80      	ldr	r3, [pc, #512]	; (8002798 <HAL_RCC_OscConfig+0x618>)
 8002596:	2104      	movs	r1, #4
 8002598:	438a      	bics	r2, r1
 800259a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d014      	beq.n	80025ce <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a4:	f7ff f80a 	bl	80015bc <HAL_GetTick>
 80025a8:	0003      	movs	r3, r0
 80025aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025ac:	e009      	b.n	80025c2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ae:	f7ff f805 	bl	80015bc <HAL_GetTick>
 80025b2:	0002      	movs	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	4a79      	ldr	r2, [pc, #484]	; (80027a0 <HAL_RCC_OscConfig+0x620>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e0e6      	b.n	8002790 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025c2:	4b75      	ldr	r3, [pc, #468]	; (8002798 <HAL_RCC_OscConfig+0x618>)
 80025c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c6:	2202      	movs	r2, #2
 80025c8:	4013      	ands	r3, r2
 80025ca:	d0f0      	beq.n	80025ae <HAL_RCC_OscConfig+0x42e>
 80025cc:	e013      	b.n	80025f6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ce:	f7fe fff5 	bl	80015bc <HAL_GetTick>
 80025d2:	0003      	movs	r3, r0
 80025d4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025d6:	e009      	b.n	80025ec <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025d8:	f7fe fff0 	bl	80015bc <HAL_GetTick>
 80025dc:	0002      	movs	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	4a6f      	ldr	r2, [pc, #444]	; (80027a0 <HAL_RCC_OscConfig+0x620>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e0d1      	b.n	8002790 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025ec:	4b6a      	ldr	r3, [pc, #424]	; (8002798 <HAL_RCC_OscConfig+0x618>)
 80025ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f0:	2202      	movs	r2, #2
 80025f2:	4013      	ands	r3, r2
 80025f4:	d1f0      	bne.n	80025d8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80025f6:	231f      	movs	r3, #31
 80025f8:	18fb      	adds	r3, r7, r3
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d105      	bne.n	800260c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002600:	4b65      	ldr	r3, [pc, #404]	; (8002798 <HAL_RCC_OscConfig+0x618>)
 8002602:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002604:	4b64      	ldr	r3, [pc, #400]	; (8002798 <HAL_RCC_OscConfig+0x618>)
 8002606:	4967      	ldr	r1, [pc, #412]	; (80027a4 <HAL_RCC_OscConfig+0x624>)
 8002608:	400a      	ands	r2, r1
 800260a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d100      	bne.n	8002616 <HAL_RCC_OscConfig+0x496>
 8002614:	e0bb      	b.n	800278e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002616:	4b60      	ldr	r3, [pc, #384]	; (8002798 <HAL_RCC_OscConfig+0x618>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	2238      	movs	r2, #56	; 0x38
 800261c:	4013      	ands	r3, r2
 800261e:	2b10      	cmp	r3, #16
 8002620:	d100      	bne.n	8002624 <HAL_RCC_OscConfig+0x4a4>
 8002622:	e07b      	b.n	800271c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	69db      	ldr	r3, [r3, #28]
 8002628:	2b02      	cmp	r3, #2
 800262a:	d156      	bne.n	80026da <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800262c:	4b5a      	ldr	r3, [pc, #360]	; (8002798 <HAL_RCC_OscConfig+0x618>)
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	4b59      	ldr	r3, [pc, #356]	; (8002798 <HAL_RCC_OscConfig+0x618>)
 8002632:	495d      	ldr	r1, [pc, #372]	; (80027a8 <HAL_RCC_OscConfig+0x628>)
 8002634:	400a      	ands	r2, r1
 8002636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002638:	f7fe ffc0 	bl	80015bc <HAL_GetTick>
 800263c:	0003      	movs	r3, r0
 800263e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002640:	e008      	b.n	8002654 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002642:	f7fe ffbb 	bl	80015bc <HAL_GetTick>
 8002646:	0002      	movs	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e09d      	b.n	8002790 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002654:	4b50      	ldr	r3, [pc, #320]	; (8002798 <HAL_RCC_OscConfig+0x618>)
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	2380      	movs	r3, #128	; 0x80
 800265a:	049b      	lsls	r3, r3, #18
 800265c:	4013      	ands	r3, r2
 800265e:	d1f0      	bne.n	8002642 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002660:	4b4d      	ldr	r3, [pc, #308]	; (8002798 <HAL_RCC_OscConfig+0x618>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	4a51      	ldr	r2, [pc, #324]	; (80027ac <HAL_RCC_OscConfig+0x62c>)
 8002666:	4013      	ands	r3, r2
 8002668:	0019      	movs	r1, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a1a      	ldr	r2, [r3, #32]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002672:	431a      	orrs	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002678:	021b      	lsls	r3, r3, #8
 800267a:	431a      	orrs	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002680:	431a      	orrs	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002686:	431a      	orrs	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800268c:	431a      	orrs	r2, r3
 800268e:	4b42      	ldr	r3, [pc, #264]	; (8002798 <HAL_RCC_OscConfig+0x618>)
 8002690:	430a      	orrs	r2, r1
 8002692:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002694:	4b40      	ldr	r3, [pc, #256]	; (8002798 <HAL_RCC_OscConfig+0x618>)
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	4b3f      	ldr	r3, [pc, #252]	; (8002798 <HAL_RCC_OscConfig+0x618>)
 800269a:	2180      	movs	r1, #128	; 0x80
 800269c:	0449      	lsls	r1, r1, #17
 800269e:	430a      	orrs	r2, r1
 80026a0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80026a2:	4b3d      	ldr	r3, [pc, #244]	; (8002798 <HAL_RCC_OscConfig+0x618>)
 80026a4:	68da      	ldr	r2, [r3, #12]
 80026a6:	4b3c      	ldr	r3, [pc, #240]	; (8002798 <HAL_RCC_OscConfig+0x618>)
 80026a8:	2180      	movs	r1, #128	; 0x80
 80026aa:	0549      	lsls	r1, r1, #21
 80026ac:	430a      	orrs	r2, r1
 80026ae:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b0:	f7fe ff84 	bl	80015bc <HAL_GetTick>
 80026b4:	0003      	movs	r3, r0
 80026b6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026b8:	e008      	b.n	80026cc <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ba:	f7fe ff7f 	bl	80015bc <HAL_GetTick>
 80026be:	0002      	movs	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e061      	b.n	8002790 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026cc:	4b32      	ldr	r3, [pc, #200]	; (8002798 <HAL_RCC_OscConfig+0x618>)
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	2380      	movs	r3, #128	; 0x80
 80026d2:	049b      	lsls	r3, r3, #18
 80026d4:	4013      	ands	r3, r2
 80026d6:	d0f0      	beq.n	80026ba <HAL_RCC_OscConfig+0x53a>
 80026d8:	e059      	b.n	800278e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026da:	4b2f      	ldr	r3, [pc, #188]	; (8002798 <HAL_RCC_OscConfig+0x618>)
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	4b2e      	ldr	r3, [pc, #184]	; (8002798 <HAL_RCC_OscConfig+0x618>)
 80026e0:	4931      	ldr	r1, [pc, #196]	; (80027a8 <HAL_RCC_OscConfig+0x628>)
 80026e2:	400a      	ands	r2, r1
 80026e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e6:	f7fe ff69 	bl	80015bc <HAL_GetTick>
 80026ea:	0003      	movs	r3, r0
 80026ec:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f0:	f7fe ff64 	bl	80015bc <HAL_GetTick>
 80026f4:	0002      	movs	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e046      	b.n	8002790 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002702:	4b25      	ldr	r3, [pc, #148]	; (8002798 <HAL_RCC_OscConfig+0x618>)
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	2380      	movs	r3, #128	; 0x80
 8002708:	049b      	lsls	r3, r3, #18
 800270a:	4013      	ands	r3, r2
 800270c:	d1f0      	bne.n	80026f0 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800270e:	4b22      	ldr	r3, [pc, #136]	; (8002798 <HAL_RCC_OscConfig+0x618>)
 8002710:	68da      	ldr	r2, [r3, #12]
 8002712:	4b21      	ldr	r3, [pc, #132]	; (8002798 <HAL_RCC_OscConfig+0x618>)
 8002714:	4926      	ldr	r1, [pc, #152]	; (80027b0 <HAL_RCC_OscConfig+0x630>)
 8002716:	400a      	ands	r2, r1
 8002718:	60da      	str	r2, [r3, #12]
 800271a:	e038      	b.n	800278e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d101      	bne.n	8002728 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e033      	b.n	8002790 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002728:	4b1b      	ldr	r3, [pc, #108]	; (8002798 <HAL_RCC_OscConfig+0x618>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	2203      	movs	r2, #3
 8002732:	401a      	ands	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	429a      	cmp	r2, r3
 800273a:	d126      	bne.n	800278a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	2270      	movs	r2, #112	; 0x70
 8002740:	401a      	ands	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002746:	429a      	cmp	r2, r3
 8002748:	d11f      	bne.n	800278a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	23fe      	movs	r3, #254	; 0xfe
 800274e:	01db      	lsls	r3, r3, #7
 8002750:	401a      	ands	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002756:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002758:	429a      	cmp	r2, r3
 800275a:	d116      	bne.n	800278a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	23f8      	movs	r3, #248	; 0xf8
 8002760:	039b      	lsls	r3, r3, #14
 8002762:	401a      	ands	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002768:	429a      	cmp	r2, r3
 800276a:	d10e      	bne.n	800278a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	23e0      	movs	r3, #224	; 0xe0
 8002770:	051b      	lsls	r3, r3, #20
 8002772:	401a      	ands	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002778:	429a      	cmp	r2, r3
 800277a:	d106      	bne.n	800278a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	0f5b      	lsrs	r3, r3, #29
 8002780:	075a      	lsls	r2, r3, #29
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002786:	429a      	cmp	r2, r3
 8002788:	d001      	beq.n	800278e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e000      	b.n	8002790 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	0018      	movs	r0, r3
 8002792:	46bd      	mov	sp, r7
 8002794:	b008      	add	sp, #32
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40021000 	.word	0x40021000
 800279c:	40007000 	.word	0x40007000
 80027a0:	00001388 	.word	0x00001388
 80027a4:	efffffff 	.word	0xefffffff
 80027a8:	feffffff 	.word	0xfeffffff
 80027ac:	11c1808c 	.word	0x11c1808c
 80027b0:	eefefffc 	.word	0xeefefffc

080027b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d101      	bne.n	80027c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e0e9      	b.n	800299c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027c8:	4b76      	ldr	r3, [pc, #472]	; (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2207      	movs	r2, #7
 80027ce:	4013      	ands	r3, r2
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d91e      	bls.n	8002814 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d6:	4b73      	ldr	r3, [pc, #460]	; (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2207      	movs	r2, #7
 80027dc:	4393      	bics	r3, r2
 80027de:	0019      	movs	r1, r3
 80027e0:	4b70      	ldr	r3, [pc, #448]	; (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	430a      	orrs	r2, r1
 80027e6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80027e8:	f7fe fee8 	bl	80015bc <HAL_GetTick>
 80027ec:	0003      	movs	r3, r0
 80027ee:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80027f0:	e009      	b.n	8002806 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f2:	f7fe fee3 	bl	80015bc <HAL_GetTick>
 80027f6:	0002      	movs	r2, r0
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	4a6a      	ldr	r2, [pc, #424]	; (80029a8 <HAL_RCC_ClockConfig+0x1f4>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e0ca      	b.n	800299c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002806:	4b67      	ldr	r3, [pc, #412]	; (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2207      	movs	r2, #7
 800280c:	4013      	ands	r3, r2
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	429a      	cmp	r2, r3
 8002812:	d1ee      	bne.n	80027f2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2202      	movs	r2, #2
 800281a:	4013      	ands	r3, r2
 800281c:	d015      	beq.n	800284a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2204      	movs	r2, #4
 8002824:	4013      	ands	r3, r2
 8002826:	d006      	beq.n	8002836 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002828:	4b60      	ldr	r3, [pc, #384]	; (80029ac <HAL_RCC_ClockConfig+0x1f8>)
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	4b5f      	ldr	r3, [pc, #380]	; (80029ac <HAL_RCC_ClockConfig+0x1f8>)
 800282e:	21e0      	movs	r1, #224	; 0xe0
 8002830:	01c9      	lsls	r1, r1, #7
 8002832:	430a      	orrs	r2, r1
 8002834:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002836:	4b5d      	ldr	r3, [pc, #372]	; (80029ac <HAL_RCC_ClockConfig+0x1f8>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	4a5d      	ldr	r2, [pc, #372]	; (80029b0 <HAL_RCC_ClockConfig+0x1fc>)
 800283c:	4013      	ands	r3, r2
 800283e:	0019      	movs	r1, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	4b59      	ldr	r3, [pc, #356]	; (80029ac <HAL_RCC_ClockConfig+0x1f8>)
 8002846:	430a      	orrs	r2, r1
 8002848:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2201      	movs	r2, #1
 8002850:	4013      	ands	r3, r2
 8002852:	d057      	beq.n	8002904 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d107      	bne.n	800286c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800285c:	4b53      	ldr	r3, [pc, #332]	; (80029ac <HAL_RCC_ClockConfig+0x1f8>)
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	2380      	movs	r3, #128	; 0x80
 8002862:	029b      	lsls	r3, r3, #10
 8002864:	4013      	ands	r3, r2
 8002866:	d12b      	bne.n	80028c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e097      	b.n	800299c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	2b02      	cmp	r3, #2
 8002872:	d107      	bne.n	8002884 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002874:	4b4d      	ldr	r3, [pc, #308]	; (80029ac <HAL_RCC_ClockConfig+0x1f8>)
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	2380      	movs	r3, #128	; 0x80
 800287a:	049b      	lsls	r3, r3, #18
 800287c:	4013      	ands	r3, r2
 800287e:	d11f      	bne.n	80028c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e08b      	b.n	800299c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d107      	bne.n	800289c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800288c:	4b47      	ldr	r3, [pc, #284]	; (80029ac <HAL_RCC_ClockConfig+0x1f8>)
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	2380      	movs	r3, #128	; 0x80
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	4013      	ands	r3, r2
 8002896:	d113      	bne.n	80028c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e07f      	b.n	800299c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b03      	cmp	r3, #3
 80028a2:	d106      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028a4:	4b41      	ldr	r3, [pc, #260]	; (80029ac <HAL_RCC_ClockConfig+0x1f8>)
 80028a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028a8:	2202      	movs	r2, #2
 80028aa:	4013      	ands	r3, r2
 80028ac:	d108      	bne.n	80028c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e074      	b.n	800299c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028b2:	4b3e      	ldr	r3, [pc, #248]	; (80029ac <HAL_RCC_ClockConfig+0x1f8>)
 80028b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b6:	2202      	movs	r2, #2
 80028b8:	4013      	ands	r3, r2
 80028ba:	d101      	bne.n	80028c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e06d      	b.n	800299c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028c0:	4b3a      	ldr	r3, [pc, #232]	; (80029ac <HAL_RCC_ClockConfig+0x1f8>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	2207      	movs	r2, #7
 80028c6:	4393      	bics	r3, r2
 80028c8:	0019      	movs	r1, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	4b37      	ldr	r3, [pc, #220]	; (80029ac <HAL_RCC_ClockConfig+0x1f8>)
 80028d0:	430a      	orrs	r2, r1
 80028d2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028d4:	f7fe fe72 	bl	80015bc <HAL_GetTick>
 80028d8:	0003      	movs	r3, r0
 80028da:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028dc:	e009      	b.n	80028f2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028de:	f7fe fe6d 	bl	80015bc <HAL_GetTick>
 80028e2:	0002      	movs	r2, r0
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	4a2f      	ldr	r2, [pc, #188]	; (80029a8 <HAL_RCC_ClockConfig+0x1f4>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e054      	b.n	800299c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f2:	4b2e      	ldr	r3, [pc, #184]	; (80029ac <HAL_RCC_ClockConfig+0x1f8>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	2238      	movs	r2, #56	; 0x38
 80028f8:	401a      	ands	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	429a      	cmp	r2, r3
 8002902:	d1ec      	bne.n	80028de <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002904:	4b27      	ldr	r3, [pc, #156]	; (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2207      	movs	r2, #7
 800290a:	4013      	ands	r3, r2
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	429a      	cmp	r2, r3
 8002910:	d21e      	bcs.n	8002950 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002912:	4b24      	ldr	r3, [pc, #144]	; (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2207      	movs	r2, #7
 8002918:	4393      	bics	r3, r2
 800291a:	0019      	movs	r1, r3
 800291c:	4b21      	ldr	r3, [pc, #132]	; (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	430a      	orrs	r2, r1
 8002922:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002924:	f7fe fe4a 	bl	80015bc <HAL_GetTick>
 8002928:	0003      	movs	r3, r0
 800292a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800292c:	e009      	b.n	8002942 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800292e:	f7fe fe45 	bl	80015bc <HAL_GetTick>
 8002932:	0002      	movs	r2, r0
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	4a1b      	ldr	r2, [pc, #108]	; (80029a8 <HAL_RCC_ClockConfig+0x1f4>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e02c      	b.n	800299c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002942:	4b18      	ldr	r3, [pc, #96]	; (80029a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2207      	movs	r2, #7
 8002948:	4013      	ands	r3, r2
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	429a      	cmp	r2, r3
 800294e:	d1ee      	bne.n	800292e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2204      	movs	r2, #4
 8002956:	4013      	ands	r3, r2
 8002958:	d009      	beq.n	800296e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800295a:	4b14      	ldr	r3, [pc, #80]	; (80029ac <HAL_RCC_ClockConfig+0x1f8>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	4a15      	ldr	r2, [pc, #84]	; (80029b4 <HAL_RCC_ClockConfig+0x200>)
 8002960:	4013      	ands	r3, r2
 8002962:	0019      	movs	r1, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	68da      	ldr	r2, [r3, #12]
 8002968:	4b10      	ldr	r3, [pc, #64]	; (80029ac <HAL_RCC_ClockConfig+0x1f8>)
 800296a:	430a      	orrs	r2, r1
 800296c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800296e:	f000 f829 	bl	80029c4 <HAL_RCC_GetSysClockFreq>
 8002972:	0001      	movs	r1, r0
 8002974:	4b0d      	ldr	r3, [pc, #52]	; (80029ac <HAL_RCC_ClockConfig+0x1f8>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	0a1b      	lsrs	r3, r3, #8
 800297a:	220f      	movs	r2, #15
 800297c:	401a      	ands	r2, r3
 800297e:	4b0e      	ldr	r3, [pc, #56]	; (80029b8 <HAL_RCC_ClockConfig+0x204>)
 8002980:	0092      	lsls	r2, r2, #2
 8002982:	58d3      	ldr	r3, [r2, r3]
 8002984:	221f      	movs	r2, #31
 8002986:	4013      	ands	r3, r2
 8002988:	000a      	movs	r2, r1
 800298a:	40da      	lsrs	r2, r3
 800298c:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <HAL_RCC_ClockConfig+0x208>)
 800298e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002990:	4b0b      	ldr	r3, [pc, #44]	; (80029c0 <HAL_RCC_ClockConfig+0x20c>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	0018      	movs	r0, r3
 8002996:	f7fe fdb5 	bl	8001504 <HAL_InitTick>
 800299a:	0003      	movs	r3, r0
}
 800299c:	0018      	movs	r0, r3
 800299e:	46bd      	mov	sp, r7
 80029a0:	b004      	add	sp, #16
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40022000 	.word	0x40022000
 80029a8:	00001388 	.word	0x00001388
 80029ac:	40021000 	.word	0x40021000
 80029b0:	fffff0ff 	.word	0xfffff0ff
 80029b4:	ffff8fff 	.word	0xffff8fff
 80029b8:	08007568 	.word	0x08007568
 80029bc:	2000008c 	.word	0x2000008c
 80029c0:	20000090 	.word	0x20000090

080029c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029ca:	4b3c      	ldr	r3, [pc, #240]	; (8002abc <HAL_RCC_GetSysClockFreq+0xf8>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	2238      	movs	r2, #56	; 0x38
 80029d0:	4013      	ands	r3, r2
 80029d2:	d10f      	bne.n	80029f4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80029d4:	4b39      	ldr	r3, [pc, #228]	; (8002abc <HAL_RCC_GetSysClockFreq+0xf8>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	0adb      	lsrs	r3, r3, #11
 80029da:	2207      	movs	r2, #7
 80029dc:	4013      	ands	r3, r2
 80029de:	2201      	movs	r2, #1
 80029e0:	409a      	lsls	r2, r3
 80029e2:	0013      	movs	r3, r2
 80029e4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80029e6:	6839      	ldr	r1, [r7, #0]
 80029e8:	4835      	ldr	r0, [pc, #212]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80029ea:	f7fd fb9d 	bl	8000128 <__udivsi3>
 80029ee:	0003      	movs	r3, r0
 80029f0:	613b      	str	r3, [r7, #16]
 80029f2:	e05d      	b.n	8002ab0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029f4:	4b31      	ldr	r3, [pc, #196]	; (8002abc <HAL_RCC_GetSysClockFreq+0xf8>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	2238      	movs	r2, #56	; 0x38
 80029fa:	4013      	ands	r3, r2
 80029fc:	2b08      	cmp	r3, #8
 80029fe:	d102      	bne.n	8002a06 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a00:	4b30      	ldr	r3, [pc, #192]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x100>)
 8002a02:	613b      	str	r3, [r7, #16]
 8002a04:	e054      	b.n	8002ab0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a06:	4b2d      	ldr	r3, [pc, #180]	; (8002abc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	2238      	movs	r2, #56	; 0x38
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	2b10      	cmp	r3, #16
 8002a10:	d138      	bne.n	8002a84 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002a12:	4b2a      	ldr	r3, [pc, #168]	; (8002abc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	2203      	movs	r2, #3
 8002a18:	4013      	ands	r3, r2
 8002a1a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a1c:	4b27      	ldr	r3, [pc, #156]	; (8002abc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	091b      	lsrs	r3, r3, #4
 8002a22:	2207      	movs	r2, #7
 8002a24:	4013      	ands	r3, r2
 8002a26:	3301      	adds	r3, #1
 8002a28:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2b03      	cmp	r3, #3
 8002a2e:	d10d      	bne.n	8002a4c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a30:	68b9      	ldr	r1, [r7, #8]
 8002a32:	4824      	ldr	r0, [pc, #144]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x100>)
 8002a34:	f7fd fb78 	bl	8000128 <__udivsi3>
 8002a38:	0003      	movs	r3, r0
 8002a3a:	0019      	movs	r1, r3
 8002a3c:	4b1f      	ldr	r3, [pc, #124]	; (8002abc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	0a1b      	lsrs	r3, r3, #8
 8002a42:	227f      	movs	r2, #127	; 0x7f
 8002a44:	4013      	ands	r3, r2
 8002a46:	434b      	muls	r3, r1
 8002a48:	617b      	str	r3, [r7, #20]
        break;
 8002a4a:	e00d      	b.n	8002a68 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002a4c:	68b9      	ldr	r1, [r7, #8]
 8002a4e:	481c      	ldr	r0, [pc, #112]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002a50:	f7fd fb6a 	bl	8000128 <__udivsi3>
 8002a54:	0003      	movs	r3, r0
 8002a56:	0019      	movs	r1, r3
 8002a58:	4b18      	ldr	r3, [pc, #96]	; (8002abc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	0a1b      	lsrs	r3, r3, #8
 8002a5e:	227f      	movs	r2, #127	; 0x7f
 8002a60:	4013      	ands	r3, r2
 8002a62:	434b      	muls	r3, r1
 8002a64:	617b      	str	r3, [r7, #20]
        break;
 8002a66:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002a68:	4b14      	ldr	r3, [pc, #80]	; (8002abc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	0f5b      	lsrs	r3, r3, #29
 8002a6e:	2207      	movs	r2, #7
 8002a70:	4013      	ands	r3, r2
 8002a72:	3301      	adds	r3, #1
 8002a74:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	6978      	ldr	r0, [r7, #20]
 8002a7a:	f7fd fb55 	bl	8000128 <__udivsi3>
 8002a7e:	0003      	movs	r3, r0
 8002a80:	613b      	str	r3, [r7, #16]
 8002a82:	e015      	b.n	8002ab0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002a84:	4b0d      	ldr	r3, [pc, #52]	; (8002abc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	2238      	movs	r2, #56	; 0x38
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	2b20      	cmp	r3, #32
 8002a8e:	d103      	bne.n	8002a98 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002a90:	2380      	movs	r3, #128	; 0x80
 8002a92:	021b      	lsls	r3, r3, #8
 8002a94:	613b      	str	r3, [r7, #16]
 8002a96:	e00b      	b.n	8002ab0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002a98:	4b08      	ldr	r3, [pc, #32]	; (8002abc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	2238      	movs	r2, #56	; 0x38
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	2b18      	cmp	r3, #24
 8002aa2:	d103      	bne.n	8002aac <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002aa4:	23fa      	movs	r3, #250	; 0xfa
 8002aa6:	01db      	lsls	r3, r3, #7
 8002aa8:	613b      	str	r3, [r7, #16]
 8002aaa:	e001      	b.n	8002ab0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002aac:	2300      	movs	r3, #0
 8002aae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002ab0:	693b      	ldr	r3, [r7, #16]
}
 8002ab2:	0018      	movs	r0, r3
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	b006      	add	sp, #24
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	46c0      	nop			; (mov r8, r8)
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	00f42400 	.word	0x00f42400
 8002ac4:	007a1200 	.word	0x007a1200

08002ac8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002acc:	4b02      	ldr	r3, [pc, #8]	; (8002ad8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ace:	681b      	ldr	r3, [r3, #0]
}
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	2000008c 	.word	0x2000008c

08002adc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002adc:	b5b0      	push	{r4, r5, r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002ae0:	f7ff fff2 	bl	8002ac8 <HAL_RCC_GetHCLKFreq>
 8002ae4:	0004      	movs	r4, r0
 8002ae6:	f7ff fb3f 	bl	8002168 <LL_RCC_GetAPB1Prescaler>
 8002aea:	0003      	movs	r3, r0
 8002aec:	0b1a      	lsrs	r2, r3, #12
 8002aee:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002af0:	0092      	lsls	r2, r2, #2
 8002af2:	58d3      	ldr	r3, [r2, r3]
 8002af4:	221f      	movs	r2, #31
 8002af6:	4013      	ands	r3, r2
 8002af8:	40dc      	lsrs	r4, r3
 8002afa:	0023      	movs	r3, r4
}
 8002afc:	0018      	movs	r0, r3
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bdb0      	pop	{r4, r5, r7, pc}
 8002b02:	46c0      	nop			; (mov r8, r8)
 8002b04:	080075a8 	.word	0x080075a8

08002b08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002b10:	2313      	movs	r3, #19
 8002b12:	18fb      	adds	r3, r7, r3
 8002b14:	2200      	movs	r2, #0
 8002b16:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b18:	2312      	movs	r3, #18
 8002b1a:	18fb      	adds	r3, r7, r3
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	2380      	movs	r3, #128	; 0x80
 8002b26:	029b      	lsls	r3, r3, #10
 8002b28:	4013      	ands	r3, r2
 8002b2a:	d100      	bne.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002b2c:	e0a3      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b2e:	2011      	movs	r0, #17
 8002b30:	183b      	adds	r3, r7, r0
 8002b32:	2200      	movs	r2, #0
 8002b34:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b36:	4ba5      	ldr	r3, [pc, #660]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b3a:	2380      	movs	r3, #128	; 0x80
 8002b3c:	055b      	lsls	r3, r3, #21
 8002b3e:	4013      	ands	r3, r2
 8002b40:	d110      	bne.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b42:	4ba2      	ldr	r3, [pc, #648]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b46:	4ba1      	ldr	r3, [pc, #644]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b48:	2180      	movs	r1, #128	; 0x80
 8002b4a:	0549      	lsls	r1, r1, #21
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b50:	4b9e      	ldr	r3, [pc, #632]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b54:	2380      	movs	r3, #128	; 0x80
 8002b56:	055b      	lsls	r3, r3, #21
 8002b58:	4013      	ands	r3, r2
 8002b5a:	60bb      	str	r3, [r7, #8]
 8002b5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b5e:	183b      	adds	r3, r7, r0
 8002b60:	2201      	movs	r2, #1
 8002b62:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b64:	4b9a      	ldr	r3, [pc, #616]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	4b99      	ldr	r3, [pc, #612]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002b6a:	2180      	movs	r1, #128	; 0x80
 8002b6c:	0049      	lsls	r1, r1, #1
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b72:	f7fe fd23 	bl	80015bc <HAL_GetTick>
 8002b76:	0003      	movs	r3, r0
 8002b78:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b7a:	e00b      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b7c:	f7fe fd1e 	bl	80015bc <HAL_GetTick>
 8002b80:	0002      	movs	r2, r0
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d904      	bls.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002b8a:	2313      	movs	r3, #19
 8002b8c:	18fb      	adds	r3, r7, r3
 8002b8e:	2203      	movs	r2, #3
 8002b90:	701a      	strb	r2, [r3, #0]
        break;
 8002b92:	e005      	b.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b94:	4b8e      	ldr	r3, [pc, #568]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	2380      	movs	r3, #128	; 0x80
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	d0ed      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002ba0:	2313      	movs	r3, #19
 8002ba2:	18fb      	adds	r3, r7, r3
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d154      	bne.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002baa:	4b88      	ldr	r3, [pc, #544]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002bac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002bae:	23c0      	movs	r3, #192	; 0xc0
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d019      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d014      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002bc6:	4b81      	ldr	r3, [pc, #516]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bca:	4a82      	ldr	r2, [pc, #520]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002bcc:	4013      	ands	r3, r2
 8002bce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002bd0:	4b7e      	ldr	r3, [pc, #504]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002bd2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002bd4:	4b7d      	ldr	r3, [pc, #500]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002bd6:	2180      	movs	r1, #128	; 0x80
 8002bd8:	0249      	lsls	r1, r1, #9
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002bde:	4b7b      	ldr	r3, [pc, #492]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002be0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002be2:	4b7a      	ldr	r3, [pc, #488]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002be4:	497c      	ldr	r1, [pc, #496]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8002be6:	400a      	ands	r2, r1
 8002be8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002bea:	4b78      	ldr	r3, [pc, #480]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	d016      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf8:	f7fe fce0 	bl	80015bc <HAL_GetTick>
 8002bfc:	0003      	movs	r3, r0
 8002bfe:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c00:	e00c      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c02:	f7fe fcdb 	bl	80015bc <HAL_GetTick>
 8002c06:	0002      	movs	r2, r0
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	4a73      	ldr	r2, [pc, #460]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d904      	bls.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002c12:	2313      	movs	r3, #19
 8002c14:	18fb      	adds	r3, r7, r3
 8002c16:	2203      	movs	r2, #3
 8002c18:	701a      	strb	r2, [r3, #0]
            break;
 8002c1a:	e004      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c1c:	4b6b      	ldr	r3, [pc, #428]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c20:	2202      	movs	r2, #2
 8002c22:	4013      	ands	r3, r2
 8002c24:	d0ed      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002c26:	2313      	movs	r3, #19
 8002c28:	18fb      	adds	r3, r7, r3
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10a      	bne.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c30:	4b66      	ldr	r3, [pc, #408]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c34:	4a67      	ldr	r2, [pc, #412]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002c36:	4013      	ands	r3, r2
 8002c38:	0019      	movs	r1, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c3e:	4b63      	ldr	r3, [pc, #396]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c40:	430a      	orrs	r2, r1
 8002c42:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c44:	e00c      	b.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c46:	2312      	movs	r3, #18
 8002c48:	18fb      	adds	r3, r7, r3
 8002c4a:	2213      	movs	r2, #19
 8002c4c:	18ba      	adds	r2, r7, r2
 8002c4e:	7812      	ldrb	r2, [r2, #0]
 8002c50:	701a      	strb	r2, [r3, #0]
 8002c52:	e005      	b.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c54:	2312      	movs	r3, #18
 8002c56:	18fb      	adds	r3, r7, r3
 8002c58:	2213      	movs	r2, #19
 8002c5a:	18ba      	adds	r2, r7, r2
 8002c5c:	7812      	ldrb	r2, [r2, #0]
 8002c5e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c60:	2311      	movs	r3, #17
 8002c62:	18fb      	adds	r3, r7, r3
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d105      	bne.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c6a:	4b58      	ldr	r3, [pc, #352]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c6e:	4b57      	ldr	r3, [pc, #348]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c70:	495b      	ldr	r1, [pc, #364]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002c72:	400a      	ands	r2, r1
 8002c74:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	d009      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c80:	4b52      	ldr	r3, [pc, #328]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c84:	2203      	movs	r2, #3
 8002c86:	4393      	bics	r3, r2
 8002c88:	0019      	movs	r1, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685a      	ldr	r2, [r3, #4]
 8002c8e:	4b4f      	ldr	r3, [pc, #316]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c90:	430a      	orrs	r2, r1
 8002c92:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2210      	movs	r2, #16
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	d009      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c9e:	4b4b      	ldr	r3, [pc, #300]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca2:	4a50      	ldr	r2, [pc, #320]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	0019      	movs	r1, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	4b47      	ldr	r3, [pc, #284]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	2380      	movs	r3, #128	; 0x80
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	4013      	ands	r3, r2
 8002cbc:	d009      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cbe:	4b43      	ldr	r3, [pc, #268]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc2:	4a49      	ldr	r2, [pc, #292]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	0019      	movs	r1, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	695a      	ldr	r2, [r3, #20]
 8002ccc:	4b3f      	ldr	r3, [pc, #252]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	2380      	movs	r3, #128	; 0x80
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	4013      	ands	r3, r2
 8002cdc:	d009      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002cde:	4b3b      	ldr	r3, [pc, #236]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce2:	4a42      	ldr	r2, [pc, #264]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	0019      	movs	r1, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	699a      	ldr	r2, [r3, #24]
 8002cec:	4b37      	ldr	r3, [pc, #220]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	d009      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cfc:	4b33      	ldr	r3, [pc, #204]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d00:	4a3b      	ldr	r2, [pc, #236]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d02:	4013      	ands	r3, r2
 8002d04:	0019      	movs	r1, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	68da      	ldr	r2, [r3, #12]
 8002d0a:	4b30      	ldr	r3, [pc, #192]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	2380      	movs	r3, #128	; 0x80
 8002d16:	01db      	lsls	r3, r3, #7
 8002d18:	4013      	ands	r3, r2
 8002d1a:	d015      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d1c:	4b2b      	ldr	r3, [pc, #172]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	0899      	lsrs	r1, r3, #2
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	69da      	ldr	r2, [r3, #28]
 8002d28:	4b28      	ldr	r3, [pc, #160]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69da      	ldr	r2, [r3, #28]
 8002d32:	2380      	movs	r3, #128	; 0x80
 8002d34:	05db      	lsls	r3, r3, #23
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d106      	bne.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002d3a:	4b24      	ldr	r3, [pc, #144]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d3c:	68da      	ldr	r2, [r3, #12]
 8002d3e:	4b23      	ldr	r3, [pc, #140]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d40:	2180      	movs	r1, #128	; 0x80
 8002d42:	0249      	lsls	r1, r1, #9
 8002d44:	430a      	orrs	r2, r1
 8002d46:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	2380      	movs	r3, #128	; 0x80
 8002d4e:	039b      	lsls	r3, r3, #14
 8002d50:	4013      	ands	r3, r2
 8002d52:	d016      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002d54:	4b1d      	ldr	r3, [pc, #116]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d58:	4a26      	ldr	r2, [pc, #152]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	0019      	movs	r1, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a1a      	ldr	r2, [r3, #32]
 8002d62:	4b1a      	ldr	r3, [pc, #104]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d64:	430a      	orrs	r2, r1
 8002d66:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a1a      	ldr	r2, [r3, #32]
 8002d6c:	2380      	movs	r3, #128	; 0x80
 8002d6e:	03db      	lsls	r3, r3, #15
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d106      	bne.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002d74:	4b15      	ldr	r3, [pc, #84]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d76:	68da      	ldr	r2, [r3, #12]
 8002d78:	4b14      	ldr	r3, [pc, #80]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d7a:	2180      	movs	r1, #128	; 0x80
 8002d7c:	0449      	lsls	r1, r1, #17
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	2380      	movs	r3, #128	; 0x80
 8002d88:	011b      	lsls	r3, r3, #4
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	d016      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002d8e:	4b0f      	ldr	r3, [pc, #60]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d92:	4a19      	ldr	r2, [pc, #100]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d94:	4013      	ands	r3, r2
 8002d96:	0019      	movs	r1, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	691a      	ldr	r2, [r3, #16]
 8002d9c:	4b0b      	ldr	r3, [pc, #44]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	691a      	ldr	r2, [r3, #16]
 8002da6:	2380      	movs	r3, #128	; 0x80
 8002da8:	01db      	lsls	r3, r3, #7
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d106      	bne.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002dae:	4b07      	ldr	r3, [pc, #28]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002db0:	68da      	ldr	r2, [r3, #12]
 8002db2:	4b06      	ldr	r3, [pc, #24]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002db4:	2180      	movs	r1, #128	; 0x80
 8002db6:	0249      	lsls	r1, r1, #9
 8002db8:	430a      	orrs	r2, r1
 8002dba:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002dbc:	2312      	movs	r3, #18
 8002dbe:	18fb      	adds	r3, r7, r3
 8002dc0:	781b      	ldrb	r3, [r3, #0]
}
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	b006      	add	sp, #24
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	40007000 	.word	0x40007000
 8002dd4:	fffffcff 	.word	0xfffffcff
 8002dd8:	fffeffff 	.word	0xfffeffff
 8002ddc:	00001388 	.word	0x00001388
 8002de0:	efffffff 	.word	0xefffffff
 8002de4:	fffff3ff 	.word	0xfffff3ff
 8002de8:	fff3ffff 	.word	0xfff3ffff
 8002dec:	ffcfffff 	.word	0xffcfffff
 8002df0:	ffffcfff 	.word	0xffffcfff
 8002df4:	ffbfffff 	.word	0xffbfffff
 8002df8:	ffff3fff 	.word	0xffff3fff

08002dfc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002dfc:	b5b0      	push	{r4, r5, r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002e04:	230f      	movs	r3, #15
 8002e06:	18fb      	adds	r3, r7, r3
 8002e08:	2201      	movs	r2, #1
 8002e0a:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d100      	bne.n	8002e14 <HAL_RTC_Init+0x18>
 8002e12:	e08c      	b.n	8002f2e <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2229      	movs	r2, #41	; 0x29
 8002e18:	5c9b      	ldrb	r3, [r3, r2]
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10b      	bne.n	8002e38 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2228      	movs	r2, #40	; 0x28
 8002e24:	2100      	movs	r1, #0
 8002e26:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2288      	movs	r2, #136	; 0x88
 8002e2c:	0212      	lsls	r2, r2, #8
 8002e2e:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	0018      	movs	r0, r3
 8002e34:	f7fe f8e0 	bl	8000ff8 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2229      	movs	r2, #41	; 0x29
 8002e3c:	2102      	movs	r1, #2
 8002e3e:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	2210      	movs	r2, #16
 8002e48:	4013      	ands	r3, r2
 8002e4a:	2b10      	cmp	r3, #16
 8002e4c:	d062      	beq.n	8002f14 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	22ca      	movs	r2, #202	; 0xca
 8002e54:	625a      	str	r2, [r3, #36]	; 0x24
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2253      	movs	r2, #83	; 0x53
 8002e5c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002e5e:	250f      	movs	r5, #15
 8002e60:	197c      	adds	r4, r7, r5
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	0018      	movs	r0, r3
 8002e66:	f000 f9cc 	bl	8003202 <RTC_EnterInitMode>
 8002e6a:	0003      	movs	r3, r0
 8002e6c:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8002e6e:	0028      	movs	r0, r5
 8002e70:	183b      	adds	r3, r7, r0
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d12c      	bne.n	8002ed2 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	699a      	ldr	r2, [r3, #24]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	492e      	ldr	r1, [pc, #184]	; (8002f3c <HAL_RTC_Init+0x140>)
 8002e84:	400a      	ands	r2, r1
 8002e86:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6999      	ldr	r1, [r3, #24]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	689a      	ldr	r2, [r3, #8]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	431a      	orrs	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	69db      	ldr	r3, [r3, #28]
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6912      	ldr	r2, [r2, #16]
 8002eae:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6919      	ldr	r1, [r3, #16]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	041a      	lsls	r2, r3, #16
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002ec4:	183c      	adds	r4, r7, r0
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	0018      	movs	r0, r3
 8002eca:	f000 f9dd 	bl	8003288 <RTC_ExitInitMode>
 8002ece:	0003      	movs	r3, r0
 8002ed0:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8002ed2:	230f      	movs	r3, #15
 8002ed4:	18fb      	adds	r3, r7, r3
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d116      	bne.n	8002f0a <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699a      	ldr	r2, [r3, #24]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	00d2      	lsls	r2, r2, #3
 8002ee8:	08d2      	lsrs	r2, r2, #3
 8002eea:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6999      	ldr	r1, [r3, #24]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	431a      	orrs	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	431a      	orrs	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	22ff      	movs	r2, #255	; 0xff
 8002f10:	625a      	str	r2, [r3, #36]	; 0x24
 8002f12:	e003      	b.n	8002f1c <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002f14:	230f      	movs	r3, #15
 8002f16:	18fb      	adds	r3, r7, r3
 8002f18:	2200      	movs	r2, #0
 8002f1a:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8002f1c:	230f      	movs	r3, #15
 8002f1e:	18fb      	adds	r3, r7, r3
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d103      	bne.n	8002f2e <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2229      	movs	r2, #41	; 0x29
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8002f2e:	230f      	movs	r3, #15
 8002f30:	18fb      	adds	r3, r7, r3
 8002f32:	781b      	ldrb	r3, [r3, #0]
}
 8002f34:	0018      	movs	r0, r3
 8002f36:	46bd      	mov	sp, r7
 8002f38:	b004      	add	sp, #16
 8002f3a:	bdb0      	pop	{r4, r5, r7, pc}
 8002f3c:	fb8fffbf 	.word	0xfb8fffbf

08002f40 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002f40:	b5b0      	push	{r4, r5, r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2228      	movs	r2, #40	; 0x28
 8002f50:	5c9b      	ldrb	r3, [r3, r2]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d101      	bne.n	8002f5a <HAL_RTC_SetTime+0x1a>
 8002f56:	2302      	movs	r3, #2
 8002f58:	e092      	b.n	8003080 <HAL_RTC_SetTime+0x140>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2228      	movs	r2, #40	; 0x28
 8002f5e:	2101      	movs	r1, #1
 8002f60:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2229      	movs	r2, #41	; 0x29
 8002f66:	2102      	movs	r1, #2
 8002f68:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	22ca      	movs	r2, #202	; 0xca
 8002f70:	625a      	str	r2, [r3, #36]	; 0x24
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2253      	movs	r2, #83	; 0x53
 8002f78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002f7a:	2513      	movs	r5, #19
 8002f7c:	197c      	adds	r4, r7, r5
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	0018      	movs	r0, r3
 8002f82:	f000 f93e 	bl	8003202 <RTC_EnterInitMode>
 8002f86:	0003      	movs	r3, r0
 8002f88:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8002f8a:	197b      	adds	r3, r7, r5
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d162      	bne.n	8003058 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d125      	bne.n	8002fe4 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	2240      	movs	r2, #64	; 0x40
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	d102      	bne.n	8002faa <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	0018      	movs	r0, r3
 8002fb0:	f000 f9ae 	bl	8003310 <RTC_ByteToBcd2>
 8002fb4:	0003      	movs	r3, r0
 8002fb6:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	785b      	ldrb	r3, [r3, #1]
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	f000 f9a7 	bl	8003310 <RTC_ByteToBcd2>
 8002fc2:	0003      	movs	r3, r0
 8002fc4:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002fc6:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	789b      	ldrb	r3, [r3, #2]
 8002fcc:	0018      	movs	r0, r3
 8002fce:	f000 f99f 	bl	8003310 <RTC_ByteToBcd2>
 8002fd2:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002fd4:	0022      	movs	r2, r4
 8002fd6:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	78db      	ldrb	r3, [r3, #3]
 8002fdc:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	617b      	str	r3, [r7, #20]
 8002fe2:	e017      	b.n	8003014 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	2240      	movs	r2, #64	; 0x40
 8002fec:	4013      	ands	r3, r2
 8002fee:	d102      	bne.n	8002ff6 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	785b      	ldrb	r3, [r3, #1]
 8003000:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003002:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003004:	68ba      	ldr	r2, [r7, #8]
 8003006:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003008:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	78db      	ldrb	r3, [r3, #3]
 800300e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003010:	4313      	orrs	r3, r2
 8003012:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	697a      	ldr	r2, [r7, #20]
 800301a:	491b      	ldr	r1, [pc, #108]	; (8003088 <HAL_RTC_SetTime+0x148>)
 800301c:	400a      	ands	r2, r1
 800301e:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	699a      	ldr	r2, [r3, #24]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4918      	ldr	r1, [pc, #96]	; (800308c <HAL_RTC_SetTime+0x14c>)
 800302c:	400a      	ands	r2, r1
 800302e:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6999      	ldr	r1, [r3, #24]
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	68da      	ldr	r2, [r3, #12]
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	431a      	orrs	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	430a      	orrs	r2, r1
 8003046:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003048:	2313      	movs	r3, #19
 800304a:	18fc      	adds	r4, r7, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	0018      	movs	r0, r3
 8003050:	f000 f91a 	bl	8003288 <RTC_ExitInitMode>
 8003054:	0003      	movs	r3, r0
 8003056:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	22ff      	movs	r2, #255	; 0xff
 800305e:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8003060:	2313      	movs	r3, #19
 8003062:	18fb      	adds	r3, r7, r3
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d103      	bne.n	8003072 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2229      	movs	r2, #41	; 0x29
 800306e:	2101      	movs	r1, #1
 8003070:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2228      	movs	r2, #40	; 0x28
 8003076:	2100      	movs	r1, #0
 8003078:	5499      	strb	r1, [r3, r2]

  return status;
 800307a:	2313      	movs	r3, #19
 800307c:	18fb      	adds	r3, r7, r3
 800307e:	781b      	ldrb	r3, [r3, #0]
}
 8003080:	0018      	movs	r0, r3
 8003082:	46bd      	mov	sp, r7
 8003084:	b006      	add	sp, #24
 8003086:	bdb0      	pop	{r4, r5, r7, pc}
 8003088:	007f7f7f 	.word	0x007f7f7f
 800308c:	fffbffff 	.word	0xfffbffff

08003090 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003090:	b5b0      	push	{r4, r5, r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2228      	movs	r2, #40	; 0x28
 80030a0:	5c9b      	ldrb	r3, [r3, r2]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d101      	bne.n	80030aa <HAL_RTC_SetDate+0x1a>
 80030a6:	2302      	movs	r3, #2
 80030a8:	e07e      	b.n	80031a8 <HAL_RTC_SetDate+0x118>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2228      	movs	r2, #40	; 0x28
 80030ae:	2101      	movs	r1, #1
 80030b0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2229      	movs	r2, #41	; 0x29
 80030b6:	2102      	movs	r1, #2
 80030b8:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d10e      	bne.n	80030de <HAL_RTC_SetDate+0x4e>
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	785b      	ldrb	r3, [r3, #1]
 80030c4:	001a      	movs	r2, r3
 80030c6:	2310      	movs	r3, #16
 80030c8:	4013      	ands	r3, r2
 80030ca:	d008      	beq.n	80030de <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	785b      	ldrb	r3, [r3, #1]
 80030d0:	2210      	movs	r2, #16
 80030d2:	4393      	bics	r3, r2
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	330a      	adds	r3, #10
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d11c      	bne.n	800311e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	78db      	ldrb	r3, [r3, #3]
 80030e8:	0018      	movs	r0, r3
 80030ea:	f000 f911 	bl	8003310 <RTC_ByteToBcd2>
 80030ee:	0003      	movs	r3, r0
 80030f0:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	785b      	ldrb	r3, [r3, #1]
 80030f6:	0018      	movs	r0, r3
 80030f8:	f000 f90a 	bl	8003310 <RTC_ByteToBcd2>
 80030fc:	0003      	movs	r3, r0
 80030fe:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003100:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	789b      	ldrb	r3, [r3, #2]
 8003106:	0018      	movs	r0, r3
 8003108:	f000 f902 	bl	8003310 <RTC_ByteToBcd2>
 800310c:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800310e:	0022      	movs	r2, r4
 8003110:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003118:	4313      	orrs	r3, r2
 800311a:	617b      	str	r3, [r7, #20]
 800311c:	e00e      	b.n	800313c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	78db      	ldrb	r3, [r3, #3]
 8003122:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	785b      	ldrb	r3, [r3, #1]
 8003128:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800312a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003130:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003138:	4313      	orrs	r3, r2
 800313a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	22ca      	movs	r2, #202	; 0xca
 8003142:	625a      	str	r2, [r3, #36]	; 0x24
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2253      	movs	r2, #83	; 0x53
 800314a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800314c:	2513      	movs	r5, #19
 800314e:	197c      	adds	r4, r7, r5
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	0018      	movs	r0, r3
 8003154:	f000 f855 	bl	8003202 <RTC_EnterInitMode>
 8003158:	0003      	movs	r3, r0
 800315a:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800315c:	0028      	movs	r0, r5
 800315e:	183b      	adds	r3, r7, r0
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10c      	bne.n	8003180 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	4910      	ldr	r1, [pc, #64]	; (80031b0 <HAL_RTC_SetDate+0x120>)
 800316e:	400a      	ands	r2, r1
 8003170:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003172:	183c      	adds	r4, r7, r0
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	0018      	movs	r0, r3
 8003178:	f000 f886 	bl	8003288 <RTC_ExitInitMode>
 800317c:	0003      	movs	r3, r0
 800317e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	22ff      	movs	r2, #255	; 0xff
 8003186:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003188:	2313      	movs	r3, #19
 800318a:	18fb      	adds	r3, r7, r3
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d103      	bne.n	800319a <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2229      	movs	r2, #41	; 0x29
 8003196:	2101      	movs	r1, #1
 8003198:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2228      	movs	r2, #40	; 0x28
 800319e:	2100      	movs	r1, #0
 80031a0:	5499      	strb	r1, [r3, r2]

  return status;
 80031a2:	2313      	movs	r3, #19
 80031a4:	18fb      	adds	r3, r7, r3
 80031a6:	781b      	ldrb	r3, [r3, #0]
}
 80031a8:	0018      	movs	r0, r3
 80031aa:	46bd      	mov	sp, r7
 80031ac:	b006      	add	sp, #24
 80031ae:	bdb0      	pop	{r4, r5, r7, pc}
 80031b0:	00ffff3f 	.word	0x00ffff3f

080031b4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68da      	ldr	r2, [r3, #12]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	21a0      	movs	r1, #160	; 0xa0
 80031c8:	438a      	bics	r2, r1
 80031ca:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80031cc:	f7fe f9f6 	bl	80015bc <HAL_GetTick>
 80031d0:	0003      	movs	r3, r0
 80031d2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80031d4:	e00a      	b.n	80031ec <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80031d6:	f7fe f9f1 	bl	80015bc <HAL_GetTick>
 80031da:	0002      	movs	r2, r0
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	1ad2      	subs	r2, r2, r3
 80031e0:	23fa      	movs	r3, #250	; 0xfa
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d901      	bls.n	80031ec <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e006      	b.n	80031fa <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	2220      	movs	r2, #32
 80031f4:	4013      	ands	r3, r2
 80031f6:	d0ee      	beq.n	80031d6 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	0018      	movs	r0, r3
 80031fc:	46bd      	mov	sp, r7
 80031fe:	b004      	add	sp, #16
 8003200:	bd80      	pop	{r7, pc}

08003202 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b084      	sub	sp, #16
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 800320a:	230f      	movs	r3, #15
 800320c:	18fb      	adds	r3, r7, r3
 800320e:	2200      	movs	r2, #0
 8003210:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	2240      	movs	r2, #64	; 0x40
 800321a:	4013      	ands	r3, r2
 800321c:	d12c      	bne.n	8003278 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68da      	ldr	r2, [r3, #12]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2180      	movs	r1, #128	; 0x80
 800322a:	430a      	orrs	r2, r1
 800322c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800322e:	f7fe f9c5 	bl	80015bc <HAL_GetTick>
 8003232:	0003      	movs	r3, r0
 8003234:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003236:	e014      	b.n	8003262 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8003238:	f7fe f9c0 	bl	80015bc <HAL_GetTick>
 800323c:	0002      	movs	r2, r0
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	1ad2      	subs	r2, r2, r3
 8003242:	200f      	movs	r0, #15
 8003244:	183b      	adds	r3, r7, r0
 8003246:	1839      	adds	r1, r7, r0
 8003248:	7809      	ldrb	r1, [r1, #0]
 800324a:	7019      	strb	r1, [r3, #0]
 800324c:	23fa      	movs	r3, #250	; 0xfa
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	429a      	cmp	r2, r3
 8003252:	d906      	bls.n	8003262 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8003254:	183b      	adds	r3, r7, r0
 8003256:	2203      	movs	r2, #3
 8003258:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2229      	movs	r2, #41	; 0x29
 800325e:	2103      	movs	r1, #3
 8003260:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	2240      	movs	r2, #64	; 0x40
 800326a:	4013      	ands	r3, r2
 800326c:	d104      	bne.n	8003278 <RTC_EnterInitMode+0x76>
 800326e:	230f      	movs	r3, #15
 8003270:	18fb      	adds	r3, r7, r3
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b03      	cmp	r3, #3
 8003276:	d1df      	bne.n	8003238 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003278:	230f      	movs	r3, #15
 800327a:	18fb      	adds	r3, r7, r3
 800327c:	781b      	ldrb	r3, [r3, #0]
}
 800327e:	0018      	movs	r0, r3
 8003280:	46bd      	mov	sp, r7
 8003282:	b004      	add	sp, #16
 8003284:	bd80      	pop	{r7, pc}
	...

08003288 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003288:	b590      	push	{r4, r7, lr}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003290:	240f      	movs	r4, #15
 8003292:	193b      	adds	r3, r7, r4
 8003294:	2200      	movs	r2, #0
 8003296:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003298:	4b1c      	ldr	r3, [pc, #112]	; (800330c <RTC_ExitInitMode+0x84>)
 800329a:	68da      	ldr	r2, [r3, #12]
 800329c:	4b1b      	ldr	r3, [pc, #108]	; (800330c <RTC_ExitInitMode+0x84>)
 800329e:	2180      	movs	r1, #128	; 0x80
 80032a0:	438a      	bics	r2, r1
 80032a2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80032a4:	4b19      	ldr	r3, [pc, #100]	; (800330c <RTC_ExitInitMode+0x84>)
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	2220      	movs	r2, #32
 80032aa:	4013      	ands	r3, r2
 80032ac:	d10d      	bne.n	80032ca <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	0018      	movs	r0, r3
 80032b2:	f7ff ff7f 	bl	80031b4 <HAL_RTC_WaitForSynchro>
 80032b6:	1e03      	subs	r3, r0, #0
 80032b8:	d021      	beq.n	80032fe <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2229      	movs	r2, #41	; 0x29
 80032be:	2103      	movs	r1, #3
 80032c0:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80032c2:	193b      	adds	r3, r7, r4
 80032c4:	2203      	movs	r2, #3
 80032c6:	701a      	strb	r2, [r3, #0]
 80032c8:	e019      	b.n	80032fe <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80032ca:	4b10      	ldr	r3, [pc, #64]	; (800330c <RTC_ExitInitMode+0x84>)
 80032cc:	699a      	ldr	r2, [r3, #24]
 80032ce:	4b0f      	ldr	r3, [pc, #60]	; (800330c <RTC_ExitInitMode+0x84>)
 80032d0:	2120      	movs	r1, #32
 80032d2:	438a      	bics	r2, r1
 80032d4:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	0018      	movs	r0, r3
 80032da:	f7ff ff6b 	bl	80031b4 <HAL_RTC_WaitForSynchro>
 80032de:	1e03      	subs	r3, r0, #0
 80032e0:	d007      	beq.n	80032f2 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2229      	movs	r2, #41	; 0x29
 80032e6:	2103      	movs	r1, #3
 80032e8:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80032ea:	230f      	movs	r3, #15
 80032ec:	18fb      	adds	r3, r7, r3
 80032ee:	2203      	movs	r2, #3
 80032f0:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80032f2:	4b06      	ldr	r3, [pc, #24]	; (800330c <RTC_ExitInitMode+0x84>)
 80032f4:	699a      	ldr	r2, [r3, #24]
 80032f6:	4b05      	ldr	r3, [pc, #20]	; (800330c <RTC_ExitInitMode+0x84>)
 80032f8:	2120      	movs	r1, #32
 80032fa:	430a      	orrs	r2, r1
 80032fc:	619a      	str	r2, [r3, #24]
  }

  return status;
 80032fe:	230f      	movs	r3, #15
 8003300:	18fb      	adds	r3, r7, r3
 8003302:	781b      	ldrb	r3, [r3, #0]
}
 8003304:	0018      	movs	r0, r3
 8003306:	46bd      	mov	sp, r7
 8003308:	b005      	add	sp, #20
 800330a:	bd90      	pop	{r4, r7, pc}
 800330c:	40002800 	.word	0x40002800

08003310 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	0002      	movs	r2, r0
 8003318:	1dfb      	adds	r3, r7, #7
 800331a:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800331c:	2300      	movs	r3, #0
 800331e:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8003320:	230b      	movs	r3, #11
 8003322:	18fb      	adds	r3, r7, r3
 8003324:	1dfa      	adds	r2, r7, #7
 8003326:	7812      	ldrb	r2, [r2, #0]
 8003328:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 800332a:	e008      	b.n	800333e <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	3301      	adds	r3, #1
 8003330:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8003332:	220b      	movs	r2, #11
 8003334:	18bb      	adds	r3, r7, r2
 8003336:	18ba      	adds	r2, r7, r2
 8003338:	7812      	ldrb	r2, [r2, #0]
 800333a:	3a0a      	subs	r2, #10
 800333c:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 800333e:	210b      	movs	r1, #11
 8003340:	187b      	adds	r3, r7, r1
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	2b09      	cmp	r3, #9
 8003346:	d8f1      	bhi.n	800332c <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	b2db      	uxtb	r3, r3
 800334c:	011b      	lsls	r3, r3, #4
 800334e:	b2da      	uxtb	r2, r3
 8003350:	187b      	adds	r3, r7, r1
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	4313      	orrs	r3, r2
 8003356:	b2db      	uxtb	r3, r3
}
 8003358:	0018      	movs	r0, r3
 800335a:	46bd      	mov	sp, r7
 800335c:	b004      	add	sp, #16
 800335e:	bd80      	pop	{r7, pc}

08003360 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2228      	movs	r2, #40	; 0x28
 8003370:	5c9b      	ldrb	r3, [r3, r2]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d101      	bne.n	800337a <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8003376:	2302      	movs	r3, #2
 8003378:	e082      	b.n	8003480 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2228      	movs	r2, #40	; 0x28
 800337e:	2101      	movs	r1, #1
 8003380:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2229      	movs	r2, #41	; 0x29
 8003386:	2102      	movs	r1, #2
 8003388:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	22ca      	movs	r2, #202	; 0xca
 8003390:	625a      	str	r2, [r3, #36]	; 0x24
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2253      	movs	r2, #83	; 0x53
 8003398:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	699a      	ldr	r2, [r3, #24]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4938      	ldr	r1, [pc, #224]	; (8003488 <HAL_RTCEx_SetWakeUpTimer_IT+0x128>)
 80033a6:	400a      	ands	r2, r1
 80033a8:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2104      	movs	r1, #4
 80033b6:	430a      	orrs	r2, r1
 80033b8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80033ba:	4b34      	ldr	r3, [pc, #208]	; (800348c <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>)
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	2240      	movs	r2, #64	; 0x40
 80033c0:	4013      	ands	r3, r2
 80033c2:	d121      	bne.n	8003408 <HAL_RTCEx_SetWakeUpTimer_IT+0xa8>
  {
    tickstart = HAL_GetTick();
 80033c4:	f7fe f8fa 	bl	80015bc <HAL_GetTick>
 80033c8:	0003      	movs	r3, r0
 80033ca:	617b      	str	r3, [r7, #20]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80033cc:	e016      	b.n	80033fc <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80033ce:	f7fe f8f5 	bl	80015bc <HAL_GetTick>
 80033d2:	0002      	movs	r2, r0
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	1ad2      	subs	r2, r2, r3
 80033d8:	23fa      	movs	r3, #250	; 0xfa
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	429a      	cmp	r2, r3
 80033de:	d90d      	bls.n	80033fc <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	22ff      	movs	r2, #255	; 0xff
 80033e6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2229      	movs	r2, #41	; 0x29
 80033ec:	2103      	movs	r1, #3
 80033ee:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2228      	movs	r2, #40	; 0x28
 80033f4:	2100      	movs	r1, #0
 80033f6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e041      	b.n	8003480 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	2204      	movs	r2, #4
 8003404:	4013      	ands	r3, r2
 8003406:	d0e2      	beq.n	80033ce <HAL_RTCEx_SetWakeUpTimer_IT+0x6e>
      }
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68ba      	ldr	r2, [r7, #8]
 800340e:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	699a      	ldr	r2, [r3, #24]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2107      	movs	r1, #7
 800341c:	438a      	bics	r2, r1
 800341e:	619a      	str	r2, [r3, #24]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6999      	ldr	r1, [r3, #24]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	430a      	orrs	r2, r1
 800342e:	619a      	str	r2, [r3, #24]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003430:	4a17      	ldr	r2, [pc, #92]	; (8003490 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 8003432:	2380      	movs	r3, #128	; 0x80
 8003434:	58d3      	ldr	r3, [r2, r3]
 8003436:	4916      	ldr	r1, [pc, #88]	; (8003490 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 8003438:	2280      	movs	r2, #128	; 0x80
 800343a:	0312      	lsls	r2, r2, #12
 800343c:	4313      	orrs	r3, r2
 800343e:	2280      	movs	r2, #128	; 0x80
 8003440:	508b      	str	r3, [r1, r2]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	699a      	ldr	r2, [r3, #24]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2180      	movs	r1, #128	; 0x80
 800344e:	01c9      	lsls	r1, r1, #7
 8003450:	430a      	orrs	r2, r1
 8003452:	619a      	str	r2, [r3, #24]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	699a      	ldr	r2, [r3, #24]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2180      	movs	r1, #128	; 0x80
 8003460:	00c9      	lsls	r1, r1, #3
 8003462:	430a      	orrs	r2, r1
 8003464:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	22ff      	movs	r2, #255	; 0xff
 800346c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2229      	movs	r2, #41	; 0x29
 8003472:	2101      	movs	r1, #1
 8003474:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2228      	movs	r2, #40	; 0x28
 800347a:	2100      	movs	r1, #0
 800347c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	0018      	movs	r0, r3
 8003482:	46bd      	mov	sp, r7
 8003484:	b006      	add	sp, #24
 8003486:	bd80      	pop	{r7, pc}
 8003488:	fffffbff 	.word	0xfffffbff
 800348c:	40002800 	.word	0x40002800
 8003490:	40021800 	.word	0x40021800

08003494 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034a2:	2204      	movs	r2, #4
 80034a4:	4013      	ands	r3, r2
 80034a6:	d00b      	beq.n	80034c0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2104      	movs	r1, #4
 80034b4:	430a      	orrs	r2, r1
 80034b6:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	0018      	movs	r0, r3
 80034bc:	f000 f808 	bl	80034d0 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2229      	movs	r2, #41	; 0x29
 80034c4:	2101      	movs	r1, #1
 80034c6:	5499      	strb	r1, [r3, r2]
}
 80034c8:	46c0      	nop			; (mov r8, r8)
 80034ca:	46bd      	mov	sp, r7
 80034cc:	b002      	add	sp, #8
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80034d8:	46c0      	nop			; (mov r8, r8)
 80034da:	46bd      	mov	sp, r7
 80034dc:	b002      	add	sp, #8
 80034de:	bd80      	pop	{r7, pc}

080034e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e04a      	b.n	8003588 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	223d      	movs	r2, #61	; 0x3d
 80034f6:	5c9b      	ldrb	r3, [r3, r2]
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d107      	bne.n	800350e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	223c      	movs	r2, #60	; 0x3c
 8003502:	2100      	movs	r1, #0
 8003504:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	0018      	movs	r0, r3
 800350a:	f7fd fdbb 	bl	8001084 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	223d      	movs	r2, #61	; 0x3d
 8003512:	2102      	movs	r1, #2
 8003514:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	3304      	adds	r3, #4
 800351e:	0019      	movs	r1, r3
 8003520:	0010      	movs	r0, r2
 8003522:	f000 fa09 	bl	8003938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2248      	movs	r2, #72	; 0x48
 800352a:	2101      	movs	r1, #1
 800352c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	223e      	movs	r2, #62	; 0x3e
 8003532:	2101      	movs	r1, #1
 8003534:	5499      	strb	r1, [r3, r2]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	223f      	movs	r2, #63	; 0x3f
 800353a:	2101      	movs	r1, #1
 800353c:	5499      	strb	r1, [r3, r2]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2240      	movs	r2, #64	; 0x40
 8003542:	2101      	movs	r1, #1
 8003544:	5499      	strb	r1, [r3, r2]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2241      	movs	r2, #65	; 0x41
 800354a:	2101      	movs	r1, #1
 800354c:	5499      	strb	r1, [r3, r2]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2242      	movs	r2, #66	; 0x42
 8003552:	2101      	movs	r1, #1
 8003554:	5499      	strb	r1, [r3, r2]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2243      	movs	r2, #67	; 0x43
 800355a:	2101      	movs	r1, #1
 800355c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2244      	movs	r2, #68	; 0x44
 8003562:	2101      	movs	r1, #1
 8003564:	5499      	strb	r1, [r3, r2]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2245      	movs	r2, #69	; 0x45
 800356a:	2101      	movs	r1, #1
 800356c:	5499      	strb	r1, [r3, r2]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2246      	movs	r2, #70	; 0x46
 8003572:	2101      	movs	r1, #1
 8003574:	5499      	strb	r1, [r3, r2]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2247      	movs	r2, #71	; 0x47
 800357a:	2101      	movs	r1, #1
 800357c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	223d      	movs	r2, #61	; 0x3d
 8003582:	2101      	movs	r1, #1
 8003584:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	0018      	movs	r0, r3
 800358a:	46bd      	mov	sp, r7
 800358c:	b002      	add	sp, #8
 800358e:	bd80      	pop	{r7, pc}

08003590 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	223d      	movs	r2, #61	; 0x3d
 800359c:	5c9b      	ldrb	r3, [r3, r2]
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d001      	beq.n	80035a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e03d      	b.n	8003624 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	223d      	movs	r2, #61	; 0x3d
 80035ac:	2102      	movs	r1, #2
 80035ae:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68da      	ldr	r2, [r3, #12]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2101      	movs	r1, #1
 80035bc:	430a      	orrs	r2, r1
 80035be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a19      	ldr	r2, [pc, #100]	; (800362c <HAL_TIM_Base_Start_IT+0x9c>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d00a      	beq.n	80035e0 <HAL_TIM_Base_Start_IT+0x50>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	2380      	movs	r3, #128	; 0x80
 80035d0:	05db      	lsls	r3, r3, #23
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d004      	beq.n	80035e0 <HAL_TIM_Base_Start_IT+0x50>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a15      	ldr	r2, [pc, #84]	; (8003630 <HAL_TIM_Base_Start_IT+0xa0>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d116      	bne.n	800360e <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	4a13      	ldr	r2, [pc, #76]	; (8003634 <HAL_TIM_Base_Start_IT+0xa4>)
 80035e8:	4013      	ands	r3, r2
 80035ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2b06      	cmp	r3, #6
 80035f0:	d016      	beq.n	8003620 <HAL_TIM_Base_Start_IT+0x90>
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	2380      	movs	r3, #128	; 0x80
 80035f6:	025b      	lsls	r3, r3, #9
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d011      	beq.n	8003620 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2101      	movs	r1, #1
 8003608:	430a      	orrs	r2, r1
 800360a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800360c:	e008      	b.n	8003620 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2101      	movs	r1, #1
 800361a:	430a      	orrs	r2, r1
 800361c:	601a      	str	r2, [r3, #0]
 800361e:	e000      	b.n	8003622 <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003620:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	0018      	movs	r0, r3
 8003626:	46bd      	mov	sp, r7
 8003628:	b004      	add	sp, #16
 800362a:	bd80      	pop	{r7, pc}
 800362c:	40012c00 	.word	0x40012c00
 8003630:	40000400 	.word	0x40000400
 8003634:	00010007 	.word	0x00010007

08003638 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68da      	ldr	r2, [r3, #12]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2101      	movs	r1, #1
 800364c:	438a      	bics	r2, r1
 800364e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	4a0d      	ldr	r2, [pc, #52]	; (800368c <HAL_TIM_Base_Stop_IT+0x54>)
 8003658:	4013      	ands	r3, r2
 800365a:	d10d      	bne.n	8003678 <HAL_TIM_Base_Stop_IT+0x40>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	4a0b      	ldr	r2, [pc, #44]	; (8003690 <HAL_TIM_Base_Stop_IT+0x58>)
 8003664:	4013      	ands	r3, r2
 8003666:	d107      	bne.n	8003678 <HAL_TIM_Base_Stop_IT+0x40>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2101      	movs	r1, #1
 8003674:	438a      	bics	r2, r1
 8003676:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	223d      	movs	r2, #61	; 0x3d
 800367c:	2101      	movs	r1, #1
 800367e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	0018      	movs	r0, r3
 8003684:	46bd      	mov	sp, r7
 8003686:	b002      	add	sp, #8
 8003688:	bd80      	pop	{r7, pc}
 800368a:	46c0      	nop			; (mov r8, r8)
 800368c:	00001111 	.word	0x00001111
 8003690:	00000444 	.word	0x00000444

08003694 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	2202      	movs	r2, #2
 80036a4:	4013      	ands	r3, r2
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d124      	bne.n	80036f4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	2202      	movs	r2, #2
 80036b2:	4013      	ands	r3, r2
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d11d      	bne.n	80036f4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2203      	movs	r2, #3
 80036be:	4252      	negs	r2, r2
 80036c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	2203      	movs	r2, #3
 80036d0:	4013      	ands	r3, r2
 80036d2:	d004      	beq.n	80036de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	0018      	movs	r0, r3
 80036d8:	f000 f916 	bl	8003908 <HAL_TIM_IC_CaptureCallback>
 80036dc:	e007      	b.n	80036ee <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	0018      	movs	r0, r3
 80036e2:	f000 f909 	bl	80038f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	0018      	movs	r0, r3
 80036ea:	f000 f915 	bl	8003918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	2204      	movs	r2, #4
 80036fc:	4013      	ands	r3, r2
 80036fe:	2b04      	cmp	r3, #4
 8003700:	d125      	bne.n	800374e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	2204      	movs	r2, #4
 800370a:	4013      	ands	r3, r2
 800370c:	2b04      	cmp	r3, #4
 800370e:	d11e      	bne.n	800374e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2205      	movs	r2, #5
 8003716:	4252      	negs	r2, r2
 8003718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2202      	movs	r2, #2
 800371e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	699a      	ldr	r2, [r3, #24]
 8003726:	23c0      	movs	r3, #192	; 0xc0
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	4013      	ands	r3, r2
 800372c:	d004      	beq.n	8003738 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	0018      	movs	r0, r3
 8003732:	f000 f8e9 	bl	8003908 <HAL_TIM_IC_CaptureCallback>
 8003736:	e007      	b.n	8003748 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	0018      	movs	r0, r3
 800373c:	f000 f8dc 	bl	80038f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	0018      	movs	r0, r3
 8003744:	f000 f8e8 	bl	8003918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	2208      	movs	r2, #8
 8003756:	4013      	ands	r3, r2
 8003758:	2b08      	cmp	r3, #8
 800375a:	d124      	bne.n	80037a6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	2208      	movs	r2, #8
 8003764:	4013      	ands	r3, r2
 8003766:	2b08      	cmp	r3, #8
 8003768:	d11d      	bne.n	80037a6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2209      	movs	r2, #9
 8003770:	4252      	negs	r2, r2
 8003772:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2204      	movs	r2, #4
 8003778:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	69db      	ldr	r3, [r3, #28]
 8003780:	2203      	movs	r2, #3
 8003782:	4013      	ands	r3, r2
 8003784:	d004      	beq.n	8003790 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	0018      	movs	r0, r3
 800378a:	f000 f8bd 	bl	8003908 <HAL_TIM_IC_CaptureCallback>
 800378e:	e007      	b.n	80037a0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	0018      	movs	r0, r3
 8003794:	f000 f8b0 	bl	80038f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	0018      	movs	r0, r3
 800379c:	f000 f8bc 	bl	8003918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	2210      	movs	r2, #16
 80037ae:	4013      	ands	r3, r2
 80037b0:	2b10      	cmp	r3, #16
 80037b2:	d125      	bne.n	8003800 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	2210      	movs	r2, #16
 80037bc:	4013      	ands	r3, r2
 80037be:	2b10      	cmp	r3, #16
 80037c0:	d11e      	bne.n	8003800 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2211      	movs	r2, #17
 80037c8:	4252      	negs	r2, r2
 80037ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2208      	movs	r2, #8
 80037d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	69da      	ldr	r2, [r3, #28]
 80037d8:	23c0      	movs	r3, #192	; 0xc0
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	4013      	ands	r3, r2
 80037de:	d004      	beq.n	80037ea <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	0018      	movs	r0, r3
 80037e4:	f000 f890 	bl	8003908 <HAL_TIM_IC_CaptureCallback>
 80037e8:	e007      	b.n	80037fa <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	0018      	movs	r0, r3
 80037ee:	f000 f883 	bl	80038f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	0018      	movs	r0, r3
 80037f6:	f000 f88f 	bl	8003918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	2201      	movs	r2, #1
 8003808:	4013      	ands	r3, r2
 800380a:	2b01      	cmp	r3, #1
 800380c:	d10f      	bne.n	800382e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	2201      	movs	r2, #1
 8003816:	4013      	ands	r3, r2
 8003818:	2b01      	cmp	r3, #1
 800381a:	d108      	bne.n	800382e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2202      	movs	r2, #2
 8003822:	4252      	negs	r2, r2
 8003824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	0018      	movs	r0, r3
 800382a:	f7fd fb8f 	bl	8000f4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	2280      	movs	r2, #128	; 0x80
 8003836:	4013      	ands	r3, r2
 8003838:	2b80      	cmp	r3, #128	; 0x80
 800383a:	d10f      	bne.n	800385c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	2280      	movs	r2, #128	; 0x80
 8003844:	4013      	ands	r3, r2
 8003846:	2b80      	cmp	r3, #128	; 0x80
 8003848:	d108      	bne.n	800385c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2281      	movs	r2, #129	; 0x81
 8003850:	4252      	negs	r2, r2
 8003852:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	0018      	movs	r0, r3
 8003858:	f000 f8ec 	bl	8003a34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	691a      	ldr	r2, [r3, #16]
 8003862:	2380      	movs	r3, #128	; 0x80
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	401a      	ands	r2, r3
 8003868:	2380      	movs	r3, #128	; 0x80
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	429a      	cmp	r2, r3
 800386e:	d10e      	bne.n	800388e <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	2280      	movs	r2, #128	; 0x80
 8003878:	4013      	ands	r3, r2
 800387a:	2b80      	cmp	r3, #128	; 0x80
 800387c:	d107      	bne.n	800388e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a1c      	ldr	r2, [pc, #112]	; (80038f4 <HAL_TIM_IRQHandler+0x260>)
 8003884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	0018      	movs	r0, r3
 800388a:	f000 f8db 	bl	8003a44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	2240      	movs	r2, #64	; 0x40
 8003896:	4013      	ands	r3, r2
 8003898:	2b40      	cmp	r3, #64	; 0x40
 800389a:	d10f      	bne.n	80038bc <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	2240      	movs	r2, #64	; 0x40
 80038a4:	4013      	ands	r3, r2
 80038a6:	2b40      	cmp	r3, #64	; 0x40
 80038a8:	d108      	bne.n	80038bc <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2241      	movs	r2, #65	; 0x41
 80038b0:	4252      	negs	r2, r2
 80038b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	0018      	movs	r0, r3
 80038b8:	f000 f836 	bl	8003928 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	2220      	movs	r2, #32
 80038c4:	4013      	ands	r3, r2
 80038c6:	2b20      	cmp	r3, #32
 80038c8:	d10f      	bne.n	80038ea <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	2220      	movs	r2, #32
 80038d2:	4013      	ands	r3, r2
 80038d4:	2b20      	cmp	r3, #32
 80038d6:	d108      	bne.n	80038ea <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2221      	movs	r2, #33	; 0x21
 80038de:	4252      	negs	r2, r2
 80038e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	0018      	movs	r0, r3
 80038e6:	f000 f89d 	bl	8003a24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038ea:	46c0      	nop			; (mov r8, r8)
 80038ec:	46bd      	mov	sp, r7
 80038ee:	b002      	add	sp, #8
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	46c0      	nop			; (mov r8, r8)
 80038f4:	fffffeff 	.word	0xfffffeff

080038f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003900:	46c0      	nop			; (mov r8, r8)
 8003902:	46bd      	mov	sp, r7
 8003904:	b002      	add	sp, #8
 8003906:	bd80      	pop	{r7, pc}

08003908 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003910:	46c0      	nop			; (mov r8, r8)
 8003912:	46bd      	mov	sp, r7
 8003914:	b002      	add	sp, #8
 8003916:	bd80      	pop	{r7, pc}

08003918 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003920:	46c0      	nop			; (mov r8, r8)
 8003922:	46bd      	mov	sp, r7
 8003924:	b002      	add	sp, #8
 8003926:	bd80      	pop	{r7, pc}

08003928 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003930:	46c0      	nop			; (mov r8, r8)
 8003932:	46bd      	mov	sp, r7
 8003934:	b002      	add	sp, #8
 8003936:	bd80      	pop	{r7, pc}

08003938 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a30      	ldr	r2, [pc, #192]	; (8003a0c <TIM_Base_SetConfig+0xd4>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d008      	beq.n	8003962 <TIM_Base_SetConfig+0x2a>
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	2380      	movs	r3, #128	; 0x80
 8003954:	05db      	lsls	r3, r3, #23
 8003956:	429a      	cmp	r2, r3
 8003958:	d003      	beq.n	8003962 <TIM_Base_SetConfig+0x2a>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a2c      	ldr	r2, [pc, #176]	; (8003a10 <TIM_Base_SetConfig+0xd8>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d108      	bne.n	8003974 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2270      	movs	r2, #112	; 0x70
 8003966:	4393      	bics	r3, r2
 8003968:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	4313      	orrs	r3, r2
 8003972:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a25      	ldr	r2, [pc, #148]	; (8003a0c <TIM_Base_SetConfig+0xd4>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d014      	beq.n	80039a6 <TIM_Base_SetConfig+0x6e>
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	2380      	movs	r3, #128	; 0x80
 8003980:	05db      	lsls	r3, r3, #23
 8003982:	429a      	cmp	r2, r3
 8003984:	d00f      	beq.n	80039a6 <TIM_Base_SetConfig+0x6e>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a21      	ldr	r2, [pc, #132]	; (8003a10 <TIM_Base_SetConfig+0xd8>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d00b      	beq.n	80039a6 <TIM_Base_SetConfig+0x6e>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a20      	ldr	r2, [pc, #128]	; (8003a14 <TIM_Base_SetConfig+0xdc>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d007      	beq.n	80039a6 <TIM_Base_SetConfig+0x6e>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a1f      	ldr	r2, [pc, #124]	; (8003a18 <TIM_Base_SetConfig+0xe0>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d003      	beq.n	80039a6 <TIM_Base_SetConfig+0x6e>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a1e      	ldr	r2, [pc, #120]	; (8003a1c <TIM_Base_SetConfig+0xe4>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d108      	bne.n	80039b8 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	4a1d      	ldr	r2, [pc, #116]	; (8003a20 <TIM_Base_SetConfig+0xe8>)
 80039aa:	4013      	ands	r3, r2
 80039ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2280      	movs	r2, #128	; 0x80
 80039bc:	4393      	bics	r3, r2
 80039be:	001a      	movs	r2, r3
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	695b      	ldr	r3, [r3, #20]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	689a      	ldr	r2, [r3, #8]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a0a      	ldr	r2, [pc, #40]	; (8003a0c <TIM_Base_SetConfig+0xd4>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d007      	beq.n	80039f6 <TIM_Base_SetConfig+0xbe>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a0b      	ldr	r2, [pc, #44]	; (8003a18 <TIM_Base_SetConfig+0xe0>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d003      	beq.n	80039f6 <TIM_Base_SetConfig+0xbe>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a0a      	ldr	r2, [pc, #40]	; (8003a1c <TIM_Base_SetConfig+0xe4>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d103      	bne.n	80039fe <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	691a      	ldr	r2, [r3, #16]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	615a      	str	r2, [r3, #20]
}
 8003a04:	46c0      	nop			; (mov r8, r8)
 8003a06:	46bd      	mov	sp, r7
 8003a08:	b004      	add	sp, #16
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	40012c00 	.word	0x40012c00
 8003a10:	40000400 	.word	0x40000400
 8003a14:	40002000 	.word	0x40002000
 8003a18:	40014400 	.word	0x40014400
 8003a1c:	40014800 	.word	0x40014800
 8003a20:	fffffcff 	.word	0xfffffcff

08003a24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a2c:	46c0      	nop			; (mov r8, r8)
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	b002      	add	sp, #8
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a3c:	46c0      	nop			; (mov r8, r8)
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	b002      	add	sp, #8
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003a4c:	46c0      	nop			; (mov r8, r8)
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	b002      	add	sp, #8
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e046      	b.n	8003af4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2288      	movs	r2, #136	; 0x88
 8003a6a:	589b      	ldr	r3, [r3, r2]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d107      	bne.n	8003a80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2284      	movs	r2, #132	; 0x84
 8003a74:	2100      	movs	r1, #0
 8003a76:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	0018      	movs	r0, r3
 8003a7c:	f7fd fb48 	bl	8001110 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2288      	movs	r2, #136	; 0x88
 8003a84:	2124      	movs	r1, #36	; 0x24
 8003a86:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2101      	movs	r1, #1
 8003a94:	438a      	bics	r2, r1
 8003a96:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	0018      	movs	r0, r3
 8003a9c:	f000 fc12 	bl	80042c4 <UART_SetConfig>
 8003aa0:	0003      	movs	r3, r0
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d101      	bne.n	8003aaa <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e024      	b.n	8003af4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	0018      	movs	r0, r3
 8003ab6:	f000 fe7d 	bl	80047b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	490d      	ldr	r1, [pc, #52]	; (8003afc <HAL_UART_Init+0xa8>)
 8003ac6:	400a      	ands	r2, r1
 8003ac8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	212a      	movs	r1, #42	; 0x2a
 8003ad6:	438a      	bics	r2, r1
 8003ad8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2101      	movs	r1, #1
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	0018      	movs	r0, r3
 8003aee:	f000 ff15 	bl	800491c <UART_CheckIdleState>
 8003af2:	0003      	movs	r3, r0
}
 8003af4:	0018      	movs	r0, r3
 8003af6:	46bd      	mov	sp, r7
 8003af8:	b002      	add	sp, #8
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	ffffb7ff 	.word	0xffffb7ff

08003b00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b08a      	sub	sp, #40	; 0x28
 8003b04:	af02      	add	r7, sp, #8
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	603b      	str	r3, [r7, #0]
 8003b0c:	1dbb      	adds	r3, r7, #6
 8003b0e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2288      	movs	r2, #136	; 0x88
 8003b14:	589b      	ldr	r3, [r3, r2]
 8003b16:	2b20      	cmp	r3, #32
 8003b18:	d000      	beq.n	8003b1c <HAL_UART_Transmit+0x1c>
 8003b1a:	e088      	b.n	8003c2e <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d003      	beq.n	8003b2a <HAL_UART_Transmit+0x2a>
 8003b22:	1dbb      	adds	r3, r7, #6
 8003b24:	881b      	ldrh	r3, [r3, #0]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e080      	b.n	8003c30 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	2380      	movs	r3, #128	; 0x80
 8003b34:	015b      	lsls	r3, r3, #5
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d109      	bne.n	8003b4e <HAL_UART_Transmit+0x4e>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d105      	bne.n	8003b4e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	2201      	movs	r2, #1
 8003b46:	4013      	ands	r3, r2
 8003b48:	d001      	beq.n	8003b4e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e070      	b.n	8003c30 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2290      	movs	r2, #144	; 0x90
 8003b52:	2100      	movs	r1, #0
 8003b54:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2288      	movs	r2, #136	; 0x88
 8003b5a:	2121      	movs	r1, #33	; 0x21
 8003b5c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b5e:	f7fd fd2d 	bl	80015bc <HAL_GetTick>
 8003b62:	0003      	movs	r3, r0
 8003b64:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	1dba      	adds	r2, r7, #6
 8003b6a:	2154      	movs	r1, #84	; 0x54
 8003b6c:	8812      	ldrh	r2, [r2, #0]
 8003b6e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	1dba      	adds	r2, r7, #6
 8003b74:	2156      	movs	r1, #86	; 0x56
 8003b76:	8812      	ldrh	r2, [r2, #0]
 8003b78:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	689a      	ldr	r2, [r3, #8]
 8003b7e:	2380      	movs	r3, #128	; 0x80
 8003b80:	015b      	lsls	r3, r3, #5
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d108      	bne.n	8003b98 <HAL_UART_Transmit+0x98>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d104      	bne.n	8003b98 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	61bb      	str	r3, [r7, #24]
 8003b96:	e003      	b.n	8003ba0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ba0:	e02c      	b.n	8003bfc <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	0013      	movs	r3, r2
 8003bac:	2200      	movs	r2, #0
 8003bae:	2180      	movs	r1, #128	; 0x80
 8003bb0:	f000 ff02 	bl	80049b8 <UART_WaitOnFlagUntilTimeout>
 8003bb4:	1e03      	subs	r3, r0, #0
 8003bb6:	d001      	beq.n	8003bbc <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e039      	b.n	8003c30 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10b      	bne.n	8003bda <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	881b      	ldrh	r3, [r3, #0]
 8003bc6:	001a      	movs	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	05d2      	lsls	r2, r2, #23
 8003bce:	0dd2      	lsrs	r2, r2, #23
 8003bd0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	3302      	adds	r3, #2
 8003bd6:	61bb      	str	r3, [r7, #24]
 8003bd8:	e007      	b.n	8003bea <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	781a      	ldrb	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	3301      	adds	r3, #1
 8003be8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2256      	movs	r2, #86	; 0x56
 8003bee:	5a9b      	ldrh	r3, [r3, r2]
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	b299      	uxth	r1, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2256      	movs	r2, #86	; 0x56
 8003bfa:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2256      	movs	r2, #86	; 0x56
 8003c00:	5a9b      	ldrh	r3, [r3, r2]
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1cc      	bne.n	8003ba2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	9300      	str	r3, [sp, #0]
 8003c10:	0013      	movs	r3, r2
 8003c12:	2200      	movs	r2, #0
 8003c14:	2140      	movs	r1, #64	; 0x40
 8003c16:	f000 fecf 	bl	80049b8 <UART_WaitOnFlagUntilTimeout>
 8003c1a:	1e03      	subs	r3, r0, #0
 8003c1c:	d001      	beq.n	8003c22 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e006      	b.n	8003c30 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2288      	movs	r2, #136	; 0x88
 8003c26:	2120      	movs	r1, #32
 8003c28:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	e000      	b.n	8003c30 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8003c2e:	2302      	movs	r3, #2
  }
}
 8003c30:	0018      	movs	r0, r3
 8003c32:	46bd      	mov	sp, r7
 8003c34:	b008      	add	sp, #32
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c38:	b5b0      	push	{r4, r5, r7, lr}
 8003c3a:	b0aa      	sub	sp, #168	; 0xa8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	22a4      	movs	r2, #164	; 0xa4
 8003c48:	18b9      	adds	r1, r7, r2
 8003c4a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	20a0      	movs	r0, #160	; 0xa0
 8003c54:	1839      	adds	r1, r7, r0
 8003c56:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	249c      	movs	r4, #156	; 0x9c
 8003c60:	1939      	adds	r1, r7, r4
 8003c62:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003c64:	0011      	movs	r1, r2
 8003c66:	18bb      	adds	r3, r7, r2
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4aa2      	ldr	r2, [pc, #648]	; (8003ef4 <HAL_UART_IRQHandler+0x2bc>)
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	2298      	movs	r2, #152	; 0x98
 8003c70:	18bd      	adds	r5, r7, r2
 8003c72:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8003c74:	18bb      	adds	r3, r7, r2
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d11a      	bne.n	8003cb2 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003c7c:	187b      	adds	r3, r7, r1
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2220      	movs	r2, #32
 8003c82:	4013      	ands	r3, r2
 8003c84:	d015      	beq.n	8003cb2 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003c86:	183b      	adds	r3, r7, r0
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	d105      	bne.n	8003c9c <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003c90:	193b      	adds	r3, r7, r4
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	2380      	movs	r3, #128	; 0x80
 8003c96:	055b      	lsls	r3, r3, #21
 8003c98:	4013      	ands	r3, r2
 8003c9a:	d00a      	beq.n	8003cb2 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d100      	bne.n	8003ca6 <HAL_UART_IRQHandler+0x6e>
 8003ca4:	e2dc      	b.n	8004260 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	0010      	movs	r0, r2
 8003cae:	4798      	blx	r3
      }
      return;
 8003cb0:	e2d6      	b.n	8004260 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003cb2:	2398      	movs	r3, #152	; 0x98
 8003cb4:	18fb      	adds	r3, r7, r3
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d100      	bne.n	8003cbe <HAL_UART_IRQHandler+0x86>
 8003cbc:	e122      	b.n	8003f04 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003cbe:	239c      	movs	r3, #156	; 0x9c
 8003cc0:	18fb      	adds	r3, r7, r3
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a8c      	ldr	r2, [pc, #560]	; (8003ef8 <HAL_UART_IRQHandler+0x2c0>)
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	d106      	bne.n	8003cd8 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003cca:	23a0      	movs	r3, #160	; 0xa0
 8003ccc:	18fb      	adds	r3, r7, r3
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a8a      	ldr	r2, [pc, #552]	; (8003efc <HAL_UART_IRQHandler+0x2c4>)
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	d100      	bne.n	8003cd8 <HAL_UART_IRQHandler+0xa0>
 8003cd6:	e115      	b.n	8003f04 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003cd8:	23a4      	movs	r3, #164	; 0xa4
 8003cda:	18fb      	adds	r3, r7, r3
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	d012      	beq.n	8003d0a <HAL_UART_IRQHandler+0xd2>
 8003ce4:	23a0      	movs	r3, #160	; 0xa0
 8003ce6:	18fb      	adds	r3, r7, r3
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	2380      	movs	r3, #128	; 0x80
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	4013      	ands	r3, r2
 8003cf0:	d00b      	beq.n	8003d0a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2290      	movs	r2, #144	; 0x90
 8003cfe:	589b      	ldr	r3, [r3, r2]
 8003d00:	2201      	movs	r2, #1
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2190      	movs	r1, #144	; 0x90
 8003d08:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d0a:	23a4      	movs	r3, #164	; 0xa4
 8003d0c:	18fb      	adds	r3, r7, r3
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2202      	movs	r2, #2
 8003d12:	4013      	ands	r3, r2
 8003d14:	d011      	beq.n	8003d3a <HAL_UART_IRQHandler+0x102>
 8003d16:	239c      	movs	r3, #156	; 0x9c
 8003d18:	18fb      	adds	r3, r7, r3
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	4013      	ands	r3, r2
 8003d20:	d00b      	beq.n	8003d3a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2202      	movs	r2, #2
 8003d28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2290      	movs	r2, #144	; 0x90
 8003d2e:	589b      	ldr	r3, [r3, r2]
 8003d30:	2204      	movs	r2, #4
 8003d32:	431a      	orrs	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2190      	movs	r1, #144	; 0x90
 8003d38:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d3a:	23a4      	movs	r3, #164	; 0xa4
 8003d3c:	18fb      	adds	r3, r7, r3
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2204      	movs	r2, #4
 8003d42:	4013      	ands	r3, r2
 8003d44:	d011      	beq.n	8003d6a <HAL_UART_IRQHandler+0x132>
 8003d46:	239c      	movs	r3, #156	; 0x9c
 8003d48:	18fb      	adds	r3, r7, r3
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	4013      	ands	r3, r2
 8003d50:	d00b      	beq.n	8003d6a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2204      	movs	r2, #4
 8003d58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2290      	movs	r2, #144	; 0x90
 8003d5e:	589b      	ldr	r3, [r3, r2]
 8003d60:	2202      	movs	r2, #2
 8003d62:	431a      	orrs	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2190      	movs	r1, #144	; 0x90
 8003d68:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003d6a:	23a4      	movs	r3, #164	; 0xa4
 8003d6c:	18fb      	adds	r3, r7, r3
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2208      	movs	r2, #8
 8003d72:	4013      	ands	r3, r2
 8003d74:	d017      	beq.n	8003da6 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003d76:	23a0      	movs	r3, #160	; 0xa0
 8003d78:	18fb      	adds	r3, r7, r3
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	4013      	ands	r3, r2
 8003d80:	d105      	bne.n	8003d8e <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003d82:	239c      	movs	r3, #156	; 0x9c
 8003d84:	18fb      	adds	r3, r7, r3
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a5b      	ldr	r2, [pc, #364]	; (8003ef8 <HAL_UART_IRQHandler+0x2c0>)
 8003d8a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003d8c:	d00b      	beq.n	8003da6 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2208      	movs	r2, #8
 8003d94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2290      	movs	r2, #144	; 0x90
 8003d9a:	589b      	ldr	r3, [r3, r2]
 8003d9c:	2208      	movs	r2, #8
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2190      	movs	r1, #144	; 0x90
 8003da4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003da6:	23a4      	movs	r3, #164	; 0xa4
 8003da8:	18fb      	adds	r3, r7, r3
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	2380      	movs	r3, #128	; 0x80
 8003dae:	011b      	lsls	r3, r3, #4
 8003db0:	4013      	ands	r3, r2
 8003db2:	d013      	beq.n	8003ddc <HAL_UART_IRQHandler+0x1a4>
 8003db4:	23a0      	movs	r3, #160	; 0xa0
 8003db6:	18fb      	adds	r3, r7, r3
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	2380      	movs	r3, #128	; 0x80
 8003dbc:	04db      	lsls	r3, r3, #19
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	d00c      	beq.n	8003ddc <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2280      	movs	r2, #128	; 0x80
 8003dc8:	0112      	lsls	r2, r2, #4
 8003dca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2290      	movs	r2, #144	; 0x90
 8003dd0:	589b      	ldr	r3, [r3, r2]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	431a      	orrs	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2190      	movs	r1, #144	; 0x90
 8003dda:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2290      	movs	r2, #144	; 0x90
 8003de0:	589b      	ldr	r3, [r3, r2]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d100      	bne.n	8003de8 <HAL_UART_IRQHandler+0x1b0>
 8003de6:	e23d      	b.n	8004264 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003de8:	23a4      	movs	r3, #164	; 0xa4
 8003dea:	18fb      	adds	r3, r7, r3
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2220      	movs	r2, #32
 8003df0:	4013      	ands	r3, r2
 8003df2:	d015      	beq.n	8003e20 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003df4:	23a0      	movs	r3, #160	; 0xa0
 8003df6:	18fb      	adds	r3, r7, r3
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	d106      	bne.n	8003e0e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003e00:	239c      	movs	r3, #156	; 0x9c
 8003e02:	18fb      	adds	r3, r7, r3
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	2380      	movs	r3, #128	; 0x80
 8003e08:	055b      	lsls	r3, r3, #21
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	d008      	beq.n	8003e20 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d004      	beq.n	8003e20 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	0010      	movs	r0, r2
 8003e1e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2290      	movs	r2, #144	; 0x90
 8003e24:	589b      	ldr	r3, [r3, r2]
 8003e26:	2194      	movs	r1, #148	; 0x94
 8003e28:	187a      	adds	r2, r7, r1
 8003e2a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	2240      	movs	r2, #64	; 0x40
 8003e34:	4013      	ands	r3, r2
 8003e36:	2b40      	cmp	r3, #64	; 0x40
 8003e38:	d004      	beq.n	8003e44 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003e3a:	187b      	adds	r3, r7, r1
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2228      	movs	r2, #40	; 0x28
 8003e40:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e42:	d04c      	beq.n	8003ede <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	0018      	movs	r0, r3
 8003e48:	f000 ff64 	bl	8004d14 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	2240      	movs	r2, #64	; 0x40
 8003e54:	4013      	ands	r3, r2
 8003e56:	2b40      	cmp	r3, #64	; 0x40
 8003e58:	d13c      	bne.n	8003ed4 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e5a:	f3ef 8310 	mrs	r3, PRIMASK
 8003e5e:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003e60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e62:	2090      	movs	r0, #144	; 0x90
 8003e64:	183a      	adds	r2, r7, r0
 8003e66:	6013      	str	r3, [r2, #0]
 8003e68:	2301      	movs	r3, #1
 8003e6a:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e6e:	f383 8810 	msr	PRIMASK, r3
}
 8003e72:	46c0      	nop			; (mov r8, r8)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	689a      	ldr	r2, [r3, #8]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2140      	movs	r1, #64	; 0x40
 8003e80:	438a      	bics	r2, r1
 8003e82:	609a      	str	r2, [r3, #8]
 8003e84:	183b      	adds	r3, r7, r0
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e8c:	f383 8810 	msr	PRIMASK, r3
}
 8003e90:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2280      	movs	r2, #128	; 0x80
 8003e96:	589b      	ldr	r3, [r3, r2]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d016      	beq.n	8003eca <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2280      	movs	r2, #128	; 0x80
 8003ea0:	589b      	ldr	r3, [r3, r2]
 8003ea2:	4a17      	ldr	r2, [pc, #92]	; (8003f00 <HAL_UART_IRQHandler+0x2c8>)
 8003ea4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2280      	movs	r2, #128	; 0x80
 8003eaa:	589b      	ldr	r3, [r3, r2]
 8003eac:	0018      	movs	r0, r3
 8003eae:	f7fd fddf 	bl	8001a70 <HAL_DMA_Abort_IT>
 8003eb2:	1e03      	subs	r3, r0, #0
 8003eb4:	d01c      	beq.n	8003ef0 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2280      	movs	r2, #128	; 0x80
 8003eba:	589b      	ldr	r3, [r3, r2]
 8003ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	2180      	movs	r1, #128	; 0x80
 8003ec2:	5852      	ldr	r2, [r2, r1]
 8003ec4:	0010      	movs	r0, r2
 8003ec6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec8:	e012      	b.n	8003ef0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	0018      	movs	r0, r3
 8003ece:	f000 f9f1 	bl	80042b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed2:	e00d      	b.n	8003ef0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	0018      	movs	r0, r3
 8003ed8:	f000 f9ec 	bl	80042b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003edc:	e008      	b.n	8003ef0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	0018      	movs	r0, r3
 8003ee2:	f000 f9e7 	bl	80042b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2290      	movs	r2, #144	; 0x90
 8003eea:	2100      	movs	r1, #0
 8003eec:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003eee:	e1b9      	b.n	8004264 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef0:	46c0      	nop			; (mov r8, r8)
    return;
 8003ef2:	e1b7      	b.n	8004264 <HAL_UART_IRQHandler+0x62c>
 8003ef4:	0000080f 	.word	0x0000080f
 8003ef8:	10000001 	.word	0x10000001
 8003efc:	04000120 	.word	0x04000120
 8003f00:	08004fd9 	.word	0x08004fd9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d000      	beq.n	8003f0e <HAL_UART_IRQHandler+0x2d6>
 8003f0c:	e13e      	b.n	800418c <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003f0e:	23a4      	movs	r3, #164	; 0xa4
 8003f10:	18fb      	adds	r3, r7, r3
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2210      	movs	r2, #16
 8003f16:	4013      	ands	r3, r2
 8003f18:	d100      	bne.n	8003f1c <HAL_UART_IRQHandler+0x2e4>
 8003f1a:	e137      	b.n	800418c <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003f1c:	23a0      	movs	r3, #160	; 0xa0
 8003f1e:	18fb      	adds	r3, r7, r3
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2210      	movs	r2, #16
 8003f24:	4013      	ands	r3, r2
 8003f26:	d100      	bne.n	8003f2a <HAL_UART_IRQHandler+0x2f2>
 8003f28:	e130      	b.n	800418c <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2210      	movs	r2, #16
 8003f30:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	2240      	movs	r2, #64	; 0x40
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	2b40      	cmp	r3, #64	; 0x40
 8003f3e:	d000      	beq.n	8003f42 <HAL_UART_IRQHandler+0x30a>
 8003f40:	e0a4      	b.n	800408c <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2280      	movs	r2, #128	; 0x80
 8003f46:	589b      	ldr	r3, [r3, r2]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	217e      	movs	r1, #126	; 0x7e
 8003f4e:	187b      	adds	r3, r7, r1
 8003f50:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003f52:	187b      	adds	r3, r7, r1
 8003f54:	881b      	ldrh	r3, [r3, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d100      	bne.n	8003f5c <HAL_UART_IRQHandler+0x324>
 8003f5a:	e185      	b.n	8004268 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	225c      	movs	r2, #92	; 0x5c
 8003f60:	5a9b      	ldrh	r3, [r3, r2]
 8003f62:	187a      	adds	r2, r7, r1
 8003f64:	8812      	ldrh	r2, [r2, #0]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d300      	bcc.n	8003f6c <HAL_UART_IRQHandler+0x334>
 8003f6a:	e17d      	b.n	8004268 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	187a      	adds	r2, r7, r1
 8003f70:	215e      	movs	r1, #94	; 0x5e
 8003f72:	8812      	ldrh	r2, [r2, #0]
 8003f74:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2280      	movs	r2, #128	; 0x80
 8003f7a:	589b      	ldr	r3, [r3, r2]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2220      	movs	r2, #32
 8003f82:	4013      	ands	r3, r2
 8003f84:	d170      	bne.n	8004068 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f86:	f3ef 8310 	mrs	r3, PRIMASK
 8003f8a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f8e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f90:	2301      	movs	r3, #1
 8003f92:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f96:	f383 8810 	msr	PRIMASK, r3
}
 8003f9a:	46c0      	nop			; (mov r8, r8)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	49b4      	ldr	r1, [pc, #720]	; (8004278 <HAL_UART_IRQHandler+0x640>)
 8003fa8:	400a      	ands	r2, r1
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fae:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb2:	f383 8810 	msr	PRIMASK, r3
}
 8003fb6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fb8:	f3ef 8310 	mrs	r3, PRIMASK
 8003fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fc0:	677b      	str	r3, [r7, #116]	; 0x74
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fc8:	f383 8810 	msr	PRIMASK, r3
}
 8003fcc:	46c0      	nop			; (mov r8, r8)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	689a      	ldr	r2, [r3, #8]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2101      	movs	r1, #1
 8003fda:	438a      	bics	r2, r1
 8003fdc:	609a      	str	r2, [r3, #8]
 8003fde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fe0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fe4:	f383 8810 	msr	PRIMASK, r3
}
 8003fe8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fea:	f3ef 8310 	mrs	r3, PRIMASK
 8003fee:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003ff0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ff2:	673b      	str	r3, [r7, #112]	; 0x70
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ffa:	f383 8810 	msr	PRIMASK, r3
}
 8003ffe:	46c0      	nop			; (mov r8, r8)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689a      	ldr	r2, [r3, #8]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2140      	movs	r1, #64	; 0x40
 800400c:	438a      	bics	r2, r1
 800400e:	609a      	str	r2, [r3, #8]
 8004010:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004012:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004014:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004016:	f383 8810 	msr	PRIMASK, r3
}
 800401a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	228c      	movs	r2, #140	; 0x8c
 8004020:	2120      	movs	r1, #32
 8004022:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800402a:	f3ef 8310 	mrs	r3, PRIMASK
 800402e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004030:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004032:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004034:	2301      	movs	r3, #1
 8004036:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004038:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800403a:	f383 8810 	msr	PRIMASK, r3
}
 800403e:	46c0      	nop			; (mov r8, r8)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2110      	movs	r1, #16
 800404c:	438a      	bics	r2, r1
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004052:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004054:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004056:	f383 8810 	msr	PRIMASK, r3
}
 800405a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2280      	movs	r2, #128	; 0x80
 8004060:	589b      	ldr	r3, [r3, r2]
 8004062:	0018      	movs	r0, r3
 8004064:	f7fd fca2 	bl	80019ac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2202      	movs	r2, #2
 800406c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	225c      	movs	r2, #92	; 0x5c
 8004072:	5a9a      	ldrh	r2, [r3, r2]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	215e      	movs	r1, #94	; 0x5e
 8004078:	5a5b      	ldrh	r3, [r3, r1]
 800407a:	b29b      	uxth	r3, r3
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	b29a      	uxth	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	0011      	movs	r1, r2
 8004084:	0018      	movs	r0, r3
 8004086:	f7fc fe35 	bl	8000cf4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800408a:	e0ed      	b.n	8004268 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	225c      	movs	r2, #92	; 0x5c
 8004090:	5a99      	ldrh	r1, [r3, r2]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	225e      	movs	r2, #94	; 0x5e
 8004096:	5a9b      	ldrh	r3, [r3, r2]
 8004098:	b29a      	uxth	r2, r3
 800409a:	208e      	movs	r0, #142	; 0x8e
 800409c:	183b      	adds	r3, r7, r0
 800409e:	1a8a      	subs	r2, r1, r2
 80040a0:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	225e      	movs	r2, #94	; 0x5e
 80040a6:	5a9b      	ldrh	r3, [r3, r2]
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d100      	bne.n	80040b0 <HAL_UART_IRQHandler+0x478>
 80040ae:	e0dd      	b.n	800426c <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80040b0:	183b      	adds	r3, r7, r0
 80040b2:	881b      	ldrh	r3, [r3, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d100      	bne.n	80040ba <HAL_UART_IRQHandler+0x482>
 80040b8:	e0d8      	b.n	800426c <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040ba:	f3ef 8310 	mrs	r3, PRIMASK
 80040be:	60fb      	str	r3, [r7, #12]
  return(result);
 80040c0:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80040c2:	2488      	movs	r4, #136	; 0x88
 80040c4:	193a      	adds	r2, r7, r4
 80040c6:	6013      	str	r3, [r2, #0]
 80040c8:	2301      	movs	r3, #1
 80040ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	f383 8810 	msr	PRIMASK, r3
}
 80040d2:	46c0      	nop			; (mov r8, r8)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4967      	ldr	r1, [pc, #412]	; (800427c <HAL_UART_IRQHandler+0x644>)
 80040e0:	400a      	ands	r2, r1
 80040e2:	601a      	str	r2, [r3, #0]
 80040e4:	193b      	adds	r3, r7, r4
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f383 8810 	msr	PRIMASK, r3
}
 80040f0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040f2:	f3ef 8310 	mrs	r3, PRIMASK
 80040f6:	61bb      	str	r3, [r7, #24]
  return(result);
 80040f8:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80040fa:	2484      	movs	r4, #132	; 0x84
 80040fc:	193a      	adds	r2, r7, r4
 80040fe:	6013      	str	r3, [r2, #0]
 8004100:	2301      	movs	r3, #1
 8004102:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	f383 8810 	msr	PRIMASK, r3
}
 800410a:	46c0      	nop			; (mov r8, r8)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	689a      	ldr	r2, [r3, #8]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	495a      	ldr	r1, [pc, #360]	; (8004280 <HAL_UART_IRQHandler+0x648>)
 8004118:	400a      	ands	r2, r1
 800411a:	609a      	str	r2, [r3, #8]
 800411c:	193b      	adds	r3, r7, r4
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004122:	6a3b      	ldr	r3, [r7, #32]
 8004124:	f383 8810 	msr	PRIMASK, r3
}
 8004128:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	228c      	movs	r2, #140	; 0x8c
 800412e:	2120      	movs	r1, #32
 8004130:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800413e:	f3ef 8310 	mrs	r3, PRIMASK
 8004142:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004144:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004146:	2480      	movs	r4, #128	; 0x80
 8004148:	193a      	adds	r2, r7, r4
 800414a:	6013      	str	r3, [r2, #0]
 800414c:	2301      	movs	r3, #1
 800414e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004152:	f383 8810 	msr	PRIMASK, r3
}
 8004156:	46c0      	nop			; (mov r8, r8)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2110      	movs	r1, #16
 8004164:	438a      	bics	r2, r1
 8004166:	601a      	str	r2, [r3, #0]
 8004168:	193b      	adds	r3, r7, r4
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800416e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004170:	f383 8810 	msr	PRIMASK, r3
}
 8004174:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2202      	movs	r2, #2
 800417a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800417c:	183b      	adds	r3, r7, r0
 800417e:	881a      	ldrh	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	0011      	movs	r1, r2
 8004184:	0018      	movs	r0, r3
 8004186:	f7fc fdb5 	bl	8000cf4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800418a:	e06f      	b.n	800426c <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800418c:	23a4      	movs	r3, #164	; 0xa4
 800418e:	18fb      	adds	r3, r7, r3
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	2380      	movs	r3, #128	; 0x80
 8004194:	035b      	lsls	r3, r3, #13
 8004196:	4013      	ands	r3, r2
 8004198:	d010      	beq.n	80041bc <HAL_UART_IRQHandler+0x584>
 800419a:	239c      	movs	r3, #156	; 0x9c
 800419c:	18fb      	adds	r3, r7, r3
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	2380      	movs	r3, #128	; 0x80
 80041a2:	03db      	lsls	r3, r3, #15
 80041a4:	4013      	ands	r3, r2
 80041a6:	d009      	beq.n	80041bc <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2280      	movs	r2, #128	; 0x80
 80041ae:	0352      	lsls	r2, r2, #13
 80041b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	0018      	movs	r0, r3
 80041b6:	f000 ff52 	bl	800505e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80041ba:	e05a      	b.n	8004272 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80041bc:	23a4      	movs	r3, #164	; 0xa4
 80041be:	18fb      	adds	r3, r7, r3
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2280      	movs	r2, #128	; 0x80
 80041c4:	4013      	ands	r3, r2
 80041c6:	d016      	beq.n	80041f6 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80041c8:	23a0      	movs	r3, #160	; 0xa0
 80041ca:	18fb      	adds	r3, r7, r3
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2280      	movs	r2, #128	; 0x80
 80041d0:	4013      	ands	r3, r2
 80041d2:	d106      	bne.n	80041e2 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80041d4:	239c      	movs	r3, #156	; 0x9c
 80041d6:	18fb      	adds	r3, r7, r3
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	2380      	movs	r3, #128	; 0x80
 80041dc:	041b      	lsls	r3, r3, #16
 80041de:	4013      	ands	r3, r2
 80041e0:	d009      	beq.n	80041f6 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d042      	beq.n	8004270 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	0010      	movs	r0, r2
 80041f2:	4798      	blx	r3
    }
    return;
 80041f4:	e03c      	b.n	8004270 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80041f6:	23a4      	movs	r3, #164	; 0xa4
 80041f8:	18fb      	adds	r3, r7, r3
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2240      	movs	r2, #64	; 0x40
 80041fe:	4013      	ands	r3, r2
 8004200:	d00a      	beq.n	8004218 <HAL_UART_IRQHandler+0x5e0>
 8004202:	23a0      	movs	r3, #160	; 0xa0
 8004204:	18fb      	adds	r3, r7, r3
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2240      	movs	r2, #64	; 0x40
 800420a:	4013      	ands	r3, r2
 800420c:	d004      	beq.n	8004218 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	0018      	movs	r0, r3
 8004212:	f000 fef8 	bl	8005006 <UART_EndTransmit_IT>
    return;
 8004216:	e02c      	b.n	8004272 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004218:	23a4      	movs	r3, #164	; 0xa4
 800421a:	18fb      	adds	r3, r7, r3
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	2380      	movs	r3, #128	; 0x80
 8004220:	041b      	lsls	r3, r3, #16
 8004222:	4013      	ands	r3, r2
 8004224:	d00b      	beq.n	800423e <HAL_UART_IRQHandler+0x606>
 8004226:	23a0      	movs	r3, #160	; 0xa0
 8004228:	18fb      	adds	r3, r7, r3
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	2380      	movs	r3, #128	; 0x80
 800422e:	05db      	lsls	r3, r3, #23
 8004230:	4013      	ands	r3, r2
 8004232:	d004      	beq.n	800423e <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	0018      	movs	r0, r3
 8004238:	f000 ff21 	bl	800507e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800423c:	e019      	b.n	8004272 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800423e:	23a4      	movs	r3, #164	; 0xa4
 8004240:	18fb      	adds	r3, r7, r3
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	2380      	movs	r3, #128	; 0x80
 8004246:	045b      	lsls	r3, r3, #17
 8004248:	4013      	ands	r3, r2
 800424a:	d012      	beq.n	8004272 <HAL_UART_IRQHandler+0x63a>
 800424c:	23a0      	movs	r3, #160	; 0xa0
 800424e:	18fb      	adds	r3, r7, r3
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2b00      	cmp	r3, #0
 8004254:	da0d      	bge.n	8004272 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	0018      	movs	r0, r3
 800425a:	f000 ff08 	bl	800506e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800425e:	e008      	b.n	8004272 <HAL_UART_IRQHandler+0x63a>
      return;
 8004260:	46c0      	nop			; (mov r8, r8)
 8004262:	e006      	b.n	8004272 <HAL_UART_IRQHandler+0x63a>
    return;
 8004264:	46c0      	nop			; (mov r8, r8)
 8004266:	e004      	b.n	8004272 <HAL_UART_IRQHandler+0x63a>
      return;
 8004268:	46c0      	nop			; (mov r8, r8)
 800426a:	e002      	b.n	8004272 <HAL_UART_IRQHandler+0x63a>
      return;
 800426c:	46c0      	nop			; (mov r8, r8)
 800426e:	e000      	b.n	8004272 <HAL_UART_IRQHandler+0x63a>
    return;
 8004270:	46c0      	nop			; (mov r8, r8)
  }
}
 8004272:	46bd      	mov	sp, r7
 8004274:	b02a      	add	sp, #168	; 0xa8
 8004276:	bdb0      	pop	{r4, r5, r7, pc}
 8004278:	fffffeff 	.word	0xfffffeff
 800427c:	fffffedf 	.word	0xfffffedf
 8004280:	effffffe 	.word	0xeffffffe

08004284 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800428c:	46c0      	nop			; (mov r8, r8)
 800428e:	46bd      	mov	sp, r7
 8004290:	b002      	add	sp, #8
 8004292:	bd80      	pop	{r7, pc}

08004294 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800429c:	46c0      	nop			; (mov r8, r8)
 800429e:	46bd      	mov	sp, r7
 80042a0:	b002      	add	sp, #8
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80042ac:	46c0      	nop			; (mov r8, r8)
 80042ae:	46bd      	mov	sp, r7
 80042b0:	b002      	add	sp, #8
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80042bc:	46c0      	nop			; (mov r8, r8)
 80042be:	46bd      	mov	sp, r7
 80042c0:	b002      	add	sp, #8
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042c4:	b5b0      	push	{r4, r5, r7, lr}
 80042c6:	b090      	sub	sp, #64	; 0x40
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042cc:	231a      	movs	r3, #26
 80042ce:	2220      	movs	r2, #32
 80042d0:	189b      	adds	r3, r3, r2
 80042d2:	19db      	adds	r3, r3, r7
 80042d4:	2200      	movs	r2, #0
 80042d6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042da:	689a      	ldr	r2, [r3, #8]
 80042dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	431a      	orrs	r2, r3
 80042e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	431a      	orrs	r2, r3
 80042e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ea:	69db      	ldr	r3, [r3, #28]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4ac4      	ldr	r2, [pc, #784]	; (8004608 <UART_SetConfig+0x344>)
 80042f8:	4013      	ands	r3, r2
 80042fa:	0019      	movs	r1, r3
 80042fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004302:	430b      	orrs	r3, r1
 8004304:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	4abf      	ldr	r2, [pc, #764]	; (800460c <UART_SetConfig+0x348>)
 800430e:	4013      	ands	r3, r2
 8004310:	0018      	movs	r0, r3
 8004312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004314:	68d9      	ldr	r1, [r3, #12]
 8004316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	0003      	movs	r3, r0
 800431c:	430b      	orrs	r3, r1
 800431e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4ab9      	ldr	r2, [pc, #740]	; (8004610 <UART_SetConfig+0x34c>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d004      	beq.n	800433a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004336:	4313      	orrs	r3, r2
 8004338:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	4ab4      	ldr	r2, [pc, #720]	; (8004614 <UART_SetConfig+0x350>)
 8004342:	4013      	ands	r3, r2
 8004344:	0019      	movs	r1, r3
 8004346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800434c:	430b      	orrs	r3, r1
 800434e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004356:	220f      	movs	r2, #15
 8004358:	4393      	bics	r3, r2
 800435a:	0018      	movs	r0, r3
 800435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	0003      	movs	r3, r0
 8004366:	430b      	orrs	r3, r1
 8004368:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800436a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4aaa      	ldr	r2, [pc, #680]	; (8004618 <UART_SetConfig+0x354>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d131      	bne.n	80043d8 <UART_SetConfig+0x114>
 8004374:	4ba9      	ldr	r3, [pc, #676]	; (800461c <UART_SetConfig+0x358>)
 8004376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004378:	2203      	movs	r2, #3
 800437a:	4013      	ands	r3, r2
 800437c:	2b03      	cmp	r3, #3
 800437e:	d01d      	beq.n	80043bc <UART_SetConfig+0xf8>
 8004380:	d823      	bhi.n	80043ca <UART_SetConfig+0x106>
 8004382:	2b02      	cmp	r3, #2
 8004384:	d00c      	beq.n	80043a0 <UART_SetConfig+0xdc>
 8004386:	d820      	bhi.n	80043ca <UART_SetConfig+0x106>
 8004388:	2b00      	cmp	r3, #0
 800438a:	d002      	beq.n	8004392 <UART_SetConfig+0xce>
 800438c:	2b01      	cmp	r3, #1
 800438e:	d00e      	beq.n	80043ae <UART_SetConfig+0xea>
 8004390:	e01b      	b.n	80043ca <UART_SetConfig+0x106>
 8004392:	231b      	movs	r3, #27
 8004394:	2220      	movs	r2, #32
 8004396:	189b      	adds	r3, r3, r2
 8004398:	19db      	adds	r3, r3, r7
 800439a:	2200      	movs	r2, #0
 800439c:	701a      	strb	r2, [r3, #0]
 800439e:	e071      	b.n	8004484 <UART_SetConfig+0x1c0>
 80043a0:	231b      	movs	r3, #27
 80043a2:	2220      	movs	r2, #32
 80043a4:	189b      	adds	r3, r3, r2
 80043a6:	19db      	adds	r3, r3, r7
 80043a8:	2202      	movs	r2, #2
 80043aa:	701a      	strb	r2, [r3, #0]
 80043ac:	e06a      	b.n	8004484 <UART_SetConfig+0x1c0>
 80043ae:	231b      	movs	r3, #27
 80043b0:	2220      	movs	r2, #32
 80043b2:	189b      	adds	r3, r3, r2
 80043b4:	19db      	adds	r3, r3, r7
 80043b6:	2204      	movs	r2, #4
 80043b8:	701a      	strb	r2, [r3, #0]
 80043ba:	e063      	b.n	8004484 <UART_SetConfig+0x1c0>
 80043bc:	231b      	movs	r3, #27
 80043be:	2220      	movs	r2, #32
 80043c0:	189b      	adds	r3, r3, r2
 80043c2:	19db      	adds	r3, r3, r7
 80043c4:	2208      	movs	r2, #8
 80043c6:	701a      	strb	r2, [r3, #0]
 80043c8:	e05c      	b.n	8004484 <UART_SetConfig+0x1c0>
 80043ca:	231b      	movs	r3, #27
 80043cc:	2220      	movs	r2, #32
 80043ce:	189b      	adds	r3, r3, r2
 80043d0:	19db      	adds	r3, r3, r7
 80043d2:	2210      	movs	r2, #16
 80043d4:	701a      	strb	r2, [r3, #0]
 80043d6:	e055      	b.n	8004484 <UART_SetConfig+0x1c0>
 80043d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a90      	ldr	r2, [pc, #576]	; (8004620 <UART_SetConfig+0x35c>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d106      	bne.n	80043f0 <UART_SetConfig+0x12c>
 80043e2:	231b      	movs	r3, #27
 80043e4:	2220      	movs	r2, #32
 80043e6:	189b      	adds	r3, r3, r2
 80043e8:	19db      	adds	r3, r3, r7
 80043ea:	2200      	movs	r2, #0
 80043ec:	701a      	strb	r2, [r3, #0]
 80043ee:	e049      	b.n	8004484 <UART_SetConfig+0x1c0>
 80043f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a86      	ldr	r2, [pc, #536]	; (8004610 <UART_SetConfig+0x34c>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d13e      	bne.n	8004478 <UART_SetConfig+0x1b4>
 80043fa:	4b88      	ldr	r3, [pc, #544]	; (800461c <UART_SetConfig+0x358>)
 80043fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043fe:	23c0      	movs	r3, #192	; 0xc0
 8004400:	011b      	lsls	r3, r3, #4
 8004402:	4013      	ands	r3, r2
 8004404:	22c0      	movs	r2, #192	; 0xc0
 8004406:	0112      	lsls	r2, r2, #4
 8004408:	4293      	cmp	r3, r2
 800440a:	d027      	beq.n	800445c <UART_SetConfig+0x198>
 800440c:	22c0      	movs	r2, #192	; 0xc0
 800440e:	0112      	lsls	r2, r2, #4
 8004410:	4293      	cmp	r3, r2
 8004412:	d82a      	bhi.n	800446a <UART_SetConfig+0x1a6>
 8004414:	2280      	movs	r2, #128	; 0x80
 8004416:	0112      	lsls	r2, r2, #4
 8004418:	4293      	cmp	r3, r2
 800441a:	d011      	beq.n	8004440 <UART_SetConfig+0x17c>
 800441c:	2280      	movs	r2, #128	; 0x80
 800441e:	0112      	lsls	r2, r2, #4
 8004420:	4293      	cmp	r3, r2
 8004422:	d822      	bhi.n	800446a <UART_SetConfig+0x1a6>
 8004424:	2b00      	cmp	r3, #0
 8004426:	d004      	beq.n	8004432 <UART_SetConfig+0x16e>
 8004428:	2280      	movs	r2, #128	; 0x80
 800442a:	00d2      	lsls	r2, r2, #3
 800442c:	4293      	cmp	r3, r2
 800442e:	d00e      	beq.n	800444e <UART_SetConfig+0x18a>
 8004430:	e01b      	b.n	800446a <UART_SetConfig+0x1a6>
 8004432:	231b      	movs	r3, #27
 8004434:	2220      	movs	r2, #32
 8004436:	189b      	adds	r3, r3, r2
 8004438:	19db      	adds	r3, r3, r7
 800443a:	2200      	movs	r2, #0
 800443c:	701a      	strb	r2, [r3, #0]
 800443e:	e021      	b.n	8004484 <UART_SetConfig+0x1c0>
 8004440:	231b      	movs	r3, #27
 8004442:	2220      	movs	r2, #32
 8004444:	189b      	adds	r3, r3, r2
 8004446:	19db      	adds	r3, r3, r7
 8004448:	2202      	movs	r2, #2
 800444a:	701a      	strb	r2, [r3, #0]
 800444c:	e01a      	b.n	8004484 <UART_SetConfig+0x1c0>
 800444e:	231b      	movs	r3, #27
 8004450:	2220      	movs	r2, #32
 8004452:	189b      	adds	r3, r3, r2
 8004454:	19db      	adds	r3, r3, r7
 8004456:	2204      	movs	r2, #4
 8004458:	701a      	strb	r2, [r3, #0]
 800445a:	e013      	b.n	8004484 <UART_SetConfig+0x1c0>
 800445c:	231b      	movs	r3, #27
 800445e:	2220      	movs	r2, #32
 8004460:	189b      	adds	r3, r3, r2
 8004462:	19db      	adds	r3, r3, r7
 8004464:	2208      	movs	r2, #8
 8004466:	701a      	strb	r2, [r3, #0]
 8004468:	e00c      	b.n	8004484 <UART_SetConfig+0x1c0>
 800446a:	231b      	movs	r3, #27
 800446c:	2220      	movs	r2, #32
 800446e:	189b      	adds	r3, r3, r2
 8004470:	19db      	adds	r3, r3, r7
 8004472:	2210      	movs	r2, #16
 8004474:	701a      	strb	r2, [r3, #0]
 8004476:	e005      	b.n	8004484 <UART_SetConfig+0x1c0>
 8004478:	231b      	movs	r3, #27
 800447a:	2220      	movs	r2, #32
 800447c:	189b      	adds	r3, r3, r2
 800447e:	19db      	adds	r3, r3, r7
 8004480:	2210      	movs	r2, #16
 8004482:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a61      	ldr	r2, [pc, #388]	; (8004610 <UART_SetConfig+0x34c>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d000      	beq.n	8004490 <UART_SetConfig+0x1cc>
 800448e:	e092      	b.n	80045b6 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004490:	231b      	movs	r3, #27
 8004492:	2220      	movs	r2, #32
 8004494:	189b      	adds	r3, r3, r2
 8004496:	19db      	adds	r3, r3, r7
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	2b08      	cmp	r3, #8
 800449c:	d015      	beq.n	80044ca <UART_SetConfig+0x206>
 800449e:	dc18      	bgt.n	80044d2 <UART_SetConfig+0x20e>
 80044a0:	2b04      	cmp	r3, #4
 80044a2:	d00d      	beq.n	80044c0 <UART_SetConfig+0x1fc>
 80044a4:	dc15      	bgt.n	80044d2 <UART_SetConfig+0x20e>
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d002      	beq.n	80044b0 <UART_SetConfig+0x1ec>
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d005      	beq.n	80044ba <UART_SetConfig+0x1f6>
 80044ae:	e010      	b.n	80044d2 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044b0:	f7fe fb14 	bl	8002adc <HAL_RCC_GetPCLK1Freq>
 80044b4:	0003      	movs	r3, r0
 80044b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80044b8:	e014      	b.n	80044e4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044ba:	4b5a      	ldr	r3, [pc, #360]	; (8004624 <UART_SetConfig+0x360>)
 80044bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80044be:	e011      	b.n	80044e4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044c0:	f7fe fa80 	bl	80029c4 <HAL_RCC_GetSysClockFreq>
 80044c4:	0003      	movs	r3, r0
 80044c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80044c8:	e00c      	b.n	80044e4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044ca:	2380      	movs	r3, #128	; 0x80
 80044cc:	021b      	lsls	r3, r3, #8
 80044ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80044d0:	e008      	b.n	80044e4 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80044d6:	231a      	movs	r3, #26
 80044d8:	2220      	movs	r2, #32
 80044da:	189b      	adds	r3, r3, r2
 80044dc:	19db      	adds	r3, r3, r7
 80044de:	2201      	movs	r2, #1
 80044e0:	701a      	strb	r2, [r3, #0]
        break;
 80044e2:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80044e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d100      	bne.n	80044ec <UART_SetConfig+0x228>
 80044ea:	e147      	b.n	800477c <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80044ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044f0:	4b4d      	ldr	r3, [pc, #308]	; (8004628 <UART_SetConfig+0x364>)
 80044f2:	0052      	lsls	r2, r2, #1
 80044f4:	5ad3      	ldrh	r3, [r2, r3]
 80044f6:	0019      	movs	r1, r3
 80044f8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80044fa:	f7fb fe15 	bl	8000128 <__udivsi3>
 80044fe:	0003      	movs	r3, r0
 8004500:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004504:	685a      	ldr	r2, [r3, #4]
 8004506:	0013      	movs	r3, r2
 8004508:	005b      	lsls	r3, r3, #1
 800450a:	189b      	adds	r3, r3, r2
 800450c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800450e:	429a      	cmp	r2, r3
 8004510:	d305      	bcc.n	800451e <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004518:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800451a:	429a      	cmp	r2, r3
 800451c:	d906      	bls.n	800452c <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 800451e:	231a      	movs	r3, #26
 8004520:	2220      	movs	r2, #32
 8004522:	189b      	adds	r3, r3, r2
 8004524:	19db      	adds	r3, r3, r7
 8004526:	2201      	movs	r2, #1
 8004528:	701a      	strb	r2, [r3, #0]
 800452a:	e127      	b.n	800477c <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800452c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800452e:	61bb      	str	r3, [r7, #24]
 8004530:	2300      	movs	r3, #0
 8004532:	61fb      	str	r3, [r7, #28]
 8004534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004536:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004538:	4b3b      	ldr	r3, [pc, #236]	; (8004628 <UART_SetConfig+0x364>)
 800453a:	0052      	lsls	r2, r2, #1
 800453c:	5ad3      	ldrh	r3, [r2, r3]
 800453e:	613b      	str	r3, [r7, #16]
 8004540:	2300      	movs	r3, #0
 8004542:	617b      	str	r3, [r7, #20]
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	69b8      	ldr	r0, [r7, #24]
 800454a:	69f9      	ldr	r1, [r7, #28]
 800454c:	f7fb ff62 	bl	8000414 <__aeabi_uldivmod>
 8004550:	0002      	movs	r2, r0
 8004552:	000b      	movs	r3, r1
 8004554:	0e11      	lsrs	r1, r2, #24
 8004556:	021d      	lsls	r5, r3, #8
 8004558:	430d      	orrs	r5, r1
 800455a:	0214      	lsls	r4, r2, #8
 800455c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	085b      	lsrs	r3, r3, #1
 8004562:	60bb      	str	r3, [r7, #8]
 8004564:	2300      	movs	r3, #0
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	68b8      	ldr	r0, [r7, #8]
 800456a:	68f9      	ldr	r1, [r7, #12]
 800456c:	1900      	adds	r0, r0, r4
 800456e:	4169      	adcs	r1, r5
 8004570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	603b      	str	r3, [r7, #0]
 8004576:	2300      	movs	r3, #0
 8004578:	607b      	str	r3, [r7, #4]
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f7fb ff49 	bl	8000414 <__aeabi_uldivmod>
 8004582:	0002      	movs	r2, r0
 8004584:	000b      	movs	r3, r1
 8004586:	0013      	movs	r3, r2
 8004588:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800458a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800458c:	23c0      	movs	r3, #192	; 0xc0
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	429a      	cmp	r2, r3
 8004592:	d309      	bcc.n	80045a8 <UART_SetConfig+0x2e4>
 8004594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004596:	2380      	movs	r3, #128	; 0x80
 8004598:	035b      	lsls	r3, r3, #13
 800459a:	429a      	cmp	r2, r3
 800459c:	d204      	bcs.n	80045a8 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 800459e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045a4:	60da      	str	r2, [r3, #12]
 80045a6:	e0e9      	b.n	800477c <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 80045a8:	231a      	movs	r3, #26
 80045aa:	2220      	movs	r2, #32
 80045ac:	189b      	adds	r3, r3, r2
 80045ae:	19db      	adds	r3, r3, r7
 80045b0:	2201      	movs	r2, #1
 80045b2:	701a      	strb	r2, [r3, #0]
 80045b4:	e0e2      	b.n	800477c <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b8:	69da      	ldr	r2, [r3, #28]
 80045ba:	2380      	movs	r3, #128	; 0x80
 80045bc:	021b      	lsls	r3, r3, #8
 80045be:	429a      	cmp	r2, r3
 80045c0:	d000      	beq.n	80045c4 <UART_SetConfig+0x300>
 80045c2:	e083      	b.n	80046cc <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80045c4:	231b      	movs	r3, #27
 80045c6:	2220      	movs	r2, #32
 80045c8:	189b      	adds	r3, r3, r2
 80045ca:	19db      	adds	r3, r3, r7
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	2b08      	cmp	r3, #8
 80045d0:	d015      	beq.n	80045fe <UART_SetConfig+0x33a>
 80045d2:	dc2b      	bgt.n	800462c <UART_SetConfig+0x368>
 80045d4:	2b04      	cmp	r3, #4
 80045d6:	d00d      	beq.n	80045f4 <UART_SetConfig+0x330>
 80045d8:	dc28      	bgt.n	800462c <UART_SetConfig+0x368>
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d002      	beq.n	80045e4 <UART_SetConfig+0x320>
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d005      	beq.n	80045ee <UART_SetConfig+0x32a>
 80045e2:	e023      	b.n	800462c <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045e4:	f7fe fa7a 	bl	8002adc <HAL_RCC_GetPCLK1Freq>
 80045e8:	0003      	movs	r3, r0
 80045ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80045ec:	e027      	b.n	800463e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045ee:	4b0d      	ldr	r3, [pc, #52]	; (8004624 <UART_SetConfig+0x360>)
 80045f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80045f2:	e024      	b.n	800463e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045f4:	f7fe f9e6 	bl	80029c4 <HAL_RCC_GetSysClockFreq>
 80045f8:	0003      	movs	r3, r0
 80045fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80045fc:	e01f      	b.n	800463e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045fe:	2380      	movs	r3, #128	; 0x80
 8004600:	021b      	lsls	r3, r3, #8
 8004602:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004604:	e01b      	b.n	800463e <UART_SetConfig+0x37a>
 8004606:	46c0      	nop			; (mov r8, r8)
 8004608:	cfff69f3 	.word	0xcfff69f3
 800460c:	ffffcfff 	.word	0xffffcfff
 8004610:	40008000 	.word	0x40008000
 8004614:	11fff4ff 	.word	0x11fff4ff
 8004618:	40013800 	.word	0x40013800
 800461c:	40021000 	.word	0x40021000
 8004620:	40004400 	.word	0x40004400
 8004624:	00f42400 	.word	0x00f42400
 8004628:	080075c8 	.word	0x080075c8
      default:
        pclk = 0U;
 800462c:	2300      	movs	r3, #0
 800462e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004630:	231a      	movs	r3, #26
 8004632:	2220      	movs	r2, #32
 8004634:	189b      	adds	r3, r3, r2
 8004636:	19db      	adds	r3, r3, r7
 8004638:	2201      	movs	r2, #1
 800463a:	701a      	strb	r2, [r3, #0]
        break;
 800463c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800463e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004640:	2b00      	cmp	r3, #0
 8004642:	d100      	bne.n	8004646 <UART_SetConfig+0x382>
 8004644:	e09a      	b.n	800477c <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004648:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800464a:	4b58      	ldr	r3, [pc, #352]	; (80047ac <UART_SetConfig+0x4e8>)
 800464c:	0052      	lsls	r2, r2, #1
 800464e:	5ad3      	ldrh	r3, [r2, r3]
 8004650:	0019      	movs	r1, r3
 8004652:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004654:	f7fb fd68 	bl	8000128 <__udivsi3>
 8004658:	0003      	movs	r3, r0
 800465a:	005a      	lsls	r2, r3, #1
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	085b      	lsrs	r3, r3, #1
 8004662:	18d2      	adds	r2, r2, r3
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	0019      	movs	r1, r3
 800466a:	0010      	movs	r0, r2
 800466c:	f7fb fd5c 	bl	8000128 <__udivsi3>
 8004670:	0003      	movs	r3, r0
 8004672:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004676:	2b0f      	cmp	r3, #15
 8004678:	d921      	bls.n	80046be <UART_SetConfig+0x3fa>
 800467a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800467c:	2380      	movs	r3, #128	; 0x80
 800467e:	025b      	lsls	r3, r3, #9
 8004680:	429a      	cmp	r2, r3
 8004682:	d21c      	bcs.n	80046be <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004686:	b29a      	uxth	r2, r3
 8004688:	200e      	movs	r0, #14
 800468a:	2420      	movs	r4, #32
 800468c:	1903      	adds	r3, r0, r4
 800468e:	19db      	adds	r3, r3, r7
 8004690:	210f      	movs	r1, #15
 8004692:	438a      	bics	r2, r1
 8004694:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004698:	085b      	lsrs	r3, r3, #1
 800469a:	b29b      	uxth	r3, r3
 800469c:	2207      	movs	r2, #7
 800469e:	4013      	ands	r3, r2
 80046a0:	b299      	uxth	r1, r3
 80046a2:	1903      	adds	r3, r0, r4
 80046a4:	19db      	adds	r3, r3, r7
 80046a6:	1902      	adds	r2, r0, r4
 80046a8:	19d2      	adds	r2, r2, r7
 80046aa:	8812      	ldrh	r2, [r2, #0]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80046b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	1902      	adds	r2, r0, r4
 80046b6:	19d2      	adds	r2, r2, r7
 80046b8:	8812      	ldrh	r2, [r2, #0]
 80046ba:	60da      	str	r2, [r3, #12]
 80046bc:	e05e      	b.n	800477c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 80046be:	231a      	movs	r3, #26
 80046c0:	2220      	movs	r2, #32
 80046c2:	189b      	adds	r3, r3, r2
 80046c4:	19db      	adds	r3, r3, r7
 80046c6:	2201      	movs	r2, #1
 80046c8:	701a      	strb	r2, [r3, #0]
 80046ca:	e057      	b.n	800477c <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046cc:	231b      	movs	r3, #27
 80046ce:	2220      	movs	r2, #32
 80046d0:	189b      	adds	r3, r3, r2
 80046d2:	19db      	adds	r3, r3, r7
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	2b08      	cmp	r3, #8
 80046d8:	d015      	beq.n	8004706 <UART_SetConfig+0x442>
 80046da:	dc18      	bgt.n	800470e <UART_SetConfig+0x44a>
 80046dc:	2b04      	cmp	r3, #4
 80046de:	d00d      	beq.n	80046fc <UART_SetConfig+0x438>
 80046e0:	dc15      	bgt.n	800470e <UART_SetConfig+0x44a>
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d002      	beq.n	80046ec <UART_SetConfig+0x428>
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d005      	beq.n	80046f6 <UART_SetConfig+0x432>
 80046ea:	e010      	b.n	800470e <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046ec:	f7fe f9f6 	bl	8002adc <HAL_RCC_GetPCLK1Freq>
 80046f0:	0003      	movs	r3, r0
 80046f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80046f4:	e014      	b.n	8004720 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046f6:	4b2e      	ldr	r3, [pc, #184]	; (80047b0 <UART_SetConfig+0x4ec>)
 80046f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80046fa:	e011      	b.n	8004720 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046fc:	f7fe f962 	bl	80029c4 <HAL_RCC_GetSysClockFreq>
 8004700:	0003      	movs	r3, r0
 8004702:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004704:	e00c      	b.n	8004720 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004706:	2380      	movs	r3, #128	; 0x80
 8004708:	021b      	lsls	r3, r3, #8
 800470a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800470c:	e008      	b.n	8004720 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 800470e:	2300      	movs	r3, #0
 8004710:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004712:	231a      	movs	r3, #26
 8004714:	2220      	movs	r2, #32
 8004716:	189b      	adds	r3, r3, r2
 8004718:	19db      	adds	r3, r3, r7
 800471a:	2201      	movs	r2, #1
 800471c:	701a      	strb	r2, [r3, #0]
        break;
 800471e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004722:	2b00      	cmp	r3, #0
 8004724:	d02a      	beq.n	800477c <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004728:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800472a:	4b20      	ldr	r3, [pc, #128]	; (80047ac <UART_SetConfig+0x4e8>)
 800472c:	0052      	lsls	r2, r2, #1
 800472e:	5ad3      	ldrh	r3, [r2, r3]
 8004730:	0019      	movs	r1, r3
 8004732:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004734:	f7fb fcf8 	bl	8000128 <__udivsi3>
 8004738:	0003      	movs	r3, r0
 800473a:	001a      	movs	r2, r3
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	085b      	lsrs	r3, r3, #1
 8004742:	18d2      	adds	r2, r2, r3
 8004744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	0019      	movs	r1, r3
 800474a:	0010      	movs	r0, r2
 800474c:	f7fb fcec 	bl	8000128 <__udivsi3>
 8004750:	0003      	movs	r3, r0
 8004752:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004756:	2b0f      	cmp	r3, #15
 8004758:	d90a      	bls.n	8004770 <UART_SetConfig+0x4ac>
 800475a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800475c:	2380      	movs	r3, #128	; 0x80
 800475e:	025b      	lsls	r3, r3, #9
 8004760:	429a      	cmp	r2, r3
 8004762:	d205      	bcs.n	8004770 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004766:	b29a      	uxth	r2, r3
 8004768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	60da      	str	r2, [r3, #12]
 800476e:	e005      	b.n	800477c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8004770:	231a      	movs	r3, #26
 8004772:	2220      	movs	r2, #32
 8004774:	189b      	adds	r3, r3, r2
 8004776:	19db      	adds	r3, r3, r7
 8004778:	2201      	movs	r2, #1
 800477a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800477c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477e:	226a      	movs	r2, #106	; 0x6a
 8004780:	2101      	movs	r1, #1
 8004782:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004786:	2268      	movs	r2, #104	; 0x68
 8004788:	2101      	movs	r1, #1
 800478a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	2200      	movs	r2, #0
 8004790:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004794:	2200      	movs	r2, #0
 8004796:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004798:	231a      	movs	r3, #26
 800479a:	2220      	movs	r2, #32
 800479c:	189b      	adds	r3, r3, r2
 800479e:	19db      	adds	r3, r3, r7
 80047a0:	781b      	ldrb	r3, [r3, #0]
}
 80047a2:	0018      	movs	r0, r3
 80047a4:	46bd      	mov	sp, r7
 80047a6:	b010      	add	sp, #64	; 0x40
 80047a8:	bdb0      	pop	{r4, r5, r7, pc}
 80047aa:	46c0      	nop			; (mov r8, r8)
 80047ac:	080075c8 	.word	0x080075c8
 80047b0:	00f42400 	.word	0x00f42400

080047b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c0:	2201      	movs	r2, #1
 80047c2:	4013      	ands	r3, r2
 80047c4:	d00b      	beq.n	80047de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	4a4a      	ldr	r2, [pc, #296]	; (80048f8 <UART_AdvFeatureConfig+0x144>)
 80047ce:	4013      	ands	r3, r2
 80047d0:	0019      	movs	r1, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e2:	2202      	movs	r2, #2
 80047e4:	4013      	ands	r3, r2
 80047e6:	d00b      	beq.n	8004800 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	4a43      	ldr	r2, [pc, #268]	; (80048fc <UART_AdvFeatureConfig+0x148>)
 80047f0:	4013      	ands	r3, r2
 80047f2:	0019      	movs	r1, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	430a      	orrs	r2, r1
 80047fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004804:	2204      	movs	r2, #4
 8004806:	4013      	ands	r3, r2
 8004808:	d00b      	beq.n	8004822 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	4a3b      	ldr	r2, [pc, #236]	; (8004900 <UART_AdvFeatureConfig+0x14c>)
 8004812:	4013      	ands	r3, r2
 8004814:	0019      	movs	r1, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	430a      	orrs	r2, r1
 8004820:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004826:	2208      	movs	r2, #8
 8004828:	4013      	ands	r3, r2
 800482a:	d00b      	beq.n	8004844 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	4a34      	ldr	r2, [pc, #208]	; (8004904 <UART_AdvFeatureConfig+0x150>)
 8004834:	4013      	ands	r3, r2
 8004836:	0019      	movs	r1, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	430a      	orrs	r2, r1
 8004842:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004848:	2210      	movs	r2, #16
 800484a:	4013      	ands	r3, r2
 800484c:	d00b      	beq.n	8004866 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	4a2c      	ldr	r2, [pc, #176]	; (8004908 <UART_AdvFeatureConfig+0x154>)
 8004856:	4013      	ands	r3, r2
 8004858:	0019      	movs	r1, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	430a      	orrs	r2, r1
 8004864:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486a:	2220      	movs	r2, #32
 800486c:	4013      	ands	r3, r2
 800486e:	d00b      	beq.n	8004888 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	4a25      	ldr	r2, [pc, #148]	; (800490c <UART_AdvFeatureConfig+0x158>)
 8004878:	4013      	ands	r3, r2
 800487a:	0019      	movs	r1, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	430a      	orrs	r2, r1
 8004886:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488c:	2240      	movs	r2, #64	; 0x40
 800488e:	4013      	ands	r3, r2
 8004890:	d01d      	beq.n	80048ce <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	4a1d      	ldr	r2, [pc, #116]	; (8004910 <UART_AdvFeatureConfig+0x15c>)
 800489a:	4013      	ands	r3, r2
 800489c:	0019      	movs	r1, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	430a      	orrs	r2, r1
 80048a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048ae:	2380      	movs	r3, #128	; 0x80
 80048b0:	035b      	lsls	r3, r3, #13
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d10b      	bne.n	80048ce <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	4a15      	ldr	r2, [pc, #84]	; (8004914 <UART_AdvFeatureConfig+0x160>)
 80048be:	4013      	ands	r3, r2
 80048c0:	0019      	movs	r1, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	430a      	orrs	r2, r1
 80048cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d2:	2280      	movs	r2, #128	; 0x80
 80048d4:	4013      	ands	r3, r2
 80048d6:	d00b      	beq.n	80048f0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	4a0e      	ldr	r2, [pc, #56]	; (8004918 <UART_AdvFeatureConfig+0x164>)
 80048e0:	4013      	ands	r3, r2
 80048e2:	0019      	movs	r1, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	430a      	orrs	r2, r1
 80048ee:	605a      	str	r2, [r3, #4]
  }
}
 80048f0:	46c0      	nop			; (mov r8, r8)
 80048f2:	46bd      	mov	sp, r7
 80048f4:	b002      	add	sp, #8
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	fffdffff 	.word	0xfffdffff
 80048fc:	fffeffff 	.word	0xfffeffff
 8004900:	fffbffff 	.word	0xfffbffff
 8004904:	ffff7fff 	.word	0xffff7fff
 8004908:	ffffefff 	.word	0xffffefff
 800490c:	ffffdfff 	.word	0xffffdfff
 8004910:	ffefffff 	.word	0xffefffff
 8004914:	ff9fffff 	.word	0xff9fffff
 8004918:	fff7ffff 	.word	0xfff7ffff

0800491c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af02      	add	r7, sp, #8
 8004922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2290      	movs	r2, #144	; 0x90
 8004928:	2100      	movs	r1, #0
 800492a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800492c:	f7fc fe46 	bl	80015bc <HAL_GetTick>
 8004930:	0003      	movs	r3, r0
 8004932:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2208      	movs	r2, #8
 800493c:	4013      	ands	r3, r2
 800493e:	2b08      	cmp	r3, #8
 8004940:	d10c      	bne.n	800495c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2280      	movs	r2, #128	; 0x80
 8004946:	0391      	lsls	r1, r2, #14
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	4a1a      	ldr	r2, [pc, #104]	; (80049b4 <UART_CheckIdleState+0x98>)
 800494c:	9200      	str	r2, [sp, #0]
 800494e:	2200      	movs	r2, #0
 8004950:	f000 f832 	bl	80049b8 <UART_WaitOnFlagUntilTimeout>
 8004954:	1e03      	subs	r3, r0, #0
 8004956:	d001      	beq.n	800495c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e026      	b.n	80049aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2204      	movs	r2, #4
 8004964:	4013      	ands	r3, r2
 8004966:	2b04      	cmp	r3, #4
 8004968:	d10c      	bne.n	8004984 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2280      	movs	r2, #128	; 0x80
 800496e:	03d1      	lsls	r1, r2, #15
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	4a10      	ldr	r2, [pc, #64]	; (80049b4 <UART_CheckIdleState+0x98>)
 8004974:	9200      	str	r2, [sp, #0]
 8004976:	2200      	movs	r2, #0
 8004978:	f000 f81e 	bl	80049b8 <UART_WaitOnFlagUntilTimeout>
 800497c:	1e03      	subs	r3, r0, #0
 800497e:	d001      	beq.n	8004984 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e012      	b.n	80049aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2288      	movs	r2, #136	; 0x88
 8004988:	2120      	movs	r1, #32
 800498a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	228c      	movs	r2, #140	; 0x8c
 8004990:	2120      	movs	r1, #32
 8004992:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2284      	movs	r2, #132	; 0x84
 80049a4:	2100      	movs	r1, #0
 80049a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	0018      	movs	r0, r3
 80049ac:	46bd      	mov	sp, r7
 80049ae:	b004      	add	sp, #16
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	46c0      	nop			; (mov r8, r8)
 80049b4:	01ffffff 	.word	0x01ffffff

080049b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b094      	sub	sp, #80	; 0x50
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	603b      	str	r3, [r7, #0]
 80049c4:	1dfb      	adds	r3, r7, #7
 80049c6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049c8:	e0a7      	b.n	8004b1a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049cc:	3301      	adds	r3, #1
 80049ce:	d100      	bne.n	80049d2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80049d0:	e0a3      	b.n	8004b1a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049d2:	f7fc fdf3 	bl	80015bc <HAL_GetTick>
 80049d6:	0002      	movs	r2, r0
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049de:	429a      	cmp	r2, r3
 80049e0:	d302      	bcc.n	80049e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80049e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d13f      	bne.n	8004a68 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049e8:	f3ef 8310 	mrs	r3, PRIMASK
 80049ec:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80049ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80049f0:	647b      	str	r3, [r7, #68]	; 0x44
 80049f2:	2301      	movs	r3, #1
 80049f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f8:	f383 8810 	msr	PRIMASK, r3
}
 80049fc:	46c0      	nop			; (mov r8, r8)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	494e      	ldr	r1, [pc, #312]	; (8004b44 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004a0a:	400a      	ands	r2, r1
 8004a0c:	601a      	str	r2, [r3, #0]
 8004a0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a10:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a14:	f383 8810 	msr	PRIMASK, r3
}
 8004a18:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a1a:	f3ef 8310 	mrs	r3, PRIMASK
 8004a1e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a22:	643b      	str	r3, [r7, #64]	; 0x40
 8004a24:	2301      	movs	r3, #1
 8004a26:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a2a:	f383 8810 	msr	PRIMASK, r3
}
 8004a2e:	46c0      	nop			; (mov r8, r8)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689a      	ldr	r2, [r3, #8]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2101      	movs	r1, #1
 8004a3c:	438a      	bics	r2, r1
 8004a3e:	609a      	str	r2, [r3, #8]
 8004a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a42:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a46:	f383 8810 	msr	PRIMASK, r3
}
 8004a4a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2288      	movs	r2, #136	; 0x88
 8004a50:	2120      	movs	r1, #32
 8004a52:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	228c      	movs	r2, #140	; 0x8c
 8004a58:	2120      	movs	r1, #32
 8004a5a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2284      	movs	r2, #132	; 0x84
 8004a60:	2100      	movs	r1, #0
 8004a62:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e069      	b.n	8004b3c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2204      	movs	r2, #4
 8004a70:	4013      	ands	r3, r2
 8004a72:	d052      	beq.n	8004b1a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	69da      	ldr	r2, [r3, #28]
 8004a7a:	2380      	movs	r3, #128	; 0x80
 8004a7c:	011b      	lsls	r3, r3, #4
 8004a7e:	401a      	ands	r2, r3
 8004a80:	2380      	movs	r3, #128	; 0x80
 8004a82:	011b      	lsls	r3, r3, #4
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d148      	bne.n	8004b1a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2280      	movs	r2, #128	; 0x80
 8004a8e:	0112      	lsls	r2, r2, #4
 8004a90:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a92:	f3ef 8310 	mrs	r3, PRIMASK
 8004a96:	613b      	str	r3, [r7, #16]
  return(result);
 8004a98:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	f383 8810 	msr	PRIMASK, r3
}
 8004aa6:	46c0      	nop			; (mov r8, r8)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4924      	ldr	r1, [pc, #144]	; (8004b44 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004ab4:	400a      	ands	r2, r1
 8004ab6:	601a      	str	r2, [r3, #0]
 8004ab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004aba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	f383 8810 	msr	PRIMASK, r3
}
 8004ac2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ac4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ac8:	61fb      	str	r3, [r7, #28]
  return(result);
 8004aca:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004acc:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ace:	2301      	movs	r3, #1
 8004ad0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ad2:	6a3b      	ldr	r3, [r7, #32]
 8004ad4:	f383 8810 	msr	PRIMASK, r3
}
 8004ad8:	46c0      	nop			; (mov r8, r8)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	689a      	ldr	r2, [r3, #8]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2101      	movs	r1, #1
 8004ae6:	438a      	bics	r2, r1
 8004ae8:	609a      	str	r2, [r3, #8]
 8004aea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aec:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af0:	f383 8810 	msr	PRIMASK, r3
}
 8004af4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2288      	movs	r2, #136	; 0x88
 8004afa:	2120      	movs	r1, #32
 8004afc:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	228c      	movs	r2, #140	; 0x8c
 8004b02:	2120      	movs	r1, #32
 8004b04:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2290      	movs	r2, #144	; 0x90
 8004b0a:	2120      	movs	r1, #32
 8004b0c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2284      	movs	r2, #132	; 0x84
 8004b12:	2100      	movs	r1, #0
 8004b14:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e010      	b.n	8004b3c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	69db      	ldr	r3, [r3, #28]
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	4013      	ands	r3, r2
 8004b24:	68ba      	ldr	r2, [r7, #8]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	425a      	negs	r2, r3
 8004b2a:	4153      	adcs	r3, r2
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	001a      	movs	r2, r3
 8004b30:	1dfb      	adds	r3, r7, #7
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d100      	bne.n	8004b3a <UART_WaitOnFlagUntilTimeout+0x182>
 8004b38:	e747      	b.n	80049ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	0018      	movs	r0, r3
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	b014      	add	sp, #80	; 0x50
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	fffffe5f 	.word	0xfffffe5f

08004b48 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b090      	sub	sp, #64	; 0x40
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	1dbb      	adds	r3, r7, #6
 8004b54:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	1dba      	adds	r2, r7, #6
 8004b60:	215c      	movs	r1, #92	; 0x5c
 8004b62:	8812      	ldrh	r2, [r2, #0]
 8004b64:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2290      	movs	r2, #144	; 0x90
 8004b6a:	2100      	movs	r1, #0
 8004b6c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	228c      	movs	r2, #140	; 0x8c
 8004b72:	2122      	movs	r1, #34	; 0x22
 8004b74:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2280      	movs	r2, #128	; 0x80
 8004b7a:	589b      	ldr	r3, [r3, r2]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d02d      	beq.n	8004bdc <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2280      	movs	r2, #128	; 0x80
 8004b84:	589b      	ldr	r3, [r3, r2]
 8004b86:	4a40      	ldr	r2, [pc, #256]	; (8004c88 <UART_Start_Receive_DMA+0x140>)
 8004b88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2280      	movs	r2, #128	; 0x80
 8004b8e:	589b      	ldr	r3, [r3, r2]
 8004b90:	4a3e      	ldr	r2, [pc, #248]	; (8004c8c <UART_Start_Receive_DMA+0x144>)
 8004b92:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2280      	movs	r2, #128	; 0x80
 8004b98:	589b      	ldr	r3, [r3, r2]
 8004b9a:	4a3d      	ldr	r2, [pc, #244]	; (8004c90 <UART_Start_Receive_DMA+0x148>)
 8004b9c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2280      	movs	r2, #128	; 0x80
 8004ba2:	589b      	ldr	r3, [r3, r2]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2280      	movs	r2, #128	; 0x80
 8004bac:	5898      	ldr	r0, [r3, r2]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	3324      	adds	r3, #36	; 0x24
 8004bb4:	0019      	movs	r1, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bba:	001a      	movs	r2, r3
 8004bbc:	1dbb      	adds	r3, r7, #6
 8004bbe:	881b      	ldrh	r3, [r3, #0]
 8004bc0:	f7fc fe6e 	bl	80018a0 <HAL_DMA_Start_IT>
 8004bc4:	1e03      	subs	r3, r0, #0
 8004bc6:	d009      	beq.n	8004bdc <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2290      	movs	r2, #144	; 0x90
 8004bcc:	2110      	movs	r1, #16
 8004bce:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	228c      	movs	r2, #140	; 0x8c
 8004bd4:	2120      	movs	r1, #32
 8004bd6:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e050      	b.n	8004c7e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d019      	beq.n	8004c18 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004be4:	f3ef 8310 	mrs	r3, PRIMASK
 8004be8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bee:	2301      	movs	r3, #1
 8004bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf4:	f383 8810 	msr	PRIMASK, r3
}
 8004bf8:	46c0      	nop			; (mov r8, r8)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2180      	movs	r1, #128	; 0x80
 8004c06:	0049      	lsls	r1, r1, #1
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	601a      	str	r2, [r3, #0]
 8004c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c0e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c12:	f383 8810 	msr	PRIMASK, r3
}
 8004c16:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c18:	f3ef 8310 	mrs	r3, PRIMASK
 8004c1c:	613b      	str	r3, [r7, #16]
  return(result);
 8004c1e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c20:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c22:	2301      	movs	r3, #1
 8004c24:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f383 8810 	msr	PRIMASK, r3
}
 8004c2c:	46c0      	nop			; (mov r8, r8)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	689a      	ldr	r2, [r3, #8]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2101      	movs	r1, #1
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	609a      	str	r2, [r3, #8]
 8004c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c40:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	f383 8810 	msr	PRIMASK, r3
}
 8004c48:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c4a:	f3ef 8310 	mrs	r3, PRIMASK
 8004c4e:	61fb      	str	r3, [r7, #28]
  return(result);
 8004c50:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c52:	637b      	str	r3, [r7, #52]	; 0x34
 8004c54:	2301      	movs	r3, #1
 8004c56:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c58:	6a3b      	ldr	r3, [r7, #32]
 8004c5a:	f383 8810 	msr	PRIMASK, r3
}
 8004c5e:	46c0      	nop			; (mov r8, r8)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	689a      	ldr	r2, [r3, #8]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2140      	movs	r1, #64	; 0x40
 8004c6c:	430a      	orrs	r2, r1
 8004c6e:	609a      	str	r2, [r3, #8]
 8004c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c72:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c76:	f383 8810 	msr	PRIMASK, r3
}
 8004c7a:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	0018      	movs	r0, r3
 8004c80:	46bd      	mov	sp, r7
 8004c82:	b010      	add	sp, #64	; 0x40
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	46c0      	nop			; (mov r8, r8)
 8004c88:	08004de1 	.word	0x08004de1
 8004c8c:	08004f11 	.word	0x08004f11
 8004c90:	08004f53 	.word	0x08004f53

08004c94 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b08a      	sub	sp, #40	; 0x28
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c9c:	f3ef 8310 	mrs	r3, PRIMASK
 8004ca0:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ca2:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f383 8810 	msr	PRIMASK, r3
}
 8004cb0:	46c0      	nop			; (mov r8, r8)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	21c0      	movs	r1, #192	; 0xc0
 8004cbe:	438a      	bics	r2, r1
 8004cc0:	601a      	str	r2, [r3, #0]
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	f383 8810 	msr	PRIMASK, r3
}
 8004ccc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cce:	f3ef 8310 	mrs	r3, PRIMASK
 8004cd2:	617b      	str	r3, [r7, #20]
  return(result);
 8004cd4:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004cd6:	623b      	str	r3, [r7, #32]
 8004cd8:	2301      	movs	r3, #1
 8004cda:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	f383 8810 	msr	PRIMASK, r3
}
 8004ce2:	46c0      	nop			; (mov r8, r8)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	689a      	ldr	r2, [r3, #8]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4908      	ldr	r1, [pc, #32]	; (8004d10 <UART_EndTxTransfer+0x7c>)
 8004cf0:	400a      	ands	r2, r1
 8004cf2:	609a      	str	r2, [r3, #8]
 8004cf4:	6a3b      	ldr	r3, [r7, #32]
 8004cf6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	f383 8810 	msr	PRIMASK, r3
}
 8004cfe:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2288      	movs	r2, #136	; 0x88
 8004d04:	2120      	movs	r1, #32
 8004d06:	5099      	str	r1, [r3, r2]
}
 8004d08:	46c0      	nop			; (mov r8, r8)
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	b00a      	add	sp, #40	; 0x28
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	ff7fffff 	.word	0xff7fffff

08004d14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b08e      	sub	sp, #56	; 0x38
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d1c:	f3ef 8310 	mrs	r3, PRIMASK
 8004d20:	617b      	str	r3, [r7, #20]
  return(result);
 8004d22:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004d24:	637b      	str	r3, [r7, #52]	; 0x34
 8004d26:	2301      	movs	r3, #1
 8004d28:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	f383 8810 	msr	PRIMASK, r3
}
 8004d30:	46c0      	nop			; (mov r8, r8)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4926      	ldr	r1, [pc, #152]	; (8004dd8 <UART_EndRxTransfer+0xc4>)
 8004d3e:	400a      	ands	r2, r1
 8004d40:	601a      	str	r2, [r3, #0]
 8004d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d44:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	f383 8810 	msr	PRIMASK, r3
}
 8004d4c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d4e:	f3ef 8310 	mrs	r3, PRIMASK
 8004d52:	623b      	str	r3, [r7, #32]
  return(result);
 8004d54:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004d56:	633b      	str	r3, [r7, #48]	; 0x30
 8004d58:	2301      	movs	r3, #1
 8004d5a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5e:	f383 8810 	msr	PRIMASK, r3
}
 8004d62:	46c0      	nop			; (mov r8, r8)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	689a      	ldr	r2, [r3, #8]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	491b      	ldr	r1, [pc, #108]	; (8004ddc <UART_EndRxTransfer+0xc8>)
 8004d70:	400a      	ands	r2, r1
 8004d72:	609a      	str	r2, [r3, #8]
 8004d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d76:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7a:	f383 8810 	msr	PRIMASK, r3
}
 8004d7e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d118      	bne.n	8004dba <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d88:	f3ef 8310 	mrs	r3, PRIMASK
 8004d8c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d8e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d92:	2301      	movs	r3, #1
 8004d94:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f383 8810 	msr	PRIMASK, r3
}
 8004d9c:	46c0      	nop			; (mov r8, r8)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2110      	movs	r1, #16
 8004daa:	438a      	bics	r2, r1
 8004dac:	601a      	str	r2, [r3, #0]
 8004dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	f383 8810 	msr	PRIMASK, r3
}
 8004db8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	228c      	movs	r2, #140	; 0x8c
 8004dbe:	2120      	movs	r1, #32
 8004dc0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004dce:	46c0      	nop			; (mov r8, r8)
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	b00e      	add	sp, #56	; 0x38
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	46c0      	nop			; (mov r8, r8)
 8004dd8:	fffffedf 	.word	0xfffffedf
 8004ddc:	effffffe 	.word	0xeffffffe

08004de0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b094      	sub	sp, #80	; 0x50
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dec:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2220      	movs	r2, #32
 8004df6:	4013      	ands	r3, r2
 8004df8:	d16f      	bne.n	8004eda <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8004dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dfc:	225e      	movs	r2, #94	; 0x5e
 8004dfe:	2100      	movs	r1, #0
 8004e00:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e02:	f3ef 8310 	mrs	r3, PRIMASK
 8004e06:	61bb      	str	r3, [r7, #24]
  return(result);
 8004e08:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	f383 8810 	msr	PRIMASK, r3
}
 8004e16:	46c0      	nop			; (mov r8, r8)
 8004e18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	493a      	ldr	r1, [pc, #232]	; (8004f0c <UART_DMAReceiveCplt+0x12c>)
 8004e24:	400a      	ands	r2, r1
 8004e26:	601a      	str	r2, [r3, #0]
 8004e28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e2a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e2c:	6a3b      	ldr	r3, [r7, #32]
 8004e2e:	f383 8810 	msr	PRIMASK, r3
}
 8004e32:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e34:	f3ef 8310 	mrs	r3, PRIMASK
 8004e38:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e3c:	647b      	str	r3, [r7, #68]	; 0x44
 8004e3e:	2301      	movs	r3, #1
 8004e40:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e44:	f383 8810 	msr	PRIMASK, r3
}
 8004e48:	46c0      	nop			; (mov r8, r8)
 8004e4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	689a      	ldr	r2, [r3, #8]
 8004e50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2101      	movs	r1, #1
 8004e56:	438a      	bics	r2, r1
 8004e58:	609a      	str	r2, [r3, #8]
 8004e5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e60:	f383 8810 	msr	PRIMASK, r3
}
 8004e64:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e66:	f3ef 8310 	mrs	r3, PRIMASK
 8004e6a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e6e:	643b      	str	r3, [r7, #64]	; 0x40
 8004e70:	2301      	movs	r3, #1
 8004e72:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e76:	f383 8810 	msr	PRIMASK, r3
}
 8004e7a:	46c0      	nop			; (mov r8, r8)
 8004e7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689a      	ldr	r2, [r3, #8]
 8004e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2140      	movs	r1, #64	; 0x40
 8004e88:	438a      	bics	r2, r1
 8004e8a:	609a      	str	r2, [r3, #8]
 8004e8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e8e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e92:	f383 8810 	msr	PRIMASK, r3
}
 8004e96:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e9a:	228c      	movs	r2, #140	; 0x8c
 8004e9c:	2120      	movs	r1, #32
 8004e9e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ea0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ea2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d118      	bne.n	8004eda <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ea8:	f3ef 8310 	mrs	r3, PRIMASK
 8004eac:	60fb      	str	r3, [r7, #12]
  return(result);
 8004eae:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	f383 8810 	msr	PRIMASK, r3
}
 8004ebc:	46c0      	nop			; (mov r8, r8)
 8004ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2110      	movs	r1, #16
 8004eca:	438a      	bics	r2, r1
 8004ecc:	601a      	str	r2, [r3, #0]
 8004ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ed0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	f383 8810 	msr	PRIMASK, r3
}
 8004ed8:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004eda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004edc:	2200      	movs	r2, #0
 8004ede:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ee2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d108      	bne.n	8004efa <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eea:	225c      	movs	r2, #92	; 0x5c
 8004eec:	5a9a      	ldrh	r2, [r3, r2]
 8004eee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ef0:	0011      	movs	r1, r2
 8004ef2:	0018      	movs	r0, r3
 8004ef4:	f7fb fefe 	bl	8000cf4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004ef8:	e003      	b.n	8004f02 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8004efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004efc:	0018      	movs	r0, r3
 8004efe:	f7ff f9c9 	bl	8004294 <HAL_UART_RxCpltCallback>
}
 8004f02:	46c0      	nop			; (mov r8, r8)
 8004f04:	46bd      	mov	sp, r7
 8004f06:	b014      	add	sp, #80	; 0x50
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	46c0      	nop			; (mov r8, r8)
 8004f0c:	fffffeff 	.word	0xfffffeff

08004f10 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2201      	movs	r2, #1
 8004f22:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d10a      	bne.n	8004f42 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	225c      	movs	r2, #92	; 0x5c
 8004f30:	5a9b      	ldrh	r3, [r3, r2]
 8004f32:	085b      	lsrs	r3, r3, #1
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	0011      	movs	r1, r2
 8004f3a:	0018      	movs	r0, r3
 8004f3c:	f7fb feda 	bl	8000cf4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f40:	e003      	b.n	8004f4a <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	0018      	movs	r0, r3
 8004f46:	f7ff f9ad 	bl	80042a4 <HAL_UART_RxHalfCpltCallback>
}
 8004f4a:	46c0      	nop			; (mov r8, r8)
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	b004      	add	sp, #16
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b086      	sub	sp, #24
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f5e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	2288      	movs	r2, #136	; 0x88
 8004f64:	589b      	ldr	r3, [r3, r2]
 8004f66:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	228c      	movs	r2, #140	; 0x8c
 8004f6c:	589b      	ldr	r3, [r3, r2]
 8004f6e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	2280      	movs	r2, #128	; 0x80
 8004f78:	4013      	ands	r3, r2
 8004f7a:	2b80      	cmp	r3, #128	; 0x80
 8004f7c:	d10a      	bne.n	8004f94 <UART_DMAError+0x42>
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	2b21      	cmp	r3, #33	; 0x21
 8004f82:	d107      	bne.n	8004f94 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	2256      	movs	r2, #86	; 0x56
 8004f88:	2100      	movs	r1, #0
 8004f8a:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	0018      	movs	r0, r3
 8004f90:	f7ff fe80 	bl	8004c94 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	2240      	movs	r2, #64	; 0x40
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	2b40      	cmp	r3, #64	; 0x40
 8004fa0:	d10a      	bne.n	8004fb8 <UART_DMAError+0x66>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2b22      	cmp	r3, #34	; 0x22
 8004fa6:	d107      	bne.n	8004fb8 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	225e      	movs	r2, #94	; 0x5e
 8004fac:	2100      	movs	r1, #0
 8004fae:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	0018      	movs	r0, r3
 8004fb4:	f7ff feae 	bl	8004d14 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	2290      	movs	r2, #144	; 0x90
 8004fbc:	589b      	ldr	r3, [r3, r2]
 8004fbe:	2210      	movs	r2, #16
 8004fc0:	431a      	orrs	r2, r3
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	2190      	movs	r1, #144	; 0x90
 8004fc6:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	0018      	movs	r0, r3
 8004fcc:	f7ff f972 	bl	80042b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fd0:	46c0      	nop			; (mov r8, r8)
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	b006      	add	sp, #24
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	225e      	movs	r2, #94	; 0x5e
 8004fea:	2100      	movs	r1, #0
 8004fec:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2256      	movs	r2, #86	; 0x56
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	0018      	movs	r0, r3
 8004ffa:	f7ff f95b 	bl	80042b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ffe:	46c0      	nop			; (mov r8, r8)
 8005000:	46bd      	mov	sp, r7
 8005002:	b004      	add	sp, #16
 8005004:	bd80      	pop	{r7, pc}

08005006 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b086      	sub	sp, #24
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800500e:	f3ef 8310 	mrs	r3, PRIMASK
 8005012:	60bb      	str	r3, [r7, #8]
  return(result);
 8005014:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005016:	617b      	str	r3, [r7, #20]
 8005018:	2301      	movs	r3, #1
 800501a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f383 8810 	msr	PRIMASK, r3
}
 8005022:	46c0      	nop			; (mov r8, r8)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2140      	movs	r1, #64	; 0x40
 8005030:	438a      	bics	r2, r1
 8005032:	601a      	str	r2, [r3, #0]
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	f383 8810 	msr	PRIMASK, r3
}
 800503e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2288      	movs	r2, #136	; 0x88
 8005044:	2120      	movs	r1, #32
 8005046:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	0018      	movs	r0, r3
 8005052:	f7ff f917 	bl	8004284 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005056:	46c0      	nop			; (mov r8, r8)
 8005058:	46bd      	mov	sp, r7
 800505a:	b006      	add	sp, #24
 800505c:	bd80      	pop	{r7, pc}

0800505e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b082      	sub	sp, #8
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005066:	46c0      	nop			; (mov r8, r8)
 8005068:	46bd      	mov	sp, r7
 800506a:	b002      	add	sp, #8
 800506c:	bd80      	pop	{r7, pc}

0800506e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b082      	sub	sp, #8
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005076:	46c0      	nop			; (mov r8, r8)
 8005078:	46bd      	mov	sp, r7
 800507a:	b002      	add	sp, #8
 800507c:	bd80      	pop	{r7, pc}

0800507e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800507e:	b580      	push	{r7, lr}
 8005080:	b082      	sub	sp, #8
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005086:	46c0      	nop			; (mov r8, r8)
 8005088:	46bd      	mov	sp, r7
 800508a:	b002      	add	sp, #8
 800508c:	bd80      	pop	{r7, pc}
	...

08005090 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2284      	movs	r2, #132	; 0x84
 800509c:	5c9b      	ldrb	r3, [r3, r2]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d101      	bne.n	80050a6 <HAL_UARTEx_DisableFifoMode+0x16>
 80050a2:	2302      	movs	r3, #2
 80050a4:	e027      	b.n	80050f6 <HAL_UARTEx_DisableFifoMode+0x66>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2284      	movs	r2, #132	; 0x84
 80050aa:	2101      	movs	r1, #1
 80050ac:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2288      	movs	r2, #136	; 0x88
 80050b2:	2124      	movs	r1, #36	; 0x24
 80050b4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2101      	movs	r1, #1
 80050ca:	438a      	bics	r2, r1
 80050cc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	4a0b      	ldr	r2, [pc, #44]	; (8005100 <HAL_UARTEx_DisableFifoMode+0x70>)
 80050d2:	4013      	ands	r3, r2
 80050d4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2288      	movs	r2, #136	; 0x88
 80050e8:	2120      	movs	r1, #32
 80050ea:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2284      	movs	r2, #132	; 0x84
 80050f0:	2100      	movs	r1, #0
 80050f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	0018      	movs	r0, r3
 80050f8:	46bd      	mov	sp, r7
 80050fa:	b004      	add	sp, #16
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	46c0      	nop			; (mov r8, r8)
 8005100:	dfffffff 	.word	0xdfffffff

08005104 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2284      	movs	r2, #132	; 0x84
 8005112:	5c9b      	ldrb	r3, [r3, r2]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d101      	bne.n	800511c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005118:	2302      	movs	r3, #2
 800511a:	e02e      	b.n	800517a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2284      	movs	r2, #132	; 0x84
 8005120:	2101      	movs	r1, #1
 8005122:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2288      	movs	r2, #136	; 0x88
 8005128:	2124      	movs	r1, #36	; 0x24
 800512a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2101      	movs	r1, #1
 8005140:	438a      	bics	r2, r1
 8005142:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	00db      	lsls	r3, r3, #3
 800514c:	08d9      	lsrs	r1, r3, #3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	683a      	ldr	r2, [r7, #0]
 8005154:	430a      	orrs	r2, r1
 8005156:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	0018      	movs	r0, r3
 800515c:	f000 f8bc 	bl	80052d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2288      	movs	r2, #136	; 0x88
 800516c:	2120      	movs	r1, #32
 800516e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2284      	movs	r2, #132	; 0x84
 8005174:	2100      	movs	r1, #0
 8005176:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	0018      	movs	r0, r3
 800517c:	46bd      	mov	sp, r7
 800517e:	b004      	add	sp, #16
 8005180:	bd80      	pop	{r7, pc}
	...

08005184 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2284      	movs	r2, #132	; 0x84
 8005192:	5c9b      	ldrb	r3, [r3, r2]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d101      	bne.n	800519c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005198:	2302      	movs	r3, #2
 800519a:	e02f      	b.n	80051fc <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2284      	movs	r2, #132	; 0x84
 80051a0:	2101      	movs	r1, #1
 80051a2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2288      	movs	r2, #136	; 0x88
 80051a8:	2124      	movs	r1, #36	; 0x24
 80051aa:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2101      	movs	r1, #1
 80051c0:	438a      	bics	r2, r1
 80051c2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	4a0e      	ldr	r2, [pc, #56]	; (8005204 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80051cc:	4013      	ands	r3, r2
 80051ce:	0019      	movs	r1, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	683a      	ldr	r2, [r7, #0]
 80051d6:	430a      	orrs	r2, r1
 80051d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	0018      	movs	r0, r3
 80051de:	f000 f87b 	bl	80052d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2288      	movs	r2, #136	; 0x88
 80051ee:	2120      	movs	r1, #32
 80051f0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2284      	movs	r2, #132	; 0x84
 80051f6:	2100      	movs	r1, #0
 80051f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	0018      	movs	r0, r3
 80051fe:	46bd      	mov	sp, r7
 8005200:	b004      	add	sp, #16
 8005202:	bd80      	pop	{r7, pc}
 8005204:	f1ffffff 	.word	0xf1ffffff

08005208 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005208:	b5b0      	push	{r4, r5, r7, lr}
 800520a:	b08a      	sub	sp, #40	; 0x28
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	1dbb      	adds	r3, r7, #6
 8005214:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	228c      	movs	r2, #140	; 0x8c
 800521a:	589b      	ldr	r3, [r3, r2]
 800521c:	2b20      	cmp	r3, #32
 800521e:	d156      	bne.n	80052ce <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d003      	beq.n	800522e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005226:	1dbb      	adds	r3, r7, #6
 8005228:	881b      	ldrh	r3, [r3, #0]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d101      	bne.n	8005232 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e04e      	b.n	80052d0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	689a      	ldr	r2, [r3, #8]
 8005236:	2380      	movs	r3, #128	; 0x80
 8005238:	015b      	lsls	r3, r3, #5
 800523a:	429a      	cmp	r2, r3
 800523c:	d109      	bne.n	8005252 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d105      	bne.n	8005252 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	2201      	movs	r2, #1
 800524a:	4013      	ands	r3, r2
 800524c:	d001      	beq.n	8005252 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e03e      	b.n	80052d0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2201      	movs	r2, #1
 8005256:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800525e:	2527      	movs	r5, #39	; 0x27
 8005260:	197c      	adds	r4, r7, r5
 8005262:	1dbb      	adds	r3, r7, #6
 8005264:	881a      	ldrh	r2, [r3, #0]
 8005266:	68b9      	ldr	r1, [r7, #8]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	0018      	movs	r0, r3
 800526c:	f7ff fc6c 	bl	8004b48 <UART_Start_Receive_DMA>
 8005270:	0003      	movs	r3, r0
 8005272:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005274:	197b      	adds	r3, r7, r5
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d124      	bne.n	80052c6 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005280:	2b01      	cmp	r3, #1
 8005282:	d11c      	bne.n	80052be <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2210      	movs	r2, #16
 800528a:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800528c:	f3ef 8310 	mrs	r3, PRIMASK
 8005290:	617b      	str	r3, [r7, #20]
  return(result);
 8005292:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005294:	623b      	str	r3, [r7, #32]
 8005296:	2301      	movs	r3, #1
 8005298:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	f383 8810 	msr	PRIMASK, r3
}
 80052a0:	46c0      	nop			; (mov r8, r8)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2110      	movs	r1, #16
 80052ae:	430a      	orrs	r2, r1
 80052b0:	601a      	str	r2, [r3, #0]
 80052b2:	6a3b      	ldr	r3, [r7, #32]
 80052b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	f383 8810 	msr	PRIMASK, r3
}
 80052bc:	e003      	b.n	80052c6 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80052be:	2327      	movs	r3, #39	; 0x27
 80052c0:	18fb      	adds	r3, r7, r3
 80052c2:	2201      	movs	r2, #1
 80052c4:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 80052c6:	2327      	movs	r3, #39	; 0x27
 80052c8:	18fb      	adds	r3, r7, r3
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	e000      	b.n	80052d0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 80052ce:	2302      	movs	r3, #2
  }
}
 80052d0:	0018      	movs	r0, r3
 80052d2:	46bd      	mov	sp, r7
 80052d4:	b00a      	add	sp, #40	; 0x28
 80052d6:	bdb0      	pop	{r4, r5, r7, pc}

080052d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80052d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d108      	bne.n	80052fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	226a      	movs	r2, #106	; 0x6a
 80052ec:	2101      	movs	r1, #1
 80052ee:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2268      	movs	r2, #104	; 0x68
 80052f4:	2101      	movs	r1, #1
 80052f6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80052f8:	e043      	b.n	8005382 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80052fa:	260f      	movs	r6, #15
 80052fc:	19bb      	adds	r3, r7, r6
 80052fe:	2208      	movs	r2, #8
 8005300:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005302:	200e      	movs	r0, #14
 8005304:	183b      	adds	r3, r7, r0
 8005306:	2208      	movs	r2, #8
 8005308:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	0e5b      	lsrs	r3, r3, #25
 8005312:	b2da      	uxtb	r2, r3
 8005314:	240d      	movs	r4, #13
 8005316:	193b      	adds	r3, r7, r4
 8005318:	2107      	movs	r1, #7
 800531a:	400a      	ands	r2, r1
 800531c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	0f5b      	lsrs	r3, r3, #29
 8005326:	b2da      	uxtb	r2, r3
 8005328:	250c      	movs	r5, #12
 800532a:	197b      	adds	r3, r7, r5
 800532c:	2107      	movs	r1, #7
 800532e:	400a      	ands	r2, r1
 8005330:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005332:	183b      	adds	r3, r7, r0
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	197a      	adds	r2, r7, r5
 8005338:	7812      	ldrb	r2, [r2, #0]
 800533a:	4914      	ldr	r1, [pc, #80]	; (800538c <UARTEx_SetNbDataToProcess+0xb4>)
 800533c:	5c8a      	ldrb	r2, [r1, r2]
 800533e:	435a      	muls	r2, r3
 8005340:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005342:	197b      	adds	r3, r7, r5
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	4a12      	ldr	r2, [pc, #72]	; (8005390 <UARTEx_SetNbDataToProcess+0xb8>)
 8005348:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800534a:	0019      	movs	r1, r3
 800534c:	f7fa ff76 	bl	800023c <__divsi3>
 8005350:	0003      	movs	r3, r0
 8005352:	b299      	uxth	r1, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	226a      	movs	r2, #106	; 0x6a
 8005358:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800535a:	19bb      	adds	r3, r7, r6
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	193a      	adds	r2, r7, r4
 8005360:	7812      	ldrb	r2, [r2, #0]
 8005362:	490a      	ldr	r1, [pc, #40]	; (800538c <UARTEx_SetNbDataToProcess+0xb4>)
 8005364:	5c8a      	ldrb	r2, [r1, r2]
 8005366:	435a      	muls	r2, r3
 8005368:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800536a:	193b      	adds	r3, r7, r4
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	4a08      	ldr	r2, [pc, #32]	; (8005390 <UARTEx_SetNbDataToProcess+0xb8>)
 8005370:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005372:	0019      	movs	r1, r3
 8005374:	f7fa ff62 	bl	800023c <__divsi3>
 8005378:	0003      	movs	r3, r0
 800537a:	b299      	uxth	r1, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2268      	movs	r2, #104	; 0x68
 8005380:	5299      	strh	r1, [r3, r2]
}
 8005382:	46c0      	nop			; (mov r8, r8)
 8005384:	46bd      	mov	sp, r7
 8005386:	b005      	add	sp, #20
 8005388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800538a:	46c0      	nop			; (mov r8, r8)
 800538c:	080075e0 	.word	0x080075e0
 8005390:	080075e8 	.word	0x080075e8

08005394 <__errno>:
 8005394:	4b01      	ldr	r3, [pc, #4]	; (800539c <__errno+0x8>)
 8005396:	6818      	ldr	r0, [r3, #0]
 8005398:	4770      	bx	lr
 800539a:	46c0      	nop			; (mov r8, r8)
 800539c:	20000098 	.word	0x20000098

080053a0 <__libc_init_array>:
 80053a0:	b570      	push	{r4, r5, r6, lr}
 80053a2:	2600      	movs	r6, #0
 80053a4:	4d0c      	ldr	r5, [pc, #48]	; (80053d8 <__libc_init_array+0x38>)
 80053a6:	4c0d      	ldr	r4, [pc, #52]	; (80053dc <__libc_init_array+0x3c>)
 80053a8:	1b64      	subs	r4, r4, r5
 80053aa:	10a4      	asrs	r4, r4, #2
 80053ac:	42a6      	cmp	r6, r4
 80053ae:	d109      	bne.n	80053c4 <__libc_init_array+0x24>
 80053b0:	2600      	movs	r6, #0
 80053b2:	f001 ffe9 	bl	8007388 <_init>
 80053b6:	4d0a      	ldr	r5, [pc, #40]	; (80053e0 <__libc_init_array+0x40>)
 80053b8:	4c0a      	ldr	r4, [pc, #40]	; (80053e4 <__libc_init_array+0x44>)
 80053ba:	1b64      	subs	r4, r4, r5
 80053bc:	10a4      	asrs	r4, r4, #2
 80053be:	42a6      	cmp	r6, r4
 80053c0:	d105      	bne.n	80053ce <__libc_init_array+0x2e>
 80053c2:	bd70      	pop	{r4, r5, r6, pc}
 80053c4:	00b3      	lsls	r3, r6, #2
 80053c6:	58eb      	ldr	r3, [r5, r3]
 80053c8:	4798      	blx	r3
 80053ca:	3601      	adds	r6, #1
 80053cc:	e7ee      	b.n	80053ac <__libc_init_array+0xc>
 80053ce:	00b3      	lsls	r3, r6, #2
 80053d0:	58eb      	ldr	r3, [r5, r3]
 80053d2:	4798      	blx	r3
 80053d4:	3601      	adds	r6, #1
 80053d6:	e7f2      	b.n	80053be <__libc_init_array+0x1e>
 80053d8:	0800785c 	.word	0x0800785c
 80053dc:	0800785c 	.word	0x0800785c
 80053e0:	0800785c 	.word	0x0800785c
 80053e4:	08007860 	.word	0x08007860

080053e8 <memset>:
 80053e8:	0003      	movs	r3, r0
 80053ea:	1882      	adds	r2, r0, r2
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d100      	bne.n	80053f2 <memset+0xa>
 80053f0:	4770      	bx	lr
 80053f2:	7019      	strb	r1, [r3, #0]
 80053f4:	3301      	adds	r3, #1
 80053f6:	e7f9      	b.n	80053ec <memset+0x4>

080053f8 <sniprintf>:
 80053f8:	b40c      	push	{r2, r3}
 80053fa:	b530      	push	{r4, r5, lr}
 80053fc:	4b17      	ldr	r3, [pc, #92]	; (800545c <sniprintf+0x64>)
 80053fe:	000c      	movs	r4, r1
 8005400:	681d      	ldr	r5, [r3, #0]
 8005402:	b09d      	sub	sp, #116	; 0x74
 8005404:	2900      	cmp	r1, #0
 8005406:	da08      	bge.n	800541a <sniprintf+0x22>
 8005408:	238b      	movs	r3, #139	; 0x8b
 800540a:	2001      	movs	r0, #1
 800540c:	602b      	str	r3, [r5, #0]
 800540e:	4240      	negs	r0, r0
 8005410:	b01d      	add	sp, #116	; 0x74
 8005412:	bc30      	pop	{r4, r5}
 8005414:	bc08      	pop	{r3}
 8005416:	b002      	add	sp, #8
 8005418:	4718      	bx	r3
 800541a:	2382      	movs	r3, #130	; 0x82
 800541c:	466a      	mov	r2, sp
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	8293      	strh	r3, [r2, #20]
 8005422:	2300      	movs	r3, #0
 8005424:	9002      	str	r0, [sp, #8]
 8005426:	9006      	str	r0, [sp, #24]
 8005428:	4299      	cmp	r1, r3
 800542a:	d000      	beq.n	800542e <sniprintf+0x36>
 800542c:	1e4b      	subs	r3, r1, #1
 800542e:	9304      	str	r3, [sp, #16]
 8005430:	9307      	str	r3, [sp, #28]
 8005432:	2301      	movs	r3, #1
 8005434:	466a      	mov	r2, sp
 8005436:	425b      	negs	r3, r3
 8005438:	82d3      	strh	r3, [r2, #22]
 800543a:	0028      	movs	r0, r5
 800543c:	ab21      	add	r3, sp, #132	; 0x84
 800543e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005440:	a902      	add	r1, sp, #8
 8005442:	9301      	str	r3, [sp, #4]
 8005444:	f000 face 	bl	80059e4 <_svfiprintf_r>
 8005448:	1c43      	adds	r3, r0, #1
 800544a:	da01      	bge.n	8005450 <sniprintf+0x58>
 800544c:	238b      	movs	r3, #139	; 0x8b
 800544e:	602b      	str	r3, [r5, #0]
 8005450:	2c00      	cmp	r4, #0
 8005452:	d0dd      	beq.n	8005410 <sniprintf+0x18>
 8005454:	2300      	movs	r3, #0
 8005456:	9a02      	ldr	r2, [sp, #8]
 8005458:	7013      	strb	r3, [r2, #0]
 800545a:	e7d9      	b.n	8005410 <sniprintf+0x18>
 800545c:	20000098 	.word	0x20000098

08005460 <siprintf>:
 8005460:	b40e      	push	{r1, r2, r3}
 8005462:	b500      	push	{lr}
 8005464:	490b      	ldr	r1, [pc, #44]	; (8005494 <siprintf+0x34>)
 8005466:	b09c      	sub	sp, #112	; 0x70
 8005468:	ab1d      	add	r3, sp, #116	; 0x74
 800546a:	9002      	str	r0, [sp, #8]
 800546c:	9006      	str	r0, [sp, #24]
 800546e:	9107      	str	r1, [sp, #28]
 8005470:	9104      	str	r1, [sp, #16]
 8005472:	4809      	ldr	r0, [pc, #36]	; (8005498 <siprintf+0x38>)
 8005474:	4909      	ldr	r1, [pc, #36]	; (800549c <siprintf+0x3c>)
 8005476:	cb04      	ldmia	r3!, {r2}
 8005478:	9105      	str	r1, [sp, #20]
 800547a:	6800      	ldr	r0, [r0, #0]
 800547c:	a902      	add	r1, sp, #8
 800547e:	9301      	str	r3, [sp, #4]
 8005480:	f000 fab0 	bl	80059e4 <_svfiprintf_r>
 8005484:	2300      	movs	r3, #0
 8005486:	9a02      	ldr	r2, [sp, #8]
 8005488:	7013      	strb	r3, [r2, #0]
 800548a:	b01c      	add	sp, #112	; 0x70
 800548c:	bc08      	pop	{r3}
 800548e:	b003      	add	sp, #12
 8005490:	4718      	bx	r3
 8005492:	46c0      	nop			; (mov r8, r8)
 8005494:	7fffffff 	.word	0x7fffffff
 8005498:	20000098 	.word	0x20000098
 800549c:	ffff0208 	.word	0xffff0208

080054a0 <siscanf>:
 80054a0:	b40e      	push	{r1, r2, r3}
 80054a2:	b530      	push	{r4, r5, lr}
 80054a4:	2381      	movs	r3, #129	; 0x81
 80054a6:	b09c      	sub	sp, #112	; 0x70
 80054a8:	466a      	mov	r2, sp
 80054aa:	ac1f      	add	r4, sp, #124	; 0x7c
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	cc20      	ldmia	r4!, {r5}
 80054b0:	8293      	strh	r3, [r2, #20]
 80054b2:	9002      	str	r0, [sp, #8]
 80054b4:	9006      	str	r0, [sp, #24]
 80054b6:	f7fa fe25 	bl	8000104 <strlen>
 80054ba:	4b0b      	ldr	r3, [pc, #44]	; (80054e8 <siscanf+0x48>)
 80054bc:	466a      	mov	r2, sp
 80054be:	930b      	str	r3, [sp, #44]	; 0x2c
 80054c0:	2300      	movs	r3, #0
 80054c2:	9003      	str	r0, [sp, #12]
 80054c4:	9007      	str	r0, [sp, #28]
 80054c6:	4809      	ldr	r0, [pc, #36]	; (80054ec <siscanf+0x4c>)
 80054c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80054ca:	9314      	str	r3, [sp, #80]	; 0x50
 80054cc:	3b01      	subs	r3, #1
 80054ce:	82d3      	strh	r3, [r2, #22]
 80054d0:	a902      	add	r1, sp, #8
 80054d2:	0023      	movs	r3, r4
 80054d4:	002a      	movs	r2, r5
 80054d6:	6800      	ldr	r0, [r0, #0]
 80054d8:	9401      	str	r4, [sp, #4]
 80054da:	f000 fbdf 	bl	8005c9c <__ssvfiscanf_r>
 80054de:	b01c      	add	sp, #112	; 0x70
 80054e0:	bc30      	pop	{r4, r5}
 80054e2:	bc08      	pop	{r3}
 80054e4:	b003      	add	sp, #12
 80054e6:	4718      	bx	r3
 80054e8:	08005519 	.word	0x08005519
 80054ec:	20000098 	.word	0x20000098

080054f0 <__sread>:
 80054f0:	b570      	push	{r4, r5, r6, lr}
 80054f2:	000c      	movs	r4, r1
 80054f4:	250e      	movs	r5, #14
 80054f6:	5f49      	ldrsh	r1, [r1, r5]
 80054f8:	f001 f994 	bl	8006824 <_read_r>
 80054fc:	2800      	cmp	r0, #0
 80054fe:	db03      	blt.n	8005508 <__sread+0x18>
 8005500:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005502:	181b      	adds	r3, r3, r0
 8005504:	6563      	str	r3, [r4, #84]	; 0x54
 8005506:	bd70      	pop	{r4, r5, r6, pc}
 8005508:	89a3      	ldrh	r3, [r4, #12]
 800550a:	4a02      	ldr	r2, [pc, #8]	; (8005514 <__sread+0x24>)
 800550c:	4013      	ands	r3, r2
 800550e:	81a3      	strh	r3, [r4, #12]
 8005510:	e7f9      	b.n	8005506 <__sread+0x16>
 8005512:	46c0      	nop			; (mov r8, r8)
 8005514:	ffffefff 	.word	0xffffefff

08005518 <__seofread>:
 8005518:	2000      	movs	r0, #0
 800551a:	4770      	bx	lr

0800551c <__swrite>:
 800551c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800551e:	001f      	movs	r7, r3
 8005520:	898b      	ldrh	r3, [r1, #12]
 8005522:	0005      	movs	r5, r0
 8005524:	000c      	movs	r4, r1
 8005526:	0016      	movs	r6, r2
 8005528:	05db      	lsls	r3, r3, #23
 800552a:	d505      	bpl.n	8005538 <__swrite+0x1c>
 800552c:	230e      	movs	r3, #14
 800552e:	5ec9      	ldrsh	r1, [r1, r3]
 8005530:	2200      	movs	r2, #0
 8005532:	2302      	movs	r3, #2
 8005534:	f000 f8f4 	bl	8005720 <_lseek_r>
 8005538:	89a3      	ldrh	r3, [r4, #12]
 800553a:	4a05      	ldr	r2, [pc, #20]	; (8005550 <__swrite+0x34>)
 800553c:	0028      	movs	r0, r5
 800553e:	4013      	ands	r3, r2
 8005540:	81a3      	strh	r3, [r4, #12]
 8005542:	0032      	movs	r2, r6
 8005544:	230e      	movs	r3, #14
 8005546:	5ee1      	ldrsh	r1, [r4, r3]
 8005548:	003b      	movs	r3, r7
 800554a:	f000 f895 	bl	8005678 <_write_r>
 800554e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005550:	ffffefff 	.word	0xffffefff

08005554 <__sseek>:
 8005554:	b570      	push	{r4, r5, r6, lr}
 8005556:	000c      	movs	r4, r1
 8005558:	250e      	movs	r5, #14
 800555a:	5f49      	ldrsh	r1, [r1, r5]
 800555c:	f000 f8e0 	bl	8005720 <_lseek_r>
 8005560:	89a3      	ldrh	r3, [r4, #12]
 8005562:	1c42      	adds	r2, r0, #1
 8005564:	d103      	bne.n	800556e <__sseek+0x1a>
 8005566:	4a05      	ldr	r2, [pc, #20]	; (800557c <__sseek+0x28>)
 8005568:	4013      	ands	r3, r2
 800556a:	81a3      	strh	r3, [r4, #12]
 800556c:	bd70      	pop	{r4, r5, r6, pc}
 800556e:	2280      	movs	r2, #128	; 0x80
 8005570:	0152      	lsls	r2, r2, #5
 8005572:	4313      	orrs	r3, r2
 8005574:	81a3      	strh	r3, [r4, #12]
 8005576:	6560      	str	r0, [r4, #84]	; 0x54
 8005578:	e7f8      	b.n	800556c <__sseek+0x18>
 800557a:	46c0      	nop			; (mov r8, r8)
 800557c:	ffffefff 	.word	0xffffefff

08005580 <__sclose>:
 8005580:	b510      	push	{r4, lr}
 8005582:	230e      	movs	r3, #14
 8005584:	5ec9      	ldrsh	r1, [r1, r3]
 8005586:	f000 f8a9 	bl	80056dc <_close_r>
 800558a:	bd10      	pop	{r4, pc}

0800558c <strncmp>:
 800558c:	b530      	push	{r4, r5, lr}
 800558e:	0005      	movs	r5, r0
 8005590:	1e10      	subs	r0, r2, #0
 8005592:	d008      	beq.n	80055a6 <strncmp+0x1a>
 8005594:	2400      	movs	r4, #0
 8005596:	3a01      	subs	r2, #1
 8005598:	5d2b      	ldrb	r3, [r5, r4]
 800559a:	5d08      	ldrb	r0, [r1, r4]
 800559c:	4283      	cmp	r3, r0
 800559e:	d101      	bne.n	80055a4 <strncmp+0x18>
 80055a0:	4294      	cmp	r4, r2
 80055a2:	d101      	bne.n	80055a8 <strncmp+0x1c>
 80055a4:	1a18      	subs	r0, r3, r0
 80055a6:	bd30      	pop	{r4, r5, pc}
 80055a8:	3401      	adds	r4, #1
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1f4      	bne.n	8005598 <strncmp+0xc>
 80055ae:	e7f9      	b.n	80055a4 <strncmp+0x18>

080055b0 <strtok>:
 80055b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055b2:	4b16      	ldr	r3, [pc, #88]	; (800560c <strtok+0x5c>)
 80055b4:	0005      	movs	r5, r0
 80055b6:	681f      	ldr	r7, [r3, #0]
 80055b8:	000e      	movs	r6, r1
 80055ba:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80055bc:	2c00      	cmp	r4, #0
 80055be:	d11d      	bne.n	80055fc <strtok+0x4c>
 80055c0:	2050      	movs	r0, #80	; 0x50
 80055c2:	f000 f8c1 	bl	8005748 <malloc>
 80055c6:	1e02      	subs	r2, r0, #0
 80055c8:	65b8      	str	r0, [r7, #88]	; 0x58
 80055ca:	d104      	bne.n	80055d6 <strtok+0x26>
 80055cc:	2157      	movs	r1, #87	; 0x57
 80055ce:	4b10      	ldr	r3, [pc, #64]	; (8005610 <strtok+0x60>)
 80055d0:	4810      	ldr	r0, [pc, #64]	; (8005614 <strtok+0x64>)
 80055d2:	f000 f865 	bl	80056a0 <__assert_func>
 80055d6:	6004      	str	r4, [r0, #0]
 80055d8:	6044      	str	r4, [r0, #4]
 80055da:	6084      	str	r4, [r0, #8]
 80055dc:	60c4      	str	r4, [r0, #12]
 80055de:	6104      	str	r4, [r0, #16]
 80055e0:	6144      	str	r4, [r0, #20]
 80055e2:	6184      	str	r4, [r0, #24]
 80055e4:	6284      	str	r4, [r0, #40]	; 0x28
 80055e6:	62c4      	str	r4, [r0, #44]	; 0x2c
 80055e8:	6304      	str	r4, [r0, #48]	; 0x30
 80055ea:	6344      	str	r4, [r0, #52]	; 0x34
 80055ec:	6384      	str	r4, [r0, #56]	; 0x38
 80055ee:	63c4      	str	r4, [r0, #60]	; 0x3c
 80055f0:	6404      	str	r4, [r0, #64]	; 0x40
 80055f2:	6444      	str	r4, [r0, #68]	; 0x44
 80055f4:	6484      	str	r4, [r0, #72]	; 0x48
 80055f6:	64c4      	str	r4, [r0, #76]	; 0x4c
 80055f8:	7704      	strb	r4, [r0, #28]
 80055fa:	6244      	str	r4, [r0, #36]	; 0x24
 80055fc:	0031      	movs	r1, r6
 80055fe:	0028      	movs	r0, r5
 8005600:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005602:	2301      	movs	r3, #1
 8005604:	f000 f808 	bl	8005618 <__strtok_r>
 8005608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800560a:	46c0      	nop			; (mov r8, r8)
 800560c:	20000098 	.word	0x20000098
 8005610:	080075f4 	.word	0x080075f4
 8005614:	0800760b 	.word	0x0800760b

08005618 <__strtok_r>:
 8005618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800561a:	2800      	cmp	r0, #0
 800561c:	d102      	bne.n	8005624 <__strtok_r+0xc>
 800561e:	6810      	ldr	r0, [r2, #0]
 8005620:	2800      	cmp	r0, #0
 8005622:	d013      	beq.n	800564c <__strtok_r+0x34>
 8005624:	0004      	movs	r4, r0
 8005626:	0020      	movs	r0, r4
 8005628:	000e      	movs	r6, r1
 800562a:	7805      	ldrb	r5, [r0, #0]
 800562c:	3401      	adds	r4, #1
 800562e:	7837      	ldrb	r7, [r6, #0]
 8005630:	2f00      	cmp	r7, #0
 8005632:	d104      	bne.n	800563e <__strtok_r+0x26>
 8005634:	2d00      	cmp	r5, #0
 8005636:	d10f      	bne.n	8005658 <__strtok_r+0x40>
 8005638:	0028      	movs	r0, r5
 800563a:	6015      	str	r5, [r2, #0]
 800563c:	e006      	b.n	800564c <__strtok_r+0x34>
 800563e:	3601      	adds	r6, #1
 8005640:	42bd      	cmp	r5, r7
 8005642:	d1f4      	bne.n	800562e <__strtok_r+0x16>
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1ee      	bne.n	8005626 <__strtok_r+0xe>
 8005648:	6014      	str	r4, [r2, #0]
 800564a:	7003      	strb	r3, [r0, #0]
 800564c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800564e:	002f      	movs	r7, r5
 8005650:	e00f      	b.n	8005672 <__strtok_r+0x5a>
 8005652:	3301      	adds	r3, #1
 8005654:	2e00      	cmp	r6, #0
 8005656:	d104      	bne.n	8005662 <__strtok_r+0x4a>
 8005658:	0023      	movs	r3, r4
 800565a:	3401      	adds	r4, #1
 800565c:	781d      	ldrb	r5, [r3, #0]
 800565e:	0027      	movs	r7, r4
 8005660:	000b      	movs	r3, r1
 8005662:	781e      	ldrb	r6, [r3, #0]
 8005664:	42b5      	cmp	r5, r6
 8005666:	d1f4      	bne.n	8005652 <__strtok_r+0x3a>
 8005668:	2d00      	cmp	r5, #0
 800566a:	d0f0      	beq.n	800564e <__strtok_r+0x36>
 800566c:	2300      	movs	r3, #0
 800566e:	3c01      	subs	r4, #1
 8005670:	7023      	strb	r3, [r4, #0]
 8005672:	6017      	str	r7, [r2, #0]
 8005674:	e7ea      	b.n	800564c <__strtok_r+0x34>
	...

08005678 <_write_r>:
 8005678:	b570      	push	{r4, r5, r6, lr}
 800567a:	0004      	movs	r4, r0
 800567c:	0008      	movs	r0, r1
 800567e:	0011      	movs	r1, r2
 8005680:	001a      	movs	r2, r3
 8005682:	2300      	movs	r3, #0
 8005684:	4d05      	ldr	r5, [pc, #20]	; (800569c <_write_r+0x24>)
 8005686:	602b      	str	r3, [r5, #0]
 8005688:	f7fb fe6d 	bl	8001366 <_write>
 800568c:	1c43      	adds	r3, r0, #1
 800568e:	d103      	bne.n	8005698 <_write_r+0x20>
 8005690:	682b      	ldr	r3, [r5, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d000      	beq.n	8005698 <_write_r+0x20>
 8005696:	6023      	str	r3, [r4, #0]
 8005698:	bd70      	pop	{r4, r5, r6, pc}
 800569a:	46c0      	nop			; (mov r8, r8)
 800569c:	20000534 	.word	0x20000534

080056a0 <__assert_func>:
 80056a0:	b530      	push	{r4, r5, lr}
 80056a2:	0014      	movs	r4, r2
 80056a4:	001a      	movs	r2, r3
 80056a6:	4b09      	ldr	r3, [pc, #36]	; (80056cc <__assert_func+0x2c>)
 80056a8:	0005      	movs	r5, r0
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	b085      	sub	sp, #20
 80056ae:	68d8      	ldr	r0, [r3, #12]
 80056b0:	4b07      	ldr	r3, [pc, #28]	; (80056d0 <__assert_func+0x30>)
 80056b2:	2c00      	cmp	r4, #0
 80056b4:	d101      	bne.n	80056ba <__assert_func+0x1a>
 80056b6:	4b07      	ldr	r3, [pc, #28]	; (80056d4 <__assert_func+0x34>)
 80056b8:	001c      	movs	r4, r3
 80056ba:	9301      	str	r3, [sp, #4]
 80056bc:	9100      	str	r1, [sp, #0]
 80056be:	002b      	movs	r3, r5
 80056c0:	4905      	ldr	r1, [pc, #20]	; (80056d8 <__assert_func+0x38>)
 80056c2:	9402      	str	r4, [sp, #8]
 80056c4:	f000 f81c 	bl	8005700 <fiprintf>
 80056c8:	f001 fb3a 	bl	8006d40 <abort>
 80056cc:	20000098 	.word	0x20000098
 80056d0:	08007668 	.word	0x08007668
 80056d4:	080076a3 	.word	0x080076a3
 80056d8:	08007675 	.word	0x08007675

080056dc <_close_r>:
 80056dc:	2300      	movs	r3, #0
 80056de:	b570      	push	{r4, r5, r6, lr}
 80056e0:	4d06      	ldr	r5, [pc, #24]	; (80056fc <_close_r+0x20>)
 80056e2:	0004      	movs	r4, r0
 80056e4:	0008      	movs	r0, r1
 80056e6:	602b      	str	r3, [r5, #0]
 80056e8:	f7fb fe59 	bl	800139e <_close>
 80056ec:	1c43      	adds	r3, r0, #1
 80056ee:	d103      	bne.n	80056f8 <_close_r+0x1c>
 80056f0:	682b      	ldr	r3, [r5, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d000      	beq.n	80056f8 <_close_r+0x1c>
 80056f6:	6023      	str	r3, [r4, #0]
 80056f8:	bd70      	pop	{r4, r5, r6, pc}
 80056fa:	46c0      	nop			; (mov r8, r8)
 80056fc:	20000534 	.word	0x20000534

08005700 <fiprintf>:
 8005700:	b40e      	push	{r1, r2, r3}
 8005702:	b503      	push	{r0, r1, lr}
 8005704:	0001      	movs	r1, r0
 8005706:	ab03      	add	r3, sp, #12
 8005708:	4804      	ldr	r0, [pc, #16]	; (800571c <fiprintf+0x1c>)
 800570a:	cb04      	ldmia	r3!, {r2}
 800570c:	6800      	ldr	r0, [r0, #0]
 800570e:	9301      	str	r3, [sp, #4]
 8005710:	f000 fc6a 	bl	8005fe8 <_vfiprintf_r>
 8005714:	b002      	add	sp, #8
 8005716:	bc08      	pop	{r3}
 8005718:	b003      	add	sp, #12
 800571a:	4718      	bx	r3
 800571c:	20000098 	.word	0x20000098

08005720 <_lseek_r>:
 8005720:	b570      	push	{r4, r5, r6, lr}
 8005722:	0004      	movs	r4, r0
 8005724:	0008      	movs	r0, r1
 8005726:	0011      	movs	r1, r2
 8005728:	001a      	movs	r2, r3
 800572a:	2300      	movs	r3, #0
 800572c:	4d05      	ldr	r5, [pc, #20]	; (8005744 <_lseek_r+0x24>)
 800572e:	602b      	str	r3, [r5, #0]
 8005730:	f7fb fe56 	bl	80013e0 <_lseek>
 8005734:	1c43      	adds	r3, r0, #1
 8005736:	d103      	bne.n	8005740 <_lseek_r+0x20>
 8005738:	682b      	ldr	r3, [r5, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d000      	beq.n	8005740 <_lseek_r+0x20>
 800573e:	6023      	str	r3, [r4, #0]
 8005740:	bd70      	pop	{r4, r5, r6, pc}
 8005742:	46c0      	nop			; (mov r8, r8)
 8005744:	20000534 	.word	0x20000534

08005748 <malloc>:
 8005748:	b510      	push	{r4, lr}
 800574a:	4b03      	ldr	r3, [pc, #12]	; (8005758 <malloc+0x10>)
 800574c:	0001      	movs	r1, r0
 800574e:	6818      	ldr	r0, [r3, #0]
 8005750:	f000 f870 	bl	8005834 <_malloc_r>
 8005754:	bd10      	pop	{r4, pc}
 8005756:	46c0      	nop			; (mov r8, r8)
 8005758:	20000098 	.word	0x20000098

0800575c <_free_r>:
 800575c:	b570      	push	{r4, r5, r6, lr}
 800575e:	0005      	movs	r5, r0
 8005760:	2900      	cmp	r1, #0
 8005762:	d010      	beq.n	8005786 <_free_r+0x2a>
 8005764:	1f0c      	subs	r4, r1, #4
 8005766:	6823      	ldr	r3, [r4, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	da00      	bge.n	800576e <_free_r+0x12>
 800576c:	18e4      	adds	r4, r4, r3
 800576e:	0028      	movs	r0, r5
 8005770:	f001 fd54 	bl	800721c <__malloc_lock>
 8005774:	4a1d      	ldr	r2, [pc, #116]	; (80057ec <_free_r+0x90>)
 8005776:	6813      	ldr	r3, [r2, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d105      	bne.n	8005788 <_free_r+0x2c>
 800577c:	6063      	str	r3, [r4, #4]
 800577e:	6014      	str	r4, [r2, #0]
 8005780:	0028      	movs	r0, r5
 8005782:	f001 fd53 	bl	800722c <__malloc_unlock>
 8005786:	bd70      	pop	{r4, r5, r6, pc}
 8005788:	42a3      	cmp	r3, r4
 800578a:	d908      	bls.n	800579e <_free_r+0x42>
 800578c:	6821      	ldr	r1, [r4, #0]
 800578e:	1860      	adds	r0, r4, r1
 8005790:	4283      	cmp	r3, r0
 8005792:	d1f3      	bne.n	800577c <_free_r+0x20>
 8005794:	6818      	ldr	r0, [r3, #0]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	1841      	adds	r1, r0, r1
 800579a:	6021      	str	r1, [r4, #0]
 800579c:	e7ee      	b.n	800577c <_free_r+0x20>
 800579e:	001a      	movs	r2, r3
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d001      	beq.n	80057aa <_free_r+0x4e>
 80057a6:	42a3      	cmp	r3, r4
 80057a8:	d9f9      	bls.n	800579e <_free_r+0x42>
 80057aa:	6811      	ldr	r1, [r2, #0]
 80057ac:	1850      	adds	r0, r2, r1
 80057ae:	42a0      	cmp	r0, r4
 80057b0:	d10b      	bne.n	80057ca <_free_r+0x6e>
 80057b2:	6820      	ldr	r0, [r4, #0]
 80057b4:	1809      	adds	r1, r1, r0
 80057b6:	1850      	adds	r0, r2, r1
 80057b8:	6011      	str	r1, [r2, #0]
 80057ba:	4283      	cmp	r3, r0
 80057bc:	d1e0      	bne.n	8005780 <_free_r+0x24>
 80057be:	6818      	ldr	r0, [r3, #0]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	1841      	adds	r1, r0, r1
 80057c4:	6011      	str	r1, [r2, #0]
 80057c6:	6053      	str	r3, [r2, #4]
 80057c8:	e7da      	b.n	8005780 <_free_r+0x24>
 80057ca:	42a0      	cmp	r0, r4
 80057cc:	d902      	bls.n	80057d4 <_free_r+0x78>
 80057ce:	230c      	movs	r3, #12
 80057d0:	602b      	str	r3, [r5, #0]
 80057d2:	e7d5      	b.n	8005780 <_free_r+0x24>
 80057d4:	6821      	ldr	r1, [r4, #0]
 80057d6:	1860      	adds	r0, r4, r1
 80057d8:	4283      	cmp	r3, r0
 80057da:	d103      	bne.n	80057e4 <_free_r+0x88>
 80057dc:	6818      	ldr	r0, [r3, #0]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	1841      	adds	r1, r0, r1
 80057e2:	6021      	str	r1, [r4, #0]
 80057e4:	6063      	str	r3, [r4, #4]
 80057e6:	6054      	str	r4, [r2, #4]
 80057e8:	e7ca      	b.n	8005780 <_free_r+0x24>
 80057ea:	46c0      	nop			; (mov r8, r8)
 80057ec:	2000052c 	.word	0x2000052c

080057f0 <sbrk_aligned>:
 80057f0:	b570      	push	{r4, r5, r6, lr}
 80057f2:	4e0f      	ldr	r6, [pc, #60]	; (8005830 <sbrk_aligned+0x40>)
 80057f4:	000d      	movs	r5, r1
 80057f6:	6831      	ldr	r1, [r6, #0]
 80057f8:	0004      	movs	r4, r0
 80057fa:	2900      	cmp	r1, #0
 80057fc:	d102      	bne.n	8005804 <sbrk_aligned+0x14>
 80057fe:	f001 f825 	bl	800684c <_sbrk_r>
 8005802:	6030      	str	r0, [r6, #0]
 8005804:	0029      	movs	r1, r5
 8005806:	0020      	movs	r0, r4
 8005808:	f001 f820 	bl	800684c <_sbrk_r>
 800580c:	1c43      	adds	r3, r0, #1
 800580e:	d00a      	beq.n	8005826 <sbrk_aligned+0x36>
 8005810:	2303      	movs	r3, #3
 8005812:	1cc5      	adds	r5, r0, #3
 8005814:	439d      	bics	r5, r3
 8005816:	42a8      	cmp	r0, r5
 8005818:	d007      	beq.n	800582a <sbrk_aligned+0x3a>
 800581a:	1a29      	subs	r1, r5, r0
 800581c:	0020      	movs	r0, r4
 800581e:	f001 f815 	bl	800684c <_sbrk_r>
 8005822:	1c43      	adds	r3, r0, #1
 8005824:	d101      	bne.n	800582a <sbrk_aligned+0x3a>
 8005826:	2501      	movs	r5, #1
 8005828:	426d      	negs	r5, r5
 800582a:	0028      	movs	r0, r5
 800582c:	bd70      	pop	{r4, r5, r6, pc}
 800582e:	46c0      	nop			; (mov r8, r8)
 8005830:	20000530 	.word	0x20000530

08005834 <_malloc_r>:
 8005834:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005836:	2203      	movs	r2, #3
 8005838:	1ccb      	adds	r3, r1, #3
 800583a:	4393      	bics	r3, r2
 800583c:	3308      	adds	r3, #8
 800583e:	0006      	movs	r6, r0
 8005840:	001f      	movs	r7, r3
 8005842:	2b0c      	cmp	r3, #12
 8005844:	d232      	bcs.n	80058ac <_malloc_r+0x78>
 8005846:	270c      	movs	r7, #12
 8005848:	42b9      	cmp	r1, r7
 800584a:	d831      	bhi.n	80058b0 <_malloc_r+0x7c>
 800584c:	0030      	movs	r0, r6
 800584e:	f001 fce5 	bl	800721c <__malloc_lock>
 8005852:	4d32      	ldr	r5, [pc, #200]	; (800591c <_malloc_r+0xe8>)
 8005854:	682b      	ldr	r3, [r5, #0]
 8005856:	001c      	movs	r4, r3
 8005858:	2c00      	cmp	r4, #0
 800585a:	d12e      	bne.n	80058ba <_malloc_r+0x86>
 800585c:	0039      	movs	r1, r7
 800585e:	0030      	movs	r0, r6
 8005860:	f7ff ffc6 	bl	80057f0 <sbrk_aligned>
 8005864:	0004      	movs	r4, r0
 8005866:	1c43      	adds	r3, r0, #1
 8005868:	d11e      	bne.n	80058a8 <_malloc_r+0x74>
 800586a:	682c      	ldr	r4, [r5, #0]
 800586c:	0025      	movs	r5, r4
 800586e:	2d00      	cmp	r5, #0
 8005870:	d14a      	bne.n	8005908 <_malloc_r+0xd4>
 8005872:	6823      	ldr	r3, [r4, #0]
 8005874:	0029      	movs	r1, r5
 8005876:	18e3      	adds	r3, r4, r3
 8005878:	0030      	movs	r0, r6
 800587a:	9301      	str	r3, [sp, #4]
 800587c:	f000 ffe6 	bl	800684c <_sbrk_r>
 8005880:	9b01      	ldr	r3, [sp, #4]
 8005882:	4283      	cmp	r3, r0
 8005884:	d143      	bne.n	800590e <_malloc_r+0xda>
 8005886:	6823      	ldr	r3, [r4, #0]
 8005888:	3703      	adds	r7, #3
 800588a:	1aff      	subs	r7, r7, r3
 800588c:	2303      	movs	r3, #3
 800588e:	439f      	bics	r7, r3
 8005890:	3708      	adds	r7, #8
 8005892:	2f0c      	cmp	r7, #12
 8005894:	d200      	bcs.n	8005898 <_malloc_r+0x64>
 8005896:	270c      	movs	r7, #12
 8005898:	0039      	movs	r1, r7
 800589a:	0030      	movs	r0, r6
 800589c:	f7ff ffa8 	bl	80057f0 <sbrk_aligned>
 80058a0:	1c43      	adds	r3, r0, #1
 80058a2:	d034      	beq.n	800590e <_malloc_r+0xda>
 80058a4:	6823      	ldr	r3, [r4, #0]
 80058a6:	19df      	adds	r7, r3, r7
 80058a8:	6027      	str	r7, [r4, #0]
 80058aa:	e013      	b.n	80058d4 <_malloc_r+0xa0>
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	dacb      	bge.n	8005848 <_malloc_r+0x14>
 80058b0:	230c      	movs	r3, #12
 80058b2:	2500      	movs	r5, #0
 80058b4:	6033      	str	r3, [r6, #0]
 80058b6:	0028      	movs	r0, r5
 80058b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80058ba:	6822      	ldr	r2, [r4, #0]
 80058bc:	1bd1      	subs	r1, r2, r7
 80058be:	d420      	bmi.n	8005902 <_malloc_r+0xce>
 80058c0:	290b      	cmp	r1, #11
 80058c2:	d917      	bls.n	80058f4 <_malloc_r+0xc0>
 80058c4:	19e2      	adds	r2, r4, r7
 80058c6:	6027      	str	r7, [r4, #0]
 80058c8:	42a3      	cmp	r3, r4
 80058ca:	d111      	bne.n	80058f0 <_malloc_r+0xbc>
 80058cc:	602a      	str	r2, [r5, #0]
 80058ce:	6863      	ldr	r3, [r4, #4]
 80058d0:	6011      	str	r1, [r2, #0]
 80058d2:	6053      	str	r3, [r2, #4]
 80058d4:	0030      	movs	r0, r6
 80058d6:	0025      	movs	r5, r4
 80058d8:	f001 fca8 	bl	800722c <__malloc_unlock>
 80058dc:	2207      	movs	r2, #7
 80058de:	350b      	adds	r5, #11
 80058e0:	1d23      	adds	r3, r4, #4
 80058e2:	4395      	bics	r5, r2
 80058e4:	1aea      	subs	r2, r5, r3
 80058e6:	429d      	cmp	r5, r3
 80058e8:	d0e5      	beq.n	80058b6 <_malloc_r+0x82>
 80058ea:	1b5b      	subs	r3, r3, r5
 80058ec:	50a3      	str	r3, [r4, r2]
 80058ee:	e7e2      	b.n	80058b6 <_malloc_r+0x82>
 80058f0:	605a      	str	r2, [r3, #4]
 80058f2:	e7ec      	b.n	80058ce <_malloc_r+0x9a>
 80058f4:	6862      	ldr	r2, [r4, #4]
 80058f6:	42a3      	cmp	r3, r4
 80058f8:	d101      	bne.n	80058fe <_malloc_r+0xca>
 80058fa:	602a      	str	r2, [r5, #0]
 80058fc:	e7ea      	b.n	80058d4 <_malloc_r+0xa0>
 80058fe:	605a      	str	r2, [r3, #4]
 8005900:	e7e8      	b.n	80058d4 <_malloc_r+0xa0>
 8005902:	0023      	movs	r3, r4
 8005904:	6864      	ldr	r4, [r4, #4]
 8005906:	e7a7      	b.n	8005858 <_malloc_r+0x24>
 8005908:	002c      	movs	r4, r5
 800590a:	686d      	ldr	r5, [r5, #4]
 800590c:	e7af      	b.n	800586e <_malloc_r+0x3a>
 800590e:	230c      	movs	r3, #12
 8005910:	0030      	movs	r0, r6
 8005912:	6033      	str	r3, [r6, #0]
 8005914:	f001 fc8a 	bl	800722c <__malloc_unlock>
 8005918:	e7cd      	b.n	80058b6 <_malloc_r+0x82>
 800591a:	46c0      	nop			; (mov r8, r8)
 800591c:	2000052c 	.word	0x2000052c

08005920 <__ssputs_r>:
 8005920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005922:	688e      	ldr	r6, [r1, #8]
 8005924:	b085      	sub	sp, #20
 8005926:	0007      	movs	r7, r0
 8005928:	000c      	movs	r4, r1
 800592a:	9203      	str	r2, [sp, #12]
 800592c:	9301      	str	r3, [sp, #4]
 800592e:	429e      	cmp	r6, r3
 8005930:	d83c      	bhi.n	80059ac <__ssputs_r+0x8c>
 8005932:	2390      	movs	r3, #144	; 0x90
 8005934:	898a      	ldrh	r2, [r1, #12]
 8005936:	00db      	lsls	r3, r3, #3
 8005938:	421a      	tst	r2, r3
 800593a:	d034      	beq.n	80059a6 <__ssputs_r+0x86>
 800593c:	6909      	ldr	r1, [r1, #16]
 800593e:	6823      	ldr	r3, [r4, #0]
 8005940:	6960      	ldr	r0, [r4, #20]
 8005942:	1a5b      	subs	r3, r3, r1
 8005944:	9302      	str	r3, [sp, #8]
 8005946:	2303      	movs	r3, #3
 8005948:	4343      	muls	r3, r0
 800594a:	0fdd      	lsrs	r5, r3, #31
 800594c:	18ed      	adds	r5, r5, r3
 800594e:	9b01      	ldr	r3, [sp, #4]
 8005950:	9802      	ldr	r0, [sp, #8]
 8005952:	3301      	adds	r3, #1
 8005954:	181b      	adds	r3, r3, r0
 8005956:	106d      	asrs	r5, r5, #1
 8005958:	42ab      	cmp	r3, r5
 800595a:	d900      	bls.n	800595e <__ssputs_r+0x3e>
 800595c:	001d      	movs	r5, r3
 800595e:	0553      	lsls	r3, r2, #21
 8005960:	d532      	bpl.n	80059c8 <__ssputs_r+0xa8>
 8005962:	0029      	movs	r1, r5
 8005964:	0038      	movs	r0, r7
 8005966:	f7ff ff65 	bl	8005834 <_malloc_r>
 800596a:	1e06      	subs	r6, r0, #0
 800596c:	d109      	bne.n	8005982 <__ssputs_r+0x62>
 800596e:	230c      	movs	r3, #12
 8005970:	603b      	str	r3, [r7, #0]
 8005972:	2340      	movs	r3, #64	; 0x40
 8005974:	2001      	movs	r0, #1
 8005976:	89a2      	ldrh	r2, [r4, #12]
 8005978:	4240      	negs	r0, r0
 800597a:	4313      	orrs	r3, r2
 800597c:	81a3      	strh	r3, [r4, #12]
 800597e:	b005      	add	sp, #20
 8005980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005982:	9a02      	ldr	r2, [sp, #8]
 8005984:	6921      	ldr	r1, [r4, #16]
 8005986:	f001 fc2c 	bl	80071e2 <memcpy>
 800598a:	89a3      	ldrh	r3, [r4, #12]
 800598c:	4a14      	ldr	r2, [pc, #80]	; (80059e0 <__ssputs_r+0xc0>)
 800598e:	401a      	ands	r2, r3
 8005990:	2380      	movs	r3, #128	; 0x80
 8005992:	4313      	orrs	r3, r2
 8005994:	81a3      	strh	r3, [r4, #12]
 8005996:	9b02      	ldr	r3, [sp, #8]
 8005998:	6126      	str	r6, [r4, #16]
 800599a:	18f6      	adds	r6, r6, r3
 800599c:	6026      	str	r6, [r4, #0]
 800599e:	6165      	str	r5, [r4, #20]
 80059a0:	9e01      	ldr	r6, [sp, #4]
 80059a2:	1aed      	subs	r5, r5, r3
 80059a4:	60a5      	str	r5, [r4, #8]
 80059a6:	9b01      	ldr	r3, [sp, #4]
 80059a8:	429e      	cmp	r6, r3
 80059aa:	d900      	bls.n	80059ae <__ssputs_r+0x8e>
 80059ac:	9e01      	ldr	r6, [sp, #4]
 80059ae:	0032      	movs	r2, r6
 80059b0:	9903      	ldr	r1, [sp, #12]
 80059b2:	6820      	ldr	r0, [r4, #0]
 80059b4:	f001 fc1e 	bl	80071f4 <memmove>
 80059b8:	68a3      	ldr	r3, [r4, #8]
 80059ba:	2000      	movs	r0, #0
 80059bc:	1b9b      	subs	r3, r3, r6
 80059be:	60a3      	str	r3, [r4, #8]
 80059c0:	6823      	ldr	r3, [r4, #0]
 80059c2:	199e      	adds	r6, r3, r6
 80059c4:	6026      	str	r6, [r4, #0]
 80059c6:	e7da      	b.n	800597e <__ssputs_r+0x5e>
 80059c8:	002a      	movs	r2, r5
 80059ca:	0038      	movs	r0, r7
 80059cc:	f001 fc36 	bl	800723c <_realloc_r>
 80059d0:	1e06      	subs	r6, r0, #0
 80059d2:	d1e0      	bne.n	8005996 <__ssputs_r+0x76>
 80059d4:	0038      	movs	r0, r7
 80059d6:	6921      	ldr	r1, [r4, #16]
 80059d8:	f7ff fec0 	bl	800575c <_free_r>
 80059dc:	e7c7      	b.n	800596e <__ssputs_r+0x4e>
 80059de:	46c0      	nop			; (mov r8, r8)
 80059e0:	fffffb7f 	.word	0xfffffb7f

080059e4 <_svfiprintf_r>:
 80059e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059e6:	b0a1      	sub	sp, #132	; 0x84
 80059e8:	9003      	str	r0, [sp, #12]
 80059ea:	001d      	movs	r5, r3
 80059ec:	898b      	ldrh	r3, [r1, #12]
 80059ee:	000f      	movs	r7, r1
 80059f0:	0016      	movs	r6, r2
 80059f2:	061b      	lsls	r3, r3, #24
 80059f4:	d511      	bpl.n	8005a1a <_svfiprintf_r+0x36>
 80059f6:	690b      	ldr	r3, [r1, #16]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d10e      	bne.n	8005a1a <_svfiprintf_r+0x36>
 80059fc:	2140      	movs	r1, #64	; 0x40
 80059fe:	f7ff ff19 	bl	8005834 <_malloc_r>
 8005a02:	6038      	str	r0, [r7, #0]
 8005a04:	6138      	str	r0, [r7, #16]
 8005a06:	2800      	cmp	r0, #0
 8005a08:	d105      	bne.n	8005a16 <_svfiprintf_r+0x32>
 8005a0a:	230c      	movs	r3, #12
 8005a0c:	9a03      	ldr	r2, [sp, #12]
 8005a0e:	3801      	subs	r0, #1
 8005a10:	6013      	str	r3, [r2, #0]
 8005a12:	b021      	add	sp, #132	; 0x84
 8005a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a16:	2340      	movs	r3, #64	; 0x40
 8005a18:	617b      	str	r3, [r7, #20]
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	ac08      	add	r4, sp, #32
 8005a1e:	6163      	str	r3, [r4, #20]
 8005a20:	3320      	adds	r3, #32
 8005a22:	7663      	strb	r3, [r4, #25]
 8005a24:	3310      	adds	r3, #16
 8005a26:	76a3      	strb	r3, [r4, #26]
 8005a28:	9507      	str	r5, [sp, #28]
 8005a2a:	0035      	movs	r5, r6
 8005a2c:	782b      	ldrb	r3, [r5, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d001      	beq.n	8005a36 <_svfiprintf_r+0x52>
 8005a32:	2b25      	cmp	r3, #37	; 0x25
 8005a34:	d147      	bne.n	8005ac6 <_svfiprintf_r+0xe2>
 8005a36:	1bab      	subs	r3, r5, r6
 8005a38:	9305      	str	r3, [sp, #20]
 8005a3a:	42b5      	cmp	r5, r6
 8005a3c:	d00c      	beq.n	8005a58 <_svfiprintf_r+0x74>
 8005a3e:	0032      	movs	r2, r6
 8005a40:	0039      	movs	r1, r7
 8005a42:	9803      	ldr	r0, [sp, #12]
 8005a44:	f7ff ff6c 	bl	8005920 <__ssputs_r>
 8005a48:	1c43      	adds	r3, r0, #1
 8005a4a:	d100      	bne.n	8005a4e <_svfiprintf_r+0x6a>
 8005a4c:	e0ae      	b.n	8005bac <_svfiprintf_r+0x1c8>
 8005a4e:	6962      	ldr	r2, [r4, #20]
 8005a50:	9b05      	ldr	r3, [sp, #20]
 8005a52:	4694      	mov	ip, r2
 8005a54:	4463      	add	r3, ip
 8005a56:	6163      	str	r3, [r4, #20]
 8005a58:	782b      	ldrb	r3, [r5, #0]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d100      	bne.n	8005a60 <_svfiprintf_r+0x7c>
 8005a5e:	e0a5      	b.n	8005bac <_svfiprintf_r+0x1c8>
 8005a60:	2201      	movs	r2, #1
 8005a62:	2300      	movs	r3, #0
 8005a64:	4252      	negs	r2, r2
 8005a66:	6062      	str	r2, [r4, #4]
 8005a68:	a904      	add	r1, sp, #16
 8005a6a:	3254      	adds	r2, #84	; 0x54
 8005a6c:	1852      	adds	r2, r2, r1
 8005a6e:	1c6e      	adds	r6, r5, #1
 8005a70:	6023      	str	r3, [r4, #0]
 8005a72:	60e3      	str	r3, [r4, #12]
 8005a74:	60a3      	str	r3, [r4, #8]
 8005a76:	7013      	strb	r3, [r2, #0]
 8005a78:	65a3      	str	r3, [r4, #88]	; 0x58
 8005a7a:	2205      	movs	r2, #5
 8005a7c:	7831      	ldrb	r1, [r6, #0]
 8005a7e:	4854      	ldr	r0, [pc, #336]	; (8005bd0 <_svfiprintf_r+0x1ec>)
 8005a80:	f001 fba4 	bl	80071cc <memchr>
 8005a84:	1c75      	adds	r5, r6, #1
 8005a86:	2800      	cmp	r0, #0
 8005a88:	d11f      	bne.n	8005aca <_svfiprintf_r+0xe6>
 8005a8a:	6822      	ldr	r2, [r4, #0]
 8005a8c:	06d3      	lsls	r3, r2, #27
 8005a8e:	d504      	bpl.n	8005a9a <_svfiprintf_r+0xb6>
 8005a90:	2353      	movs	r3, #83	; 0x53
 8005a92:	a904      	add	r1, sp, #16
 8005a94:	185b      	adds	r3, r3, r1
 8005a96:	2120      	movs	r1, #32
 8005a98:	7019      	strb	r1, [r3, #0]
 8005a9a:	0713      	lsls	r3, r2, #28
 8005a9c:	d504      	bpl.n	8005aa8 <_svfiprintf_r+0xc4>
 8005a9e:	2353      	movs	r3, #83	; 0x53
 8005aa0:	a904      	add	r1, sp, #16
 8005aa2:	185b      	adds	r3, r3, r1
 8005aa4:	212b      	movs	r1, #43	; 0x2b
 8005aa6:	7019      	strb	r1, [r3, #0]
 8005aa8:	7833      	ldrb	r3, [r6, #0]
 8005aaa:	2b2a      	cmp	r3, #42	; 0x2a
 8005aac:	d016      	beq.n	8005adc <_svfiprintf_r+0xf8>
 8005aae:	0035      	movs	r5, r6
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	200a      	movs	r0, #10
 8005ab4:	68e3      	ldr	r3, [r4, #12]
 8005ab6:	782a      	ldrb	r2, [r5, #0]
 8005ab8:	1c6e      	adds	r6, r5, #1
 8005aba:	3a30      	subs	r2, #48	; 0x30
 8005abc:	2a09      	cmp	r2, #9
 8005abe:	d94e      	bls.n	8005b5e <_svfiprintf_r+0x17a>
 8005ac0:	2900      	cmp	r1, #0
 8005ac2:	d111      	bne.n	8005ae8 <_svfiprintf_r+0x104>
 8005ac4:	e017      	b.n	8005af6 <_svfiprintf_r+0x112>
 8005ac6:	3501      	adds	r5, #1
 8005ac8:	e7b0      	b.n	8005a2c <_svfiprintf_r+0x48>
 8005aca:	4b41      	ldr	r3, [pc, #260]	; (8005bd0 <_svfiprintf_r+0x1ec>)
 8005acc:	6822      	ldr	r2, [r4, #0]
 8005ace:	1ac0      	subs	r0, r0, r3
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	4083      	lsls	r3, r0
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	002e      	movs	r6, r5
 8005ad8:	6023      	str	r3, [r4, #0]
 8005ada:	e7ce      	b.n	8005a7a <_svfiprintf_r+0x96>
 8005adc:	9b07      	ldr	r3, [sp, #28]
 8005ade:	1d19      	adds	r1, r3, #4
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	9107      	str	r1, [sp, #28]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	db01      	blt.n	8005aec <_svfiprintf_r+0x108>
 8005ae8:	930b      	str	r3, [sp, #44]	; 0x2c
 8005aea:	e004      	b.n	8005af6 <_svfiprintf_r+0x112>
 8005aec:	425b      	negs	r3, r3
 8005aee:	60e3      	str	r3, [r4, #12]
 8005af0:	2302      	movs	r3, #2
 8005af2:	4313      	orrs	r3, r2
 8005af4:	6023      	str	r3, [r4, #0]
 8005af6:	782b      	ldrb	r3, [r5, #0]
 8005af8:	2b2e      	cmp	r3, #46	; 0x2e
 8005afa:	d10a      	bne.n	8005b12 <_svfiprintf_r+0x12e>
 8005afc:	786b      	ldrb	r3, [r5, #1]
 8005afe:	2b2a      	cmp	r3, #42	; 0x2a
 8005b00:	d135      	bne.n	8005b6e <_svfiprintf_r+0x18a>
 8005b02:	9b07      	ldr	r3, [sp, #28]
 8005b04:	3502      	adds	r5, #2
 8005b06:	1d1a      	adds	r2, r3, #4
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	9207      	str	r2, [sp, #28]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	db2b      	blt.n	8005b68 <_svfiprintf_r+0x184>
 8005b10:	9309      	str	r3, [sp, #36]	; 0x24
 8005b12:	4e30      	ldr	r6, [pc, #192]	; (8005bd4 <_svfiprintf_r+0x1f0>)
 8005b14:	2203      	movs	r2, #3
 8005b16:	0030      	movs	r0, r6
 8005b18:	7829      	ldrb	r1, [r5, #0]
 8005b1a:	f001 fb57 	bl	80071cc <memchr>
 8005b1e:	2800      	cmp	r0, #0
 8005b20:	d006      	beq.n	8005b30 <_svfiprintf_r+0x14c>
 8005b22:	2340      	movs	r3, #64	; 0x40
 8005b24:	1b80      	subs	r0, r0, r6
 8005b26:	4083      	lsls	r3, r0
 8005b28:	6822      	ldr	r2, [r4, #0]
 8005b2a:	3501      	adds	r5, #1
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	6023      	str	r3, [r4, #0]
 8005b30:	7829      	ldrb	r1, [r5, #0]
 8005b32:	2206      	movs	r2, #6
 8005b34:	4828      	ldr	r0, [pc, #160]	; (8005bd8 <_svfiprintf_r+0x1f4>)
 8005b36:	1c6e      	adds	r6, r5, #1
 8005b38:	7621      	strb	r1, [r4, #24]
 8005b3a:	f001 fb47 	bl	80071cc <memchr>
 8005b3e:	2800      	cmp	r0, #0
 8005b40:	d03c      	beq.n	8005bbc <_svfiprintf_r+0x1d8>
 8005b42:	4b26      	ldr	r3, [pc, #152]	; (8005bdc <_svfiprintf_r+0x1f8>)
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d125      	bne.n	8005b94 <_svfiprintf_r+0x1b0>
 8005b48:	2207      	movs	r2, #7
 8005b4a:	9b07      	ldr	r3, [sp, #28]
 8005b4c:	3307      	adds	r3, #7
 8005b4e:	4393      	bics	r3, r2
 8005b50:	3308      	adds	r3, #8
 8005b52:	9307      	str	r3, [sp, #28]
 8005b54:	6963      	ldr	r3, [r4, #20]
 8005b56:	9a04      	ldr	r2, [sp, #16]
 8005b58:	189b      	adds	r3, r3, r2
 8005b5a:	6163      	str	r3, [r4, #20]
 8005b5c:	e765      	b.n	8005a2a <_svfiprintf_r+0x46>
 8005b5e:	4343      	muls	r3, r0
 8005b60:	0035      	movs	r5, r6
 8005b62:	2101      	movs	r1, #1
 8005b64:	189b      	adds	r3, r3, r2
 8005b66:	e7a6      	b.n	8005ab6 <_svfiprintf_r+0xd2>
 8005b68:	2301      	movs	r3, #1
 8005b6a:	425b      	negs	r3, r3
 8005b6c:	e7d0      	b.n	8005b10 <_svfiprintf_r+0x12c>
 8005b6e:	2300      	movs	r3, #0
 8005b70:	200a      	movs	r0, #10
 8005b72:	001a      	movs	r2, r3
 8005b74:	3501      	adds	r5, #1
 8005b76:	6063      	str	r3, [r4, #4]
 8005b78:	7829      	ldrb	r1, [r5, #0]
 8005b7a:	1c6e      	adds	r6, r5, #1
 8005b7c:	3930      	subs	r1, #48	; 0x30
 8005b7e:	2909      	cmp	r1, #9
 8005b80:	d903      	bls.n	8005b8a <_svfiprintf_r+0x1a6>
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d0c5      	beq.n	8005b12 <_svfiprintf_r+0x12e>
 8005b86:	9209      	str	r2, [sp, #36]	; 0x24
 8005b88:	e7c3      	b.n	8005b12 <_svfiprintf_r+0x12e>
 8005b8a:	4342      	muls	r2, r0
 8005b8c:	0035      	movs	r5, r6
 8005b8e:	2301      	movs	r3, #1
 8005b90:	1852      	adds	r2, r2, r1
 8005b92:	e7f1      	b.n	8005b78 <_svfiprintf_r+0x194>
 8005b94:	ab07      	add	r3, sp, #28
 8005b96:	9300      	str	r3, [sp, #0]
 8005b98:	003a      	movs	r2, r7
 8005b9a:	0021      	movs	r1, r4
 8005b9c:	4b10      	ldr	r3, [pc, #64]	; (8005be0 <_svfiprintf_r+0x1fc>)
 8005b9e:	9803      	ldr	r0, [sp, #12]
 8005ba0:	e000      	b.n	8005ba4 <_svfiprintf_r+0x1c0>
 8005ba2:	bf00      	nop
 8005ba4:	9004      	str	r0, [sp, #16]
 8005ba6:	9b04      	ldr	r3, [sp, #16]
 8005ba8:	3301      	adds	r3, #1
 8005baa:	d1d3      	bne.n	8005b54 <_svfiprintf_r+0x170>
 8005bac:	89bb      	ldrh	r3, [r7, #12]
 8005bae:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005bb0:	065b      	lsls	r3, r3, #25
 8005bb2:	d400      	bmi.n	8005bb6 <_svfiprintf_r+0x1d2>
 8005bb4:	e72d      	b.n	8005a12 <_svfiprintf_r+0x2e>
 8005bb6:	2001      	movs	r0, #1
 8005bb8:	4240      	negs	r0, r0
 8005bba:	e72a      	b.n	8005a12 <_svfiprintf_r+0x2e>
 8005bbc:	ab07      	add	r3, sp, #28
 8005bbe:	9300      	str	r3, [sp, #0]
 8005bc0:	003a      	movs	r2, r7
 8005bc2:	0021      	movs	r1, r4
 8005bc4:	4b06      	ldr	r3, [pc, #24]	; (8005be0 <_svfiprintf_r+0x1fc>)
 8005bc6:	9803      	ldr	r0, [sp, #12]
 8005bc8:	f000 fbb8 	bl	800633c <_printf_i>
 8005bcc:	e7ea      	b.n	8005ba4 <_svfiprintf_r+0x1c0>
 8005bce:	46c0      	nop			; (mov r8, r8)
 8005bd0:	080076a4 	.word	0x080076a4
 8005bd4:	080076aa 	.word	0x080076aa
 8005bd8:	080076ae 	.word	0x080076ae
 8005bdc:	00000000 	.word	0x00000000
 8005be0:	08005921 	.word	0x08005921

08005be4 <_sungetc_r>:
 8005be4:	b570      	push	{r4, r5, r6, lr}
 8005be6:	0014      	movs	r4, r2
 8005be8:	1c4b      	adds	r3, r1, #1
 8005bea:	d103      	bne.n	8005bf4 <_sungetc_r+0x10>
 8005bec:	2501      	movs	r5, #1
 8005bee:	426d      	negs	r5, r5
 8005bf0:	0028      	movs	r0, r5
 8005bf2:	bd70      	pop	{r4, r5, r6, pc}
 8005bf4:	8993      	ldrh	r3, [r2, #12]
 8005bf6:	2220      	movs	r2, #32
 8005bf8:	4393      	bics	r3, r2
 8005bfa:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005bfc:	81a3      	strh	r3, [r4, #12]
 8005bfe:	b2ce      	uxtb	r6, r1
 8005c00:	6863      	ldr	r3, [r4, #4]
 8005c02:	b2cd      	uxtb	r5, r1
 8005c04:	2a00      	cmp	r2, #0
 8005c06:	d010      	beq.n	8005c2a <_sungetc_r+0x46>
 8005c08:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	dd07      	ble.n	8005c1e <_sungetc_r+0x3a>
 8005c0e:	6823      	ldr	r3, [r4, #0]
 8005c10:	3b01      	subs	r3, #1
 8005c12:	6023      	str	r3, [r4, #0]
 8005c14:	701e      	strb	r6, [r3, #0]
 8005c16:	6863      	ldr	r3, [r4, #4]
 8005c18:	3301      	adds	r3, #1
 8005c1a:	6063      	str	r3, [r4, #4]
 8005c1c:	e7e8      	b.n	8005bf0 <_sungetc_r+0xc>
 8005c1e:	0021      	movs	r1, r4
 8005c20:	f000 ff82 	bl	8006b28 <__submore>
 8005c24:	2800      	cmp	r0, #0
 8005c26:	d0f2      	beq.n	8005c0e <_sungetc_r+0x2a>
 8005c28:	e7e0      	b.n	8005bec <_sungetc_r+0x8>
 8005c2a:	6921      	ldr	r1, [r4, #16]
 8005c2c:	6822      	ldr	r2, [r4, #0]
 8005c2e:	2900      	cmp	r1, #0
 8005c30:	d007      	beq.n	8005c42 <_sungetc_r+0x5e>
 8005c32:	4291      	cmp	r1, r2
 8005c34:	d205      	bcs.n	8005c42 <_sungetc_r+0x5e>
 8005c36:	1e51      	subs	r1, r2, #1
 8005c38:	7808      	ldrb	r0, [r1, #0]
 8005c3a:	42a8      	cmp	r0, r5
 8005c3c:	d101      	bne.n	8005c42 <_sungetc_r+0x5e>
 8005c3e:	6021      	str	r1, [r4, #0]
 8005c40:	e7ea      	b.n	8005c18 <_sungetc_r+0x34>
 8005c42:	6423      	str	r3, [r4, #64]	; 0x40
 8005c44:	0023      	movs	r3, r4
 8005c46:	3344      	adds	r3, #68	; 0x44
 8005c48:	6363      	str	r3, [r4, #52]	; 0x34
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	63a3      	str	r3, [r4, #56]	; 0x38
 8005c4e:	0023      	movs	r3, r4
 8005c50:	3346      	adds	r3, #70	; 0x46
 8005c52:	63e2      	str	r2, [r4, #60]	; 0x3c
 8005c54:	701e      	strb	r6, [r3, #0]
 8005c56:	6023      	str	r3, [r4, #0]
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e7de      	b.n	8005c1a <_sungetc_r+0x36>

08005c5c <__ssrefill_r>:
 8005c5c:	b510      	push	{r4, lr}
 8005c5e:	000c      	movs	r4, r1
 8005c60:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005c62:	2900      	cmp	r1, #0
 8005c64:	d00e      	beq.n	8005c84 <__ssrefill_r+0x28>
 8005c66:	0023      	movs	r3, r4
 8005c68:	3344      	adds	r3, #68	; 0x44
 8005c6a:	4299      	cmp	r1, r3
 8005c6c:	d001      	beq.n	8005c72 <__ssrefill_r+0x16>
 8005c6e:	f7ff fd75 	bl	800575c <_free_r>
 8005c72:	2000      	movs	r0, #0
 8005c74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c76:	6360      	str	r0, [r4, #52]	; 0x34
 8005c78:	6063      	str	r3, [r4, #4]
 8005c7a:	4283      	cmp	r3, r0
 8005c7c:	d002      	beq.n	8005c84 <__ssrefill_r+0x28>
 8005c7e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005c80:	6023      	str	r3, [r4, #0]
 8005c82:	bd10      	pop	{r4, pc}
 8005c84:	6923      	ldr	r3, [r4, #16]
 8005c86:	2001      	movs	r0, #1
 8005c88:	6023      	str	r3, [r4, #0]
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	89a2      	ldrh	r2, [r4, #12]
 8005c8e:	6063      	str	r3, [r4, #4]
 8005c90:	3320      	adds	r3, #32
 8005c92:	4313      	orrs	r3, r2
 8005c94:	81a3      	strh	r3, [r4, #12]
 8005c96:	4240      	negs	r0, r0
 8005c98:	e7f3      	b.n	8005c82 <__ssrefill_r+0x26>
	...

08005c9c <__ssvfiscanf_r>:
 8005c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c9e:	4cb8      	ldr	r4, [pc, #736]	; (8005f80 <__ssvfiscanf_r+0x2e4>)
 8005ca0:	0006      	movs	r6, r0
 8005ca2:	44a5      	add	sp, r4
 8005ca4:	000c      	movs	r4, r1
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	9146      	str	r1, [sp, #280]	; 0x118
 8005caa:	9147      	str	r1, [sp, #284]	; 0x11c
 8005cac:	a903      	add	r1, sp, #12
 8005cae:	9148      	str	r1, [sp, #288]	; 0x120
 8005cb0:	21be      	movs	r1, #190	; 0xbe
 8005cb2:	48b4      	ldr	r0, [pc, #720]	; (8005f84 <__ssvfiscanf_r+0x2e8>)
 8005cb4:	0049      	lsls	r1, r1, #1
 8005cb6:	ad43      	add	r5, sp, #268	; 0x10c
 8005cb8:	5068      	str	r0, [r5, r1]
 8005cba:	25c0      	movs	r5, #192	; 0xc0
 8005cbc:	49b2      	ldr	r1, [pc, #712]	; (8005f88 <__ssvfiscanf_r+0x2ec>)
 8005cbe:	006d      	lsls	r5, r5, #1
 8005cc0:	a843      	add	r0, sp, #268	; 0x10c
 8005cc2:	5141      	str	r1, [r0, r5]
 8005cc4:	9302      	str	r3, [sp, #8]
 8005cc6:	7813      	ldrb	r3, [r2, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d100      	bne.n	8005cce <__ssvfiscanf_r+0x32>
 8005ccc:	e155      	b.n	8005f7a <__ssvfiscanf_r+0x2de>
 8005cce:	49af      	ldr	r1, [pc, #700]	; (8005f8c <__ssvfiscanf_r+0x2f0>)
 8005cd0:	2508      	movs	r5, #8
 8005cd2:	5cc8      	ldrb	r0, [r1, r3]
 8005cd4:	2108      	movs	r1, #8
 8005cd6:	1c57      	adds	r7, r2, #1
 8005cd8:	4001      	ands	r1, r0
 8005cda:	4228      	tst	r0, r5
 8005cdc:	d020      	beq.n	8005d20 <__ssvfiscanf_r+0x84>
 8005cde:	6863      	ldr	r3, [r4, #4]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	dd12      	ble.n	8005d0a <__ssvfiscanf_r+0x6e>
 8005ce4:	6823      	ldr	r3, [r4, #0]
 8005ce6:	49a9      	ldr	r1, [pc, #676]	; (8005f8c <__ssvfiscanf_r+0x2f0>)
 8005ce8:	781a      	ldrb	r2, [r3, #0]
 8005cea:	5c8a      	ldrb	r2, [r1, r2]
 8005cec:	2108      	movs	r1, #8
 8005cee:	420a      	tst	r2, r1
 8005cf0:	d101      	bne.n	8005cf6 <__ssvfiscanf_r+0x5a>
 8005cf2:	003a      	movs	r2, r7
 8005cf4:	e7e7      	b.n	8005cc6 <__ssvfiscanf_r+0x2a>
 8005cf6:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	9200      	str	r2, [sp, #0]
 8005cfc:	3201      	adds	r2, #1
 8005cfe:	9247      	str	r2, [sp, #284]	; 0x11c
 8005d00:	6862      	ldr	r2, [r4, #4]
 8005d02:	6023      	str	r3, [r4, #0]
 8005d04:	3a01      	subs	r2, #1
 8005d06:	6062      	str	r2, [r4, #4]
 8005d08:	e7e9      	b.n	8005cde <__ssvfiscanf_r+0x42>
 8005d0a:	22c0      	movs	r2, #192	; 0xc0
 8005d0c:	ab43      	add	r3, sp, #268	; 0x10c
 8005d0e:	0052      	lsls	r2, r2, #1
 8005d10:	589b      	ldr	r3, [r3, r2]
 8005d12:	0021      	movs	r1, r4
 8005d14:	0030      	movs	r0, r6
 8005d16:	9300      	str	r3, [sp, #0]
 8005d18:	4798      	blx	r3
 8005d1a:	2800      	cmp	r0, #0
 8005d1c:	d0e2      	beq.n	8005ce4 <__ssvfiscanf_r+0x48>
 8005d1e:	e7e8      	b.n	8005cf2 <__ssvfiscanf_r+0x56>
 8005d20:	001d      	movs	r5, r3
 8005d22:	2b25      	cmp	r3, #37	; 0x25
 8005d24:	d164      	bne.n	8005df0 <__ssvfiscanf_r+0x154>
 8005d26:	9145      	str	r1, [sp, #276]	; 0x114
 8005d28:	9143      	str	r1, [sp, #268]	; 0x10c
 8005d2a:	7853      	ldrb	r3, [r2, #1]
 8005d2c:	2b2a      	cmp	r3, #42	; 0x2a
 8005d2e:	d102      	bne.n	8005d36 <__ssvfiscanf_r+0x9a>
 8005d30:	3b1a      	subs	r3, #26
 8005d32:	9343      	str	r3, [sp, #268]	; 0x10c
 8005d34:	1c97      	adds	r7, r2, #2
 8005d36:	003d      	movs	r5, r7
 8005d38:	220a      	movs	r2, #10
 8005d3a:	7829      	ldrb	r1, [r5, #0]
 8005d3c:	1c6b      	adds	r3, r5, #1
 8005d3e:	9300      	str	r3, [sp, #0]
 8005d40:	000b      	movs	r3, r1
 8005d42:	3b30      	subs	r3, #48	; 0x30
 8005d44:	2b09      	cmp	r3, #9
 8005d46:	d91f      	bls.n	8005d88 <__ssvfiscanf_r+0xec>
 8005d48:	4f91      	ldr	r7, [pc, #580]	; (8005f90 <__ssvfiscanf_r+0x2f4>)
 8005d4a:	2203      	movs	r2, #3
 8005d4c:	0038      	movs	r0, r7
 8005d4e:	f001 fa3d 	bl	80071cc <memchr>
 8005d52:	2800      	cmp	r0, #0
 8005d54:	d007      	beq.n	8005d66 <__ssvfiscanf_r+0xca>
 8005d56:	2301      	movs	r3, #1
 8005d58:	1bc0      	subs	r0, r0, r7
 8005d5a:	4083      	lsls	r3, r0
 8005d5c:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8005d5e:	9d00      	ldr	r5, [sp, #0]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	9201      	str	r2, [sp, #4]
 8005d64:	9343      	str	r3, [sp, #268]	; 0x10c
 8005d66:	1c6f      	adds	r7, r5, #1
 8005d68:	782d      	ldrb	r5, [r5, #0]
 8005d6a:	2d78      	cmp	r5, #120	; 0x78
 8005d6c:	d807      	bhi.n	8005d7e <__ssvfiscanf_r+0xe2>
 8005d6e:	2d57      	cmp	r5, #87	; 0x57
 8005d70:	d812      	bhi.n	8005d98 <__ssvfiscanf_r+0xfc>
 8005d72:	2d25      	cmp	r5, #37	; 0x25
 8005d74:	d03c      	beq.n	8005df0 <__ssvfiscanf_r+0x154>
 8005d76:	d836      	bhi.n	8005de6 <__ssvfiscanf_r+0x14a>
 8005d78:	2d00      	cmp	r5, #0
 8005d7a:	d100      	bne.n	8005d7e <__ssvfiscanf_r+0xe2>
 8005d7c:	e0fa      	b.n	8005f74 <__ssvfiscanf_r+0x2d8>
 8005d7e:	2303      	movs	r3, #3
 8005d80:	9349      	str	r3, [sp, #292]	; 0x124
 8005d82:	3307      	adds	r3, #7
 8005d84:	9344      	str	r3, [sp, #272]	; 0x110
 8005d86:	e06d      	b.n	8005e64 <__ssvfiscanf_r+0x1c8>
 8005d88:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8005d8a:	9d00      	ldr	r5, [sp, #0]
 8005d8c:	9301      	str	r3, [sp, #4]
 8005d8e:	4353      	muls	r3, r2
 8005d90:	3b30      	subs	r3, #48	; 0x30
 8005d92:	185b      	adds	r3, r3, r1
 8005d94:	9345      	str	r3, [sp, #276]	; 0x114
 8005d96:	e7d0      	b.n	8005d3a <__ssvfiscanf_r+0x9e>
 8005d98:	0028      	movs	r0, r5
 8005d9a:	3858      	subs	r0, #88	; 0x58
 8005d9c:	2820      	cmp	r0, #32
 8005d9e:	d8ee      	bhi.n	8005d7e <__ssvfiscanf_r+0xe2>
 8005da0:	f7fa f9b8 	bl	8000114 <__gnu_thumb1_case_shi>
 8005da4:	ffed0051 	.word	0xffed0051
 8005da8:	0087ffed 	.word	0x0087ffed
 8005dac:	ffedffed 	.word	0xffedffed
 8005db0:	ffedffed 	.word	0xffedffed
 8005db4:	ffedffed 	.word	0xffedffed
 8005db8:	0095ffed 	.word	0x0095ffed
 8005dbc:	0024007d 	.word	0x0024007d
 8005dc0:	00240024 	.word	0x00240024
 8005dc4:	007fffed 	.word	0x007fffed
 8005dc8:	ffedffed 	.word	0xffedffed
 8005dcc:	ffedffed 	.word	0xffedffed
 8005dd0:	0083009f 	.word	0x0083009f
 8005dd4:	ffed004b 	.word	0xffed004b
 8005dd8:	009dffed 	.word	0x009dffed
 8005ddc:	007dffed 	.word	0x007dffed
 8005de0:	ffedffed 	.word	0xffedffed
 8005de4:	0051      	.short	0x0051
 8005de6:	3d45      	subs	r5, #69	; 0x45
 8005de8:	2d02      	cmp	r5, #2
 8005dea:	d8c8      	bhi.n	8005d7e <__ssvfiscanf_r+0xe2>
 8005dec:	2305      	movs	r3, #5
 8005dee:	e06c      	b.n	8005eca <__ssvfiscanf_r+0x22e>
 8005df0:	6863      	ldr	r3, [r4, #4]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	dd0e      	ble.n	8005e14 <__ssvfiscanf_r+0x178>
 8005df6:	6823      	ldr	r3, [r4, #0]
 8005df8:	781a      	ldrb	r2, [r3, #0]
 8005dfa:	42aa      	cmp	r2, r5
 8005dfc:	d000      	beq.n	8005e00 <__ssvfiscanf_r+0x164>
 8005dfe:	e0bc      	b.n	8005f7a <__ssvfiscanf_r+0x2de>
 8005e00:	3301      	adds	r3, #1
 8005e02:	6862      	ldr	r2, [r4, #4]
 8005e04:	6023      	str	r3, [r4, #0]
 8005e06:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005e08:	3a01      	subs	r2, #1
 8005e0a:	9300      	str	r3, [sp, #0]
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	6062      	str	r2, [r4, #4]
 8005e10:	9347      	str	r3, [sp, #284]	; 0x11c
 8005e12:	e76e      	b.n	8005cf2 <__ssvfiscanf_r+0x56>
 8005e14:	22c0      	movs	r2, #192	; 0xc0
 8005e16:	ab43      	add	r3, sp, #268	; 0x10c
 8005e18:	0052      	lsls	r2, r2, #1
 8005e1a:	589b      	ldr	r3, [r3, r2]
 8005e1c:	0021      	movs	r1, r4
 8005e1e:	0030      	movs	r0, r6
 8005e20:	9300      	str	r3, [sp, #0]
 8005e22:	4798      	blx	r3
 8005e24:	2800      	cmp	r0, #0
 8005e26:	d0e6      	beq.n	8005df6 <__ssvfiscanf_r+0x15a>
 8005e28:	9846      	ldr	r0, [sp, #280]	; 0x118
 8005e2a:	2800      	cmp	r0, #0
 8005e2c:	d000      	beq.n	8005e30 <__ssvfiscanf_r+0x194>
 8005e2e:	e09d      	b.n	8005f6c <__ssvfiscanf_r+0x2d0>
 8005e30:	3801      	subs	r0, #1
 8005e32:	23a5      	movs	r3, #165	; 0xa5
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	449d      	add	sp, r3
 8005e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e3a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005e3c:	9300      	str	r3, [sp, #0]
 8005e3e:	2320      	movs	r3, #32
 8005e40:	9a00      	ldr	r2, [sp, #0]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	9343      	str	r3, [sp, #268]	; 0x10c
 8005e46:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005e48:	9300      	str	r3, [sp, #0]
 8005e4a:	2380      	movs	r3, #128	; 0x80
 8005e4c:	9a00      	ldr	r2, [sp, #0]
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	4313      	orrs	r3, r2
 8005e52:	9343      	str	r3, [sp, #268]	; 0x10c
 8005e54:	2310      	movs	r3, #16
 8005e56:	9344      	str	r3, [sp, #272]	; 0x110
 8005e58:	236e      	movs	r3, #110	; 0x6e
 8005e5a:	42ab      	cmp	r3, r5
 8005e5c:	41ad      	sbcs	r5, r5
 8005e5e:	426d      	negs	r5, r5
 8005e60:	3503      	adds	r5, #3
 8005e62:	9549      	str	r5, [sp, #292]	; 0x124
 8005e64:	6863      	ldr	r3, [r4, #4]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	dd4a      	ble.n	8005f00 <__ssvfiscanf_r+0x264>
 8005e6a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005e6c:	9300      	str	r3, [sp, #0]
 8005e6e:	065b      	lsls	r3, r3, #25
 8005e70:	d406      	bmi.n	8005e80 <__ssvfiscanf_r+0x1e4>
 8005e72:	6823      	ldr	r3, [r4, #0]
 8005e74:	4945      	ldr	r1, [pc, #276]	; (8005f8c <__ssvfiscanf_r+0x2f0>)
 8005e76:	781a      	ldrb	r2, [r3, #0]
 8005e78:	5c8a      	ldrb	r2, [r1, r2]
 8005e7a:	2108      	movs	r1, #8
 8005e7c:	420a      	tst	r2, r1
 8005e7e:	d14a      	bne.n	8005f16 <__ssvfiscanf_r+0x27a>
 8005e80:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	dc5e      	bgt.n	8005f44 <__ssvfiscanf_r+0x2a8>
 8005e86:	0022      	movs	r2, r4
 8005e88:	0030      	movs	r0, r6
 8005e8a:	ab02      	add	r3, sp, #8
 8005e8c:	a943      	add	r1, sp, #268	; 0x10c
 8005e8e:	f000 fb67 	bl	8006560 <_scanf_chars>
 8005e92:	2801      	cmp	r0, #1
 8005e94:	d071      	beq.n	8005f7a <__ssvfiscanf_r+0x2de>
 8005e96:	2802      	cmp	r0, #2
 8005e98:	d000      	beq.n	8005e9c <__ssvfiscanf_r+0x200>
 8005e9a:	e72a      	b.n	8005cf2 <__ssvfiscanf_r+0x56>
 8005e9c:	e7c4      	b.n	8005e28 <__ssvfiscanf_r+0x18c>
 8005e9e:	230a      	movs	r3, #10
 8005ea0:	e7d9      	b.n	8005e56 <__ssvfiscanf_r+0x1ba>
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	2503      	movs	r5, #3
 8005ea6:	9344      	str	r3, [sp, #272]	; 0x110
 8005ea8:	e7db      	b.n	8005e62 <__ssvfiscanf_r+0x1c6>
 8005eaa:	2308      	movs	r3, #8
 8005eac:	2504      	movs	r5, #4
 8005eae:	9344      	str	r3, [sp, #272]	; 0x110
 8005eb0:	e7d7      	b.n	8005e62 <__ssvfiscanf_r+0x1c6>
 8005eb2:	0039      	movs	r1, r7
 8005eb4:	a803      	add	r0, sp, #12
 8005eb6:	f000 fcdb 	bl	8006870 <__sccl>
 8005eba:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005ebc:	0007      	movs	r7, r0
 8005ebe:	9300      	str	r3, [sp, #0]
 8005ec0:	2340      	movs	r3, #64	; 0x40
 8005ec2:	9a00      	ldr	r2, [sp, #0]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	9343      	str	r3, [sp, #268]	; 0x10c
 8005ec8:	2301      	movs	r3, #1
 8005eca:	9349      	str	r3, [sp, #292]	; 0x124
 8005ecc:	e7ca      	b.n	8005e64 <__ssvfiscanf_r+0x1c8>
 8005ece:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005ed0:	9300      	str	r3, [sp, #0]
 8005ed2:	2340      	movs	r3, #64	; 0x40
 8005ed4:	9a00      	ldr	r2, [sp, #0]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	9343      	str	r3, [sp, #268]	; 0x10c
 8005eda:	2300      	movs	r3, #0
 8005edc:	e7f5      	b.n	8005eca <__ssvfiscanf_r+0x22e>
 8005ede:	2302      	movs	r3, #2
 8005ee0:	e7f3      	b.n	8005eca <__ssvfiscanf_r+0x22e>
 8005ee2:	9843      	ldr	r0, [sp, #268]	; 0x10c
 8005ee4:	06c3      	lsls	r3, r0, #27
 8005ee6:	d500      	bpl.n	8005eea <__ssvfiscanf_r+0x24e>
 8005ee8:	e703      	b.n	8005cf2 <__ssvfiscanf_r+0x56>
 8005eea:	9b02      	ldr	r3, [sp, #8]
 8005eec:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8005eee:	1d19      	adds	r1, r3, #4
 8005ef0:	9102      	str	r1, [sp, #8]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	07c5      	lsls	r5, r0, #31
 8005ef6:	d501      	bpl.n	8005efc <__ssvfiscanf_r+0x260>
 8005ef8:	801a      	strh	r2, [r3, #0]
 8005efa:	e6fa      	b.n	8005cf2 <__ssvfiscanf_r+0x56>
 8005efc:	601a      	str	r2, [r3, #0]
 8005efe:	e6f8      	b.n	8005cf2 <__ssvfiscanf_r+0x56>
 8005f00:	22c0      	movs	r2, #192	; 0xc0
 8005f02:	ab43      	add	r3, sp, #268	; 0x10c
 8005f04:	0052      	lsls	r2, r2, #1
 8005f06:	589b      	ldr	r3, [r3, r2]
 8005f08:	0021      	movs	r1, r4
 8005f0a:	0030      	movs	r0, r6
 8005f0c:	9300      	str	r3, [sp, #0]
 8005f0e:	4798      	blx	r3
 8005f10:	2800      	cmp	r0, #0
 8005f12:	d0aa      	beq.n	8005e6a <__ssvfiscanf_r+0x1ce>
 8005f14:	e788      	b.n	8005e28 <__ssvfiscanf_r+0x18c>
 8005f16:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8005f18:	9200      	str	r2, [sp, #0]
 8005f1a:	3201      	adds	r2, #1
 8005f1c:	9247      	str	r2, [sp, #284]	; 0x11c
 8005f1e:	6862      	ldr	r2, [r4, #4]
 8005f20:	3a01      	subs	r2, #1
 8005f22:	6062      	str	r2, [r4, #4]
 8005f24:	2a00      	cmp	r2, #0
 8005f26:	dd02      	ble.n	8005f2e <__ssvfiscanf_r+0x292>
 8005f28:	3301      	adds	r3, #1
 8005f2a:	6023      	str	r3, [r4, #0]
 8005f2c:	e7a1      	b.n	8005e72 <__ssvfiscanf_r+0x1d6>
 8005f2e:	22c0      	movs	r2, #192	; 0xc0
 8005f30:	ab43      	add	r3, sp, #268	; 0x10c
 8005f32:	0052      	lsls	r2, r2, #1
 8005f34:	589b      	ldr	r3, [r3, r2]
 8005f36:	0021      	movs	r1, r4
 8005f38:	0030      	movs	r0, r6
 8005f3a:	9300      	str	r3, [sp, #0]
 8005f3c:	4798      	blx	r3
 8005f3e:	2800      	cmp	r0, #0
 8005f40:	d097      	beq.n	8005e72 <__ssvfiscanf_r+0x1d6>
 8005f42:	e771      	b.n	8005e28 <__ssvfiscanf_r+0x18c>
 8005f44:	2b04      	cmp	r3, #4
 8005f46:	dc06      	bgt.n	8005f56 <__ssvfiscanf_r+0x2ba>
 8005f48:	0022      	movs	r2, r4
 8005f4a:	0030      	movs	r0, r6
 8005f4c:	ab02      	add	r3, sp, #8
 8005f4e:	a943      	add	r1, sp, #268	; 0x10c
 8005f50:	f000 fb64 	bl	800661c <_scanf_i>
 8005f54:	e79d      	b.n	8005e92 <__ssvfiscanf_r+0x1f6>
 8005f56:	4b0f      	ldr	r3, [pc, #60]	; (8005f94 <__ssvfiscanf_r+0x2f8>)
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d100      	bne.n	8005f5e <__ssvfiscanf_r+0x2c2>
 8005f5c:	e6c9      	b.n	8005cf2 <__ssvfiscanf_r+0x56>
 8005f5e:	0022      	movs	r2, r4
 8005f60:	0030      	movs	r0, r6
 8005f62:	ab02      	add	r3, sp, #8
 8005f64:	a943      	add	r1, sp, #268	; 0x10c
 8005f66:	e000      	b.n	8005f6a <__ssvfiscanf_r+0x2ce>
 8005f68:	bf00      	nop
 8005f6a:	e792      	b.n	8005e92 <__ssvfiscanf_r+0x1f6>
 8005f6c:	89a3      	ldrh	r3, [r4, #12]
 8005f6e:	065b      	lsls	r3, r3, #25
 8005f70:	d400      	bmi.n	8005f74 <__ssvfiscanf_r+0x2d8>
 8005f72:	e75e      	b.n	8005e32 <__ssvfiscanf_r+0x196>
 8005f74:	2001      	movs	r0, #1
 8005f76:	4240      	negs	r0, r0
 8005f78:	e75b      	b.n	8005e32 <__ssvfiscanf_r+0x196>
 8005f7a:	9846      	ldr	r0, [sp, #280]	; 0x118
 8005f7c:	e759      	b.n	8005e32 <__ssvfiscanf_r+0x196>
 8005f7e:	46c0      	nop			; (mov r8, r8)
 8005f80:	fffffd6c 	.word	0xfffffd6c
 8005f84:	08005be5 	.word	0x08005be5
 8005f88:	08005c5d 	.word	0x08005c5d
 8005f8c:	080076f3 	.word	0x080076f3
 8005f90:	080076aa 	.word	0x080076aa
 8005f94:	00000000 	.word	0x00000000

08005f98 <__sfputc_r>:
 8005f98:	6893      	ldr	r3, [r2, #8]
 8005f9a:	b510      	push	{r4, lr}
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	6093      	str	r3, [r2, #8]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	da04      	bge.n	8005fae <__sfputc_r+0x16>
 8005fa4:	6994      	ldr	r4, [r2, #24]
 8005fa6:	42a3      	cmp	r3, r4
 8005fa8:	db07      	blt.n	8005fba <__sfputc_r+0x22>
 8005faa:	290a      	cmp	r1, #10
 8005fac:	d005      	beq.n	8005fba <__sfputc_r+0x22>
 8005fae:	6813      	ldr	r3, [r2, #0]
 8005fb0:	1c58      	adds	r0, r3, #1
 8005fb2:	6010      	str	r0, [r2, #0]
 8005fb4:	7019      	strb	r1, [r3, #0]
 8005fb6:	0008      	movs	r0, r1
 8005fb8:	bd10      	pop	{r4, pc}
 8005fba:	f000 fdf3 	bl	8006ba4 <__swbuf_r>
 8005fbe:	0001      	movs	r1, r0
 8005fc0:	e7f9      	b.n	8005fb6 <__sfputc_r+0x1e>

08005fc2 <__sfputs_r>:
 8005fc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fc4:	0006      	movs	r6, r0
 8005fc6:	000f      	movs	r7, r1
 8005fc8:	0014      	movs	r4, r2
 8005fca:	18d5      	adds	r5, r2, r3
 8005fcc:	42ac      	cmp	r4, r5
 8005fce:	d101      	bne.n	8005fd4 <__sfputs_r+0x12>
 8005fd0:	2000      	movs	r0, #0
 8005fd2:	e007      	b.n	8005fe4 <__sfputs_r+0x22>
 8005fd4:	7821      	ldrb	r1, [r4, #0]
 8005fd6:	003a      	movs	r2, r7
 8005fd8:	0030      	movs	r0, r6
 8005fda:	f7ff ffdd 	bl	8005f98 <__sfputc_r>
 8005fde:	3401      	adds	r4, #1
 8005fe0:	1c43      	adds	r3, r0, #1
 8005fe2:	d1f3      	bne.n	8005fcc <__sfputs_r+0xa>
 8005fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005fe8 <_vfiprintf_r>:
 8005fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fea:	b0a1      	sub	sp, #132	; 0x84
 8005fec:	0006      	movs	r6, r0
 8005fee:	000c      	movs	r4, r1
 8005ff0:	001f      	movs	r7, r3
 8005ff2:	9203      	str	r2, [sp, #12]
 8005ff4:	2800      	cmp	r0, #0
 8005ff6:	d004      	beq.n	8006002 <_vfiprintf_r+0x1a>
 8005ff8:	6983      	ldr	r3, [r0, #24]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d101      	bne.n	8006002 <_vfiprintf_r+0x1a>
 8005ffe:	f000 ffd5 	bl	8006fac <__sinit>
 8006002:	4b8e      	ldr	r3, [pc, #568]	; (800623c <_vfiprintf_r+0x254>)
 8006004:	429c      	cmp	r4, r3
 8006006:	d11c      	bne.n	8006042 <_vfiprintf_r+0x5a>
 8006008:	6874      	ldr	r4, [r6, #4]
 800600a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800600c:	07db      	lsls	r3, r3, #31
 800600e:	d405      	bmi.n	800601c <_vfiprintf_r+0x34>
 8006010:	89a3      	ldrh	r3, [r4, #12]
 8006012:	059b      	lsls	r3, r3, #22
 8006014:	d402      	bmi.n	800601c <_vfiprintf_r+0x34>
 8006016:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006018:	f001 f869 	bl	80070ee <__retarget_lock_acquire_recursive>
 800601c:	89a3      	ldrh	r3, [r4, #12]
 800601e:	071b      	lsls	r3, r3, #28
 8006020:	d502      	bpl.n	8006028 <_vfiprintf_r+0x40>
 8006022:	6923      	ldr	r3, [r4, #16]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d11d      	bne.n	8006064 <_vfiprintf_r+0x7c>
 8006028:	0021      	movs	r1, r4
 800602a:	0030      	movs	r0, r6
 800602c:	f000 fe10 	bl	8006c50 <__swsetup_r>
 8006030:	2800      	cmp	r0, #0
 8006032:	d017      	beq.n	8006064 <_vfiprintf_r+0x7c>
 8006034:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006036:	07db      	lsls	r3, r3, #31
 8006038:	d50d      	bpl.n	8006056 <_vfiprintf_r+0x6e>
 800603a:	2001      	movs	r0, #1
 800603c:	4240      	negs	r0, r0
 800603e:	b021      	add	sp, #132	; 0x84
 8006040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006042:	4b7f      	ldr	r3, [pc, #508]	; (8006240 <_vfiprintf_r+0x258>)
 8006044:	429c      	cmp	r4, r3
 8006046:	d101      	bne.n	800604c <_vfiprintf_r+0x64>
 8006048:	68b4      	ldr	r4, [r6, #8]
 800604a:	e7de      	b.n	800600a <_vfiprintf_r+0x22>
 800604c:	4b7d      	ldr	r3, [pc, #500]	; (8006244 <_vfiprintf_r+0x25c>)
 800604e:	429c      	cmp	r4, r3
 8006050:	d1db      	bne.n	800600a <_vfiprintf_r+0x22>
 8006052:	68f4      	ldr	r4, [r6, #12]
 8006054:	e7d9      	b.n	800600a <_vfiprintf_r+0x22>
 8006056:	89a3      	ldrh	r3, [r4, #12]
 8006058:	059b      	lsls	r3, r3, #22
 800605a:	d4ee      	bmi.n	800603a <_vfiprintf_r+0x52>
 800605c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800605e:	f001 f847 	bl	80070f0 <__retarget_lock_release_recursive>
 8006062:	e7ea      	b.n	800603a <_vfiprintf_r+0x52>
 8006064:	2300      	movs	r3, #0
 8006066:	ad08      	add	r5, sp, #32
 8006068:	616b      	str	r3, [r5, #20]
 800606a:	3320      	adds	r3, #32
 800606c:	766b      	strb	r3, [r5, #25]
 800606e:	3310      	adds	r3, #16
 8006070:	76ab      	strb	r3, [r5, #26]
 8006072:	9707      	str	r7, [sp, #28]
 8006074:	9f03      	ldr	r7, [sp, #12]
 8006076:	783b      	ldrb	r3, [r7, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d001      	beq.n	8006080 <_vfiprintf_r+0x98>
 800607c:	2b25      	cmp	r3, #37	; 0x25
 800607e:	d14e      	bne.n	800611e <_vfiprintf_r+0x136>
 8006080:	9b03      	ldr	r3, [sp, #12]
 8006082:	1afb      	subs	r3, r7, r3
 8006084:	9305      	str	r3, [sp, #20]
 8006086:	9b03      	ldr	r3, [sp, #12]
 8006088:	429f      	cmp	r7, r3
 800608a:	d00d      	beq.n	80060a8 <_vfiprintf_r+0xc0>
 800608c:	9b05      	ldr	r3, [sp, #20]
 800608e:	0021      	movs	r1, r4
 8006090:	0030      	movs	r0, r6
 8006092:	9a03      	ldr	r2, [sp, #12]
 8006094:	f7ff ff95 	bl	8005fc2 <__sfputs_r>
 8006098:	1c43      	adds	r3, r0, #1
 800609a:	d100      	bne.n	800609e <_vfiprintf_r+0xb6>
 800609c:	e0b5      	b.n	800620a <_vfiprintf_r+0x222>
 800609e:	696a      	ldr	r2, [r5, #20]
 80060a0:	9b05      	ldr	r3, [sp, #20]
 80060a2:	4694      	mov	ip, r2
 80060a4:	4463      	add	r3, ip
 80060a6:	616b      	str	r3, [r5, #20]
 80060a8:	783b      	ldrb	r3, [r7, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d100      	bne.n	80060b0 <_vfiprintf_r+0xc8>
 80060ae:	e0ac      	b.n	800620a <_vfiprintf_r+0x222>
 80060b0:	2201      	movs	r2, #1
 80060b2:	1c7b      	adds	r3, r7, #1
 80060b4:	9303      	str	r3, [sp, #12]
 80060b6:	2300      	movs	r3, #0
 80060b8:	4252      	negs	r2, r2
 80060ba:	606a      	str	r2, [r5, #4]
 80060bc:	a904      	add	r1, sp, #16
 80060be:	3254      	adds	r2, #84	; 0x54
 80060c0:	1852      	adds	r2, r2, r1
 80060c2:	602b      	str	r3, [r5, #0]
 80060c4:	60eb      	str	r3, [r5, #12]
 80060c6:	60ab      	str	r3, [r5, #8]
 80060c8:	7013      	strb	r3, [r2, #0]
 80060ca:	65ab      	str	r3, [r5, #88]	; 0x58
 80060cc:	9b03      	ldr	r3, [sp, #12]
 80060ce:	2205      	movs	r2, #5
 80060d0:	7819      	ldrb	r1, [r3, #0]
 80060d2:	485d      	ldr	r0, [pc, #372]	; (8006248 <_vfiprintf_r+0x260>)
 80060d4:	f001 f87a 	bl	80071cc <memchr>
 80060d8:	9b03      	ldr	r3, [sp, #12]
 80060da:	1c5f      	adds	r7, r3, #1
 80060dc:	2800      	cmp	r0, #0
 80060de:	d120      	bne.n	8006122 <_vfiprintf_r+0x13a>
 80060e0:	682a      	ldr	r2, [r5, #0]
 80060e2:	06d3      	lsls	r3, r2, #27
 80060e4:	d504      	bpl.n	80060f0 <_vfiprintf_r+0x108>
 80060e6:	2353      	movs	r3, #83	; 0x53
 80060e8:	a904      	add	r1, sp, #16
 80060ea:	185b      	adds	r3, r3, r1
 80060ec:	2120      	movs	r1, #32
 80060ee:	7019      	strb	r1, [r3, #0]
 80060f0:	0713      	lsls	r3, r2, #28
 80060f2:	d504      	bpl.n	80060fe <_vfiprintf_r+0x116>
 80060f4:	2353      	movs	r3, #83	; 0x53
 80060f6:	a904      	add	r1, sp, #16
 80060f8:	185b      	adds	r3, r3, r1
 80060fa:	212b      	movs	r1, #43	; 0x2b
 80060fc:	7019      	strb	r1, [r3, #0]
 80060fe:	9b03      	ldr	r3, [sp, #12]
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	2b2a      	cmp	r3, #42	; 0x2a
 8006104:	d016      	beq.n	8006134 <_vfiprintf_r+0x14c>
 8006106:	2100      	movs	r1, #0
 8006108:	68eb      	ldr	r3, [r5, #12]
 800610a:	9f03      	ldr	r7, [sp, #12]
 800610c:	783a      	ldrb	r2, [r7, #0]
 800610e:	1c78      	adds	r0, r7, #1
 8006110:	3a30      	subs	r2, #48	; 0x30
 8006112:	4684      	mov	ip, r0
 8006114:	2a09      	cmp	r2, #9
 8006116:	d94f      	bls.n	80061b8 <_vfiprintf_r+0x1d0>
 8006118:	2900      	cmp	r1, #0
 800611a:	d111      	bne.n	8006140 <_vfiprintf_r+0x158>
 800611c:	e017      	b.n	800614e <_vfiprintf_r+0x166>
 800611e:	3701      	adds	r7, #1
 8006120:	e7a9      	b.n	8006076 <_vfiprintf_r+0x8e>
 8006122:	4b49      	ldr	r3, [pc, #292]	; (8006248 <_vfiprintf_r+0x260>)
 8006124:	682a      	ldr	r2, [r5, #0]
 8006126:	1ac0      	subs	r0, r0, r3
 8006128:	2301      	movs	r3, #1
 800612a:	4083      	lsls	r3, r0
 800612c:	4313      	orrs	r3, r2
 800612e:	602b      	str	r3, [r5, #0]
 8006130:	9703      	str	r7, [sp, #12]
 8006132:	e7cb      	b.n	80060cc <_vfiprintf_r+0xe4>
 8006134:	9b07      	ldr	r3, [sp, #28]
 8006136:	1d19      	adds	r1, r3, #4
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	9107      	str	r1, [sp, #28]
 800613c:	2b00      	cmp	r3, #0
 800613e:	db01      	blt.n	8006144 <_vfiprintf_r+0x15c>
 8006140:	930b      	str	r3, [sp, #44]	; 0x2c
 8006142:	e004      	b.n	800614e <_vfiprintf_r+0x166>
 8006144:	425b      	negs	r3, r3
 8006146:	60eb      	str	r3, [r5, #12]
 8006148:	2302      	movs	r3, #2
 800614a:	4313      	orrs	r3, r2
 800614c:	602b      	str	r3, [r5, #0]
 800614e:	783b      	ldrb	r3, [r7, #0]
 8006150:	2b2e      	cmp	r3, #46	; 0x2e
 8006152:	d10a      	bne.n	800616a <_vfiprintf_r+0x182>
 8006154:	787b      	ldrb	r3, [r7, #1]
 8006156:	2b2a      	cmp	r3, #42	; 0x2a
 8006158:	d137      	bne.n	80061ca <_vfiprintf_r+0x1e2>
 800615a:	9b07      	ldr	r3, [sp, #28]
 800615c:	3702      	adds	r7, #2
 800615e:	1d1a      	adds	r2, r3, #4
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	9207      	str	r2, [sp, #28]
 8006164:	2b00      	cmp	r3, #0
 8006166:	db2d      	blt.n	80061c4 <_vfiprintf_r+0x1dc>
 8006168:	9309      	str	r3, [sp, #36]	; 0x24
 800616a:	2203      	movs	r2, #3
 800616c:	7839      	ldrb	r1, [r7, #0]
 800616e:	4837      	ldr	r0, [pc, #220]	; (800624c <_vfiprintf_r+0x264>)
 8006170:	f001 f82c 	bl	80071cc <memchr>
 8006174:	2800      	cmp	r0, #0
 8006176:	d007      	beq.n	8006188 <_vfiprintf_r+0x1a0>
 8006178:	4b34      	ldr	r3, [pc, #208]	; (800624c <_vfiprintf_r+0x264>)
 800617a:	682a      	ldr	r2, [r5, #0]
 800617c:	1ac0      	subs	r0, r0, r3
 800617e:	2340      	movs	r3, #64	; 0x40
 8006180:	4083      	lsls	r3, r0
 8006182:	4313      	orrs	r3, r2
 8006184:	3701      	adds	r7, #1
 8006186:	602b      	str	r3, [r5, #0]
 8006188:	7839      	ldrb	r1, [r7, #0]
 800618a:	1c7b      	adds	r3, r7, #1
 800618c:	2206      	movs	r2, #6
 800618e:	4830      	ldr	r0, [pc, #192]	; (8006250 <_vfiprintf_r+0x268>)
 8006190:	9303      	str	r3, [sp, #12]
 8006192:	7629      	strb	r1, [r5, #24]
 8006194:	f001 f81a 	bl	80071cc <memchr>
 8006198:	2800      	cmp	r0, #0
 800619a:	d045      	beq.n	8006228 <_vfiprintf_r+0x240>
 800619c:	4b2d      	ldr	r3, [pc, #180]	; (8006254 <_vfiprintf_r+0x26c>)
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d127      	bne.n	80061f2 <_vfiprintf_r+0x20a>
 80061a2:	2207      	movs	r2, #7
 80061a4:	9b07      	ldr	r3, [sp, #28]
 80061a6:	3307      	adds	r3, #7
 80061a8:	4393      	bics	r3, r2
 80061aa:	3308      	adds	r3, #8
 80061ac:	9307      	str	r3, [sp, #28]
 80061ae:	696b      	ldr	r3, [r5, #20]
 80061b0:	9a04      	ldr	r2, [sp, #16]
 80061b2:	189b      	adds	r3, r3, r2
 80061b4:	616b      	str	r3, [r5, #20]
 80061b6:	e75d      	b.n	8006074 <_vfiprintf_r+0x8c>
 80061b8:	210a      	movs	r1, #10
 80061ba:	434b      	muls	r3, r1
 80061bc:	4667      	mov	r7, ip
 80061be:	189b      	adds	r3, r3, r2
 80061c0:	3909      	subs	r1, #9
 80061c2:	e7a3      	b.n	800610c <_vfiprintf_r+0x124>
 80061c4:	2301      	movs	r3, #1
 80061c6:	425b      	negs	r3, r3
 80061c8:	e7ce      	b.n	8006168 <_vfiprintf_r+0x180>
 80061ca:	2300      	movs	r3, #0
 80061cc:	001a      	movs	r2, r3
 80061ce:	3701      	adds	r7, #1
 80061d0:	606b      	str	r3, [r5, #4]
 80061d2:	7839      	ldrb	r1, [r7, #0]
 80061d4:	1c78      	adds	r0, r7, #1
 80061d6:	3930      	subs	r1, #48	; 0x30
 80061d8:	4684      	mov	ip, r0
 80061da:	2909      	cmp	r1, #9
 80061dc:	d903      	bls.n	80061e6 <_vfiprintf_r+0x1fe>
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d0c3      	beq.n	800616a <_vfiprintf_r+0x182>
 80061e2:	9209      	str	r2, [sp, #36]	; 0x24
 80061e4:	e7c1      	b.n	800616a <_vfiprintf_r+0x182>
 80061e6:	230a      	movs	r3, #10
 80061e8:	435a      	muls	r2, r3
 80061ea:	4667      	mov	r7, ip
 80061ec:	1852      	adds	r2, r2, r1
 80061ee:	3b09      	subs	r3, #9
 80061f0:	e7ef      	b.n	80061d2 <_vfiprintf_r+0x1ea>
 80061f2:	ab07      	add	r3, sp, #28
 80061f4:	9300      	str	r3, [sp, #0]
 80061f6:	0022      	movs	r2, r4
 80061f8:	0029      	movs	r1, r5
 80061fa:	0030      	movs	r0, r6
 80061fc:	4b16      	ldr	r3, [pc, #88]	; (8006258 <_vfiprintf_r+0x270>)
 80061fe:	e000      	b.n	8006202 <_vfiprintf_r+0x21a>
 8006200:	bf00      	nop
 8006202:	9004      	str	r0, [sp, #16]
 8006204:	9b04      	ldr	r3, [sp, #16]
 8006206:	3301      	adds	r3, #1
 8006208:	d1d1      	bne.n	80061ae <_vfiprintf_r+0x1c6>
 800620a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800620c:	07db      	lsls	r3, r3, #31
 800620e:	d405      	bmi.n	800621c <_vfiprintf_r+0x234>
 8006210:	89a3      	ldrh	r3, [r4, #12]
 8006212:	059b      	lsls	r3, r3, #22
 8006214:	d402      	bmi.n	800621c <_vfiprintf_r+0x234>
 8006216:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006218:	f000 ff6a 	bl	80070f0 <__retarget_lock_release_recursive>
 800621c:	89a3      	ldrh	r3, [r4, #12]
 800621e:	065b      	lsls	r3, r3, #25
 8006220:	d500      	bpl.n	8006224 <_vfiprintf_r+0x23c>
 8006222:	e70a      	b.n	800603a <_vfiprintf_r+0x52>
 8006224:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006226:	e70a      	b.n	800603e <_vfiprintf_r+0x56>
 8006228:	ab07      	add	r3, sp, #28
 800622a:	9300      	str	r3, [sp, #0]
 800622c:	0022      	movs	r2, r4
 800622e:	0029      	movs	r1, r5
 8006230:	0030      	movs	r0, r6
 8006232:	4b09      	ldr	r3, [pc, #36]	; (8006258 <_vfiprintf_r+0x270>)
 8006234:	f000 f882 	bl	800633c <_printf_i>
 8006238:	e7e3      	b.n	8006202 <_vfiprintf_r+0x21a>
 800623a:	46c0      	nop			; (mov r8, r8)
 800623c:	08007814 	.word	0x08007814
 8006240:	08007834 	.word	0x08007834
 8006244:	080077f4 	.word	0x080077f4
 8006248:	080076a4 	.word	0x080076a4
 800624c:	080076aa 	.word	0x080076aa
 8006250:	080076ae 	.word	0x080076ae
 8006254:	00000000 	.word	0x00000000
 8006258:	08005fc3 	.word	0x08005fc3

0800625c <_printf_common>:
 800625c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800625e:	0015      	movs	r5, r2
 8006260:	9301      	str	r3, [sp, #4]
 8006262:	688a      	ldr	r2, [r1, #8]
 8006264:	690b      	ldr	r3, [r1, #16]
 8006266:	000c      	movs	r4, r1
 8006268:	9000      	str	r0, [sp, #0]
 800626a:	4293      	cmp	r3, r2
 800626c:	da00      	bge.n	8006270 <_printf_common+0x14>
 800626e:	0013      	movs	r3, r2
 8006270:	0022      	movs	r2, r4
 8006272:	602b      	str	r3, [r5, #0]
 8006274:	3243      	adds	r2, #67	; 0x43
 8006276:	7812      	ldrb	r2, [r2, #0]
 8006278:	2a00      	cmp	r2, #0
 800627a:	d001      	beq.n	8006280 <_printf_common+0x24>
 800627c:	3301      	adds	r3, #1
 800627e:	602b      	str	r3, [r5, #0]
 8006280:	6823      	ldr	r3, [r4, #0]
 8006282:	069b      	lsls	r3, r3, #26
 8006284:	d502      	bpl.n	800628c <_printf_common+0x30>
 8006286:	682b      	ldr	r3, [r5, #0]
 8006288:	3302      	adds	r3, #2
 800628a:	602b      	str	r3, [r5, #0]
 800628c:	6822      	ldr	r2, [r4, #0]
 800628e:	2306      	movs	r3, #6
 8006290:	0017      	movs	r7, r2
 8006292:	401f      	ands	r7, r3
 8006294:	421a      	tst	r2, r3
 8006296:	d027      	beq.n	80062e8 <_printf_common+0x8c>
 8006298:	0023      	movs	r3, r4
 800629a:	3343      	adds	r3, #67	; 0x43
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	1e5a      	subs	r2, r3, #1
 80062a0:	4193      	sbcs	r3, r2
 80062a2:	6822      	ldr	r2, [r4, #0]
 80062a4:	0692      	lsls	r2, r2, #26
 80062a6:	d430      	bmi.n	800630a <_printf_common+0xae>
 80062a8:	0022      	movs	r2, r4
 80062aa:	9901      	ldr	r1, [sp, #4]
 80062ac:	9800      	ldr	r0, [sp, #0]
 80062ae:	9e08      	ldr	r6, [sp, #32]
 80062b0:	3243      	adds	r2, #67	; 0x43
 80062b2:	47b0      	blx	r6
 80062b4:	1c43      	adds	r3, r0, #1
 80062b6:	d025      	beq.n	8006304 <_printf_common+0xa8>
 80062b8:	2306      	movs	r3, #6
 80062ba:	6820      	ldr	r0, [r4, #0]
 80062bc:	682a      	ldr	r2, [r5, #0]
 80062be:	68e1      	ldr	r1, [r4, #12]
 80062c0:	2500      	movs	r5, #0
 80062c2:	4003      	ands	r3, r0
 80062c4:	2b04      	cmp	r3, #4
 80062c6:	d103      	bne.n	80062d0 <_printf_common+0x74>
 80062c8:	1a8d      	subs	r5, r1, r2
 80062ca:	43eb      	mvns	r3, r5
 80062cc:	17db      	asrs	r3, r3, #31
 80062ce:	401d      	ands	r5, r3
 80062d0:	68a3      	ldr	r3, [r4, #8]
 80062d2:	6922      	ldr	r2, [r4, #16]
 80062d4:	4293      	cmp	r3, r2
 80062d6:	dd01      	ble.n	80062dc <_printf_common+0x80>
 80062d8:	1a9b      	subs	r3, r3, r2
 80062da:	18ed      	adds	r5, r5, r3
 80062dc:	2700      	movs	r7, #0
 80062de:	42bd      	cmp	r5, r7
 80062e0:	d120      	bne.n	8006324 <_printf_common+0xc8>
 80062e2:	2000      	movs	r0, #0
 80062e4:	e010      	b.n	8006308 <_printf_common+0xac>
 80062e6:	3701      	adds	r7, #1
 80062e8:	68e3      	ldr	r3, [r4, #12]
 80062ea:	682a      	ldr	r2, [r5, #0]
 80062ec:	1a9b      	subs	r3, r3, r2
 80062ee:	42bb      	cmp	r3, r7
 80062f0:	ddd2      	ble.n	8006298 <_printf_common+0x3c>
 80062f2:	0022      	movs	r2, r4
 80062f4:	2301      	movs	r3, #1
 80062f6:	9901      	ldr	r1, [sp, #4]
 80062f8:	9800      	ldr	r0, [sp, #0]
 80062fa:	9e08      	ldr	r6, [sp, #32]
 80062fc:	3219      	adds	r2, #25
 80062fe:	47b0      	blx	r6
 8006300:	1c43      	adds	r3, r0, #1
 8006302:	d1f0      	bne.n	80062e6 <_printf_common+0x8a>
 8006304:	2001      	movs	r0, #1
 8006306:	4240      	negs	r0, r0
 8006308:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800630a:	2030      	movs	r0, #48	; 0x30
 800630c:	18e1      	adds	r1, r4, r3
 800630e:	3143      	adds	r1, #67	; 0x43
 8006310:	7008      	strb	r0, [r1, #0]
 8006312:	0021      	movs	r1, r4
 8006314:	1c5a      	adds	r2, r3, #1
 8006316:	3145      	adds	r1, #69	; 0x45
 8006318:	7809      	ldrb	r1, [r1, #0]
 800631a:	18a2      	adds	r2, r4, r2
 800631c:	3243      	adds	r2, #67	; 0x43
 800631e:	3302      	adds	r3, #2
 8006320:	7011      	strb	r1, [r2, #0]
 8006322:	e7c1      	b.n	80062a8 <_printf_common+0x4c>
 8006324:	0022      	movs	r2, r4
 8006326:	2301      	movs	r3, #1
 8006328:	9901      	ldr	r1, [sp, #4]
 800632a:	9800      	ldr	r0, [sp, #0]
 800632c:	9e08      	ldr	r6, [sp, #32]
 800632e:	321a      	adds	r2, #26
 8006330:	47b0      	blx	r6
 8006332:	1c43      	adds	r3, r0, #1
 8006334:	d0e6      	beq.n	8006304 <_printf_common+0xa8>
 8006336:	3701      	adds	r7, #1
 8006338:	e7d1      	b.n	80062de <_printf_common+0x82>
	...

0800633c <_printf_i>:
 800633c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800633e:	b08b      	sub	sp, #44	; 0x2c
 8006340:	9206      	str	r2, [sp, #24]
 8006342:	000a      	movs	r2, r1
 8006344:	3243      	adds	r2, #67	; 0x43
 8006346:	9307      	str	r3, [sp, #28]
 8006348:	9005      	str	r0, [sp, #20]
 800634a:	9204      	str	r2, [sp, #16]
 800634c:	7e0a      	ldrb	r2, [r1, #24]
 800634e:	000c      	movs	r4, r1
 8006350:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006352:	2a78      	cmp	r2, #120	; 0x78
 8006354:	d807      	bhi.n	8006366 <_printf_i+0x2a>
 8006356:	2a62      	cmp	r2, #98	; 0x62
 8006358:	d809      	bhi.n	800636e <_printf_i+0x32>
 800635a:	2a00      	cmp	r2, #0
 800635c:	d100      	bne.n	8006360 <_printf_i+0x24>
 800635e:	e0c1      	b.n	80064e4 <_printf_i+0x1a8>
 8006360:	2a58      	cmp	r2, #88	; 0x58
 8006362:	d100      	bne.n	8006366 <_printf_i+0x2a>
 8006364:	e08c      	b.n	8006480 <_printf_i+0x144>
 8006366:	0026      	movs	r6, r4
 8006368:	3642      	adds	r6, #66	; 0x42
 800636a:	7032      	strb	r2, [r6, #0]
 800636c:	e022      	b.n	80063b4 <_printf_i+0x78>
 800636e:	0010      	movs	r0, r2
 8006370:	3863      	subs	r0, #99	; 0x63
 8006372:	2815      	cmp	r0, #21
 8006374:	d8f7      	bhi.n	8006366 <_printf_i+0x2a>
 8006376:	f7f9 fecd 	bl	8000114 <__gnu_thumb1_case_shi>
 800637a:	0016      	.short	0x0016
 800637c:	fff6001f 	.word	0xfff6001f
 8006380:	fff6fff6 	.word	0xfff6fff6
 8006384:	001ffff6 	.word	0x001ffff6
 8006388:	fff6fff6 	.word	0xfff6fff6
 800638c:	fff6fff6 	.word	0xfff6fff6
 8006390:	003600a8 	.word	0x003600a8
 8006394:	fff6009a 	.word	0xfff6009a
 8006398:	00b9fff6 	.word	0x00b9fff6
 800639c:	0036fff6 	.word	0x0036fff6
 80063a0:	fff6fff6 	.word	0xfff6fff6
 80063a4:	009e      	.short	0x009e
 80063a6:	0026      	movs	r6, r4
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	3642      	adds	r6, #66	; 0x42
 80063ac:	1d11      	adds	r1, r2, #4
 80063ae:	6019      	str	r1, [r3, #0]
 80063b0:	6813      	ldr	r3, [r2, #0]
 80063b2:	7033      	strb	r3, [r6, #0]
 80063b4:	2301      	movs	r3, #1
 80063b6:	e0a7      	b.n	8006508 <_printf_i+0x1cc>
 80063b8:	6808      	ldr	r0, [r1, #0]
 80063ba:	6819      	ldr	r1, [r3, #0]
 80063bc:	1d0a      	adds	r2, r1, #4
 80063be:	0605      	lsls	r5, r0, #24
 80063c0:	d50b      	bpl.n	80063da <_printf_i+0x9e>
 80063c2:	680d      	ldr	r5, [r1, #0]
 80063c4:	601a      	str	r2, [r3, #0]
 80063c6:	2d00      	cmp	r5, #0
 80063c8:	da03      	bge.n	80063d2 <_printf_i+0x96>
 80063ca:	232d      	movs	r3, #45	; 0x2d
 80063cc:	9a04      	ldr	r2, [sp, #16]
 80063ce:	426d      	negs	r5, r5
 80063d0:	7013      	strb	r3, [r2, #0]
 80063d2:	4b61      	ldr	r3, [pc, #388]	; (8006558 <_printf_i+0x21c>)
 80063d4:	270a      	movs	r7, #10
 80063d6:	9303      	str	r3, [sp, #12]
 80063d8:	e01b      	b.n	8006412 <_printf_i+0xd6>
 80063da:	680d      	ldr	r5, [r1, #0]
 80063dc:	601a      	str	r2, [r3, #0]
 80063de:	0641      	lsls	r1, r0, #25
 80063e0:	d5f1      	bpl.n	80063c6 <_printf_i+0x8a>
 80063e2:	b22d      	sxth	r5, r5
 80063e4:	e7ef      	b.n	80063c6 <_printf_i+0x8a>
 80063e6:	680d      	ldr	r5, [r1, #0]
 80063e8:	6819      	ldr	r1, [r3, #0]
 80063ea:	1d08      	adds	r0, r1, #4
 80063ec:	6018      	str	r0, [r3, #0]
 80063ee:	062e      	lsls	r6, r5, #24
 80063f0:	d501      	bpl.n	80063f6 <_printf_i+0xba>
 80063f2:	680d      	ldr	r5, [r1, #0]
 80063f4:	e003      	b.n	80063fe <_printf_i+0xc2>
 80063f6:	066d      	lsls	r5, r5, #25
 80063f8:	d5fb      	bpl.n	80063f2 <_printf_i+0xb6>
 80063fa:	680d      	ldr	r5, [r1, #0]
 80063fc:	b2ad      	uxth	r5, r5
 80063fe:	4b56      	ldr	r3, [pc, #344]	; (8006558 <_printf_i+0x21c>)
 8006400:	2708      	movs	r7, #8
 8006402:	9303      	str	r3, [sp, #12]
 8006404:	2a6f      	cmp	r2, #111	; 0x6f
 8006406:	d000      	beq.n	800640a <_printf_i+0xce>
 8006408:	3702      	adds	r7, #2
 800640a:	0023      	movs	r3, r4
 800640c:	2200      	movs	r2, #0
 800640e:	3343      	adds	r3, #67	; 0x43
 8006410:	701a      	strb	r2, [r3, #0]
 8006412:	6863      	ldr	r3, [r4, #4]
 8006414:	60a3      	str	r3, [r4, #8]
 8006416:	2b00      	cmp	r3, #0
 8006418:	db03      	blt.n	8006422 <_printf_i+0xe6>
 800641a:	2204      	movs	r2, #4
 800641c:	6821      	ldr	r1, [r4, #0]
 800641e:	4391      	bics	r1, r2
 8006420:	6021      	str	r1, [r4, #0]
 8006422:	2d00      	cmp	r5, #0
 8006424:	d102      	bne.n	800642c <_printf_i+0xf0>
 8006426:	9e04      	ldr	r6, [sp, #16]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00c      	beq.n	8006446 <_printf_i+0x10a>
 800642c:	9e04      	ldr	r6, [sp, #16]
 800642e:	0028      	movs	r0, r5
 8006430:	0039      	movs	r1, r7
 8006432:	f7f9 feff 	bl	8000234 <__aeabi_uidivmod>
 8006436:	9b03      	ldr	r3, [sp, #12]
 8006438:	3e01      	subs	r6, #1
 800643a:	5c5b      	ldrb	r3, [r3, r1]
 800643c:	7033      	strb	r3, [r6, #0]
 800643e:	002b      	movs	r3, r5
 8006440:	0005      	movs	r5, r0
 8006442:	429f      	cmp	r7, r3
 8006444:	d9f3      	bls.n	800642e <_printf_i+0xf2>
 8006446:	2f08      	cmp	r7, #8
 8006448:	d109      	bne.n	800645e <_printf_i+0x122>
 800644a:	6823      	ldr	r3, [r4, #0]
 800644c:	07db      	lsls	r3, r3, #31
 800644e:	d506      	bpl.n	800645e <_printf_i+0x122>
 8006450:	6863      	ldr	r3, [r4, #4]
 8006452:	6922      	ldr	r2, [r4, #16]
 8006454:	4293      	cmp	r3, r2
 8006456:	dc02      	bgt.n	800645e <_printf_i+0x122>
 8006458:	2330      	movs	r3, #48	; 0x30
 800645a:	3e01      	subs	r6, #1
 800645c:	7033      	strb	r3, [r6, #0]
 800645e:	9b04      	ldr	r3, [sp, #16]
 8006460:	1b9b      	subs	r3, r3, r6
 8006462:	6123      	str	r3, [r4, #16]
 8006464:	9b07      	ldr	r3, [sp, #28]
 8006466:	0021      	movs	r1, r4
 8006468:	9300      	str	r3, [sp, #0]
 800646a:	9805      	ldr	r0, [sp, #20]
 800646c:	9b06      	ldr	r3, [sp, #24]
 800646e:	aa09      	add	r2, sp, #36	; 0x24
 8006470:	f7ff fef4 	bl	800625c <_printf_common>
 8006474:	1c43      	adds	r3, r0, #1
 8006476:	d14c      	bne.n	8006512 <_printf_i+0x1d6>
 8006478:	2001      	movs	r0, #1
 800647a:	4240      	negs	r0, r0
 800647c:	b00b      	add	sp, #44	; 0x2c
 800647e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006480:	3145      	adds	r1, #69	; 0x45
 8006482:	700a      	strb	r2, [r1, #0]
 8006484:	4a34      	ldr	r2, [pc, #208]	; (8006558 <_printf_i+0x21c>)
 8006486:	9203      	str	r2, [sp, #12]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	6821      	ldr	r1, [r4, #0]
 800648c:	ca20      	ldmia	r2!, {r5}
 800648e:	601a      	str	r2, [r3, #0]
 8006490:	0608      	lsls	r0, r1, #24
 8006492:	d516      	bpl.n	80064c2 <_printf_i+0x186>
 8006494:	07cb      	lsls	r3, r1, #31
 8006496:	d502      	bpl.n	800649e <_printf_i+0x162>
 8006498:	2320      	movs	r3, #32
 800649a:	4319      	orrs	r1, r3
 800649c:	6021      	str	r1, [r4, #0]
 800649e:	2710      	movs	r7, #16
 80064a0:	2d00      	cmp	r5, #0
 80064a2:	d1b2      	bne.n	800640a <_printf_i+0xce>
 80064a4:	2320      	movs	r3, #32
 80064a6:	6822      	ldr	r2, [r4, #0]
 80064a8:	439a      	bics	r2, r3
 80064aa:	6022      	str	r2, [r4, #0]
 80064ac:	e7ad      	b.n	800640a <_printf_i+0xce>
 80064ae:	2220      	movs	r2, #32
 80064b0:	6809      	ldr	r1, [r1, #0]
 80064b2:	430a      	orrs	r2, r1
 80064b4:	6022      	str	r2, [r4, #0]
 80064b6:	0022      	movs	r2, r4
 80064b8:	2178      	movs	r1, #120	; 0x78
 80064ba:	3245      	adds	r2, #69	; 0x45
 80064bc:	7011      	strb	r1, [r2, #0]
 80064be:	4a27      	ldr	r2, [pc, #156]	; (800655c <_printf_i+0x220>)
 80064c0:	e7e1      	b.n	8006486 <_printf_i+0x14a>
 80064c2:	0648      	lsls	r0, r1, #25
 80064c4:	d5e6      	bpl.n	8006494 <_printf_i+0x158>
 80064c6:	b2ad      	uxth	r5, r5
 80064c8:	e7e4      	b.n	8006494 <_printf_i+0x158>
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	680d      	ldr	r5, [r1, #0]
 80064ce:	1d10      	adds	r0, r2, #4
 80064d0:	6949      	ldr	r1, [r1, #20]
 80064d2:	6018      	str	r0, [r3, #0]
 80064d4:	6813      	ldr	r3, [r2, #0]
 80064d6:	062e      	lsls	r6, r5, #24
 80064d8:	d501      	bpl.n	80064de <_printf_i+0x1a2>
 80064da:	6019      	str	r1, [r3, #0]
 80064dc:	e002      	b.n	80064e4 <_printf_i+0x1a8>
 80064de:	066d      	lsls	r5, r5, #25
 80064e0:	d5fb      	bpl.n	80064da <_printf_i+0x19e>
 80064e2:	8019      	strh	r1, [r3, #0]
 80064e4:	2300      	movs	r3, #0
 80064e6:	9e04      	ldr	r6, [sp, #16]
 80064e8:	6123      	str	r3, [r4, #16]
 80064ea:	e7bb      	b.n	8006464 <_printf_i+0x128>
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	1d11      	adds	r1, r2, #4
 80064f0:	6019      	str	r1, [r3, #0]
 80064f2:	6816      	ldr	r6, [r2, #0]
 80064f4:	2100      	movs	r1, #0
 80064f6:	0030      	movs	r0, r6
 80064f8:	6862      	ldr	r2, [r4, #4]
 80064fa:	f000 fe67 	bl	80071cc <memchr>
 80064fe:	2800      	cmp	r0, #0
 8006500:	d001      	beq.n	8006506 <_printf_i+0x1ca>
 8006502:	1b80      	subs	r0, r0, r6
 8006504:	6060      	str	r0, [r4, #4]
 8006506:	6863      	ldr	r3, [r4, #4]
 8006508:	6123      	str	r3, [r4, #16]
 800650a:	2300      	movs	r3, #0
 800650c:	9a04      	ldr	r2, [sp, #16]
 800650e:	7013      	strb	r3, [r2, #0]
 8006510:	e7a8      	b.n	8006464 <_printf_i+0x128>
 8006512:	6923      	ldr	r3, [r4, #16]
 8006514:	0032      	movs	r2, r6
 8006516:	9906      	ldr	r1, [sp, #24]
 8006518:	9805      	ldr	r0, [sp, #20]
 800651a:	9d07      	ldr	r5, [sp, #28]
 800651c:	47a8      	blx	r5
 800651e:	1c43      	adds	r3, r0, #1
 8006520:	d0aa      	beq.n	8006478 <_printf_i+0x13c>
 8006522:	6823      	ldr	r3, [r4, #0]
 8006524:	079b      	lsls	r3, r3, #30
 8006526:	d415      	bmi.n	8006554 <_printf_i+0x218>
 8006528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800652a:	68e0      	ldr	r0, [r4, #12]
 800652c:	4298      	cmp	r0, r3
 800652e:	daa5      	bge.n	800647c <_printf_i+0x140>
 8006530:	0018      	movs	r0, r3
 8006532:	e7a3      	b.n	800647c <_printf_i+0x140>
 8006534:	0022      	movs	r2, r4
 8006536:	2301      	movs	r3, #1
 8006538:	9906      	ldr	r1, [sp, #24]
 800653a:	9805      	ldr	r0, [sp, #20]
 800653c:	9e07      	ldr	r6, [sp, #28]
 800653e:	3219      	adds	r2, #25
 8006540:	47b0      	blx	r6
 8006542:	1c43      	adds	r3, r0, #1
 8006544:	d098      	beq.n	8006478 <_printf_i+0x13c>
 8006546:	3501      	adds	r5, #1
 8006548:	68e3      	ldr	r3, [r4, #12]
 800654a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800654c:	1a9b      	subs	r3, r3, r2
 800654e:	42ab      	cmp	r3, r5
 8006550:	dcf0      	bgt.n	8006534 <_printf_i+0x1f8>
 8006552:	e7e9      	b.n	8006528 <_printf_i+0x1ec>
 8006554:	2500      	movs	r5, #0
 8006556:	e7f7      	b.n	8006548 <_printf_i+0x20c>
 8006558:	080076b5 	.word	0x080076b5
 800655c:	080076c6 	.word	0x080076c6

08006560 <_scanf_chars>:
 8006560:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006562:	0015      	movs	r5, r2
 8006564:	688a      	ldr	r2, [r1, #8]
 8006566:	000c      	movs	r4, r1
 8006568:	9001      	str	r0, [sp, #4]
 800656a:	2a00      	cmp	r2, #0
 800656c:	d105      	bne.n	800657a <_scanf_chars+0x1a>
 800656e:	6989      	ldr	r1, [r1, #24]
 8006570:	3201      	adds	r2, #1
 8006572:	2900      	cmp	r1, #0
 8006574:	d000      	beq.n	8006578 <_scanf_chars+0x18>
 8006576:	3a02      	subs	r2, #2
 8006578:	60a2      	str	r2, [r4, #8]
 800657a:	6822      	ldr	r2, [r4, #0]
 800657c:	06d2      	lsls	r2, r2, #27
 800657e:	d403      	bmi.n	8006588 <_scanf_chars+0x28>
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	1d11      	adds	r1, r2, #4
 8006584:	6019      	str	r1, [r3, #0]
 8006586:	6817      	ldr	r7, [r2, #0]
 8006588:	2600      	movs	r6, #0
 800658a:	69a0      	ldr	r0, [r4, #24]
 800658c:	2800      	cmp	r0, #0
 800658e:	d013      	beq.n	80065b8 <_scanf_chars+0x58>
 8006590:	2801      	cmp	r0, #1
 8006592:	d108      	bne.n	80065a6 <_scanf_chars+0x46>
 8006594:	682b      	ldr	r3, [r5, #0]
 8006596:	6962      	ldr	r2, [r4, #20]
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	5cd3      	ldrb	r3, [r2, r3]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d10b      	bne.n	80065b8 <_scanf_chars+0x58>
 80065a0:	2e00      	cmp	r6, #0
 80065a2:	d038      	beq.n	8006616 <_scanf_chars+0xb6>
 80065a4:	e026      	b.n	80065f4 <_scanf_chars+0x94>
 80065a6:	2802      	cmp	r0, #2
 80065a8:	d124      	bne.n	80065f4 <_scanf_chars+0x94>
 80065aa:	682b      	ldr	r3, [r5, #0]
 80065ac:	4a1a      	ldr	r2, [pc, #104]	; (8006618 <_scanf_chars+0xb8>)
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	5cd3      	ldrb	r3, [r2, r3]
 80065b2:	2208      	movs	r2, #8
 80065b4:	4213      	tst	r3, r2
 80065b6:	d11d      	bne.n	80065f4 <_scanf_chars+0x94>
 80065b8:	2210      	movs	r2, #16
 80065ba:	6823      	ldr	r3, [r4, #0]
 80065bc:	3601      	adds	r6, #1
 80065be:	4213      	tst	r3, r2
 80065c0:	d103      	bne.n	80065ca <_scanf_chars+0x6a>
 80065c2:	682b      	ldr	r3, [r5, #0]
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	703b      	strb	r3, [r7, #0]
 80065c8:	3701      	adds	r7, #1
 80065ca:	682a      	ldr	r2, [r5, #0]
 80065cc:	686b      	ldr	r3, [r5, #4]
 80065ce:	3201      	adds	r2, #1
 80065d0:	602a      	str	r2, [r5, #0]
 80065d2:	68a2      	ldr	r2, [r4, #8]
 80065d4:	3b01      	subs	r3, #1
 80065d6:	3a01      	subs	r2, #1
 80065d8:	606b      	str	r3, [r5, #4]
 80065da:	60a2      	str	r2, [r4, #8]
 80065dc:	2a00      	cmp	r2, #0
 80065de:	d009      	beq.n	80065f4 <_scanf_chars+0x94>
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	dcd2      	bgt.n	800658a <_scanf_chars+0x2a>
 80065e4:	23c0      	movs	r3, #192	; 0xc0
 80065e6:	005b      	lsls	r3, r3, #1
 80065e8:	0029      	movs	r1, r5
 80065ea:	58e3      	ldr	r3, [r4, r3]
 80065ec:	9801      	ldr	r0, [sp, #4]
 80065ee:	4798      	blx	r3
 80065f0:	2800      	cmp	r0, #0
 80065f2:	d0ca      	beq.n	800658a <_scanf_chars+0x2a>
 80065f4:	6822      	ldr	r2, [r4, #0]
 80065f6:	2310      	movs	r3, #16
 80065f8:	0011      	movs	r1, r2
 80065fa:	4019      	ands	r1, r3
 80065fc:	421a      	tst	r2, r3
 80065fe:	d106      	bne.n	800660e <_scanf_chars+0xae>
 8006600:	68e3      	ldr	r3, [r4, #12]
 8006602:	3301      	adds	r3, #1
 8006604:	60e3      	str	r3, [r4, #12]
 8006606:	69a3      	ldr	r3, [r4, #24]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d000      	beq.n	800660e <_scanf_chars+0xae>
 800660c:	7039      	strb	r1, [r7, #0]
 800660e:	2000      	movs	r0, #0
 8006610:	6923      	ldr	r3, [r4, #16]
 8006612:	199e      	adds	r6, r3, r6
 8006614:	6126      	str	r6, [r4, #16]
 8006616:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006618:	080076f3 	.word	0x080076f3

0800661c <_scanf_i>:
 800661c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800661e:	000c      	movs	r4, r1
 8006620:	b08d      	sub	sp, #52	; 0x34
 8006622:	9302      	str	r3, [sp, #8]
 8006624:	4b79      	ldr	r3, [pc, #484]	; (800680c <_scanf_i+0x1f0>)
 8006626:	0016      	movs	r6, r2
 8006628:	9005      	str	r0, [sp, #20]
 800662a:	aa09      	add	r2, sp, #36	; 0x24
 800662c:	cb23      	ldmia	r3!, {r0, r1, r5}
 800662e:	c223      	stmia	r2!, {r0, r1, r5}
 8006630:	4b77      	ldr	r3, [pc, #476]	; (8006810 <_scanf_i+0x1f4>)
 8006632:	9306      	str	r3, [sp, #24]
 8006634:	69a3      	ldr	r3, [r4, #24]
 8006636:	2b03      	cmp	r3, #3
 8006638:	d001      	beq.n	800663e <_scanf_i+0x22>
 800663a:	4b76      	ldr	r3, [pc, #472]	; (8006814 <_scanf_i+0x1f8>)
 800663c:	9306      	str	r3, [sp, #24]
 800663e:	22ae      	movs	r2, #174	; 0xae
 8006640:	2000      	movs	r0, #0
 8006642:	68a3      	ldr	r3, [r4, #8]
 8006644:	0052      	lsls	r2, r2, #1
 8006646:	1e59      	subs	r1, r3, #1
 8006648:	9004      	str	r0, [sp, #16]
 800664a:	4291      	cmp	r1, r2
 800664c:	d905      	bls.n	800665a <_scanf_i+0x3e>
 800664e:	3b5e      	subs	r3, #94	; 0x5e
 8006650:	3bff      	subs	r3, #255	; 0xff
 8006652:	9304      	str	r3, [sp, #16]
 8006654:	235e      	movs	r3, #94	; 0x5e
 8006656:	33ff      	adds	r3, #255	; 0xff
 8006658:	60a3      	str	r3, [r4, #8]
 800665a:	0023      	movs	r3, r4
 800665c:	331c      	adds	r3, #28
 800665e:	9301      	str	r3, [sp, #4]
 8006660:	23d0      	movs	r3, #208	; 0xd0
 8006662:	2700      	movs	r7, #0
 8006664:	6822      	ldr	r2, [r4, #0]
 8006666:	011b      	lsls	r3, r3, #4
 8006668:	4313      	orrs	r3, r2
 800666a:	6023      	str	r3, [r4, #0]
 800666c:	9b01      	ldr	r3, [sp, #4]
 800666e:	9303      	str	r3, [sp, #12]
 8006670:	6833      	ldr	r3, [r6, #0]
 8006672:	a809      	add	r0, sp, #36	; 0x24
 8006674:	7819      	ldrb	r1, [r3, #0]
 8006676:	00bb      	lsls	r3, r7, #2
 8006678:	2202      	movs	r2, #2
 800667a:	5818      	ldr	r0, [r3, r0]
 800667c:	f000 fda6 	bl	80071cc <memchr>
 8006680:	2800      	cmp	r0, #0
 8006682:	d02b      	beq.n	80066dc <_scanf_i+0xc0>
 8006684:	2f01      	cmp	r7, #1
 8006686:	d162      	bne.n	800674e <_scanf_i+0x132>
 8006688:	6863      	ldr	r3, [r4, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d106      	bne.n	800669c <_scanf_i+0x80>
 800668e:	3308      	adds	r3, #8
 8006690:	6822      	ldr	r2, [r4, #0]
 8006692:	6063      	str	r3, [r4, #4]
 8006694:	33f9      	adds	r3, #249	; 0xf9
 8006696:	33ff      	adds	r3, #255	; 0xff
 8006698:	4313      	orrs	r3, r2
 800669a:	6023      	str	r3, [r4, #0]
 800669c:	4b5e      	ldr	r3, [pc, #376]	; (8006818 <_scanf_i+0x1fc>)
 800669e:	6822      	ldr	r2, [r4, #0]
 80066a0:	4013      	ands	r3, r2
 80066a2:	6023      	str	r3, [r4, #0]
 80066a4:	68a3      	ldr	r3, [r4, #8]
 80066a6:	1e5a      	subs	r2, r3, #1
 80066a8:	60a2      	str	r2, [r4, #8]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d016      	beq.n	80066dc <_scanf_i+0xc0>
 80066ae:	6833      	ldr	r3, [r6, #0]
 80066b0:	1c5a      	adds	r2, r3, #1
 80066b2:	6032      	str	r2, [r6, #0]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	9a03      	ldr	r2, [sp, #12]
 80066b8:	7013      	strb	r3, [r2, #0]
 80066ba:	6873      	ldr	r3, [r6, #4]
 80066bc:	1c55      	adds	r5, r2, #1
 80066be:	3b01      	subs	r3, #1
 80066c0:	6073      	str	r3, [r6, #4]
 80066c2:	9503      	str	r5, [sp, #12]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	dc09      	bgt.n	80066dc <_scanf_i+0xc0>
 80066c8:	23c0      	movs	r3, #192	; 0xc0
 80066ca:	005b      	lsls	r3, r3, #1
 80066cc:	58e3      	ldr	r3, [r4, r3]
 80066ce:	0031      	movs	r1, r6
 80066d0:	9805      	ldr	r0, [sp, #20]
 80066d2:	9307      	str	r3, [sp, #28]
 80066d4:	4798      	blx	r3
 80066d6:	2800      	cmp	r0, #0
 80066d8:	d000      	beq.n	80066dc <_scanf_i+0xc0>
 80066da:	e081      	b.n	80067e0 <_scanf_i+0x1c4>
 80066dc:	3701      	adds	r7, #1
 80066de:	2f03      	cmp	r7, #3
 80066e0:	d1c6      	bne.n	8006670 <_scanf_i+0x54>
 80066e2:	6863      	ldr	r3, [r4, #4]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d101      	bne.n	80066ec <_scanf_i+0xd0>
 80066e8:	330a      	adds	r3, #10
 80066ea:	6063      	str	r3, [r4, #4]
 80066ec:	2110      	movs	r1, #16
 80066ee:	2700      	movs	r7, #0
 80066f0:	6863      	ldr	r3, [r4, #4]
 80066f2:	6960      	ldr	r0, [r4, #20]
 80066f4:	1ac9      	subs	r1, r1, r3
 80066f6:	4b49      	ldr	r3, [pc, #292]	; (800681c <_scanf_i+0x200>)
 80066f8:	18c9      	adds	r1, r1, r3
 80066fa:	f000 f8b9 	bl	8006870 <__sccl>
 80066fe:	9d03      	ldr	r5, [sp, #12]
 8006700:	68a3      	ldr	r3, [r4, #8]
 8006702:	6822      	ldr	r2, [r4, #0]
 8006704:	9303      	str	r3, [sp, #12]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d041      	beq.n	800678e <_scanf_i+0x172>
 800670a:	6831      	ldr	r1, [r6, #0]
 800670c:	6963      	ldr	r3, [r4, #20]
 800670e:	7808      	ldrb	r0, [r1, #0]
 8006710:	5c1b      	ldrb	r3, [r3, r0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d03b      	beq.n	800678e <_scanf_i+0x172>
 8006716:	2830      	cmp	r0, #48	; 0x30
 8006718:	d129      	bne.n	800676e <_scanf_i+0x152>
 800671a:	2380      	movs	r3, #128	; 0x80
 800671c:	011b      	lsls	r3, r3, #4
 800671e:	421a      	tst	r2, r3
 8006720:	d025      	beq.n	800676e <_scanf_i+0x152>
 8006722:	9b04      	ldr	r3, [sp, #16]
 8006724:	3701      	adds	r7, #1
 8006726:	2b00      	cmp	r3, #0
 8006728:	d005      	beq.n	8006736 <_scanf_i+0x11a>
 800672a:	001a      	movs	r2, r3
 800672c:	9b03      	ldr	r3, [sp, #12]
 800672e:	3a01      	subs	r2, #1
 8006730:	3301      	adds	r3, #1
 8006732:	9204      	str	r2, [sp, #16]
 8006734:	60a3      	str	r3, [r4, #8]
 8006736:	6873      	ldr	r3, [r6, #4]
 8006738:	3b01      	subs	r3, #1
 800673a:	6073      	str	r3, [r6, #4]
 800673c:	2b00      	cmp	r3, #0
 800673e:	dd1d      	ble.n	800677c <_scanf_i+0x160>
 8006740:	6833      	ldr	r3, [r6, #0]
 8006742:	3301      	adds	r3, #1
 8006744:	6033      	str	r3, [r6, #0]
 8006746:	68a3      	ldr	r3, [r4, #8]
 8006748:	3b01      	subs	r3, #1
 800674a:	60a3      	str	r3, [r4, #8]
 800674c:	e7d8      	b.n	8006700 <_scanf_i+0xe4>
 800674e:	2f02      	cmp	r7, #2
 8006750:	d1a8      	bne.n	80066a4 <_scanf_i+0x88>
 8006752:	21c0      	movs	r1, #192	; 0xc0
 8006754:	2380      	movs	r3, #128	; 0x80
 8006756:	6822      	ldr	r2, [r4, #0]
 8006758:	00c9      	lsls	r1, r1, #3
 800675a:	4011      	ands	r1, r2
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	4299      	cmp	r1, r3
 8006760:	d1bf      	bne.n	80066e2 <_scanf_i+0xc6>
 8006762:	3bf1      	subs	r3, #241	; 0xf1
 8006764:	3bff      	subs	r3, #255	; 0xff
 8006766:	6063      	str	r3, [r4, #4]
 8006768:	33f0      	adds	r3, #240	; 0xf0
 800676a:	4313      	orrs	r3, r2
 800676c:	e799      	b.n	80066a2 <_scanf_i+0x86>
 800676e:	4b2c      	ldr	r3, [pc, #176]	; (8006820 <_scanf_i+0x204>)
 8006770:	4013      	ands	r3, r2
 8006772:	6023      	str	r3, [r4, #0]
 8006774:	780b      	ldrb	r3, [r1, #0]
 8006776:	702b      	strb	r3, [r5, #0]
 8006778:	3501      	adds	r5, #1
 800677a:	e7dc      	b.n	8006736 <_scanf_i+0x11a>
 800677c:	23c0      	movs	r3, #192	; 0xc0
 800677e:	005b      	lsls	r3, r3, #1
 8006780:	58e3      	ldr	r3, [r4, r3]
 8006782:	0031      	movs	r1, r6
 8006784:	9805      	ldr	r0, [sp, #20]
 8006786:	9303      	str	r3, [sp, #12]
 8006788:	4798      	blx	r3
 800678a:	2800      	cmp	r0, #0
 800678c:	d0db      	beq.n	8006746 <_scanf_i+0x12a>
 800678e:	6823      	ldr	r3, [r4, #0]
 8006790:	05db      	lsls	r3, r3, #23
 8006792:	d50e      	bpl.n	80067b2 <_scanf_i+0x196>
 8006794:	9b01      	ldr	r3, [sp, #4]
 8006796:	429d      	cmp	r5, r3
 8006798:	d907      	bls.n	80067aa <_scanf_i+0x18e>
 800679a:	23be      	movs	r3, #190	; 0xbe
 800679c:	3d01      	subs	r5, #1
 800679e:	005b      	lsls	r3, r3, #1
 80067a0:	0032      	movs	r2, r6
 80067a2:	7829      	ldrb	r1, [r5, #0]
 80067a4:	58e3      	ldr	r3, [r4, r3]
 80067a6:	9805      	ldr	r0, [sp, #20]
 80067a8:	4798      	blx	r3
 80067aa:	9b01      	ldr	r3, [sp, #4]
 80067ac:	2001      	movs	r0, #1
 80067ae:	429d      	cmp	r5, r3
 80067b0:	d029      	beq.n	8006806 <_scanf_i+0x1ea>
 80067b2:	6821      	ldr	r1, [r4, #0]
 80067b4:	2310      	movs	r3, #16
 80067b6:	000a      	movs	r2, r1
 80067b8:	401a      	ands	r2, r3
 80067ba:	4219      	tst	r1, r3
 80067bc:	d11c      	bne.n	80067f8 <_scanf_i+0x1dc>
 80067be:	702a      	strb	r2, [r5, #0]
 80067c0:	6863      	ldr	r3, [r4, #4]
 80067c2:	9901      	ldr	r1, [sp, #4]
 80067c4:	9805      	ldr	r0, [sp, #20]
 80067c6:	9e06      	ldr	r6, [sp, #24]
 80067c8:	47b0      	blx	r6
 80067ca:	9b02      	ldr	r3, [sp, #8]
 80067cc:	6821      	ldr	r1, [r4, #0]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	068a      	lsls	r2, r1, #26
 80067d2:	d507      	bpl.n	80067e4 <_scanf_i+0x1c8>
 80067d4:	1d1a      	adds	r2, r3, #4
 80067d6:	9902      	ldr	r1, [sp, #8]
 80067d8:	600a      	str	r2, [r1, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	6018      	str	r0, [r3, #0]
 80067de:	e008      	b.n	80067f2 <_scanf_i+0x1d6>
 80067e0:	2700      	movs	r7, #0
 80067e2:	e7d4      	b.n	800678e <_scanf_i+0x172>
 80067e4:	1d1a      	adds	r2, r3, #4
 80067e6:	07ce      	lsls	r6, r1, #31
 80067e8:	d5f5      	bpl.n	80067d6 <_scanf_i+0x1ba>
 80067ea:	9902      	ldr	r1, [sp, #8]
 80067ec:	600a      	str	r2, [r1, #0]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	8018      	strh	r0, [r3, #0]
 80067f2:	68e3      	ldr	r3, [r4, #12]
 80067f4:	3301      	adds	r3, #1
 80067f6:	60e3      	str	r3, [r4, #12]
 80067f8:	2000      	movs	r0, #0
 80067fa:	9b01      	ldr	r3, [sp, #4]
 80067fc:	1aed      	subs	r5, r5, r3
 80067fe:	6923      	ldr	r3, [r4, #16]
 8006800:	19ef      	adds	r7, r5, r7
 8006802:	19df      	adds	r7, r3, r7
 8006804:	6127      	str	r7, [r4, #16]
 8006806:	b00d      	add	sp, #52	; 0x34
 8006808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800680a:	46c0      	nop			; (mov r8, r8)
 800680c:	0800755c 	.word	0x0800755c
 8006810:	08006a05 	.word	0x08006a05
 8006814:	08006b21 	.word	0x08006b21
 8006818:	fffffaff 	.word	0xfffffaff
 800681c:	080076e0 	.word	0x080076e0
 8006820:	fffff6ff 	.word	0xfffff6ff

08006824 <_read_r>:
 8006824:	b570      	push	{r4, r5, r6, lr}
 8006826:	0004      	movs	r4, r0
 8006828:	0008      	movs	r0, r1
 800682a:	0011      	movs	r1, r2
 800682c:	001a      	movs	r2, r3
 800682e:	2300      	movs	r3, #0
 8006830:	4d05      	ldr	r5, [pc, #20]	; (8006848 <_read_r+0x24>)
 8006832:	602b      	str	r3, [r5, #0]
 8006834:	f7fa fd7a 	bl	800132c <_read>
 8006838:	1c43      	adds	r3, r0, #1
 800683a:	d103      	bne.n	8006844 <_read_r+0x20>
 800683c:	682b      	ldr	r3, [r5, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d000      	beq.n	8006844 <_read_r+0x20>
 8006842:	6023      	str	r3, [r4, #0]
 8006844:	bd70      	pop	{r4, r5, r6, pc}
 8006846:	46c0      	nop			; (mov r8, r8)
 8006848:	20000534 	.word	0x20000534

0800684c <_sbrk_r>:
 800684c:	2300      	movs	r3, #0
 800684e:	b570      	push	{r4, r5, r6, lr}
 8006850:	4d06      	ldr	r5, [pc, #24]	; (800686c <_sbrk_r+0x20>)
 8006852:	0004      	movs	r4, r0
 8006854:	0008      	movs	r0, r1
 8006856:	602b      	str	r3, [r5, #0]
 8006858:	f7fa fdce 	bl	80013f8 <_sbrk>
 800685c:	1c43      	adds	r3, r0, #1
 800685e:	d103      	bne.n	8006868 <_sbrk_r+0x1c>
 8006860:	682b      	ldr	r3, [r5, #0]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d000      	beq.n	8006868 <_sbrk_r+0x1c>
 8006866:	6023      	str	r3, [r4, #0]
 8006868:	bd70      	pop	{r4, r5, r6, pc}
 800686a:	46c0      	nop			; (mov r8, r8)
 800686c:	20000534 	.word	0x20000534

08006870 <__sccl>:
 8006870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006872:	780b      	ldrb	r3, [r1, #0]
 8006874:	0004      	movs	r4, r0
 8006876:	2b5e      	cmp	r3, #94	; 0x5e
 8006878:	d00c      	beq.n	8006894 <__sccl+0x24>
 800687a:	1c48      	adds	r0, r1, #1
 800687c:	2100      	movs	r1, #0
 800687e:	0022      	movs	r2, r4
 8006880:	1c65      	adds	r5, r4, #1
 8006882:	35ff      	adds	r5, #255	; 0xff
 8006884:	7011      	strb	r1, [r2, #0]
 8006886:	3201      	adds	r2, #1
 8006888:	42aa      	cmp	r2, r5
 800688a:	d1fb      	bne.n	8006884 <__sccl+0x14>
 800688c:	2b00      	cmp	r3, #0
 800688e:	d105      	bne.n	800689c <__sccl+0x2c>
 8006890:	3801      	subs	r0, #1
 8006892:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006894:	784b      	ldrb	r3, [r1, #1]
 8006896:	1c88      	adds	r0, r1, #2
 8006898:	2101      	movs	r1, #1
 800689a:	e7f0      	b.n	800687e <__sccl+0xe>
 800689c:	2201      	movs	r2, #1
 800689e:	262d      	movs	r6, #45	; 0x2d
 80068a0:	4051      	eors	r1, r2
 80068a2:	0002      	movs	r2, r0
 80068a4:	54e1      	strb	r1, [r4, r3]
 80068a6:	7815      	ldrb	r5, [r2, #0]
 80068a8:	1c50      	adds	r0, r2, #1
 80068aa:	2d2d      	cmp	r5, #45	; 0x2d
 80068ac:	d009      	beq.n	80068c2 <__sccl+0x52>
 80068ae:	2d5d      	cmp	r5, #93	; 0x5d
 80068b0:	d0ef      	beq.n	8006892 <__sccl+0x22>
 80068b2:	2d00      	cmp	r5, #0
 80068b4:	d101      	bne.n	80068ba <__sccl+0x4a>
 80068b6:	0010      	movs	r0, r2
 80068b8:	e7eb      	b.n	8006892 <__sccl+0x22>
 80068ba:	002b      	movs	r3, r5
 80068bc:	e7f1      	b.n	80068a2 <__sccl+0x32>
 80068be:	0033      	movs	r3, r6
 80068c0:	e7ef      	b.n	80068a2 <__sccl+0x32>
 80068c2:	7855      	ldrb	r5, [r2, #1]
 80068c4:	2d5d      	cmp	r5, #93	; 0x5d
 80068c6:	d0fa      	beq.n	80068be <__sccl+0x4e>
 80068c8:	42ab      	cmp	r3, r5
 80068ca:	dcf8      	bgt.n	80068be <__sccl+0x4e>
 80068cc:	0018      	movs	r0, r3
 80068ce:	3202      	adds	r2, #2
 80068d0:	3001      	adds	r0, #1
 80068d2:	5421      	strb	r1, [r4, r0]
 80068d4:	4285      	cmp	r5, r0
 80068d6:	dcfb      	bgt.n	80068d0 <__sccl+0x60>
 80068d8:	2000      	movs	r0, #0
 80068da:	1c5f      	adds	r7, r3, #1
 80068dc:	42ab      	cmp	r3, r5
 80068de:	da01      	bge.n	80068e4 <__sccl+0x74>
 80068e0:	1ae8      	subs	r0, r5, r3
 80068e2:	3801      	subs	r0, #1
 80068e4:	183b      	adds	r3, r7, r0
 80068e6:	e7de      	b.n	80068a6 <__sccl+0x36>

080068e8 <_strtol_l.constprop.0>:
 80068e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068ea:	b087      	sub	sp, #28
 80068ec:	001e      	movs	r6, r3
 80068ee:	9005      	str	r0, [sp, #20]
 80068f0:	9101      	str	r1, [sp, #4]
 80068f2:	9202      	str	r2, [sp, #8]
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d045      	beq.n	8006984 <_strtol_l.constprop.0+0x9c>
 80068f8:	000b      	movs	r3, r1
 80068fa:	2e24      	cmp	r6, #36	; 0x24
 80068fc:	d842      	bhi.n	8006984 <_strtol_l.constprop.0+0x9c>
 80068fe:	4a3f      	ldr	r2, [pc, #252]	; (80069fc <_strtol_l.constprop.0+0x114>)
 8006900:	2108      	movs	r1, #8
 8006902:	4694      	mov	ip, r2
 8006904:	001a      	movs	r2, r3
 8006906:	4660      	mov	r0, ip
 8006908:	7814      	ldrb	r4, [r2, #0]
 800690a:	3301      	adds	r3, #1
 800690c:	5d00      	ldrb	r0, [r0, r4]
 800690e:	001d      	movs	r5, r3
 8006910:	0007      	movs	r7, r0
 8006912:	400f      	ands	r7, r1
 8006914:	4208      	tst	r0, r1
 8006916:	d1f5      	bne.n	8006904 <_strtol_l.constprop.0+0x1c>
 8006918:	2c2d      	cmp	r4, #45	; 0x2d
 800691a:	d13a      	bne.n	8006992 <_strtol_l.constprop.0+0xaa>
 800691c:	2701      	movs	r7, #1
 800691e:	781c      	ldrb	r4, [r3, #0]
 8006920:	1c95      	adds	r5, r2, #2
 8006922:	2e00      	cmp	r6, #0
 8006924:	d065      	beq.n	80069f2 <_strtol_l.constprop.0+0x10a>
 8006926:	2e10      	cmp	r6, #16
 8006928:	d109      	bne.n	800693e <_strtol_l.constprop.0+0x56>
 800692a:	2c30      	cmp	r4, #48	; 0x30
 800692c:	d107      	bne.n	800693e <_strtol_l.constprop.0+0x56>
 800692e:	2220      	movs	r2, #32
 8006930:	782b      	ldrb	r3, [r5, #0]
 8006932:	4393      	bics	r3, r2
 8006934:	2b58      	cmp	r3, #88	; 0x58
 8006936:	d157      	bne.n	80069e8 <_strtol_l.constprop.0+0x100>
 8006938:	2610      	movs	r6, #16
 800693a:	786c      	ldrb	r4, [r5, #1]
 800693c:	3502      	adds	r5, #2
 800693e:	4b30      	ldr	r3, [pc, #192]	; (8006a00 <_strtol_l.constprop.0+0x118>)
 8006940:	0031      	movs	r1, r6
 8006942:	18fb      	adds	r3, r7, r3
 8006944:	0018      	movs	r0, r3
 8006946:	9303      	str	r3, [sp, #12]
 8006948:	f7f9 fc74 	bl	8000234 <__aeabi_uidivmod>
 800694c:	2300      	movs	r3, #0
 800694e:	2201      	movs	r2, #1
 8006950:	4684      	mov	ip, r0
 8006952:	0018      	movs	r0, r3
 8006954:	9104      	str	r1, [sp, #16]
 8006956:	4252      	negs	r2, r2
 8006958:	0021      	movs	r1, r4
 800695a:	3930      	subs	r1, #48	; 0x30
 800695c:	2909      	cmp	r1, #9
 800695e:	d81d      	bhi.n	800699c <_strtol_l.constprop.0+0xb4>
 8006960:	000c      	movs	r4, r1
 8006962:	42a6      	cmp	r6, r4
 8006964:	dd28      	ble.n	80069b8 <_strtol_l.constprop.0+0xd0>
 8006966:	2b00      	cmp	r3, #0
 8006968:	db24      	blt.n	80069b4 <_strtol_l.constprop.0+0xcc>
 800696a:	0013      	movs	r3, r2
 800696c:	4584      	cmp	ip, r0
 800696e:	d306      	bcc.n	800697e <_strtol_l.constprop.0+0x96>
 8006970:	d102      	bne.n	8006978 <_strtol_l.constprop.0+0x90>
 8006972:	9904      	ldr	r1, [sp, #16]
 8006974:	42a1      	cmp	r1, r4
 8006976:	db02      	blt.n	800697e <_strtol_l.constprop.0+0x96>
 8006978:	2301      	movs	r3, #1
 800697a:	4370      	muls	r0, r6
 800697c:	1820      	adds	r0, r4, r0
 800697e:	782c      	ldrb	r4, [r5, #0]
 8006980:	3501      	adds	r5, #1
 8006982:	e7e9      	b.n	8006958 <_strtol_l.constprop.0+0x70>
 8006984:	f7fe fd06 	bl	8005394 <__errno>
 8006988:	2316      	movs	r3, #22
 800698a:	6003      	str	r3, [r0, #0]
 800698c:	2000      	movs	r0, #0
 800698e:	b007      	add	sp, #28
 8006990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006992:	2c2b      	cmp	r4, #43	; 0x2b
 8006994:	d1c5      	bne.n	8006922 <_strtol_l.constprop.0+0x3a>
 8006996:	781c      	ldrb	r4, [r3, #0]
 8006998:	1c95      	adds	r5, r2, #2
 800699a:	e7c2      	b.n	8006922 <_strtol_l.constprop.0+0x3a>
 800699c:	0021      	movs	r1, r4
 800699e:	3941      	subs	r1, #65	; 0x41
 80069a0:	2919      	cmp	r1, #25
 80069a2:	d801      	bhi.n	80069a8 <_strtol_l.constprop.0+0xc0>
 80069a4:	3c37      	subs	r4, #55	; 0x37
 80069a6:	e7dc      	b.n	8006962 <_strtol_l.constprop.0+0x7a>
 80069a8:	0021      	movs	r1, r4
 80069aa:	3961      	subs	r1, #97	; 0x61
 80069ac:	2919      	cmp	r1, #25
 80069ae:	d803      	bhi.n	80069b8 <_strtol_l.constprop.0+0xd0>
 80069b0:	3c57      	subs	r4, #87	; 0x57
 80069b2:	e7d6      	b.n	8006962 <_strtol_l.constprop.0+0x7a>
 80069b4:	0013      	movs	r3, r2
 80069b6:	e7e2      	b.n	800697e <_strtol_l.constprop.0+0x96>
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	da09      	bge.n	80069d0 <_strtol_l.constprop.0+0xe8>
 80069bc:	2322      	movs	r3, #34	; 0x22
 80069be:	9a05      	ldr	r2, [sp, #20]
 80069c0:	9803      	ldr	r0, [sp, #12]
 80069c2:	6013      	str	r3, [r2, #0]
 80069c4:	9b02      	ldr	r3, [sp, #8]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d0e1      	beq.n	800698e <_strtol_l.constprop.0+0xa6>
 80069ca:	1e6b      	subs	r3, r5, #1
 80069cc:	9301      	str	r3, [sp, #4]
 80069ce:	e007      	b.n	80069e0 <_strtol_l.constprop.0+0xf8>
 80069d0:	2f00      	cmp	r7, #0
 80069d2:	d000      	beq.n	80069d6 <_strtol_l.constprop.0+0xee>
 80069d4:	4240      	negs	r0, r0
 80069d6:	9a02      	ldr	r2, [sp, #8]
 80069d8:	2a00      	cmp	r2, #0
 80069da:	d0d8      	beq.n	800698e <_strtol_l.constprop.0+0xa6>
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d1f4      	bne.n	80069ca <_strtol_l.constprop.0+0xe2>
 80069e0:	9b02      	ldr	r3, [sp, #8]
 80069e2:	9a01      	ldr	r2, [sp, #4]
 80069e4:	601a      	str	r2, [r3, #0]
 80069e6:	e7d2      	b.n	800698e <_strtol_l.constprop.0+0xa6>
 80069e8:	2430      	movs	r4, #48	; 0x30
 80069ea:	2e00      	cmp	r6, #0
 80069ec:	d1a7      	bne.n	800693e <_strtol_l.constprop.0+0x56>
 80069ee:	3608      	adds	r6, #8
 80069f0:	e7a5      	b.n	800693e <_strtol_l.constprop.0+0x56>
 80069f2:	2c30      	cmp	r4, #48	; 0x30
 80069f4:	d09b      	beq.n	800692e <_strtol_l.constprop.0+0x46>
 80069f6:	260a      	movs	r6, #10
 80069f8:	e7a1      	b.n	800693e <_strtol_l.constprop.0+0x56>
 80069fa:	46c0      	nop			; (mov r8, r8)
 80069fc:	080076f3 	.word	0x080076f3
 8006a00:	7fffffff 	.word	0x7fffffff

08006a04 <_strtol_r>:
 8006a04:	b510      	push	{r4, lr}
 8006a06:	f7ff ff6f 	bl	80068e8 <_strtol_l.constprop.0>
 8006a0a:	bd10      	pop	{r4, pc}

08006a0c <_strtoul_l.constprop.0>:
 8006a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a0e:	b087      	sub	sp, #28
 8006a10:	9202      	str	r2, [sp, #8]
 8006a12:	4a42      	ldr	r2, [pc, #264]	; (8006b1c <_strtoul_l.constprop.0+0x110>)
 8006a14:	001e      	movs	r6, r3
 8006a16:	9101      	str	r1, [sp, #4]
 8006a18:	000b      	movs	r3, r1
 8006a1a:	4694      	mov	ip, r2
 8006a1c:	2108      	movs	r1, #8
 8006a1e:	9005      	str	r0, [sp, #20]
 8006a20:	001a      	movs	r2, r3
 8006a22:	4660      	mov	r0, ip
 8006a24:	7814      	ldrb	r4, [r2, #0]
 8006a26:	3301      	adds	r3, #1
 8006a28:	5d00      	ldrb	r0, [r0, r4]
 8006a2a:	001d      	movs	r5, r3
 8006a2c:	0007      	movs	r7, r0
 8006a2e:	400f      	ands	r7, r1
 8006a30:	4208      	tst	r0, r1
 8006a32:	d1f5      	bne.n	8006a20 <_strtoul_l.constprop.0+0x14>
 8006a34:	2c2d      	cmp	r4, #45	; 0x2d
 8006a36:	d13a      	bne.n	8006aae <_strtoul_l.constprop.0+0xa2>
 8006a38:	2701      	movs	r7, #1
 8006a3a:	781c      	ldrb	r4, [r3, #0]
 8006a3c:	1c95      	adds	r5, r2, #2
 8006a3e:	2e00      	cmp	r6, #0
 8006a40:	d067      	beq.n	8006b12 <_strtoul_l.constprop.0+0x106>
 8006a42:	2e10      	cmp	r6, #16
 8006a44:	d109      	bne.n	8006a5a <_strtoul_l.constprop.0+0x4e>
 8006a46:	2c30      	cmp	r4, #48	; 0x30
 8006a48:	d107      	bne.n	8006a5a <_strtoul_l.constprop.0+0x4e>
 8006a4a:	2220      	movs	r2, #32
 8006a4c:	782b      	ldrb	r3, [r5, #0]
 8006a4e:	4393      	bics	r3, r2
 8006a50:	2b58      	cmp	r3, #88	; 0x58
 8006a52:	d159      	bne.n	8006b08 <_strtoul_l.constprop.0+0xfc>
 8006a54:	2610      	movs	r6, #16
 8006a56:	786c      	ldrb	r4, [r5, #1]
 8006a58:	3502      	adds	r5, #2
 8006a5a:	2001      	movs	r0, #1
 8006a5c:	0031      	movs	r1, r6
 8006a5e:	4240      	negs	r0, r0
 8006a60:	f7f9 fb62 	bl	8000128 <__udivsi3>
 8006a64:	9003      	str	r0, [sp, #12]
 8006a66:	2001      	movs	r0, #1
 8006a68:	0031      	movs	r1, r6
 8006a6a:	4240      	negs	r0, r0
 8006a6c:	f7f9 fbe2 	bl	8000234 <__aeabi_uidivmod>
 8006a70:	2300      	movs	r3, #0
 8006a72:	9104      	str	r1, [sp, #16]
 8006a74:	2101      	movs	r1, #1
 8006a76:	2201      	movs	r2, #1
 8006a78:	0018      	movs	r0, r3
 8006a7a:	468c      	mov	ip, r1
 8006a7c:	4252      	negs	r2, r2
 8006a7e:	0021      	movs	r1, r4
 8006a80:	3930      	subs	r1, #48	; 0x30
 8006a82:	2909      	cmp	r1, #9
 8006a84:	d818      	bhi.n	8006ab8 <_strtoul_l.constprop.0+0xac>
 8006a86:	000c      	movs	r4, r1
 8006a88:	42a6      	cmp	r6, r4
 8006a8a:	dd23      	ble.n	8006ad4 <_strtoul_l.constprop.0+0xc8>
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	db1f      	blt.n	8006ad0 <_strtoul_l.constprop.0+0xc4>
 8006a90:	9903      	ldr	r1, [sp, #12]
 8006a92:	0013      	movs	r3, r2
 8006a94:	4281      	cmp	r1, r0
 8006a96:	d307      	bcc.n	8006aa8 <_strtoul_l.constprop.0+0x9c>
 8006a98:	d103      	bne.n	8006aa2 <_strtoul_l.constprop.0+0x96>
 8006a9a:	9904      	ldr	r1, [sp, #16]
 8006a9c:	0013      	movs	r3, r2
 8006a9e:	42a1      	cmp	r1, r4
 8006aa0:	db02      	blt.n	8006aa8 <_strtoul_l.constprop.0+0x9c>
 8006aa2:	4663      	mov	r3, ip
 8006aa4:	4370      	muls	r0, r6
 8006aa6:	1820      	adds	r0, r4, r0
 8006aa8:	782c      	ldrb	r4, [r5, #0]
 8006aaa:	3501      	adds	r5, #1
 8006aac:	e7e7      	b.n	8006a7e <_strtoul_l.constprop.0+0x72>
 8006aae:	2c2b      	cmp	r4, #43	; 0x2b
 8006ab0:	d1c5      	bne.n	8006a3e <_strtoul_l.constprop.0+0x32>
 8006ab2:	781c      	ldrb	r4, [r3, #0]
 8006ab4:	1c95      	adds	r5, r2, #2
 8006ab6:	e7c2      	b.n	8006a3e <_strtoul_l.constprop.0+0x32>
 8006ab8:	0021      	movs	r1, r4
 8006aba:	3941      	subs	r1, #65	; 0x41
 8006abc:	2919      	cmp	r1, #25
 8006abe:	d801      	bhi.n	8006ac4 <_strtoul_l.constprop.0+0xb8>
 8006ac0:	3c37      	subs	r4, #55	; 0x37
 8006ac2:	e7e1      	b.n	8006a88 <_strtoul_l.constprop.0+0x7c>
 8006ac4:	0021      	movs	r1, r4
 8006ac6:	3961      	subs	r1, #97	; 0x61
 8006ac8:	2919      	cmp	r1, #25
 8006aca:	d803      	bhi.n	8006ad4 <_strtoul_l.constprop.0+0xc8>
 8006acc:	3c57      	subs	r4, #87	; 0x57
 8006ace:	e7db      	b.n	8006a88 <_strtoul_l.constprop.0+0x7c>
 8006ad0:	0013      	movs	r3, r2
 8006ad2:	e7e9      	b.n	8006aa8 <_strtoul_l.constprop.0+0x9c>
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	da09      	bge.n	8006aec <_strtoul_l.constprop.0+0xe0>
 8006ad8:	2322      	movs	r3, #34	; 0x22
 8006ada:	2001      	movs	r0, #1
 8006adc:	9a05      	ldr	r2, [sp, #20]
 8006ade:	4240      	negs	r0, r0
 8006ae0:	6013      	str	r3, [r2, #0]
 8006ae2:	9b02      	ldr	r3, [sp, #8]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d109      	bne.n	8006afc <_strtoul_l.constprop.0+0xf0>
 8006ae8:	b007      	add	sp, #28
 8006aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006aec:	2f00      	cmp	r7, #0
 8006aee:	d000      	beq.n	8006af2 <_strtoul_l.constprop.0+0xe6>
 8006af0:	4240      	negs	r0, r0
 8006af2:	9a02      	ldr	r2, [sp, #8]
 8006af4:	2a00      	cmp	r2, #0
 8006af6:	d0f7      	beq.n	8006ae8 <_strtoul_l.constprop.0+0xdc>
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d001      	beq.n	8006b00 <_strtoul_l.constprop.0+0xf4>
 8006afc:	1e6b      	subs	r3, r5, #1
 8006afe:	9301      	str	r3, [sp, #4]
 8006b00:	9b02      	ldr	r3, [sp, #8]
 8006b02:	9a01      	ldr	r2, [sp, #4]
 8006b04:	601a      	str	r2, [r3, #0]
 8006b06:	e7ef      	b.n	8006ae8 <_strtoul_l.constprop.0+0xdc>
 8006b08:	2430      	movs	r4, #48	; 0x30
 8006b0a:	2e00      	cmp	r6, #0
 8006b0c:	d1a5      	bne.n	8006a5a <_strtoul_l.constprop.0+0x4e>
 8006b0e:	3608      	adds	r6, #8
 8006b10:	e7a3      	b.n	8006a5a <_strtoul_l.constprop.0+0x4e>
 8006b12:	2c30      	cmp	r4, #48	; 0x30
 8006b14:	d099      	beq.n	8006a4a <_strtoul_l.constprop.0+0x3e>
 8006b16:	260a      	movs	r6, #10
 8006b18:	e79f      	b.n	8006a5a <_strtoul_l.constprop.0+0x4e>
 8006b1a:	46c0      	nop			; (mov r8, r8)
 8006b1c:	080076f3 	.word	0x080076f3

08006b20 <_strtoul_r>:
 8006b20:	b510      	push	{r4, lr}
 8006b22:	f7ff ff73 	bl	8006a0c <_strtoul_l.constprop.0>
 8006b26:	bd10      	pop	{r4, pc}

08006b28 <__submore>:
 8006b28:	000b      	movs	r3, r1
 8006b2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b2c:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8006b2e:	3344      	adds	r3, #68	; 0x44
 8006b30:	000c      	movs	r4, r1
 8006b32:	429d      	cmp	r5, r3
 8006b34:	d11c      	bne.n	8006b70 <__submore+0x48>
 8006b36:	2680      	movs	r6, #128	; 0x80
 8006b38:	00f6      	lsls	r6, r6, #3
 8006b3a:	0031      	movs	r1, r6
 8006b3c:	f7fe fe7a 	bl	8005834 <_malloc_r>
 8006b40:	2800      	cmp	r0, #0
 8006b42:	d102      	bne.n	8006b4a <__submore+0x22>
 8006b44:	2001      	movs	r0, #1
 8006b46:	4240      	negs	r0, r0
 8006b48:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006b4a:	0023      	movs	r3, r4
 8006b4c:	6360      	str	r0, [r4, #52]	; 0x34
 8006b4e:	63a6      	str	r6, [r4, #56]	; 0x38
 8006b50:	3346      	adds	r3, #70	; 0x46
 8006b52:	781a      	ldrb	r2, [r3, #0]
 8006b54:	4b10      	ldr	r3, [pc, #64]	; (8006b98 <__submore+0x70>)
 8006b56:	54c2      	strb	r2, [r0, r3]
 8006b58:	0023      	movs	r3, r4
 8006b5a:	3345      	adds	r3, #69	; 0x45
 8006b5c:	781a      	ldrb	r2, [r3, #0]
 8006b5e:	4b0f      	ldr	r3, [pc, #60]	; (8006b9c <__submore+0x74>)
 8006b60:	54c2      	strb	r2, [r0, r3]
 8006b62:	782a      	ldrb	r2, [r5, #0]
 8006b64:	4b0e      	ldr	r3, [pc, #56]	; (8006ba0 <__submore+0x78>)
 8006b66:	54c2      	strb	r2, [r0, r3]
 8006b68:	18c0      	adds	r0, r0, r3
 8006b6a:	6020      	str	r0, [r4, #0]
 8006b6c:	2000      	movs	r0, #0
 8006b6e:	e7eb      	b.n	8006b48 <__submore+0x20>
 8006b70:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 8006b72:	0029      	movs	r1, r5
 8006b74:	0073      	lsls	r3, r6, #1
 8006b76:	001a      	movs	r2, r3
 8006b78:	9301      	str	r3, [sp, #4]
 8006b7a:	f000 fb5f 	bl	800723c <_realloc_r>
 8006b7e:	1e05      	subs	r5, r0, #0
 8006b80:	d0e0      	beq.n	8006b44 <__submore+0x1c>
 8006b82:	1987      	adds	r7, r0, r6
 8006b84:	0001      	movs	r1, r0
 8006b86:	0032      	movs	r2, r6
 8006b88:	0038      	movs	r0, r7
 8006b8a:	f000 fb2a 	bl	80071e2 <memcpy>
 8006b8e:	9b01      	ldr	r3, [sp, #4]
 8006b90:	6027      	str	r7, [r4, #0]
 8006b92:	6365      	str	r5, [r4, #52]	; 0x34
 8006b94:	63a3      	str	r3, [r4, #56]	; 0x38
 8006b96:	e7e9      	b.n	8006b6c <__submore+0x44>
 8006b98:	000003ff 	.word	0x000003ff
 8006b9c:	000003fe 	.word	0x000003fe
 8006ba0:	000003fd 	.word	0x000003fd

08006ba4 <__swbuf_r>:
 8006ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ba6:	0005      	movs	r5, r0
 8006ba8:	000e      	movs	r6, r1
 8006baa:	0014      	movs	r4, r2
 8006bac:	2800      	cmp	r0, #0
 8006bae:	d004      	beq.n	8006bba <__swbuf_r+0x16>
 8006bb0:	6983      	ldr	r3, [r0, #24]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d101      	bne.n	8006bba <__swbuf_r+0x16>
 8006bb6:	f000 f9f9 	bl	8006fac <__sinit>
 8006bba:	4b22      	ldr	r3, [pc, #136]	; (8006c44 <__swbuf_r+0xa0>)
 8006bbc:	429c      	cmp	r4, r3
 8006bbe:	d12e      	bne.n	8006c1e <__swbuf_r+0x7a>
 8006bc0:	686c      	ldr	r4, [r5, #4]
 8006bc2:	69a3      	ldr	r3, [r4, #24]
 8006bc4:	60a3      	str	r3, [r4, #8]
 8006bc6:	89a3      	ldrh	r3, [r4, #12]
 8006bc8:	071b      	lsls	r3, r3, #28
 8006bca:	d532      	bpl.n	8006c32 <__swbuf_r+0x8e>
 8006bcc:	6923      	ldr	r3, [r4, #16]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d02f      	beq.n	8006c32 <__swbuf_r+0x8e>
 8006bd2:	6823      	ldr	r3, [r4, #0]
 8006bd4:	6922      	ldr	r2, [r4, #16]
 8006bd6:	b2f7      	uxtb	r7, r6
 8006bd8:	1a98      	subs	r0, r3, r2
 8006bda:	6963      	ldr	r3, [r4, #20]
 8006bdc:	b2f6      	uxtb	r6, r6
 8006bde:	4283      	cmp	r3, r0
 8006be0:	dc05      	bgt.n	8006bee <__swbuf_r+0x4a>
 8006be2:	0021      	movs	r1, r4
 8006be4:	0028      	movs	r0, r5
 8006be6:	f000 f93f 	bl	8006e68 <_fflush_r>
 8006bea:	2800      	cmp	r0, #0
 8006bec:	d127      	bne.n	8006c3e <__swbuf_r+0x9a>
 8006bee:	68a3      	ldr	r3, [r4, #8]
 8006bf0:	3001      	adds	r0, #1
 8006bf2:	3b01      	subs	r3, #1
 8006bf4:	60a3      	str	r3, [r4, #8]
 8006bf6:	6823      	ldr	r3, [r4, #0]
 8006bf8:	1c5a      	adds	r2, r3, #1
 8006bfa:	6022      	str	r2, [r4, #0]
 8006bfc:	701f      	strb	r7, [r3, #0]
 8006bfe:	6963      	ldr	r3, [r4, #20]
 8006c00:	4283      	cmp	r3, r0
 8006c02:	d004      	beq.n	8006c0e <__swbuf_r+0x6a>
 8006c04:	89a3      	ldrh	r3, [r4, #12]
 8006c06:	07db      	lsls	r3, r3, #31
 8006c08:	d507      	bpl.n	8006c1a <__swbuf_r+0x76>
 8006c0a:	2e0a      	cmp	r6, #10
 8006c0c:	d105      	bne.n	8006c1a <__swbuf_r+0x76>
 8006c0e:	0021      	movs	r1, r4
 8006c10:	0028      	movs	r0, r5
 8006c12:	f000 f929 	bl	8006e68 <_fflush_r>
 8006c16:	2800      	cmp	r0, #0
 8006c18:	d111      	bne.n	8006c3e <__swbuf_r+0x9a>
 8006c1a:	0030      	movs	r0, r6
 8006c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c1e:	4b0a      	ldr	r3, [pc, #40]	; (8006c48 <__swbuf_r+0xa4>)
 8006c20:	429c      	cmp	r4, r3
 8006c22:	d101      	bne.n	8006c28 <__swbuf_r+0x84>
 8006c24:	68ac      	ldr	r4, [r5, #8]
 8006c26:	e7cc      	b.n	8006bc2 <__swbuf_r+0x1e>
 8006c28:	4b08      	ldr	r3, [pc, #32]	; (8006c4c <__swbuf_r+0xa8>)
 8006c2a:	429c      	cmp	r4, r3
 8006c2c:	d1c9      	bne.n	8006bc2 <__swbuf_r+0x1e>
 8006c2e:	68ec      	ldr	r4, [r5, #12]
 8006c30:	e7c7      	b.n	8006bc2 <__swbuf_r+0x1e>
 8006c32:	0021      	movs	r1, r4
 8006c34:	0028      	movs	r0, r5
 8006c36:	f000 f80b 	bl	8006c50 <__swsetup_r>
 8006c3a:	2800      	cmp	r0, #0
 8006c3c:	d0c9      	beq.n	8006bd2 <__swbuf_r+0x2e>
 8006c3e:	2601      	movs	r6, #1
 8006c40:	4276      	negs	r6, r6
 8006c42:	e7ea      	b.n	8006c1a <__swbuf_r+0x76>
 8006c44:	08007814 	.word	0x08007814
 8006c48:	08007834 	.word	0x08007834
 8006c4c:	080077f4 	.word	0x080077f4

08006c50 <__swsetup_r>:
 8006c50:	4b37      	ldr	r3, [pc, #220]	; (8006d30 <__swsetup_r+0xe0>)
 8006c52:	b570      	push	{r4, r5, r6, lr}
 8006c54:	681d      	ldr	r5, [r3, #0]
 8006c56:	0006      	movs	r6, r0
 8006c58:	000c      	movs	r4, r1
 8006c5a:	2d00      	cmp	r5, #0
 8006c5c:	d005      	beq.n	8006c6a <__swsetup_r+0x1a>
 8006c5e:	69ab      	ldr	r3, [r5, #24]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d102      	bne.n	8006c6a <__swsetup_r+0x1a>
 8006c64:	0028      	movs	r0, r5
 8006c66:	f000 f9a1 	bl	8006fac <__sinit>
 8006c6a:	4b32      	ldr	r3, [pc, #200]	; (8006d34 <__swsetup_r+0xe4>)
 8006c6c:	429c      	cmp	r4, r3
 8006c6e:	d10f      	bne.n	8006c90 <__swsetup_r+0x40>
 8006c70:	686c      	ldr	r4, [r5, #4]
 8006c72:	230c      	movs	r3, #12
 8006c74:	5ee2      	ldrsh	r2, [r4, r3]
 8006c76:	b293      	uxth	r3, r2
 8006c78:	0711      	lsls	r1, r2, #28
 8006c7a:	d42d      	bmi.n	8006cd8 <__swsetup_r+0x88>
 8006c7c:	06d9      	lsls	r1, r3, #27
 8006c7e:	d411      	bmi.n	8006ca4 <__swsetup_r+0x54>
 8006c80:	2309      	movs	r3, #9
 8006c82:	2001      	movs	r0, #1
 8006c84:	6033      	str	r3, [r6, #0]
 8006c86:	3337      	adds	r3, #55	; 0x37
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	81a3      	strh	r3, [r4, #12]
 8006c8c:	4240      	negs	r0, r0
 8006c8e:	bd70      	pop	{r4, r5, r6, pc}
 8006c90:	4b29      	ldr	r3, [pc, #164]	; (8006d38 <__swsetup_r+0xe8>)
 8006c92:	429c      	cmp	r4, r3
 8006c94:	d101      	bne.n	8006c9a <__swsetup_r+0x4a>
 8006c96:	68ac      	ldr	r4, [r5, #8]
 8006c98:	e7eb      	b.n	8006c72 <__swsetup_r+0x22>
 8006c9a:	4b28      	ldr	r3, [pc, #160]	; (8006d3c <__swsetup_r+0xec>)
 8006c9c:	429c      	cmp	r4, r3
 8006c9e:	d1e8      	bne.n	8006c72 <__swsetup_r+0x22>
 8006ca0:	68ec      	ldr	r4, [r5, #12]
 8006ca2:	e7e6      	b.n	8006c72 <__swsetup_r+0x22>
 8006ca4:	075b      	lsls	r3, r3, #29
 8006ca6:	d513      	bpl.n	8006cd0 <__swsetup_r+0x80>
 8006ca8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006caa:	2900      	cmp	r1, #0
 8006cac:	d008      	beq.n	8006cc0 <__swsetup_r+0x70>
 8006cae:	0023      	movs	r3, r4
 8006cb0:	3344      	adds	r3, #68	; 0x44
 8006cb2:	4299      	cmp	r1, r3
 8006cb4:	d002      	beq.n	8006cbc <__swsetup_r+0x6c>
 8006cb6:	0030      	movs	r0, r6
 8006cb8:	f7fe fd50 	bl	800575c <_free_r>
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	6363      	str	r3, [r4, #52]	; 0x34
 8006cc0:	2224      	movs	r2, #36	; 0x24
 8006cc2:	89a3      	ldrh	r3, [r4, #12]
 8006cc4:	4393      	bics	r3, r2
 8006cc6:	81a3      	strh	r3, [r4, #12]
 8006cc8:	2300      	movs	r3, #0
 8006cca:	6063      	str	r3, [r4, #4]
 8006ccc:	6923      	ldr	r3, [r4, #16]
 8006cce:	6023      	str	r3, [r4, #0]
 8006cd0:	2308      	movs	r3, #8
 8006cd2:	89a2      	ldrh	r2, [r4, #12]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	81a3      	strh	r3, [r4, #12]
 8006cd8:	6923      	ldr	r3, [r4, #16]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d10b      	bne.n	8006cf6 <__swsetup_r+0xa6>
 8006cde:	21a0      	movs	r1, #160	; 0xa0
 8006ce0:	2280      	movs	r2, #128	; 0x80
 8006ce2:	89a3      	ldrh	r3, [r4, #12]
 8006ce4:	0089      	lsls	r1, r1, #2
 8006ce6:	0092      	lsls	r2, r2, #2
 8006ce8:	400b      	ands	r3, r1
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d003      	beq.n	8006cf6 <__swsetup_r+0xa6>
 8006cee:	0021      	movs	r1, r4
 8006cf0:	0030      	movs	r0, r6
 8006cf2:	f000 fa27 	bl	8007144 <__smakebuf_r>
 8006cf6:	220c      	movs	r2, #12
 8006cf8:	5ea3      	ldrsh	r3, [r4, r2]
 8006cfa:	2001      	movs	r0, #1
 8006cfc:	001a      	movs	r2, r3
 8006cfe:	b299      	uxth	r1, r3
 8006d00:	4002      	ands	r2, r0
 8006d02:	4203      	tst	r3, r0
 8006d04:	d00f      	beq.n	8006d26 <__swsetup_r+0xd6>
 8006d06:	2200      	movs	r2, #0
 8006d08:	60a2      	str	r2, [r4, #8]
 8006d0a:	6962      	ldr	r2, [r4, #20]
 8006d0c:	4252      	negs	r2, r2
 8006d0e:	61a2      	str	r2, [r4, #24]
 8006d10:	2000      	movs	r0, #0
 8006d12:	6922      	ldr	r2, [r4, #16]
 8006d14:	4282      	cmp	r2, r0
 8006d16:	d1ba      	bne.n	8006c8e <__swsetup_r+0x3e>
 8006d18:	060a      	lsls	r2, r1, #24
 8006d1a:	d5b8      	bpl.n	8006c8e <__swsetup_r+0x3e>
 8006d1c:	2240      	movs	r2, #64	; 0x40
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	81a3      	strh	r3, [r4, #12]
 8006d22:	3801      	subs	r0, #1
 8006d24:	e7b3      	b.n	8006c8e <__swsetup_r+0x3e>
 8006d26:	0788      	lsls	r0, r1, #30
 8006d28:	d400      	bmi.n	8006d2c <__swsetup_r+0xdc>
 8006d2a:	6962      	ldr	r2, [r4, #20]
 8006d2c:	60a2      	str	r2, [r4, #8]
 8006d2e:	e7ef      	b.n	8006d10 <__swsetup_r+0xc0>
 8006d30:	20000098 	.word	0x20000098
 8006d34:	08007814 	.word	0x08007814
 8006d38:	08007834 	.word	0x08007834
 8006d3c:	080077f4 	.word	0x080077f4

08006d40 <abort>:
 8006d40:	2006      	movs	r0, #6
 8006d42:	b510      	push	{r4, lr}
 8006d44:	f000 fad4 	bl	80072f0 <raise>
 8006d48:	2001      	movs	r0, #1
 8006d4a:	f7fa fae3 	bl	8001314 <_exit>
	...

08006d50 <__sflush_r>:
 8006d50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d52:	898b      	ldrh	r3, [r1, #12]
 8006d54:	0005      	movs	r5, r0
 8006d56:	000c      	movs	r4, r1
 8006d58:	071a      	lsls	r2, r3, #28
 8006d5a:	d45f      	bmi.n	8006e1c <__sflush_r+0xcc>
 8006d5c:	684a      	ldr	r2, [r1, #4]
 8006d5e:	2a00      	cmp	r2, #0
 8006d60:	dc04      	bgt.n	8006d6c <__sflush_r+0x1c>
 8006d62:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8006d64:	2a00      	cmp	r2, #0
 8006d66:	dc01      	bgt.n	8006d6c <__sflush_r+0x1c>
 8006d68:	2000      	movs	r0, #0
 8006d6a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006d6c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006d6e:	2f00      	cmp	r7, #0
 8006d70:	d0fa      	beq.n	8006d68 <__sflush_r+0x18>
 8006d72:	2200      	movs	r2, #0
 8006d74:	2180      	movs	r1, #128	; 0x80
 8006d76:	682e      	ldr	r6, [r5, #0]
 8006d78:	602a      	str	r2, [r5, #0]
 8006d7a:	001a      	movs	r2, r3
 8006d7c:	0149      	lsls	r1, r1, #5
 8006d7e:	400a      	ands	r2, r1
 8006d80:	420b      	tst	r3, r1
 8006d82:	d034      	beq.n	8006dee <__sflush_r+0x9e>
 8006d84:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d86:	89a3      	ldrh	r3, [r4, #12]
 8006d88:	075b      	lsls	r3, r3, #29
 8006d8a:	d506      	bpl.n	8006d9a <__sflush_r+0x4a>
 8006d8c:	6863      	ldr	r3, [r4, #4]
 8006d8e:	1ac0      	subs	r0, r0, r3
 8006d90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d001      	beq.n	8006d9a <__sflush_r+0x4a>
 8006d96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d98:	1ac0      	subs	r0, r0, r3
 8006d9a:	0002      	movs	r2, r0
 8006d9c:	6a21      	ldr	r1, [r4, #32]
 8006d9e:	2300      	movs	r3, #0
 8006da0:	0028      	movs	r0, r5
 8006da2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006da4:	47b8      	blx	r7
 8006da6:	89a1      	ldrh	r1, [r4, #12]
 8006da8:	1c43      	adds	r3, r0, #1
 8006daa:	d106      	bne.n	8006dba <__sflush_r+0x6a>
 8006dac:	682b      	ldr	r3, [r5, #0]
 8006dae:	2b1d      	cmp	r3, #29
 8006db0:	d831      	bhi.n	8006e16 <__sflush_r+0xc6>
 8006db2:	4a2c      	ldr	r2, [pc, #176]	; (8006e64 <__sflush_r+0x114>)
 8006db4:	40da      	lsrs	r2, r3
 8006db6:	07d3      	lsls	r3, r2, #31
 8006db8:	d52d      	bpl.n	8006e16 <__sflush_r+0xc6>
 8006dba:	2300      	movs	r3, #0
 8006dbc:	6063      	str	r3, [r4, #4]
 8006dbe:	6923      	ldr	r3, [r4, #16]
 8006dc0:	6023      	str	r3, [r4, #0]
 8006dc2:	04cb      	lsls	r3, r1, #19
 8006dc4:	d505      	bpl.n	8006dd2 <__sflush_r+0x82>
 8006dc6:	1c43      	adds	r3, r0, #1
 8006dc8:	d102      	bne.n	8006dd0 <__sflush_r+0x80>
 8006dca:	682b      	ldr	r3, [r5, #0]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d100      	bne.n	8006dd2 <__sflush_r+0x82>
 8006dd0:	6560      	str	r0, [r4, #84]	; 0x54
 8006dd2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006dd4:	602e      	str	r6, [r5, #0]
 8006dd6:	2900      	cmp	r1, #0
 8006dd8:	d0c6      	beq.n	8006d68 <__sflush_r+0x18>
 8006dda:	0023      	movs	r3, r4
 8006ddc:	3344      	adds	r3, #68	; 0x44
 8006dde:	4299      	cmp	r1, r3
 8006de0:	d002      	beq.n	8006de8 <__sflush_r+0x98>
 8006de2:	0028      	movs	r0, r5
 8006de4:	f7fe fcba 	bl	800575c <_free_r>
 8006de8:	2000      	movs	r0, #0
 8006dea:	6360      	str	r0, [r4, #52]	; 0x34
 8006dec:	e7bd      	b.n	8006d6a <__sflush_r+0x1a>
 8006dee:	2301      	movs	r3, #1
 8006df0:	0028      	movs	r0, r5
 8006df2:	6a21      	ldr	r1, [r4, #32]
 8006df4:	47b8      	blx	r7
 8006df6:	1c43      	adds	r3, r0, #1
 8006df8:	d1c5      	bne.n	8006d86 <__sflush_r+0x36>
 8006dfa:	682b      	ldr	r3, [r5, #0]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d0c2      	beq.n	8006d86 <__sflush_r+0x36>
 8006e00:	2b1d      	cmp	r3, #29
 8006e02:	d001      	beq.n	8006e08 <__sflush_r+0xb8>
 8006e04:	2b16      	cmp	r3, #22
 8006e06:	d101      	bne.n	8006e0c <__sflush_r+0xbc>
 8006e08:	602e      	str	r6, [r5, #0]
 8006e0a:	e7ad      	b.n	8006d68 <__sflush_r+0x18>
 8006e0c:	2340      	movs	r3, #64	; 0x40
 8006e0e:	89a2      	ldrh	r2, [r4, #12]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	81a3      	strh	r3, [r4, #12]
 8006e14:	e7a9      	b.n	8006d6a <__sflush_r+0x1a>
 8006e16:	2340      	movs	r3, #64	; 0x40
 8006e18:	430b      	orrs	r3, r1
 8006e1a:	e7fa      	b.n	8006e12 <__sflush_r+0xc2>
 8006e1c:	690f      	ldr	r7, [r1, #16]
 8006e1e:	2f00      	cmp	r7, #0
 8006e20:	d0a2      	beq.n	8006d68 <__sflush_r+0x18>
 8006e22:	680a      	ldr	r2, [r1, #0]
 8006e24:	600f      	str	r7, [r1, #0]
 8006e26:	1bd2      	subs	r2, r2, r7
 8006e28:	9201      	str	r2, [sp, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	079b      	lsls	r3, r3, #30
 8006e2e:	d100      	bne.n	8006e32 <__sflush_r+0xe2>
 8006e30:	694a      	ldr	r2, [r1, #20]
 8006e32:	60a2      	str	r2, [r4, #8]
 8006e34:	9b01      	ldr	r3, [sp, #4]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	dc00      	bgt.n	8006e3c <__sflush_r+0xec>
 8006e3a:	e795      	b.n	8006d68 <__sflush_r+0x18>
 8006e3c:	003a      	movs	r2, r7
 8006e3e:	0028      	movs	r0, r5
 8006e40:	9b01      	ldr	r3, [sp, #4]
 8006e42:	6a21      	ldr	r1, [r4, #32]
 8006e44:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006e46:	47b0      	blx	r6
 8006e48:	2800      	cmp	r0, #0
 8006e4a:	dc06      	bgt.n	8006e5a <__sflush_r+0x10a>
 8006e4c:	2340      	movs	r3, #64	; 0x40
 8006e4e:	2001      	movs	r0, #1
 8006e50:	89a2      	ldrh	r2, [r4, #12]
 8006e52:	4240      	negs	r0, r0
 8006e54:	4313      	orrs	r3, r2
 8006e56:	81a3      	strh	r3, [r4, #12]
 8006e58:	e787      	b.n	8006d6a <__sflush_r+0x1a>
 8006e5a:	9b01      	ldr	r3, [sp, #4]
 8006e5c:	183f      	adds	r7, r7, r0
 8006e5e:	1a1b      	subs	r3, r3, r0
 8006e60:	9301      	str	r3, [sp, #4]
 8006e62:	e7e7      	b.n	8006e34 <__sflush_r+0xe4>
 8006e64:	20400001 	.word	0x20400001

08006e68 <_fflush_r>:
 8006e68:	690b      	ldr	r3, [r1, #16]
 8006e6a:	b570      	push	{r4, r5, r6, lr}
 8006e6c:	0005      	movs	r5, r0
 8006e6e:	000c      	movs	r4, r1
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d102      	bne.n	8006e7a <_fflush_r+0x12>
 8006e74:	2500      	movs	r5, #0
 8006e76:	0028      	movs	r0, r5
 8006e78:	bd70      	pop	{r4, r5, r6, pc}
 8006e7a:	2800      	cmp	r0, #0
 8006e7c:	d004      	beq.n	8006e88 <_fflush_r+0x20>
 8006e7e:	6983      	ldr	r3, [r0, #24]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d101      	bne.n	8006e88 <_fflush_r+0x20>
 8006e84:	f000 f892 	bl	8006fac <__sinit>
 8006e88:	4b14      	ldr	r3, [pc, #80]	; (8006edc <_fflush_r+0x74>)
 8006e8a:	429c      	cmp	r4, r3
 8006e8c:	d11b      	bne.n	8006ec6 <_fflush_r+0x5e>
 8006e8e:	686c      	ldr	r4, [r5, #4]
 8006e90:	220c      	movs	r2, #12
 8006e92:	5ea3      	ldrsh	r3, [r4, r2]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d0ed      	beq.n	8006e74 <_fflush_r+0xc>
 8006e98:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e9a:	07d2      	lsls	r2, r2, #31
 8006e9c:	d404      	bmi.n	8006ea8 <_fflush_r+0x40>
 8006e9e:	059b      	lsls	r3, r3, #22
 8006ea0:	d402      	bmi.n	8006ea8 <_fflush_r+0x40>
 8006ea2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ea4:	f000 f923 	bl	80070ee <__retarget_lock_acquire_recursive>
 8006ea8:	0028      	movs	r0, r5
 8006eaa:	0021      	movs	r1, r4
 8006eac:	f7ff ff50 	bl	8006d50 <__sflush_r>
 8006eb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006eb2:	0005      	movs	r5, r0
 8006eb4:	07db      	lsls	r3, r3, #31
 8006eb6:	d4de      	bmi.n	8006e76 <_fflush_r+0xe>
 8006eb8:	89a3      	ldrh	r3, [r4, #12]
 8006eba:	059b      	lsls	r3, r3, #22
 8006ebc:	d4db      	bmi.n	8006e76 <_fflush_r+0xe>
 8006ebe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ec0:	f000 f916 	bl	80070f0 <__retarget_lock_release_recursive>
 8006ec4:	e7d7      	b.n	8006e76 <_fflush_r+0xe>
 8006ec6:	4b06      	ldr	r3, [pc, #24]	; (8006ee0 <_fflush_r+0x78>)
 8006ec8:	429c      	cmp	r4, r3
 8006eca:	d101      	bne.n	8006ed0 <_fflush_r+0x68>
 8006ecc:	68ac      	ldr	r4, [r5, #8]
 8006ece:	e7df      	b.n	8006e90 <_fflush_r+0x28>
 8006ed0:	4b04      	ldr	r3, [pc, #16]	; (8006ee4 <_fflush_r+0x7c>)
 8006ed2:	429c      	cmp	r4, r3
 8006ed4:	d1dc      	bne.n	8006e90 <_fflush_r+0x28>
 8006ed6:	68ec      	ldr	r4, [r5, #12]
 8006ed8:	e7da      	b.n	8006e90 <_fflush_r+0x28>
 8006eda:	46c0      	nop			; (mov r8, r8)
 8006edc:	08007814 	.word	0x08007814
 8006ee0:	08007834 	.word	0x08007834
 8006ee4:	080077f4 	.word	0x080077f4

08006ee8 <std>:
 8006ee8:	2300      	movs	r3, #0
 8006eea:	b510      	push	{r4, lr}
 8006eec:	0004      	movs	r4, r0
 8006eee:	6003      	str	r3, [r0, #0]
 8006ef0:	6043      	str	r3, [r0, #4]
 8006ef2:	6083      	str	r3, [r0, #8]
 8006ef4:	8181      	strh	r1, [r0, #12]
 8006ef6:	6643      	str	r3, [r0, #100]	; 0x64
 8006ef8:	0019      	movs	r1, r3
 8006efa:	81c2      	strh	r2, [r0, #14]
 8006efc:	6103      	str	r3, [r0, #16]
 8006efe:	6143      	str	r3, [r0, #20]
 8006f00:	6183      	str	r3, [r0, #24]
 8006f02:	2208      	movs	r2, #8
 8006f04:	305c      	adds	r0, #92	; 0x5c
 8006f06:	f7fe fa6f 	bl	80053e8 <memset>
 8006f0a:	4b05      	ldr	r3, [pc, #20]	; (8006f20 <std+0x38>)
 8006f0c:	6224      	str	r4, [r4, #32]
 8006f0e:	6263      	str	r3, [r4, #36]	; 0x24
 8006f10:	4b04      	ldr	r3, [pc, #16]	; (8006f24 <std+0x3c>)
 8006f12:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f14:	4b04      	ldr	r3, [pc, #16]	; (8006f28 <std+0x40>)
 8006f16:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006f18:	4b04      	ldr	r3, [pc, #16]	; (8006f2c <std+0x44>)
 8006f1a:	6323      	str	r3, [r4, #48]	; 0x30
 8006f1c:	bd10      	pop	{r4, pc}
 8006f1e:	46c0      	nop			; (mov r8, r8)
 8006f20:	080054f1 	.word	0x080054f1
 8006f24:	0800551d 	.word	0x0800551d
 8006f28:	08005555 	.word	0x08005555
 8006f2c:	08005581 	.word	0x08005581

08006f30 <_cleanup_r>:
 8006f30:	b510      	push	{r4, lr}
 8006f32:	4902      	ldr	r1, [pc, #8]	; (8006f3c <_cleanup_r+0xc>)
 8006f34:	f000 f8ba 	bl	80070ac <_fwalk_reent>
 8006f38:	bd10      	pop	{r4, pc}
 8006f3a:	46c0      	nop			; (mov r8, r8)
 8006f3c:	08006e69 	.word	0x08006e69

08006f40 <__sfmoreglue>:
 8006f40:	b570      	push	{r4, r5, r6, lr}
 8006f42:	2568      	movs	r5, #104	; 0x68
 8006f44:	1e4a      	subs	r2, r1, #1
 8006f46:	4355      	muls	r5, r2
 8006f48:	000e      	movs	r6, r1
 8006f4a:	0029      	movs	r1, r5
 8006f4c:	3174      	adds	r1, #116	; 0x74
 8006f4e:	f7fe fc71 	bl	8005834 <_malloc_r>
 8006f52:	1e04      	subs	r4, r0, #0
 8006f54:	d008      	beq.n	8006f68 <__sfmoreglue+0x28>
 8006f56:	2100      	movs	r1, #0
 8006f58:	002a      	movs	r2, r5
 8006f5a:	6001      	str	r1, [r0, #0]
 8006f5c:	6046      	str	r6, [r0, #4]
 8006f5e:	300c      	adds	r0, #12
 8006f60:	60a0      	str	r0, [r4, #8]
 8006f62:	3268      	adds	r2, #104	; 0x68
 8006f64:	f7fe fa40 	bl	80053e8 <memset>
 8006f68:	0020      	movs	r0, r4
 8006f6a:	bd70      	pop	{r4, r5, r6, pc}

08006f6c <__sfp_lock_acquire>:
 8006f6c:	b510      	push	{r4, lr}
 8006f6e:	4802      	ldr	r0, [pc, #8]	; (8006f78 <__sfp_lock_acquire+0xc>)
 8006f70:	f000 f8bd 	bl	80070ee <__retarget_lock_acquire_recursive>
 8006f74:	bd10      	pop	{r4, pc}
 8006f76:	46c0      	nop			; (mov r8, r8)
 8006f78:	20000539 	.word	0x20000539

08006f7c <__sfp_lock_release>:
 8006f7c:	b510      	push	{r4, lr}
 8006f7e:	4802      	ldr	r0, [pc, #8]	; (8006f88 <__sfp_lock_release+0xc>)
 8006f80:	f000 f8b6 	bl	80070f0 <__retarget_lock_release_recursive>
 8006f84:	bd10      	pop	{r4, pc}
 8006f86:	46c0      	nop			; (mov r8, r8)
 8006f88:	20000539 	.word	0x20000539

08006f8c <__sinit_lock_acquire>:
 8006f8c:	b510      	push	{r4, lr}
 8006f8e:	4802      	ldr	r0, [pc, #8]	; (8006f98 <__sinit_lock_acquire+0xc>)
 8006f90:	f000 f8ad 	bl	80070ee <__retarget_lock_acquire_recursive>
 8006f94:	bd10      	pop	{r4, pc}
 8006f96:	46c0      	nop			; (mov r8, r8)
 8006f98:	2000053a 	.word	0x2000053a

08006f9c <__sinit_lock_release>:
 8006f9c:	b510      	push	{r4, lr}
 8006f9e:	4802      	ldr	r0, [pc, #8]	; (8006fa8 <__sinit_lock_release+0xc>)
 8006fa0:	f000 f8a6 	bl	80070f0 <__retarget_lock_release_recursive>
 8006fa4:	bd10      	pop	{r4, pc}
 8006fa6:	46c0      	nop			; (mov r8, r8)
 8006fa8:	2000053a 	.word	0x2000053a

08006fac <__sinit>:
 8006fac:	b513      	push	{r0, r1, r4, lr}
 8006fae:	0004      	movs	r4, r0
 8006fb0:	f7ff ffec 	bl	8006f8c <__sinit_lock_acquire>
 8006fb4:	69a3      	ldr	r3, [r4, #24]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d002      	beq.n	8006fc0 <__sinit+0x14>
 8006fba:	f7ff ffef 	bl	8006f9c <__sinit_lock_release>
 8006fbe:	bd13      	pop	{r0, r1, r4, pc}
 8006fc0:	64a3      	str	r3, [r4, #72]	; 0x48
 8006fc2:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006fc4:	6523      	str	r3, [r4, #80]	; 0x50
 8006fc6:	4b13      	ldr	r3, [pc, #76]	; (8007014 <__sinit+0x68>)
 8006fc8:	4a13      	ldr	r2, [pc, #76]	; (8007018 <__sinit+0x6c>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	62a2      	str	r2, [r4, #40]	; 0x28
 8006fce:	9301      	str	r3, [sp, #4]
 8006fd0:	42a3      	cmp	r3, r4
 8006fd2:	d101      	bne.n	8006fd8 <__sinit+0x2c>
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	61a3      	str	r3, [r4, #24]
 8006fd8:	0020      	movs	r0, r4
 8006fda:	f000 f81f 	bl	800701c <__sfp>
 8006fde:	6060      	str	r0, [r4, #4]
 8006fe0:	0020      	movs	r0, r4
 8006fe2:	f000 f81b 	bl	800701c <__sfp>
 8006fe6:	60a0      	str	r0, [r4, #8]
 8006fe8:	0020      	movs	r0, r4
 8006fea:	f000 f817 	bl	800701c <__sfp>
 8006fee:	2200      	movs	r2, #0
 8006ff0:	2104      	movs	r1, #4
 8006ff2:	60e0      	str	r0, [r4, #12]
 8006ff4:	6860      	ldr	r0, [r4, #4]
 8006ff6:	f7ff ff77 	bl	8006ee8 <std>
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	2109      	movs	r1, #9
 8006ffe:	68a0      	ldr	r0, [r4, #8]
 8007000:	f7ff ff72 	bl	8006ee8 <std>
 8007004:	2202      	movs	r2, #2
 8007006:	2112      	movs	r1, #18
 8007008:	68e0      	ldr	r0, [r4, #12]
 800700a:	f7ff ff6d 	bl	8006ee8 <std>
 800700e:	2301      	movs	r3, #1
 8007010:	61a3      	str	r3, [r4, #24]
 8007012:	e7d2      	b.n	8006fba <__sinit+0xe>
 8007014:	080075f0 	.word	0x080075f0
 8007018:	08006f31 	.word	0x08006f31

0800701c <__sfp>:
 800701c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800701e:	0007      	movs	r7, r0
 8007020:	f7ff ffa4 	bl	8006f6c <__sfp_lock_acquire>
 8007024:	4b1f      	ldr	r3, [pc, #124]	; (80070a4 <__sfp+0x88>)
 8007026:	681e      	ldr	r6, [r3, #0]
 8007028:	69b3      	ldr	r3, [r6, #24]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d102      	bne.n	8007034 <__sfp+0x18>
 800702e:	0030      	movs	r0, r6
 8007030:	f7ff ffbc 	bl	8006fac <__sinit>
 8007034:	3648      	adds	r6, #72	; 0x48
 8007036:	68b4      	ldr	r4, [r6, #8]
 8007038:	6873      	ldr	r3, [r6, #4]
 800703a:	3b01      	subs	r3, #1
 800703c:	d504      	bpl.n	8007048 <__sfp+0x2c>
 800703e:	6833      	ldr	r3, [r6, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d022      	beq.n	800708a <__sfp+0x6e>
 8007044:	6836      	ldr	r6, [r6, #0]
 8007046:	e7f6      	b.n	8007036 <__sfp+0x1a>
 8007048:	220c      	movs	r2, #12
 800704a:	5ea5      	ldrsh	r5, [r4, r2]
 800704c:	2d00      	cmp	r5, #0
 800704e:	d11a      	bne.n	8007086 <__sfp+0x6a>
 8007050:	0020      	movs	r0, r4
 8007052:	4b15      	ldr	r3, [pc, #84]	; (80070a8 <__sfp+0x8c>)
 8007054:	3058      	adds	r0, #88	; 0x58
 8007056:	60e3      	str	r3, [r4, #12]
 8007058:	6665      	str	r5, [r4, #100]	; 0x64
 800705a:	f000 f847 	bl	80070ec <__retarget_lock_init_recursive>
 800705e:	f7ff ff8d 	bl	8006f7c <__sfp_lock_release>
 8007062:	0020      	movs	r0, r4
 8007064:	2208      	movs	r2, #8
 8007066:	0029      	movs	r1, r5
 8007068:	6025      	str	r5, [r4, #0]
 800706a:	60a5      	str	r5, [r4, #8]
 800706c:	6065      	str	r5, [r4, #4]
 800706e:	6125      	str	r5, [r4, #16]
 8007070:	6165      	str	r5, [r4, #20]
 8007072:	61a5      	str	r5, [r4, #24]
 8007074:	305c      	adds	r0, #92	; 0x5c
 8007076:	f7fe f9b7 	bl	80053e8 <memset>
 800707a:	6365      	str	r5, [r4, #52]	; 0x34
 800707c:	63a5      	str	r5, [r4, #56]	; 0x38
 800707e:	64a5      	str	r5, [r4, #72]	; 0x48
 8007080:	64e5      	str	r5, [r4, #76]	; 0x4c
 8007082:	0020      	movs	r0, r4
 8007084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007086:	3468      	adds	r4, #104	; 0x68
 8007088:	e7d7      	b.n	800703a <__sfp+0x1e>
 800708a:	2104      	movs	r1, #4
 800708c:	0038      	movs	r0, r7
 800708e:	f7ff ff57 	bl	8006f40 <__sfmoreglue>
 8007092:	1e04      	subs	r4, r0, #0
 8007094:	6030      	str	r0, [r6, #0]
 8007096:	d1d5      	bne.n	8007044 <__sfp+0x28>
 8007098:	f7ff ff70 	bl	8006f7c <__sfp_lock_release>
 800709c:	230c      	movs	r3, #12
 800709e:	603b      	str	r3, [r7, #0]
 80070a0:	e7ef      	b.n	8007082 <__sfp+0x66>
 80070a2:	46c0      	nop			; (mov r8, r8)
 80070a4:	080075f0 	.word	0x080075f0
 80070a8:	ffff0001 	.word	0xffff0001

080070ac <_fwalk_reent>:
 80070ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070ae:	0004      	movs	r4, r0
 80070b0:	0006      	movs	r6, r0
 80070b2:	2700      	movs	r7, #0
 80070b4:	9101      	str	r1, [sp, #4]
 80070b6:	3448      	adds	r4, #72	; 0x48
 80070b8:	6863      	ldr	r3, [r4, #4]
 80070ba:	68a5      	ldr	r5, [r4, #8]
 80070bc:	9300      	str	r3, [sp, #0]
 80070be:	9b00      	ldr	r3, [sp, #0]
 80070c0:	3b01      	subs	r3, #1
 80070c2:	9300      	str	r3, [sp, #0]
 80070c4:	d504      	bpl.n	80070d0 <_fwalk_reent+0x24>
 80070c6:	6824      	ldr	r4, [r4, #0]
 80070c8:	2c00      	cmp	r4, #0
 80070ca:	d1f5      	bne.n	80070b8 <_fwalk_reent+0xc>
 80070cc:	0038      	movs	r0, r7
 80070ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80070d0:	89ab      	ldrh	r3, [r5, #12]
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d908      	bls.n	80070e8 <_fwalk_reent+0x3c>
 80070d6:	220e      	movs	r2, #14
 80070d8:	5eab      	ldrsh	r3, [r5, r2]
 80070da:	3301      	adds	r3, #1
 80070dc:	d004      	beq.n	80070e8 <_fwalk_reent+0x3c>
 80070de:	0029      	movs	r1, r5
 80070e0:	0030      	movs	r0, r6
 80070e2:	9b01      	ldr	r3, [sp, #4]
 80070e4:	4798      	blx	r3
 80070e6:	4307      	orrs	r7, r0
 80070e8:	3568      	adds	r5, #104	; 0x68
 80070ea:	e7e8      	b.n	80070be <_fwalk_reent+0x12>

080070ec <__retarget_lock_init_recursive>:
 80070ec:	4770      	bx	lr

080070ee <__retarget_lock_acquire_recursive>:
 80070ee:	4770      	bx	lr

080070f0 <__retarget_lock_release_recursive>:
 80070f0:	4770      	bx	lr
	...

080070f4 <__swhatbuf_r>:
 80070f4:	b570      	push	{r4, r5, r6, lr}
 80070f6:	000e      	movs	r6, r1
 80070f8:	001d      	movs	r5, r3
 80070fa:	230e      	movs	r3, #14
 80070fc:	5ec9      	ldrsh	r1, [r1, r3]
 80070fe:	0014      	movs	r4, r2
 8007100:	b096      	sub	sp, #88	; 0x58
 8007102:	2900      	cmp	r1, #0
 8007104:	da08      	bge.n	8007118 <__swhatbuf_r+0x24>
 8007106:	220c      	movs	r2, #12
 8007108:	5eb3      	ldrsh	r3, [r6, r2]
 800710a:	2200      	movs	r2, #0
 800710c:	602a      	str	r2, [r5, #0]
 800710e:	061b      	lsls	r3, r3, #24
 8007110:	d411      	bmi.n	8007136 <__swhatbuf_r+0x42>
 8007112:	2380      	movs	r3, #128	; 0x80
 8007114:	00db      	lsls	r3, r3, #3
 8007116:	e00f      	b.n	8007138 <__swhatbuf_r+0x44>
 8007118:	466a      	mov	r2, sp
 800711a:	f000 f909 	bl	8007330 <_fstat_r>
 800711e:	2800      	cmp	r0, #0
 8007120:	dbf1      	blt.n	8007106 <__swhatbuf_r+0x12>
 8007122:	23f0      	movs	r3, #240	; 0xf0
 8007124:	9901      	ldr	r1, [sp, #4]
 8007126:	021b      	lsls	r3, r3, #8
 8007128:	4019      	ands	r1, r3
 800712a:	4b05      	ldr	r3, [pc, #20]	; (8007140 <__swhatbuf_r+0x4c>)
 800712c:	18c9      	adds	r1, r1, r3
 800712e:	424b      	negs	r3, r1
 8007130:	4159      	adcs	r1, r3
 8007132:	6029      	str	r1, [r5, #0]
 8007134:	e7ed      	b.n	8007112 <__swhatbuf_r+0x1e>
 8007136:	2340      	movs	r3, #64	; 0x40
 8007138:	2000      	movs	r0, #0
 800713a:	6023      	str	r3, [r4, #0]
 800713c:	b016      	add	sp, #88	; 0x58
 800713e:	bd70      	pop	{r4, r5, r6, pc}
 8007140:	ffffe000 	.word	0xffffe000

08007144 <__smakebuf_r>:
 8007144:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007146:	2602      	movs	r6, #2
 8007148:	898b      	ldrh	r3, [r1, #12]
 800714a:	0005      	movs	r5, r0
 800714c:	000c      	movs	r4, r1
 800714e:	4233      	tst	r3, r6
 8007150:	d006      	beq.n	8007160 <__smakebuf_r+0x1c>
 8007152:	0023      	movs	r3, r4
 8007154:	3347      	adds	r3, #71	; 0x47
 8007156:	6023      	str	r3, [r4, #0]
 8007158:	6123      	str	r3, [r4, #16]
 800715a:	2301      	movs	r3, #1
 800715c:	6163      	str	r3, [r4, #20]
 800715e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8007160:	466a      	mov	r2, sp
 8007162:	ab01      	add	r3, sp, #4
 8007164:	f7ff ffc6 	bl	80070f4 <__swhatbuf_r>
 8007168:	9900      	ldr	r1, [sp, #0]
 800716a:	0007      	movs	r7, r0
 800716c:	0028      	movs	r0, r5
 800716e:	f7fe fb61 	bl	8005834 <_malloc_r>
 8007172:	2800      	cmp	r0, #0
 8007174:	d108      	bne.n	8007188 <__smakebuf_r+0x44>
 8007176:	220c      	movs	r2, #12
 8007178:	5ea3      	ldrsh	r3, [r4, r2]
 800717a:	059a      	lsls	r2, r3, #22
 800717c:	d4ef      	bmi.n	800715e <__smakebuf_r+0x1a>
 800717e:	2203      	movs	r2, #3
 8007180:	4393      	bics	r3, r2
 8007182:	431e      	orrs	r6, r3
 8007184:	81a6      	strh	r6, [r4, #12]
 8007186:	e7e4      	b.n	8007152 <__smakebuf_r+0xe>
 8007188:	4b0f      	ldr	r3, [pc, #60]	; (80071c8 <__smakebuf_r+0x84>)
 800718a:	62ab      	str	r3, [r5, #40]	; 0x28
 800718c:	2380      	movs	r3, #128	; 0x80
 800718e:	89a2      	ldrh	r2, [r4, #12]
 8007190:	6020      	str	r0, [r4, #0]
 8007192:	4313      	orrs	r3, r2
 8007194:	81a3      	strh	r3, [r4, #12]
 8007196:	9b00      	ldr	r3, [sp, #0]
 8007198:	6120      	str	r0, [r4, #16]
 800719a:	6163      	str	r3, [r4, #20]
 800719c:	9b01      	ldr	r3, [sp, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00d      	beq.n	80071be <__smakebuf_r+0x7a>
 80071a2:	0028      	movs	r0, r5
 80071a4:	230e      	movs	r3, #14
 80071a6:	5ee1      	ldrsh	r1, [r4, r3]
 80071a8:	f000 f8d4 	bl	8007354 <_isatty_r>
 80071ac:	2800      	cmp	r0, #0
 80071ae:	d006      	beq.n	80071be <__smakebuf_r+0x7a>
 80071b0:	2203      	movs	r2, #3
 80071b2:	89a3      	ldrh	r3, [r4, #12]
 80071b4:	4393      	bics	r3, r2
 80071b6:	001a      	movs	r2, r3
 80071b8:	2301      	movs	r3, #1
 80071ba:	4313      	orrs	r3, r2
 80071bc:	81a3      	strh	r3, [r4, #12]
 80071be:	89a0      	ldrh	r0, [r4, #12]
 80071c0:	4307      	orrs	r7, r0
 80071c2:	81a7      	strh	r7, [r4, #12]
 80071c4:	e7cb      	b.n	800715e <__smakebuf_r+0x1a>
 80071c6:	46c0      	nop			; (mov r8, r8)
 80071c8:	08006f31 	.word	0x08006f31

080071cc <memchr>:
 80071cc:	b2c9      	uxtb	r1, r1
 80071ce:	1882      	adds	r2, r0, r2
 80071d0:	4290      	cmp	r0, r2
 80071d2:	d101      	bne.n	80071d8 <memchr+0xc>
 80071d4:	2000      	movs	r0, #0
 80071d6:	4770      	bx	lr
 80071d8:	7803      	ldrb	r3, [r0, #0]
 80071da:	428b      	cmp	r3, r1
 80071dc:	d0fb      	beq.n	80071d6 <memchr+0xa>
 80071de:	3001      	adds	r0, #1
 80071e0:	e7f6      	b.n	80071d0 <memchr+0x4>

080071e2 <memcpy>:
 80071e2:	2300      	movs	r3, #0
 80071e4:	b510      	push	{r4, lr}
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d100      	bne.n	80071ec <memcpy+0xa>
 80071ea:	bd10      	pop	{r4, pc}
 80071ec:	5ccc      	ldrb	r4, [r1, r3]
 80071ee:	54c4      	strb	r4, [r0, r3]
 80071f0:	3301      	adds	r3, #1
 80071f2:	e7f8      	b.n	80071e6 <memcpy+0x4>

080071f4 <memmove>:
 80071f4:	b510      	push	{r4, lr}
 80071f6:	4288      	cmp	r0, r1
 80071f8:	d902      	bls.n	8007200 <memmove+0xc>
 80071fa:	188b      	adds	r3, r1, r2
 80071fc:	4298      	cmp	r0, r3
 80071fe:	d303      	bcc.n	8007208 <memmove+0x14>
 8007200:	2300      	movs	r3, #0
 8007202:	e007      	b.n	8007214 <memmove+0x20>
 8007204:	5c8b      	ldrb	r3, [r1, r2]
 8007206:	5483      	strb	r3, [r0, r2]
 8007208:	3a01      	subs	r2, #1
 800720a:	d2fb      	bcs.n	8007204 <memmove+0x10>
 800720c:	bd10      	pop	{r4, pc}
 800720e:	5ccc      	ldrb	r4, [r1, r3]
 8007210:	54c4      	strb	r4, [r0, r3]
 8007212:	3301      	adds	r3, #1
 8007214:	429a      	cmp	r2, r3
 8007216:	d1fa      	bne.n	800720e <memmove+0x1a>
 8007218:	e7f8      	b.n	800720c <memmove+0x18>
	...

0800721c <__malloc_lock>:
 800721c:	b510      	push	{r4, lr}
 800721e:	4802      	ldr	r0, [pc, #8]	; (8007228 <__malloc_lock+0xc>)
 8007220:	f7ff ff65 	bl	80070ee <__retarget_lock_acquire_recursive>
 8007224:	bd10      	pop	{r4, pc}
 8007226:	46c0      	nop			; (mov r8, r8)
 8007228:	20000538 	.word	0x20000538

0800722c <__malloc_unlock>:
 800722c:	b510      	push	{r4, lr}
 800722e:	4802      	ldr	r0, [pc, #8]	; (8007238 <__malloc_unlock+0xc>)
 8007230:	f7ff ff5e 	bl	80070f0 <__retarget_lock_release_recursive>
 8007234:	bd10      	pop	{r4, pc}
 8007236:	46c0      	nop			; (mov r8, r8)
 8007238:	20000538 	.word	0x20000538

0800723c <_realloc_r>:
 800723c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800723e:	0007      	movs	r7, r0
 8007240:	000e      	movs	r6, r1
 8007242:	0014      	movs	r4, r2
 8007244:	2900      	cmp	r1, #0
 8007246:	d105      	bne.n	8007254 <_realloc_r+0x18>
 8007248:	0011      	movs	r1, r2
 800724a:	f7fe faf3 	bl	8005834 <_malloc_r>
 800724e:	0005      	movs	r5, r0
 8007250:	0028      	movs	r0, r5
 8007252:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007254:	2a00      	cmp	r2, #0
 8007256:	d103      	bne.n	8007260 <_realloc_r+0x24>
 8007258:	f7fe fa80 	bl	800575c <_free_r>
 800725c:	0025      	movs	r5, r4
 800725e:	e7f7      	b.n	8007250 <_realloc_r+0x14>
 8007260:	f000 f88a 	bl	8007378 <_malloc_usable_size_r>
 8007264:	9001      	str	r0, [sp, #4]
 8007266:	4284      	cmp	r4, r0
 8007268:	d803      	bhi.n	8007272 <_realloc_r+0x36>
 800726a:	0035      	movs	r5, r6
 800726c:	0843      	lsrs	r3, r0, #1
 800726e:	42a3      	cmp	r3, r4
 8007270:	d3ee      	bcc.n	8007250 <_realloc_r+0x14>
 8007272:	0021      	movs	r1, r4
 8007274:	0038      	movs	r0, r7
 8007276:	f7fe fadd 	bl	8005834 <_malloc_r>
 800727a:	1e05      	subs	r5, r0, #0
 800727c:	d0e8      	beq.n	8007250 <_realloc_r+0x14>
 800727e:	9b01      	ldr	r3, [sp, #4]
 8007280:	0022      	movs	r2, r4
 8007282:	429c      	cmp	r4, r3
 8007284:	d900      	bls.n	8007288 <_realloc_r+0x4c>
 8007286:	001a      	movs	r2, r3
 8007288:	0031      	movs	r1, r6
 800728a:	0028      	movs	r0, r5
 800728c:	f7ff ffa9 	bl	80071e2 <memcpy>
 8007290:	0031      	movs	r1, r6
 8007292:	0038      	movs	r0, r7
 8007294:	f7fe fa62 	bl	800575c <_free_r>
 8007298:	e7da      	b.n	8007250 <_realloc_r+0x14>

0800729a <_raise_r>:
 800729a:	b570      	push	{r4, r5, r6, lr}
 800729c:	0004      	movs	r4, r0
 800729e:	000d      	movs	r5, r1
 80072a0:	291f      	cmp	r1, #31
 80072a2:	d904      	bls.n	80072ae <_raise_r+0x14>
 80072a4:	2316      	movs	r3, #22
 80072a6:	6003      	str	r3, [r0, #0]
 80072a8:	2001      	movs	r0, #1
 80072aa:	4240      	negs	r0, r0
 80072ac:	bd70      	pop	{r4, r5, r6, pc}
 80072ae:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d004      	beq.n	80072be <_raise_r+0x24>
 80072b4:	008a      	lsls	r2, r1, #2
 80072b6:	189b      	adds	r3, r3, r2
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	2a00      	cmp	r2, #0
 80072bc:	d108      	bne.n	80072d0 <_raise_r+0x36>
 80072be:	0020      	movs	r0, r4
 80072c0:	f000 f832 	bl	8007328 <_getpid_r>
 80072c4:	002a      	movs	r2, r5
 80072c6:	0001      	movs	r1, r0
 80072c8:	0020      	movs	r0, r4
 80072ca:	f000 f81b 	bl	8007304 <_kill_r>
 80072ce:	e7ed      	b.n	80072ac <_raise_r+0x12>
 80072d0:	2000      	movs	r0, #0
 80072d2:	2a01      	cmp	r2, #1
 80072d4:	d0ea      	beq.n	80072ac <_raise_r+0x12>
 80072d6:	1c51      	adds	r1, r2, #1
 80072d8:	d103      	bne.n	80072e2 <_raise_r+0x48>
 80072da:	2316      	movs	r3, #22
 80072dc:	3001      	adds	r0, #1
 80072de:	6023      	str	r3, [r4, #0]
 80072e0:	e7e4      	b.n	80072ac <_raise_r+0x12>
 80072e2:	2400      	movs	r4, #0
 80072e4:	0028      	movs	r0, r5
 80072e6:	601c      	str	r4, [r3, #0]
 80072e8:	4790      	blx	r2
 80072ea:	0020      	movs	r0, r4
 80072ec:	e7de      	b.n	80072ac <_raise_r+0x12>
	...

080072f0 <raise>:
 80072f0:	b510      	push	{r4, lr}
 80072f2:	4b03      	ldr	r3, [pc, #12]	; (8007300 <raise+0x10>)
 80072f4:	0001      	movs	r1, r0
 80072f6:	6818      	ldr	r0, [r3, #0]
 80072f8:	f7ff ffcf 	bl	800729a <_raise_r>
 80072fc:	bd10      	pop	{r4, pc}
 80072fe:	46c0      	nop			; (mov r8, r8)
 8007300:	20000098 	.word	0x20000098

08007304 <_kill_r>:
 8007304:	2300      	movs	r3, #0
 8007306:	b570      	push	{r4, r5, r6, lr}
 8007308:	4d06      	ldr	r5, [pc, #24]	; (8007324 <_kill_r+0x20>)
 800730a:	0004      	movs	r4, r0
 800730c:	0008      	movs	r0, r1
 800730e:	0011      	movs	r1, r2
 8007310:	602b      	str	r3, [r5, #0]
 8007312:	f7f9 ffef 	bl	80012f4 <_kill>
 8007316:	1c43      	adds	r3, r0, #1
 8007318:	d103      	bne.n	8007322 <_kill_r+0x1e>
 800731a:	682b      	ldr	r3, [r5, #0]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d000      	beq.n	8007322 <_kill_r+0x1e>
 8007320:	6023      	str	r3, [r4, #0]
 8007322:	bd70      	pop	{r4, r5, r6, pc}
 8007324:	20000534 	.word	0x20000534

08007328 <_getpid_r>:
 8007328:	b510      	push	{r4, lr}
 800732a:	f7f9 ffdd 	bl	80012e8 <_getpid>
 800732e:	bd10      	pop	{r4, pc}

08007330 <_fstat_r>:
 8007330:	2300      	movs	r3, #0
 8007332:	b570      	push	{r4, r5, r6, lr}
 8007334:	4d06      	ldr	r5, [pc, #24]	; (8007350 <_fstat_r+0x20>)
 8007336:	0004      	movs	r4, r0
 8007338:	0008      	movs	r0, r1
 800733a:	0011      	movs	r1, r2
 800733c:	602b      	str	r3, [r5, #0]
 800733e:	f7fa f838 	bl	80013b2 <_fstat>
 8007342:	1c43      	adds	r3, r0, #1
 8007344:	d103      	bne.n	800734e <_fstat_r+0x1e>
 8007346:	682b      	ldr	r3, [r5, #0]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d000      	beq.n	800734e <_fstat_r+0x1e>
 800734c:	6023      	str	r3, [r4, #0]
 800734e:	bd70      	pop	{r4, r5, r6, pc}
 8007350:	20000534 	.word	0x20000534

08007354 <_isatty_r>:
 8007354:	2300      	movs	r3, #0
 8007356:	b570      	push	{r4, r5, r6, lr}
 8007358:	4d06      	ldr	r5, [pc, #24]	; (8007374 <_isatty_r+0x20>)
 800735a:	0004      	movs	r4, r0
 800735c:	0008      	movs	r0, r1
 800735e:	602b      	str	r3, [r5, #0]
 8007360:	f7fa f835 	bl	80013ce <_isatty>
 8007364:	1c43      	adds	r3, r0, #1
 8007366:	d103      	bne.n	8007370 <_isatty_r+0x1c>
 8007368:	682b      	ldr	r3, [r5, #0]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d000      	beq.n	8007370 <_isatty_r+0x1c>
 800736e:	6023      	str	r3, [r4, #0]
 8007370:	bd70      	pop	{r4, r5, r6, pc}
 8007372:	46c0      	nop			; (mov r8, r8)
 8007374:	20000534 	.word	0x20000534

08007378 <_malloc_usable_size_r>:
 8007378:	1f0b      	subs	r3, r1, #4
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	1f18      	subs	r0, r3, #4
 800737e:	2b00      	cmp	r3, #0
 8007380:	da01      	bge.n	8007386 <_malloc_usable_size_r+0xe>
 8007382:	580b      	ldr	r3, [r1, r0]
 8007384:	18c0      	adds	r0, r0, r3
 8007386:	4770      	bx	lr

08007388 <_init>:
 8007388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800738a:	46c0      	nop			; (mov r8, r8)
 800738c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800738e:	bc08      	pop	{r3}
 8007390:	469e      	mov	lr, r3
 8007392:	4770      	bx	lr

08007394 <_fini>:
 8007394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007396:	46c0      	nop			; (mov r8, r8)
 8007398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800739a:	bc08      	pop	{r3}
 800739c:	469e      	mov	lr, r3
 800739e:	4770      	bx	lr
