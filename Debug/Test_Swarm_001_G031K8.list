
Test_Swarm_001_G031K8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072e0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  0800739c  0800739c  0001739c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007850  08007850  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08007850  08007850  00017850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007858  08007858  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007858  08007858  00017858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800785c  0800785c  0001785c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08007860  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000440  200000fc  0800795c  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000053c  0800795c  0002053c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015354  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002af9  00000000  00000000  00035478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001258  00000000  00000000  00037f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001140  00000000  00000000  000391d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188b8  00000000  00000000  0003a310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015018  00000000  00000000  00052bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b29b  00000000  00000000  00067be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00102e7b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000510c  00000000  00000000  00102ecc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200000fc 	.word	0x200000fc
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08007384 	.word	0x08007384

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000100 	.word	0x20000100
 8000100:	08007384 	.word	0x08007384

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	469b      	mov	fp, r3
 800048a:	d433      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048c:	465a      	mov	r2, fp
 800048e:	4653      	mov	r3, sl
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83a      	bhi.n	8000516 <__udivmoddi4+0xc2>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e078      	b.n	8000598 <__udivmoddi4+0x144>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e075      	b.n	800059e <__udivmoddi4+0x14a>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e028      	b.n	800051e <__udivmoddi4+0xca>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	2320      	movs	r3, #32
 80004f8:	1a9b      	subs	r3, r3, r2
 80004fa:	4652      	mov	r2, sl
 80004fc:	40da      	lsrs	r2, r3
 80004fe:	4641      	mov	r1, r8
 8000500:	0013      	movs	r3, r2
 8000502:	464a      	mov	r2, r9
 8000504:	408a      	lsls	r2, r1
 8000506:	0017      	movs	r7, r2
 8000508:	4642      	mov	r2, r8
 800050a:	431f      	orrs	r7, r3
 800050c:	4653      	mov	r3, sl
 800050e:	4093      	lsls	r3, r2
 8000510:	001e      	movs	r6, r3
 8000512:	42af      	cmp	r7, r5
 8000514:	d9c4      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000516:	2200      	movs	r2, #0
 8000518:	2300      	movs	r3, #0
 800051a:	9200      	str	r2, [sp, #0]
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	4643      	mov	r3, r8
 8000520:	2b00      	cmp	r3, #0
 8000522:	d0d9      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000524:	07fb      	lsls	r3, r7, #31
 8000526:	0872      	lsrs	r2, r6, #1
 8000528:	431a      	orrs	r2, r3
 800052a:	4646      	mov	r6, r8
 800052c:	087b      	lsrs	r3, r7, #1
 800052e:	e00e      	b.n	800054e <__udivmoddi4+0xfa>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d101      	bne.n	8000538 <__udivmoddi4+0xe4>
 8000534:	42a2      	cmp	r2, r4
 8000536:	d80c      	bhi.n	8000552 <__udivmoddi4+0xfe>
 8000538:	1aa4      	subs	r4, r4, r2
 800053a:	419d      	sbcs	r5, r3
 800053c:	2001      	movs	r0, #1
 800053e:	1924      	adds	r4, r4, r4
 8000540:	416d      	adcs	r5, r5
 8000542:	2100      	movs	r1, #0
 8000544:	3e01      	subs	r6, #1
 8000546:	1824      	adds	r4, r4, r0
 8000548:	414d      	adcs	r5, r1
 800054a:	2e00      	cmp	r6, #0
 800054c:	d006      	beq.n	800055c <__udivmoddi4+0x108>
 800054e:	42ab      	cmp	r3, r5
 8000550:	d9ee      	bls.n	8000530 <__udivmoddi4+0xdc>
 8000552:	3e01      	subs	r6, #1
 8000554:	1924      	adds	r4, r4, r4
 8000556:	416d      	adcs	r5, r5
 8000558:	2e00      	cmp	r6, #0
 800055a:	d1f8      	bne.n	800054e <__udivmoddi4+0xfa>
 800055c:	9800      	ldr	r0, [sp, #0]
 800055e:	9901      	ldr	r1, [sp, #4]
 8000560:	465b      	mov	r3, fp
 8000562:	1900      	adds	r0, r0, r4
 8000564:	4169      	adcs	r1, r5
 8000566:	2b00      	cmp	r3, #0
 8000568:	db24      	blt.n	80005b4 <__udivmoddi4+0x160>
 800056a:	002b      	movs	r3, r5
 800056c:	465a      	mov	r2, fp
 800056e:	4644      	mov	r4, r8
 8000570:	40d3      	lsrs	r3, r2
 8000572:	002a      	movs	r2, r5
 8000574:	40e2      	lsrs	r2, r4
 8000576:	001c      	movs	r4, r3
 8000578:	465b      	mov	r3, fp
 800057a:	0015      	movs	r5, r2
 800057c:	2b00      	cmp	r3, #0
 800057e:	db2a      	blt.n	80005d6 <__udivmoddi4+0x182>
 8000580:	0026      	movs	r6, r4
 8000582:	409e      	lsls	r6, r3
 8000584:	0033      	movs	r3, r6
 8000586:	0026      	movs	r6, r4
 8000588:	4647      	mov	r7, r8
 800058a:	40be      	lsls	r6, r7
 800058c:	0032      	movs	r2, r6
 800058e:	1a80      	subs	r0, r0, r2
 8000590:	4199      	sbcs	r1, r3
 8000592:	9000      	str	r0, [sp, #0]
 8000594:	9101      	str	r1, [sp, #4]
 8000596:	e79f      	b.n	80004d8 <__udivmoddi4+0x84>
 8000598:	42a3      	cmp	r3, r4
 800059a:	d8bc      	bhi.n	8000516 <__udivmoddi4+0xc2>
 800059c:	e783      	b.n	80004a6 <__udivmoddi4+0x52>
 800059e:	4642      	mov	r2, r8
 80005a0:	2320      	movs	r3, #32
 80005a2:	2100      	movs	r1, #0
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	2200      	movs	r2, #0
 80005a8:	9100      	str	r1, [sp, #0]
 80005aa:	9201      	str	r2, [sp, #4]
 80005ac:	2201      	movs	r2, #1
 80005ae:	40da      	lsrs	r2, r3
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	e786      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	2320      	movs	r3, #32
 80005b8:	1a9b      	subs	r3, r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	4646      	mov	r6, r8
 80005be:	409a      	lsls	r2, r3
 80005c0:	0023      	movs	r3, r4
 80005c2:	40f3      	lsrs	r3, r6
 80005c4:	4644      	mov	r4, r8
 80005c6:	4313      	orrs	r3, r2
 80005c8:	002a      	movs	r2, r5
 80005ca:	40e2      	lsrs	r2, r4
 80005cc:	001c      	movs	r4, r3
 80005ce:	465b      	mov	r3, fp
 80005d0:	0015      	movs	r5, r2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	dad4      	bge.n	8000580 <__udivmoddi4+0x12c>
 80005d6:	4642      	mov	r2, r8
 80005d8:	002f      	movs	r7, r5
 80005da:	2320      	movs	r3, #32
 80005dc:	0026      	movs	r6, r4
 80005de:	4097      	lsls	r7, r2
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	40de      	lsrs	r6, r3
 80005e4:	003b      	movs	r3, r7
 80005e6:	4333      	orrs	r3, r6
 80005e8:	e7cd      	b.n	8000586 <__udivmoddi4+0x132>
 80005ea:	46c0      	nop			; (mov r8, r8)

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f000 ff3b 	bl	80014c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064a:	f000 f985 	bl	8000958 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064e:	f000 fb0d 	bl	8000c6c <MX_GPIO_Init>
  MX_DMA_Init();
 8000652:	f000 faed 	bl	8000c30 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000656:	f000 fa9d 	bl	8000b94 <MX_USART1_UART_Init>
  MX_RTC_Init();
 800065a:	f000 f9d3 	bl	8000a04 <MX_RTC_Init>
  MX_TIM14_Init();
 800065e:	f000 fa47 	bl	8000af0 <MX_TIM14_Init>
  MX_TIM16_Init();
 8000662:	f000 fa6d 	bl	8000b40 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  __HAL_TIM_CLEAR_IT ( &htim14 , TIM_IT_UPDATE ) ; // żeby nie generować przerwania TIM6 od razu: https://stackoverflow.com/questions/71099885/why-hal-tim-periodelapsedcallback-gets-called-immediately-after-hal-tim-base-sta
 8000666:	4b8f      	ldr	r3, [pc, #572]	; (80008a4 <main+0x264>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	2202      	movs	r2, #2
 800066c:	4252      	negs	r2, r2
 800066e:	611a      	str	r2, [r3, #16]
  __HAL_TIM_CLEAR_IT ( &htim16 , TIM_IT_UPDATE ) ; // żeby nie generować przerwania TIM6 od razu: https://stackoverflow.com/questions/71099885/why-hal-tim-periodelapsedcallback-gets-called-immediately-after-hal-tim-base-sta
 8000670:	4b8d      	ldr	r3, [pc, #564]	; (80008a8 <main+0x268>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2202      	movs	r2, #2
 8000676:	4252      	negs	r2, r2
 8000678:	611a      	str	r2, [r3, #16]
  HAL_UARTEx_ReceiveToIdle_DMA ( &huart1 , rx_buff , sizeof ( rx_buff ) ) ;
 800067a:	498c      	ldr	r1, [pc, #560]	; (80008ac <main+0x26c>)
 800067c:	4b8c      	ldr	r3, [pc, #560]	; (80008b0 <main+0x270>)
 800067e:	22c8      	movs	r2, #200	; 0xc8
 8000680:	0018      	movs	r0, r3
 8000682:	f004 fdbf 	bl	8005204 <HAL_UARTEx_ReceiveToIdle_DMA>

  send2swarm_at_command ( cs_at_comm , cs_answer , 1 ) ;
 8000686:	4b8b      	ldr	r3, [pc, #556]	; (80008b4 <main+0x274>)
 8000688:	6818      	ldr	r0, [r3, #0]
 800068a:	4b8b      	ldr	r3, [pc, #556]	; (80008b8 <main+0x278>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2201      	movs	r2, #1
 8000690:	0019      	movs	r1, r3
 8000692:	f000 fb4b 	bl	8000d2c <send2swarm_at_command>
  if ( checklist == 1 )
 8000696:	4b89      	ldr	r3, [pc, #548]	; (80008bc <main+0x27c>)
 8000698:	881b      	ldrh	r3, [r3, #0]
 800069a:	2b01      	cmp	r3, #1
 800069c:	d107      	bne.n	80006ae <main+0x6e>
	  send2swarm_at_command ( rt_0_at_comm , rt_ok_answer , 2 ) ;
 800069e:	4b88      	ldr	r3, [pc, #544]	; (80008c0 <main+0x280>)
 80006a0:	6818      	ldr	r0, [r3, #0]
 80006a2:	4b88      	ldr	r3, [pc, #544]	; (80008c4 <main+0x284>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	2202      	movs	r2, #2
 80006a8:	0019      	movs	r1, r3
 80006aa:	f000 fb3f 	bl	8000d2c <send2swarm_at_command>
  if ( checklist == 2 )
 80006ae:	4b83      	ldr	r3, [pc, #524]	; (80008bc <main+0x27c>)
 80006b0:	881b      	ldrh	r3, [r3, #0]
 80006b2:	2b02      	cmp	r3, #2
 80006b4:	d107      	bne.n	80006c6 <main+0x86>
	  send2swarm_at_command ( rt_q_rate_at_comm , rt_0_answer , 3 ) ; // Query RT rate
 80006b6:	4b84      	ldr	r3, [pc, #528]	; (80008c8 <main+0x288>)
 80006b8:	6818      	ldr	r0, [r3, #0]
 80006ba:	4b84      	ldr	r3, [pc, #528]	; (80008cc <main+0x28c>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	2203      	movs	r2, #3
 80006c0:	0019      	movs	r1, r3
 80006c2:	f000 fb33 	bl	8000d2c <send2swarm_at_command>
  if ( checklist == 3 )
 80006c6:	4b7d      	ldr	r3, [pc, #500]	; (80008bc <main+0x27c>)
 80006c8:	881b      	ldrh	r3, [r3, #0]
 80006ca:	2b03      	cmp	r3, #3
 80006cc:	d107      	bne.n	80006de <main+0x9e>
	  send2swarm_at_command ( pw_0_at_comm , pw_ok_answer , 4 ) ;
 80006ce:	4b80      	ldr	r3, [pc, #512]	; (80008d0 <main+0x290>)
 80006d0:	6818      	ldr	r0, [r3, #0]
 80006d2:	4b80      	ldr	r3, [pc, #512]	; (80008d4 <main+0x294>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	2204      	movs	r2, #4
 80006d8:	0019      	movs	r1, r3
 80006da:	f000 fb27 	bl	8000d2c <send2swarm_at_command>
  if ( checklist == 4 )
 80006de:	4b77      	ldr	r3, [pc, #476]	; (80008bc <main+0x27c>)
 80006e0:	881b      	ldrh	r3, [r3, #0]
 80006e2:	2b04      	cmp	r3, #4
 80006e4:	d107      	bne.n	80006f6 <main+0xb6>
	  send2swarm_at_command ( pw_q_rate_at_comm , pw_0_answer , 5 ) ;
 80006e6:	4b7c      	ldr	r3, [pc, #496]	; (80008d8 <main+0x298>)
 80006e8:	6818      	ldr	r0, [r3, #0]
 80006ea:	4b7c      	ldr	r3, [pc, #496]	; (80008dc <main+0x29c>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2205      	movs	r2, #5
 80006f0:	0019      	movs	r1, r3
 80006f2:	f000 fb1b 	bl	8000d2c <send2swarm_at_command>
  if ( checklist == 5 )
 80006f6:	4b71      	ldr	r3, [pc, #452]	; (80008bc <main+0x27c>)
 80006f8:	881b      	ldrh	r3, [r3, #0]
 80006fa:	2b05      	cmp	r3, #5
 80006fc:	d107      	bne.n	800070e <main+0xce>
	  send2swarm_at_command ( dt_0_at_comm , dt_ok_answer , 6 ) ;
 80006fe:	4b78      	ldr	r3, [pc, #480]	; (80008e0 <main+0x2a0>)
 8000700:	6818      	ldr	r0, [r3, #0]
 8000702:	4b78      	ldr	r3, [pc, #480]	; (80008e4 <main+0x2a4>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	2206      	movs	r2, #6
 8000708:	0019      	movs	r1, r3
 800070a:	f000 fb0f 	bl	8000d2c <send2swarm_at_command>
  if ( checklist == 6 )
 800070e:	4b6b      	ldr	r3, [pc, #428]	; (80008bc <main+0x27c>)
 8000710:	881b      	ldrh	r3, [r3, #0]
 8000712:	2b06      	cmp	r3, #6
 8000714:	d107      	bne.n	8000726 <main+0xe6>
	  send2swarm_at_command ( dt_q_rate_at_comm , dt_0_answer , 7 ) ;
 8000716:	4b74      	ldr	r3, [pc, #464]	; (80008e8 <main+0x2a8>)
 8000718:	6818      	ldr	r0, [r3, #0]
 800071a:	4b74      	ldr	r3, [pc, #464]	; (80008ec <main+0x2ac>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2207      	movs	r2, #7
 8000720:	0019      	movs	r1, r3
 8000722:	f000 fb03 	bl	8000d2c <send2swarm_at_command>
  if ( checklist == 7 )
 8000726:	4b65      	ldr	r3, [pc, #404]	; (80008bc <main+0x27c>)
 8000728:	881b      	ldrh	r3, [r3, #0]
 800072a:	2b07      	cmp	r3, #7
 800072c:	d107      	bne.n	800073e <main+0xfe>
	  send2swarm_at_command ( gs_0_at_comm , gs_ok_answer , 8 ) ;
 800072e:	4b70      	ldr	r3, [pc, #448]	; (80008f0 <main+0x2b0>)
 8000730:	6818      	ldr	r0, [r3, #0]
 8000732:	4b70      	ldr	r3, [pc, #448]	; (80008f4 <main+0x2b4>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	2208      	movs	r2, #8
 8000738:	0019      	movs	r1, r3
 800073a:	f000 faf7 	bl	8000d2c <send2swarm_at_command>
  if ( checklist == 8 )
 800073e:	4b5f      	ldr	r3, [pc, #380]	; (80008bc <main+0x27c>)
 8000740:	881b      	ldrh	r3, [r3, #0]
 8000742:	2b08      	cmp	r3, #8
 8000744:	d107      	bne.n	8000756 <main+0x116>
	  send2swarm_at_command ( gs_q_rate_at_comm , gs_0_answer , 9 ) ;
 8000746:	4b6c      	ldr	r3, [pc, #432]	; (80008f8 <main+0x2b8>)
 8000748:	6818      	ldr	r0, [r3, #0]
 800074a:	4b6c      	ldr	r3, [pc, #432]	; (80008fc <main+0x2bc>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	2209      	movs	r2, #9
 8000750:	0019      	movs	r1, r3
 8000752:	f000 faeb 	bl	8000d2c <send2swarm_at_command>
  if ( checklist == 9 )
 8000756:	4b59      	ldr	r3, [pc, #356]	; (80008bc <main+0x27c>)
 8000758:	881b      	ldrh	r3, [r3, #0]
 800075a:	2b09      	cmp	r3, #9
 800075c:	d107      	bne.n	800076e <main+0x12e>
	  send2swarm_at_command ( gj_0_at_comm , gj_ok_answer , 10 ) ;
 800075e:	4b68      	ldr	r3, [pc, #416]	; (8000900 <main+0x2c0>)
 8000760:	6818      	ldr	r0, [r3, #0]
 8000762:	4b68      	ldr	r3, [pc, #416]	; (8000904 <main+0x2c4>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	220a      	movs	r2, #10
 8000768:	0019      	movs	r1, r3
 800076a:	f000 fadf 	bl	8000d2c <send2swarm_at_command>
  if ( checklist == 10 )
 800076e:	4b53      	ldr	r3, [pc, #332]	; (80008bc <main+0x27c>)
 8000770:	881b      	ldrh	r3, [r3, #0]
 8000772:	2b0a      	cmp	r3, #10
 8000774:	d107      	bne.n	8000786 <main+0x146>
	  send2swarm_at_command ( gj_q_rate_at_comm , gj_0_answer , 11 ) ;
 8000776:	4b64      	ldr	r3, [pc, #400]	; (8000908 <main+0x2c8>)
 8000778:	6818      	ldr	r0, [r3, #0]
 800077a:	4b64      	ldr	r3, [pc, #400]	; (800090c <main+0x2cc>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	220b      	movs	r2, #11
 8000780:	0019      	movs	r1, r3
 8000782:	f000 fad3 	bl	8000d2c <send2swarm_at_command>
  if ( checklist == 11 )
 8000786:	4b4d      	ldr	r3, [pc, #308]	; (80008bc <main+0x27c>)
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	2b0b      	cmp	r3, #11
 800078c:	d107      	bne.n	800079e <main+0x15e>
	  send2swarm_at_command ( gn_0_at_comm , gn_ok_answer , 12 ) ;
 800078e:	4b60      	ldr	r3, [pc, #384]	; (8000910 <main+0x2d0>)
 8000790:	6818      	ldr	r0, [r3, #0]
 8000792:	4b60      	ldr	r3, [pc, #384]	; (8000914 <main+0x2d4>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	220c      	movs	r2, #12
 8000798:	0019      	movs	r1, r3
 800079a:	f000 fac7 	bl	8000d2c <send2swarm_at_command>
  if ( checklist == 12 )
 800079e:	4b47      	ldr	r3, [pc, #284]	; (80008bc <main+0x27c>)
 80007a0:	881b      	ldrh	r3, [r3, #0]
 80007a2:	2b0c      	cmp	r3, #12
 80007a4:	d107      	bne.n	80007b6 <main+0x176>
	  send2swarm_at_command ( gn_q_rate_at_comm , gn_0_answer , 13 ) ;
 80007a6:	4b5c      	ldr	r3, [pc, #368]	; (8000918 <main+0x2d8>)
 80007a8:	6818      	ldr	r0, [r3, #0]
 80007aa:	4b5c      	ldr	r3, [pc, #368]	; (800091c <main+0x2dc>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	220d      	movs	r2, #13
 80007b0:	0019      	movs	r1, r3
 80007b2:	f000 fabb 	bl	8000d2c <send2swarm_at_command>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* 60s TIM16 Timer for Swarm Fix */
	  tim16_on = 1 ;
 80007b6:	4b5a      	ldr	r3, [pc, #360]	; (8000920 <main+0x2e0>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	701a      	strb	r2, [r3, #0]
	  HAL_TIM_Base_Start_IT ( &htim16 ) ;
 80007bc:	4b3a      	ldr	r3, [pc, #232]	; (80008a8 <main+0x268>)
 80007be:	0018      	movs	r0, r3
 80007c0:	f002 fee4 	bl	800358c <HAL_TIM_Base_Start_IT>
	  while ( tim16_on )
 80007c4:	e000      	b.n	80007c8 <main+0x188>
		  __NOP () ;
 80007c6:	46c0      	nop			; (mov r8, r8)
	  while ( tim16_on )
 80007c8:	4b55      	ldr	r3, [pc, #340]	; (8000920 <main+0x2e0>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d1fa      	bne.n	80007c6 <main+0x186>

	  if ( checklist == 13 )
 80007d0:	4b3a      	ldr	r3, [pc, #232]	; (80008bc <main+0x27c>)
 80007d2:	881b      	ldrh	r3, [r3, #0]
 80007d4:	2b0d      	cmp	r3, #13
 80007d6:	d107      	bne.n	80007e8 <main+0x1a8>
	  	  send2swarm_at_command ( pw_mostrecent_at_comm , pw_mostrecent_answer , 14 ) ;
 80007d8:	4b52      	ldr	r3, [pc, #328]	; (8000924 <main+0x2e4>)
 80007da:	6818      	ldr	r0, [r3, #0]
 80007dc:	4b52      	ldr	r3, [pc, #328]	; (8000928 <main+0x2e8>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	220e      	movs	r2, #14
 80007e2:	0019      	movs	r1, r3
 80007e4:	f000 faa2 	bl	8000d2c <send2swarm_at_command>
	  if ( checklist == 14 )
 80007e8:	4b34      	ldr	r3, [pc, #208]	; (80008bc <main+0x27c>)
 80007ea:	881b      	ldrh	r3, [r3, #0]
 80007ec:	2b0e      	cmp	r3, #14
 80007ee:	d107      	bne.n	8000800 <main+0x1c0>
		  send2swarm_at_command ( gn_mostrecent_at_comm , gn_mostrecent_answer , 15 ) ;
 80007f0:	4b4e      	ldr	r3, [pc, #312]	; (800092c <main+0x2ec>)
 80007f2:	6818      	ldr	r0, [r3, #0]
 80007f4:	4b4e      	ldr	r3, [pc, #312]	; (8000930 <main+0x2f0>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	220f      	movs	r2, #15
 80007fa:	0019      	movs	r1, r3
 80007fc:	f000 fa96 	bl	8000d2c <send2swarm_at_command>
	  if ( checklist == 15 )
 8000800:	4b2e      	ldr	r3, [pc, #184]	; (80008bc <main+0x27c>)
 8000802:	881b      	ldrh	r3, [r3, #0]
 8000804:	2b0f      	cmp	r3, #15
 8000806:	d107      	bne.n	8000818 <main+0x1d8>
		  send2swarm_at_command ( mt_del_all_at_comm , mt_del_all_answer , 16 ) ;
 8000808:	4b4a      	ldr	r3, [pc, #296]	; (8000934 <main+0x2f4>)
 800080a:	6818      	ldr	r0, [r3, #0]
 800080c:	4b4a      	ldr	r3, [pc, #296]	; (8000938 <main+0x2f8>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2210      	movs	r2, #16
 8000812:	0019      	movs	r1, r3
 8000814:	f000 fa8a 	bl	8000d2c <send2swarm_at_command>
	  if ( checklist == 16 )
 8000818:	4b28      	ldr	r3, [pc, #160]	; (80008bc <main+0x27c>)
 800081a:	881b      	ldrh	r3, [r3, #0]
 800081c:	2b10      	cmp	r3, #16
 800081e:	d115      	bne.n	800084c <main+0x20c>
	  {
		  snprintf ( td_at_comm , TD_PAYLOAD_BUFF_SIZE , "$TD HD=60,\"%s;%s\"" , pw_buff , gn_buff ) ;
 8000820:	4946      	ldr	r1, [pc, #280]	; (800093c <main+0x2fc>)
 8000822:	4a47      	ldr	r2, [pc, #284]	; (8000940 <main+0x300>)
 8000824:	4847      	ldr	r0, [pc, #284]	; (8000944 <main+0x304>)
 8000826:	4b48      	ldr	r3, [pc, #288]	; (8000948 <main+0x308>)
 8000828:	9300      	str	r3, [sp, #0]
 800082a:	000b      	movs	r3, r1
 800082c:	215a      	movs	r1, #90	; 0x5a
 800082e:	f004 fde1 	bl	80053f4 <sniprintf>
	  	  send2swarm_at_command ( td_at_comm , td_ok_answer , 17 ) ;
 8000832:	4b46      	ldr	r3, [pc, #280]	; (800094c <main+0x30c>)
 8000834:	6819      	ldr	r1, [r3, #0]
 8000836:	4b43      	ldr	r3, [pc, #268]	; (8000944 <main+0x304>)
 8000838:	2211      	movs	r2, #17
 800083a:	0018      	movs	r0, r3
 800083c:	f000 fa76 	bl	8000d2c <send2swarm_at_command>
	  	  pw_buff[0] = 0 ;
 8000840:	4b3e      	ldr	r3, [pc, #248]	; (800093c <main+0x2fc>)
 8000842:	2200      	movs	r2, #0
 8000844:	701a      	strb	r2, [r3, #0]
	  	  gn_buff[0] = 0 ;
 8000846:	4b40      	ldr	r3, [pc, #256]	; (8000948 <main+0x308>)
 8000848:	2200      	movs	r2, #0
 800084a:	701a      	strb	r2, [r3, #0]
	  }
	  if ( checklist == 17 )
 800084c:	4b1b      	ldr	r3, [pc, #108]	; (80008bc <main+0x27c>)
 800084e:	881b      	ldrh	r3, [r3, #0]
 8000850:	2b11      	cmp	r3, #17
 8000852:	d10d      	bne.n	8000870 <main+0x230>
	  {
		  /* 60s TIM16 Timer for Swarm TD */
		  tim16_on = 1 ;
 8000854:	4b32      	ldr	r3, [pc, #200]	; (8000920 <main+0x2e0>)
 8000856:	2201      	movs	r2, #1
 8000858:	701a      	strb	r2, [r3, #0]
		  HAL_TIM_Base_Start_IT ( &htim16 ) ;
 800085a:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <main+0x268>)
 800085c:	0018      	movs	r0, r3
 800085e:	f002 fe95 	bl	800358c <HAL_TIM_Base_Start_IT>
		  while ( tim16_on )
 8000862:	e000      	b.n	8000866 <main+0x226>
			  __NOP () ;
 8000864:	46c0      	nop			; (mov r8, r8)
		  while ( tim16_on )
 8000866:	4b2e      	ldr	r3, [pc, #184]	; (8000920 <main+0x2e0>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d1fa      	bne.n	8000864 <main+0x224>
 800086e:	e000      	b.n	8000872 <main+0x232>

		  //send2swarm_at_command ( sl_3c4ks_at_comm , sl_ok_answer , 18 ) ; // Swarm sleep for 50 minutes
	  }
	  else
		  __NOP();
 8000870:	46c0      	nop			; (mov r8, r8)
		  //send2swarm_at_command ( sl_3c5ks_at_comm , sl_ok_answer , 18 ) ; // Swarm sleep for 50 minutes
	  send2swarm_at_command ( sl_60s_at_comm , sl_ok_answer , 18 ) ; // TEST Swarm sleep for 1 minutes
 8000872:	4b37      	ldr	r3, [pc, #220]	; (8000950 <main+0x310>)
 8000874:	6818      	ldr	r0, [r3, #0]
 8000876:	4b37      	ldr	r3, [pc, #220]	; (8000954 <main+0x314>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	2212      	movs	r2, #18
 800087c:	0019      	movs	r1, r3
 800087e:	f000 fa55 	bl	8000d2c <send2swarm_at_command>

	  checklist = 13 ;
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <main+0x27c>)
 8000884:	220d      	movs	r2, #13
 8000886:	801a      	strh	r2, [r3, #0]

	  /* 60s TIM16 Timer docelowo zamienić na poniższy shutdown/stop/sleep */
	  tim16_on = 1 ;
 8000888:	4b25      	ldr	r3, [pc, #148]	; (8000920 <main+0x2e0>)
 800088a:	2201      	movs	r2, #1
 800088c:	701a      	strb	r2, [r3, #0]
	  HAL_TIM_Base_Start_IT ( &htim16 ) ;
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <main+0x268>)
 8000890:	0018      	movs	r0, r3
 8000892:	f002 fe7b 	bl	800358c <HAL_TIM_Base_Start_IT>
	  while ( tim16_on )
 8000896:	e000      	b.n	800089a <main+0x25a>
		  __NOP () ;
 8000898:	46c0      	nop			; (mov r8, r8)
	  while ( tim16_on )
 800089a:	4b21      	ldr	r3, [pc, #132]	; (8000920 <main+0x2e0>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d1fa      	bne.n	8000898 <main+0x258>
	  tim16_on = 1 ;
 80008a2:	e788      	b.n	80007b6 <main+0x176>
 80008a4:	20000144 	.word	0x20000144
 80008a8:	20000190 	.word	0x20000190
 80008ac:	200002d4 	.word	0x200002d4
 80008b0:	200001dc 	.word	0x200001dc
 80008b4:	20000000 	.word	0x20000000
 80008b8:	20000044 	.word	0x20000044
 80008bc:	200002cc 	.word	0x200002cc
 80008c0:	20000004 	.word	0x20000004
 80008c4:	20000048 	.word	0x20000048
 80008c8:	20000008 	.word	0x20000008
 80008cc:	2000004c 	.word	0x2000004c
 80008d0:	2000000c 	.word	0x2000000c
 80008d4:	20000050 	.word	0x20000050
 80008d8:	20000010 	.word	0x20000010
 80008dc:	20000054 	.word	0x20000054
 80008e0:	20000018 	.word	0x20000018
 80008e4:	2000005c 	.word	0x2000005c
 80008e8:	2000001c 	.word	0x2000001c
 80008ec:	20000060 	.word	0x20000060
 80008f0:	20000020 	.word	0x20000020
 80008f4:	20000064 	.word	0x20000064
 80008f8:	20000024 	.word	0x20000024
 80008fc:	20000068 	.word	0x20000068
 8000900:	20000028 	.word	0x20000028
 8000904:	2000006c 	.word	0x2000006c
 8000908:	2000002c 	.word	0x2000002c
 800090c:	20000070 	.word	0x20000070
 8000910:	20000030 	.word	0x20000030
 8000914:	20000074 	.word	0x20000074
 8000918:	20000034 	.word	0x20000034
 800091c:	20000078 	.word	0x20000078
 8000920:	200002ce 	.word	0x200002ce
 8000924:	20000014 	.word	0x20000014
 8000928:	20000058 	.word	0x20000058
 800092c:	20000038 	.word	0x20000038
 8000930:	2000007c 	.word	0x2000007c
 8000934:	2000003c 	.word	0x2000003c
 8000938:	20000080 	.word	0x20000080
 800093c:	20000498 	.word	0x20000498
 8000940:	08007524 	.word	0x08007524
 8000944:	200004c4 	.word	0x200004c4
 8000948:	200004a0 	.word	0x200004a0
 800094c:	20000084 	.word	0x20000084
 8000950:	20000040 	.word	0x20000040
 8000954:	20000088 	.word	0x20000088

08000958 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000958:	b590      	push	{r4, r7, lr}
 800095a:	b093      	sub	sp, #76	; 0x4c
 800095c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095e:	2410      	movs	r4, #16
 8000960:	193b      	adds	r3, r7, r4
 8000962:	0018      	movs	r0, r3
 8000964:	2338      	movs	r3, #56	; 0x38
 8000966:	001a      	movs	r2, r3
 8000968:	2100      	movs	r1, #0
 800096a:	f004 fd3b 	bl	80053e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800096e:	003b      	movs	r3, r7
 8000970:	0018      	movs	r0, r3
 8000972:	2310      	movs	r3, #16
 8000974:	001a      	movs	r2, r3
 8000976:	2100      	movs	r1, #0
 8000978:	f004 fd34 	bl	80053e4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800097c:	2380      	movs	r3, #128	; 0x80
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	0018      	movs	r0, r3
 8000982:	f001 fbaf 	bl	80020e4 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000986:	f001 fb9f 	bl	80020c8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800098a:	4b1d      	ldr	r3, [pc, #116]	; (8000a00 <SystemClock_Config+0xa8>)
 800098c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800098e:	4b1c      	ldr	r3, [pc, #112]	; (8000a00 <SystemClock_Config+0xa8>)
 8000990:	2118      	movs	r1, #24
 8000992:	438a      	bics	r2, r1
 8000994:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000996:	193b      	adds	r3, r7, r4
 8000998:	2206      	movs	r2, #6
 800099a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800099c:	193b      	adds	r3, r7, r4
 800099e:	2201      	movs	r2, #1
 80009a0:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a2:	193b      	adds	r3, r7, r4
 80009a4:	2280      	movs	r2, #128	; 0x80
 80009a6:	0052      	lsls	r2, r2, #1
 80009a8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80009aa:	193b      	adds	r3, r7, r4
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009b0:	193b      	adds	r3, r7, r4
 80009b2:	2240      	movs	r2, #64	; 0x40
 80009b4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009b6:	193b      	adds	r3, r7, r4
 80009b8:	2200      	movs	r2, #0
 80009ba:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009bc:	193b      	adds	r3, r7, r4
 80009be:	0018      	movs	r0, r3
 80009c0:	f001 fbdc 	bl	800217c <HAL_RCC_OscConfig>
 80009c4:	1e03      	subs	r3, r0, #0
 80009c6:	d001      	beq.n	80009cc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80009c8:	f000 faea 	bl	8000fa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009cc:	003b      	movs	r3, r7
 80009ce:	2207      	movs	r2, #7
 80009d0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009d2:	003b      	movs	r3, r7
 80009d4:	2200      	movs	r2, #0
 80009d6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d8:	003b      	movs	r3, r7
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009de:	003b      	movs	r3, r7
 80009e0:	2200      	movs	r2, #0
 80009e2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009e4:	003b      	movs	r3, r7
 80009e6:	2100      	movs	r1, #0
 80009e8:	0018      	movs	r0, r3
 80009ea:	f001 fee1 	bl	80027b0 <HAL_RCC_ClockConfig>
 80009ee:	1e03      	subs	r3, r0, #0
 80009f0:	d001      	beq.n	80009f6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80009f2:	f000 fad5 	bl	8000fa0 <Error_Handler>
  }
}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	46bd      	mov	sp, r7
 80009fa:	b013      	add	sp, #76	; 0x4c
 80009fc:	bd90      	pop	{r4, r7, pc}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	40021000 	.word	0x40021000

08000a04 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	2314      	movs	r3, #20
 8000a10:	001a      	movs	r2, r3
 8000a12:	2100      	movs	r1, #0
 8000a14:	f004 fce6 	bl	80053e4 <memset>
  RTC_DateTypeDef sDate = {0};
 8000a18:	003b      	movs	r3, r7
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a1e:	4b32      	ldr	r3, [pc, #200]	; (8000ae8 <MX_RTC_Init+0xe4>)
 8000a20:	4a32      	ldr	r2, [pc, #200]	; (8000aec <MX_RTC_Init+0xe8>)
 8000a22:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a24:	4b30      	ldr	r3, [pc, #192]	; (8000ae8 <MX_RTC_Init+0xe4>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000a2a:	4b2f      	ldr	r3, [pc, #188]	; (8000ae8 <MX_RTC_Init+0xe4>)
 8000a2c:	227f      	movs	r2, #127	; 0x7f
 8000a2e:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000a30:	4b2d      	ldr	r3, [pc, #180]	; (8000ae8 <MX_RTC_Init+0xe4>)
 8000a32:	22ff      	movs	r2, #255	; 0xff
 8000a34:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a36:	4b2c      	ldr	r3, [pc, #176]	; (8000ae8 <MX_RTC_Init+0xe4>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a3c:	4b2a      	ldr	r3, [pc, #168]	; (8000ae8 <MX_RTC_Init+0xe4>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a42:	4b29      	ldr	r3, [pc, #164]	; (8000ae8 <MX_RTC_Init+0xe4>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a48:	4b27      	ldr	r3, [pc, #156]	; (8000ae8 <MX_RTC_Init+0xe4>)
 8000a4a:	2280      	movs	r2, #128	; 0x80
 8000a4c:	05d2      	lsls	r2, r2, #23
 8000a4e:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000a50:	4b25      	ldr	r3, [pc, #148]	; (8000ae8 <MX_RTC_Init+0xe4>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a56:	4b24      	ldr	r3, [pc, #144]	; (8000ae8 <MX_RTC_Init+0xe4>)
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f002 f9cd 	bl	8002df8 <HAL_RTC_Init>
 8000a5e:	1e03      	subs	r3, r0, #0
 8000a60:	d001      	beq.n	8000a66 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000a62:	f000 fa9d 	bl	8000fa0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	2200      	movs	r2, #0
 8000a6a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	2200      	movs	r2, #0
 8000a70:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	2200      	movs	r2, #0
 8000a76:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8000a78:	1d3b      	adds	r3, r7, #4
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	2200      	movs	r2, #0
 8000a82:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	2200      	movs	r2, #0
 8000a88:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000a8a:	1d39      	adds	r1, r7, #4
 8000a8c:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <MX_RTC_Init+0xe4>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	0018      	movs	r0, r3
 8000a92:	f002 fa53 	bl	8002f3c <HAL_RTC_SetTime>
 8000a96:	1e03      	subs	r3, r0, #0
 8000a98:	d001      	beq.n	8000a9e <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 8000a9a:	f000 fa81 	bl	8000fa0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000a9e:	003b      	movs	r3, r7
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000aa4:	003b      	movs	r3, r7
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000aaa:	003b      	movs	r3, r7
 8000aac:	2201      	movs	r2, #1
 8000aae:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000ab0:	003b      	movs	r3, r7
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000ab6:	0039      	movs	r1, r7
 8000ab8:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <MX_RTC_Init+0xe4>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	0018      	movs	r0, r3
 8000abe:	f002 fae5 	bl	800308c <HAL_RTC_SetDate>
 8000ac2:	1e03      	subs	r3, r0, #0
 8000ac4:	d001      	beq.n	8000aca <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 8000ac6:	f000 fa6b 	bl	8000fa0 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 120, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8000aca:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <MX_RTC_Init+0xe4>)
 8000acc:	2204      	movs	r2, #4
 8000ace:	2178      	movs	r1, #120	; 0x78
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f002 fc43 	bl	800335c <HAL_RTCEx_SetWakeUpTimer_IT>
 8000ad6:	1e03      	subs	r3, r0, #0
 8000ad8:	d001      	beq.n	8000ade <MX_RTC_Init+0xda>
  {
    Error_Handler();
 8000ada:	f000 fa61 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	b006      	add	sp, #24
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	20000118 	.word	0x20000118
 8000aec:	40002800 	.word	0x40002800

08000af0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000af4:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <MX_TIM14_Init+0x40>)
 8000af6:	4a0f      	ldr	r2, [pc, #60]	; (8000b34 <MX_TIM14_Init+0x44>)
 8000af8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16000-1;
 8000afa:	4b0d      	ldr	r3, [pc, #52]	; (8000b30 <MX_TIM14_Init+0x40>)
 8000afc:	4a0e      	ldr	r2, [pc, #56]	; (8000b38 <MX_TIM14_Init+0x48>)
 8000afe:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b00:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <MX_TIM14_Init+0x40>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2000-1;
 8000b06:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <MX_TIM14_Init+0x40>)
 8000b08:	4a0c      	ldr	r2, [pc, #48]	; (8000b3c <MX_TIM14_Init+0x4c>)
 8000b0a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0c:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <MX_TIM14_Init+0x40>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b12:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <MX_TIM14_Init+0x40>)
 8000b14:	2280      	movs	r2, #128	; 0x80
 8000b16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000b18:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <MX_TIM14_Init+0x40>)
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f002 fcde 	bl	80034dc <HAL_TIM_Base_Init>
 8000b20:	1e03      	subs	r3, r0, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000b24:	f000 fa3c 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000b28:	46c0      	nop			; (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	20000144 	.word	0x20000144
 8000b34:	40002000 	.word	0x40002000
 8000b38:	00003e7f 	.word	0x00003e7f
 8000b3c:	000007cf 	.word	0x000007cf

08000b40 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000b44:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <MX_TIM16_Init+0x44>)
 8000b46:	4a10      	ldr	r2, [pc, #64]	; (8000b88 <MX_TIM16_Init+0x48>)
 8000b48:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 16000-1;
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <MX_TIM16_Init+0x44>)
 8000b4c:	4a0f      	ldr	r2, [pc, #60]	; (8000b8c <MX_TIM16_Init+0x4c>)
 8000b4e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <MX_TIM16_Init+0x44>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 60000-1;
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <MX_TIM16_Init+0x44>)
 8000b58:	4a0d      	ldr	r2, [pc, #52]	; (8000b90 <MX_TIM16_Init+0x50>)
 8000b5a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b5c:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <MX_TIM16_Init+0x44>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000b62:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <MX_TIM16_Init+0x44>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <MX_TIM16_Init+0x44>)
 8000b6a:	2280      	movs	r2, #128	; 0x80
 8000b6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000b6e:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <MX_TIM16_Init+0x44>)
 8000b70:	0018      	movs	r0, r3
 8000b72:	f002 fcb3 	bl	80034dc <HAL_TIM_Base_Init>
 8000b76:	1e03      	subs	r3, r0, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8000b7a:	f000 fa11 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000190 	.word	0x20000190
 8000b88:	40014400 	.word	0x40014400
 8000b8c:	00003e7f 	.word	0x00003e7f
 8000b90:	0000ea5f 	.word	0x0000ea5f

08000b94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b98:	4b23      	ldr	r3, [pc, #140]	; (8000c28 <MX_USART1_UART_Init+0x94>)
 8000b9a:	4a24      	ldr	r2, [pc, #144]	; (8000c2c <MX_USART1_UART_Init+0x98>)
 8000b9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b9e:	4b22      	ldr	r3, [pc, #136]	; (8000c28 <MX_USART1_UART_Init+0x94>)
 8000ba0:	22e1      	movs	r2, #225	; 0xe1
 8000ba2:	0252      	lsls	r2, r2, #9
 8000ba4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba6:	4b20      	ldr	r3, [pc, #128]	; (8000c28 <MX_USART1_UART_Init+0x94>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bac:	4b1e      	ldr	r3, [pc, #120]	; (8000c28 <MX_USART1_UART_Init+0x94>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bb2:	4b1d      	ldr	r3, [pc, #116]	; (8000c28 <MX_USART1_UART_Init+0x94>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bb8:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <MX_USART1_UART_Init+0x94>)
 8000bba:	220c      	movs	r2, #12
 8000bbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bbe:	4b1a      	ldr	r3, [pc, #104]	; (8000c28 <MX_USART1_UART_Init+0x94>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc4:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <MX_USART1_UART_Init+0x94>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bca:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <MX_USART1_UART_Init+0x94>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bd0:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <MX_USART1_UART_Init+0x94>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bd6:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <MX_USART1_UART_Init+0x94>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <MX_USART1_UART_Init+0x94>)
 8000bde:	0018      	movs	r0, r3
 8000be0:	f002 ff36 	bl	8003a50 <HAL_UART_Init>
 8000be4:	1e03      	subs	r3, r0, #0
 8000be6:	d001      	beq.n	8000bec <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000be8:	f000 f9da 	bl	8000fa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bec:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <MX_USART1_UART_Init+0x94>)
 8000bee:	2100      	movs	r1, #0
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f004 fa85 	bl	8005100 <HAL_UARTEx_SetTxFifoThreshold>
 8000bf6:	1e03      	subs	r3, r0, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000bfa:	f000 f9d1 	bl	8000fa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bfe:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <MX_USART1_UART_Init+0x94>)
 8000c00:	2100      	movs	r1, #0
 8000c02:	0018      	movs	r0, r3
 8000c04:	f004 fabc 	bl	8005180 <HAL_UARTEx_SetRxFifoThreshold>
 8000c08:	1e03      	subs	r3, r0, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c0c:	f000 f9c8 	bl	8000fa0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c10:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <MX_USART1_UART_Init+0x94>)
 8000c12:	0018      	movs	r0, r3
 8000c14:	f004 fa3a 	bl	800508c <HAL_UARTEx_DisableFifoMode>
 8000c18:	1e03      	subs	r3, r0, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c1c:	f000 f9c0 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c20:	46c0      	nop			; (mov r8, r8)
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	200001dc 	.word	0x200001dc
 8000c2c:	40013800 	.word	0x40013800

08000c30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c36:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <MX_DMA_Init+0x38>)
 8000c38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <MX_DMA_Init+0x38>)
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	639a      	str	r2, [r3, #56]	; 0x38
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <MX_DMA_Init+0x38>)
 8000c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c46:	2201      	movs	r2, #1
 8000c48:	4013      	ands	r3, r2
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2100      	movs	r1, #0
 8000c52:	2009      	movs	r0, #9
 8000c54:	f000 fd66 	bl	8001724 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c58:	2009      	movs	r0, #9
 8000c5a:	f000 fd78 	bl	800174e <HAL_NVIC_EnableIRQ>

}
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	46bd      	mov	sp, r7
 8000c62:	b002      	add	sp, #8
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	40021000 	.word	0x40021000

08000c6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c6c:	b590      	push	{r4, r7, lr}
 8000c6e:	b089      	sub	sp, #36	; 0x24
 8000c70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c72:	240c      	movs	r4, #12
 8000c74:	193b      	adds	r3, r7, r4
 8000c76:	0018      	movs	r0, r3
 8000c78:	2314      	movs	r3, #20
 8000c7a:	001a      	movs	r2, r3
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	f004 fbb1 	bl	80053e4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c82:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <MX_GPIO_Init+0x80>)
 8000c84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c86:	4b19      	ldr	r3, [pc, #100]	; (8000cec <MX_GPIO_Init+0x80>)
 8000c88:	2104      	movs	r1, #4
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	635a      	str	r2, [r3, #52]	; 0x34
 8000c8e:	4b17      	ldr	r3, [pc, #92]	; (8000cec <MX_GPIO_Init+0x80>)
 8000c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c92:	2204      	movs	r2, #4
 8000c94:	4013      	ands	r3, r2
 8000c96:	60bb      	str	r3, [r7, #8]
 8000c98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9a:	4b14      	ldr	r3, [pc, #80]	; (8000cec <MX_GPIO_Init+0x80>)
 8000c9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c9e:	4b13      	ldr	r3, [pc, #76]	; (8000cec <MX_GPIO_Init+0x80>)
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	430a      	orrs	r2, r1
 8000ca4:	635a      	str	r2, [r3, #52]	; 0x34
 8000ca6:	4b11      	ldr	r3, [pc, #68]	; (8000cec <MX_GPIO_Init+0x80>)
 8000ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000caa:	2201      	movs	r2, #1
 8000cac:	4013      	ands	r3, r2
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_RESET);
 8000cb2:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <MX_GPIO_Init+0x84>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2140      	movs	r1, #64	; 0x40
 8000cb8:	0018      	movs	r0, r3
 8000cba:	f001 f9e7 	bl	800208c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GREEN_Pin */
  GPIO_InitStruct.Pin = GREEN_Pin;
 8000cbe:	0021      	movs	r1, r4
 8000cc0:	187b      	adds	r3, r7, r1
 8000cc2:	2240      	movs	r2, #64	; 0x40
 8000cc4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc6:	187b      	adds	r3, r7, r1
 8000cc8:	2201      	movs	r2, #1
 8000cca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	187b      	adds	r3, r7, r1
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	187b      	adds	r3, r7, r1
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GREEN_GPIO_Port, &GPIO_InitStruct);
 8000cd8:	187b      	adds	r3, r7, r1
 8000cda:	4a05      	ldr	r2, [pc, #20]	; (8000cf0 <MX_GPIO_Init+0x84>)
 8000cdc:	0019      	movs	r1, r3
 8000cde:	0010      	movs	r0, r2
 8000ce0:	f001 f870 	bl	8001dc4 <HAL_GPIO_Init>

}
 8000ce4:	46c0      	nop			; (mov r8, r8)
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	b009      	add	sp, #36	; 0x24
 8000cea:	bd90      	pop	{r4, r7, pc}
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	50000800 	.word	0x50000800

08000cf4 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback ( UART_HandleTypeDef *huart , uint16_t Size )
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	000a      	movs	r2, r1
 8000cfe:	1cbb      	adds	r3, r7, #2
 8000d00:	801a      	strh	r2, [r3, #0]
    if ( huart->Instance == USART1 )
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a06      	ldr	r2, [pc, #24]	; (8000d20 <HAL_UARTEx_RxEventCallback+0x2c>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d105      	bne.n	8000d18 <HAL_UARTEx_RxEventCallback+0x24>
    	HAL_UARTEx_ReceiveToIdle_DMA ( &huart1 , rx_buff , sizeof ( rx_buff ) ) ;
 8000d0c:	4905      	ldr	r1, [pc, #20]	; (8000d24 <HAL_UARTEx_RxEventCallback+0x30>)
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_UARTEx_RxEventCallback+0x34>)
 8000d10:	22c8      	movs	r2, #200	; 0xc8
 8000d12:	0018      	movs	r0, r3
 8000d14:	f004 fa76 	bl	8005204 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8000d18:	46c0      	nop			; (mov r8, r8)
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	b002      	add	sp, #8
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40013800 	.word	0x40013800
 8000d24:	200002d4 	.word	0x200002d4
 8000d28:	200001dc 	.word	0x200001dc

08000d2c <send2swarm_at_command>:

void send2swarm_at_command ( const char* at_command , const char* answer , uint16_t step )
{
 8000d2c:	b5b0      	push	{r4, r5, r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	1dbb      	adds	r3, r7, #6
 8000d38:	801a      	strh	r2, [r3, #0]
	//uint32_t temp_tickstart = HAL_GetTick () ; //temp
	uint8_t cs = nmea_checksum ( at_command , strlen ( at_command ) ) ;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f7ff f9e1 	bl	8000104 <strlen>
 8000d42:	0002      	movs	r2, r0
 8000d44:	2517      	movs	r5, #23
 8000d46:	197c      	adds	r4, r7, r5
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	0011      	movs	r1, r2
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f000 f8c9 	bl	8000ee4 <nmea_checksum>
 8000d52:	0003      	movs	r3, r0
 8000d54:	7023      	strb	r3, [r4, #0]

	sprintf ( (char*) tx_buff , "%s*%02x\n" , at_command , cs ) ;
 8000d56:	197b      	adds	r3, r7, r5
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	492d      	ldr	r1, [pc, #180]	; (8000e14 <send2swarm_at_command+0xe8>)
 8000d5e:	482e      	ldr	r0, [pc, #184]	; (8000e18 <send2swarm_at_command+0xec>)
 8000d60:	f004 fb7c 	bl	800545c <siprintf>
	uart_status = HAL_UART_Transmit ( &huart1 , (const uint8_t *) tx_buff ,  strlen ( (char*) tx_buff ) , UART_TX_TIMEOUT ) ;
 8000d64:	4b2c      	ldr	r3, [pc, #176]	; (8000e18 <send2swarm_at_command+0xec>)
 8000d66:	0018      	movs	r0, r3
 8000d68:	f7ff f9cc 	bl	8000104 <strlen>
 8000d6c:	0003      	movs	r3, r0
 8000d6e:	b29a      	uxth	r2, r3
 8000d70:	23fa      	movs	r3, #250	; 0xfa
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	4928      	ldr	r1, [pc, #160]	; (8000e18 <send2swarm_at_command+0xec>)
 8000d76:	4829      	ldr	r0, [pc, #164]	; (8000e1c <send2swarm_at_command+0xf0>)
 8000d78:	f002 fec0 	bl	8003afc <HAL_UART_Transmit>
 8000d7c:	0003      	movs	r3, r0
 8000d7e:	001a      	movs	r2, r3
 8000d80:	4b27      	ldr	r3, [pc, #156]	; (8000e20 <send2swarm_at_command+0xf4>)
 8000d82:	701a      	strb	r2, [r3, #0]
	waiting_for_answer = 1 ;
 8000d84:	4b27      	ldr	r3, [pc, #156]	; (8000e24 <send2swarm_at_command+0xf8>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &htim14 ) ;
 8000d8a:	4b27      	ldr	r3, [pc, #156]	; (8000e28 <send2swarm_at_command+0xfc>)
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f002 fbfd 	bl	800358c <HAL_TIM_Base_Start_IT>
	while ( waiting_for_answer )
 8000d92:	e00b      	b.n	8000dac <send2swarm_at_command+0x80>
		if ( strncmp ( (char*) rx_buff , answer , strlen ( answer ) ) == 0 )
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	0018      	movs	r0, r3
 8000d98:	f7ff f9b4 	bl	8000104 <strlen>
 8000d9c:	0002      	movs	r2, r0
 8000d9e:	68b9      	ldr	r1, [r7, #8]
 8000da0:	4b22      	ldr	r3, [pc, #136]	; (8000e2c <send2swarm_at_command+0x100>)
 8000da2:	0018      	movs	r0, r3
 8000da4:	f004 fbf0 	bl	8005588 <strncmp>
 8000da8:	1e03      	subs	r3, r0, #0
 8000daa:	d004      	beq.n	8000db6 <send2swarm_at_command+0x8a>
	while ( waiting_for_answer )
 8000dac:	4b1d      	ldr	r3, [pc, #116]	; (8000e24 <send2swarm_at_command+0xf8>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d1ef      	bne.n	8000d94 <send2swarm_at_command+0x68>
 8000db4:	e000      	b.n	8000db8 <send2swarm_at_command+0x8c>
		{
			//checklist = step ;
			break ;
 8000db6:	46c0      	nop			; (mov r8, r8)
		}
	checklist = step ;
 8000db8:	4b1d      	ldr	r3, [pc, #116]	; (8000e30 <send2swarm_at_command+0x104>)
 8000dba:	1dba      	adds	r2, r7, #6
 8000dbc:	8812      	ldrh	r2, [r2, #0]
 8000dbe:	801a      	strh	r2, [r3, #0]
	if ( strncmp ( pw_mostrecent_at_comm , at_command , strlen ( pw_mostrecent_at_comm ) ) == 0 )
 8000dc0:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <send2swarm_at_command+0x108>)
 8000dc2:	681c      	ldr	r4, [r3, #0]
 8000dc4:	4b1b      	ldr	r3, [pc, #108]	; (8000e34 <send2swarm_at_command+0x108>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f7ff f99b 	bl	8000104 <strlen>
 8000dce:	0002      	movs	r2, r0
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	0019      	movs	r1, r3
 8000dd4:	0020      	movs	r0, r4
 8000dd6:	f004 fbd7 	bl	8005588 <strncmp>
 8000dda:	1e03      	subs	r3, r0, #0
 8000ddc:	d101      	bne.n	8000de2 <send2swarm_at_command+0xb6>
		pw2payload () ;
 8000dde:	f000 f82d 	bl	8000e3c <pw2payload>
	if ( strncmp ( gn_mostrecent_at_comm , at_command , strlen ( gn_mostrecent_at_comm ) ) == 0 )
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <send2swarm_at_command+0x10c>)
 8000de4:	681c      	ldr	r4, [r3, #0]
 8000de6:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <send2swarm_at_command+0x10c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	0018      	movs	r0, r3
 8000dec:	f7ff f98a 	bl	8000104 <strlen>
 8000df0:	0002      	movs	r2, r0
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	0019      	movs	r1, r3
 8000df6:	0020      	movs	r0, r4
 8000df8:	f004 fbc6 	bl	8005588 <strncmp>
 8000dfc:	1e03      	subs	r3, r0, #0
 8000dfe:	d101      	bne.n	8000e04 <send2swarm_at_command+0xd8>
		gn2payload () ;
 8000e00:	f000 f846 	bl	8000e90 <gn2payload>
	rx_buff[0] = 0 ;
 8000e04:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <send2swarm_at_command+0x100>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	701a      	strb	r2, [r3, #0]
	//temp_tick = HAL_GetTick () - temp_tickstart ;
}
 8000e0a:	46c0      	nop			; (mov r8, r8)
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	b006      	add	sp, #24
 8000e10:	bdb0      	pop	{r4, r5, r7, pc}
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	08007538 	.word	0x08007538
 8000e18:	2000039c 	.word	0x2000039c
 8000e1c:	200001dc 	.word	0x200001dc
 8000e20:	200002d0 	.word	0x200002d0
 8000e24:	200002cf 	.word	0x200002cf
 8000e28:	20000144 	.word	0x20000144
 8000e2c:	200002d4 	.word	0x200002d4
 8000e30:	200002cc 	.word	0x200002cc
 8000e34:	20000014 	.word	0x20000014
 8000e38:	20000038 	.word	0x20000038

08000e3c <pw2payload>:
void pw2payload ()
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
	chunk = strtok ( (char*) rx_buff , " " ) ;
 8000e40:	4a0d      	ldr	r2, [pc, #52]	; (8000e78 <pw2payload+0x3c>)
 8000e42:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <pw2payload+0x40>)
 8000e44:	0011      	movs	r1, r2
 8000e46:	0018      	movs	r0, r3
 8000e48:	f004 fbb0 	bl	80055ac <strtok>
 8000e4c:	0002      	movs	r2, r0
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <pw2payload+0x44>)
 8000e50:	601a      	str	r2, [r3, #0]
	chunk = strtok ( NULL , "," ) ;
 8000e52:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <pw2payload+0x48>)
 8000e54:	0019      	movs	r1, r3
 8000e56:	2000      	movs	r0, #0
 8000e58:	f004 fba8 	bl	80055ac <strtok>
 8000e5c:	0002      	movs	r2, r0
 8000e5e:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <pw2payload+0x44>)
 8000e60:	601a      	str	r2, [r3, #0]
	sscanf ( (const char *) chunk , "%4s" , pw_buff ) ;
 8000e62:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <pw2payload+0x44>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a08      	ldr	r2, [pc, #32]	; (8000e88 <pw2payload+0x4c>)
 8000e68:	4908      	ldr	r1, [pc, #32]	; (8000e8c <pw2payload+0x50>)
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	f004 fb16 	bl	800549c <siscanf>
}
 8000e70:	46c0      	nop			; (mov r8, r8)
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	08007544 	.word	0x08007544
 8000e7c:	200002d4 	.word	0x200002d4
 8000e80:	20000520 	.word	0x20000520
 8000e84:	08007548 	.word	0x08007548
 8000e88:	20000498 	.word	0x20000498
 8000e8c:	0800754c 	.word	0x0800754c

08000e90 <gn2payload>:
void gn2payload ()
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
	chunk = strtok ( (char*) rx_buff , " " ) ;
 8000e94:	4a0d      	ldr	r2, [pc, #52]	; (8000ecc <gn2payload+0x3c>)
 8000e96:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <gn2payload+0x40>)
 8000e98:	0011      	movs	r1, r2
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	f004 fb86 	bl	80055ac <strtok>
 8000ea0:	0002      	movs	r2, r0
 8000ea2:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <gn2payload+0x44>)
 8000ea4:	601a      	str	r2, [r3, #0]
	chunk = strtok ( NULL , "*" ) ;
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <gn2payload+0x48>)
 8000ea8:	0019      	movs	r1, r3
 8000eaa:	2000      	movs	r0, #0
 8000eac:	f004 fb7e 	bl	80055ac <strtok>
 8000eb0:	0002      	movs	r2, r0
 8000eb2:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <gn2payload+0x44>)
 8000eb4:	601a      	str	r2, [r3, #0]
	sprintf ( (char*) gn_buff , "%s" , chunk ) ;
 8000eb6:	4b07      	ldr	r3, [pc, #28]	; (8000ed4 <gn2payload+0x44>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	4908      	ldr	r1, [pc, #32]	; (8000edc <gn2payload+0x4c>)
 8000ebc:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <gn2payload+0x50>)
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f004 facc 	bl	800545c <siprintf>
}
 8000ec4:	46c0      	nop			; (mov r8, r8)
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	08007544 	.word	0x08007544
 8000ed0:	200002d4 	.word	0x200002d4
 8000ed4:	20000520 	.word	0x20000520
 8000ed8:	08007550 	.word	0x08007550
 8000edc:	08007554 	.word	0x08007554
 8000ee0:	200004a0 	.word	0x200004a0

08000ee4 <nmea_checksum>:
uint8_t nmea_checksum ( const char *sz , size_t len )
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
	size_t i = 0 ;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
	uint8_t cs ;
	if ( sz [0] == '$' )
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b24      	cmp	r3, #36	; 0x24
 8000ef8:	d102      	bne.n	8000f00 <nmea_checksum+0x1c>
		i++ ;
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	3301      	adds	r3, #1
 8000efe:	60fb      	str	r3, [r7, #12]
	for ( cs = 0 ; ( i < len ) && sz [i] ; i++ )
 8000f00:	230b      	movs	r3, #11
 8000f02:	18fb      	adds	r3, r7, r3
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]
 8000f08:	e00c      	b.n	8000f24 <nmea_checksum+0x40>
		cs ^= ( (uint8_t) sz [i] ) ;
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	18d3      	adds	r3, r2, r3
 8000f10:	7819      	ldrb	r1, [r3, #0]
 8000f12:	220b      	movs	r2, #11
 8000f14:	18bb      	adds	r3, r7, r2
 8000f16:	18ba      	adds	r2, r7, r2
 8000f18:	7812      	ldrb	r2, [r2, #0]
 8000f1a:	404a      	eors	r2, r1
 8000f1c:	701a      	strb	r2, [r3, #0]
	for ( cs = 0 ; ( i < len ) && sz [i] ; i++ )
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	3301      	adds	r3, #1
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fa      	ldr	r2, [r7, #12]
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d205      	bcs.n	8000f38 <nmea_checksum+0x54>
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	18d3      	adds	r3, r2, r3
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d1e8      	bne.n	8000f0a <nmea_checksum+0x26>
	return cs;
 8000f38:	230b      	movs	r3, #11
 8000f3a:	18fb      	adds	r3, r7, r3
 8000f3c:	781b      	ldrb	r3, [r3, #0]
}
 8000f3e:	0018      	movs	r0, r3
 8000f40:	46bd      	mov	sp, r7
 8000f42:	b004      	add	sp, #16
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM14 )
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a0c      	ldr	r2, [pc, #48]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d106      	bne.n	8000f68 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		waiting_for_answer = 0 ;
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT ( &htim14 ) ;
 8000f60:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000f62:	0018      	movs	r0, r3
 8000f64:	f002 fb66 	bl	8003634 <HAL_TIM_Base_Stop_IT>
	}
	if ( htim->Instance == TIM16 )
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a09      	ldr	r2, [pc, #36]	; (8000f94 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d106      	bne.n	8000f80 <HAL_TIM_PeriodElapsedCallback+0x38>
	{
		tim16_on = 0 ;
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT ( &htim16 ) ;
 8000f78:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	f002 fb5a 	bl	8003634 <HAL_TIM_Base_Stop_IT>
	}
}
 8000f80:	46c0      	nop			; (mov r8, r8)
 8000f82:	46bd      	mov	sp, r7
 8000f84:	b002      	add	sp, #8
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40002000 	.word	0x40002000
 8000f8c:	200002cf 	.word	0x200002cf
 8000f90:	20000144 	.word	0x20000144
 8000f94:	40014400 	.word	0x40014400
 8000f98:	200002ce 	.word	0x200002ce
 8000f9c:	20000190 	.word	0x20000190

08000fa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa4:	b672      	cpsid	i
}
 8000fa6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <Error_Handler+0x8>
	...

08000fac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <HAL_MspInit+0x44>)
 8000fb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <HAL_MspInit+0x44>)
 8000fb8:	2101      	movs	r1, #1
 8000fba:	430a      	orrs	r2, r1
 8000fbc:	641a      	str	r2, [r3, #64]	; 0x40
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <HAL_MspInit+0x44>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <HAL_MspInit+0x44>)
 8000fcc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fce:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <HAL_MspInit+0x44>)
 8000fd0:	2180      	movs	r1, #128	; 0x80
 8000fd2:	0549      	lsls	r1, r1, #21
 8000fd4:	430a      	orrs	r2, r1
 8000fd6:	63da      	str	r2, [r3, #60]	; 0x3c
 8000fd8:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <HAL_MspInit+0x44>)
 8000fda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fdc:	2380      	movs	r3, #128	; 0x80
 8000fde:	055b      	lsls	r3, r3, #21
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	603b      	str	r3, [r7, #0]
 8000fe4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	b002      	add	sp, #8
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	46c0      	nop			; (mov r8, r8)
 8000ff0:	40021000 	.word	0x40021000

08000ff4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ff4:	b590      	push	{r4, r7, lr}
 8000ff6:	b08f      	sub	sp, #60	; 0x3c
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ffc:	2410      	movs	r4, #16
 8000ffe:	193b      	adds	r3, r7, r4
 8001000:	0018      	movs	r0, r3
 8001002:	2328      	movs	r3, #40	; 0x28
 8001004:	001a      	movs	r2, r3
 8001006:	2100      	movs	r1, #0
 8001008:	f004 f9ec 	bl	80053e4 <memset>
  if(hrtc->Instance==RTC)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a19      	ldr	r2, [pc, #100]	; (8001078 <HAL_RTC_MspInit+0x84>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d12c      	bne.n	8001070 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001016:	193b      	adds	r3, r7, r4
 8001018:	2280      	movs	r2, #128	; 0x80
 800101a:	0292      	lsls	r2, r2, #10
 800101c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800101e:	193b      	adds	r3, r7, r4
 8001020:	2280      	movs	r2, #128	; 0x80
 8001022:	0052      	lsls	r2, r2, #1
 8001024:	625a      	str	r2, [r3, #36]	; 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001026:	193b      	adds	r3, r7, r4
 8001028:	0018      	movs	r0, r3
 800102a:	f001 fd6b 	bl	8002b04 <HAL_RCCEx_PeriphCLKConfig>
 800102e:	1e03      	subs	r3, r0, #0
 8001030:	d001      	beq.n	8001036 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001032:	f7ff ffb5 	bl	8000fa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001036:	4b11      	ldr	r3, [pc, #68]	; (800107c <HAL_RTC_MspInit+0x88>)
 8001038:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800103a:	4b10      	ldr	r3, [pc, #64]	; (800107c <HAL_RTC_MspInit+0x88>)
 800103c:	2180      	movs	r1, #128	; 0x80
 800103e:	0209      	lsls	r1, r1, #8
 8001040:	430a      	orrs	r2, r1
 8001042:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001044:	4b0d      	ldr	r3, [pc, #52]	; (800107c <HAL_RTC_MspInit+0x88>)
 8001046:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <HAL_RTC_MspInit+0x88>)
 800104a:	2180      	movs	r1, #128	; 0x80
 800104c:	00c9      	lsls	r1, r1, #3
 800104e:	430a      	orrs	r2, r1
 8001050:	63da      	str	r2, [r3, #60]	; 0x3c
 8001052:	4b0a      	ldr	r3, [pc, #40]	; (800107c <HAL_RTC_MspInit+0x88>)
 8001054:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001056:	2380      	movs	r3, #128	; 0x80
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	4013      	ands	r3, r2
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8001060:	2200      	movs	r2, #0
 8001062:	2100      	movs	r1, #0
 8001064:	2002      	movs	r0, #2
 8001066:	f000 fb5d 	bl	8001724 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 800106a:	2002      	movs	r0, #2
 800106c:	f000 fb6f 	bl	800174e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001070:	46c0      	nop			; (mov r8, r8)
 8001072:	46bd      	mov	sp, r7
 8001074:	b00f      	add	sp, #60	; 0x3c
 8001076:	bd90      	pop	{r4, r7, pc}
 8001078:	40002800 	.word	0x40002800
 800107c:	40021000 	.word	0x40021000

08001080 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a1c      	ldr	r2, [pc, #112]	; (8001100 <HAL_TIM_Base_MspInit+0x80>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d116      	bne.n	80010c0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001092:	4b1c      	ldr	r3, [pc, #112]	; (8001104 <HAL_TIM_Base_MspInit+0x84>)
 8001094:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001096:	4b1b      	ldr	r3, [pc, #108]	; (8001104 <HAL_TIM_Base_MspInit+0x84>)
 8001098:	2180      	movs	r1, #128	; 0x80
 800109a:	0209      	lsls	r1, r1, #8
 800109c:	430a      	orrs	r2, r1
 800109e:	641a      	str	r2, [r3, #64]	; 0x40
 80010a0:	4b18      	ldr	r3, [pc, #96]	; (8001104 <HAL_TIM_Base_MspInit+0x84>)
 80010a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010a4:	2380      	movs	r3, #128	; 0x80
 80010a6:	021b      	lsls	r3, r3, #8
 80010a8:	4013      	ands	r3, r2
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2100      	movs	r1, #0
 80010b2:	2013      	movs	r0, #19
 80010b4:	f000 fb36 	bl	8001724 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80010b8:	2013      	movs	r0, #19
 80010ba:	f000 fb48 	bl	800174e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80010be:	e01a      	b.n	80010f6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM16)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a10      	ldr	r2, [pc, #64]	; (8001108 <HAL_TIM_Base_MspInit+0x88>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d115      	bne.n	80010f6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80010ca:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <HAL_TIM_Base_MspInit+0x84>)
 80010cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010ce:	4b0d      	ldr	r3, [pc, #52]	; (8001104 <HAL_TIM_Base_MspInit+0x84>)
 80010d0:	2180      	movs	r1, #128	; 0x80
 80010d2:	0289      	lsls	r1, r1, #10
 80010d4:	430a      	orrs	r2, r1
 80010d6:	641a      	str	r2, [r3, #64]	; 0x40
 80010d8:	4b0a      	ldr	r3, [pc, #40]	; (8001104 <HAL_TIM_Base_MspInit+0x84>)
 80010da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010dc:	2380      	movs	r3, #128	; 0x80
 80010de:	029b      	lsls	r3, r3, #10
 80010e0:	4013      	ands	r3, r2
 80010e2:	60bb      	str	r3, [r7, #8]
 80010e4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2100      	movs	r1, #0
 80010ea:	2015      	movs	r0, #21
 80010ec:	f000 fb1a 	bl	8001724 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80010f0:	2015      	movs	r0, #21
 80010f2:	f000 fb2c 	bl	800174e <HAL_NVIC_EnableIRQ>
}
 80010f6:	46c0      	nop			; (mov r8, r8)
 80010f8:	46bd      	mov	sp, r7
 80010fa:	b004      	add	sp, #16
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	46c0      	nop			; (mov r8, r8)
 8001100:	40002000 	.word	0x40002000
 8001104:	40021000 	.word	0x40021000
 8001108:	40014400 	.word	0x40014400

0800110c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800110c:	b590      	push	{r4, r7, lr}
 800110e:	b095      	sub	sp, #84	; 0x54
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	233c      	movs	r3, #60	; 0x3c
 8001116:	18fb      	adds	r3, r7, r3
 8001118:	0018      	movs	r0, r3
 800111a:	2314      	movs	r3, #20
 800111c:	001a      	movs	r2, r3
 800111e:	2100      	movs	r1, #0
 8001120:	f004 f960 	bl	80053e4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001124:	2414      	movs	r4, #20
 8001126:	193b      	adds	r3, r7, r4
 8001128:	0018      	movs	r0, r3
 800112a:	2328      	movs	r3, #40	; 0x28
 800112c:	001a      	movs	r2, r3
 800112e:	2100      	movs	r1, #0
 8001130:	f004 f958 	bl	80053e4 <memset>
  if(huart->Instance==USART1)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a3c      	ldr	r2, [pc, #240]	; (800122c <HAL_UART_MspInit+0x120>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d171      	bne.n	8001222 <HAL_UART_MspInit+0x116>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800113e:	193b      	adds	r3, r7, r4
 8001140:	2201      	movs	r2, #1
 8001142:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001144:	193b      	adds	r3, r7, r4
 8001146:	2200      	movs	r2, #0
 8001148:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800114a:	193b      	adds	r3, r7, r4
 800114c:	0018      	movs	r0, r3
 800114e:	f001 fcd9 	bl	8002b04 <HAL_RCCEx_PeriphCLKConfig>
 8001152:	1e03      	subs	r3, r0, #0
 8001154:	d001      	beq.n	800115a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001156:	f7ff ff23 	bl	8000fa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800115a:	4b35      	ldr	r3, [pc, #212]	; (8001230 <HAL_UART_MspInit+0x124>)
 800115c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800115e:	4b34      	ldr	r3, [pc, #208]	; (8001230 <HAL_UART_MspInit+0x124>)
 8001160:	2180      	movs	r1, #128	; 0x80
 8001162:	01c9      	lsls	r1, r1, #7
 8001164:	430a      	orrs	r2, r1
 8001166:	641a      	str	r2, [r3, #64]	; 0x40
 8001168:	4b31      	ldr	r3, [pc, #196]	; (8001230 <HAL_UART_MspInit+0x124>)
 800116a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800116c:	2380      	movs	r3, #128	; 0x80
 800116e:	01db      	lsls	r3, r3, #7
 8001170:	4013      	ands	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	4b2e      	ldr	r3, [pc, #184]	; (8001230 <HAL_UART_MspInit+0x124>)
 8001178:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800117a:	4b2d      	ldr	r3, [pc, #180]	; (8001230 <HAL_UART_MspInit+0x124>)
 800117c:	2101      	movs	r1, #1
 800117e:	430a      	orrs	r2, r1
 8001180:	635a      	str	r2, [r3, #52]	; 0x34
 8001182:	4b2b      	ldr	r3, [pc, #172]	; (8001230 <HAL_UART_MspInit+0x124>)
 8001184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001186:	2201      	movs	r2, #1
 8001188:	4013      	ands	r3, r2
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800118e:	213c      	movs	r1, #60	; 0x3c
 8001190:	187b      	adds	r3, r7, r1
 8001192:	22c0      	movs	r2, #192	; 0xc0
 8001194:	00d2      	lsls	r2, r2, #3
 8001196:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	187b      	adds	r3, r7, r1
 800119a:	2202      	movs	r2, #2
 800119c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	187b      	adds	r3, r7, r1
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	187b      	adds	r3, r7, r1
 80011a6:	2200      	movs	r2, #0
 80011a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80011aa:	187b      	adds	r3, r7, r1
 80011ac:	2201      	movs	r2, #1
 80011ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b0:	187a      	adds	r2, r7, r1
 80011b2:	23a0      	movs	r3, #160	; 0xa0
 80011b4:	05db      	lsls	r3, r3, #23
 80011b6:	0011      	movs	r1, r2
 80011b8:	0018      	movs	r0, r3
 80011ba:	f000 fe03 	bl	8001dc4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80011be:	4b1d      	ldr	r3, [pc, #116]	; (8001234 <HAL_UART_MspInit+0x128>)
 80011c0:	4a1d      	ldr	r2, [pc, #116]	; (8001238 <HAL_UART_MspInit+0x12c>)
 80011c2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80011c4:	4b1b      	ldr	r3, [pc, #108]	; (8001234 <HAL_UART_MspInit+0x128>)
 80011c6:	2232      	movs	r2, #50	; 0x32
 80011c8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011ca:	4b1a      	ldr	r3, [pc, #104]	; (8001234 <HAL_UART_MspInit+0x128>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011d0:	4b18      	ldr	r3, [pc, #96]	; (8001234 <HAL_UART_MspInit+0x128>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011d6:	4b17      	ldr	r3, [pc, #92]	; (8001234 <HAL_UART_MspInit+0x128>)
 80011d8:	2280      	movs	r2, #128	; 0x80
 80011da:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011dc:	4b15      	ldr	r3, [pc, #84]	; (8001234 <HAL_UART_MspInit+0x128>)
 80011de:	2200      	movs	r2, #0
 80011e0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011e2:	4b14      	ldr	r3, [pc, #80]	; (8001234 <HAL_UART_MspInit+0x128>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80011e8:	4b12      	ldr	r3, [pc, #72]	; (8001234 <HAL_UART_MspInit+0x128>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011ee:	4b11      	ldr	r3, [pc, #68]	; (8001234 <HAL_UART_MspInit+0x128>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80011f4:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <HAL_UART_MspInit+0x128>)
 80011f6:	0018      	movs	r0, r3
 80011f8:	f000 fac6 	bl	8001788 <HAL_DMA_Init>
 80011fc:	1e03      	subs	r3, r0, #0
 80011fe:	d001      	beq.n	8001204 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8001200:	f7ff fece 	bl	8000fa0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2180      	movs	r1, #128	; 0x80
 8001208:	4a0a      	ldr	r2, [pc, #40]	; (8001234 <HAL_UART_MspInit+0x128>)
 800120a:	505a      	str	r2, [r3, r1]
 800120c:	4b09      	ldr	r3, [pc, #36]	; (8001234 <HAL_UART_MspInit+0x128>)
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	2100      	movs	r1, #0
 8001216:	201b      	movs	r0, #27
 8001218:	f000 fa84 	bl	8001724 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800121c:	201b      	movs	r0, #27
 800121e:	f000 fa96 	bl	800174e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001222:	46c0      	nop			; (mov r8, r8)
 8001224:	46bd      	mov	sp, r7
 8001226:	b015      	add	sp, #84	; 0x54
 8001228:	bd90      	pop	{r4, r7, pc}
 800122a:	46c0      	nop			; (mov r8, r8)
 800122c:	40013800 	.word	0x40013800
 8001230:	40021000 	.word	0x40021000
 8001234:	20000270 	.word	0x20000270
 8001238:	40020008 	.word	0x40020008

0800123c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <NMI_Handler+0x4>

08001242 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001246:	e7fe      	b.n	8001246 <HardFault_Handler+0x4>

08001248 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800124c:	46c0      	nop			; (mov r8, r8)
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001260:	f000 f998 	bl	8001594 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001264:	46c0      	nop			; (mov r8, r8)
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001270:	4b03      	ldr	r3, [pc, #12]	; (8001280 <RTC_TAMP_IRQHandler+0x14>)
 8001272:	0018      	movs	r0, r3
 8001274:	f002 f90c 	bl	8003490 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8001278:	46c0      	nop			; (mov r8, r8)
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	20000118 	.word	0x20000118

08001284 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001288:	4b03      	ldr	r3, [pc, #12]	; (8001298 <DMA1_Channel1_IRQHandler+0x14>)
 800128a:	0018      	movs	r0, r3
 800128c:	f000 fc58 	bl	8001b40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001290:	46c0      	nop			; (mov r8, r8)
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	46c0      	nop			; (mov r8, r8)
 8001298:	20000270 	.word	0x20000270

0800129c <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80012a0:	4b03      	ldr	r3, [pc, #12]	; (80012b0 <TIM14_IRQHandler+0x14>)
 80012a2:	0018      	movs	r0, r3
 80012a4:	f002 f9f4 	bl	8003690 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80012a8:	46c0      	nop			; (mov r8, r8)
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	46c0      	nop			; (mov r8, r8)
 80012b0:	20000144 	.word	0x20000144

080012b4 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80012b8:	4b03      	ldr	r3, [pc, #12]	; (80012c8 <TIM16_IRQHandler+0x14>)
 80012ba:	0018      	movs	r0, r3
 80012bc:	f002 f9e8 	bl	8003690 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80012c0:	46c0      	nop			; (mov r8, r8)
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	46c0      	nop			; (mov r8, r8)
 80012c8:	20000190 	.word	0x20000190

080012cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80012d0:	4b03      	ldr	r3, [pc, #12]	; (80012e0 <USART1_IRQHandler+0x14>)
 80012d2:	0018      	movs	r0, r3
 80012d4:	f002 fcae 	bl	8003c34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80012d8:	46c0      	nop			; (mov r8, r8)
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	200001dc 	.word	0x200001dc

080012e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
	return 1;
 80012e8:	2301      	movs	r3, #1
}
 80012ea:	0018      	movs	r0, r3
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <_kill>:

int _kill(int pid, int sig)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80012fa:	f004 f849 	bl	8005390 <__errno>
 80012fe:	0003      	movs	r3, r0
 8001300:	2216      	movs	r2, #22
 8001302:	601a      	str	r2, [r3, #0]
	return -1;
 8001304:	2301      	movs	r3, #1
 8001306:	425b      	negs	r3, r3
}
 8001308:	0018      	movs	r0, r3
 800130a:	46bd      	mov	sp, r7
 800130c:	b002      	add	sp, #8
 800130e:	bd80      	pop	{r7, pc}

08001310 <_exit>:

void _exit (int status)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001318:	2301      	movs	r3, #1
 800131a:	425a      	negs	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	0011      	movs	r1, r2
 8001320:	0018      	movs	r0, r3
 8001322:	f7ff ffe5 	bl	80012f0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001326:	e7fe      	b.n	8001326 <_exit+0x16>

08001328 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
 8001338:	e00a      	b.n	8001350 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800133a:	e000      	b.n	800133e <_read+0x16>
 800133c:	bf00      	nop
 800133e:	0001      	movs	r1, r0
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	1c5a      	adds	r2, r3, #1
 8001344:	60ba      	str	r2, [r7, #8]
 8001346:	b2ca      	uxtb	r2, r1
 8001348:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	3301      	adds	r3, #1
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	697a      	ldr	r2, [r7, #20]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	429a      	cmp	r2, r3
 8001356:	dbf0      	blt.n	800133a <_read+0x12>
	}

return len;
 8001358:	687b      	ldr	r3, [r7, #4]
}
 800135a:	0018      	movs	r0, r3
 800135c:	46bd      	mov	sp, r7
 800135e:	b006      	add	sp, #24
 8001360:	bd80      	pop	{r7, pc}

08001362 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b086      	sub	sp, #24
 8001366:	af00      	add	r7, sp, #0
 8001368:	60f8      	str	r0, [r7, #12]
 800136a:	60b9      	str	r1, [r7, #8]
 800136c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
 8001372:	e009      	b.n	8001388 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	1c5a      	adds	r2, r3, #1
 8001378:	60ba      	str	r2, [r7, #8]
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	0018      	movs	r0, r3
 800137e:	e000      	b.n	8001382 <_write+0x20>
 8001380:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	3301      	adds	r3, #1
 8001386:	617b      	str	r3, [r7, #20]
 8001388:	697a      	ldr	r2, [r7, #20]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	429a      	cmp	r2, r3
 800138e:	dbf1      	blt.n	8001374 <_write+0x12>
	}
	return len;
 8001390:	687b      	ldr	r3, [r7, #4]
}
 8001392:	0018      	movs	r0, r3
 8001394:	46bd      	mov	sp, r7
 8001396:	b006      	add	sp, #24
 8001398:	bd80      	pop	{r7, pc}

0800139a <_close>:

int _close(int file)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
	return -1;
 80013a2:	2301      	movs	r3, #1
 80013a4:	425b      	negs	r3, r3
}
 80013a6:	0018      	movs	r0, r3
 80013a8:	46bd      	mov	sp, r7
 80013aa:	b002      	add	sp, #8
 80013ac:	bd80      	pop	{r7, pc}

080013ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b082      	sub	sp, #8
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
 80013b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	2280      	movs	r2, #128	; 0x80
 80013bc:	0192      	lsls	r2, r2, #6
 80013be:	605a      	str	r2, [r3, #4]
	return 0;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	0018      	movs	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	b002      	add	sp, #8
 80013c8:	bd80      	pop	{r7, pc}

080013ca <_isatty>:

int _isatty(int file)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
	return 1;
 80013d2:	2301      	movs	r3, #1
}
 80013d4:	0018      	movs	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	b002      	add	sp, #8
 80013da:	bd80      	pop	{r7, pc}

080013dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
	return 0;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	0018      	movs	r0, r3
 80013ec:	46bd      	mov	sp, r7
 80013ee:	b004      	add	sp, #16
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013fc:	4a14      	ldr	r2, [pc, #80]	; (8001450 <_sbrk+0x5c>)
 80013fe:	4b15      	ldr	r3, [pc, #84]	; (8001454 <_sbrk+0x60>)
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001408:	4b13      	ldr	r3, [pc, #76]	; (8001458 <_sbrk+0x64>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d102      	bne.n	8001416 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001410:	4b11      	ldr	r3, [pc, #68]	; (8001458 <_sbrk+0x64>)
 8001412:	4a12      	ldr	r2, [pc, #72]	; (800145c <_sbrk+0x68>)
 8001414:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001416:	4b10      	ldr	r3, [pc, #64]	; (8001458 <_sbrk+0x64>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	18d3      	adds	r3, r2, r3
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	429a      	cmp	r2, r3
 8001422:	d207      	bcs.n	8001434 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001424:	f003 ffb4 	bl	8005390 <__errno>
 8001428:	0003      	movs	r3, r0
 800142a:	220c      	movs	r2, #12
 800142c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800142e:	2301      	movs	r3, #1
 8001430:	425b      	negs	r3, r3
 8001432:	e009      	b.n	8001448 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001434:	4b08      	ldr	r3, [pc, #32]	; (8001458 <_sbrk+0x64>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800143a:	4b07      	ldr	r3, [pc, #28]	; (8001458 <_sbrk+0x64>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	18d2      	adds	r2, r2, r3
 8001442:	4b05      	ldr	r3, [pc, #20]	; (8001458 <_sbrk+0x64>)
 8001444:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001446:	68fb      	ldr	r3, [r7, #12]
}
 8001448:	0018      	movs	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	b006      	add	sp, #24
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20002000 	.word	0x20002000
 8001454:	00000400 	.word	0x00000400
 8001458:	20000524 	.word	0x20000524
 800145c:	20000540 	.word	0x20000540

08001460 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001464:	46c0      	nop			; (mov r8, r8)
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800146c:	480d      	ldr	r0, [pc, #52]	; (80014a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800146e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001470:	f7ff fff6 	bl	8001460 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001474:	480c      	ldr	r0, [pc, #48]	; (80014a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001476:	490d      	ldr	r1, [pc, #52]	; (80014ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001478:	4a0d      	ldr	r2, [pc, #52]	; (80014b0 <LoopForever+0xe>)
  movs r3, #0
 800147a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800147c:	e002      	b.n	8001484 <LoopCopyDataInit>

0800147e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800147e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001482:	3304      	adds	r3, #4

08001484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001488:	d3f9      	bcc.n	800147e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800148a:	4a0a      	ldr	r2, [pc, #40]	; (80014b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800148c:	4c0a      	ldr	r4, [pc, #40]	; (80014b8 <LoopForever+0x16>)
  movs r3, #0
 800148e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001490:	e001      	b.n	8001496 <LoopFillZerobss>

08001492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001494:	3204      	adds	r2, #4

08001496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001498:	d3fb      	bcc.n	8001492 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800149a:	f003 ff7f 	bl	800539c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800149e:	f7ff f8cf 	bl	8000640 <main>

080014a2 <LoopForever>:

LoopForever:
  b LoopForever
 80014a2:	e7fe      	b.n	80014a2 <LoopForever>
  ldr   r0, =_estack
 80014a4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80014a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014ac:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80014b0:	08007860 	.word	0x08007860
  ldr r2, =_sbss
 80014b4:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 80014b8:	2000053c 	.word	0x2000053c

080014bc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014bc:	e7fe      	b.n	80014bc <ADC1_IRQHandler>
	...

080014c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014c6:	1dfb      	adds	r3, r7, #7
 80014c8:	2200      	movs	r2, #0
 80014ca:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014cc:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <HAL_Init+0x3c>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <HAL_Init+0x3c>)
 80014d2:	2180      	movs	r1, #128	; 0x80
 80014d4:	0049      	lsls	r1, r1, #1
 80014d6:	430a      	orrs	r2, r1
 80014d8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014da:	2000      	movs	r0, #0
 80014dc:	f000 f810 	bl	8001500 <HAL_InitTick>
 80014e0:	1e03      	subs	r3, r0, #0
 80014e2:	d003      	beq.n	80014ec <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80014e4:	1dfb      	adds	r3, r7, #7
 80014e6:	2201      	movs	r2, #1
 80014e8:	701a      	strb	r2, [r3, #0]
 80014ea:	e001      	b.n	80014f0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80014ec:	f7ff fd5e 	bl	8000fac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014f0:	1dfb      	adds	r3, r7, #7
 80014f2:	781b      	ldrb	r3, [r3, #0]
}
 80014f4:	0018      	movs	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	b002      	add	sp, #8
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40022000 	.word	0x40022000

08001500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001500:	b590      	push	{r4, r7, lr}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001508:	230f      	movs	r3, #15
 800150a:	18fb      	adds	r3, r7, r3
 800150c:	2200      	movs	r2, #0
 800150e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001510:	4b1d      	ldr	r3, [pc, #116]	; (8001588 <HAL_InitTick+0x88>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d02b      	beq.n	8001570 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001518:	4b1c      	ldr	r3, [pc, #112]	; (800158c <HAL_InitTick+0x8c>)
 800151a:	681c      	ldr	r4, [r3, #0]
 800151c:	4b1a      	ldr	r3, [pc, #104]	; (8001588 <HAL_InitTick+0x88>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	0019      	movs	r1, r3
 8001522:	23fa      	movs	r3, #250	; 0xfa
 8001524:	0098      	lsls	r0, r3, #2
 8001526:	f7fe fdff 	bl	8000128 <__udivsi3>
 800152a:	0003      	movs	r3, r0
 800152c:	0019      	movs	r1, r3
 800152e:	0020      	movs	r0, r4
 8001530:	f7fe fdfa 	bl	8000128 <__udivsi3>
 8001534:	0003      	movs	r3, r0
 8001536:	0018      	movs	r0, r3
 8001538:	f000 f919 	bl	800176e <HAL_SYSTICK_Config>
 800153c:	1e03      	subs	r3, r0, #0
 800153e:	d112      	bne.n	8001566 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b03      	cmp	r3, #3
 8001544:	d80a      	bhi.n	800155c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	2301      	movs	r3, #1
 800154a:	425b      	negs	r3, r3
 800154c:	2200      	movs	r2, #0
 800154e:	0018      	movs	r0, r3
 8001550:	f000 f8e8 	bl	8001724 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001554:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <HAL_InitTick+0x90>)
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	e00d      	b.n	8001578 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800155c:	230f      	movs	r3, #15
 800155e:	18fb      	adds	r3, r7, r3
 8001560:	2201      	movs	r2, #1
 8001562:	701a      	strb	r2, [r3, #0]
 8001564:	e008      	b.n	8001578 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001566:	230f      	movs	r3, #15
 8001568:	18fb      	adds	r3, r7, r3
 800156a:	2201      	movs	r2, #1
 800156c:	701a      	strb	r2, [r3, #0]
 800156e:	e003      	b.n	8001578 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001570:	230f      	movs	r3, #15
 8001572:	18fb      	adds	r3, r7, r3
 8001574:	2201      	movs	r2, #1
 8001576:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001578:	230f      	movs	r3, #15
 800157a:	18fb      	adds	r3, r7, r3
 800157c:	781b      	ldrb	r3, [r3, #0]
}
 800157e:	0018      	movs	r0, r3
 8001580:	46bd      	mov	sp, r7
 8001582:	b005      	add	sp, #20
 8001584:	bd90      	pop	{r4, r7, pc}
 8001586:	46c0      	nop			; (mov r8, r8)
 8001588:	20000094 	.word	0x20000094
 800158c:	2000008c 	.word	0x2000008c
 8001590:	20000090 	.word	0x20000090

08001594 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <HAL_IncTick+0x1c>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	001a      	movs	r2, r3
 800159e:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <HAL_IncTick+0x20>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	18d2      	adds	r2, r2, r3
 80015a4:	4b03      	ldr	r3, [pc, #12]	; (80015b4 <HAL_IncTick+0x20>)
 80015a6:	601a      	str	r2, [r3, #0]
}
 80015a8:	46c0      	nop			; (mov r8, r8)
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	20000094 	.word	0x20000094
 80015b4:	20000528 	.word	0x20000528

080015b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  return uwTick;
 80015bc:	4b02      	ldr	r3, [pc, #8]	; (80015c8 <HAL_GetTick+0x10>)
 80015be:	681b      	ldr	r3, [r3, #0]
}
 80015c0:	0018      	movs	r0, r3
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	46c0      	nop			; (mov r8, r8)
 80015c8:	20000528 	.word	0x20000528

080015cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	0002      	movs	r2, r0
 80015d4:	1dfb      	adds	r3, r7, #7
 80015d6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015d8:	1dfb      	adds	r3, r7, #7
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	2b7f      	cmp	r3, #127	; 0x7f
 80015de:	d809      	bhi.n	80015f4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015e0:	1dfb      	adds	r3, r7, #7
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	001a      	movs	r2, r3
 80015e6:	231f      	movs	r3, #31
 80015e8:	401a      	ands	r2, r3
 80015ea:	4b04      	ldr	r3, [pc, #16]	; (80015fc <__NVIC_EnableIRQ+0x30>)
 80015ec:	2101      	movs	r1, #1
 80015ee:	4091      	lsls	r1, r2
 80015f0:	000a      	movs	r2, r1
 80015f2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80015f4:	46c0      	nop			; (mov r8, r8)
 80015f6:	46bd      	mov	sp, r7
 80015f8:	b002      	add	sp, #8
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	e000e100 	.word	0xe000e100

08001600 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001600:	b590      	push	{r4, r7, lr}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	0002      	movs	r2, r0
 8001608:	6039      	str	r1, [r7, #0]
 800160a:	1dfb      	adds	r3, r7, #7
 800160c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800160e:	1dfb      	adds	r3, r7, #7
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b7f      	cmp	r3, #127	; 0x7f
 8001614:	d828      	bhi.n	8001668 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001616:	4a2f      	ldr	r2, [pc, #188]	; (80016d4 <__NVIC_SetPriority+0xd4>)
 8001618:	1dfb      	adds	r3, r7, #7
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	b25b      	sxtb	r3, r3
 800161e:	089b      	lsrs	r3, r3, #2
 8001620:	33c0      	adds	r3, #192	; 0xc0
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	589b      	ldr	r3, [r3, r2]
 8001626:	1dfa      	adds	r2, r7, #7
 8001628:	7812      	ldrb	r2, [r2, #0]
 800162a:	0011      	movs	r1, r2
 800162c:	2203      	movs	r2, #3
 800162e:	400a      	ands	r2, r1
 8001630:	00d2      	lsls	r2, r2, #3
 8001632:	21ff      	movs	r1, #255	; 0xff
 8001634:	4091      	lsls	r1, r2
 8001636:	000a      	movs	r2, r1
 8001638:	43d2      	mvns	r2, r2
 800163a:	401a      	ands	r2, r3
 800163c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	019b      	lsls	r3, r3, #6
 8001642:	22ff      	movs	r2, #255	; 0xff
 8001644:	401a      	ands	r2, r3
 8001646:	1dfb      	adds	r3, r7, #7
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	0018      	movs	r0, r3
 800164c:	2303      	movs	r3, #3
 800164e:	4003      	ands	r3, r0
 8001650:	00db      	lsls	r3, r3, #3
 8001652:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001654:	481f      	ldr	r0, [pc, #124]	; (80016d4 <__NVIC_SetPriority+0xd4>)
 8001656:	1dfb      	adds	r3, r7, #7
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	b25b      	sxtb	r3, r3
 800165c:	089b      	lsrs	r3, r3, #2
 800165e:	430a      	orrs	r2, r1
 8001660:	33c0      	adds	r3, #192	; 0xc0
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001666:	e031      	b.n	80016cc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001668:	4a1b      	ldr	r2, [pc, #108]	; (80016d8 <__NVIC_SetPriority+0xd8>)
 800166a:	1dfb      	adds	r3, r7, #7
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	0019      	movs	r1, r3
 8001670:	230f      	movs	r3, #15
 8001672:	400b      	ands	r3, r1
 8001674:	3b08      	subs	r3, #8
 8001676:	089b      	lsrs	r3, r3, #2
 8001678:	3306      	adds	r3, #6
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	18d3      	adds	r3, r2, r3
 800167e:	3304      	adds	r3, #4
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	1dfa      	adds	r2, r7, #7
 8001684:	7812      	ldrb	r2, [r2, #0]
 8001686:	0011      	movs	r1, r2
 8001688:	2203      	movs	r2, #3
 800168a:	400a      	ands	r2, r1
 800168c:	00d2      	lsls	r2, r2, #3
 800168e:	21ff      	movs	r1, #255	; 0xff
 8001690:	4091      	lsls	r1, r2
 8001692:	000a      	movs	r2, r1
 8001694:	43d2      	mvns	r2, r2
 8001696:	401a      	ands	r2, r3
 8001698:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	019b      	lsls	r3, r3, #6
 800169e:	22ff      	movs	r2, #255	; 0xff
 80016a0:	401a      	ands	r2, r3
 80016a2:	1dfb      	adds	r3, r7, #7
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	0018      	movs	r0, r3
 80016a8:	2303      	movs	r3, #3
 80016aa:	4003      	ands	r3, r0
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016b0:	4809      	ldr	r0, [pc, #36]	; (80016d8 <__NVIC_SetPriority+0xd8>)
 80016b2:	1dfb      	adds	r3, r7, #7
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	001c      	movs	r4, r3
 80016b8:	230f      	movs	r3, #15
 80016ba:	4023      	ands	r3, r4
 80016bc:	3b08      	subs	r3, #8
 80016be:	089b      	lsrs	r3, r3, #2
 80016c0:	430a      	orrs	r2, r1
 80016c2:	3306      	adds	r3, #6
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	18c3      	adds	r3, r0, r3
 80016c8:	3304      	adds	r3, #4
 80016ca:	601a      	str	r2, [r3, #0]
}
 80016cc:	46c0      	nop			; (mov r8, r8)
 80016ce:	46bd      	mov	sp, r7
 80016d0:	b003      	add	sp, #12
 80016d2:	bd90      	pop	{r4, r7, pc}
 80016d4:	e000e100 	.word	0xe000e100
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	1e5a      	subs	r2, r3, #1
 80016e8:	2380      	movs	r3, #128	; 0x80
 80016ea:	045b      	lsls	r3, r3, #17
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d301      	bcc.n	80016f4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016f0:	2301      	movs	r3, #1
 80016f2:	e010      	b.n	8001716 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016f4:	4b0a      	ldr	r3, [pc, #40]	; (8001720 <SysTick_Config+0x44>)
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	3a01      	subs	r2, #1
 80016fa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016fc:	2301      	movs	r3, #1
 80016fe:	425b      	negs	r3, r3
 8001700:	2103      	movs	r1, #3
 8001702:	0018      	movs	r0, r3
 8001704:	f7ff ff7c 	bl	8001600 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001708:	4b05      	ldr	r3, [pc, #20]	; (8001720 <SysTick_Config+0x44>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800170e:	4b04      	ldr	r3, [pc, #16]	; (8001720 <SysTick_Config+0x44>)
 8001710:	2207      	movs	r2, #7
 8001712:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001714:	2300      	movs	r3, #0
}
 8001716:	0018      	movs	r0, r3
 8001718:	46bd      	mov	sp, r7
 800171a:	b002      	add	sp, #8
 800171c:	bd80      	pop	{r7, pc}
 800171e:	46c0      	nop			; (mov r8, r8)
 8001720:	e000e010 	.word	0xe000e010

08001724 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	607a      	str	r2, [r7, #4]
 800172e:	210f      	movs	r1, #15
 8001730:	187b      	adds	r3, r7, r1
 8001732:	1c02      	adds	r2, r0, #0
 8001734:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001736:	68ba      	ldr	r2, [r7, #8]
 8001738:	187b      	adds	r3, r7, r1
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	b25b      	sxtb	r3, r3
 800173e:	0011      	movs	r1, r2
 8001740:	0018      	movs	r0, r3
 8001742:	f7ff ff5d 	bl	8001600 <__NVIC_SetPriority>
}
 8001746:	46c0      	nop			; (mov r8, r8)
 8001748:	46bd      	mov	sp, r7
 800174a:	b004      	add	sp, #16
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b082      	sub	sp, #8
 8001752:	af00      	add	r7, sp, #0
 8001754:	0002      	movs	r2, r0
 8001756:	1dfb      	adds	r3, r7, #7
 8001758:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800175a:	1dfb      	adds	r3, r7, #7
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	b25b      	sxtb	r3, r3
 8001760:	0018      	movs	r0, r3
 8001762:	f7ff ff33 	bl	80015cc <__NVIC_EnableIRQ>
}
 8001766:	46c0      	nop			; (mov r8, r8)
 8001768:	46bd      	mov	sp, r7
 800176a:	b002      	add	sp, #8
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b082      	sub	sp, #8
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	0018      	movs	r0, r3
 800177a:	f7ff ffaf 	bl	80016dc <SysTick_Config>
 800177e:	0003      	movs	r3, r0
}
 8001780:	0018      	movs	r0, r3
 8001782:	46bd      	mov	sp, r7
 8001784:	b002      	add	sp, #8
 8001786:	bd80      	pop	{r7, pc}

08001788 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e077      	b.n	800188a <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a3d      	ldr	r2, [pc, #244]	; (8001894 <HAL_DMA_Init+0x10c>)
 80017a0:	4694      	mov	ip, r2
 80017a2:	4463      	add	r3, ip
 80017a4:	2114      	movs	r1, #20
 80017a6:	0018      	movs	r0, r3
 80017a8:	f7fe fcbe 	bl	8000128 <__udivsi3>
 80017ac:	0003      	movs	r3, r0
 80017ae:	009a      	lsls	r2, r3, #2
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2225      	movs	r2, #37	; 0x25
 80017b8:	2102      	movs	r1, #2
 80017ba:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4934      	ldr	r1, [pc, #208]	; (8001898 <HAL_DMA_Init+0x110>)
 80017c8:	400a      	ands	r2, r1
 80017ca:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6819      	ldr	r1, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	689a      	ldr	r2, [r3, #8]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	431a      	orrs	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	691b      	ldr	r3, [r3, #16]
 80017e0:	431a      	orrs	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	431a      	orrs	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	431a      	orrs	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	431a      	orrs	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a1b      	ldr	r3, [r3, #32]
 80017f8:	431a      	orrs	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	430a      	orrs	r2, r1
 8001800:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	0018      	movs	r0, r3
 8001806:	f000 fa8d 	bl	8001d24 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	689a      	ldr	r2, [r3, #8]
 800180e:	2380      	movs	r3, #128	; 0x80
 8001810:	01db      	lsls	r3, r3, #7
 8001812:	429a      	cmp	r2, r3
 8001814:	d102      	bne.n	800181c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685a      	ldr	r2, [r3, #4]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001824:	213f      	movs	r1, #63	; 0x3f
 8001826:	400a      	ands	r2, r1
 8001828:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001832:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d011      	beq.n	8001860 <HAL_DMA_Init+0xd8>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	2b04      	cmp	r3, #4
 8001842:	d80d      	bhi.n	8001860 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	0018      	movs	r0, r3
 8001848:	f000 fa98 	bl	8001d7c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	e008      	b.n	8001872 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2225      	movs	r2, #37	; 0x25
 800187c:	2101      	movs	r1, #1
 800187e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2224      	movs	r2, #36	; 0x24
 8001884:	2100      	movs	r1, #0
 8001886:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001888:	2300      	movs	r3, #0
}
 800188a:	0018      	movs	r0, r3
 800188c:	46bd      	mov	sp, r7
 800188e:	b002      	add	sp, #8
 8001890:	bd80      	pop	{r7, pc}
 8001892:	46c0      	nop			; (mov r8, r8)
 8001894:	bffdfff8 	.word	0xbffdfff8
 8001898:	ffff800f 	.word	0xffff800f

0800189c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
 80018a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018aa:	2317      	movs	r3, #23
 80018ac:	18fb      	adds	r3, r7, r3
 80018ae:	2200      	movs	r2, #0
 80018b0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2224      	movs	r2, #36	; 0x24
 80018b6:	5c9b      	ldrb	r3, [r3, r2]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d101      	bne.n	80018c0 <HAL_DMA_Start_IT+0x24>
 80018bc:	2302      	movs	r3, #2
 80018be:	e06f      	b.n	80019a0 <HAL_DMA_Start_IT+0x104>
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2224      	movs	r2, #36	; 0x24
 80018c4:	2101      	movs	r1, #1
 80018c6:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2225      	movs	r2, #37	; 0x25
 80018cc:	5c9b      	ldrb	r3, [r3, r2]
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d157      	bne.n	8001984 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2225      	movs	r2, #37	; 0x25
 80018d8:	2102      	movs	r1, #2
 80018da:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2200      	movs	r2, #0
 80018e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2101      	movs	r1, #1
 80018ee:	438a      	bics	r2, r1
 80018f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	68b9      	ldr	r1, [r7, #8]
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f000 f9d3 	bl	8001ca4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	2b00      	cmp	r3, #0
 8001904:	d008      	beq.n	8001918 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	210e      	movs	r1, #14
 8001912:	430a      	orrs	r2, r1
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	e00f      	b.n	8001938 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2104      	movs	r1, #4
 8001924:	438a      	bics	r2, r1
 8001926:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	210a      	movs	r1, #10
 8001934:	430a      	orrs	r2, r1
 8001936:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	2380      	movs	r3, #128	; 0x80
 8001940:	025b      	lsls	r3, r3, #9
 8001942:	4013      	ands	r3, r2
 8001944:	d008      	beq.n	8001958 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001950:	2180      	movs	r1, #128	; 0x80
 8001952:	0049      	lsls	r1, r1, #1
 8001954:	430a      	orrs	r2, r1
 8001956:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800195c:	2b00      	cmp	r3, #0
 800195e:	d008      	beq.n	8001972 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800196a:	2180      	movs	r1, #128	; 0x80
 800196c:	0049      	lsls	r1, r1, #1
 800196e:	430a      	orrs	r2, r1
 8001970:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2101      	movs	r1, #1
 800197e:	430a      	orrs	r2, r1
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	e00a      	b.n	800199a <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2280      	movs	r2, #128	; 0x80
 8001988:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2224      	movs	r2, #36	; 0x24
 800198e:	2100      	movs	r1, #0
 8001990:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8001992:	2317      	movs	r3, #23
 8001994:	18fb      	adds	r3, r7, r3
 8001996:	2201      	movs	r2, #1
 8001998:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800199a:	2317      	movs	r3, #23
 800199c:	18fb      	adds	r3, r7, r3
 800199e:	781b      	ldrb	r3, [r3, #0]
}
 80019a0:	0018      	movs	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	b006      	add	sp, #24
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e050      	b.n	8001a5c <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2225      	movs	r2, #37	; 0x25
 80019be:	5c9b      	ldrb	r3, [r3, r2]
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d008      	beq.n	80019d8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2204      	movs	r2, #4
 80019ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2224      	movs	r2, #36	; 0x24
 80019d0:	2100      	movs	r1, #0
 80019d2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e041      	b.n	8001a5c <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	210e      	movs	r1, #14
 80019e4:	438a      	bics	r2, r1
 80019e6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f2:	491c      	ldr	r1, [pc, #112]	; (8001a64 <HAL_DMA_Abort+0xbc>)
 80019f4:	400a      	ands	r2, r1
 80019f6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2101      	movs	r1, #1
 8001a04:	438a      	bics	r2, r1
 8001a06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8001a08:	4b17      	ldr	r3, [pc, #92]	; (8001a68 <HAL_DMA_Abort+0xc0>)
 8001a0a:	6859      	ldr	r1, [r3, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a10:	221c      	movs	r2, #28
 8001a12:	4013      	ands	r3, r2
 8001a14:	2201      	movs	r2, #1
 8001a16:	409a      	lsls	r2, r3
 8001a18:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <HAL_DMA_Abort+0xc0>)
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001a26:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d00c      	beq.n	8001a4a <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a3a:	490a      	ldr	r1, [pc, #40]	; (8001a64 <HAL_DMA_Abort+0xbc>)
 8001a3c:	400a      	ands	r2, r1
 8001a3e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001a48:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2225      	movs	r2, #37	; 0x25
 8001a4e:	2101      	movs	r1, #1
 8001a50:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2224      	movs	r2, #36	; 0x24
 8001a56:	2100      	movs	r1, #0
 8001a58:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	b002      	add	sp, #8
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	fffffeff 	.word	0xfffffeff
 8001a68:	40020000 	.word	0x40020000

08001a6c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a74:	210f      	movs	r1, #15
 8001a76:	187b      	adds	r3, r7, r1
 8001a78:	2200      	movs	r2, #0
 8001a7a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2225      	movs	r2, #37	; 0x25
 8001a80:	5c9b      	ldrb	r3, [r3, r2]
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d006      	beq.n	8001a96 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2204      	movs	r2, #4
 8001a8c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001a8e:	187b      	adds	r3, r7, r1
 8001a90:	2201      	movs	r2, #1
 8001a92:	701a      	strb	r2, [r3, #0]
 8001a94:	e049      	b.n	8001b2a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	210e      	movs	r1, #14
 8001aa2:	438a      	bics	r2, r1
 8001aa4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	438a      	bics	r2, r1
 8001ab4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac0:	491d      	ldr	r1, [pc, #116]	; (8001b38 <HAL_DMA_Abort_IT+0xcc>)
 8001ac2:	400a      	ands	r2, r1
 8001ac4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001ac6:	4b1d      	ldr	r3, [pc, #116]	; (8001b3c <HAL_DMA_Abort_IT+0xd0>)
 8001ac8:	6859      	ldr	r1, [r3, #4]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	221c      	movs	r2, #28
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	409a      	lsls	r2, r3
 8001ad6:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <HAL_DMA_Abort_IT+0xd0>)
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001ae4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d00c      	beq.n	8001b08 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001af8:	490f      	ldr	r1, [pc, #60]	; (8001b38 <HAL_DMA_Abort_IT+0xcc>)
 8001afa:	400a      	ands	r2, r1
 8001afc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001b06:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2225      	movs	r2, #37	; 0x25
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2224      	movs	r2, #36	; 0x24
 8001b14:	2100      	movs	r1, #0
 8001b16:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d004      	beq.n	8001b2a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	0010      	movs	r0, r2
 8001b28:	4798      	blx	r3
    }
  }
  return status;
 8001b2a:	230f      	movs	r3, #15
 8001b2c:	18fb      	adds	r3, r7, r3
 8001b2e:	781b      	ldrb	r3, [r3, #0]
}
 8001b30:	0018      	movs	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	b004      	add	sp, #16
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	fffffeff 	.word	0xfffffeff
 8001b3c:	40020000 	.word	0x40020000

08001b40 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001b48:	4b55      	ldr	r3, [pc, #340]	; (8001ca0 <HAL_DMA_IRQHandler+0x160>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	221c      	movs	r2, #28
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	2204      	movs	r2, #4
 8001b60:	409a      	lsls	r2, r3
 8001b62:	0013      	movs	r3, r2
 8001b64:	68fa      	ldr	r2, [r7, #12]
 8001b66:	4013      	ands	r3, r2
 8001b68:	d027      	beq.n	8001bba <HAL_DMA_IRQHandler+0x7a>
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	2204      	movs	r2, #4
 8001b6e:	4013      	ands	r3, r2
 8001b70:	d023      	beq.n	8001bba <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2220      	movs	r2, #32
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	d107      	bne.n	8001b8e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2104      	movs	r1, #4
 8001b8a:	438a      	bics	r2, r1
 8001b8c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8001b8e:	4b44      	ldr	r3, [pc, #272]	; (8001ca0 <HAL_DMA_IRQHandler+0x160>)
 8001b90:	6859      	ldr	r1, [r3, #4]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	221c      	movs	r2, #28
 8001b98:	4013      	ands	r3, r2
 8001b9a:	2204      	movs	r2, #4
 8001b9c:	409a      	lsls	r2, r3
 8001b9e:	4b40      	ldr	r3, [pc, #256]	; (8001ca0 <HAL_DMA_IRQHandler+0x160>)
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d100      	bne.n	8001bae <HAL_DMA_IRQHandler+0x6e>
 8001bac:	e073      	b.n	8001c96 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	0010      	movs	r0, r2
 8001bb6:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001bb8:	e06d      	b.n	8001c96 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	221c      	movs	r2, #28
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	409a      	lsls	r2, r3
 8001bc6:	0013      	movs	r3, r2
 8001bc8:	68fa      	ldr	r2, [r7, #12]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	d02e      	beq.n	8001c2c <HAL_DMA_IRQHandler+0xec>
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	d02a      	beq.n	8001c2c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2220      	movs	r2, #32
 8001bde:	4013      	ands	r3, r2
 8001be0:	d10b      	bne.n	8001bfa <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	210a      	movs	r1, #10
 8001bee:	438a      	bics	r2, r1
 8001bf0:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2225      	movs	r2, #37	; 0x25
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001bfa:	4b29      	ldr	r3, [pc, #164]	; (8001ca0 <HAL_DMA_IRQHandler+0x160>)
 8001bfc:	6859      	ldr	r1, [r3, #4]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	221c      	movs	r2, #28
 8001c04:	4013      	ands	r3, r2
 8001c06:	2202      	movs	r2, #2
 8001c08:	409a      	lsls	r2, r3
 8001c0a:	4b25      	ldr	r3, [pc, #148]	; (8001ca0 <HAL_DMA_IRQHandler+0x160>)
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2224      	movs	r2, #36	; 0x24
 8001c14:	2100      	movs	r1, #0
 8001c16:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d03a      	beq.n	8001c96 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	0010      	movs	r0, r2
 8001c28:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001c2a:	e034      	b.n	8001c96 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c30:	221c      	movs	r2, #28
 8001c32:	4013      	ands	r3, r2
 8001c34:	2208      	movs	r2, #8
 8001c36:	409a      	lsls	r2, r3
 8001c38:	0013      	movs	r3, r2
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	d02b      	beq.n	8001c98 <HAL_DMA_IRQHandler+0x158>
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	2208      	movs	r2, #8
 8001c44:	4013      	ands	r3, r2
 8001c46:	d027      	beq.n	8001c98 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	210e      	movs	r1, #14
 8001c54:	438a      	bics	r2, r1
 8001c56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001c58:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <HAL_DMA_IRQHandler+0x160>)
 8001c5a:	6859      	ldr	r1, [r3, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c60:	221c      	movs	r2, #28
 8001c62:	4013      	ands	r3, r2
 8001c64:	2201      	movs	r2, #1
 8001c66:	409a      	lsls	r2, r3
 8001c68:	4b0d      	ldr	r3, [pc, #52]	; (8001ca0 <HAL_DMA_IRQHandler+0x160>)
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2201      	movs	r2, #1
 8001c72:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2225      	movs	r2, #37	; 0x25
 8001c78:	2101      	movs	r1, #1
 8001c7a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2224      	movs	r2, #36	; 0x24
 8001c80:	2100      	movs	r1, #0
 8001c82:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d005      	beq.n	8001c98 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	0010      	movs	r0, r2
 8001c94:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	46c0      	nop			; (mov r8, r8)
}
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	b004      	add	sp, #16
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40020000 	.word	0x40020000

08001ca4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
 8001cb0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001cba:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d004      	beq.n	8001cce <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001ccc:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001cce:	4b14      	ldr	r3, [pc, #80]	; (8001d20 <DMA_SetConfig+0x7c>)
 8001cd0:	6859      	ldr	r1, [r3, #4]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	221c      	movs	r2, #28
 8001cd8:	4013      	ands	r3, r2
 8001cda:	2201      	movs	r2, #1
 8001cdc:	409a      	lsls	r2, r3
 8001cde:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <DMA_SetConfig+0x7c>)
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	2b10      	cmp	r3, #16
 8001cf2:	d108      	bne.n	8001d06 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68ba      	ldr	r2, [r7, #8]
 8001d02:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001d04:	e007      	b.n	8001d16 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68ba      	ldr	r2, [r7, #8]
 8001d0c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	60da      	str	r2, [r3, #12]
}
 8001d16:	46c0      	nop			; (mov r8, r8)
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	b004      	add	sp, #16
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	46c0      	nop			; (mov r8, r8)
 8001d20:	40020000 	.word	0x40020000

08001d24 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d30:	089b      	lsrs	r3, r3, #2
 8001d32:	4a10      	ldr	r2, [pc, #64]	; (8001d74 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001d34:	4694      	mov	ip, r2
 8001d36:	4463      	add	r3, ip
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	001a      	movs	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	001a      	movs	r2, r3
 8001d46:	23ff      	movs	r3, #255	; 0xff
 8001d48:	4013      	ands	r3, r2
 8001d4a:	3b08      	subs	r3, #8
 8001d4c:	2114      	movs	r1, #20
 8001d4e:	0018      	movs	r0, r3
 8001d50:	f7fe f9ea 	bl	8000128 <__udivsi3>
 8001d54:	0003      	movs	r3, r0
 8001d56:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a07      	ldr	r2, [pc, #28]	; (8001d78 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001d5c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	221f      	movs	r2, #31
 8001d62:	4013      	ands	r3, r2
 8001d64:	2201      	movs	r2, #1
 8001d66:	409a      	lsls	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001d6c:	46c0      	nop			; (mov r8, r8)
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	b004      	add	sp, #16
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	10008200 	.word	0x10008200
 8001d78:	40020880 	.word	0x40020880

08001d7c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	223f      	movs	r2, #63	; 0x3f
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	4a0a      	ldr	r2, [pc, #40]	; (8001dbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001d92:	4694      	mov	ip, r2
 8001d94:	4463      	add	r3, ip
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	001a      	movs	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a07      	ldr	r2, [pc, #28]	; (8001dc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001da2:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	3b01      	subs	r3, #1
 8001da8:	2203      	movs	r2, #3
 8001daa:	4013      	ands	r3, r2
 8001dac:	2201      	movs	r2, #1
 8001dae:	409a      	lsls	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001db4:	46c0      	nop			; (mov r8, r8)
 8001db6:	46bd      	mov	sp, r7
 8001db8:	b004      	add	sp, #16
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	1000823f 	.word	0x1000823f
 8001dc0:	40020940 	.word	0x40020940

08001dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dd2:	e147      	b.n	8002064 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2101      	movs	r1, #1
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	4091      	lsls	r1, r2
 8001dde:	000a      	movs	r2, r1
 8001de0:	4013      	ands	r3, r2
 8001de2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d100      	bne.n	8001dec <HAL_GPIO_Init+0x28>
 8001dea:	e138      	b.n	800205e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2203      	movs	r2, #3
 8001df2:	4013      	ands	r3, r2
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d005      	beq.n	8001e04 <HAL_GPIO_Init+0x40>
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2203      	movs	r2, #3
 8001dfe:	4013      	ands	r3, r2
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d130      	bne.n	8001e66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	2203      	movs	r2, #3
 8001e10:	409a      	lsls	r2, r3
 8001e12:	0013      	movs	r3, r2
 8001e14:	43da      	mvns	r2, r3
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	68da      	ldr	r2, [r3, #12]
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	409a      	lsls	r2, r3
 8001e26:	0013      	movs	r3, r2
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	409a      	lsls	r2, r3
 8001e40:	0013      	movs	r3, r2
 8001e42:	43da      	mvns	r2, r3
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	4013      	ands	r3, r2
 8001e48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	091b      	lsrs	r3, r3, #4
 8001e50:	2201      	movs	r2, #1
 8001e52:	401a      	ands	r2, r3
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	409a      	lsls	r2, r3
 8001e58:	0013      	movs	r3, r2
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2203      	movs	r2, #3
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	2b03      	cmp	r3, #3
 8001e70:	d017      	beq.n	8001ea2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	2203      	movs	r2, #3
 8001e7e:	409a      	lsls	r2, r3
 8001e80:	0013      	movs	r3, r2
 8001e82:	43da      	mvns	r2, r3
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	4013      	ands	r3, r2
 8001e88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	689a      	ldr	r2, [r3, #8]
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	409a      	lsls	r2, r3
 8001e94:	0013      	movs	r3, r2
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2203      	movs	r2, #3
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d123      	bne.n	8001ef6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	08da      	lsrs	r2, r3, #3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	3208      	adds	r2, #8
 8001eb6:	0092      	lsls	r2, r2, #2
 8001eb8:	58d3      	ldr	r3, [r2, r3]
 8001eba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	2207      	movs	r2, #7
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	220f      	movs	r2, #15
 8001ec6:	409a      	lsls	r2, r3
 8001ec8:	0013      	movs	r3, r2
 8001eca:	43da      	mvns	r2, r3
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	691a      	ldr	r2, [r3, #16]
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	2107      	movs	r1, #7
 8001eda:	400b      	ands	r3, r1
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	409a      	lsls	r2, r3
 8001ee0:	0013      	movs	r3, r2
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	08da      	lsrs	r2, r3, #3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3208      	adds	r2, #8
 8001ef0:	0092      	lsls	r2, r2, #2
 8001ef2:	6939      	ldr	r1, [r7, #16]
 8001ef4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	2203      	movs	r2, #3
 8001f02:	409a      	lsls	r2, r3
 8001f04:	0013      	movs	r3, r2
 8001f06:	43da      	mvns	r2, r3
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2203      	movs	r2, #3
 8001f14:	401a      	ands	r2, r3
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	409a      	lsls	r2, r3
 8001f1c:	0013      	movs	r3, r2
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	23c0      	movs	r3, #192	; 0xc0
 8001f30:	029b      	lsls	r3, r3, #10
 8001f32:	4013      	ands	r3, r2
 8001f34:	d100      	bne.n	8001f38 <HAL_GPIO_Init+0x174>
 8001f36:	e092      	b.n	800205e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001f38:	4a50      	ldr	r2, [pc, #320]	; (800207c <HAL_GPIO_Init+0x2b8>)
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	089b      	lsrs	r3, r3, #2
 8001f3e:	3318      	adds	r3, #24
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	589b      	ldr	r3, [r3, r2]
 8001f44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	2203      	movs	r2, #3
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	220f      	movs	r2, #15
 8001f50:	409a      	lsls	r2, r3
 8001f52:	0013      	movs	r3, r2
 8001f54:	43da      	mvns	r2, r3
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	23a0      	movs	r3, #160	; 0xa0
 8001f60:	05db      	lsls	r3, r3, #23
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d013      	beq.n	8001f8e <HAL_GPIO_Init+0x1ca>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a45      	ldr	r2, [pc, #276]	; (8002080 <HAL_GPIO_Init+0x2bc>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d00d      	beq.n	8001f8a <HAL_GPIO_Init+0x1c6>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a44      	ldr	r2, [pc, #272]	; (8002084 <HAL_GPIO_Init+0x2c0>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d007      	beq.n	8001f86 <HAL_GPIO_Init+0x1c2>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a43      	ldr	r2, [pc, #268]	; (8002088 <HAL_GPIO_Init+0x2c4>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d101      	bne.n	8001f82 <HAL_GPIO_Init+0x1be>
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e006      	b.n	8001f90 <HAL_GPIO_Init+0x1cc>
 8001f82:	2305      	movs	r3, #5
 8001f84:	e004      	b.n	8001f90 <HAL_GPIO_Init+0x1cc>
 8001f86:	2302      	movs	r3, #2
 8001f88:	e002      	b.n	8001f90 <HAL_GPIO_Init+0x1cc>
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e000      	b.n	8001f90 <HAL_GPIO_Init+0x1cc>
 8001f8e:	2300      	movs	r3, #0
 8001f90:	697a      	ldr	r2, [r7, #20]
 8001f92:	2103      	movs	r1, #3
 8001f94:	400a      	ands	r2, r1
 8001f96:	00d2      	lsls	r2, r2, #3
 8001f98:	4093      	lsls	r3, r2
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001fa0:	4936      	ldr	r1, [pc, #216]	; (800207c <HAL_GPIO_Init+0x2b8>)
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	089b      	lsrs	r3, r3, #2
 8001fa6:	3318      	adds	r3, #24
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fae:	4b33      	ldr	r3, [pc, #204]	; (800207c <HAL_GPIO_Init+0x2b8>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	43da      	mvns	r2, r3
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	2380      	movs	r3, #128	; 0x80
 8001fc4:	035b      	lsls	r3, r3, #13
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d003      	beq.n	8001fd2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fd2:	4b2a      	ldr	r3, [pc, #168]	; (800207c <HAL_GPIO_Init+0x2b8>)
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001fd8:	4b28      	ldr	r3, [pc, #160]	; (800207c <HAL_GPIO_Init+0x2b8>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	43da      	mvns	r2, r3
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	2380      	movs	r3, #128	; 0x80
 8001fee:	039b      	lsls	r3, r3, #14
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	d003      	beq.n	8001ffc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ffc:	4b1f      	ldr	r3, [pc, #124]	; (800207c <HAL_GPIO_Init+0x2b8>)
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002002:	4a1e      	ldr	r2, [pc, #120]	; (800207c <HAL_GPIO_Init+0x2b8>)
 8002004:	2384      	movs	r3, #132	; 0x84
 8002006:	58d3      	ldr	r3, [r2, r3]
 8002008:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	43da      	mvns	r2, r3
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	4013      	ands	r3, r2
 8002012:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	2380      	movs	r3, #128	; 0x80
 800201a:	029b      	lsls	r3, r3, #10
 800201c:	4013      	ands	r3, r2
 800201e:	d003      	beq.n	8002028 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	4313      	orrs	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002028:	4914      	ldr	r1, [pc, #80]	; (800207c <HAL_GPIO_Init+0x2b8>)
 800202a:	2284      	movs	r2, #132	; 0x84
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002030:	4a12      	ldr	r2, [pc, #72]	; (800207c <HAL_GPIO_Init+0x2b8>)
 8002032:	2380      	movs	r3, #128	; 0x80
 8002034:	58d3      	ldr	r3, [r2, r3]
 8002036:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	43da      	mvns	r2, r3
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	4013      	ands	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	2380      	movs	r3, #128	; 0x80
 8002048:	025b      	lsls	r3, r3, #9
 800204a:	4013      	ands	r3, r2
 800204c:	d003      	beq.n	8002056 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4313      	orrs	r3, r2
 8002054:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002056:	4909      	ldr	r1, [pc, #36]	; (800207c <HAL_GPIO_Init+0x2b8>)
 8002058:	2280      	movs	r2, #128	; 0x80
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	3301      	adds	r3, #1
 8002062:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	40da      	lsrs	r2, r3
 800206c:	1e13      	subs	r3, r2, #0
 800206e:	d000      	beq.n	8002072 <HAL_GPIO_Init+0x2ae>
 8002070:	e6b0      	b.n	8001dd4 <HAL_GPIO_Init+0x10>
  }
}
 8002072:	46c0      	nop			; (mov r8, r8)
 8002074:	46c0      	nop			; (mov r8, r8)
 8002076:	46bd      	mov	sp, r7
 8002078:	b006      	add	sp, #24
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40021800 	.word	0x40021800
 8002080:	50000400 	.word	0x50000400
 8002084:	50000800 	.word	0x50000800
 8002088:	50000c00 	.word	0x50000c00

0800208c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	0008      	movs	r0, r1
 8002096:	0011      	movs	r1, r2
 8002098:	1cbb      	adds	r3, r7, #2
 800209a:	1c02      	adds	r2, r0, #0
 800209c:	801a      	strh	r2, [r3, #0]
 800209e:	1c7b      	adds	r3, r7, #1
 80020a0:	1c0a      	adds	r2, r1, #0
 80020a2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020a4:	1c7b      	adds	r3, r7, #1
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d004      	beq.n	80020b6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020ac:	1cbb      	adds	r3, r7, #2
 80020ae:	881a      	ldrh	r2, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020b4:	e003      	b.n	80020be <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020b6:	1cbb      	adds	r3, r7, #2
 80020b8:	881a      	ldrh	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020be:	46c0      	nop			; (mov r8, r8)
 80020c0:	46bd      	mov	sp, r7
 80020c2:	b002      	add	sp, #8
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020cc:	4b04      	ldr	r3, [pc, #16]	; (80020e0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	4b03      	ldr	r3, [pc, #12]	; (80020e0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80020d2:	2180      	movs	r1, #128	; 0x80
 80020d4:	0049      	lsls	r1, r1, #1
 80020d6:	430a      	orrs	r2, r1
 80020d8:	601a      	str	r2, [r3, #0]
}
 80020da:	46c0      	nop			; (mov r8, r8)
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40007000 	.word	0x40007000

080020e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80020ec:	4b19      	ldr	r3, [pc, #100]	; (8002154 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a19      	ldr	r2, [pc, #100]	; (8002158 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80020f2:	4013      	ands	r3, r2
 80020f4:	0019      	movs	r1, r3
 80020f6:	4b17      	ldr	r3, [pc, #92]	; (8002154 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	430a      	orrs	r2, r1
 80020fc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	2380      	movs	r3, #128	; 0x80
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	429a      	cmp	r2, r3
 8002106:	d11f      	bne.n	8002148 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002108:	4b14      	ldr	r3, [pc, #80]	; (800215c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	0013      	movs	r3, r2
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	189b      	adds	r3, r3, r2
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	4912      	ldr	r1, [pc, #72]	; (8002160 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002116:	0018      	movs	r0, r3
 8002118:	f7fe f806 	bl	8000128 <__udivsi3>
 800211c:	0003      	movs	r3, r0
 800211e:	3301      	adds	r3, #1
 8002120:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002122:	e008      	b.n	8002136 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	3b01      	subs	r3, #1
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	e001      	b.n	8002136 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e009      	b.n	800214a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002136:	4b07      	ldr	r3, [pc, #28]	; (8002154 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002138:	695a      	ldr	r2, [r3, #20]
 800213a:	2380      	movs	r3, #128	; 0x80
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	401a      	ands	r2, r3
 8002140:	2380      	movs	r3, #128	; 0x80
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	429a      	cmp	r2, r3
 8002146:	d0ed      	beq.n	8002124 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	0018      	movs	r0, r3
 800214c:	46bd      	mov	sp, r7
 800214e:	b004      	add	sp, #16
 8002150:	bd80      	pop	{r7, pc}
 8002152:	46c0      	nop			; (mov r8, r8)
 8002154:	40007000 	.word	0x40007000
 8002158:	fffff9ff 	.word	0xfffff9ff
 800215c:	2000008c 	.word	0x2000008c
 8002160:	000f4240 	.word	0x000f4240

08002164 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002168:	4b03      	ldr	r3, [pc, #12]	; (8002178 <LL_RCC_GetAPB1Prescaler+0x14>)
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	23e0      	movs	r3, #224	; 0xe0
 800216e:	01db      	lsls	r3, r3, #7
 8002170:	4013      	ands	r3, r2
}
 8002172:	0018      	movs	r0, r3
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40021000 	.word	0x40021000

0800217c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b088      	sub	sp, #32
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e2fe      	b.n	800278c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2201      	movs	r2, #1
 8002194:	4013      	ands	r3, r2
 8002196:	d100      	bne.n	800219a <HAL_RCC_OscConfig+0x1e>
 8002198:	e07c      	b.n	8002294 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800219a:	4bc3      	ldr	r3, [pc, #780]	; (80024a8 <HAL_RCC_OscConfig+0x32c>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	2238      	movs	r2, #56	; 0x38
 80021a0:	4013      	ands	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021a4:	4bc0      	ldr	r3, [pc, #768]	; (80024a8 <HAL_RCC_OscConfig+0x32c>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	2203      	movs	r2, #3
 80021aa:	4013      	ands	r3, r2
 80021ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	2b10      	cmp	r3, #16
 80021b2:	d102      	bne.n	80021ba <HAL_RCC_OscConfig+0x3e>
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	2b03      	cmp	r3, #3
 80021b8:	d002      	beq.n	80021c0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	2b08      	cmp	r3, #8
 80021be:	d10b      	bne.n	80021d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c0:	4bb9      	ldr	r3, [pc, #740]	; (80024a8 <HAL_RCC_OscConfig+0x32c>)
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	2380      	movs	r3, #128	; 0x80
 80021c6:	029b      	lsls	r3, r3, #10
 80021c8:	4013      	ands	r3, r2
 80021ca:	d062      	beq.n	8002292 <HAL_RCC_OscConfig+0x116>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d15e      	bne.n	8002292 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e2d9      	b.n	800278c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	2380      	movs	r3, #128	; 0x80
 80021de:	025b      	lsls	r3, r3, #9
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d107      	bne.n	80021f4 <HAL_RCC_OscConfig+0x78>
 80021e4:	4bb0      	ldr	r3, [pc, #704]	; (80024a8 <HAL_RCC_OscConfig+0x32c>)
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	4baf      	ldr	r3, [pc, #700]	; (80024a8 <HAL_RCC_OscConfig+0x32c>)
 80021ea:	2180      	movs	r1, #128	; 0x80
 80021ec:	0249      	lsls	r1, r1, #9
 80021ee:	430a      	orrs	r2, r1
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	e020      	b.n	8002236 <HAL_RCC_OscConfig+0xba>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	23a0      	movs	r3, #160	; 0xa0
 80021fa:	02db      	lsls	r3, r3, #11
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d10e      	bne.n	800221e <HAL_RCC_OscConfig+0xa2>
 8002200:	4ba9      	ldr	r3, [pc, #676]	; (80024a8 <HAL_RCC_OscConfig+0x32c>)
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	4ba8      	ldr	r3, [pc, #672]	; (80024a8 <HAL_RCC_OscConfig+0x32c>)
 8002206:	2180      	movs	r1, #128	; 0x80
 8002208:	02c9      	lsls	r1, r1, #11
 800220a:	430a      	orrs	r2, r1
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	4ba6      	ldr	r3, [pc, #664]	; (80024a8 <HAL_RCC_OscConfig+0x32c>)
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	4ba5      	ldr	r3, [pc, #660]	; (80024a8 <HAL_RCC_OscConfig+0x32c>)
 8002214:	2180      	movs	r1, #128	; 0x80
 8002216:	0249      	lsls	r1, r1, #9
 8002218:	430a      	orrs	r2, r1
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	e00b      	b.n	8002236 <HAL_RCC_OscConfig+0xba>
 800221e:	4ba2      	ldr	r3, [pc, #648]	; (80024a8 <HAL_RCC_OscConfig+0x32c>)
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	4ba1      	ldr	r3, [pc, #644]	; (80024a8 <HAL_RCC_OscConfig+0x32c>)
 8002224:	49a1      	ldr	r1, [pc, #644]	; (80024ac <HAL_RCC_OscConfig+0x330>)
 8002226:	400a      	ands	r2, r1
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	4b9f      	ldr	r3, [pc, #636]	; (80024a8 <HAL_RCC_OscConfig+0x32c>)
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	4b9e      	ldr	r3, [pc, #632]	; (80024a8 <HAL_RCC_OscConfig+0x32c>)
 8002230:	499f      	ldr	r1, [pc, #636]	; (80024b0 <HAL_RCC_OscConfig+0x334>)
 8002232:	400a      	ands	r2, r1
 8002234:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d014      	beq.n	8002268 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223e:	f7ff f9bb 	bl	80015b8 <HAL_GetTick>
 8002242:	0003      	movs	r3, r0
 8002244:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002248:	f7ff f9b6 	bl	80015b8 <HAL_GetTick>
 800224c:	0002      	movs	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b64      	cmp	r3, #100	; 0x64
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e298      	b.n	800278c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800225a:	4b93      	ldr	r3, [pc, #588]	; (80024a8 <HAL_RCC_OscConfig+0x32c>)
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	2380      	movs	r3, #128	; 0x80
 8002260:	029b      	lsls	r3, r3, #10
 8002262:	4013      	ands	r3, r2
 8002264:	d0f0      	beq.n	8002248 <HAL_RCC_OscConfig+0xcc>
 8002266:	e015      	b.n	8002294 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002268:	f7ff f9a6 	bl	80015b8 <HAL_GetTick>
 800226c:	0003      	movs	r3, r0
 800226e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002270:	e008      	b.n	8002284 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002272:	f7ff f9a1 	bl	80015b8 <HAL_GetTick>
 8002276:	0002      	movs	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b64      	cmp	r3, #100	; 0x64
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e283      	b.n	800278c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002284:	4b88      	ldr	r3, [pc, #544]	; (80024a8 <HAL_RCC_OscConfig+0x32c>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	2380      	movs	r3, #128	; 0x80
 800228a:	029b      	lsls	r3, r3, #10
 800228c:	4013      	ands	r3, r2
 800228e:	d1f0      	bne.n	8002272 <HAL_RCC_OscConfig+0xf6>
 8002290:	e000      	b.n	8002294 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002292:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2202      	movs	r2, #2
 800229a:	4013      	ands	r3, r2
 800229c:	d100      	bne.n	80022a0 <HAL_RCC_OscConfig+0x124>
 800229e:	e099      	b.n	80023d4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022a0:	4b81      	ldr	r3, [pc, #516]	; (80024a8 <HAL_RCC_OscConfig+0x32c>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	2238      	movs	r2, #56	; 0x38
 80022a6:	4013      	ands	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022aa:	4b7f      	ldr	r3, [pc, #508]	; (80024a8 <HAL_RCC_OscConfig+0x32c>)
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	2203      	movs	r2, #3
 80022b0:	4013      	ands	r3, r2
 80022b2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	2b10      	cmp	r3, #16
 80022b8:	d102      	bne.n	80022c0 <HAL_RCC_OscConfig+0x144>
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d002      	beq.n	80022c6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d135      	bne.n	8002332 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022c6:	4b78      	ldr	r3, [pc, #480]	; (80024a8 <HAL_RCC_OscConfig+0x32c>)
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	2380      	movs	r3, #128	; 0x80
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	4013      	ands	r3, r2
 80022d0:	d005      	beq.n	80022de <HAL_RCC_OscConfig+0x162>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e256      	b.n	800278c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022de:	4b72      	ldr	r3, [pc, #456]	; (80024a8 <HAL_RCC_OscConfig+0x32c>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	4a74      	ldr	r2, [pc, #464]	; (80024b4 <HAL_RCC_OscConfig+0x338>)
 80022e4:	4013      	ands	r3, r2
 80022e6:	0019      	movs	r1, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	021a      	lsls	r2, r3, #8
 80022ee:	4b6e      	ldr	r3, [pc, #440]	; (80024a8 <HAL_RCC_OscConfig+0x32c>)
 80022f0:	430a      	orrs	r2, r1
 80022f2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d112      	bne.n	8002320 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80022fa:	4b6b      	ldr	r3, [pc, #428]	; (80024a8 <HAL_RCC_OscConfig+0x32c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a6e      	ldr	r2, [pc, #440]	; (80024b8 <HAL_RCC_OscConfig+0x33c>)
 8002300:	4013      	ands	r3, r2
 8002302:	0019      	movs	r1, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	691a      	ldr	r2, [r3, #16]
 8002308:	4b67      	ldr	r3, [pc, #412]	; (80024a8 <HAL_RCC_OscConfig+0x32c>)
 800230a:	430a      	orrs	r2, r1
 800230c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800230e:	4b66      	ldr	r3, [pc, #408]	; (80024a8 <HAL_RCC_OscConfig+0x32c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	0adb      	lsrs	r3, r3, #11
 8002314:	2207      	movs	r2, #7
 8002316:	4013      	ands	r3, r2
 8002318:	4a68      	ldr	r2, [pc, #416]	; (80024bc <HAL_RCC_OscConfig+0x340>)
 800231a:	40da      	lsrs	r2, r3
 800231c:	4b68      	ldr	r3, [pc, #416]	; (80024c0 <HAL_RCC_OscConfig+0x344>)
 800231e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002320:	4b68      	ldr	r3, [pc, #416]	; (80024c4 <HAL_RCC_OscConfig+0x348>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	0018      	movs	r0, r3
 8002326:	f7ff f8eb 	bl	8001500 <HAL_InitTick>
 800232a:	1e03      	subs	r3, r0, #0
 800232c:	d051      	beq.n	80023d2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e22c      	b.n	800278c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d030      	beq.n	800239c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800233a:	4b5b      	ldr	r3, [pc, #364]	; (80024a8 <HAL_RCC_OscConfig+0x32c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a5e      	ldr	r2, [pc, #376]	; (80024b8 <HAL_RCC_OscConfig+0x33c>)
 8002340:	4013      	ands	r3, r2
 8002342:	0019      	movs	r1, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	691a      	ldr	r2, [r3, #16]
 8002348:	4b57      	ldr	r3, [pc, #348]	; (80024a8 <HAL_RCC_OscConfig+0x32c>)
 800234a:	430a      	orrs	r2, r1
 800234c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800234e:	4b56      	ldr	r3, [pc, #344]	; (80024a8 <HAL_RCC_OscConfig+0x32c>)
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	4b55      	ldr	r3, [pc, #340]	; (80024a8 <HAL_RCC_OscConfig+0x32c>)
 8002354:	2180      	movs	r1, #128	; 0x80
 8002356:	0049      	lsls	r1, r1, #1
 8002358:	430a      	orrs	r2, r1
 800235a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235c:	f7ff f92c 	bl	80015b8 <HAL_GetTick>
 8002360:	0003      	movs	r3, r0
 8002362:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002364:	e008      	b.n	8002378 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002366:	f7ff f927 	bl	80015b8 <HAL_GetTick>
 800236a:	0002      	movs	r2, r0
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e209      	b.n	800278c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002378:	4b4b      	ldr	r3, [pc, #300]	; (80024a8 <HAL_RCC_OscConfig+0x32c>)
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	2380      	movs	r3, #128	; 0x80
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	4013      	ands	r3, r2
 8002382:	d0f0      	beq.n	8002366 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002384:	4b48      	ldr	r3, [pc, #288]	; (80024a8 <HAL_RCC_OscConfig+0x32c>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	4a4a      	ldr	r2, [pc, #296]	; (80024b4 <HAL_RCC_OscConfig+0x338>)
 800238a:	4013      	ands	r3, r2
 800238c:	0019      	movs	r1, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	021a      	lsls	r2, r3, #8
 8002394:	4b44      	ldr	r3, [pc, #272]	; (80024a8 <HAL_RCC_OscConfig+0x32c>)
 8002396:	430a      	orrs	r2, r1
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	e01b      	b.n	80023d4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800239c:	4b42      	ldr	r3, [pc, #264]	; (80024a8 <HAL_RCC_OscConfig+0x32c>)
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	4b41      	ldr	r3, [pc, #260]	; (80024a8 <HAL_RCC_OscConfig+0x32c>)
 80023a2:	4949      	ldr	r1, [pc, #292]	; (80024c8 <HAL_RCC_OscConfig+0x34c>)
 80023a4:	400a      	ands	r2, r1
 80023a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a8:	f7ff f906 	bl	80015b8 <HAL_GetTick>
 80023ac:	0003      	movs	r3, r0
 80023ae:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023b2:	f7ff f901 	bl	80015b8 <HAL_GetTick>
 80023b6:	0002      	movs	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e1e3      	b.n	800278c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023c4:	4b38      	ldr	r3, [pc, #224]	; (80024a8 <HAL_RCC_OscConfig+0x32c>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	2380      	movs	r3, #128	; 0x80
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	4013      	ands	r3, r2
 80023ce:	d1f0      	bne.n	80023b2 <HAL_RCC_OscConfig+0x236>
 80023d0:	e000      	b.n	80023d4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023d2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2208      	movs	r2, #8
 80023da:	4013      	ands	r3, r2
 80023dc:	d047      	beq.n	800246e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80023de:	4b32      	ldr	r3, [pc, #200]	; (80024a8 <HAL_RCC_OscConfig+0x32c>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	2238      	movs	r2, #56	; 0x38
 80023e4:	4013      	ands	r3, r2
 80023e6:	2b18      	cmp	r3, #24
 80023e8:	d10a      	bne.n	8002400 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80023ea:	4b2f      	ldr	r3, [pc, #188]	; (80024a8 <HAL_RCC_OscConfig+0x32c>)
 80023ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ee:	2202      	movs	r2, #2
 80023f0:	4013      	ands	r3, r2
 80023f2:	d03c      	beq.n	800246e <HAL_RCC_OscConfig+0x2f2>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d138      	bne.n	800246e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e1c5      	b.n	800278c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d019      	beq.n	800243c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002408:	4b27      	ldr	r3, [pc, #156]	; (80024a8 <HAL_RCC_OscConfig+0x32c>)
 800240a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800240c:	4b26      	ldr	r3, [pc, #152]	; (80024a8 <HAL_RCC_OscConfig+0x32c>)
 800240e:	2101      	movs	r1, #1
 8002410:	430a      	orrs	r2, r1
 8002412:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002414:	f7ff f8d0 	bl	80015b8 <HAL_GetTick>
 8002418:	0003      	movs	r3, r0
 800241a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800241c:	e008      	b.n	8002430 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800241e:	f7ff f8cb 	bl	80015b8 <HAL_GetTick>
 8002422:	0002      	movs	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e1ad      	b.n	800278c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002430:	4b1d      	ldr	r3, [pc, #116]	; (80024a8 <HAL_RCC_OscConfig+0x32c>)
 8002432:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002434:	2202      	movs	r2, #2
 8002436:	4013      	ands	r3, r2
 8002438:	d0f1      	beq.n	800241e <HAL_RCC_OscConfig+0x2a2>
 800243a:	e018      	b.n	800246e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800243c:	4b1a      	ldr	r3, [pc, #104]	; (80024a8 <HAL_RCC_OscConfig+0x32c>)
 800243e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002440:	4b19      	ldr	r3, [pc, #100]	; (80024a8 <HAL_RCC_OscConfig+0x32c>)
 8002442:	2101      	movs	r1, #1
 8002444:	438a      	bics	r2, r1
 8002446:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002448:	f7ff f8b6 	bl	80015b8 <HAL_GetTick>
 800244c:	0003      	movs	r3, r0
 800244e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002452:	f7ff f8b1 	bl	80015b8 <HAL_GetTick>
 8002456:	0002      	movs	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e193      	b.n	800278c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002464:	4b10      	ldr	r3, [pc, #64]	; (80024a8 <HAL_RCC_OscConfig+0x32c>)
 8002466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002468:	2202      	movs	r2, #2
 800246a:	4013      	ands	r3, r2
 800246c:	d1f1      	bne.n	8002452 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2204      	movs	r2, #4
 8002474:	4013      	ands	r3, r2
 8002476:	d100      	bne.n	800247a <HAL_RCC_OscConfig+0x2fe>
 8002478:	e0c6      	b.n	8002608 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800247a:	231f      	movs	r3, #31
 800247c:	18fb      	adds	r3, r7, r3
 800247e:	2200      	movs	r2, #0
 8002480:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002482:	4b09      	ldr	r3, [pc, #36]	; (80024a8 <HAL_RCC_OscConfig+0x32c>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	2238      	movs	r2, #56	; 0x38
 8002488:	4013      	ands	r3, r2
 800248a:	2b20      	cmp	r3, #32
 800248c:	d11e      	bne.n	80024cc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800248e:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <HAL_RCC_OscConfig+0x32c>)
 8002490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002492:	2202      	movs	r2, #2
 8002494:	4013      	ands	r3, r2
 8002496:	d100      	bne.n	800249a <HAL_RCC_OscConfig+0x31e>
 8002498:	e0b6      	b.n	8002608 <HAL_RCC_OscConfig+0x48c>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d000      	beq.n	80024a4 <HAL_RCC_OscConfig+0x328>
 80024a2:	e0b1      	b.n	8002608 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e171      	b.n	800278c <HAL_RCC_OscConfig+0x610>
 80024a8:	40021000 	.word	0x40021000
 80024ac:	fffeffff 	.word	0xfffeffff
 80024b0:	fffbffff 	.word	0xfffbffff
 80024b4:	ffff80ff 	.word	0xffff80ff
 80024b8:	ffffc7ff 	.word	0xffffc7ff
 80024bc:	00f42400 	.word	0x00f42400
 80024c0:	2000008c 	.word	0x2000008c
 80024c4:	20000090 	.word	0x20000090
 80024c8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024cc:	4bb1      	ldr	r3, [pc, #708]	; (8002794 <HAL_RCC_OscConfig+0x618>)
 80024ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024d0:	2380      	movs	r3, #128	; 0x80
 80024d2:	055b      	lsls	r3, r3, #21
 80024d4:	4013      	ands	r3, r2
 80024d6:	d101      	bne.n	80024dc <HAL_RCC_OscConfig+0x360>
 80024d8:	2301      	movs	r3, #1
 80024da:	e000      	b.n	80024de <HAL_RCC_OscConfig+0x362>
 80024dc:	2300      	movs	r3, #0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d011      	beq.n	8002506 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80024e2:	4bac      	ldr	r3, [pc, #688]	; (8002794 <HAL_RCC_OscConfig+0x618>)
 80024e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024e6:	4bab      	ldr	r3, [pc, #684]	; (8002794 <HAL_RCC_OscConfig+0x618>)
 80024e8:	2180      	movs	r1, #128	; 0x80
 80024ea:	0549      	lsls	r1, r1, #21
 80024ec:	430a      	orrs	r2, r1
 80024ee:	63da      	str	r2, [r3, #60]	; 0x3c
 80024f0:	4ba8      	ldr	r3, [pc, #672]	; (8002794 <HAL_RCC_OscConfig+0x618>)
 80024f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024f4:	2380      	movs	r3, #128	; 0x80
 80024f6:	055b      	lsls	r3, r3, #21
 80024f8:	4013      	ands	r3, r2
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80024fe:	231f      	movs	r3, #31
 8002500:	18fb      	adds	r3, r7, r3
 8002502:	2201      	movs	r2, #1
 8002504:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002506:	4ba4      	ldr	r3, [pc, #656]	; (8002798 <HAL_RCC_OscConfig+0x61c>)
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	2380      	movs	r3, #128	; 0x80
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	4013      	ands	r3, r2
 8002510:	d11a      	bne.n	8002548 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002512:	4ba1      	ldr	r3, [pc, #644]	; (8002798 <HAL_RCC_OscConfig+0x61c>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	4ba0      	ldr	r3, [pc, #640]	; (8002798 <HAL_RCC_OscConfig+0x61c>)
 8002518:	2180      	movs	r1, #128	; 0x80
 800251a:	0049      	lsls	r1, r1, #1
 800251c:	430a      	orrs	r2, r1
 800251e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002520:	f7ff f84a 	bl	80015b8 <HAL_GetTick>
 8002524:	0003      	movs	r3, r0
 8002526:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800252a:	f7ff f845 	bl	80015b8 <HAL_GetTick>
 800252e:	0002      	movs	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e127      	b.n	800278c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800253c:	4b96      	ldr	r3, [pc, #600]	; (8002798 <HAL_RCC_OscConfig+0x61c>)
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	2380      	movs	r3, #128	; 0x80
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	4013      	ands	r3, r2
 8002546:	d0f0      	beq.n	800252a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d106      	bne.n	800255e <HAL_RCC_OscConfig+0x3e2>
 8002550:	4b90      	ldr	r3, [pc, #576]	; (8002794 <HAL_RCC_OscConfig+0x618>)
 8002552:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002554:	4b8f      	ldr	r3, [pc, #572]	; (8002794 <HAL_RCC_OscConfig+0x618>)
 8002556:	2101      	movs	r1, #1
 8002558:	430a      	orrs	r2, r1
 800255a:	65da      	str	r2, [r3, #92]	; 0x5c
 800255c:	e01c      	b.n	8002598 <HAL_RCC_OscConfig+0x41c>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	2b05      	cmp	r3, #5
 8002564:	d10c      	bne.n	8002580 <HAL_RCC_OscConfig+0x404>
 8002566:	4b8b      	ldr	r3, [pc, #556]	; (8002794 <HAL_RCC_OscConfig+0x618>)
 8002568:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800256a:	4b8a      	ldr	r3, [pc, #552]	; (8002794 <HAL_RCC_OscConfig+0x618>)
 800256c:	2104      	movs	r1, #4
 800256e:	430a      	orrs	r2, r1
 8002570:	65da      	str	r2, [r3, #92]	; 0x5c
 8002572:	4b88      	ldr	r3, [pc, #544]	; (8002794 <HAL_RCC_OscConfig+0x618>)
 8002574:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002576:	4b87      	ldr	r3, [pc, #540]	; (8002794 <HAL_RCC_OscConfig+0x618>)
 8002578:	2101      	movs	r1, #1
 800257a:	430a      	orrs	r2, r1
 800257c:	65da      	str	r2, [r3, #92]	; 0x5c
 800257e:	e00b      	b.n	8002598 <HAL_RCC_OscConfig+0x41c>
 8002580:	4b84      	ldr	r3, [pc, #528]	; (8002794 <HAL_RCC_OscConfig+0x618>)
 8002582:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002584:	4b83      	ldr	r3, [pc, #524]	; (8002794 <HAL_RCC_OscConfig+0x618>)
 8002586:	2101      	movs	r1, #1
 8002588:	438a      	bics	r2, r1
 800258a:	65da      	str	r2, [r3, #92]	; 0x5c
 800258c:	4b81      	ldr	r3, [pc, #516]	; (8002794 <HAL_RCC_OscConfig+0x618>)
 800258e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002590:	4b80      	ldr	r3, [pc, #512]	; (8002794 <HAL_RCC_OscConfig+0x618>)
 8002592:	2104      	movs	r1, #4
 8002594:	438a      	bics	r2, r1
 8002596:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d014      	beq.n	80025ca <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a0:	f7ff f80a 	bl	80015b8 <HAL_GetTick>
 80025a4:	0003      	movs	r3, r0
 80025a6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025a8:	e009      	b.n	80025be <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025aa:	f7ff f805 	bl	80015b8 <HAL_GetTick>
 80025ae:	0002      	movs	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	4a79      	ldr	r2, [pc, #484]	; (800279c <HAL_RCC_OscConfig+0x620>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e0e6      	b.n	800278c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025be:	4b75      	ldr	r3, [pc, #468]	; (8002794 <HAL_RCC_OscConfig+0x618>)
 80025c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c2:	2202      	movs	r2, #2
 80025c4:	4013      	ands	r3, r2
 80025c6:	d0f0      	beq.n	80025aa <HAL_RCC_OscConfig+0x42e>
 80025c8:	e013      	b.n	80025f2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ca:	f7fe fff5 	bl	80015b8 <HAL_GetTick>
 80025ce:	0003      	movs	r3, r0
 80025d0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025d2:	e009      	b.n	80025e8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025d4:	f7fe fff0 	bl	80015b8 <HAL_GetTick>
 80025d8:	0002      	movs	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	4a6f      	ldr	r2, [pc, #444]	; (800279c <HAL_RCC_OscConfig+0x620>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e0d1      	b.n	800278c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025e8:	4b6a      	ldr	r3, [pc, #424]	; (8002794 <HAL_RCC_OscConfig+0x618>)
 80025ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ec:	2202      	movs	r2, #2
 80025ee:	4013      	ands	r3, r2
 80025f0:	d1f0      	bne.n	80025d4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80025f2:	231f      	movs	r3, #31
 80025f4:	18fb      	adds	r3, r7, r3
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d105      	bne.n	8002608 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80025fc:	4b65      	ldr	r3, [pc, #404]	; (8002794 <HAL_RCC_OscConfig+0x618>)
 80025fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002600:	4b64      	ldr	r3, [pc, #400]	; (8002794 <HAL_RCC_OscConfig+0x618>)
 8002602:	4967      	ldr	r1, [pc, #412]	; (80027a0 <HAL_RCC_OscConfig+0x624>)
 8002604:	400a      	ands	r2, r1
 8002606:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	69db      	ldr	r3, [r3, #28]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d100      	bne.n	8002612 <HAL_RCC_OscConfig+0x496>
 8002610:	e0bb      	b.n	800278a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002612:	4b60      	ldr	r3, [pc, #384]	; (8002794 <HAL_RCC_OscConfig+0x618>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	2238      	movs	r2, #56	; 0x38
 8002618:	4013      	ands	r3, r2
 800261a:	2b10      	cmp	r3, #16
 800261c:	d100      	bne.n	8002620 <HAL_RCC_OscConfig+0x4a4>
 800261e:	e07b      	b.n	8002718 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	2b02      	cmp	r3, #2
 8002626:	d156      	bne.n	80026d6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002628:	4b5a      	ldr	r3, [pc, #360]	; (8002794 <HAL_RCC_OscConfig+0x618>)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	4b59      	ldr	r3, [pc, #356]	; (8002794 <HAL_RCC_OscConfig+0x618>)
 800262e:	495d      	ldr	r1, [pc, #372]	; (80027a4 <HAL_RCC_OscConfig+0x628>)
 8002630:	400a      	ands	r2, r1
 8002632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002634:	f7fe ffc0 	bl	80015b8 <HAL_GetTick>
 8002638:	0003      	movs	r3, r0
 800263a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800263c:	e008      	b.n	8002650 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800263e:	f7fe ffbb 	bl	80015b8 <HAL_GetTick>
 8002642:	0002      	movs	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e09d      	b.n	800278c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002650:	4b50      	ldr	r3, [pc, #320]	; (8002794 <HAL_RCC_OscConfig+0x618>)
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	2380      	movs	r3, #128	; 0x80
 8002656:	049b      	lsls	r3, r3, #18
 8002658:	4013      	ands	r3, r2
 800265a:	d1f0      	bne.n	800263e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800265c:	4b4d      	ldr	r3, [pc, #308]	; (8002794 <HAL_RCC_OscConfig+0x618>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	4a51      	ldr	r2, [pc, #324]	; (80027a8 <HAL_RCC_OscConfig+0x62c>)
 8002662:	4013      	ands	r3, r2
 8002664:	0019      	movs	r1, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a1a      	ldr	r2, [r3, #32]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266e:	431a      	orrs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002674:	021b      	lsls	r3, r3, #8
 8002676:	431a      	orrs	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267c:	431a      	orrs	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	431a      	orrs	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002688:	431a      	orrs	r2, r3
 800268a:	4b42      	ldr	r3, [pc, #264]	; (8002794 <HAL_RCC_OscConfig+0x618>)
 800268c:	430a      	orrs	r2, r1
 800268e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002690:	4b40      	ldr	r3, [pc, #256]	; (8002794 <HAL_RCC_OscConfig+0x618>)
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	4b3f      	ldr	r3, [pc, #252]	; (8002794 <HAL_RCC_OscConfig+0x618>)
 8002696:	2180      	movs	r1, #128	; 0x80
 8002698:	0449      	lsls	r1, r1, #17
 800269a:	430a      	orrs	r2, r1
 800269c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800269e:	4b3d      	ldr	r3, [pc, #244]	; (8002794 <HAL_RCC_OscConfig+0x618>)
 80026a0:	68da      	ldr	r2, [r3, #12]
 80026a2:	4b3c      	ldr	r3, [pc, #240]	; (8002794 <HAL_RCC_OscConfig+0x618>)
 80026a4:	2180      	movs	r1, #128	; 0x80
 80026a6:	0549      	lsls	r1, r1, #21
 80026a8:	430a      	orrs	r2, r1
 80026aa:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ac:	f7fe ff84 	bl	80015b8 <HAL_GetTick>
 80026b0:	0003      	movs	r3, r0
 80026b2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026b4:	e008      	b.n	80026c8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b6:	f7fe ff7f 	bl	80015b8 <HAL_GetTick>
 80026ba:	0002      	movs	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e061      	b.n	800278c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026c8:	4b32      	ldr	r3, [pc, #200]	; (8002794 <HAL_RCC_OscConfig+0x618>)
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	2380      	movs	r3, #128	; 0x80
 80026ce:	049b      	lsls	r3, r3, #18
 80026d0:	4013      	ands	r3, r2
 80026d2:	d0f0      	beq.n	80026b6 <HAL_RCC_OscConfig+0x53a>
 80026d4:	e059      	b.n	800278a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026d6:	4b2f      	ldr	r3, [pc, #188]	; (8002794 <HAL_RCC_OscConfig+0x618>)
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	4b2e      	ldr	r3, [pc, #184]	; (8002794 <HAL_RCC_OscConfig+0x618>)
 80026dc:	4931      	ldr	r1, [pc, #196]	; (80027a4 <HAL_RCC_OscConfig+0x628>)
 80026de:	400a      	ands	r2, r1
 80026e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e2:	f7fe ff69 	bl	80015b8 <HAL_GetTick>
 80026e6:	0003      	movs	r3, r0
 80026e8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ec:	f7fe ff64 	bl	80015b8 <HAL_GetTick>
 80026f0:	0002      	movs	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e046      	b.n	800278c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026fe:	4b25      	ldr	r3, [pc, #148]	; (8002794 <HAL_RCC_OscConfig+0x618>)
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	2380      	movs	r3, #128	; 0x80
 8002704:	049b      	lsls	r3, r3, #18
 8002706:	4013      	ands	r3, r2
 8002708:	d1f0      	bne.n	80026ec <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800270a:	4b22      	ldr	r3, [pc, #136]	; (8002794 <HAL_RCC_OscConfig+0x618>)
 800270c:	68da      	ldr	r2, [r3, #12]
 800270e:	4b21      	ldr	r3, [pc, #132]	; (8002794 <HAL_RCC_OscConfig+0x618>)
 8002710:	4926      	ldr	r1, [pc, #152]	; (80027ac <HAL_RCC_OscConfig+0x630>)
 8002712:	400a      	ands	r2, r1
 8002714:	60da      	str	r2, [r3, #12]
 8002716:	e038      	b.n	800278a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	69db      	ldr	r3, [r3, #28]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d101      	bne.n	8002724 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e033      	b.n	800278c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002724:	4b1b      	ldr	r3, [pc, #108]	; (8002794 <HAL_RCC_OscConfig+0x618>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	2203      	movs	r2, #3
 800272e:	401a      	ands	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	429a      	cmp	r2, r3
 8002736:	d126      	bne.n	8002786 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	2270      	movs	r2, #112	; 0x70
 800273c:	401a      	ands	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002742:	429a      	cmp	r2, r3
 8002744:	d11f      	bne.n	8002786 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	23fe      	movs	r3, #254	; 0xfe
 800274a:	01db      	lsls	r3, r3, #7
 800274c:	401a      	ands	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002752:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002754:	429a      	cmp	r2, r3
 8002756:	d116      	bne.n	8002786 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	23f8      	movs	r3, #248	; 0xf8
 800275c:	039b      	lsls	r3, r3, #14
 800275e:	401a      	ands	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002764:	429a      	cmp	r2, r3
 8002766:	d10e      	bne.n	8002786 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	23e0      	movs	r3, #224	; 0xe0
 800276c:	051b      	lsls	r3, r3, #20
 800276e:	401a      	ands	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002774:	429a      	cmp	r2, r3
 8002776:	d106      	bne.n	8002786 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	0f5b      	lsrs	r3, r3, #29
 800277c:	075a      	lsls	r2, r3, #29
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002782:	429a      	cmp	r2, r3
 8002784:	d001      	beq.n	800278a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e000      	b.n	800278c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	0018      	movs	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	b008      	add	sp, #32
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40021000 	.word	0x40021000
 8002798:	40007000 	.word	0x40007000
 800279c:	00001388 	.word	0x00001388
 80027a0:	efffffff 	.word	0xefffffff
 80027a4:	feffffff 	.word	0xfeffffff
 80027a8:	11c1808c 	.word	0x11c1808c
 80027ac:	eefefffc 	.word	0xeefefffc

080027b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e0e9      	b.n	8002998 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027c4:	4b76      	ldr	r3, [pc, #472]	; (80029a0 <HAL_RCC_ClockConfig+0x1f0>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2207      	movs	r2, #7
 80027ca:	4013      	ands	r3, r2
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d91e      	bls.n	8002810 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d2:	4b73      	ldr	r3, [pc, #460]	; (80029a0 <HAL_RCC_ClockConfig+0x1f0>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2207      	movs	r2, #7
 80027d8:	4393      	bics	r3, r2
 80027da:	0019      	movs	r1, r3
 80027dc:	4b70      	ldr	r3, [pc, #448]	; (80029a0 <HAL_RCC_ClockConfig+0x1f0>)
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	430a      	orrs	r2, r1
 80027e2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80027e4:	f7fe fee8 	bl	80015b8 <HAL_GetTick>
 80027e8:	0003      	movs	r3, r0
 80027ea:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80027ec:	e009      	b.n	8002802 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ee:	f7fe fee3 	bl	80015b8 <HAL_GetTick>
 80027f2:	0002      	movs	r2, r0
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	4a6a      	ldr	r2, [pc, #424]	; (80029a4 <HAL_RCC_ClockConfig+0x1f4>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e0ca      	b.n	8002998 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002802:	4b67      	ldr	r3, [pc, #412]	; (80029a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2207      	movs	r2, #7
 8002808:	4013      	ands	r3, r2
 800280a:	683a      	ldr	r2, [r7, #0]
 800280c:	429a      	cmp	r2, r3
 800280e:	d1ee      	bne.n	80027ee <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2202      	movs	r2, #2
 8002816:	4013      	ands	r3, r2
 8002818:	d015      	beq.n	8002846 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2204      	movs	r2, #4
 8002820:	4013      	ands	r3, r2
 8002822:	d006      	beq.n	8002832 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002824:	4b60      	ldr	r3, [pc, #384]	; (80029a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	4b5f      	ldr	r3, [pc, #380]	; (80029a8 <HAL_RCC_ClockConfig+0x1f8>)
 800282a:	21e0      	movs	r1, #224	; 0xe0
 800282c:	01c9      	lsls	r1, r1, #7
 800282e:	430a      	orrs	r2, r1
 8002830:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002832:	4b5d      	ldr	r3, [pc, #372]	; (80029a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	4a5d      	ldr	r2, [pc, #372]	; (80029ac <HAL_RCC_ClockConfig+0x1fc>)
 8002838:	4013      	ands	r3, r2
 800283a:	0019      	movs	r1, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	4b59      	ldr	r3, [pc, #356]	; (80029a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002842:	430a      	orrs	r2, r1
 8002844:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2201      	movs	r2, #1
 800284c:	4013      	ands	r3, r2
 800284e:	d057      	beq.n	8002900 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d107      	bne.n	8002868 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002858:	4b53      	ldr	r3, [pc, #332]	; (80029a8 <HAL_RCC_ClockConfig+0x1f8>)
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	2380      	movs	r3, #128	; 0x80
 800285e:	029b      	lsls	r3, r3, #10
 8002860:	4013      	ands	r3, r2
 8002862:	d12b      	bne.n	80028bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e097      	b.n	8002998 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	2b02      	cmp	r3, #2
 800286e:	d107      	bne.n	8002880 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002870:	4b4d      	ldr	r3, [pc, #308]	; (80029a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	2380      	movs	r3, #128	; 0x80
 8002876:	049b      	lsls	r3, r3, #18
 8002878:	4013      	ands	r3, r2
 800287a:	d11f      	bne.n	80028bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e08b      	b.n	8002998 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d107      	bne.n	8002898 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002888:	4b47      	ldr	r3, [pc, #284]	; (80029a8 <HAL_RCC_ClockConfig+0x1f8>)
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	2380      	movs	r3, #128	; 0x80
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	4013      	ands	r3, r2
 8002892:	d113      	bne.n	80028bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e07f      	b.n	8002998 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b03      	cmp	r3, #3
 800289e:	d106      	bne.n	80028ae <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028a0:	4b41      	ldr	r3, [pc, #260]	; (80029a8 <HAL_RCC_ClockConfig+0x1f8>)
 80028a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028a4:	2202      	movs	r2, #2
 80028a6:	4013      	ands	r3, r2
 80028a8:	d108      	bne.n	80028bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e074      	b.n	8002998 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028ae:	4b3e      	ldr	r3, [pc, #248]	; (80029a8 <HAL_RCC_ClockConfig+0x1f8>)
 80028b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b2:	2202      	movs	r2, #2
 80028b4:	4013      	ands	r3, r2
 80028b6:	d101      	bne.n	80028bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e06d      	b.n	8002998 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028bc:	4b3a      	ldr	r3, [pc, #232]	; (80029a8 <HAL_RCC_ClockConfig+0x1f8>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	2207      	movs	r2, #7
 80028c2:	4393      	bics	r3, r2
 80028c4:	0019      	movs	r1, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	4b37      	ldr	r3, [pc, #220]	; (80029a8 <HAL_RCC_ClockConfig+0x1f8>)
 80028cc:	430a      	orrs	r2, r1
 80028ce:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028d0:	f7fe fe72 	bl	80015b8 <HAL_GetTick>
 80028d4:	0003      	movs	r3, r0
 80028d6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028d8:	e009      	b.n	80028ee <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028da:	f7fe fe6d 	bl	80015b8 <HAL_GetTick>
 80028de:	0002      	movs	r2, r0
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	4a2f      	ldr	r2, [pc, #188]	; (80029a4 <HAL_RCC_ClockConfig+0x1f4>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e054      	b.n	8002998 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ee:	4b2e      	ldr	r3, [pc, #184]	; (80029a8 <HAL_RCC_ClockConfig+0x1f8>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	2238      	movs	r2, #56	; 0x38
 80028f4:	401a      	ands	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d1ec      	bne.n	80028da <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002900:	4b27      	ldr	r3, [pc, #156]	; (80029a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2207      	movs	r2, #7
 8002906:	4013      	ands	r3, r2
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	429a      	cmp	r2, r3
 800290c:	d21e      	bcs.n	800294c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290e:	4b24      	ldr	r3, [pc, #144]	; (80029a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2207      	movs	r2, #7
 8002914:	4393      	bics	r3, r2
 8002916:	0019      	movs	r1, r3
 8002918:	4b21      	ldr	r3, [pc, #132]	; (80029a0 <HAL_RCC_ClockConfig+0x1f0>)
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002920:	f7fe fe4a 	bl	80015b8 <HAL_GetTick>
 8002924:	0003      	movs	r3, r0
 8002926:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002928:	e009      	b.n	800293e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800292a:	f7fe fe45 	bl	80015b8 <HAL_GetTick>
 800292e:	0002      	movs	r2, r0
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	4a1b      	ldr	r2, [pc, #108]	; (80029a4 <HAL_RCC_ClockConfig+0x1f4>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d901      	bls.n	800293e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e02c      	b.n	8002998 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800293e:	4b18      	ldr	r3, [pc, #96]	; (80029a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2207      	movs	r2, #7
 8002944:	4013      	ands	r3, r2
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	429a      	cmp	r2, r3
 800294a:	d1ee      	bne.n	800292a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2204      	movs	r2, #4
 8002952:	4013      	ands	r3, r2
 8002954:	d009      	beq.n	800296a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002956:	4b14      	ldr	r3, [pc, #80]	; (80029a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	4a15      	ldr	r2, [pc, #84]	; (80029b0 <HAL_RCC_ClockConfig+0x200>)
 800295c:	4013      	ands	r3, r2
 800295e:	0019      	movs	r1, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68da      	ldr	r2, [r3, #12]
 8002964:	4b10      	ldr	r3, [pc, #64]	; (80029a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002966:	430a      	orrs	r2, r1
 8002968:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800296a:	f000 f829 	bl	80029c0 <HAL_RCC_GetSysClockFreq>
 800296e:	0001      	movs	r1, r0
 8002970:	4b0d      	ldr	r3, [pc, #52]	; (80029a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	0a1b      	lsrs	r3, r3, #8
 8002976:	220f      	movs	r2, #15
 8002978:	401a      	ands	r2, r3
 800297a:	4b0e      	ldr	r3, [pc, #56]	; (80029b4 <HAL_RCC_ClockConfig+0x204>)
 800297c:	0092      	lsls	r2, r2, #2
 800297e:	58d3      	ldr	r3, [r2, r3]
 8002980:	221f      	movs	r2, #31
 8002982:	4013      	ands	r3, r2
 8002984:	000a      	movs	r2, r1
 8002986:	40da      	lsrs	r2, r3
 8002988:	4b0b      	ldr	r3, [pc, #44]	; (80029b8 <HAL_RCC_ClockConfig+0x208>)
 800298a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800298c:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <HAL_RCC_ClockConfig+0x20c>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	0018      	movs	r0, r3
 8002992:	f7fe fdb5 	bl	8001500 <HAL_InitTick>
 8002996:	0003      	movs	r3, r0
}
 8002998:	0018      	movs	r0, r3
 800299a:	46bd      	mov	sp, r7
 800299c:	b004      	add	sp, #16
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40022000 	.word	0x40022000
 80029a4:	00001388 	.word	0x00001388
 80029a8:	40021000 	.word	0x40021000
 80029ac:	fffff0ff 	.word	0xfffff0ff
 80029b0:	ffff8fff 	.word	0xffff8fff
 80029b4:	08007564 	.word	0x08007564
 80029b8:	2000008c 	.word	0x2000008c
 80029bc:	20000090 	.word	0x20000090

080029c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029c6:	4b3c      	ldr	r3, [pc, #240]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	2238      	movs	r2, #56	; 0x38
 80029cc:	4013      	ands	r3, r2
 80029ce:	d10f      	bne.n	80029f0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80029d0:	4b39      	ldr	r3, [pc, #228]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	0adb      	lsrs	r3, r3, #11
 80029d6:	2207      	movs	r2, #7
 80029d8:	4013      	ands	r3, r2
 80029da:	2201      	movs	r2, #1
 80029dc:	409a      	lsls	r2, r3
 80029de:	0013      	movs	r3, r2
 80029e0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80029e2:	6839      	ldr	r1, [r7, #0]
 80029e4:	4835      	ldr	r0, [pc, #212]	; (8002abc <HAL_RCC_GetSysClockFreq+0xfc>)
 80029e6:	f7fd fb9f 	bl	8000128 <__udivsi3>
 80029ea:	0003      	movs	r3, r0
 80029ec:	613b      	str	r3, [r7, #16]
 80029ee:	e05d      	b.n	8002aac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029f0:	4b31      	ldr	r3, [pc, #196]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	2238      	movs	r2, #56	; 0x38
 80029f6:	4013      	ands	r3, r2
 80029f8:	2b08      	cmp	r3, #8
 80029fa:	d102      	bne.n	8002a02 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029fc:	4b30      	ldr	r3, [pc, #192]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x100>)
 80029fe:	613b      	str	r3, [r7, #16]
 8002a00:	e054      	b.n	8002aac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a02:	4b2d      	ldr	r3, [pc, #180]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	2238      	movs	r2, #56	; 0x38
 8002a08:	4013      	ands	r3, r2
 8002a0a:	2b10      	cmp	r3, #16
 8002a0c:	d138      	bne.n	8002a80 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002a0e:	4b2a      	ldr	r3, [pc, #168]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	2203      	movs	r2, #3
 8002a14:	4013      	ands	r3, r2
 8002a16:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a18:	4b27      	ldr	r3, [pc, #156]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	091b      	lsrs	r3, r3, #4
 8002a1e:	2207      	movs	r2, #7
 8002a20:	4013      	ands	r3, r2
 8002a22:	3301      	adds	r3, #1
 8002a24:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2b03      	cmp	r3, #3
 8002a2a:	d10d      	bne.n	8002a48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a2c:	68b9      	ldr	r1, [r7, #8]
 8002a2e:	4824      	ldr	r0, [pc, #144]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x100>)
 8002a30:	f7fd fb7a 	bl	8000128 <__udivsi3>
 8002a34:	0003      	movs	r3, r0
 8002a36:	0019      	movs	r1, r3
 8002a38:	4b1f      	ldr	r3, [pc, #124]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	0a1b      	lsrs	r3, r3, #8
 8002a3e:	227f      	movs	r2, #127	; 0x7f
 8002a40:	4013      	ands	r3, r2
 8002a42:	434b      	muls	r3, r1
 8002a44:	617b      	str	r3, [r7, #20]
        break;
 8002a46:	e00d      	b.n	8002a64 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002a48:	68b9      	ldr	r1, [r7, #8]
 8002a4a:	481c      	ldr	r0, [pc, #112]	; (8002abc <HAL_RCC_GetSysClockFreq+0xfc>)
 8002a4c:	f7fd fb6c 	bl	8000128 <__udivsi3>
 8002a50:	0003      	movs	r3, r0
 8002a52:	0019      	movs	r1, r3
 8002a54:	4b18      	ldr	r3, [pc, #96]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	0a1b      	lsrs	r3, r3, #8
 8002a5a:	227f      	movs	r2, #127	; 0x7f
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	434b      	muls	r3, r1
 8002a60:	617b      	str	r3, [r7, #20]
        break;
 8002a62:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002a64:	4b14      	ldr	r3, [pc, #80]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	0f5b      	lsrs	r3, r3, #29
 8002a6a:	2207      	movs	r2, #7
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	3301      	adds	r3, #1
 8002a70:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	6978      	ldr	r0, [r7, #20]
 8002a76:	f7fd fb57 	bl	8000128 <__udivsi3>
 8002a7a:	0003      	movs	r3, r0
 8002a7c:	613b      	str	r3, [r7, #16]
 8002a7e:	e015      	b.n	8002aac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002a80:	4b0d      	ldr	r3, [pc, #52]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	2238      	movs	r2, #56	; 0x38
 8002a86:	4013      	ands	r3, r2
 8002a88:	2b20      	cmp	r3, #32
 8002a8a:	d103      	bne.n	8002a94 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002a8c:	2380      	movs	r3, #128	; 0x80
 8002a8e:	021b      	lsls	r3, r3, #8
 8002a90:	613b      	str	r3, [r7, #16]
 8002a92:	e00b      	b.n	8002aac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002a94:	4b08      	ldr	r3, [pc, #32]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	2238      	movs	r2, #56	; 0x38
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	2b18      	cmp	r3, #24
 8002a9e:	d103      	bne.n	8002aa8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002aa0:	23fa      	movs	r3, #250	; 0xfa
 8002aa2:	01db      	lsls	r3, r3, #7
 8002aa4:	613b      	str	r3, [r7, #16]
 8002aa6:	e001      	b.n	8002aac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002aac:	693b      	ldr	r3, [r7, #16]
}
 8002aae:	0018      	movs	r0, r3
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	b006      	add	sp, #24
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	46c0      	nop			; (mov r8, r8)
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	00f42400 	.word	0x00f42400
 8002ac0:	007a1200 	.word	0x007a1200

08002ac4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ac8:	4b02      	ldr	r3, [pc, #8]	; (8002ad4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002aca:	681b      	ldr	r3, [r3, #0]
}
 8002acc:	0018      	movs	r0, r3
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	46c0      	nop			; (mov r8, r8)
 8002ad4:	2000008c 	.word	0x2000008c

08002ad8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ad8:	b5b0      	push	{r4, r5, r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002adc:	f7ff fff2 	bl	8002ac4 <HAL_RCC_GetHCLKFreq>
 8002ae0:	0004      	movs	r4, r0
 8002ae2:	f7ff fb3f 	bl	8002164 <LL_RCC_GetAPB1Prescaler>
 8002ae6:	0003      	movs	r3, r0
 8002ae8:	0b1a      	lsrs	r2, r3, #12
 8002aea:	4b05      	ldr	r3, [pc, #20]	; (8002b00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002aec:	0092      	lsls	r2, r2, #2
 8002aee:	58d3      	ldr	r3, [r2, r3]
 8002af0:	221f      	movs	r2, #31
 8002af2:	4013      	ands	r3, r2
 8002af4:	40dc      	lsrs	r4, r3
 8002af6:	0023      	movs	r3, r4
}
 8002af8:	0018      	movs	r0, r3
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bdb0      	pop	{r4, r5, r7, pc}
 8002afe:	46c0      	nop			; (mov r8, r8)
 8002b00:	080075a4 	.word	0x080075a4

08002b04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002b0c:	2313      	movs	r3, #19
 8002b0e:	18fb      	adds	r3, r7, r3
 8002b10:	2200      	movs	r2, #0
 8002b12:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b14:	2312      	movs	r3, #18
 8002b16:	18fb      	adds	r3, r7, r3
 8002b18:	2200      	movs	r2, #0
 8002b1a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	2380      	movs	r3, #128	; 0x80
 8002b22:	029b      	lsls	r3, r3, #10
 8002b24:	4013      	ands	r3, r2
 8002b26:	d100      	bne.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002b28:	e0a3      	b.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b2a:	2011      	movs	r0, #17
 8002b2c:	183b      	adds	r3, r7, r0
 8002b2e:	2200      	movs	r2, #0
 8002b30:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b32:	4ba5      	ldr	r3, [pc, #660]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b36:	2380      	movs	r3, #128	; 0x80
 8002b38:	055b      	lsls	r3, r3, #21
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	d110      	bne.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b3e:	4ba2      	ldr	r3, [pc, #648]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b42:	4ba1      	ldr	r3, [pc, #644]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b44:	2180      	movs	r1, #128	; 0x80
 8002b46:	0549      	lsls	r1, r1, #21
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b4c:	4b9e      	ldr	r3, [pc, #632]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b50:	2380      	movs	r3, #128	; 0x80
 8002b52:	055b      	lsls	r3, r3, #21
 8002b54:	4013      	ands	r3, r2
 8002b56:	60bb      	str	r3, [r7, #8]
 8002b58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b5a:	183b      	adds	r3, r7, r0
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b60:	4b9a      	ldr	r3, [pc, #616]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	4b99      	ldr	r3, [pc, #612]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002b66:	2180      	movs	r1, #128	; 0x80
 8002b68:	0049      	lsls	r1, r1, #1
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b6e:	f7fe fd23 	bl	80015b8 <HAL_GetTick>
 8002b72:	0003      	movs	r3, r0
 8002b74:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b76:	e00b      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b78:	f7fe fd1e 	bl	80015b8 <HAL_GetTick>
 8002b7c:	0002      	movs	r2, r0
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d904      	bls.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002b86:	2313      	movs	r3, #19
 8002b88:	18fb      	adds	r3, r7, r3
 8002b8a:	2203      	movs	r2, #3
 8002b8c:	701a      	strb	r2, [r3, #0]
        break;
 8002b8e:	e005      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b90:	4b8e      	ldr	r3, [pc, #568]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	2380      	movs	r3, #128	; 0x80
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	4013      	ands	r3, r2
 8002b9a:	d0ed      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002b9c:	2313      	movs	r3, #19
 8002b9e:	18fb      	adds	r3, r7, r3
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d154      	bne.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ba6:	4b88      	ldr	r3, [pc, #544]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ba8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002baa:	23c0      	movs	r3, #192	; 0xc0
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4013      	ands	r3, r2
 8002bb0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d019      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d014      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002bc2:	4b81      	ldr	r3, [pc, #516]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc6:	4a82      	ldr	r2, [pc, #520]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002bc8:	4013      	ands	r3, r2
 8002bca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002bcc:	4b7e      	ldr	r3, [pc, #504]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002bce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002bd0:	4b7d      	ldr	r3, [pc, #500]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002bd2:	2180      	movs	r1, #128	; 0x80
 8002bd4:	0249      	lsls	r1, r1, #9
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002bda:	4b7b      	ldr	r3, [pc, #492]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002bdc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002bde:	4b7a      	ldr	r3, [pc, #488]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002be0:	497c      	ldr	r1, [pc, #496]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8002be2:	400a      	ands	r2, r1
 8002be4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002be6:	4b78      	ldr	r3, [pc, #480]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	d016      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf4:	f7fe fce0 	bl	80015b8 <HAL_GetTick>
 8002bf8:	0003      	movs	r3, r0
 8002bfa:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bfc:	e00c      	b.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bfe:	f7fe fcdb 	bl	80015b8 <HAL_GetTick>
 8002c02:	0002      	movs	r2, r0
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	4a73      	ldr	r2, [pc, #460]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d904      	bls.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002c0e:	2313      	movs	r3, #19
 8002c10:	18fb      	adds	r3, r7, r3
 8002c12:	2203      	movs	r2, #3
 8002c14:	701a      	strb	r2, [r3, #0]
            break;
 8002c16:	e004      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c18:	4b6b      	ldr	r3, [pc, #428]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	4013      	ands	r3, r2
 8002c20:	d0ed      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002c22:	2313      	movs	r3, #19
 8002c24:	18fb      	adds	r3, r7, r3
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d10a      	bne.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c2c:	4b66      	ldr	r3, [pc, #408]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c30:	4a67      	ldr	r2, [pc, #412]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002c32:	4013      	ands	r3, r2
 8002c34:	0019      	movs	r1, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c3a:	4b63      	ldr	r3, [pc, #396]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c40:	e00c      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c42:	2312      	movs	r3, #18
 8002c44:	18fb      	adds	r3, r7, r3
 8002c46:	2213      	movs	r2, #19
 8002c48:	18ba      	adds	r2, r7, r2
 8002c4a:	7812      	ldrb	r2, [r2, #0]
 8002c4c:	701a      	strb	r2, [r3, #0]
 8002c4e:	e005      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c50:	2312      	movs	r3, #18
 8002c52:	18fb      	adds	r3, r7, r3
 8002c54:	2213      	movs	r2, #19
 8002c56:	18ba      	adds	r2, r7, r2
 8002c58:	7812      	ldrb	r2, [r2, #0]
 8002c5a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c5c:	2311      	movs	r3, #17
 8002c5e:	18fb      	adds	r3, r7, r3
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d105      	bne.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c66:	4b58      	ldr	r3, [pc, #352]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c6a:	4b57      	ldr	r3, [pc, #348]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c6c:	495b      	ldr	r1, [pc, #364]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002c6e:	400a      	ands	r2, r1
 8002c70:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2201      	movs	r2, #1
 8002c78:	4013      	ands	r3, r2
 8002c7a:	d009      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c7c:	4b52      	ldr	r3, [pc, #328]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c80:	2203      	movs	r2, #3
 8002c82:	4393      	bics	r3, r2
 8002c84:	0019      	movs	r1, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	4b4f      	ldr	r3, [pc, #316]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2210      	movs	r2, #16
 8002c96:	4013      	ands	r3, r2
 8002c98:	d009      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c9a:	4b4b      	ldr	r3, [pc, #300]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9e:	4a50      	ldr	r2, [pc, #320]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	0019      	movs	r1, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	4b47      	ldr	r3, [pc, #284]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002caa:	430a      	orrs	r2, r1
 8002cac:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	2380      	movs	r3, #128	; 0x80
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	d009      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cba:	4b43      	ldr	r3, [pc, #268]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cbe:	4a49      	ldr	r2, [pc, #292]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	0019      	movs	r1, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	695a      	ldr	r2, [r3, #20]
 8002cc8:	4b3f      	ldr	r3, [pc, #252]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	2380      	movs	r3, #128	; 0x80
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	d009      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002cda:	4b3b      	ldr	r3, [pc, #236]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cde:	4a42      	ldr	r2, [pc, #264]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	0019      	movs	r1, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	699a      	ldr	r2, [r3, #24]
 8002ce8:	4b37      	ldr	r3, [pc, #220]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cea:	430a      	orrs	r2, r1
 8002cec:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	d009      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cf8:	4b33      	ldr	r3, [pc, #204]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfc:	4a3b      	ldr	r2, [pc, #236]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002cfe:	4013      	ands	r3, r2
 8002d00:	0019      	movs	r1, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68da      	ldr	r2, [r3, #12]
 8002d06:	4b30      	ldr	r3, [pc, #192]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	2380      	movs	r3, #128	; 0x80
 8002d12:	01db      	lsls	r3, r3, #7
 8002d14:	4013      	ands	r3, r2
 8002d16:	d015      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d18:	4b2b      	ldr	r3, [pc, #172]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	0899      	lsrs	r1, r3, #2
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	69da      	ldr	r2, [r3, #28]
 8002d24:	4b28      	ldr	r3, [pc, #160]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d26:	430a      	orrs	r2, r1
 8002d28:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69da      	ldr	r2, [r3, #28]
 8002d2e:	2380      	movs	r3, #128	; 0x80
 8002d30:	05db      	lsls	r3, r3, #23
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d106      	bne.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002d36:	4b24      	ldr	r3, [pc, #144]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d38:	68da      	ldr	r2, [r3, #12]
 8002d3a:	4b23      	ldr	r3, [pc, #140]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d3c:	2180      	movs	r1, #128	; 0x80
 8002d3e:	0249      	lsls	r1, r1, #9
 8002d40:	430a      	orrs	r2, r1
 8002d42:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	2380      	movs	r3, #128	; 0x80
 8002d4a:	039b      	lsls	r3, r3, #14
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	d016      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002d50:	4b1d      	ldr	r3, [pc, #116]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d54:	4a26      	ldr	r2, [pc, #152]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002d56:	4013      	ands	r3, r2
 8002d58:	0019      	movs	r1, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a1a      	ldr	r2, [r3, #32]
 8002d5e:	4b1a      	ldr	r3, [pc, #104]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d60:	430a      	orrs	r2, r1
 8002d62:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a1a      	ldr	r2, [r3, #32]
 8002d68:	2380      	movs	r3, #128	; 0x80
 8002d6a:	03db      	lsls	r3, r3, #15
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d106      	bne.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002d70:	4b15      	ldr	r3, [pc, #84]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d72:	68da      	ldr	r2, [r3, #12]
 8002d74:	4b14      	ldr	r3, [pc, #80]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d76:	2180      	movs	r1, #128	; 0x80
 8002d78:	0449      	lsls	r1, r1, #17
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	2380      	movs	r3, #128	; 0x80
 8002d84:	011b      	lsls	r3, r3, #4
 8002d86:	4013      	ands	r3, r2
 8002d88:	d016      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002d8a:	4b0f      	ldr	r3, [pc, #60]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d8e:	4a19      	ldr	r2, [pc, #100]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d90:	4013      	ands	r3, r2
 8002d92:	0019      	movs	r1, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	691a      	ldr	r2, [r3, #16]
 8002d98:	4b0b      	ldr	r3, [pc, #44]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	691a      	ldr	r2, [r3, #16]
 8002da2:	2380      	movs	r3, #128	; 0x80
 8002da4:	01db      	lsls	r3, r3, #7
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d106      	bne.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002daa:	4b07      	ldr	r3, [pc, #28]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002dac:	68da      	ldr	r2, [r3, #12]
 8002dae:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002db0:	2180      	movs	r1, #128	; 0x80
 8002db2:	0249      	lsls	r1, r1, #9
 8002db4:	430a      	orrs	r2, r1
 8002db6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002db8:	2312      	movs	r3, #18
 8002dba:	18fb      	adds	r3, r7, r3
 8002dbc:	781b      	ldrb	r3, [r3, #0]
}
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	b006      	add	sp, #24
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	46c0      	nop			; (mov r8, r8)
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	40007000 	.word	0x40007000
 8002dd0:	fffffcff 	.word	0xfffffcff
 8002dd4:	fffeffff 	.word	0xfffeffff
 8002dd8:	00001388 	.word	0x00001388
 8002ddc:	efffffff 	.word	0xefffffff
 8002de0:	fffff3ff 	.word	0xfffff3ff
 8002de4:	fff3ffff 	.word	0xfff3ffff
 8002de8:	ffcfffff 	.word	0xffcfffff
 8002dec:	ffffcfff 	.word	0xffffcfff
 8002df0:	ffbfffff 	.word	0xffbfffff
 8002df4:	ffff3fff 	.word	0xffff3fff

08002df8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002df8:	b5b0      	push	{r4, r5, r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002e00:	230f      	movs	r3, #15
 8002e02:	18fb      	adds	r3, r7, r3
 8002e04:	2201      	movs	r2, #1
 8002e06:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d100      	bne.n	8002e10 <HAL_RTC_Init+0x18>
 8002e0e:	e08c      	b.n	8002f2a <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2229      	movs	r2, #41	; 0x29
 8002e14:	5c9b      	ldrb	r3, [r3, r2]
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d10b      	bne.n	8002e34 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2228      	movs	r2, #40	; 0x28
 8002e20:	2100      	movs	r1, #0
 8002e22:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2288      	movs	r2, #136	; 0x88
 8002e28:	0212      	lsls	r2, r2, #8
 8002e2a:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	0018      	movs	r0, r3
 8002e30:	f7fe f8e0 	bl	8000ff4 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2229      	movs	r2, #41	; 0x29
 8002e38:	2102      	movs	r1, #2
 8002e3a:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	2210      	movs	r2, #16
 8002e44:	4013      	ands	r3, r2
 8002e46:	2b10      	cmp	r3, #16
 8002e48:	d062      	beq.n	8002f10 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	22ca      	movs	r2, #202	; 0xca
 8002e50:	625a      	str	r2, [r3, #36]	; 0x24
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2253      	movs	r2, #83	; 0x53
 8002e58:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002e5a:	250f      	movs	r5, #15
 8002e5c:	197c      	adds	r4, r7, r5
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	0018      	movs	r0, r3
 8002e62:	f000 f9cc 	bl	80031fe <RTC_EnterInitMode>
 8002e66:	0003      	movs	r3, r0
 8002e68:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8002e6a:	0028      	movs	r0, r5
 8002e6c:	183b      	adds	r3, r7, r0
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d12c      	bne.n	8002ece <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	699a      	ldr	r2, [r3, #24]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	492e      	ldr	r1, [pc, #184]	; (8002f38 <HAL_RTC_Init+0x140>)
 8002e80:	400a      	ands	r2, r1
 8002e82:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6999      	ldr	r1, [r3, #24]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689a      	ldr	r2, [r3, #8]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	431a      	orrs	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	69db      	ldr	r3, [r3, #28]
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	6912      	ldr	r2, [r2, #16]
 8002eaa:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6919      	ldr	r1, [r3, #16]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	041a      	lsls	r2, r3, #16
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002ec0:	183c      	adds	r4, r7, r0
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	0018      	movs	r0, r3
 8002ec6:	f000 f9dd 	bl	8003284 <RTC_ExitInitMode>
 8002eca:	0003      	movs	r3, r0
 8002ecc:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8002ece:	230f      	movs	r3, #15
 8002ed0:	18fb      	adds	r3, r7, r3
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d116      	bne.n	8002f06 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	699a      	ldr	r2, [r3, #24]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	00d2      	lsls	r2, r2, #3
 8002ee4:	08d2      	lsrs	r2, r2, #3
 8002ee6:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6999      	ldr	r1, [r3, #24]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	431a      	orrs	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	22ff      	movs	r2, #255	; 0xff
 8002f0c:	625a      	str	r2, [r3, #36]	; 0x24
 8002f0e:	e003      	b.n	8002f18 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002f10:	230f      	movs	r3, #15
 8002f12:	18fb      	adds	r3, r7, r3
 8002f14:	2200      	movs	r2, #0
 8002f16:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8002f18:	230f      	movs	r3, #15
 8002f1a:	18fb      	adds	r3, r7, r3
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d103      	bne.n	8002f2a <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2229      	movs	r2, #41	; 0x29
 8002f26:	2101      	movs	r1, #1
 8002f28:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8002f2a:	230f      	movs	r3, #15
 8002f2c:	18fb      	adds	r3, r7, r3
 8002f2e:	781b      	ldrb	r3, [r3, #0]
}
 8002f30:	0018      	movs	r0, r3
 8002f32:	46bd      	mov	sp, r7
 8002f34:	b004      	add	sp, #16
 8002f36:	bdb0      	pop	{r4, r5, r7, pc}
 8002f38:	fb8fffbf 	.word	0xfb8fffbf

08002f3c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002f3c:	b5b0      	push	{r4, r5, r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2228      	movs	r2, #40	; 0x28
 8002f4c:	5c9b      	ldrb	r3, [r3, r2]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d101      	bne.n	8002f56 <HAL_RTC_SetTime+0x1a>
 8002f52:	2302      	movs	r3, #2
 8002f54:	e092      	b.n	800307c <HAL_RTC_SetTime+0x140>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2228      	movs	r2, #40	; 0x28
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2229      	movs	r2, #41	; 0x29
 8002f62:	2102      	movs	r1, #2
 8002f64:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	22ca      	movs	r2, #202	; 0xca
 8002f6c:	625a      	str	r2, [r3, #36]	; 0x24
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2253      	movs	r2, #83	; 0x53
 8002f74:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002f76:	2513      	movs	r5, #19
 8002f78:	197c      	adds	r4, r7, r5
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	f000 f93e 	bl	80031fe <RTC_EnterInitMode>
 8002f82:	0003      	movs	r3, r0
 8002f84:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8002f86:	197b      	adds	r3, r7, r5
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d162      	bne.n	8003054 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d125      	bne.n	8002fe0 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	2240      	movs	r2, #64	; 0x40
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	d102      	bne.n	8002fa6 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	0018      	movs	r0, r3
 8002fac:	f000 f9ae 	bl	800330c <RTC_ByteToBcd2>
 8002fb0:	0003      	movs	r3, r0
 8002fb2:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	785b      	ldrb	r3, [r3, #1]
 8002fb8:	0018      	movs	r0, r3
 8002fba:	f000 f9a7 	bl	800330c <RTC_ByteToBcd2>
 8002fbe:	0003      	movs	r3, r0
 8002fc0:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002fc2:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	789b      	ldrb	r3, [r3, #2]
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f000 f99f 	bl	800330c <RTC_ByteToBcd2>
 8002fce:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002fd0:	0022      	movs	r2, r4
 8002fd2:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	78db      	ldrb	r3, [r3, #3]
 8002fd8:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	617b      	str	r3, [r7, #20]
 8002fde:	e017      	b.n	8003010 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	2240      	movs	r2, #64	; 0x40
 8002fe8:	4013      	ands	r3, r2
 8002fea:	d102      	bne.n	8002ff2 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	785b      	ldrb	r3, [r3, #1]
 8002ffc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002ffe:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003004:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	78db      	ldrb	r3, [r3, #3]
 800300a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800300c:	4313      	orrs	r3, r2
 800300e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	491b      	ldr	r1, [pc, #108]	; (8003084 <HAL_RTC_SetTime+0x148>)
 8003018:	400a      	ands	r2, r1
 800301a:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	699a      	ldr	r2, [r3, #24]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4918      	ldr	r1, [pc, #96]	; (8003088 <HAL_RTC_SetTime+0x14c>)
 8003028:	400a      	ands	r2, r1
 800302a:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6999      	ldr	r1, [r3, #24]
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	431a      	orrs	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	430a      	orrs	r2, r1
 8003042:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003044:	2313      	movs	r3, #19
 8003046:	18fc      	adds	r4, r7, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	0018      	movs	r0, r3
 800304c:	f000 f91a 	bl	8003284 <RTC_ExitInitMode>
 8003050:	0003      	movs	r3, r0
 8003052:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	22ff      	movs	r2, #255	; 0xff
 800305a:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 800305c:	2313      	movs	r3, #19
 800305e:	18fb      	adds	r3, r7, r3
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d103      	bne.n	800306e <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2229      	movs	r2, #41	; 0x29
 800306a:	2101      	movs	r1, #1
 800306c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2228      	movs	r2, #40	; 0x28
 8003072:	2100      	movs	r1, #0
 8003074:	5499      	strb	r1, [r3, r2]

  return status;
 8003076:	2313      	movs	r3, #19
 8003078:	18fb      	adds	r3, r7, r3
 800307a:	781b      	ldrb	r3, [r3, #0]
}
 800307c:	0018      	movs	r0, r3
 800307e:	46bd      	mov	sp, r7
 8003080:	b006      	add	sp, #24
 8003082:	bdb0      	pop	{r4, r5, r7, pc}
 8003084:	007f7f7f 	.word	0x007f7f7f
 8003088:	fffbffff 	.word	0xfffbffff

0800308c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800308c:	b5b0      	push	{r4, r5, r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2228      	movs	r2, #40	; 0x28
 800309c:	5c9b      	ldrb	r3, [r3, r2]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d101      	bne.n	80030a6 <HAL_RTC_SetDate+0x1a>
 80030a2:	2302      	movs	r3, #2
 80030a4:	e07e      	b.n	80031a4 <HAL_RTC_SetDate+0x118>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2228      	movs	r2, #40	; 0x28
 80030aa:	2101      	movs	r1, #1
 80030ac:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2229      	movs	r2, #41	; 0x29
 80030b2:	2102      	movs	r1, #2
 80030b4:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d10e      	bne.n	80030da <HAL_RTC_SetDate+0x4e>
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	785b      	ldrb	r3, [r3, #1]
 80030c0:	001a      	movs	r2, r3
 80030c2:	2310      	movs	r3, #16
 80030c4:	4013      	ands	r3, r2
 80030c6:	d008      	beq.n	80030da <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	785b      	ldrb	r3, [r3, #1]
 80030cc:	2210      	movs	r2, #16
 80030ce:	4393      	bics	r3, r2
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	330a      	adds	r3, #10
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d11c      	bne.n	800311a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	78db      	ldrb	r3, [r3, #3]
 80030e4:	0018      	movs	r0, r3
 80030e6:	f000 f911 	bl	800330c <RTC_ByteToBcd2>
 80030ea:	0003      	movs	r3, r0
 80030ec:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	785b      	ldrb	r3, [r3, #1]
 80030f2:	0018      	movs	r0, r3
 80030f4:	f000 f90a 	bl	800330c <RTC_ByteToBcd2>
 80030f8:	0003      	movs	r3, r0
 80030fa:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80030fc:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	789b      	ldrb	r3, [r3, #2]
 8003102:	0018      	movs	r0, r3
 8003104:	f000 f902 	bl	800330c <RTC_ByteToBcd2>
 8003108:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800310a:	0022      	movs	r2, r4
 800310c:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003114:	4313      	orrs	r3, r2
 8003116:	617b      	str	r3, [r7, #20]
 8003118:	e00e      	b.n	8003138 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	78db      	ldrb	r3, [r3, #3]
 800311e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	785b      	ldrb	r3, [r3, #1]
 8003124:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003126:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800312c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003134:	4313      	orrs	r3, r2
 8003136:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	22ca      	movs	r2, #202	; 0xca
 800313e:	625a      	str	r2, [r3, #36]	; 0x24
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2253      	movs	r2, #83	; 0x53
 8003146:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003148:	2513      	movs	r5, #19
 800314a:	197c      	adds	r4, r7, r5
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	0018      	movs	r0, r3
 8003150:	f000 f855 	bl	80031fe <RTC_EnterInitMode>
 8003154:	0003      	movs	r3, r0
 8003156:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8003158:	0028      	movs	r0, r5
 800315a:	183b      	adds	r3, r7, r0
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10c      	bne.n	800317c <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	4910      	ldr	r1, [pc, #64]	; (80031ac <HAL_RTC_SetDate+0x120>)
 800316a:	400a      	ands	r2, r1
 800316c:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800316e:	183c      	adds	r4, r7, r0
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	0018      	movs	r0, r3
 8003174:	f000 f886 	bl	8003284 <RTC_ExitInitMode>
 8003178:	0003      	movs	r3, r0
 800317a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	22ff      	movs	r2, #255	; 0xff
 8003182:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003184:	2313      	movs	r3, #19
 8003186:	18fb      	adds	r3, r7, r3
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d103      	bne.n	8003196 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2229      	movs	r2, #41	; 0x29
 8003192:	2101      	movs	r1, #1
 8003194:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2228      	movs	r2, #40	; 0x28
 800319a:	2100      	movs	r1, #0
 800319c:	5499      	strb	r1, [r3, r2]

  return status;
 800319e:	2313      	movs	r3, #19
 80031a0:	18fb      	adds	r3, r7, r3
 80031a2:	781b      	ldrb	r3, [r3, #0]
}
 80031a4:	0018      	movs	r0, r3
 80031a6:	46bd      	mov	sp, r7
 80031a8:	b006      	add	sp, #24
 80031aa:	bdb0      	pop	{r4, r5, r7, pc}
 80031ac:	00ffff3f 	.word	0x00ffff3f

080031b0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68da      	ldr	r2, [r3, #12]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	21a0      	movs	r1, #160	; 0xa0
 80031c4:	438a      	bics	r2, r1
 80031c6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80031c8:	f7fe f9f6 	bl	80015b8 <HAL_GetTick>
 80031cc:	0003      	movs	r3, r0
 80031ce:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80031d0:	e00a      	b.n	80031e8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80031d2:	f7fe f9f1 	bl	80015b8 <HAL_GetTick>
 80031d6:	0002      	movs	r2, r0
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	1ad2      	subs	r2, r2, r3
 80031dc:	23fa      	movs	r3, #250	; 0xfa
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d901      	bls.n	80031e8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e006      	b.n	80031f6 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	2220      	movs	r2, #32
 80031f0:	4013      	ands	r3, r2
 80031f2:	d0ee      	beq.n	80031d2 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	0018      	movs	r0, r3
 80031f8:	46bd      	mov	sp, r7
 80031fa:	b004      	add	sp, #16
 80031fc:	bd80      	pop	{r7, pc}

080031fe <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b084      	sub	sp, #16
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8003206:	230f      	movs	r3, #15
 8003208:	18fb      	adds	r3, r7, r3
 800320a:	2200      	movs	r2, #0
 800320c:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	2240      	movs	r2, #64	; 0x40
 8003216:	4013      	ands	r3, r2
 8003218:	d12c      	bne.n	8003274 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68da      	ldr	r2, [r3, #12]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2180      	movs	r1, #128	; 0x80
 8003226:	430a      	orrs	r2, r1
 8003228:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800322a:	f7fe f9c5 	bl	80015b8 <HAL_GetTick>
 800322e:	0003      	movs	r3, r0
 8003230:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003232:	e014      	b.n	800325e <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8003234:	f7fe f9c0 	bl	80015b8 <HAL_GetTick>
 8003238:	0002      	movs	r2, r0
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	1ad2      	subs	r2, r2, r3
 800323e:	200f      	movs	r0, #15
 8003240:	183b      	adds	r3, r7, r0
 8003242:	1839      	adds	r1, r7, r0
 8003244:	7809      	ldrb	r1, [r1, #0]
 8003246:	7019      	strb	r1, [r3, #0]
 8003248:	23fa      	movs	r3, #250	; 0xfa
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	429a      	cmp	r2, r3
 800324e:	d906      	bls.n	800325e <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8003250:	183b      	adds	r3, r7, r0
 8003252:	2203      	movs	r2, #3
 8003254:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2229      	movs	r2, #41	; 0x29
 800325a:	2103      	movs	r1, #3
 800325c:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	2240      	movs	r2, #64	; 0x40
 8003266:	4013      	ands	r3, r2
 8003268:	d104      	bne.n	8003274 <RTC_EnterInitMode+0x76>
 800326a:	230f      	movs	r3, #15
 800326c:	18fb      	adds	r3, r7, r3
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	2b03      	cmp	r3, #3
 8003272:	d1df      	bne.n	8003234 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003274:	230f      	movs	r3, #15
 8003276:	18fb      	adds	r3, r7, r3
 8003278:	781b      	ldrb	r3, [r3, #0]
}
 800327a:	0018      	movs	r0, r3
 800327c:	46bd      	mov	sp, r7
 800327e:	b004      	add	sp, #16
 8003280:	bd80      	pop	{r7, pc}
	...

08003284 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003284:	b590      	push	{r4, r7, lr}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800328c:	240f      	movs	r4, #15
 800328e:	193b      	adds	r3, r7, r4
 8003290:	2200      	movs	r2, #0
 8003292:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003294:	4b1c      	ldr	r3, [pc, #112]	; (8003308 <RTC_ExitInitMode+0x84>)
 8003296:	68da      	ldr	r2, [r3, #12]
 8003298:	4b1b      	ldr	r3, [pc, #108]	; (8003308 <RTC_ExitInitMode+0x84>)
 800329a:	2180      	movs	r1, #128	; 0x80
 800329c:	438a      	bics	r2, r1
 800329e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80032a0:	4b19      	ldr	r3, [pc, #100]	; (8003308 <RTC_ExitInitMode+0x84>)
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	2220      	movs	r2, #32
 80032a6:	4013      	ands	r3, r2
 80032a8:	d10d      	bne.n	80032c6 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	0018      	movs	r0, r3
 80032ae:	f7ff ff7f 	bl	80031b0 <HAL_RTC_WaitForSynchro>
 80032b2:	1e03      	subs	r3, r0, #0
 80032b4:	d021      	beq.n	80032fa <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2229      	movs	r2, #41	; 0x29
 80032ba:	2103      	movs	r1, #3
 80032bc:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80032be:	193b      	adds	r3, r7, r4
 80032c0:	2203      	movs	r2, #3
 80032c2:	701a      	strb	r2, [r3, #0]
 80032c4:	e019      	b.n	80032fa <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80032c6:	4b10      	ldr	r3, [pc, #64]	; (8003308 <RTC_ExitInitMode+0x84>)
 80032c8:	699a      	ldr	r2, [r3, #24]
 80032ca:	4b0f      	ldr	r3, [pc, #60]	; (8003308 <RTC_ExitInitMode+0x84>)
 80032cc:	2120      	movs	r1, #32
 80032ce:	438a      	bics	r2, r1
 80032d0:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	0018      	movs	r0, r3
 80032d6:	f7ff ff6b 	bl	80031b0 <HAL_RTC_WaitForSynchro>
 80032da:	1e03      	subs	r3, r0, #0
 80032dc:	d007      	beq.n	80032ee <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2229      	movs	r2, #41	; 0x29
 80032e2:	2103      	movs	r1, #3
 80032e4:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80032e6:	230f      	movs	r3, #15
 80032e8:	18fb      	adds	r3, r7, r3
 80032ea:	2203      	movs	r2, #3
 80032ec:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80032ee:	4b06      	ldr	r3, [pc, #24]	; (8003308 <RTC_ExitInitMode+0x84>)
 80032f0:	699a      	ldr	r2, [r3, #24]
 80032f2:	4b05      	ldr	r3, [pc, #20]	; (8003308 <RTC_ExitInitMode+0x84>)
 80032f4:	2120      	movs	r1, #32
 80032f6:	430a      	orrs	r2, r1
 80032f8:	619a      	str	r2, [r3, #24]
  }

  return status;
 80032fa:	230f      	movs	r3, #15
 80032fc:	18fb      	adds	r3, r7, r3
 80032fe:	781b      	ldrb	r3, [r3, #0]
}
 8003300:	0018      	movs	r0, r3
 8003302:	46bd      	mov	sp, r7
 8003304:	b005      	add	sp, #20
 8003306:	bd90      	pop	{r4, r7, pc}
 8003308:	40002800 	.word	0x40002800

0800330c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	0002      	movs	r2, r0
 8003314:	1dfb      	adds	r3, r7, #7
 8003316:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8003318:	2300      	movs	r3, #0
 800331a:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800331c:	230b      	movs	r3, #11
 800331e:	18fb      	adds	r3, r7, r3
 8003320:	1dfa      	adds	r2, r7, #7
 8003322:	7812      	ldrb	r2, [r2, #0]
 8003324:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8003326:	e008      	b.n	800333a <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	3301      	adds	r3, #1
 800332c:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800332e:	220b      	movs	r2, #11
 8003330:	18bb      	adds	r3, r7, r2
 8003332:	18ba      	adds	r2, r7, r2
 8003334:	7812      	ldrb	r2, [r2, #0]
 8003336:	3a0a      	subs	r2, #10
 8003338:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 800333a:	210b      	movs	r1, #11
 800333c:	187b      	adds	r3, r7, r1
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2b09      	cmp	r3, #9
 8003342:	d8f1      	bhi.n	8003328 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	b2db      	uxtb	r3, r3
 8003348:	011b      	lsls	r3, r3, #4
 800334a:	b2da      	uxtb	r2, r3
 800334c:	187b      	adds	r3, r7, r1
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	4313      	orrs	r3, r2
 8003352:	b2db      	uxtb	r3, r3
}
 8003354:	0018      	movs	r0, r3
 8003356:	46bd      	mov	sp, r7
 8003358:	b004      	add	sp, #16
 800335a:	bd80      	pop	{r7, pc}

0800335c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2228      	movs	r2, #40	; 0x28
 800336c:	5c9b      	ldrb	r3, [r3, r2]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d101      	bne.n	8003376 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8003372:	2302      	movs	r3, #2
 8003374:	e082      	b.n	800347c <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2228      	movs	r2, #40	; 0x28
 800337a:	2101      	movs	r1, #1
 800337c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2229      	movs	r2, #41	; 0x29
 8003382:	2102      	movs	r1, #2
 8003384:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	22ca      	movs	r2, #202	; 0xca
 800338c:	625a      	str	r2, [r3, #36]	; 0x24
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2253      	movs	r2, #83	; 0x53
 8003394:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	699a      	ldr	r2, [r3, #24]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4938      	ldr	r1, [pc, #224]	; (8003484 <HAL_RTCEx_SetWakeUpTimer_IT+0x128>)
 80033a2:	400a      	ands	r2, r1
 80033a4:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2104      	movs	r1, #4
 80033b2:	430a      	orrs	r2, r1
 80033b4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80033b6:	4b34      	ldr	r3, [pc, #208]	; (8003488 <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>)
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	2240      	movs	r2, #64	; 0x40
 80033bc:	4013      	ands	r3, r2
 80033be:	d121      	bne.n	8003404 <HAL_RTCEx_SetWakeUpTimer_IT+0xa8>
  {
    tickstart = HAL_GetTick();
 80033c0:	f7fe f8fa 	bl	80015b8 <HAL_GetTick>
 80033c4:	0003      	movs	r3, r0
 80033c6:	617b      	str	r3, [r7, #20]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80033c8:	e016      	b.n	80033f8 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80033ca:	f7fe f8f5 	bl	80015b8 <HAL_GetTick>
 80033ce:	0002      	movs	r2, r0
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	1ad2      	subs	r2, r2, r3
 80033d4:	23fa      	movs	r3, #250	; 0xfa
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	429a      	cmp	r2, r3
 80033da:	d90d      	bls.n	80033f8 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	22ff      	movs	r2, #255	; 0xff
 80033e2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2229      	movs	r2, #41	; 0x29
 80033e8:	2103      	movs	r1, #3
 80033ea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2228      	movs	r2, #40	; 0x28
 80033f0:	2100      	movs	r1, #0
 80033f2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e041      	b.n	800347c <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	2204      	movs	r2, #4
 8003400:	4013      	ands	r3, r2
 8003402:	d0e2      	beq.n	80033ca <HAL_RTCEx_SetWakeUpTimer_IT+0x6e>
      }
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68ba      	ldr	r2, [r7, #8]
 800340a:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	699a      	ldr	r2, [r3, #24]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2107      	movs	r1, #7
 8003418:	438a      	bics	r2, r1
 800341a:	619a      	str	r2, [r3, #24]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6999      	ldr	r1, [r3, #24]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	430a      	orrs	r2, r1
 800342a:	619a      	str	r2, [r3, #24]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800342c:	4a17      	ldr	r2, [pc, #92]	; (800348c <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 800342e:	2380      	movs	r3, #128	; 0x80
 8003430:	58d3      	ldr	r3, [r2, r3]
 8003432:	4916      	ldr	r1, [pc, #88]	; (800348c <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 8003434:	2280      	movs	r2, #128	; 0x80
 8003436:	0312      	lsls	r2, r2, #12
 8003438:	4313      	orrs	r3, r2
 800343a:	2280      	movs	r2, #128	; 0x80
 800343c:	508b      	str	r3, [r1, r2]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	699a      	ldr	r2, [r3, #24]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2180      	movs	r1, #128	; 0x80
 800344a:	01c9      	lsls	r1, r1, #7
 800344c:	430a      	orrs	r2, r1
 800344e:	619a      	str	r2, [r3, #24]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	699a      	ldr	r2, [r3, #24]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2180      	movs	r1, #128	; 0x80
 800345c:	00c9      	lsls	r1, r1, #3
 800345e:	430a      	orrs	r2, r1
 8003460:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	22ff      	movs	r2, #255	; 0xff
 8003468:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2229      	movs	r2, #41	; 0x29
 800346e:	2101      	movs	r1, #1
 8003470:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2228      	movs	r2, #40	; 0x28
 8003476:	2100      	movs	r1, #0
 8003478:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	0018      	movs	r0, r3
 800347e:	46bd      	mov	sp, r7
 8003480:	b006      	add	sp, #24
 8003482:	bd80      	pop	{r7, pc}
 8003484:	fffffbff 	.word	0xfffffbff
 8003488:	40002800 	.word	0x40002800
 800348c:	40021800 	.word	0x40021800

08003490 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800349e:	2204      	movs	r2, #4
 80034a0:	4013      	ands	r3, r2
 80034a2:	d00b      	beq.n	80034bc <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2104      	movs	r1, #4
 80034b0:	430a      	orrs	r2, r1
 80034b2:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	0018      	movs	r0, r3
 80034b8:	f000 f808 	bl	80034cc <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2229      	movs	r2, #41	; 0x29
 80034c0:	2101      	movs	r1, #1
 80034c2:	5499      	strb	r1, [r3, r2]
}
 80034c4:	46c0      	nop			; (mov r8, r8)
 80034c6:	46bd      	mov	sp, r7
 80034c8:	b002      	add	sp, #8
 80034ca:	bd80      	pop	{r7, pc}

080034cc <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80034d4:	46c0      	nop			; (mov r8, r8)
 80034d6:	46bd      	mov	sp, r7
 80034d8:	b002      	add	sp, #8
 80034da:	bd80      	pop	{r7, pc}

080034dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e04a      	b.n	8003584 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	223d      	movs	r2, #61	; 0x3d
 80034f2:	5c9b      	ldrb	r3, [r3, r2]
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d107      	bne.n	800350a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	223c      	movs	r2, #60	; 0x3c
 80034fe:	2100      	movs	r1, #0
 8003500:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	0018      	movs	r0, r3
 8003506:	f7fd fdbb 	bl	8001080 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	223d      	movs	r2, #61	; 0x3d
 800350e:	2102      	movs	r1, #2
 8003510:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	3304      	adds	r3, #4
 800351a:	0019      	movs	r1, r3
 800351c:	0010      	movs	r0, r2
 800351e:	f000 fa09 	bl	8003934 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2248      	movs	r2, #72	; 0x48
 8003526:	2101      	movs	r1, #1
 8003528:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	223e      	movs	r2, #62	; 0x3e
 800352e:	2101      	movs	r1, #1
 8003530:	5499      	strb	r1, [r3, r2]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	223f      	movs	r2, #63	; 0x3f
 8003536:	2101      	movs	r1, #1
 8003538:	5499      	strb	r1, [r3, r2]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2240      	movs	r2, #64	; 0x40
 800353e:	2101      	movs	r1, #1
 8003540:	5499      	strb	r1, [r3, r2]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2241      	movs	r2, #65	; 0x41
 8003546:	2101      	movs	r1, #1
 8003548:	5499      	strb	r1, [r3, r2]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2242      	movs	r2, #66	; 0x42
 800354e:	2101      	movs	r1, #1
 8003550:	5499      	strb	r1, [r3, r2]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2243      	movs	r2, #67	; 0x43
 8003556:	2101      	movs	r1, #1
 8003558:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2244      	movs	r2, #68	; 0x44
 800355e:	2101      	movs	r1, #1
 8003560:	5499      	strb	r1, [r3, r2]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2245      	movs	r2, #69	; 0x45
 8003566:	2101      	movs	r1, #1
 8003568:	5499      	strb	r1, [r3, r2]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2246      	movs	r2, #70	; 0x46
 800356e:	2101      	movs	r1, #1
 8003570:	5499      	strb	r1, [r3, r2]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2247      	movs	r2, #71	; 0x47
 8003576:	2101      	movs	r1, #1
 8003578:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	223d      	movs	r2, #61	; 0x3d
 800357e:	2101      	movs	r1, #1
 8003580:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	0018      	movs	r0, r3
 8003586:	46bd      	mov	sp, r7
 8003588:	b002      	add	sp, #8
 800358a:	bd80      	pop	{r7, pc}

0800358c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	223d      	movs	r2, #61	; 0x3d
 8003598:	5c9b      	ldrb	r3, [r3, r2]
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b01      	cmp	r3, #1
 800359e:	d001      	beq.n	80035a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e03d      	b.n	8003620 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	223d      	movs	r2, #61	; 0x3d
 80035a8:	2102      	movs	r1, #2
 80035aa:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68da      	ldr	r2, [r3, #12]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2101      	movs	r1, #1
 80035b8:	430a      	orrs	r2, r1
 80035ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a19      	ldr	r2, [pc, #100]	; (8003628 <HAL_TIM_Base_Start_IT+0x9c>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d00a      	beq.n	80035dc <HAL_TIM_Base_Start_IT+0x50>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	2380      	movs	r3, #128	; 0x80
 80035cc:	05db      	lsls	r3, r3, #23
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d004      	beq.n	80035dc <HAL_TIM_Base_Start_IT+0x50>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a15      	ldr	r2, [pc, #84]	; (800362c <HAL_TIM_Base_Start_IT+0xa0>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d116      	bne.n	800360a <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	4a13      	ldr	r2, [pc, #76]	; (8003630 <HAL_TIM_Base_Start_IT+0xa4>)
 80035e4:	4013      	ands	r3, r2
 80035e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2b06      	cmp	r3, #6
 80035ec:	d016      	beq.n	800361c <HAL_TIM_Base_Start_IT+0x90>
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	2380      	movs	r3, #128	; 0x80
 80035f2:	025b      	lsls	r3, r3, #9
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d011      	beq.n	800361c <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2101      	movs	r1, #1
 8003604:	430a      	orrs	r2, r1
 8003606:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003608:	e008      	b.n	800361c <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2101      	movs	r1, #1
 8003616:	430a      	orrs	r2, r1
 8003618:	601a      	str	r2, [r3, #0]
 800361a:	e000      	b.n	800361e <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800361c:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	0018      	movs	r0, r3
 8003622:	46bd      	mov	sp, r7
 8003624:	b004      	add	sp, #16
 8003626:	bd80      	pop	{r7, pc}
 8003628:	40012c00 	.word	0x40012c00
 800362c:	40000400 	.word	0x40000400
 8003630:	00010007 	.word	0x00010007

08003634 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68da      	ldr	r2, [r3, #12]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2101      	movs	r1, #1
 8003648:	438a      	bics	r2, r1
 800364a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	4a0d      	ldr	r2, [pc, #52]	; (8003688 <HAL_TIM_Base_Stop_IT+0x54>)
 8003654:	4013      	ands	r3, r2
 8003656:	d10d      	bne.n	8003674 <HAL_TIM_Base_Stop_IT+0x40>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	4a0b      	ldr	r2, [pc, #44]	; (800368c <HAL_TIM_Base_Stop_IT+0x58>)
 8003660:	4013      	ands	r3, r2
 8003662:	d107      	bne.n	8003674 <HAL_TIM_Base_Stop_IT+0x40>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2101      	movs	r1, #1
 8003670:	438a      	bics	r2, r1
 8003672:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	223d      	movs	r2, #61	; 0x3d
 8003678:	2101      	movs	r1, #1
 800367a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	0018      	movs	r0, r3
 8003680:	46bd      	mov	sp, r7
 8003682:	b002      	add	sp, #8
 8003684:	bd80      	pop	{r7, pc}
 8003686:	46c0      	nop			; (mov r8, r8)
 8003688:	00001111 	.word	0x00001111
 800368c:	00000444 	.word	0x00000444

08003690 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	2202      	movs	r2, #2
 80036a0:	4013      	ands	r3, r2
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d124      	bne.n	80036f0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	2202      	movs	r2, #2
 80036ae:	4013      	ands	r3, r2
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d11d      	bne.n	80036f0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2203      	movs	r2, #3
 80036ba:	4252      	negs	r2, r2
 80036bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2201      	movs	r2, #1
 80036c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	2203      	movs	r2, #3
 80036cc:	4013      	ands	r3, r2
 80036ce:	d004      	beq.n	80036da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	0018      	movs	r0, r3
 80036d4:	f000 f916 	bl	8003904 <HAL_TIM_IC_CaptureCallback>
 80036d8:	e007      	b.n	80036ea <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	0018      	movs	r0, r3
 80036de:	f000 f909 	bl	80038f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	0018      	movs	r0, r3
 80036e6:	f000 f915 	bl	8003914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	2204      	movs	r2, #4
 80036f8:	4013      	ands	r3, r2
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	d125      	bne.n	800374a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	2204      	movs	r2, #4
 8003706:	4013      	ands	r3, r2
 8003708:	2b04      	cmp	r3, #4
 800370a:	d11e      	bne.n	800374a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2205      	movs	r2, #5
 8003712:	4252      	negs	r2, r2
 8003714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2202      	movs	r2, #2
 800371a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699a      	ldr	r2, [r3, #24]
 8003722:	23c0      	movs	r3, #192	; 0xc0
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	4013      	ands	r3, r2
 8003728:	d004      	beq.n	8003734 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	0018      	movs	r0, r3
 800372e:	f000 f8e9 	bl	8003904 <HAL_TIM_IC_CaptureCallback>
 8003732:	e007      	b.n	8003744 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	0018      	movs	r0, r3
 8003738:	f000 f8dc 	bl	80038f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	0018      	movs	r0, r3
 8003740:	f000 f8e8 	bl	8003914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	2208      	movs	r2, #8
 8003752:	4013      	ands	r3, r2
 8003754:	2b08      	cmp	r3, #8
 8003756:	d124      	bne.n	80037a2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	2208      	movs	r2, #8
 8003760:	4013      	ands	r3, r2
 8003762:	2b08      	cmp	r3, #8
 8003764:	d11d      	bne.n	80037a2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2209      	movs	r2, #9
 800376c:	4252      	negs	r2, r2
 800376e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2204      	movs	r2, #4
 8003774:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	69db      	ldr	r3, [r3, #28]
 800377c:	2203      	movs	r2, #3
 800377e:	4013      	ands	r3, r2
 8003780:	d004      	beq.n	800378c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	0018      	movs	r0, r3
 8003786:	f000 f8bd 	bl	8003904 <HAL_TIM_IC_CaptureCallback>
 800378a:	e007      	b.n	800379c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	0018      	movs	r0, r3
 8003790:	f000 f8b0 	bl	80038f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	0018      	movs	r0, r3
 8003798:	f000 f8bc 	bl	8003914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	2210      	movs	r2, #16
 80037aa:	4013      	ands	r3, r2
 80037ac:	2b10      	cmp	r3, #16
 80037ae:	d125      	bne.n	80037fc <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	2210      	movs	r2, #16
 80037b8:	4013      	ands	r3, r2
 80037ba:	2b10      	cmp	r3, #16
 80037bc:	d11e      	bne.n	80037fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2211      	movs	r2, #17
 80037c4:	4252      	negs	r2, r2
 80037c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2208      	movs	r2, #8
 80037cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	69da      	ldr	r2, [r3, #28]
 80037d4:	23c0      	movs	r3, #192	; 0xc0
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	4013      	ands	r3, r2
 80037da:	d004      	beq.n	80037e6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	0018      	movs	r0, r3
 80037e0:	f000 f890 	bl	8003904 <HAL_TIM_IC_CaptureCallback>
 80037e4:	e007      	b.n	80037f6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	0018      	movs	r0, r3
 80037ea:	f000 f883 	bl	80038f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	0018      	movs	r0, r3
 80037f2:	f000 f88f 	bl	8003914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	2201      	movs	r2, #1
 8003804:	4013      	ands	r3, r2
 8003806:	2b01      	cmp	r3, #1
 8003808:	d10f      	bne.n	800382a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	2201      	movs	r2, #1
 8003812:	4013      	ands	r3, r2
 8003814:	2b01      	cmp	r3, #1
 8003816:	d108      	bne.n	800382a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2202      	movs	r2, #2
 800381e:	4252      	negs	r2, r2
 8003820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	0018      	movs	r0, r3
 8003826:	f7fd fb8f 	bl	8000f48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	2280      	movs	r2, #128	; 0x80
 8003832:	4013      	ands	r3, r2
 8003834:	2b80      	cmp	r3, #128	; 0x80
 8003836:	d10f      	bne.n	8003858 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	2280      	movs	r2, #128	; 0x80
 8003840:	4013      	ands	r3, r2
 8003842:	2b80      	cmp	r3, #128	; 0x80
 8003844:	d108      	bne.n	8003858 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2281      	movs	r2, #129	; 0x81
 800384c:	4252      	negs	r2, r2
 800384e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	0018      	movs	r0, r3
 8003854:	f000 f8ec 	bl	8003a30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	691a      	ldr	r2, [r3, #16]
 800385e:	2380      	movs	r3, #128	; 0x80
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	401a      	ands	r2, r3
 8003864:	2380      	movs	r3, #128	; 0x80
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	429a      	cmp	r2, r3
 800386a:	d10e      	bne.n	800388a <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	2280      	movs	r2, #128	; 0x80
 8003874:	4013      	ands	r3, r2
 8003876:	2b80      	cmp	r3, #128	; 0x80
 8003878:	d107      	bne.n	800388a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a1c      	ldr	r2, [pc, #112]	; (80038f0 <HAL_TIM_IRQHandler+0x260>)
 8003880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	0018      	movs	r0, r3
 8003886:	f000 f8db 	bl	8003a40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	2240      	movs	r2, #64	; 0x40
 8003892:	4013      	ands	r3, r2
 8003894:	2b40      	cmp	r3, #64	; 0x40
 8003896:	d10f      	bne.n	80038b8 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	2240      	movs	r2, #64	; 0x40
 80038a0:	4013      	ands	r3, r2
 80038a2:	2b40      	cmp	r3, #64	; 0x40
 80038a4:	d108      	bne.n	80038b8 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2241      	movs	r2, #65	; 0x41
 80038ac:	4252      	negs	r2, r2
 80038ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	0018      	movs	r0, r3
 80038b4:	f000 f836 	bl	8003924 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	2220      	movs	r2, #32
 80038c0:	4013      	ands	r3, r2
 80038c2:	2b20      	cmp	r3, #32
 80038c4:	d10f      	bne.n	80038e6 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	2220      	movs	r2, #32
 80038ce:	4013      	ands	r3, r2
 80038d0:	2b20      	cmp	r3, #32
 80038d2:	d108      	bne.n	80038e6 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2221      	movs	r2, #33	; 0x21
 80038da:	4252      	negs	r2, r2
 80038dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	0018      	movs	r0, r3
 80038e2:	f000 f89d 	bl	8003a20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038e6:	46c0      	nop			; (mov r8, r8)
 80038e8:	46bd      	mov	sp, r7
 80038ea:	b002      	add	sp, #8
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	46c0      	nop			; (mov r8, r8)
 80038f0:	fffffeff 	.word	0xfffffeff

080038f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038fc:	46c0      	nop			; (mov r8, r8)
 80038fe:	46bd      	mov	sp, r7
 8003900:	b002      	add	sp, #8
 8003902:	bd80      	pop	{r7, pc}

08003904 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800390c:	46c0      	nop			; (mov r8, r8)
 800390e:	46bd      	mov	sp, r7
 8003910:	b002      	add	sp, #8
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800391c:	46c0      	nop			; (mov r8, r8)
 800391e:	46bd      	mov	sp, r7
 8003920:	b002      	add	sp, #8
 8003922:	bd80      	pop	{r7, pc}

08003924 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800392c:	46c0      	nop			; (mov r8, r8)
 800392e:	46bd      	mov	sp, r7
 8003930:	b002      	add	sp, #8
 8003932:	bd80      	pop	{r7, pc}

08003934 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a30      	ldr	r2, [pc, #192]	; (8003a08 <TIM_Base_SetConfig+0xd4>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d008      	beq.n	800395e <TIM_Base_SetConfig+0x2a>
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	2380      	movs	r3, #128	; 0x80
 8003950:	05db      	lsls	r3, r3, #23
 8003952:	429a      	cmp	r2, r3
 8003954:	d003      	beq.n	800395e <TIM_Base_SetConfig+0x2a>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a2c      	ldr	r2, [pc, #176]	; (8003a0c <TIM_Base_SetConfig+0xd8>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d108      	bne.n	8003970 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2270      	movs	r2, #112	; 0x70
 8003962:	4393      	bics	r3, r2
 8003964:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	4313      	orrs	r3, r2
 800396e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a25      	ldr	r2, [pc, #148]	; (8003a08 <TIM_Base_SetConfig+0xd4>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d014      	beq.n	80039a2 <TIM_Base_SetConfig+0x6e>
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	2380      	movs	r3, #128	; 0x80
 800397c:	05db      	lsls	r3, r3, #23
 800397e:	429a      	cmp	r2, r3
 8003980:	d00f      	beq.n	80039a2 <TIM_Base_SetConfig+0x6e>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a21      	ldr	r2, [pc, #132]	; (8003a0c <TIM_Base_SetConfig+0xd8>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d00b      	beq.n	80039a2 <TIM_Base_SetConfig+0x6e>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a20      	ldr	r2, [pc, #128]	; (8003a10 <TIM_Base_SetConfig+0xdc>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d007      	beq.n	80039a2 <TIM_Base_SetConfig+0x6e>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a1f      	ldr	r2, [pc, #124]	; (8003a14 <TIM_Base_SetConfig+0xe0>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d003      	beq.n	80039a2 <TIM_Base_SetConfig+0x6e>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a1e      	ldr	r2, [pc, #120]	; (8003a18 <TIM_Base_SetConfig+0xe4>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d108      	bne.n	80039b4 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	4a1d      	ldr	r2, [pc, #116]	; (8003a1c <TIM_Base_SetConfig+0xe8>)
 80039a6:	4013      	ands	r3, r2
 80039a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2280      	movs	r2, #128	; 0x80
 80039b8:	4393      	bics	r3, r2
 80039ba:	001a      	movs	r2, r3
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	695b      	ldr	r3, [r3, #20]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	689a      	ldr	r2, [r3, #8]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a0a      	ldr	r2, [pc, #40]	; (8003a08 <TIM_Base_SetConfig+0xd4>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d007      	beq.n	80039f2 <TIM_Base_SetConfig+0xbe>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a0b      	ldr	r2, [pc, #44]	; (8003a14 <TIM_Base_SetConfig+0xe0>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d003      	beq.n	80039f2 <TIM_Base_SetConfig+0xbe>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a0a      	ldr	r2, [pc, #40]	; (8003a18 <TIM_Base_SetConfig+0xe4>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d103      	bne.n	80039fa <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	691a      	ldr	r2, [r3, #16]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	615a      	str	r2, [r3, #20]
}
 8003a00:	46c0      	nop			; (mov r8, r8)
 8003a02:	46bd      	mov	sp, r7
 8003a04:	b004      	add	sp, #16
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	40012c00 	.word	0x40012c00
 8003a0c:	40000400 	.word	0x40000400
 8003a10:	40002000 	.word	0x40002000
 8003a14:	40014400 	.word	0x40014400
 8003a18:	40014800 	.word	0x40014800
 8003a1c:	fffffcff 	.word	0xfffffcff

08003a20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a28:	46c0      	nop			; (mov r8, r8)
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	b002      	add	sp, #8
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a38:	46c0      	nop			; (mov r8, r8)
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	b002      	add	sp, #8
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003a48:	46c0      	nop			; (mov r8, r8)
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	b002      	add	sp, #8
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e046      	b.n	8003af0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2288      	movs	r2, #136	; 0x88
 8003a66:	589b      	ldr	r3, [r3, r2]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d107      	bne.n	8003a7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2284      	movs	r2, #132	; 0x84
 8003a70:	2100      	movs	r1, #0
 8003a72:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	0018      	movs	r0, r3
 8003a78:	f7fd fb48 	bl	800110c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2288      	movs	r2, #136	; 0x88
 8003a80:	2124      	movs	r1, #36	; 0x24
 8003a82:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2101      	movs	r1, #1
 8003a90:	438a      	bics	r2, r1
 8003a92:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	0018      	movs	r0, r3
 8003a98:	f000 fc12 	bl	80042c0 <UART_SetConfig>
 8003a9c:	0003      	movs	r3, r0
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d101      	bne.n	8003aa6 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e024      	b.n	8003af0 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	0018      	movs	r0, r3
 8003ab2:	f000 fe7d 	bl	80047b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	490d      	ldr	r1, [pc, #52]	; (8003af8 <HAL_UART_Init+0xa8>)
 8003ac2:	400a      	ands	r2, r1
 8003ac4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	689a      	ldr	r2, [r3, #8]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	212a      	movs	r1, #42	; 0x2a
 8003ad2:	438a      	bics	r2, r1
 8003ad4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2101      	movs	r1, #1
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	0018      	movs	r0, r3
 8003aea:	f000 ff15 	bl	8004918 <UART_CheckIdleState>
 8003aee:	0003      	movs	r3, r0
}
 8003af0:	0018      	movs	r0, r3
 8003af2:	46bd      	mov	sp, r7
 8003af4:	b002      	add	sp, #8
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	ffffb7ff 	.word	0xffffb7ff

08003afc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b08a      	sub	sp, #40	; 0x28
 8003b00:	af02      	add	r7, sp, #8
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	603b      	str	r3, [r7, #0]
 8003b08:	1dbb      	adds	r3, r7, #6
 8003b0a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2288      	movs	r2, #136	; 0x88
 8003b10:	589b      	ldr	r3, [r3, r2]
 8003b12:	2b20      	cmp	r3, #32
 8003b14:	d000      	beq.n	8003b18 <HAL_UART_Transmit+0x1c>
 8003b16:	e088      	b.n	8003c2a <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_UART_Transmit+0x2a>
 8003b1e:	1dbb      	adds	r3, r7, #6
 8003b20:	881b      	ldrh	r3, [r3, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e080      	b.n	8003c2c <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	689a      	ldr	r2, [r3, #8]
 8003b2e:	2380      	movs	r3, #128	; 0x80
 8003b30:	015b      	lsls	r3, r3, #5
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d109      	bne.n	8003b4a <HAL_UART_Transmit+0x4e>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d105      	bne.n	8003b4a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	2201      	movs	r2, #1
 8003b42:	4013      	ands	r3, r2
 8003b44:	d001      	beq.n	8003b4a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e070      	b.n	8003c2c <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2290      	movs	r2, #144	; 0x90
 8003b4e:	2100      	movs	r1, #0
 8003b50:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2288      	movs	r2, #136	; 0x88
 8003b56:	2121      	movs	r1, #33	; 0x21
 8003b58:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b5a:	f7fd fd2d 	bl	80015b8 <HAL_GetTick>
 8003b5e:	0003      	movs	r3, r0
 8003b60:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	1dba      	adds	r2, r7, #6
 8003b66:	2154      	movs	r1, #84	; 0x54
 8003b68:	8812      	ldrh	r2, [r2, #0]
 8003b6a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	1dba      	adds	r2, r7, #6
 8003b70:	2156      	movs	r1, #86	; 0x56
 8003b72:	8812      	ldrh	r2, [r2, #0]
 8003b74:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	689a      	ldr	r2, [r3, #8]
 8003b7a:	2380      	movs	r3, #128	; 0x80
 8003b7c:	015b      	lsls	r3, r3, #5
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d108      	bne.n	8003b94 <HAL_UART_Transmit+0x98>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d104      	bne.n	8003b94 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	61bb      	str	r3, [r7, #24]
 8003b92:	e003      	b.n	8003b9c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b9c:	e02c      	b.n	8003bf8 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	0013      	movs	r3, r2
 8003ba8:	2200      	movs	r2, #0
 8003baa:	2180      	movs	r1, #128	; 0x80
 8003bac:	f000 ff02 	bl	80049b4 <UART_WaitOnFlagUntilTimeout>
 8003bb0:	1e03      	subs	r3, r0, #0
 8003bb2:	d001      	beq.n	8003bb8 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e039      	b.n	8003c2c <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10b      	bne.n	8003bd6 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	881b      	ldrh	r3, [r3, #0]
 8003bc2:	001a      	movs	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	05d2      	lsls	r2, r2, #23
 8003bca:	0dd2      	lsrs	r2, r2, #23
 8003bcc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	3302      	adds	r3, #2
 8003bd2:	61bb      	str	r3, [r7, #24]
 8003bd4:	e007      	b.n	8003be6 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	781a      	ldrb	r2, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	3301      	adds	r3, #1
 8003be4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2256      	movs	r2, #86	; 0x56
 8003bea:	5a9b      	ldrh	r3, [r3, r2]
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	b299      	uxth	r1, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2256      	movs	r2, #86	; 0x56
 8003bf6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2256      	movs	r2, #86	; 0x56
 8003bfc:	5a9b      	ldrh	r3, [r3, r2]
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1cc      	bne.n	8003b9e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	0013      	movs	r3, r2
 8003c0e:	2200      	movs	r2, #0
 8003c10:	2140      	movs	r1, #64	; 0x40
 8003c12:	f000 fecf 	bl	80049b4 <UART_WaitOnFlagUntilTimeout>
 8003c16:	1e03      	subs	r3, r0, #0
 8003c18:	d001      	beq.n	8003c1e <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e006      	b.n	8003c2c <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2288      	movs	r2, #136	; 0x88
 8003c22:	2120      	movs	r1, #32
 8003c24:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003c26:	2300      	movs	r3, #0
 8003c28:	e000      	b.n	8003c2c <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8003c2a:	2302      	movs	r3, #2
  }
}
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	b008      	add	sp, #32
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c34:	b5b0      	push	{r4, r5, r7, lr}
 8003c36:	b0aa      	sub	sp, #168	; 0xa8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	69db      	ldr	r3, [r3, #28]
 8003c42:	22a4      	movs	r2, #164	; 0xa4
 8003c44:	18b9      	adds	r1, r7, r2
 8003c46:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	20a0      	movs	r0, #160	; 0xa0
 8003c50:	1839      	adds	r1, r7, r0
 8003c52:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	249c      	movs	r4, #156	; 0x9c
 8003c5c:	1939      	adds	r1, r7, r4
 8003c5e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003c60:	0011      	movs	r1, r2
 8003c62:	18bb      	adds	r3, r7, r2
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4aa2      	ldr	r2, [pc, #648]	; (8003ef0 <HAL_UART_IRQHandler+0x2bc>)
 8003c68:	4013      	ands	r3, r2
 8003c6a:	2298      	movs	r2, #152	; 0x98
 8003c6c:	18bd      	adds	r5, r7, r2
 8003c6e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8003c70:	18bb      	adds	r3, r7, r2
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d11a      	bne.n	8003cae <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003c78:	187b      	adds	r3, r7, r1
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2220      	movs	r2, #32
 8003c7e:	4013      	ands	r3, r2
 8003c80:	d015      	beq.n	8003cae <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003c82:	183b      	adds	r3, r7, r0
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2220      	movs	r2, #32
 8003c88:	4013      	ands	r3, r2
 8003c8a:	d105      	bne.n	8003c98 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003c8c:	193b      	adds	r3, r7, r4
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	2380      	movs	r3, #128	; 0x80
 8003c92:	055b      	lsls	r3, r3, #21
 8003c94:	4013      	ands	r3, r2
 8003c96:	d00a      	beq.n	8003cae <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d100      	bne.n	8003ca2 <HAL_UART_IRQHandler+0x6e>
 8003ca0:	e2dc      	b.n	800425c <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	0010      	movs	r0, r2
 8003caa:	4798      	blx	r3
      }
      return;
 8003cac:	e2d6      	b.n	800425c <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003cae:	2398      	movs	r3, #152	; 0x98
 8003cb0:	18fb      	adds	r3, r7, r3
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d100      	bne.n	8003cba <HAL_UART_IRQHandler+0x86>
 8003cb8:	e122      	b.n	8003f00 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003cba:	239c      	movs	r3, #156	; 0x9c
 8003cbc:	18fb      	adds	r3, r7, r3
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a8c      	ldr	r2, [pc, #560]	; (8003ef4 <HAL_UART_IRQHandler+0x2c0>)
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	d106      	bne.n	8003cd4 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003cc6:	23a0      	movs	r3, #160	; 0xa0
 8003cc8:	18fb      	adds	r3, r7, r3
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a8a      	ldr	r2, [pc, #552]	; (8003ef8 <HAL_UART_IRQHandler+0x2c4>)
 8003cce:	4013      	ands	r3, r2
 8003cd0:	d100      	bne.n	8003cd4 <HAL_UART_IRQHandler+0xa0>
 8003cd2:	e115      	b.n	8003f00 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003cd4:	23a4      	movs	r3, #164	; 0xa4
 8003cd6:	18fb      	adds	r3, r7, r3
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	4013      	ands	r3, r2
 8003cde:	d012      	beq.n	8003d06 <HAL_UART_IRQHandler+0xd2>
 8003ce0:	23a0      	movs	r3, #160	; 0xa0
 8003ce2:	18fb      	adds	r3, r7, r3
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	2380      	movs	r3, #128	; 0x80
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	4013      	ands	r3, r2
 8003cec:	d00b      	beq.n	8003d06 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2290      	movs	r2, #144	; 0x90
 8003cfa:	589b      	ldr	r3, [r3, r2]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2190      	movs	r1, #144	; 0x90
 8003d04:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d06:	23a4      	movs	r3, #164	; 0xa4
 8003d08:	18fb      	adds	r3, r7, r3
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2202      	movs	r2, #2
 8003d0e:	4013      	ands	r3, r2
 8003d10:	d011      	beq.n	8003d36 <HAL_UART_IRQHandler+0x102>
 8003d12:	239c      	movs	r3, #156	; 0x9c
 8003d14:	18fb      	adds	r3, r7, r3
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	d00b      	beq.n	8003d36 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2202      	movs	r2, #2
 8003d24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2290      	movs	r2, #144	; 0x90
 8003d2a:	589b      	ldr	r3, [r3, r2]
 8003d2c:	2204      	movs	r2, #4
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2190      	movs	r1, #144	; 0x90
 8003d34:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d36:	23a4      	movs	r3, #164	; 0xa4
 8003d38:	18fb      	adds	r3, r7, r3
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2204      	movs	r2, #4
 8003d3e:	4013      	ands	r3, r2
 8003d40:	d011      	beq.n	8003d66 <HAL_UART_IRQHandler+0x132>
 8003d42:	239c      	movs	r3, #156	; 0x9c
 8003d44:	18fb      	adds	r3, r7, r3
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	d00b      	beq.n	8003d66 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2204      	movs	r2, #4
 8003d54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2290      	movs	r2, #144	; 0x90
 8003d5a:	589b      	ldr	r3, [r3, r2]
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2190      	movs	r1, #144	; 0x90
 8003d64:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003d66:	23a4      	movs	r3, #164	; 0xa4
 8003d68:	18fb      	adds	r3, r7, r3
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2208      	movs	r2, #8
 8003d6e:	4013      	ands	r3, r2
 8003d70:	d017      	beq.n	8003da2 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003d72:	23a0      	movs	r3, #160	; 0xa0
 8003d74:	18fb      	adds	r3, r7, r3
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	d105      	bne.n	8003d8a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003d7e:	239c      	movs	r3, #156	; 0x9c
 8003d80:	18fb      	adds	r3, r7, r3
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a5b      	ldr	r2, [pc, #364]	; (8003ef4 <HAL_UART_IRQHandler+0x2c0>)
 8003d86:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003d88:	d00b      	beq.n	8003da2 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2208      	movs	r2, #8
 8003d90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2290      	movs	r2, #144	; 0x90
 8003d96:	589b      	ldr	r3, [r3, r2]
 8003d98:	2208      	movs	r2, #8
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2190      	movs	r1, #144	; 0x90
 8003da0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003da2:	23a4      	movs	r3, #164	; 0xa4
 8003da4:	18fb      	adds	r3, r7, r3
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	2380      	movs	r3, #128	; 0x80
 8003daa:	011b      	lsls	r3, r3, #4
 8003dac:	4013      	ands	r3, r2
 8003dae:	d013      	beq.n	8003dd8 <HAL_UART_IRQHandler+0x1a4>
 8003db0:	23a0      	movs	r3, #160	; 0xa0
 8003db2:	18fb      	adds	r3, r7, r3
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	2380      	movs	r3, #128	; 0x80
 8003db8:	04db      	lsls	r3, r3, #19
 8003dba:	4013      	ands	r3, r2
 8003dbc:	d00c      	beq.n	8003dd8 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2280      	movs	r2, #128	; 0x80
 8003dc4:	0112      	lsls	r2, r2, #4
 8003dc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2290      	movs	r2, #144	; 0x90
 8003dcc:	589b      	ldr	r3, [r3, r2]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2190      	movs	r1, #144	; 0x90
 8003dd6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2290      	movs	r2, #144	; 0x90
 8003ddc:	589b      	ldr	r3, [r3, r2]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d100      	bne.n	8003de4 <HAL_UART_IRQHandler+0x1b0>
 8003de2:	e23d      	b.n	8004260 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003de4:	23a4      	movs	r3, #164	; 0xa4
 8003de6:	18fb      	adds	r3, r7, r3
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2220      	movs	r2, #32
 8003dec:	4013      	ands	r3, r2
 8003dee:	d015      	beq.n	8003e1c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003df0:	23a0      	movs	r3, #160	; 0xa0
 8003df2:	18fb      	adds	r3, r7, r3
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2220      	movs	r2, #32
 8003df8:	4013      	ands	r3, r2
 8003dfa:	d106      	bne.n	8003e0a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003dfc:	239c      	movs	r3, #156	; 0x9c
 8003dfe:	18fb      	adds	r3, r7, r3
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	2380      	movs	r3, #128	; 0x80
 8003e04:	055b      	lsls	r3, r3, #21
 8003e06:	4013      	ands	r3, r2
 8003e08:	d008      	beq.n	8003e1c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d004      	beq.n	8003e1c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	0010      	movs	r0, r2
 8003e1a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2290      	movs	r2, #144	; 0x90
 8003e20:	589b      	ldr	r3, [r3, r2]
 8003e22:	2194      	movs	r1, #148	; 0x94
 8003e24:	187a      	adds	r2, r7, r1
 8003e26:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	2240      	movs	r2, #64	; 0x40
 8003e30:	4013      	ands	r3, r2
 8003e32:	2b40      	cmp	r3, #64	; 0x40
 8003e34:	d004      	beq.n	8003e40 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003e36:	187b      	adds	r3, r7, r1
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2228      	movs	r2, #40	; 0x28
 8003e3c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e3e:	d04c      	beq.n	8003eda <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	0018      	movs	r0, r3
 8003e44:	f000 ff64 	bl	8004d10 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	2240      	movs	r2, #64	; 0x40
 8003e50:	4013      	ands	r3, r2
 8003e52:	2b40      	cmp	r3, #64	; 0x40
 8003e54:	d13c      	bne.n	8003ed0 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e56:	f3ef 8310 	mrs	r3, PRIMASK
 8003e5a:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003e5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e5e:	2090      	movs	r0, #144	; 0x90
 8003e60:	183a      	adds	r2, r7, r0
 8003e62:	6013      	str	r3, [r2, #0]
 8003e64:	2301      	movs	r3, #1
 8003e66:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e6a:	f383 8810 	msr	PRIMASK, r3
}
 8003e6e:	46c0      	nop			; (mov r8, r8)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689a      	ldr	r2, [r3, #8]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2140      	movs	r1, #64	; 0x40
 8003e7c:	438a      	bics	r2, r1
 8003e7e:	609a      	str	r2, [r3, #8]
 8003e80:	183b      	adds	r3, r7, r0
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e88:	f383 8810 	msr	PRIMASK, r3
}
 8003e8c:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2280      	movs	r2, #128	; 0x80
 8003e92:	589b      	ldr	r3, [r3, r2]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d016      	beq.n	8003ec6 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2280      	movs	r2, #128	; 0x80
 8003e9c:	589b      	ldr	r3, [r3, r2]
 8003e9e:	4a17      	ldr	r2, [pc, #92]	; (8003efc <HAL_UART_IRQHandler+0x2c8>)
 8003ea0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2280      	movs	r2, #128	; 0x80
 8003ea6:	589b      	ldr	r3, [r3, r2]
 8003ea8:	0018      	movs	r0, r3
 8003eaa:	f7fd fddf 	bl	8001a6c <HAL_DMA_Abort_IT>
 8003eae:	1e03      	subs	r3, r0, #0
 8003eb0:	d01c      	beq.n	8003eec <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2280      	movs	r2, #128	; 0x80
 8003eb6:	589b      	ldr	r3, [r3, r2]
 8003eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	2180      	movs	r1, #128	; 0x80
 8003ebe:	5852      	ldr	r2, [r2, r1]
 8003ec0:	0010      	movs	r0, r2
 8003ec2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec4:	e012      	b.n	8003eec <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	0018      	movs	r0, r3
 8003eca:	f000 f9f1 	bl	80042b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ece:	e00d      	b.n	8003eec <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	0018      	movs	r0, r3
 8003ed4:	f000 f9ec 	bl	80042b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed8:	e008      	b.n	8003eec <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	0018      	movs	r0, r3
 8003ede:	f000 f9e7 	bl	80042b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2290      	movs	r2, #144	; 0x90
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003eea:	e1b9      	b.n	8004260 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eec:	46c0      	nop			; (mov r8, r8)
    return;
 8003eee:	e1b7      	b.n	8004260 <HAL_UART_IRQHandler+0x62c>
 8003ef0:	0000080f 	.word	0x0000080f
 8003ef4:	10000001 	.word	0x10000001
 8003ef8:	04000120 	.word	0x04000120
 8003efc:	08004fd5 	.word	0x08004fd5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d000      	beq.n	8003f0a <HAL_UART_IRQHandler+0x2d6>
 8003f08:	e13e      	b.n	8004188 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003f0a:	23a4      	movs	r3, #164	; 0xa4
 8003f0c:	18fb      	adds	r3, r7, r3
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2210      	movs	r2, #16
 8003f12:	4013      	ands	r3, r2
 8003f14:	d100      	bne.n	8003f18 <HAL_UART_IRQHandler+0x2e4>
 8003f16:	e137      	b.n	8004188 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003f18:	23a0      	movs	r3, #160	; 0xa0
 8003f1a:	18fb      	adds	r3, r7, r3
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2210      	movs	r2, #16
 8003f20:	4013      	ands	r3, r2
 8003f22:	d100      	bne.n	8003f26 <HAL_UART_IRQHandler+0x2f2>
 8003f24:	e130      	b.n	8004188 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2210      	movs	r2, #16
 8003f2c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	2240      	movs	r2, #64	; 0x40
 8003f36:	4013      	ands	r3, r2
 8003f38:	2b40      	cmp	r3, #64	; 0x40
 8003f3a:	d000      	beq.n	8003f3e <HAL_UART_IRQHandler+0x30a>
 8003f3c:	e0a4      	b.n	8004088 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2280      	movs	r2, #128	; 0x80
 8003f42:	589b      	ldr	r3, [r3, r2]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	217e      	movs	r1, #126	; 0x7e
 8003f4a:	187b      	adds	r3, r7, r1
 8003f4c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003f4e:	187b      	adds	r3, r7, r1
 8003f50:	881b      	ldrh	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d100      	bne.n	8003f58 <HAL_UART_IRQHandler+0x324>
 8003f56:	e185      	b.n	8004264 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	225c      	movs	r2, #92	; 0x5c
 8003f5c:	5a9b      	ldrh	r3, [r3, r2]
 8003f5e:	187a      	adds	r2, r7, r1
 8003f60:	8812      	ldrh	r2, [r2, #0]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d300      	bcc.n	8003f68 <HAL_UART_IRQHandler+0x334>
 8003f66:	e17d      	b.n	8004264 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	187a      	adds	r2, r7, r1
 8003f6c:	215e      	movs	r1, #94	; 0x5e
 8003f6e:	8812      	ldrh	r2, [r2, #0]
 8003f70:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2280      	movs	r2, #128	; 0x80
 8003f76:	589b      	ldr	r3, [r3, r2]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	4013      	ands	r3, r2
 8003f80:	d170      	bne.n	8004064 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f82:	f3ef 8310 	mrs	r3, PRIMASK
 8003f86:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f8a:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f92:	f383 8810 	msr	PRIMASK, r3
}
 8003f96:	46c0      	nop			; (mov r8, r8)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	49b4      	ldr	r1, [pc, #720]	; (8004274 <HAL_UART_IRQHandler+0x640>)
 8003fa4:	400a      	ands	r2, r1
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003faa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fae:	f383 8810 	msr	PRIMASK, r3
}
 8003fb2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fb4:	f3ef 8310 	mrs	r3, PRIMASK
 8003fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fbc:	677b      	str	r3, [r7, #116]	; 0x74
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fc4:	f383 8810 	msr	PRIMASK, r3
}
 8003fc8:	46c0      	nop			; (mov r8, r8)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	689a      	ldr	r2, [r3, #8]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2101      	movs	r1, #1
 8003fd6:	438a      	bics	r2, r1
 8003fd8:	609a      	str	r2, [r3, #8]
 8003fda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fdc:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fe0:	f383 8810 	msr	PRIMASK, r3
}
 8003fe4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fe6:	f3ef 8310 	mrs	r3, PRIMASK
 8003fea:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003fec:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fee:	673b      	str	r3, [r7, #112]	; 0x70
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ff6:	f383 8810 	msr	PRIMASK, r3
}
 8003ffa:	46c0      	nop			; (mov r8, r8)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689a      	ldr	r2, [r3, #8]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2140      	movs	r1, #64	; 0x40
 8004008:	438a      	bics	r2, r1
 800400a:	609a      	str	r2, [r3, #8]
 800400c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800400e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004010:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004012:	f383 8810 	msr	PRIMASK, r3
}
 8004016:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	228c      	movs	r2, #140	; 0x8c
 800401c:	2120      	movs	r1, #32
 800401e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004026:	f3ef 8310 	mrs	r3, PRIMASK
 800402a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800402c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800402e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004030:	2301      	movs	r3, #1
 8004032:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004034:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004036:	f383 8810 	msr	PRIMASK, r3
}
 800403a:	46c0      	nop			; (mov r8, r8)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2110      	movs	r1, #16
 8004048:	438a      	bics	r2, r1
 800404a:	601a      	str	r2, [r3, #0]
 800404c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800404e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004050:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004052:	f383 8810 	msr	PRIMASK, r3
}
 8004056:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2280      	movs	r2, #128	; 0x80
 800405c:	589b      	ldr	r3, [r3, r2]
 800405e:	0018      	movs	r0, r3
 8004060:	f7fd fca2 	bl	80019a8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2202      	movs	r2, #2
 8004068:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	225c      	movs	r2, #92	; 0x5c
 800406e:	5a9a      	ldrh	r2, [r3, r2]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	215e      	movs	r1, #94	; 0x5e
 8004074:	5a5b      	ldrh	r3, [r3, r1]
 8004076:	b29b      	uxth	r3, r3
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	b29a      	uxth	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	0011      	movs	r1, r2
 8004080:	0018      	movs	r0, r3
 8004082:	f7fc fe37 	bl	8000cf4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004086:	e0ed      	b.n	8004264 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	225c      	movs	r2, #92	; 0x5c
 800408c:	5a99      	ldrh	r1, [r3, r2]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	225e      	movs	r2, #94	; 0x5e
 8004092:	5a9b      	ldrh	r3, [r3, r2]
 8004094:	b29a      	uxth	r2, r3
 8004096:	208e      	movs	r0, #142	; 0x8e
 8004098:	183b      	adds	r3, r7, r0
 800409a:	1a8a      	subs	r2, r1, r2
 800409c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	225e      	movs	r2, #94	; 0x5e
 80040a2:	5a9b      	ldrh	r3, [r3, r2]
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d100      	bne.n	80040ac <HAL_UART_IRQHandler+0x478>
 80040aa:	e0dd      	b.n	8004268 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80040ac:	183b      	adds	r3, r7, r0
 80040ae:	881b      	ldrh	r3, [r3, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d100      	bne.n	80040b6 <HAL_UART_IRQHandler+0x482>
 80040b4:	e0d8      	b.n	8004268 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040b6:	f3ef 8310 	mrs	r3, PRIMASK
 80040ba:	60fb      	str	r3, [r7, #12]
  return(result);
 80040bc:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80040be:	2488      	movs	r4, #136	; 0x88
 80040c0:	193a      	adds	r2, r7, r4
 80040c2:	6013      	str	r3, [r2, #0]
 80040c4:	2301      	movs	r3, #1
 80040c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	f383 8810 	msr	PRIMASK, r3
}
 80040ce:	46c0      	nop			; (mov r8, r8)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4967      	ldr	r1, [pc, #412]	; (8004278 <HAL_UART_IRQHandler+0x644>)
 80040dc:	400a      	ands	r2, r1
 80040de:	601a      	str	r2, [r3, #0]
 80040e0:	193b      	adds	r3, r7, r4
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	f383 8810 	msr	PRIMASK, r3
}
 80040ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040ee:	f3ef 8310 	mrs	r3, PRIMASK
 80040f2:	61bb      	str	r3, [r7, #24]
  return(result);
 80040f4:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80040f6:	2484      	movs	r4, #132	; 0x84
 80040f8:	193a      	adds	r2, r7, r4
 80040fa:	6013      	str	r3, [r2, #0]
 80040fc:	2301      	movs	r3, #1
 80040fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	f383 8810 	msr	PRIMASK, r3
}
 8004106:	46c0      	nop			; (mov r8, r8)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	689a      	ldr	r2, [r3, #8]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	495a      	ldr	r1, [pc, #360]	; (800427c <HAL_UART_IRQHandler+0x648>)
 8004114:	400a      	ands	r2, r1
 8004116:	609a      	str	r2, [r3, #8]
 8004118:	193b      	adds	r3, r7, r4
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800411e:	6a3b      	ldr	r3, [r7, #32]
 8004120:	f383 8810 	msr	PRIMASK, r3
}
 8004124:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	228c      	movs	r2, #140	; 0x8c
 800412a:	2120      	movs	r1, #32
 800412c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800413a:	f3ef 8310 	mrs	r3, PRIMASK
 800413e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004140:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004142:	2480      	movs	r4, #128	; 0x80
 8004144:	193a      	adds	r2, r7, r4
 8004146:	6013      	str	r3, [r2, #0]
 8004148:	2301      	movs	r3, #1
 800414a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800414c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414e:	f383 8810 	msr	PRIMASK, r3
}
 8004152:	46c0      	nop			; (mov r8, r8)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2110      	movs	r1, #16
 8004160:	438a      	bics	r2, r1
 8004162:	601a      	str	r2, [r3, #0]
 8004164:	193b      	adds	r3, r7, r4
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800416a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800416c:	f383 8810 	msr	PRIMASK, r3
}
 8004170:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2202      	movs	r2, #2
 8004176:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004178:	183b      	adds	r3, r7, r0
 800417a:	881a      	ldrh	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	0011      	movs	r1, r2
 8004180:	0018      	movs	r0, r3
 8004182:	f7fc fdb7 	bl	8000cf4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004186:	e06f      	b.n	8004268 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004188:	23a4      	movs	r3, #164	; 0xa4
 800418a:	18fb      	adds	r3, r7, r3
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	2380      	movs	r3, #128	; 0x80
 8004190:	035b      	lsls	r3, r3, #13
 8004192:	4013      	ands	r3, r2
 8004194:	d010      	beq.n	80041b8 <HAL_UART_IRQHandler+0x584>
 8004196:	239c      	movs	r3, #156	; 0x9c
 8004198:	18fb      	adds	r3, r7, r3
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	2380      	movs	r3, #128	; 0x80
 800419e:	03db      	lsls	r3, r3, #15
 80041a0:	4013      	ands	r3, r2
 80041a2:	d009      	beq.n	80041b8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2280      	movs	r2, #128	; 0x80
 80041aa:	0352      	lsls	r2, r2, #13
 80041ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	0018      	movs	r0, r3
 80041b2:	f000 ff52 	bl	800505a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80041b6:	e05a      	b.n	800426e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80041b8:	23a4      	movs	r3, #164	; 0xa4
 80041ba:	18fb      	adds	r3, r7, r3
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2280      	movs	r2, #128	; 0x80
 80041c0:	4013      	ands	r3, r2
 80041c2:	d016      	beq.n	80041f2 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80041c4:	23a0      	movs	r3, #160	; 0xa0
 80041c6:	18fb      	adds	r3, r7, r3
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2280      	movs	r2, #128	; 0x80
 80041cc:	4013      	ands	r3, r2
 80041ce:	d106      	bne.n	80041de <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80041d0:	239c      	movs	r3, #156	; 0x9c
 80041d2:	18fb      	adds	r3, r7, r3
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	2380      	movs	r3, #128	; 0x80
 80041d8:	041b      	lsls	r3, r3, #16
 80041da:	4013      	ands	r3, r2
 80041dc:	d009      	beq.n	80041f2 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d042      	beq.n	800426c <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	0010      	movs	r0, r2
 80041ee:	4798      	blx	r3
    }
    return;
 80041f0:	e03c      	b.n	800426c <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80041f2:	23a4      	movs	r3, #164	; 0xa4
 80041f4:	18fb      	adds	r3, r7, r3
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2240      	movs	r2, #64	; 0x40
 80041fa:	4013      	ands	r3, r2
 80041fc:	d00a      	beq.n	8004214 <HAL_UART_IRQHandler+0x5e0>
 80041fe:	23a0      	movs	r3, #160	; 0xa0
 8004200:	18fb      	adds	r3, r7, r3
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2240      	movs	r2, #64	; 0x40
 8004206:	4013      	ands	r3, r2
 8004208:	d004      	beq.n	8004214 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	0018      	movs	r0, r3
 800420e:	f000 fef8 	bl	8005002 <UART_EndTransmit_IT>
    return;
 8004212:	e02c      	b.n	800426e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004214:	23a4      	movs	r3, #164	; 0xa4
 8004216:	18fb      	adds	r3, r7, r3
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	2380      	movs	r3, #128	; 0x80
 800421c:	041b      	lsls	r3, r3, #16
 800421e:	4013      	ands	r3, r2
 8004220:	d00b      	beq.n	800423a <HAL_UART_IRQHandler+0x606>
 8004222:	23a0      	movs	r3, #160	; 0xa0
 8004224:	18fb      	adds	r3, r7, r3
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	2380      	movs	r3, #128	; 0x80
 800422a:	05db      	lsls	r3, r3, #23
 800422c:	4013      	ands	r3, r2
 800422e:	d004      	beq.n	800423a <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	0018      	movs	r0, r3
 8004234:	f000 ff21 	bl	800507a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004238:	e019      	b.n	800426e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800423a:	23a4      	movs	r3, #164	; 0xa4
 800423c:	18fb      	adds	r3, r7, r3
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	2380      	movs	r3, #128	; 0x80
 8004242:	045b      	lsls	r3, r3, #17
 8004244:	4013      	ands	r3, r2
 8004246:	d012      	beq.n	800426e <HAL_UART_IRQHandler+0x63a>
 8004248:	23a0      	movs	r3, #160	; 0xa0
 800424a:	18fb      	adds	r3, r7, r3
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	da0d      	bge.n	800426e <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	0018      	movs	r0, r3
 8004256:	f000 ff08 	bl	800506a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800425a:	e008      	b.n	800426e <HAL_UART_IRQHandler+0x63a>
      return;
 800425c:	46c0      	nop			; (mov r8, r8)
 800425e:	e006      	b.n	800426e <HAL_UART_IRQHandler+0x63a>
    return;
 8004260:	46c0      	nop			; (mov r8, r8)
 8004262:	e004      	b.n	800426e <HAL_UART_IRQHandler+0x63a>
      return;
 8004264:	46c0      	nop			; (mov r8, r8)
 8004266:	e002      	b.n	800426e <HAL_UART_IRQHandler+0x63a>
      return;
 8004268:	46c0      	nop			; (mov r8, r8)
 800426a:	e000      	b.n	800426e <HAL_UART_IRQHandler+0x63a>
    return;
 800426c:	46c0      	nop			; (mov r8, r8)
  }
}
 800426e:	46bd      	mov	sp, r7
 8004270:	b02a      	add	sp, #168	; 0xa8
 8004272:	bdb0      	pop	{r4, r5, r7, pc}
 8004274:	fffffeff 	.word	0xfffffeff
 8004278:	fffffedf 	.word	0xfffffedf
 800427c:	effffffe 	.word	0xeffffffe

08004280 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004288:	46c0      	nop			; (mov r8, r8)
 800428a:	46bd      	mov	sp, r7
 800428c:	b002      	add	sp, #8
 800428e:	bd80      	pop	{r7, pc}

08004290 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004298:	46c0      	nop			; (mov r8, r8)
 800429a:	46bd      	mov	sp, r7
 800429c:	b002      	add	sp, #8
 800429e:	bd80      	pop	{r7, pc}

080042a0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80042a8:	46c0      	nop			; (mov r8, r8)
 80042aa:	46bd      	mov	sp, r7
 80042ac:	b002      	add	sp, #8
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80042b8:	46c0      	nop			; (mov r8, r8)
 80042ba:	46bd      	mov	sp, r7
 80042bc:	b002      	add	sp, #8
 80042be:	bd80      	pop	{r7, pc}

080042c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042c0:	b5b0      	push	{r4, r5, r7, lr}
 80042c2:	b090      	sub	sp, #64	; 0x40
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042c8:	231a      	movs	r3, #26
 80042ca:	2220      	movs	r2, #32
 80042cc:	189b      	adds	r3, r3, r2
 80042ce:	19db      	adds	r3, r3, r7
 80042d0:	2200      	movs	r2, #0
 80042d2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d6:	689a      	ldr	r2, [r3, #8]
 80042d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	431a      	orrs	r2, r3
 80042de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	431a      	orrs	r2, r3
 80042e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e6:	69db      	ldr	r3, [r3, #28]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4ac4      	ldr	r2, [pc, #784]	; (8004604 <UART_SetConfig+0x344>)
 80042f4:	4013      	ands	r3, r2
 80042f6:	0019      	movs	r1, r3
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042fe:	430b      	orrs	r3, r1
 8004300:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	4abf      	ldr	r2, [pc, #764]	; (8004608 <UART_SetConfig+0x348>)
 800430a:	4013      	ands	r3, r2
 800430c:	0018      	movs	r0, r3
 800430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004310:	68d9      	ldr	r1, [r3, #12]
 8004312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	0003      	movs	r3, r0
 8004318:	430b      	orrs	r3, r1
 800431a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4ab9      	ldr	r2, [pc, #740]	; (800460c <UART_SetConfig+0x34c>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d004      	beq.n	8004336 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004332:	4313      	orrs	r3, r2
 8004334:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	4ab4      	ldr	r2, [pc, #720]	; (8004610 <UART_SetConfig+0x350>)
 800433e:	4013      	ands	r3, r2
 8004340:	0019      	movs	r1, r3
 8004342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004348:	430b      	orrs	r3, r1
 800434a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004352:	220f      	movs	r2, #15
 8004354:	4393      	bics	r3, r2
 8004356:	0018      	movs	r0, r3
 8004358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	0003      	movs	r3, r0
 8004362:	430b      	orrs	r3, r1
 8004364:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4aaa      	ldr	r2, [pc, #680]	; (8004614 <UART_SetConfig+0x354>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d131      	bne.n	80043d4 <UART_SetConfig+0x114>
 8004370:	4ba9      	ldr	r3, [pc, #676]	; (8004618 <UART_SetConfig+0x358>)
 8004372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004374:	2203      	movs	r2, #3
 8004376:	4013      	ands	r3, r2
 8004378:	2b03      	cmp	r3, #3
 800437a:	d01d      	beq.n	80043b8 <UART_SetConfig+0xf8>
 800437c:	d823      	bhi.n	80043c6 <UART_SetConfig+0x106>
 800437e:	2b02      	cmp	r3, #2
 8004380:	d00c      	beq.n	800439c <UART_SetConfig+0xdc>
 8004382:	d820      	bhi.n	80043c6 <UART_SetConfig+0x106>
 8004384:	2b00      	cmp	r3, #0
 8004386:	d002      	beq.n	800438e <UART_SetConfig+0xce>
 8004388:	2b01      	cmp	r3, #1
 800438a:	d00e      	beq.n	80043aa <UART_SetConfig+0xea>
 800438c:	e01b      	b.n	80043c6 <UART_SetConfig+0x106>
 800438e:	231b      	movs	r3, #27
 8004390:	2220      	movs	r2, #32
 8004392:	189b      	adds	r3, r3, r2
 8004394:	19db      	adds	r3, r3, r7
 8004396:	2200      	movs	r2, #0
 8004398:	701a      	strb	r2, [r3, #0]
 800439a:	e071      	b.n	8004480 <UART_SetConfig+0x1c0>
 800439c:	231b      	movs	r3, #27
 800439e:	2220      	movs	r2, #32
 80043a0:	189b      	adds	r3, r3, r2
 80043a2:	19db      	adds	r3, r3, r7
 80043a4:	2202      	movs	r2, #2
 80043a6:	701a      	strb	r2, [r3, #0]
 80043a8:	e06a      	b.n	8004480 <UART_SetConfig+0x1c0>
 80043aa:	231b      	movs	r3, #27
 80043ac:	2220      	movs	r2, #32
 80043ae:	189b      	adds	r3, r3, r2
 80043b0:	19db      	adds	r3, r3, r7
 80043b2:	2204      	movs	r2, #4
 80043b4:	701a      	strb	r2, [r3, #0]
 80043b6:	e063      	b.n	8004480 <UART_SetConfig+0x1c0>
 80043b8:	231b      	movs	r3, #27
 80043ba:	2220      	movs	r2, #32
 80043bc:	189b      	adds	r3, r3, r2
 80043be:	19db      	adds	r3, r3, r7
 80043c0:	2208      	movs	r2, #8
 80043c2:	701a      	strb	r2, [r3, #0]
 80043c4:	e05c      	b.n	8004480 <UART_SetConfig+0x1c0>
 80043c6:	231b      	movs	r3, #27
 80043c8:	2220      	movs	r2, #32
 80043ca:	189b      	adds	r3, r3, r2
 80043cc:	19db      	adds	r3, r3, r7
 80043ce:	2210      	movs	r2, #16
 80043d0:	701a      	strb	r2, [r3, #0]
 80043d2:	e055      	b.n	8004480 <UART_SetConfig+0x1c0>
 80043d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a90      	ldr	r2, [pc, #576]	; (800461c <UART_SetConfig+0x35c>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d106      	bne.n	80043ec <UART_SetConfig+0x12c>
 80043de:	231b      	movs	r3, #27
 80043e0:	2220      	movs	r2, #32
 80043e2:	189b      	adds	r3, r3, r2
 80043e4:	19db      	adds	r3, r3, r7
 80043e6:	2200      	movs	r2, #0
 80043e8:	701a      	strb	r2, [r3, #0]
 80043ea:	e049      	b.n	8004480 <UART_SetConfig+0x1c0>
 80043ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a86      	ldr	r2, [pc, #536]	; (800460c <UART_SetConfig+0x34c>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d13e      	bne.n	8004474 <UART_SetConfig+0x1b4>
 80043f6:	4b88      	ldr	r3, [pc, #544]	; (8004618 <UART_SetConfig+0x358>)
 80043f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043fa:	23c0      	movs	r3, #192	; 0xc0
 80043fc:	011b      	lsls	r3, r3, #4
 80043fe:	4013      	ands	r3, r2
 8004400:	22c0      	movs	r2, #192	; 0xc0
 8004402:	0112      	lsls	r2, r2, #4
 8004404:	4293      	cmp	r3, r2
 8004406:	d027      	beq.n	8004458 <UART_SetConfig+0x198>
 8004408:	22c0      	movs	r2, #192	; 0xc0
 800440a:	0112      	lsls	r2, r2, #4
 800440c:	4293      	cmp	r3, r2
 800440e:	d82a      	bhi.n	8004466 <UART_SetConfig+0x1a6>
 8004410:	2280      	movs	r2, #128	; 0x80
 8004412:	0112      	lsls	r2, r2, #4
 8004414:	4293      	cmp	r3, r2
 8004416:	d011      	beq.n	800443c <UART_SetConfig+0x17c>
 8004418:	2280      	movs	r2, #128	; 0x80
 800441a:	0112      	lsls	r2, r2, #4
 800441c:	4293      	cmp	r3, r2
 800441e:	d822      	bhi.n	8004466 <UART_SetConfig+0x1a6>
 8004420:	2b00      	cmp	r3, #0
 8004422:	d004      	beq.n	800442e <UART_SetConfig+0x16e>
 8004424:	2280      	movs	r2, #128	; 0x80
 8004426:	00d2      	lsls	r2, r2, #3
 8004428:	4293      	cmp	r3, r2
 800442a:	d00e      	beq.n	800444a <UART_SetConfig+0x18a>
 800442c:	e01b      	b.n	8004466 <UART_SetConfig+0x1a6>
 800442e:	231b      	movs	r3, #27
 8004430:	2220      	movs	r2, #32
 8004432:	189b      	adds	r3, r3, r2
 8004434:	19db      	adds	r3, r3, r7
 8004436:	2200      	movs	r2, #0
 8004438:	701a      	strb	r2, [r3, #0]
 800443a:	e021      	b.n	8004480 <UART_SetConfig+0x1c0>
 800443c:	231b      	movs	r3, #27
 800443e:	2220      	movs	r2, #32
 8004440:	189b      	adds	r3, r3, r2
 8004442:	19db      	adds	r3, r3, r7
 8004444:	2202      	movs	r2, #2
 8004446:	701a      	strb	r2, [r3, #0]
 8004448:	e01a      	b.n	8004480 <UART_SetConfig+0x1c0>
 800444a:	231b      	movs	r3, #27
 800444c:	2220      	movs	r2, #32
 800444e:	189b      	adds	r3, r3, r2
 8004450:	19db      	adds	r3, r3, r7
 8004452:	2204      	movs	r2, #4
 8004454:	701a      	strb	r2, [r3, #0]
 8004456:	e013      	b.n	8004480 <UART_SetConfig+0x1c0>
 8004458:	231b      	movs	r3, #27
 800445a:	2220      	movs	r2, #32
 800445c:	189b      	adds	r3, r3, r2
 800445e:	19db      	adds	r3, r3, r7
 8004460:	2208      	movs	r2, #8
 8004462:	701a      	strb	r2, [r3, #0]
 8004464:	e00c      	b.n	8004480 <UART_SetConfig+0x1c0>
 8004466:	231b      	movs	r3, #27
 8004468:	2220      	movs	r2, #32
 800446a:	189b      	adds	r3, r3, r2
 800446c:	19db      	adds	r3, r3, r7
 800446e:	2210      	movs	r2, #16
 8004470:	701a      	strb	r2, [r3, #0]
 8004472:	e005      	b.n	8004480 <UART_SetConfig+0x1c0>
 8004474:	231b      	movs	r3, #27
 8004476:	2220      	movs	r2, #32
 8004478:	189b      	adds	r3, r3, r2
 800447a:	19db      	adds	r3, r3, r7
 800447c:	2210      	movs	r2, #16
 800447e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a61      	ldr	r2, [pc, #388]	; (800460c <UART_SetConfig+0x34c>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d000      	beq.n	800448c <UART_SetConfig+0x1cc>
 800448a:	e092      	b.n	80045b2 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800448c:	231b      	movs	r3, #27
 800448e:	2220      	movs	r2, #32
 8004490:	189b      	adds	r3, r3, r2
 8004492:	19db      	adds	r3, r3, r7
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	2b08      	cmp	r3, #8
 8004498:	d015      	beq.n	80044c6 <UART_SetConfig+0x206>
 800449a:	dc18      	bgt.n	80044ce <UART_SetConfig+0x20e>
 800449c:	2b04      	cmp	r3, #4
 800449e:	d00d      	beq.n	80044bc <UART_SetConfig+0x1fc>
 80044a0:	dc15      	bgt.n	80044ce <UART_SetConfig+0x20e>
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d002      	beq.n	80044ac <UART_SetConfig+0x1ec>
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d005      	beq.n	80044b6 <UART_SetConfig+0x1f6>
 80044aa:	e010      	b.n	80044ce <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044ac:	f7fe fb14 	bl	8002ad8 <HAL_RCC_GetPCLK1Freq>
 80044b0:	0003      	movs	r3, r0
 80044b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80044b4:	e014      	b.n	80044e0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044b6:	4b5a      	ldr	r3, [pc, #360]	; (8004620 <UART_SetConfig+0x360>)
 80044b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80044ba:	e011      	b.n	80044e0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044bc:	f7fe fa80 	bl	80029c0 <HAL_RCC_GetSysClockFreq>
 80044c0:	0003      	movs	r3, r0
 80044c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80044c4:	e00c      	b.n	80044e0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044c6:	2380      	movs	r3, #128	; 0x80
 80044c8:	021b      	lsls	r3, r3, #8
 80044ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80044cc:	e008      	b.n	80044e0 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 80044ce:	2300      	movs	r3, #0
 80044d0:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80044d2:	231a      	movs	r3, #26
 80044d4:	2220      	movs	r2, #32
 80044d6:	189b      	adds	r3, r3, r2
 80044d8:	19db      	adds	r3, r3, r7
 80044da:	2201      	movs	r2, #1
 80044dc:	701a      	strb	r2, [r3, #0]
        break;
 80044de:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80044e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d100      	bne.n	80044e8 <UART_SetConfig+0x228>
 80044e6:	e147      	b.n	8004778 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80044e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044ec:	4b4d      	ldr	r3, [pc, #308]	; (8004624 <UART_SetConfig+0x364>)
 80044ee:	0052      	lsls	r2, r2, #1
 80044f0:	5ad3      	ldrh	r3, [r2, r3]
 80044f2:	0019      	movs	r1, r3
 80044f4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80044f6:	f7fb fe17 	bl	8000128 <__udivsi3>
 80044fa:	0003      	movs	r3, r0
 80044fc:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80044fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	0013      	movs	r3, r2
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	189b      	adds	r3, r3, r2
 8004508:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800450a:	429a      	cmp	r2, r3
 800450c:	d305      	bcc.n	800451a <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004514:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004516:	429a      	cmp	r2, r3
 8004518:	d906      	bls.n	8004528 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 800451a:	231a      	movs	r3, #26
 800451c:	2220      	movs	r2, #32
 800451e:	189b      	adds	r3, r3, r2
 8004520:	19db      	adds	r3, r3, r7
 8004522:	2201      	movs	r2, #1
 8004524:	701a      	strb	r2, [r3, #0]
 8004526:	e127      	b.n	8004778 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800452a:	61bb      	str	r3, [r7, #24]
 800452c:	2300      	movs	r3, #0
 800452e:	61fb      	str	r3, [r7, #28]
 8004530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004532:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004534:	4b3b      	ldr	r3, [pc, #236]	; (8004624 <UART_SetConfig+0x364>)
 8004536:	0052      	lsls	r2, r2, #1
 8004538:	5ad3      	ldrh	r3, [r2, r3]
 800453a:	613b      	str	r3, [r7, #16]
 800453c:	2300      	movs	r3, #0
 800453e:	617b      	str	r3, [r7, #20]
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	69b8      	ldr	r0, [r7, #24]
 8004546:	69f9      	ldr	r1, [r7, #28]
 8004548:	f7fb ff64 	bl	8000414 <__aeabi_uldivmod>
 800454c:	0002      	movs	r2, r0
 800454e:	000b      	movs	r3, r1
 8004550:	0e11      	lsrs	r1, r2, #24
 8004552:	021d      	lsls	r5, r3, #8
 8004554:	430d      	orrs	r5, r1
 8004556:	0214      	lsls	r4, r2, #8
 8004558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	085b      	lsrs	r3, r3, #1
 800455e:	60bb      	str	r3, [r7, #8]
 8004560:	2300      	movs	r3, #0
 8004562:	60fb      	str	r3, [r7, #12]
 8004564:	68b8      	ldr	r0, [r7, #8]
 8004566:	68f9      	ldr	r1, [r7, #12]
 8004568:	1900      	adds	r0, r0, r4
 800456a:	4169      	adcs	r1, r5
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	603b      	str	r3, [r7, #0]
 8004572:	2300      	movs	r3, #0
 8004574:	607b      	str	r3, [r7, #4]
 8004576:	683a      	ldr	r2, [r7, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f7fb ff4b 	bl	8000414 <__aeabi_uldivmod>
 800457e:	0002      	movs	r2, r0
 8004580:	000b      	movs	r3, r1
 8004582:	0013      	movs	r3, r2
 8004584:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004586:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004588:	23c0      	movs	r3, #192	; 0xc0
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	429a      	cmp	r2, r3
 800458e:	d309      	bcc.n	80045a4 <UART_SetConfig+0x2e4>
 8004590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004592:	2380      	movs	r3, #128	; 0x80
 8004594:	035b      	lsls	r3, r3, #13
 8004596:	429a      	cmp	r2, r3
 8004598:	d204      	bcs.n	80045a4 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 800459a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045a0:	60da      	str	r2, [r3, #12]
 80045a2:	e0e9      	b.n	8004778 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 80045a4:	231a      	movs	r3, #26
 80045a6:	2220      	movs	r2, #32
 80045a8:	189b      	adds	r3, r3, r2
 80045aa:	19db      	adds	r3, r3, r7
 80045ac:	2201      	movs	r2, #1
 80045ae:	701a      	strb	r2, [r3, #0]
 80045b0:	e0e2      	b.n	8004778 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b4:	69da      	ldr	r2, [r3, #28]
 80045b6:	2380      	movs	r3, #128	; 0x80
 80045b8:	021b      	lsls	r3, r3, #8
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d000      	beq.n	80045c0 <UART_SetConfig+0x300>
 80045be:	e083      	b.n	80046c8 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80045c0:	231b      	movs	r3, #27
 80045c2:	2220      	movs	r2, #32
 80045c4:	189b      	adds	r3, r3, r2
 80045c6:	19db      	adds	r3, r3, r7
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	2b08      	cmp	r3, #8
 80045cc:	d015      	beq.n	80045fa <UART_SetConfig+0x33a>
 80045ce:	dc2b      	bgt.n	8004628 <UART_SetConfig+0x368>
 80045d0:	2b04      	cmp	r3, #4
 80045d2:	d00d      	beq.n	80045f0 <UART_SetConfig+0x330>
 80045d4:	dc28      	bgt.n	8004628 <UART_SetConfig+0x368>
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d002      	beq.n	80045e0 <UART_SetConfig+0x320>
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d005      	beq.n	80045ea <UART_SetConfig+0x32a>
 80045de:	e023      	b.n	8004628 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045e0:	f7fe fa7a 	bl	8002ad8 <HAL_RCC_GetPCLK1Freq>
 80045e4:	0003      	movs	r3, r0
 80045e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80045e8:	e027      	b.n	800463a <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045ea:	4b0d      	ldr	r3, [pc, #52]	; (8004620 <UART_SetConfig+0x360>)
 80045ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80045ee:	e024      	b.n	800463a <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045f0:	f7fe f9e6 	bl	80029c0 <HAL_RCC_GetSysClockFreq>
 80045f4:	0003      	movs	r3, r0
 80045f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80045f8:	e01f      	b.n	800463a <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045fa:	2380      	movs	r3, #128	; 0x80
 80045fc:	021b      	lsls	r3, r3, #8
 80045fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004600:	e01b      	b.n	800463a <UART_SetConfig+0x37a>
 8004602:	46c0      	nop			; (mov r8, r8)
 8004604:	cfff69f3 	.word	0xcfff69f3
 8004608:	ffffcfff 	.word	0xffffcfff
 800460c:	40008000 	.word	0x40008000
 8004610:	11fff4ff 	.word	0x11fff4ff
 8004614:	40013800 	.word	0x40013800
 8004618:	40021000 	.word	0x40021000
 800461c:	40004400 	.word	0x40004400
 8004620:	00f42400 	.word	0x00f42400
 8004624:	080075c4 	.word	0x080075c4
      default:
        pclk = 0U;
 8004628:	2300      	movs	r3, #0
 800462a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800462c:	231a      	movs	r3, #26
 800462e:	2220      	movs	r2, #32
 8004630:	189b      	adds	r3, r3, r2
 8004632:	19db      	adds	r3, r3, r7
 8004634:	2201      	movs	r2, #1
 8004636:	701a      	strb	r2, [r3, #0]
        break;
 8004638:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800463a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800463c:	2b00      	cmp	r3, #0
 800463e:	d100      	bne.n	8004642 <UART_SetConfig+0x382>
 8004640:	e09a      	b.n	8004778 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004644:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004646:	4b58      	ldr	r3, [pc, #352]	; (80047a8 <UART_SetConfig+0x4e8>)
 8004648:	0052      	lsls	r2, r2, #1
 800464a:	5ad3      	ldrh	r3, [r2, r3]
 800464c:	0019      	movs	r1, r3
 800464e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004650:	f7fb fd6a 	bl	8000128 <__udivsi3>
 8004654:	0003      	movs	r3, r0
 8004656:	005a      	lsls	r2, r3, #1
 8004658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	085b      	lsrs	r3, r3, #1
 800465e:	18d2      	adds	r2, r2, r3
 8004660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	0019      	movs	r1, r3
 8004666:	0010      	movs	r0, r2
 8004668:	f7fb fd5e 	bl	8000128 <__udivsi3>
 800466c:	0003      	movs	r3, r0
 800466e:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004672:	2b0f      	cmp	r3, #15
 8004674:	d921      	bls.n	80046ba <UART_SetConfig+0x3fa>
 8004676:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004678:	2380      	movs	r3, #128	; 0x80
 800467a:	025b      	lsls	r3, r3, #9
 800467c:	429a      	cmp	r2, r3
 800467e:	d21c      	bcs.n	80046ba <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004682:	b29a      	uxth	r2, r3
 8004684:	200e      	movs	r0, #14
 8004686:	2420      	movs	r4, #32
 8004688:	1903      	adds	r3, r0, r4
 800468a:	19db      	adds	r3, r3, r7
 800468c:	210f      	movs	r1, #15
 800468e:	438a      	bics	r2, r1
 8004690:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004694:	085b      	lsrs	r3, r3, #1
 8004696:	b29b      	uxth	r3, r3
 8004698:	2207      	movs	r2, #7
 800469a:	4013      	ands	r3, r2
 800469c:	b299      	uxth	r1, r3
 800469e:	1903      	adds	r3, r0, r4
 80046a0:	19db      	adds	r3, r3, r7
 80046a2:	1902      	adds	r2, r0, r4
 80046a4:	19d2      	adds	r2, r2, r7
 80046a6:	8812      	ldrh	r2, [r2, #0]
 80046a8:	430a      	orrs	r2, r1
 80046aa:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80046ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	1902      	adds	r2, r0, r4
 80046b2:	19d2      	adds	r2, r2, r7
 80046b4:	8812      	ldrh	r2, [r2, #0]
 80046b6:	60da      	str	r2, [r3, #12]
 80046b8:	e05e      	b.n	8004778 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 80046ba:	231a      	movs	r3, #26
 80046bc:	2220      	movs	r2, #32
 80046be:	189b      	adds	r3, r3, r2
 80046c0:	19db      	adds	r3, r3, r7
 80046c2:	2201      	movs	r2, #1
 80046c4:	701a      	strb	r2, [r3, #0]
 80046c6:	e057      	b.n	8004778 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046c8:	231b      	movs	r3, #27
 80046ca:	2220      	movs	r2, #32
 80046cc:	189b      	adds	r3, r3, r2
 80046ce:	19db      	adds	r3, r3, r7
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	2b08      	cmp	r3, #8
 80046d4:	d015      	beq.n	8004702 <UART_SetConfig+0x442>
 80046d6:	dc18      	bgt.n	800470a <UART_SetConfig+0x44a>
 80046d8:	2b04      	cmp	r3, #4
 80046da:	d00d      	beq.n	80046f8 <UART_SetConfig+0x438>
 80046dc:	dc15      	bgt.n	800470a <UART_SetConfig+0x44a>
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d002      	beq.n	80046e8 <UART_SetConfig+0x428>
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d005      	beq.n	80046f2 <UART_SetConfig+0x432>
 80046e6:	e010      	b.n	800470a <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046e8:	f7fe f9f6 	bl	8002ad8 <HAL_RCC_GetPCLK1Freq>
 80046ec:	0003      	movs	r3, r0
 80046ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80046f0:	e014      	b.n	800471c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046f2:	4b2e      	ldr	r3, [pc, #184]	; (80047ac <UART_SetConfig+0x4ec>)
 80046f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80046f6:	e011      	b.n	800471c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046f8:	f7fe f962 	bl	80029c0 <HAL_RCC_GetSysClockFreq>
 80046fc:	0003      	movs	r3, r0
 80046fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004700:	e00c      	b.n	800471c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004702:	2380      	movs	r3, #128	; 0x80
 8004704:	021b      	lsls	r3, r3, #8
 8004706:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004708:	e008      	b.n	800471c <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 800470a:	2300      	movs	r3, #0
 800470c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800470e:	231a      	movs	r3, #26
 8004710:	2220      	movs	r2, #32
 8004712:	189b      	adds	r3, r3, r2
 8004714:	19db      	adds	r3, r3, r7
 8004716:	2201      	movs	r2, #1
 8004718:	701a      	strb	r2, [r3, #0]
        break;
 800471a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800471c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800471e:	2b00      	cmp	r3, #0
 8004720:	d02a      	beq.n	8004778 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004724:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004726:	4b20      	ldr	r3, [pc, #128]	; (80047a8 <UART_SetConfig+0x4e8>)
 8004728:	0052      	lsls	r2, r2, #1
 800472a:	5ad3      	ldrh	r3, [r2, r3]
 800472c:	0019      	movs	r1, r3
 800472e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004730:	f7fb fcfa 	bl	8000128 <__udivsi3>
 8004734:	0003      	movs	r3, r0
 8004736:	001a      	movs	r2, r3
 8004738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	085b      	lsrs	r3, r3, #1
 800473e:	18d2      	adds	r2, r2, r3
 8004740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	0019      	movs	r1, r3
 8004746:	0010      	movs	r0, r2
 8004748:	f7fb fcee 	bl	8000128 <__udivsi3>
 800474c:	0003      	movs	r3, r0
 800474e:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004752:	2b0f      	cmp	r3, #15
 8004754:	d90a      	bls.n	800476c <UART_SetConfig+0x4ac>
 8004756:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004758:	2380      	movs	r3, #128	; 0x80
 800475a:	025b      	lsls	r3, r3, #9
 800475c:	429a      	cmp	r2, r3
 800475e:	d205      	bcs.n	800476c <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004762:	b29a      	uxth	r2, r3
 8004764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	60da      	str	r2, [r3, #12]
 800476a:	e005      	b.n	8004778 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800476c:	231a      	movs	r3, #26
 800476e:	2220      	movs	r2, #32
 8004770:	189b      	adds	r3, r3, r2
 8004772:	19db      	adds	r3, r3, r7
 8004774:	2201      	movs	r2, #1
 8004776:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477a:	226a      	movs	r2, #106	; 0x6a
 800477c:	2101      	movs	r1, #1
 800477e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004782:	2268      	movs	r2, #104	; 0x68
 8004784:	2101      	movs	r1, #1
 8004786:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478a:	2200      	movs	r2, #0
 800478c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	2200      	movs	r2, #0
 8004792:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004794:	231a      	movs	r3, #26
 8004796:	2220      	movs	r2, #32
 8004798:	189b      	adds	r3, r3, r2
 800479a:	19db      	adds	r3, r3, r7
 800479c:	781b      	ldrb	r3, [r3, #0]
}
 800479e:	0018      	movs	r0, r3
 80047a0:	46bd      	mov	sp, r7
 80047a2:	b010      	add	sp, #64	; 0x40
 80047a4:	bdb0      	pop	{r4, r5, r7, pc}
 80047a6:	46c0      	nop			; (mov r8, r8)
 80047a8:	080075c4 	.word	0x080075c4
 80047ac:	00f42400 	.word	0x00f42400

080047b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047bc:	2201      	movs	r2, #1
 80047be:	4013      	ands	r3, r2
 80047c0:	d00b      	beq.n	80047da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	4a4a      	ldr	r2, [pc, #296]	; (80048f4 <UART_AdvFeatureConfig+0x144>)
 80047ca:	4013      	ands	r3, r2
 80047cc:	0019      	movs	r1, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047de:	2202      	movs	r2, #2
 80047e0:	4013      	ands	r3, r2
 80047e2:	d00b      	beq.n	80047fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	4a43      	ldr	r2, [pc, #268]	; (80048f8 <UART_AdvFeatureConfig+0x148>)
 80047ec:	4013      	ands	r3, r2
 80047ee:	0019      	movs	r1, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	430a      	orrs	r2, r1
 80047fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004800:	2204      	movs	r2, #4
 8004802:	4013      	ands	r3, r2
 8004804:	d00b      	beq.n	800481e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	4a3b      	ldr	r2, [pc, #236]	; (80048fc <UART_AdvFeatureConfig+0x14c>)
 800480e:	4013      	ands	r3, r2
 8004810:	0019      	movs	r1, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	430a      	orrs	r2, r1
 800481c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004822:	2208      	movs	r2, #8
 8004824:	4013      	ands	r3, r2
 8004826:	d00b      	beq.n	8004840 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	4a34      	ldr	r2, [pc, #208]	; (8004900 <UART_AdvFeatureConfig+0x150>)
 8004830:	4013      	ands	r3, r2
 8004832:	0019      	movs	r1, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	430a      	orrs	r2, r1
 800483e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004844:	2210      	movs	r2, #16
 8004846:	4013      	ands	r3, r2
 8004848:	d00b      	beq.n	8004862 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	4a2c      	ldr	r2, [pc, #176]	; (8004904 <UART_AdvFeatureConfig+0x154>)
 8004852:	4013      	ands	r3, r2
 8004854:	0019      	movs	r1, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004866:	2220      	movs	r2, #32
 8004868:	4013      	ands	r3, r2
 800486a:	d00b      	beq.n	8004884 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	4a25      	ldr	r2, [pc, #148]	; (8004908 <UART_AdvFeatureConfig+0x158>)
 8004874:	4013      	ands	r3, r2
 8004876:	0019      	movs	r1, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	430a      	orrs	r2, r1
 8004882:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004888:	2240      	movs	r2, #64	; 0x40
 800488a:	4013      	ands	r3, r2
 800488c:	d01d      	beq.n	80048ca <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	4a1d      	ldr	r2, [pc, #116]	; (800490c <UART_AdvFeatureConfig+0x15c>)
 8004896:	4013      	ands	r3, r2
 8004898:	0019      	movs	r1, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	430a      	orrs	r2, r1
 80048a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048aa:	2380      	movs	r3, #128	; 0x80
 80048ac:	035b      	lsls	r3, r3, #13
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d10b      	bne.n	80048ca <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	4a15      	ldr	r2, [pc, #84]	; (8004910 <UART_AdvFeatureConfig+0x160>)
 80048ba:	4013      	ands	r3, r2
 80048bc:	0019      	movs	r1, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	430a      	orrs	r2, r1
 80048c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ce:	2280      	movs	r2, #128	; 0x80
 80048d0:	4013      	ands	r3, r2
 80048d2:	d00b      	beq.n	80048ec <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	4a0e      	ldr	r2, [pc, #56]	; (8004914 <UART_AdvFeatureConfig+0x164>)
 80048dc:	4013      	ands	r3, r2
 80048de:	0019      	movs	r1, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	430a      	orrs	r2, r1
 80048ea:	605a      	str	r2, [r3, #4]
  }
}
 80048ec:	46c0      	nop			; (mov r8, r8)
 80048ee:	46bd      	mov	sp, r7
 80048f0:	b002      	add	sp, #8
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	fffdffff 	.word	0xfffdffff
 80048f8:	fffeffff 	.word	0xfffeffff
 80048fc:	fffbffff 	.word	0xfffbffff
 8004900:	ffff7fff 	.word	0xffff7fff
 8004904:	ffffefff 	.word	0xffffefff
 8004908:	ffffdfff 	.word	0xffffdfff
 800490c:	ffefffff 	.word	0xffefffff
 8004910:	ff9fffff 	.word	0xff9fffff
 8004914:	fff7ffff 	.word	0xfff7ffff

08004918 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af02      	add	r7, sp, #8
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2290      	movs	r2, #144	; 0x90
 8004924:	2100      	movs	r1, #0
 8004926:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004928:	f7fc fe46 	bl	80015b8 <HAL_GetTick>
 800492c:	0003      	movs	r3, r0
 800492e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2208      	movs	r2, #8
 8004938:	4013      	ands	r3, r2
 800493a:	2b08      	cmp	r3, #8
 800493c:	d10c      	bne.n	8004958 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2280      	movs	r2, #128	; 0x80
 8004942:	0391      	lsls	r1, r2, #14
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	4a1a      	ldr	r2, [pc, #104]	; (80049b0 <UART_CheckIdleState+0x98>)
 8004948:	9200      	str	r2, [sp, #0]
 800494a:	2200      	movs	r2, #0
 800494c:	f000 f832 	bl	80049b4 <UART_WaitOnFlagUntilTimeout>
 8004950:	1e03      	subs	r3, r0, #0
 8004952:	d001      	beq.n	8004958 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e026      	b.n	80049a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2204      	movs	r2, #4
 8004960:	4013      	ands	r3, r2
 8004962:	2b04      	cmp	r3, #4
 8004964:	d10c      	bne.n	8004980 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2280      	movs	r2, #128	; 0x80
 800496a:	03d1      	lsls	r1, r2, #15
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	4a10      	ldr	r2, [pc, #64]	; (80049b0 <UART_CheckIdleState+0x98>)
 8004970:	9200      	str	r2, [sp, #0]
 8004972:	2200      	movs	r2, #0
 8004974:	f000 f81e 	bl	80049b4 <UART_WaitOnFlagUntilTimeout>
 8004978:	1e03      	subs	r3, r0, #0
 800497a:	d001      	beq.n	8004980 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e012      	b.n	80049a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2288      	movs	r2, #136	; 0x88
 8004984:	2120      	movs	r1, #32
 8004986:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	228c      	movs	r2, #140	; 0x8c
 800498c:	2120      	movs	r1, #32
 800498e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2284      	movs	r2, #132	; 0x84
 80049a0:	2100      	movs	r1, #0
 80049a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	0018      	movs	r0, r3
 80049a8:	46bd      	mov	sp, r7
 80049aa:	b004      	add	sp, #16
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	46c0      	nop			; (mov r8, r8)
 80049b0:	01ffffff 	.word	0x01ffffff

080049b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b094      	sub	sp, #80	; 0x50
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	603b      	str	r3, [r7, #0]
 80049c0:	1dfb      	adds	r3, r7, #7
 80049c2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049c4:	e0a7      	b.n	8004b16 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049c8:	3301      	adds	r3, #1
 80049ca:	d100      	bne.n	80049ce <UART_WaitOnFlagUntilTimeout+0x1a>
 80049cc:	e0a3      	b.n	8004b16 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ce:	f7fc fdf3 	bl	80015b8 <HAL_GetTick>
 80049d2:	0002      	movs	r2, r0
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049da:	429a      	cmp	r2, r3
 80049dc:	d302      	bcc.n	80049e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80049de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d13f      	bne.n	8004a64 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049e4:	f3ef 8310 	mrs	r3, PRIMASK
 80049e8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80049ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80049ec:	647b      	str	r3, [r7, #68]	; 0x44
 80049ee:	2301      	movs	r3, #1
 80049f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f4:	f383 8810 	msr	PRIMASK, r3
}
 80049f8:	46c0      	nop			; (mov r8, r8)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	494e      	ldr	r1, [pc, #312]	; (8004b40 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004a06:	400a      	ands	r2, r1
 8004a08:	601a      	str	r2, [r3, #0]
 8004a0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a0c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a10:	f383 8810 	msr	PRIMASK, r3
}
 8004a14:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a16:	f3ef 8310 	mrs	r3, PRIMASK
 8004a1a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a1e:	643b      	str	r3, [r7, #64]	; 0x40
 8004a20:	2301      	movs	r3, #1
 8004a22:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a26:	f383 8810 	msr	PRIMASK, r3
}
 8004a2a:	46c0      	nop			; (mov r8, r8)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	689a      	ldr	r2, [r3, #8]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2101      	movs	r1, #1
 8004a38:	438a      	bics	r2, r1
 8004a3a:	609a      	str	r2, [r3, #8]
 8004a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a42:	f383 8810 	msr	PRIMASK, r3
}
 8004a46:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2288      	movs	r2, #136	; 0x88
 8004a4c:	2120      	movs	r1, #32
 8004a4e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	228c      	movs	r2, #140	; 0x8c
 8004a54:	2120      	movs	r1, #32
 8004a56:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2284      	movs	r2, #132	; 0x84
 8004a5c:	2100      	movs	r1, #0
 8004a5e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e069      	b.n	8004b38 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2204      	movs	r2, #4
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	d052      	beq.n	8004b16 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	69da      	ldr	r2, [r3, #28]
 8004a76:	2380      	movs	r3, #128	; 0x80
 8004a78:	011b      	lsls	r3, r3, #4
 8004a7a:	401a      	ands	r2, r3
 8004a7c:	2380      	movs	r3, #128	; 0x80
 8004a7e:	011b      	lsls	r3, r3, #4
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d148      	bne.n	8004b16 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2280      	movs	r2, #128	; 0x80
 8004a8a:	0112      	lsls	r2, r2, #4
 8004a8c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a8e:	f3ef 8310 	mrs	r3, PRIMASK
 8004a92:	613b      	str	r3, [r7, #16]
  return(result);
 8004a94:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004a96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a98:	2301      	movs	r3, #1
 8004a9a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	f383 8810 	msr	PRIMASK, r3
}
 8004aa2:	46c0      	nop			; (mov r8, r8)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4924      	ldr	r1, [pc, #144]	; (8004b40 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004ab0:	400a      	ands	r2, r1
 8004ab2:	601a      	str	r2, [r3, #0]
 8004ab4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ab6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	f383 8810 	msr	PRIMASK, r3
}
 8004abe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ac0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ac4:	61fb      	str	r3, [r7, #28]
  return(result);
 8004ac6:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ac8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004aca:	2301      	movs	r3, #1
 8004acc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ace:	6a3b      	ldr	r3, [r7, #32]
 8004ad0:	f383 8810 	msr	PRIMASK, r3
}
 8004ad4:	46c0      	nop			; (mov r8, r8)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	689a      	ldr	r2, [r3, #8]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2101      	movs	r1, #1
 8004ae2:	438a      	bics	r2, r1
 8004ae4:	609a      	str	r2, [r3, #8]
 8004ae6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ae8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aec:	f383 8810 	msr	PRIMASK, r3
}
 8004af0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2288      	movs	r2, #136	; 0x88
 8004af6:	2120      	movs	r1, #32
 8004af8:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	228c      	movs	r2, #140	; 0x8c
 8004afe:	2120      	movs	r1, #32
 8004b00:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2290      	movs	r2, #144	; 0x90
 8004b06:	2120      	movs	r1, #32
 8004b08:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2284      	movs	r2, #132	; 0x84
 8004b0e:	2100      	movs	r1, #0
 8004b10:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e010      	b.n	8004b38 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	69db      	ldr	r3, [r3, #28]
 8004b1c:	68ba      	ldr	r2, [r7, #8]
 8004b1e:	4013      	ands	r3, r2
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	425a      	negs	r2, r3
 8004b26:	4153      	adcs	r3, r2
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	001a      	movs	r2, r3
 8004b2c:	1dfb      	adds	r3, r7, #7
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d100      	bne.n	8004b36 <UART_WaitOnFlagUntilTimeout+0x182>
 8004b34:	e747      	b.n	80049c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	0018      	movs	r0, r3
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	b014      	add	sp, #80	; 0x50
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	fffffe5f 	.word	0xfffffe5f

08004b44 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b090      	sub	sp, #64	; 0x40
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	1dbb      	adds	r3, r7, #6
 8004b50:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	68ba      	ldr	r2, [r7, #8]
 8004b56:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	1dba      	adds	r2, r7, #6
 8004b5c:	215c      	movs	r1, #92	; 0x5c
 8004b5e:	8812      	ldrh	r2, [r2, #0]
 8004b60:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2290      	movs	r2, #144	; 0x90
 8004b66:	2100      	movs	r1, #0
 8004b68:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	228c      	movs	r2, #140	; 0x8c
 8004b6e:	2122      	movs	r1, #34	; 0x22
 8004b70:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2280      	movs	r2, #128	; 0x80
 8004b76:	589b      	ldr	r3, [r3, r2]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d02d      	beq.n	8004bd8 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2280      	movs	r2, #128	; 0x80
 8004b80:	589b      	ldr	r3, [r3, r2]
 8004b82:	4a40      	ldr	r2, [pc, #256]	; (8004c84 <UART_Start_Receive_DMA+0x140>)
 8004b84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2280      	movs	r2, #128	; 0x80
 8004b8a:	589b      	ldr	r3, [r3, r2]
 8004b8c:	4a3e      	ldr	r2, [pc, #248]	; (8004c88 <UART_Start_Receive_DMA+0x144>)
 8004b8e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2280      	movs	r2, #128	; 0x80
 8004b94:	589b      	ldr	r3, [r3, r2]
 8004b96:	4a3d      	ldr	r2, [pc, #244]	; (8004c8c <UART_Start_Receive_DMA+0x148>)
 8004b98:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2280      	movs	r2, #128	; 0x80
 8004b9e:	589b      	ldr	r3, [r3, r2]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2280      	movs	r2, #128	; 0x80
 8004ba8:	5898      	ldr	r0, [r3, r2]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	3324      	adds	r3, #36	; 0x24
 8004bb0:	0019      	movs	r1, r3
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb6:	001a      	movs	r2, r3
 8004bb8:	1dbb      	adds	r3, r7, #6
 8004bba:	881b      	ldrh	r3, [r3, #0]
 8004bbc:	f7fc fe6e 	bl	800189c <HAL_DMA_Start_IT>
 8004bc0:	1e03      	subs	r3, r0, #0
 8004bc2:	d009      	beq.n	8004bd8 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2290      	movs	r2, #144	; 0x90
 8004bc8:	2110      	movs	r1, #16
 8004bca:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	228c      	movs	r2, #140	; 0x8c
 8004bd0:	2120      	movs	r1, #32
 8004bd2:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e050      	b.n	8004c7a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d019      	beq.n	8004c14 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004be0:	f3ef 8310 	mrs	r3, PRIMASK
 8004be4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004be8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bea:	2301      	movs	r3, #1
 8004bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf0:	f383 8810 	msr	PRIMASK, r3
}
 8004bf4:	46c0      	nop			; (mov r8, r8)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2180      	movs	r1, #128	; 0x80
 8004c02:	0049      	lsls	r1, r1, #1
 8004c04:	430a      	orrs	r2, r1
 8004c06:	601a      	str	r2, [r3, #0]
 8004c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c0a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0e:	f383 8810 	msr	PRIMASK, r3
}
 8004c12:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c14:	f3ef 8310 	mrs	r3, PRIMASK
 8004c18:	613b      	str	r3, [r7, #16]
  return(result);
 8004c1a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c1e:	2301      	movs	r3, #1
 8004c20:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f383 8810 	msr	PRIMASK, r3
}
 8004c28:	46c0      	nop			; (mov r8, r8)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	689a      	ldr	r2, [r3, #8]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2101      	movs	r1, #1
 8004c36:	430a      	orrs	r2, r1
 8004c38:	609a      	str	r2, [r3, #8]
 8004c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c3c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	f383 8810 	msr	PRIMASK, r3
}
 8004c44:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c46:	f3ef 8310 	mrs	r3, PRIMASK
 8004c4a:	61fb      	str	r3, [r7, #28]
  return(result);
 8004c4c:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c4e:	637b      	str	r3, [r7, #52]	; 0x34
 8004c50:	2301      	movs	r3, #1
 8004c52:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c54:	6a3b      	ldr	r3, [r7, #32]
 8004c56:	f383 8810 	msr	PRIMASK, r3
}
 8004c5a:	46c0      	nop			; (mov r8, r8)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	689a      	ldr	r2, [r3, #8]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2140      	movs	r1, #64	; 0x40
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	609a      	str	r2, [r3, #8]
 8004c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c6e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c72:	f383 8810 	msr	PRIMASK, r3
}
 8004c76:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	0018      	movs	r0, r3
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	b010      	add	sp, #64	; 0x40
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	46c0      	nop			; (mov r8, r8)
 8004c84:	08004ddd 	.word	0x08004ddd
 8004c88:	08004f0d 	.word	0x08004f0d
 8004c8c:	08004f4f 	.word	0x08004f4f

08004c90 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b08a      	sub	sp, #40	; 0x28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c98:	f3ef 8310 	mrs	r3, PRIMASK
 8004c9c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c9e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f383 8810 	msr	PRIMASK, r3
}
 8004cac:	46c0      	nop			; (mov r8, r8)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	21c0      	movs	r1, #192	; 0xc0
 8004cba:	438a      	bics	r2, r1
 8004cbc:	601a      	str	r2, [r3, #0]
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	f383 8810 	msr	PRIMASK, r3
}
 8004cc8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cca:	f3ef 8310 	mrs	r3, PRIMASK
 8004cce:	617b      	str	r3, [r7, #20]
  return(result);
 8004cd0:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004cd2:	623b      	str	r3, [r7, #32]
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	f383 8810 	msr	PRIMASK, r3
}
 8004cde:	46c0      	nop			; (mov r8, r8)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689a      	ldr	r2, [r3, #8]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4908      	ldr	r1, [pc, #32]	; (8004d0c <UART_EndTxTransfer+0x7c>)
 8004cec:	400a      	ands	r2, r1
 8004cee:	609a      	str	r2, [r3, #8]
 8004cf0:	6a3b      	ldr	r3, [r7, #32]
 8004cf2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	f383 8810 	msr	PRIMASK, r3
}
 8004cfa:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2288      	movs	r2, #136	; 0x88
 8004d00:	2120      	movs	r1, #32
 8004d02:	5099      	str	r1, [r3, r2]
}
 8004d04:	46c0      	nop			; (mov r8, r8)
 8004d06:	46bd      	mov	sp, r7
 8004d08:	b00a      	add	sp, #40	; 0x28
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	ff7fffff 	.word	0xff7fffff

08004d10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b08e      	sub	sp, #56	; 0x38
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d18:	f3ef 8310 	mrs	r3, PRIMASK
 8004d1c:	617b      	str	r3, [r7, #20]
  return(result);
 8004d1e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004d20:	637b      	str	r3, [r7, #52]	; 0x34
 8004d22:	2301      	movs	r3, #1
 8004d24:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	f383 8810 	msr	PRIMASK, r3
}
 8004d2c:	46c0      	nop			; (mov r8, r8)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4926      	ldr	r1, [pc, #152]	; (8004dd4 <UART_EndRxTransfer+0xc4>)
 8004d3a:	400a      	ands	r2, r1
 8004d3c:	601a      	str	r2, [r3, #0]
 8004d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	f383 8810 	msr	PRIMASK, r3
}
 8004d48:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d4a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d4e:	623b      	str	r3, [r7, #32]
  return(result);
 8004d50:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004d52:	633b      	str	r3, [r7, #48]	; 0x30
 8004d54:	2301      	movs	r3, #1
 8004d56:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5a:	f383 8810 	msr	PRIMASK, r3
}
 8004d5e:	46c0      	nop			; (mov r8, r8)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	689a      	ldr	r2, [r3, #8]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	491b      	ldr	r1, [pc, #108]	; (8004dd8 <UART_EndRxTransfer+0xc8>)
 8004d6c:	400a      	ands	r2, r1
 8004d6e:	609a      	str	r2, [r3, #8]
 8004d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d72:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d76:	f383 8810 	msr	PRIMASK, r3
}
 8004d7a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d118      	bne.n	8004db6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d84:	f3ef 8310 	mrs	r3, PRIMASK
 8004d88:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d8a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d8e:	2301      	movs	r3, #1
 8004d90:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f383 8810 	msr	PRIMASK, r3
}
 8004d98:	46c0      	nop			; (mov r8, r8)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2110      	movs	r1, #16
 8004da6:	438a      	bics	r2, r1
 8004da8:	601a      	str	r2, [r3, #0]
 8004daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	f383 8810 	msr	PRIMASK, r3
}
 8004db4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	228c      	movs	r2, #140	; 0x8c
 8004dba:	2120      	movs	r1, #32
 8004dbc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004dca:	46c0      	nop			; (mov r8, r8)
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	b00e      	add	sp, #56	; 0x38
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	46c0      	nop			; (mov r8, r8)
 8004dd4:	fffffedf 	.word	0xfffffedf
 8004dd8:	effffffe 	.word	0xeffffffe

08004ddc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b094      	sub	sp, #80	; 0x50
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de8:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2220      	movs	r2, #32
 8004df2:	4013      	ands	r3, r2
 8004df4:	d16f      	bne.n	8004ed6 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8004df6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004df8:	225e      	movs	r2, #94	; 0x5e
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dfe:	f3ef 8310 	mrs	r3, PRIMASK
 8004e02:	61bb      	str	r3, [r7, #24]
  return(result);
 8004e04:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e06:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e08:	2301      	movs	r3, #1
 8004e0a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	f383 8810 	msr	PRIMASK, r3
}
 8004e12:	46c0      	nop			; (mov r8, r8)
 8004e14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	493a      	ldr	r1, [pc, #232]	; (8004f08 <UART_DMAReceiveCplt+0x12c>)
 8004e20:	400a      	ands	r2, r1
 8004e22:	601a      	str	r2, [r3, #0]
 8004e24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e26:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e28:	6a3b      	ldr	r3, [r7, #32]
 8004e2a:	f383 8810 	msr	PRIMASK, r3
}
 8004e2e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e30:	f3ef 8310 	mrs	r3, PRIMASK
 8004e34:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e38:	647b      	str	r3, [r7, #68]	; 0x44
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e40:	f383 8810 	msr	PRIMASK, r3
}
 8004e44:	46c0      	nop			; (mov r8, r8)
 8004e46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	689a      	ldr	r2, [r3, #8]
 8004e4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2101      	movs	r1, #1
 8004e52:	438a      	bics	r2, r1
 8004e54:	609a      	str	r2, [r3, #8]
 8004e56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e58:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e5c:	f383 8810 	msr	PRIMASK, r3
}
 8004e60:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e62:	f3ef 8310 	mrs	r3, PRIMASK
 8004e66:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e6a:	643b      	str	r3, [r7, #64]	; 0x40
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e72:	f383 8810 	msr	PRIMASK, r3
}
 8004e76:	46c0      	nop			; (mov r8, r8)
 8004e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	689a      	ldr	r2, [r3, #8]
 8004e7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2140      	movs	r1, #64	; 0x40
 8004e84:	438a      	bics	r2, r1
 8004e86:	609a      	str	r2, [r3, #8]
 8004e88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e8a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e8e:	f383 8810 	msr	PRIMASK, r3
}
 8004e92:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004e94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e96:	228c      	movs	r2, #140	; 0x8c
 8004e98:	2120      	movs	r1, #32
 8004e9a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d118      	bne.n	8004ed6 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ea4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ea8:	60fb      	str	r3, [r7, #12]
  return(result);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004eae:	2301      	movs	r3, #1
 8004eb0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	f383 8810 	msr	PRIMASK, r3
}
 8004eb8:	46c0      	nop			; (mov r8, r8)
 8004eba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2110      	movs	r1, #16
 8004ec6:	438a      	bics	r2, r1
 8004ec8:	601a      	str	r2, [r3, #0]
 8004eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ecc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f383 8810 	msr	PRIMASK, r3
}
 8004ed4:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ed8:	2200      	movs	r2, #0
 8004eda:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ede:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d108      	bne.n	8004ef6 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ee6:	225c      	movs	r2, #92	; 0x5c
 8004ee8:	5a9a      	ldrh	r2, [r3, r2]
 8004eea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eec:	0011      	movs	r1, r2
 8004eee:	0018      	movs	r0, r3
 8004ef0:	f7fb ff00 	bl	8000cf4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004ef4:	e003      	b.n	8004efe <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8004ef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ef8:	0018      	movs	r0, r3
 8004efa:	f7ff f9c9 	bl	8004290 <HAL_UART_RxCpltCallback>
}
 8004efe:	46c0      	nop			; (mov r8, r8)
 8004f00:	46bd      	mov	sp, r7
 8004f02:	b014      	add	sp, #80	; 0x50
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	46c0      	nop			; (mov r8, r8)
 8004f08:	fffffeff 	.word	0xfffffeff

08004f0c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f18:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d10a      	bne.n	8004f3e <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	225c      	movs	r2, #92	; 0x5c
 8004f2c:	5a9b      	ldrh	r3, [r3, r2]
 8004f2e:	085b      	lsrs	r3, r3, #1
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	0011      	movs	r1, r2
 8004f36:	0018      	movs	r0, r3
 8004f38:	f7fb fedc 	bl	8000cf4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f3c:	e003      	b.n	8004f46 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	0018      	movs	r0, r3
 8004f42:	f7ff f9ad 	bl	80042a0 <HAL_UART_RxHalfCpltCallback>
}
 8004f46:	46c0      	nop			; (mov r8, r8)
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	b004      	add	sp, #16
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b086      	sub	sp, #24
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f5a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	2288      	movs	r2, #136	; 0x88
 8004f60:	589b      	ldr	r3, [r3, r2]
 8004f62:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	228c      	movs	r2, #140	; 0x8c
 8004f68:	589b      	ldr	r3, [r3, r2]
 8004f6a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	2280      	movs	r2, #128	; 0x80
 8004f74:	4013      	ands	r3, r2
 8004f76:	2b80      	cmp	r3, #128	; 0x80
 8004f78:	d10a      	bne.n	8004f90 <UART_DMAError+0x42>
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	2b21      	cmp	r3, #33	; 0x21
 8004f7e:	d107      	bne.n	8004f90 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	2256      	movs	r2, #86	; 0x56
 8004f84:	2100      	movs	r1, #0
 8004f86:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	0018      	movs	r0, r3
 8004f8c:	f7ff fe80 	bl	8004c90 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	2240      	movs	r2, #64	; 0x40
 8004f98:	4013      	ands	r3, r2
 8004f9a:	2b40      	cmp	r3, #64	; 0x40
 8004f9c:	d10a      	bne.n	8004fb4 <UART_DMAError+0x66>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2b22      	cmp	r3, #34	; 0x22
 8004fa2:	d107      	bne.n	8004fb4 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	225e      	movs	r2, #94	; 0x5e
 8004fa8:	2100      	movs	r1, #0
 8004faa:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	0018      	movs	r0, r3
 8004fb0:	f7ff feae 	bl	8004d10 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	2290      	movs	r2, #144	; 0x90
 8004fb8:	589b      	ldr	r3, [r3, r2]
 8004fba:	2210      	movs	r2, #16
 8004fbc:	431a      	orrs	r2, r3
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	2190      	movs	r1, #144	; 0x90
 8004fc2:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	0018      	movs	r0, r3
 8004fc8:	f7ff f972 	bl	80042b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fcc:	46c0      	nop			; (mov r8, r8)
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	b006      	add	sp, #24
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	225e      	movs	r2, #94	; 0x5e
 8004fe6:	2100      	movs	r1, #0
 8004fe8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2256      	movs	r2, #86	; 0x56
 8004fee:	2100      	movs	r1, #0
 8004ff0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	0018      	movs	r0, r3
 8004ff6:	f7ff f95b 	bl	80042b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ffa:	46c0      	nop			; (mov r8, r8)
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	b004      	add	sp, #16
 8005000:	bd80      	pop	{r7, pc}

08005002 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b086      	sub	sp, #24
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800500a:	f3ef 8310 	mrs	r3, PRIMASK
 800500e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005010:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005012:	617b      	str	r3, [r7, #20]
 8005014:	2301      	movs	r3, #1
 8005016:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f383 8810 	msr	PRIMASK, r3
}
 800501e:	46c0      	nop			; (mov r8, r8)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2140      	movs	r1, #64	; 0x40
 800502c:	438a      	bics	r2, r1
 800502e:	601a      	str	r2, [r3, #0]
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	f383 8810 	msr	PRIMASK, r3
}
 800503a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2288      	movs	r2, #136	; 0x88
 8005040:	2120      	movs	r1, #32
 8005042:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	0018      	movs	r0, r3
 800504e:	f7ff f917 	bl	8004280 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005052:	46c0      	nop			; (mov r8, r8)
 8005054:	46bd      	mov	sp, r7
 8005056:	b006      	add	sp, #24
 8005058:	bd80      	pop	{r7, pc}

0800505a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b082      	sub	sp, #8
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005062:	46c0      	nop			; (mov r8, r8)
 8005064:	46bd      	mov	sp, r7
 8005066:	b002      	add	sp, #8
 8005068:	bd80      	pop	{r7, pc}

0800506a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b082      	sub	sp, #8
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005072:	46c0      	nop			; (mov r8, r8)
 8005074:	46bd      	mov	sp, r7
 8005076:	b002      	add	sp, #8
 8005078:	bd80      	pop	{r7, pc}

0800507a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800507a:	b580      	push	{r7, lr}
 800507c:	b082      	sub	sp, #8
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005082:	46c0      	nop			; (mov r8, r8)
 8005084:	46bd      	mov	sp, r7
 8005086:	b002      	add	sp, #8
 8005088:	bd80      	pop	{r7, pc}
	...

0800508c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2284      	movs	r2, #132	; 0x84
 8005098:	5c9b      	ldrb	r3, [r3, r2]
 800509a:	2b01      	cmp	r3, #1
 800509c:	d101      	bne.n	80050a2 <HAL_UARTEx_DisableFifoMode+0x16>
 800509e:	2302      	movs	r3, #2
 80050a0:	e027      	b.n	80050f2 <HAL_UARTEx_DisableFifoMode+0x66>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2284      	movs	r2, #132	; 0x84
 80050a6:	2101      	movs	r1, #1
 80050a8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2288      	movs	r2, #136	; 0x88
 80050ae:	2124      	movs	r1, #36	; 0x24
 80050b0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2101      	movs	r1, #1
 80050c6:	438a      	bics	r2, r1
 80050c8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	4a0b      	ldr	r2, [pc, #44]	; (80050fc <HAL_UARTEx_DisableFifoMode+0x70>)
 80050ce:	4013      	ands	r3, r2
 80050d0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2288      	movs	r2, #136	; 0x88
 80050e4:	2120      	movs	r1, #32
 80050e6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2284      	movs	r2, #132	; 0x84
 80050ec:	2100      	movs	r1, #0
 80050ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	0018      	movs	r0, r3
 80050f4:	46bd      	mov	sp, r7
 80050f6:	b004      	add	sp, #16
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	46c0      	nop			; (mov r8, r8)
 80050fc:	dfffffff 	.word	0xdfffffff

08005100 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2284      	movs	r2, #132	; 0x84
 800510e:	5c9b      	ldrb	r3, [r3, r2]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d101      	bne.n	8005118 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005114:	2302      	movs	r3, #2
 8005116:	e02e      	b.n	8005176 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2284      	movs	r2, #132	; 0x84
 800511c:	2101      	movs	r1, #1
 800511e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2288      	movs	r2, #136	; 0x88
 8005124:	2124      	movs	r1, #36	; 0x24
 8005126:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2101      	movs	r1, #1
 800513c:	438a      	bics	r2, r1
 800513e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	00db      	lsls	r3, r3, #3
 8005148:	08d9      	lsrs	r1, r3, #3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	683a      	ldr	r2, [r7, #0]
 8005150:	430a      	orrs	r2, r1
 8005152:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	0018      	movs	r0, r3
 8005158:	f000 f8bc 	bl	80052d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2288      	movs	r2, #136	; 0x88
 8005168:	2120      	movs	r1, #32
 800516a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2284      	movs	r2, #132	; 0x84
 8005170:	2100      	movs	r1, #0
 8005172:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	0018      	movs	r0, r3
 8005178:	46bd      	mov	sp, r7
 800517a:	b004      	add	sp, #16
 800517c:	bd80      	pop	{r7, pc}
	...

08005180 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2284      	movs	r2, #132	; 0x84
 800518e:	5c9b      	ldrb	r3, [r3, r2]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d101      	bne.n	8005198 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005194:	2302      	movs	r3, #2
 8005196:	e02f      	b.n	80051f8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2284      	movs	r2, #132	; 0x84
 800519c:	2101      	movs	r1, #1
 800519e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2288      	movs	r2, #136	; 0x88
 80051a4:	2124      	movs	r1, #36	; 0x24
 80051a6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2101      	movs	r1, #1
 80051bc:	438a      	bics	r2, r1
 80051be:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	4a0e      	ldr	r2, [pc, #56]	; (8005200 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80051c8:	4013      	ands	r3, r2
 80051ca:	0019      	movs	r1, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	683a      	ldr	r2, [r7, #0]
 80051d2:	430a      	orrs	r2, r1
 80051d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	0018      	movs	r0, r3
 80051da:	f000 f87b 	bl	80052d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2288      	movs	r2, #136	; 0x88
 80051ea:	2120      	movs	r1, #32
 80051ec:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2284      	movs	r2, #132	; 0x84
 80051f2:	2100      	movs	r1, #0
 80051f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	0018      	movs	r0, r3
 80051fa:	46bd      	mov	sp, r7
 80051fc:	b004      	add	sp, #16
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	f1ffffff 	.word	0xf1ffffff

08005204 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005204:	b5b0      	push	{r4, r5, r7, lr}
 8005206:	b08a      	sub	sp, #40	; 0x28
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	1dbb      	adds	r3, r7, #6
 8005210:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	228c      	movs	r2, #140	; 0x8c
 8005216:	589b      	ldr	r3, [r3, r2]
 8005218:	2b20      	cmp	r3, #32
 800521a:	d156      	bne.n	80052ca <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d003      	beq.n	800522a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005222:	1dbb      	adds	r3, r7, #6
 8005224:	881b      	ldrh	r3, [r3, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d101      	bne.n	800522e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e04e      	b.n	80052cc <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	689a      	ldr	r2, [r3, #8]
 8005232:	2380      	movs	r3, #128	; 0x80
 8005234:	015b      	lsls	r3, r3, #5
 8005236:	429a      	cmp	r2, r3
 8005238:	d109      	bne.n	800524e <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d105      	bne.n	800524e <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	2201      	movs	r2, #1
 8005246:	4013      	ands	r3, r2
 8005248:	d001      	beq.n	800524e <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e03e      	b.n	80052cc <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2201      	movs	r2, #1
 8005252:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800525a:	2527      	movs	r5, #39	; 0x27
 800525c:	197c      	adds	r4, r7, r5
 800525e:	1dbb      	adds	r3, r7, #6
 8005260:	881a      	ldrh	r2, [r3, #0]
 8005262:	68b9      	ldr	r1, [r7, #8]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	0018      	movs	r0, r3
 8005268:	f7ff fc6c 	bl	8004b44 <UART_Start_Receive_DMA>
 800526c:	0003      	movs	r3, r0
 800526e:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005270:	197b      	adds	r3, r7, r5
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d124      	bne.n	80052c2 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800527c:	2b01      	cmp	r3, #1
 800527e:	d11c      	bne.n	80052ba <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2210      	movs	r2, #16
 8005286:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005288:	f3ef 8310 	mrs	r3, PRIMASK
 800528c:	617b      	str	r3, [r7, #20]
  return(result);
 800528e:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005290:	623b      	str	r3, [r7, #32]
 8005292:	2301      	movs	r3, #1
 8005294:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	f383 8810 	msr	PRIMASK, r3
}
 800529c:	46c0      	nop			; (mov r8, r8)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2110      	movs	r1, #16
 80052aa:	430a      	orrs	r2, r1
 80052ac:	601a      	str	r2, [r3, #0]
 80052ae:	6a3b      	ldr	r3, [r7, #32]
 80052b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	f383 8810 	msr	PRIMASK, r3
}
 80052b8:	e003      	b.n	80052c2 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80052ba:	2327      	movs	r3, #39	; 0x27
 80052bc:	18fb      	adds	r3, r7, r3
 80052be:	2201      	movs	r2, #1
 80052c0:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 80052c2:	2327      	movs	r3, #39	; 0x27
 80052c4:	18fb      	adds	r3, r7, r3
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	e000      	b.n	80052cc <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 80052ca:	2302      	movs	r3, #2
  }
}
 80052cc:	0018      	movs	r0, r3
 80052ce:	46bd      	mov	sp, r7
 80052d0:	b00a      	add	sp, #40	; 0x28
 80052d2:	bdb0      	pop	{r4, r5, r7, pc}

080052d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80052d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d108      	bne.n	80052f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	226a      	movs	r2, #106	; 0x6a
 80052e8:	2101      	movs	r1, #1
 80052ea:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2268      	movs	r2, #104	; 0x68
 80052f0:	2101      	movs	r1, #1
 80052f2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80052f4:	e043      	b.n	800537e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80052f6:	260f      	movs	r6, #15
 80052f8:	19bb      	adds	r3, r7, r6
 80052fa:	2208      	movs	r2, #8
 80052fc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80052fe:	200e      	movs	r0, #14
 8005300:	183b      	adds	r3, r7, r0
 8005302:	2208      	movs	r2, #8
 8005304:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	0e5b      	lsrs	r3, r3, #25
 800530e:	b2da      	uxtb	r2, r3
 8005310:	240d      	movs	r4, #13
 8005312:	193b      	adds	r3, r7, r4
 8005314:	2107      	movs	r1, #7
 8005316:	400a      	ands	r2, r1
 8005318:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	0f5b      	lsrs	r3, r3, #29
 8005322:	b2da      	uxtb	r2, r3
 8005324:	250c      	movs	r5, #12
 8005326:	197b      	adds	r3, r7, r5
 8005328:	2107      	movs	r1, #7
 800532a:	400a      	ands	r2, r1
 800532c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800532e:	183b      	adds	r3, r7, r0
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	197a      	adds	r2, r7, r5
 8005334:	7812      	ldrb	r2, [r2, #0]
 8005336:	4914      	ldr	r1, [pc, #80]	; (8005388 <UARTEx_SetNbDataToProcess+0xb4>)
 8005338:	5c8a      	ldrb	r2, [r1, r2]
 800533a:	435a      	muls	r2, r3
 800533c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800533e:	197b      	adds	r3, r7, r5
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	4a12      	ldr	r2, [pc, #72]	; (800538c <UARTEx_SetNbDataToProcess+0xb8>)
 8005344:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005346:	0019      	movs	r1, r3
 8005348:	f7fa ff78 	bl	800023c <__divsi3>
 800534c:	0003      	movs	r3, r0
 800534e:	b299      	uxth	r1, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	226a      	movs	r2, #106	; 0x6a
 8005354:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005356:	19bb      	adds	r3, r7, r6
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	193a      	adds	r2, r7, r4
 800535c:	7812      	ldrb	r2, [r2, #0]
 800535e:	490a      	ldr	r1, [pc, #40]	; (8005388 <UARTEx_SetNbDataToProcess+0xb4>)
 8005360:	5c8a      	ldrb	r2, [r1, r2]
 8005362:	435a      	muls	r2, r3
 8005364:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005366:	193b      	adds	r3, r7, r4
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	4a08      	ldr	r2, [pc, #32]	; (800538c <UARTEx_SetNbDataToProcess+0xb8>)
 800536c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800536e:	0019      	movs	r1, r3
 8005370:	f7fa ff64 	bl	800023c <__divsi3>
 8005374:	0003      	movs	r3, r0
 8005376:	b299      	uxth	r1, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2268      	movs	r2, #104	; 0x68
 800537c:	5299      	strh	r1, [r3, r2]
}
 800537e:	46c0      	nop			; (mov r8, r8)
 8005380:	46bd      	mov	sp, r7
 8005382:	b005      	add	sp, #20
 8005384:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005386:	46c0      	nop			; (mov r8, r8)
 8005388:	080075dc 	.word	0x080075dc
 800538c:	080075e4 	.word	0x080075e4

08005390 <__errno>:
 8005390:	4b01      	ldr	r3, [pc, #4]	; (8005398 <__errno+0x8>)
 8005392:	6818      	ldr	r0, [r3, #0]
 8005394:	4770      	bx	lr
 8005396:	46c0      	nop			; (mov r8, r8)
 8005398:	20000098 	.word	0x20000098

0800539c <__libc_init_array>:
 800539c:	b570      	push	{r4, r5, r6, lr}
 800539e:	2600      	movs	r6, #0
 80053a0:	4d0c      	ldr	r5, [pc, #48]	; (80053d4 <__libc_init_array+0x38>)
 80053a2:	4c0d      	ldr	r4, [pc, #52]	; (80053d8 <__libc_init_array+0x3c>)
 80053a4:	1b64      	subs	r4, r4, r5
 80053a6:	10a4      	asrs	r4, r4, #2
 80053a8:	42a6      	cmp	r6, r4
 80053aa:	d109      	bne.n	80053c0 <__libc_init_array+0x24>
 80053ac:	2600      	movs	r6, #0
 80053ae:	f001 ffe9 	bl	8007384 <_init>
 80053b2:	4d0a      	ldr	r5, [pc, #40]	; (80053dc <__libc_init_array+0x40>)
 80053b4:	4c0a      	ldr	r4, [pc, #40]	; (80053e0 <__libc_init_array+0x44>)
 80053b6:	1b64      	subs	r4, r4, r5
 80053b8:	10a4      	asrs	r4, r4, #2
 80053ba:	42a6      	cmp	r6, r4
 80053bc:	d105      	bne.n	80053ca <__libc_init_array+0x2e>
 80053be:	bd70      	pop	{r4, r5, r6, pc}
 80053c0:	00b3      	lsls	r3, r6, #2
 80053c2:	58eb      	ldr	r3, [r5, r3]
 80053c4:	4798      	blx	r3
 80053c6:	3601      	adds	r6, #1
 80053c8:	e7ee      	b.n	80053a8 <__libc_init_array+0xc>
 80053ca:	00b3      	lsls	r3, r6, #2
 80053cc:	58eb      	ldr	r3, [r5, r3]
 80053ce:	4798      	blx	r3
 80053d0:	3601      	adds	r6, #1
 80053d2:	e7f2      	b.n	80053ba <__libc_init_array+0x1e>
 80053d4:	08007858 	.word	0x08007858
 80053d8:	08007858 	.word	0x08007858
 80053dc:	08007858 	.word	0x08007858
 80053e0:	0800785c 	.word	0x0800785c

080053e4 <memset>:
 80053e4:	0003      	movs	r3, r0
 80053e6:	1882      	adds	r2, r0, r2
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d100      	bne.n	80053ee <memset+0xa>
 80053ec:	4770      	bx	lr
 80053ee:	7019      	strb	r1, [r3, #0]
 80053f0:	3301      	adds	r3, #1
 80053f2:	e7f9      	b.n	80053e8 <memset+0x4>

080053f4 <sniprintf>:
 80053f4:	b40c      	push	{r2, r3}
 80053f6:	b530      	push	{r4, r5, lr}
 80053f8:	4b17      	ldr	r3, [pc, #92]	; (8005458 <sniprintf+0x64>)
 80053fa:	000c      	movs	r4, r1
 80053fc:	681d      	ldr	r5, [r3, #0]
 80053fe:	b09d      	sub	sp, #116	; 0x74
 8005400:	2900      	cmp	r1, #0
 8005402:	da08      	bge.n	8005416 <sniprintf+0x22>
 8005404:	238b      	movs	r3, #139	; 0x8b
 8005406:	2001      	movs	r0, #1
 8005408:	602b      	str	r3, [r5, #0]
 800540a:	4240      	negs	r0, r0
 800540c:	b01d      	add	sp, #116	; 0x74
 800540e:	bc30      	pop	{r4, r5}
 8005410:	bc08      	pop	{r3}
 8005412:	b002      	add	sp, #8
 8005414:	4718      	bx	r3
 8005416:	2382      	movs	r3, #130	; 0x82
 8005418:	466a      	mov	r2, sp
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	8293      	strh	r3, [r2, #20]
 800541e:	2300      	movs	r3, #0
 8005420:	9002      	str	r0, [sp, #8]
 8005422:	9006      	str	r0, [sp, #24]
 8005424:	4299      	cmp	r1, r3
 8005426:	d000      	beq.n	800542a <sniprintf+0x36>
 8005428:	1e4b      	subs	r3, r1, #1
 800542a:	9304      	str	r3, [sp, #16]
 800542c:	9307      	str	r3, [sp, #28]
 800542e:	2301      	movs	r3, #1
 8005430:	466a      	mov	r2, sp
 8005432:	425b      	negs	r3, r3
 8005434:	82d3      	strh	r3, [r2, #22]
 8005436:	0028      	movs	r0, r5
 8005438:	ab21      	add	r3, sp, #132	; 0x84
 800543a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800543c:	a902      	add	r1, sp, #8
 800543e:	9301      	str	r3, [sp, #4]
 8005440:	f000 face 	bl	80059e0 <_svfiprintf_r>
 8005444:	1c43      	adds	r3, r0, #1
 8005446:	da01      	bge.n	800544c <sniprintf+0x58>
 8005448:	238b      	movs	r3, #139	; 0x8b
 800544a:	602b      	str	r3, [r5, #0]
 800544c:	2c00      	cmp	r4, #0
 800544e:	d0dd      	beq.n	800540c <sniprintf+0x18>
 8005450:	2300      	movs	r3, #0
 8005452:	9a02      	ldr	r2, [sp, #8]
 8005454:	7013      	strb	r3, [r2, #0]
 8005456:	e7d9      	b.n	800540c <sniprintf+0x18>
 8005458:	20000098 	.word	0x20000098

0800545c <siprintf>:
 800545c:	b40e      	push	{r1, r2, r3}
 800545e:	b500      	push	{lr}
 8005460:	490b      	ldr	r1, [pc, #44]	; (8005490 <siprintf+0x34>)
 8005462:	b09c      	sub	sp, #112	; 0x70
 8005464:	ab1d      	add	r3, sp, #116	; 0x74
 8005466:	9002      	str	r0, [sp, #8]
 8005468:	9006      	str	r0, [sp, #24]
 800546a:	9107      	str	r1, [sp, #28]
 800546c:	9104      	str	r1, [sp, #16]
 800546e:	4809      	ldr	r0, [pc, #36]	; (8005494 <siprintf+0x38>)
 8005470:	4909      	ldr	r1, [pc, #36]	; (8005498 <siprintf+0x3c>)
 8005472:	cb04      	ldmia	r3!, {r2}
 8005474:	9105      	str	r1, [sp, #20]
 8005476:	6800      	ldr	r0, [r0, #0]
 8005478:	a902      	add	r1, sp, #8
 800547a:	9301      	str	r3, [sp, #4]
 800547c:	f000 fab0 	bl	80059e0 <_svfiprintf_r>
 8005480:	2300      	movs	r3, #0
 8005482:	9a02      	ldr	r2, [sp, #8]
 8005484:	7013      	strb	r3, [r2, #0]
 8005486:	b01c      	add	sp, #112	; 0x70
 8005488:	bc08      	pop	{r3}
 800548a:	b003      	add	sp, #12
 800548c:	4718      	bx	r3
 800548e:	46c0      	nop			; (mov r8, r8)
 8005490:	7fffffff 	.word	0x7fffffff
 8005494:	20000098 	.word	0x20000098
 8005498:	ffff0208 	.word	0xffff0208

0800549c <siscanf>:
 800549c:	b40e      	push	{r1, r2, r3}
 800549e:	b530      	push	{r4, r5, lr}
 80054a0:	2381      	movs	r3, #129	; 0x81
 80054a2:	b09c      	sub	sp, #112	; 0x70
 80054a4:	466a      	mov	r2, sp
 80054a6:	ac1f      	add	r4, sp, #124	; 0x7c
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	cc20      	ldmia	r4!, {r5}
 80054ac:	8293      	strh	r3, [r2, #20]
 80054ae:	9002      	str	r0, [sp, #8]
 80054b0:	9006      	str	r0, [sp, #24]
 80054b2:	f7fa fe27 	bl	8000104 <strlen>
 80054b6:	4b0b      	ldr	r3, [pc, #44]	; (80054e4 <siscanf+0x48>)
 80054b8:	466a      	mov	r2, sp
 80054ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80054bc:	2300      	movs	r3, #0
 80054be:	9003      	str	r0, [sp, #12]
 80054c0:	9007      	str	r0, [sp, #28]
 80054c2:	4809      	ldr	r0, [pc, #36]	; (80054e8 <siscanf+0x4c>)
 80054c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80054c6:	9314      	str	r3, [sp, #80]	; 0x50
 80054c8:	3b01      	subs	r3, #1
 80054ca:	82d3      	strh	r3, [r2, #22]
 80054cc:	a902      	add	r1, sp, #8
 80054ce:	0023      	movs	r3, r4
 80054d0:	002a      	movs	r2, r5
 80054d2:	6800      	ldr	r0, [r0, #0]
 80054d4:	9401      	str	r4, [sp, #4]
 80054d6:	f000 fbdf 	bl	8005c98 <__ssvfiscanf_r>
 80054da:	b01c      	add	sp, #112	; 0x70
 80054dc:	bc30      	pop	{r4, r5}
 80054de:	bc08      	pop	{r3}
 80054e0:	b003      	add	sp, #12
 80054e2:	4718      	bx	r3
 80054e4:	08005515 	.word	0x08005515
 80054e8:	20000098 	.word	0x20000098

080054ec <__sread>:
 80054ec:	b570      	push	{r4, r5, r6, lr}
 80054ee:	000c      	movs	r4, r1
 80054f0:	250e      	movs	r5, #14
 80054f2:	5f49      	ldrsh	r1, [r1, r5]
 80054f4:	f001 f994 	bl	8006820 <_read_r>
 80054f8:	2800      	cmp	r0, #0
 80054fa:	db03      	blt.n	8005504 <__sread+0x18>
 80054fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80054fe:	181b      	adds	r3, r3, r0
 8005500:	6563      	str	r3, [r4, #84]	; 0x54
 8005502:	bd70      	pop	{r4, r5, r6, pc}
 8005504:	89a3      	ldrh	r3, [r4, #12]
 8005506:	4a02      	ldr	r2, [pc, #8]	; (8005510 <__sread+0x24>)
 8005508:	4013      	ands	r3, r2
 800550a:	81a3      	strh	r3, [r4, #12]
 800550c:	e7f9      	b.n	8005502 <__sread+0x16>
 800550e:	46c0      	nop			; (mov r8, r8)
 8005510:	ffffefff 	.word	0xffffefff

08005514 <__seofread>:
 8005514:	2000      	movs	r0, #0
 8005516:	4770      	bx	lr

08005518 <__swrite>:
 8005518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800551a:	001f      	movs	r7, r3
 800551c:	898b      	ldrh	r3, [r1, #12]
 800551e:	0005      	movs	r5, r0
 8005520:	000c      	movs	r4, r1
 8005522:	0016      	movs	r6, r2
 8005524:	05db      	lsls	r3, r3, #23
 8005526:	d505      	bpl.n	8005534 <__swrite+0x1c>
 8005528:	230e      	movs	r3, #14
 800552a:	5ec9      	ldrsh	r1, [r1, r3]
 800552c:	2200      	movs	r2, #0
 800552e:	2302      	movs	r3, #2
 8005530:	f000 f8f4 	bl	800571c <_lseek_r>
 8005534:	89a3      	ldrh	r3, [r4, #12]
 8005536:	4a05      	ldr	r2, [pc, #20]	; (800554c <__swrite+0x34>)
 8005538:	0028      	movs	r0, r5
 800553a:	4013      	ands	r3, r2
 800553c:	81a3      	strh	r3, [r4, #12]
 800553e:	0032      	movs	r2, r6
 8005540:	230e      	movs	r3, #14
 8005542:	5ee1      	ldrsh	r1, [r4, r3]
 8005544:	003b      	movs	r3, r7
 8005546:	f000 f895 	bl	8005674 <_write_r>
 800554a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800554c:	ffffefff 	.word	0xffffefff

08005550 <__sseek>:
 8005550:	b570      	push	{r4, r5, r6, lr}
 8005552:	000c      	movs	r4, r1
 8005554:	250e      	movs	r5, #14
 8005556:	5f49      	ldrsh	r1, [r1, r5]
 8005558:	f000 f8e0 	bl	800571c <_lseek_r>
 800555c:	89a3      	ldrh	r3, [r4, #12]
 800555e:	1c42      	adds	r2, r0, #1
 8005560:	d103      	bne.n	800556a <__sseek+0x1a>
 8005562:	4a05      	ldr	r2, [pc, #20]	; (8005578 <__sseek+0x28>)
 8005564:	4013      	ands	r3, r2
 8005566:	81a3      	strh	r3, [r4, #12]
 8005568:	bd70      	pop	{r4, r5, r6, pc}
 800556a:	2280      	movs	r2, #128	; 0x80
 800556c:	0152      	lsls	r2, r2, #5
 800556e:	4313      	orrs	r3, r2
 8005570:	81a3      	strh	r3, [r4, #12]
 8005572:	6560      	str	r0, [r4, #84]	; 0x54
 8005574:	e7f8      	b.n	8005568 <__sseek+0x18>
 8005576:	46c0      	nop			; (mov r8, r8)
 8005578:	ffffefff 	.word	0xffffefff

0800557c <__sclose>:
 800557c:	b510      	push	{r4, lr}
 800557e:	230e      	movs	r3, #14
 8005580:	5ec9      	ldrsh	r1, [r1, r3]
 8005582:	f000 f8a9 	bl	80056d8 <_close_r>
 8005586:	bd10      	pop	{r4, pc}

08005588 <strncmp>:
 8005588:	b530      	push	{r4, r5, lr}
 800558a:	0005      	movs	r5, r0
 800558c:	1e10      	subs	r0, r2, #0
 800558e:	d008      	beq.n	80055a2 <strncmp+0x1a>
 8005590:	2400      	movs	r4, #0
 8005592:	3a01      	subs	r2, #1
 8005594:	5d2b      	ldrb	r3, [r5, r4]
 8005596:	5d08      	ldrb	r0, [r1, r4]
 8005598:	4283      	cmp	r3, r0
 800559a:	d101      	bne.n	80055a0 <strncmp+0x18>
 800559c:	4294      	cmp	r4, r2
 800559e:	d101      	bne.n	80055a4 <strncmp+0x1c>
 80055a0:	1a18      	subs	r0, r3, r0
 80055a2:	bd30      	pop	{r4, r5, pc}
 80055a4:	3401      	adds	r4, #1
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1f4      	bne.n	8005594 <strncmp+0xc>
 80055aa:	e7f9      	b.n	80055a0 <strncmp+0x18>

080055ac <strtok>:
 80055ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ae:	4b16      	ldr	r3, [pc, #88]	; (8005608 <strtok+0x5c>)
 80055b0:	0005      	movs	r5, r0
 80055b2:	681f      	ldr	r7, [r3, #0]
 80055b4:	000e      	movs	r6, r1
 80055b6:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80055b8:	2c00      	cmp	r4, #0
 80055ba:	d11d      	bne.n	80055f8 <strtok+0x4c>
 80055bc:	2050      	movs	r0, #80	; 0x50
 80055be:	f000 f8c1 	bl	8005744 <malloc>
 80055c2:	1e02      	subs	r2, r0, #0
 80055c4:	65b8      	str	r0, [r7, #88]	; 0x58
 80055c6:	d104      	bne.n	80055d2 <strtok+0x26>
 80055c8:	2157      	movs	r1, #87	; 0x57
 80055ca:	4b10      	ldr	r3, [pc, #64]	; (800560c <strtok+0x60>)
 80055cc:	4810      	ldr	r0, [pc, #64]	; (8005610 <strtok+0x64>)
 80055ce:	f000 f865 	bl	800569c <__assert_func>
 80055d2:	6004      	str	r4, [r0, #0]
 80055d4:	6044      	str	r4, [r0, #4]
 80055d6:	6084      	str	r4, [r0, #8]
 80055d8:	60c4      	str	r4, [r0, #12]
 80055da:	6104      	str	r4, [r0, #16]
 80055dc:	6144      	str	r4, [r0, #20]
 80055de:	6184      	str	r4, [r0, #24]
 80055e0:	6284      	str	r4, [r0, #40]	; 0x28
 80055e2:	62c4      	str	r4, [r0, #44]	; 0x2c
 80055e4:	6304      	str	r4, [r0, #48]	; 0x30
 80055e6:	6344      	str	r4, [r0, #52]	; 0x34
 80055e8:	6384      	str	r4, [r0, #56]	; 0x38
 80055ea:	63c4      	str	r4, [r0, #60]	; 0x3c
 80055ec:	6404      	str	r4, [r0, #64]	; 0x40
 80055ee:	6444      	str	r4, [r0, #68]	; 0x44
 80055f0:	6484      	str	r4, [r0, #72]	; 0x48
 80055f2:	64c4      	str	r4, [r0, #76]	; 0x4c
 80055f4:	7704      	strb	r4, [r0, #28]
 80055f6:	6244      	str	r4, [r0, #36]	; 0x24
 80055f8:	0031      	movs	r1, r6
 80055fa:	0028      	movs	r0, r5
 80055fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80055fe:	2301      	movs	r3, #1
 8005600:	f000 f808 	bl	8005614 <__strtok_r>
 8005604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005606:	46c0      	nop			; (mov r8, r8)
 8005608:	20000098 	.word	0x20000098
 800560c:	080075f0 	.word	0x080075f0
 8005610:	08007607 	.word	0x08007607

08005614 <__strtok_r>:
 8005614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005616:	2800      	cmp	r0, #0
 8005618:	d102      	bne.n	8005620 <__strtok_r+0xc>
 800561a:	6810      	ldr	r0, [r2, #0]
 800561c:	2800      	cmp	r0, #0
 800561e:	d013      	beq.n	8005648 <__strtok_r+0x34>
 8005620:	0004      	movs	r4, r0
 8005622:	0020      	movs	r0, r4
 8005624:	000e      	movs	r6, r1
 8005626:	7805      	ldrb	r5, [r0, #0]
 8005628:	3401      	adds	r4, #1
 800562a:	7837      	ldrb	r7, [r6, #0]
 800562c:	2f00      	cmp	r7, #0
 800562e:	d104      	bne.n	800563a <__strtok_r+0x26>
 8005630:	2d00      	cmp	r5, #0
 8005632:	d10f      	bne.n	8005654 <__strtok_r+0x40>
 8005634:	0028      	movs	r0, r5
 8005636:	6015      	str	r5, [r2, #0]
 8005638:	e006      	b.n	8005648 <__strtok_r+0x34>
 800563a:	3601      	adds	r6, #1
 800563c:	42bd      	cmp	r5, r7
 800563e:	d1f4      	bne.n	800562a <__strtok_r+0x16>
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1ee      	bne.n	8005622 <__strtok_r+0xe>
 8005644:	6014      	str	r4, [r2, #0]
 8005646:	7003      	strb	r3, [r0, #0]
 8005648:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800564a:	002f      	movs	r7, r5
 800564c:	e00f      	b.n	800566e <__strtok_r+0x5a>
 800564e:	3301      	adds	r3, #1
 8005650:	2e00      	cmp	r6, #0
 8005652:	d104      	bne.n	800565e <__strtok_r+0x4a>
 8005654:	0023      	movs	r3, r4
 8005656:	3401      	adds	r4, #1
 8005658:	781d      	ldrb	r5, [r3, #0]
 800565a:	0027      	movs	r7, r4
 800565c:	000b      	movs	r3, r1
 800565e:	781e      	ldrb	r6, [r3, #0]
 8005660:	42b5      	cmp	r5, r6
 8005662:	d1f4      	bne.n	800564e <__strtok_r+0x3a>
 8005664:	2d00      	cmp	r5, #0
 8005666:	d0f0      	beq.n	800564a <__strtok_r+0x36>
 8005668:	2300      	movs	r3, #0
 800566a:	3c01      	subs	r4, #1
 800566c:	7023      	strb	r3, [r4, #0]
 800566e:	6017      	str	r7, [r2, #0]
 8005670:	e7ea      	b.n	8005648 <__strtok_r+0x34>
	...

08005674 <_write_r>:
 8005674:	b570      	push	{r4, r5, r6, lr}
 8005676:	0004      	movs	r4, r0
 8005678:	0008      	movs	r0, r1
 800567a:	0011      	movs	r1, r2
 800567c:	001a      	movs	r2, r3
 800567e:	2300      	movs	r3, #0
 8005680:	4d05      	ldr	r5, [pc, #20]	; (8005698 <_write_r+0x24>)
 8005682:	602b      	str	r3, [r5, #0]
 8005684:	f7fb fe6d 	bl	8001362 <_write>
 8005688:	1c43      	adds	r3, r0, #1
 800568a:	d103      	bne.n	8005694 <_write_r+0x20>
 800568c:	682b      	ldr	r3, [r5, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d000      	beq.n	8005694 <_write_r+0x20>
 8005692:	6023      	str	r3, [r4, #0]
 8005694:	bd70      	pop	{r4, r5, r6, pc}
 8005696:	46c0      	nop			; (mov r8, r8)
 8005698:	20000534 	.word	0x20000534

0800569c <__assert_func>:
 800569c:	b530      	push	{r4, r5, lr}
 800569e:	0014      	movs	r4, r2
 80056a0:	001a      	movs	r2, r3
 80056a2:	4b09      	ldr	r3, [pc, #36]	; (80056c8 <__assert_func+0x2c>)
 80056a4:	0005      	movs	r5, r0
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	b085      	sub	sp, #20
 80056aa:	68d8      	ldr	r0, [r3, #12]
 80056ac:	4b07      	ldr	r3, [pc, #28]	; (80056cc <__assert_func+0x30>)
 80056ae:	2c00      	cmp	r4, #0
 80056b0:	d101      	bne.n	80056b6 <__assert_func+0x1a>
 80056b2:	4b07      	ldr	r3, [pc, #28]	; (80056d0 <__assert_func+0x34>)
 80056b4:	001c      	movs	r4, r3
 80056b6:	9301      	str	r3, [sp, #4]
 80056b8:	9100      	str	r1, [sp, #0]
 80056ba:	002b      	movs	r3, r5
 80056bc:	4905      	ldr	r1, [pc, #20]	; (80056d4 <__assert_func+0x38>)
 80056be:	9402      	str	r4, [sp, #8]
 80056c0:	f000 f81c 	bl	80056fc <fiprintf>
 80056c4:	f001 fb3a 	bl	8006d3c <abort>
 80056c8:	20000098 	.word	0x20000098
 80056cc:	08007664 	.word	0x08007664
 80056d0:	0800769f 	.word	0x0800769f
 80056d4:	08007671 	.word	0x08007671

080056d8 <_close_r>:
 80056d8:	2300      	movs	r3, #0
 80056da:	b570      	push	{r4, r5, r6, lr}
 80056dc:	4d06      	ldr	r5, [pc, #24]	; (80056f8 <_close_r+0x20>)
 80056de:	0004      	movs	r4, r0
 80056e0:	0008      	movs	r0, r1
 80056e2:	602b      	str	r3, [r5, #0]
 80056e4:	f7fb fe59 	bl	800139a <_close>
 80056e8:	1c43      	adds	r3, r0, #1
 80056ea:	d103      	bne.n	80056f4 <_close_r+0x1c>
 80056ec:	682b      	ldr	r3, [r5, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d000      	beq.n	80056f4 <_close_r+0x1c>
 80056f2:	6023      	str	r3, [r4, #0]
 80056f4:	bd70      	pop	{r4, r5, r6, pc}
 80056f6:	46c0      	nop			; (mov r8, r8)
 80056f8:	20000534 	.word	0x20000534

080056fc <fiprintf>:
 80056fc:	b40e      	push	{r1, r2, r3}
 80056fe:	b503      	push	{r0, r1, lr}
 8005700:	0001      	movs	r1, r0
 8005702:	ab03      	add	r3, sp, #12
 8005704:	4804      	ldr	r0, [pc, #16]	; (8005718 <fiprintf+0x1c>)
 8005706:	cb04      	ldmia	r3!, {r2}
 8005708:	6800      	ldr	r0, [r0, #0]
 800570a:	9301      	str	r3, [sp, #4]
 800570c:	f000 fc6a 	bl	8005fe4 <_vfiprintf_r>
 8005710:	b002      	add	sp, #8
 8005712:	bc08      	pop	{r3}
 8005714:	b003      	add	sp, #12
 8005716:	4718      	bx	r3
 8005718:	20000098 	.word	0x20000098

0800571c <_lseek_r>:
 800571c:	b570      	push	{r4, r5, r6, lr}
 800571e:	0004      	movs	r4, r0
 8005720:	0008      	movs	r0, r1
 8005722:	0011      	movs	r1, r2
 8005724:	001a      	movs	r2, r3
 8005726:	2300      	movs	r3, #0
 8005728:	4d05      	ldr	r5, [pc, #20]	; (8005740 <_lseek_r+0x24>)
 800572a:	602b      	str	r3, [r5, #0]
 800572c:	f7fb fe56 	bl	80013dc <_lseek>
 8005730:	1c43      	adds	r3, r0, #1
 8005732:	d103      	bne.n	800573c <_lseek_r+0x20>
 8005734:	682b      	ldr	r3, [r5, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d000      	beq.n	800573c <_lseek_r+0x20>
 800573a:	6023      	str	r3, [r4, #0]
 800573c:	bd70      	pop	{r4, r5, r6, pc}
 800573e:	46c0      	nop			; (mov r8, r8)
 8005740:	20000534 	.word	0x20000534

08005744 <malloc>:
 8005744:	b510      	push	{r4, lr}
 8005746:	4b03      	ldr	r3, [pc, #12]	; (8005754 <malloc+0x10>)
 8005748:	0001      	movs	r1, r0
 800574a:	6818      	ldr	r0, [r3, #0]
 800574c:	f000 f870 	bl	8005830 <_malloc_r>
 8005750:	bd10      	pop	{r4, pc}
 8005752:	46c0      	nop			; (mov r8, r8)
 8005754:	20000098 	.word	0x20000098

08005758 <_free_r>:
 8005758:	b570      	push	{r4, r5, r6, lr}
 800575a:	0005      	movs	r5, r0
 800575c:	2900      	cmp	r1, #0
 800575e:	d010      	beq.n	8005782 <_free_r+0x2a>
 8005760:	1f0c      	subs	r4, r1, #4
 8005762:	6823      	ldr	r3, [r4, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	da00      	bge.n	800576a <_free_r+0x12>
 8005768:	18e4      	adds	r4, r4, r3
 800576a:	0028      	movs	r0, r5
 800576c:	f001 fd54 	bl	8007218 <__malloc_lock>
 8005770:	4a1d      	ldr	r2, [pc, #116]	; (80057e8 <_free_r+0x90>)
 8005772:	6813      	ldr	r3, [r2, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d105      	bne.n	8005784 <_free_r+0x2c>
 8005778:	6063      	str	r3, [r4, #4]
 800577a:	6014      	str	r4, [r2, #0]
 800577c:	0028      	movs	r0, r5
 800577e:	f001 fd53 	bl	8007228 <__malloc_unlock>
 8005782:	bd70      	pop	{r4, r5, r6, pc}
 8005784:	42a3      	cmp	r3, r4
 8005786:	d908      	bls.n	800579a <_free_r+0x42>
 8005788:	6821      	ldr	r1, [r4, #0]
 800578a:	1860      	adds	r0, r4, r1
 800578c:	4283      	cmp	r3, r0
 800578e:	d1f3      	bne.n	8005778 <_free_r+0x20>
 8005790:	6818      	ldr	r0, [r3, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	1841      	adds	r1, r0, r1
 8005796:	6021      	str	r1, [r4, #0]
 8005798:	e7ee      	b.n	8005778 <_free_r+0x20>
 800579a:	001a      	movs	r2, r3
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d001      	beq.n	80057a6 <_free_r+0x4e>
 80057a2:	42a3      	cmp	r3, r4
 80057a4:	d9f9      	bls.n	800579a <_free_r+0x42>
 80057a6:	6811      	ldr	r1, [r2, #0]
 80057a8:	1850      	adds	r0, r2, r1
 80057aa:	42a0      	cmp	r0, r4
 80057ac:	d10b      	bne.n	80057c6 <_free_r+0x6e>
 80057ae:	6820      	ldr	r0, [r4, #0]
 80057b0:	1809      	adds	r1, r1, r0
 80057b2:	1850      	adds	r0, r2, r1
 80057b4:	6011      	str	r1, [r2, #0]
 80057b6:	4283      	cmp	r3, r0
 80057b8:	d1e0      	bne.n	800577c <_free_r+0x24>
 80057ba:	6818      	ldr	r0, [r3, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	1841      	adds	r1, r0, r1
 80057c0:	6011      	str	r1, [r2, #0]
 80057c2:	6053      	str	r3, [r2, #4]
 80057c4:	e7da      	b.n	800577c <_free_r+0x24>
 80057c6:	42a0      	cmp	r0, r4
 80057c8:	d902      	bls.n	80057d0 <_free_r+0x78>
 80057ca:	230c      	movs	r3, #12
 80057cc:	602b      	str	r3, [r5, #0]
 80057ce:	e7d5      	b.n	800577c <_free_r+0x24>
 80057d0:	6821      	ldr	r1, [r4, #0]
 80057d2:	1860      	adds	r0, r4, r1
 80057d4:	4283      	cmp	r3, r0
 80057d6:	d103      	bne.n	80057e0 <_free_r+0x88>
 80057d8:	6818      	ldr	r0, [r3, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	1841      	adds	r1, r0, r1
 80057de:	6021      	str	r1, [r4, #0]
 80057e0:	6063      	str	r3, [r4, #4]
 80057e2:	6054      	str	r4, [r2, #4]
 80057e4:	e7ca      	b.n	800577c <_free_r+0x24>
 80057e6:	46c0      	nop			; (mov r8, r8)
 80057e8:	2000052c 	.word	0x2000052c

080057ec <sbrk_aligned>:
 80057ec:	b570      	push	{r4, r5, r6, lr}
 80057ee:	4e0f      	ldr	r6, [pc, #60]	; (800582c <sbrk_aligned+0x40>)
 80057f0:	000d      	movs	r5, r1
 80057f2:	6831      	ldr	r1, [r6, #0]
 80057f4:	0004      	movs	r4, r0
 80057f6:	2900      	cmp	r1, #0
 80057f8:	d102      	bne.n	8005800 <sbrk_aligned+0x14>
 80057fa:	f001 f825 	bl	8006848 <_sbrk_r>
 80057fe:	6030      	str	r0, [r6, #0]
 8005800:	0029      	movs	r1, r5
 8005802:	0020      	movs	r0, r4
 8005804:	f001 f820 	bl	8006848 <_sbrk_r>
 8005808:	1c43      	adds	r3, r0, #1
 800580a:	d00a      	beq.n	8005822 <sbrk_aligned+0x36>
 800580c:	2303      	movs	r3, #3
 800580e:	1cc5      	adds	r5, r0, #3
 8005810:	439d      	bics	r5, r3
 8005812:	42a8      	cmp	r0, r5
 8005814:	d007      	beq.n	8005826 <sbrk_aligned+0x3a>
 8005816:	1a29      	subs	r1, r5, r0
 8005818:	0020      	movs	r0, r4
 800581a:	f001 f815 	bl	8006848 <_sbrk_r>
 800581e:	1c43      	adds	r3, r0, #1
 8005820:	d101      	bne.n	8005826 <sbrk_aligned+0x3a>
 8005822:	2501      	movs	r5, #1
 8005824:	426d      	negs	r5, r5
 8005826:	0028      	movs	r0, r5
 8005828:	bd70      	pop	{r4, r5, r6, pc}
 800582a:	46c0      	nop			; (mov r8, r8)
 800582c:	20000530 	.word	0x20000530

08005830 <_malloc_r>:
 8005830:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005832:	2203      	movs	r2, #3
 8005834:	1ccb      	adds	r3, r1, #3
 8005836:	4393      	bics	r3, r2
 8005838:	3308      	adds	r3, #8
 800583a:	0006      	movs	r6, r0
 800583c:	001f      	movs	r7, r3
 800583e:	2b0c      	cmp	r3, #12
 8005840:	d232      	bcs.n	80058a8 <_malloc_r+0x78>
 8005842:	270c      	movs	r7, #12
 8005844:	42b9      	cmp	r1, r7
 8005846:	d831      	bhi.n	80058ac <_malloc_r+0x7c>
 8005848:	0030      	movs	r0, r6
 800584a:	f001 fce5 	bl	8007218 <__malloc_lock>
 800584e:	4d32      	ldr	r5, [pc, #200]	; (8005918 <_malloc_r+0xe8>)
 8005850:	682b      	ldr	r3, [r5, #0]
 8005852:	001c      	movs	r4, r3
 8005854:	2c00      	cmp	r4, #0
 8005856:	d12e      	bne.n	80058b6 <_malloc_r+0x86>
 8005858:	0039      	movs	r1, r7
 800585a:	0030      	movs	r0, r6
 800585c:	f7ff ffc6 	bl	80057ec <sbrk_aligned>
 8005860:	0004      	movs	r4, r0
 8005862:	1c43      	adds	r3, r0, #1
 8005864:	d11e      	bne.n	80058a4 <_malloc_r+0x74>
 8005866:	682c      	ldr	r4, [r5, #0]
 8005868:	0025      	movs	r5, r4
 800586a:	2d00      	cmp	r5, #0
 800586c:	d14a      	bne.n	8005904 <_malloc_r+0xd4>
 800586e:	6823      	ldr	r3, [r4, #0]
 8005870:	0029      	movs	r1, r5
 8005872:	18e3      	adds	r3, r4, r3
 8005874:	0030      	movs	r0, r6
 8005876:	9301      	str	r3, [sp, #4]
 8005878:	f000 ffe6 	bl	8006848 <_sbrk_r>
 800587c:	9b01      	ldr	r3, [sp, #4]
 800587e:	4283      	cmp	r3, r0
 8005880:	d143      	bne.n	800590a <_malloc_r+0xda>
 8005882:	6823      	ldr	r3, [r4, #0]
 8005884:	3703      	adds	r7, #3
 8005886:	1aff      	subs	r7, r7, r3
 8005888:	2303      	movs	r3, #3
 800588a:	439f      	bics	r7, r3
 800588c:	3708      	adds	r7, #8
 800588e:	2f0c      	cmp	r7, #12
 8005890:	d200      	bcs.n	8005894 <_malloc_r+0x64>
 8005892:	270c      	movs	r7, #12
 8005894:	0039      	movs	r1, r7
 8005896:	0030      	movs	r0, r6
 8005898:	f7ff ffa8 	bl	80057ec <sbrk_aligned>
 800589c:	1c43      	adds	r3, r0, #1
 800589e:	d034      	beq.n	800590a <_malloc_r+0xda>
 80058a0:	6823      	ldr	r3, [r4, #0]
 80058a2:	19df      	adds	r7, r3, r7
 80058a4:	6027      	str	r7, [r4, #0]
 80058a6:	e013      	b.n	80058d0 <_malloc_r+0xa0>
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	dacb      	bge.n	8005844 <_malloc_r+0x14>
 80058ac:	230c      	movs	r3, #12
 80058ae:	2500      	movs	r5, #0
 80058b0:	6033      	str	r3, [r6, #0]
 80058b2:	0028      	movs	r0, r5
 80058b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80058b6:	6822      	ldr	r2, [r4, #0]
 80058b8:	1bd1      	subs	r1, r2, r7
 80058ba:	d420      	bmi.n	80058fe <_malloc_r+0xce>
 80058bc:	290b      	cmp	r1, #11
 80058be:	d917      	bls.n	80058f0 <_malloc_r+0xc0>
 80058c0:	19e2      	adds	r2, r4, r7
 80058c2:	6027      	str	r7, [r4, #0]
 80058c4:	42a3      	cmp	r3, r4
 80058c6:	d111      	bne.n	80058ec <_malloc_r+0xbc>
 80058c8:	602a      	str	r2, [r5, #0]
 80058ca:	6863      	ldr	r3, [r4, #4]
 80058cc:	6011      	str	r1, [r2, #0]
 80058ce:	6053      	str	r3, [r2, #4]
 80058d0:	0030      	movs	r0, r6
 80058d2:	0025      	movs	r5, r4
 80058d4:	f001 fca8 	bl	8007228 <__malloc_unlock>
 80058d8:	2207      	movs	r2, #7
 80058da:	350b      	adds	r5, #11
 80058dc:	1d23      	adds	r3, r4, #4
 80058de:	4395      	bics	r5, r2
 80058e0:	1aea      	subs	r2, r5, r3
 80058e2:	429d      	cmp	r5, r3
 80058e4:	d0e5      	beq.n	80058b2 <_malloc_r+0x82>
 80058e6:	1b5b      	subs	r3, r3, r5
 80058e8:	50a3      	str	r3, [r4, r2]
 80058ea:	e7e2      	b.n	80058b2 <_malloc_r+0x82>
 80058ec:	605a      	str	r2, [r3, #4]
 80058ee:	e7ec      	b.n	80058ca <_malloc_r+0x9a>
 80058f0:	6862      	ldr	r2, [r4, #4]
 80058f2:	42a3      	cmp	r3, r4
 80058f4:	d101      	bne.n	80058fa <_malloc_r+0xca>
 80058f6:	602a      	str	r2, [r5, #0]
 80058f8:	e7ea      	b.n	80058d0 <_malloc_r+0xa0>
 80058fa:	605a      	str	r2, [r3, #4]
 80058fc:	e7e8      	b.n	80058d0 <_malloc_r+0xa0>
 80058fe:	0023      	movs	r3, r4
 8005900:	6864      	ldr	r4, [r4, #4]
 8005902:	e7a7      	b.n	8005854 <_malloc_r+0x24>
 8005904:	002c      	movs	r4, r5
 8005906:	686d      	ldr	r5, [r5, #4]
 8005908:	e7af      	b.n	800586a <_malloc_r+0x3a>
 800590a:	230c      	movs	r3, #12
 800590c:	0030      	movs	r0, r6
 800590e:	6033      	str	r3, [r6, #0]
 8005910:	f001 fc8a 	bl	8007228 <__malloc_unlock>
 8005914:	e7cd      	b.n	80058b2 <_malloc_r+0x82>
 8005916:	46c0      	nop			; (mov r8, r8)
 8005918:	2000052c 	.word	0x2000052c

0800591c <__ssputs_r>:
 800591c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800591e:	688e      	ldr	r6, [r1, #8]
 8005920:	b085      	sub	sp, #20
 8005922:	0007      	movs	r7, r0
 8005924:	000c      	movs	r4, r1
 8005926:	9203      	str	r2, [sp, #12]
 8005928:	9301      	str	r3, [sp, #4]
 800592a:	429e      	cmp	r6, r3
 800592c:	d83c      	bhi.n	80059a8 <__ssputs_r+0x8c>
 800592e:	2390      	movs	r3, #144	; 0x90
 8005930:	898a      	ldrh	r2, [r1, #12]
 8005932:	00db      	lsls	r3, r3, #3
 8005934:	421a      	tst	r2, r3
 8005936:	d034      	beq.n	80059a2 <__ssputs_r+0x86>
 8005938:	6909      	ldr	r1, [r1, #16]
 800593a:	6823      	ldr	r3, [r4, #0]
 800593c:	6960      	ldr	r0, [r4, #20]
 800593e:	1a5b      	subs	r3, r3, r1
 8005940:	9302      	str	r3, [sp, #8]
 8005942:	2303      	movs	r3, #3
 8005944:	4343      	muls	r3, r0
 8005946:	0fdd      	lsrs	r5, r3, #31
 8005948:	18ed      	adds	r5, r5, r3
 800594a:	9b01      	ldr	r3, [sp, #4]
 800594c:	9802      	ldr	r0, [sp, #8]
 800594e:	3301      	adds	r3, #1
 8005950:	181b      	adds	r3, r3, r0
 8005952:	106d      	asrs	r5, r5, #1
 8005954:	42ab      	cmp	r3, r5
 8005956:	d900      	bls.n	800595a <__ssputs_r+0x3e>
 8005958:	001d      	movs	r5, r3
 800595a:	0553      	lsls	r3, r2, #21
 800595c:	d532      	bpl.n	80059c4 <__ssputs_r+0xa8>
 800595e:	0029      	movs	r1, r5
 8005960:	0038      	movs	r0, r7
 8005962:	f7ff ff65 	bl	8005830 <_malloc_r>
 8005966:	1e06      	subs	r6, r0, #0
 8005968:	d109      	bne.n	800597e <__ssputs_r+0x62>
 800596a:	230c      	movs	r3, #12
 800596c:	603b      	str	r3, [r7, #0]
 800596e:	2340      	movs	r3, #64	; 0x40
 8005970:	2001      	movs	r0, #1
 8005972:	89a2      	ldrh	r2, [r4, #12]
 8005974:	4240      	negs	r0, r0
 8005976:	4313      	orrs	r3, r2
 8005978:	81a3      	strh	r3, [r4, #12]
 800597a:	b005      	add	sp, #20
 800597c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800597e:	9a02      	ldr	r2, [sp, #8]
 8005980:	6921      	ldr	r1, [r4, #16]
 8005982:	f001 fc2c 	bl	80071de <memcpy>
 8005986:	89a3      	ldrh	r3, [r4, #12]
 8005988:	4a14      	ldr	r2, [pc, #80]	; (80059dc <__ssputs_r+0xc0>)
 800598a:	401a      	ands	r2, r3
 800598c:	2380      	movs	r3, #128	; 0x80
 800598e:	4313      	orrs	r3, r2
 8005990:	81a3      	strh	r3, [r4, #12]
 8005992:	9b02      	ldr	r3, [sp, #8]
 8005994:	6126      	str	r6, [r4, #16]
 8005996:	18f6      	adds	r6, r6, r3
 8005998:	6026      	str	r6, [r4, #0]
 800599a:	6165      	str	r5, [r4, #20]
 800599c:	9e01      	ldr	r6, [sp, #4]
 800599e:	1aed      	subs	r5, r5, r3
 80059a0:	60a5      	str	r5, [r4, #8]
 80059a2:	9b01      	ldr	r3, [sp, #4]
 80059a4:	429e      	cmp	r6, r3
 80059a6:	d900      	bls.n	80059aa <__ssputs_r+0x8e>
 80059a8:	9e01      	ldr	r6, [sp, #4]
 80059aa:	0032      	movs	r2, r6
 80059ac:	9903      	ldr	r1, [sp, #12]
 80059ae:	6820      	ldr	r0, [r4, #0]
 80059b0:	f001 fc1e 	bl	80071f0 <memmove>
 80059b4:	68a3      	ldr	r3, [r4, #8]
 80059b6:	2000      	movs	r0, #0
 80059b8:	1b9b      	subs	r3, r3, r6
 80059ba:	60a3      	str	r3, [r4, #8]
 80059bc:	6823      	ldr	r3, [r4, #0]
 80059be:	199e      	adds	r6, r3, r6
 80059c0:	6026      	str	r6, [r4, #0]
 80059c2:	e7da      	b.n	800597a <__ssputs_r+0x5e>
 80059c4:	002a      	movs	r2, r5
 80059c6:	0038      	movs	r0, r7
 80059c8:	f001 fc36 	bl	8007238 <_realloc_r>
 80059cc:	1e06      	subs	r6, r0, #0
 80059ce:	d1e0      	bne.n	8005992 <__ssputs_r+0x76>
 80059d0:	0038      	movs	r0, r7
 80059d2:	6921      	ldr	r1, [r4, #16]
 80059d4:	f7ff fec0 	bl	8005758 <_free_r>
 80059d8:	e7c7      	b.n	800596a <__ssputs_r+0x4e>
 80059da:	46c0      	nop			; (mov r8, r8)
 80059dc:	fffffb7f 	.word	0xfffffb7f

080059e0 <_svfiprintf_r>:
 80059e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059e2:	b0a1      	sub	sp, #132	; 0x84
 80059e4:	9003      	str	r0, [sp, #12]
 80059e6:	001d      	movs	r5, r3
 80059e8:	898b      	ldrh	r3, [r1, #12]
 80059ea:	000f      	movs	r7, r1
 80059ec:	0016      	movs	r6, r2
 80059ee:	061b      	lsls	r3, r3, #24
 80059f0:	d511      	bpl.n	8005a16 <_svfiprintf_r+0x36>
 80059f2:	690b      	ldr	r3, [r1, #16]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d10e      	bne.n	8005a16 <_svfiprintf_r+0x36>
 80059f8:	2140      	movs	r1, #64	; 0x40
 80059fa:	f7ff ff19 	bl	8005830 <_malloc_r>
 80059fe:	6038      	str	r0, [r7, #0]
 8005a00:	6138      	str	r0, [r7, #16]
 8005a02:	2800      	cmp	r0, #0
 8005a04:	d105      	bne.n	8005a12 <_svfiprintf_r+0x32>
 8005a06:	230c      	movs	r3, #12
 8005a08:	9a03      	ldr	r2, [sp, #12]
 8005a0a:	3801      	subs	r0, #1
 8005a0c:	6013      	str	r3, [r2, #0]
 8005a0e:	b021      	add	sp, #132	; 0x84
 8005a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a12:	2340      	movs	r3, #64	; 0x40
 8005a14:	617b      	str	r3, [r7, #20]
 8005a16:	2300      	movs	r3, #0
 8005a18:	ac08      	add	r4, sp, #32
 8005a1a:	6163      	str	r3, [r4, #20]
 8005a1c:	3320      	adds	r3, #32
 8005a1e:	7663      	strb	r3, [r4, #25]
 8005a20:	3310      	adds	r3, #16
 8005a22:	76a3      	strb	r3, [r4, #26]
 8005a24:	9507      	str	r5, [sp, #28]
 8005a26:	0035      	movs	r5, r6
 8005a28:	782b      	ldrb	r3, [r5, #0]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d001      	beq.n	8005a32 <_svfiprintf_r+0x52>
 8005a2e:	2b25      	cmp	r3, #37	; 0x25
 8005a30:	d147      	bne.n	8005ac2 <_svfiprintf_r+0xe2>
 8005a32:	1bab      	subs	r3, r5, r6
 8005a34:	9305      	str	r3, [sp, #20]
 8005a36:	42b5      	cmp	r5, r6
 8005a38:	d00c      	beq.n	8005a54 <_svfiprintf_r+0x74>
 8005a3a:	0032      	movs	r2, r6
 8005a3c:	0039      	movs	r1, r7
 8005a3e:	9803      	ldr	r0, [sp, #12]
 8005a40:	f7ff ff6c 	bl	800591c <__ssputs_r>
 8005a44:	1c43      	adds	r3, r0, #1
 8005a46:	d100      	bne.n	8005a4a <_svfiprintf_r+0x6a>
 8005a48:	e0ae      	b.n	8005ba8 <_svfiprintf_r+0x1c8>
 8005a4a:	6962      	ldr	r2, [r4, #20]
 8005a4c:	9b05      	ldr	r3, [sp, #20]
 8005a4e:	4694      	mov	ip, r2
 8005a50:	4463      	add	r3, ip
 8005a52:	6163      	str	r3, [r4, #20]
 8005a54:	782b      	ldrb	r3, [r5, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d100      	bne.n	8005a5c <_svfiprintf_r+0x7c>
 8005a5a:	e0a5      	b.n	8005ba8 <_svfiprintf_r+0x1c8>
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	2300      	movs	r3, #0
 8005a60:	4252      	negs	r2, r2
 8005a62:	6062      	str	r2, [r4, #4]
 8005a64:	a904      	add	r1, sp, #16
 8005a66:	3254      	adds	r2, #84	; 0x54
 8005a68:	1852      	adds	r2, r2, r1
 8005a6a:	1c6e      	adds	r6, r5, #1
 8005a6c:	6023      	str	r3, [r4, #0]
 8005a6e:	60e3      	str	r3, [r4, #12]
 8005a70:	60a3      	str	r3, [r4, #8]
 8005a72:	7013      	strb	r3, [r2, #0]
 8005a74:	65a3      	str	r3, [r4, #88]	; 0x58
 8005a76:	2205      	movs	r2, #5
 8005a78:	7831      	ldrb	r1, [r6, #0]
 8005a7a:	4854      	ldr	r0, [pc, #336]	; (8005bcc <_svfiprintf_r+0x1ec>)
 8005a7c:	f001 fba4 	bl	80071c8 <memchr>
 8005a80:	1c75      	adds	r5, r6, #1
 8005a82:	2800      	cmp	r0, #0
 8005a84:	d11f      	bne.n	8005ac6 <_svfiprintf_r+0xe6>
 8005a86:	6822      	ldr	r2, [r4, #0]
 8005a88:	06d3      	lsls	r3, r2, #27
 8005a8a:	d504      	bpl.n	8005a96 <_svfiprintf_r+0xb6>
 8005a8c:	2353      	movs	r3, #83	; 0x53
 8005a8e:	a904      	add	r1, sp, #16
 8005a90:	185b      	adds	r3, r3, r1
 8005a92:	2120      	movs	r1, #32
 8005a94:	7019      	strb	r1, [r3, #0]
 8005a96:	0713      	lsls	r3, r2, #28
 8005a98:	d504      	bpl.n	8005aa4 <_svfiprintf_r+0xc4>
 8005a9a:	2353      	movs	r3, #83	; 0x53
 8005a9c:	a904      	add	r1, sp, #16
 8005a9e:	185b      	adds	r3, r3, r1
 8005aa0:	212b      	movs	r1, #43	; 0x2b
 8005aa2:	7019      	strb	r1, [r3, #0]
 8005aa4:	7833      	ldrb	r3, [r6, #0]
 8005aa6:	2b2a      	cmp	r3, #42	; 0x2a
 8005aa8:	d016      	beq.n	8005ad8 <_svfiprintf_r+0xf8>
 8005aaa:	0035      	movs	r5, r6
 8005aac:	2100      	movs	r1, #0
 8005aae:	200a      	movs	r0, #10
 8005ab0:	68e3      	ldr	r3, [r4, #12]
 8005ab2:	782a      	ldrb	r2, [r5, #0]
 8005ab4:	1c6e      	adds	r6, r5, #1
 8005ab6:	3a30      	subs	r2, #48	; 0x30
 8005ab8:	2a09      	cmp	r2, #9
 8005aba:	d94e      	bls.n	8005b5a <_svfiprintf_r+0x17a>
 8005abc:	2900      	cmp	r1, #0
 8005abe:	d111      	bne.n	8005ae4 <_svfiprintf_r+0x104>
 8005ac0:	e017      	b.n	8005af2 <_svfiprintf_r+0x112>
 8005ac2:	3501      	adds	r5, #1
 8005ac4:	e7b0      	b.n	8005a28 <_svfiprintf_r+0x48>
 8005ac6:	4b41      	ldr	r3, [pc, #260]	; (8005bcc <_svfiprintf_r+0x1ec>)
 8005ac8:	6822      	ldr	r2, [r4, #0]
 8005aca:	1ac0      	subs	r0, r0, r3
 8005acc:	2301      	movs	r3, #1
 8005ace:	4083      	lsls	r3, r0
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	002e      	movs	r6, r5
 8005ad4:	6023      	str	r3, [r4, #0]
 8005ad6:	e7ce      	b.n	8005a76 <_svfiprintf_r+0x96>
 8005ad8:	9b07      	ldr	r3, [sp, #28]
 8005ada:	1d19      	adds	r1, r3, #4
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	9107      	str	r1, [sp, #28]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	db01      	blt.n	8005ae8 <_svfiprintf_r+0x108>
 8005ae4:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ae6:	e004      	b.n	8005af2 <_svfiprintf_r+0x112>
 8005ae8:	425b      	negs	r3, r3
 8005aea:	60e3      	str	r3, [r4, #12]
 8005aec:	2302      	movs	r3, #2
 8005aee:	4313      	orrs	r3, r2
 8005af0:	6023      	str	r3, [r4, #0]
 8005af2:	782b      	ldrb	r3, [r5, #0]
 8005af4:	2b2e      	cmp	r3, #46	; 0x2e
 8005af6:	d10a      	bne.n	8005b0e <_svfiprintf_r+0x12e>
 8005af8:	786b      	ldrb	r3, [r5, #1]
 8005afa:	2b2a      	cmp	r3, #42	; 0x2a
 8005afc:	d135      	bne.n	8005b6a <_svfiprintf_r+0x18a>
 8005afe:	9b07      	ldr	r3, [sp, #28]
 8005b00:	3502      	adds	r5, #2
 8005b02:	1d1a      	adds	r2, r3, #4
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	9207      	str	r2, [sp, #28]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	db2b      	blt.n	8005b64 <_svfiprintf_r+0x184>
 8005b0c:	9309      	str	r3, [sp, #36]	; 0x24
 8005b0e:	4e30      	ldr	r6, [pc, #192]	; (8005bd0 <_svfiprintf_r+0x1f0>)
 8005b10:	2203      	movs	r2, #3
 8005b12:	0030      	movs	r0, r6
 8005b14:	7829      	ldrb	r1, [r5, #0]
 8005b16:	f001 fb57 	bl	80071c8 <memchr>
 8005b1a:	2800      	cmp	r0, #0
 8005b1c:	d006      	beq.n	8005b2c <_svfiprintf_r+0x14c>
 8005b1e:	2340      	movs	r3, #64	; 0x40
 8005b20:	1b80      	subs	r0, r0, r6
 8005b22:	4083      	lsls	r3, r0
 8005b24:	6822      	ldr	r2, [r4, #0]
 8005b26:	3501      	adds	r5, #1
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	6023      	str	r3, [r4, #0]
 8005b2c:	7829      	ldrb	r1, [r5, #0]
 8005b2e:	2206      	movs	r2, #6
 8005b30:	4828      	ldr	r0, [pc, #160]	; (8005bd4 <_svfiprintf_r+0x1f4>)
 8005b32:	1c6e      	adds	r6, r5, #1
 8005b34:	7621      	strb	r1, [r4, #24]
 8005b36:	f001 fb47 	bl	80071c8 <memchr>
 8005b3a:	2800      	cmp	r0, #0
 8005b3c:	d03c      	beq.n	8005bb8 <_svfiprintf_r+0x1d8>
 8005b3e:	4b26      	ldr	r3, [pc, #152]	; (8005bd8 <_svfiprintf_r+0x1f8>)
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d125      	bne.n	8005b90 <_svfiprintf_r+0x1b0>
 8005b44:	2207      	movs	r2, #7
 8005b46:	9b07      	ldr	r3, [sp, #28]
 8005b48:	3307      	adds	r3, #7
 8005b4a:	4393      	bics	r3, r2
 8005b4c:	3308      	adds	r3, #8
 8005b4e:	9307      	str	r3, [sp, #28]
 8005b50:	6963      	ldr	r3, [r4, #20]
 8005b52:	9a04      	ldr	r2, [sp, #16]
 8005b54:	189b      	adds	r3, r3, r2
 8005b56:	6163      	str	r3, [r4, #20]
 8005b58:	e765      	b.n	8005a26 <_svfiprintf_r+0x46>
 8005b5a:	4343      	muls	r3, r0
 8005b5c:	0035      	movs	r5, r6
 8005b5e:	2101      	movs	r1, #1
 8005b60:	189b      	adds	r3, r3, r2
 8005b62:	e7a6      	b.n	8005ab2 <_svfiprintf_r+0xd2>
 8005b64:	2301      	movs	r3, #1
 8005b66:	425b      	negs	r3, r3
 8005b68:	e7d0      	b.n	8005b0c <_svfiprintf_r+0x12c>
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	200a      	movs	r0, #10
 8005b6e:	001a      	movs	r2, r3
 8005b70:	3501      	adds	r5, #1
 8005b72:	6063      	str	r3, [r4, #4]
 8005b74:	7829      	ldrb	r1, [r5, #0]
 8005b76:	1c6e      	adds	r6, r5, #1
 8005b78:	3930      	subs	r1, #48	; 0x30
 8005b7a:	2909      	cmp	r1, #9
 8005b7c:	d903      	bls.n	8005b86 <_svfiprintf_r+0x1a6>
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d0c5      	beq.n	8005b0e <_svfiprintf_r+0x12e>
 8005b82:	9209      	str	r2, [sp, #36]	; 0x24
 8005b84:	e7c3      	b.n	8005b0e <_svfiprintf_r+0x12e>
 8005b86:	4342      	muls	r2, r0
 8005b88:	0035      	movs	r5, r6
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	1852      	adds	r2, r2, r1
 8005b8e:	e7f1      	b.n	8005b74 <_svfiprintf_r+0x194>
 8005b90:	ab07      	add	r3, sp, #28
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	003a      	movs	r2, r7
 8005b96:	0021      	movs	r1, r4
 8005b98:	4b10      	ldr	r3, [pc, #64]	; (8005bdc <_svfiprintf_r+0x1fc>)
 8005b9a:	9803      	ldr	r0, [sp, #12]
 8005b9c:	e000      	b.n	8005ba0 <_svfiprintf_r+0x1c0>
 8005b9e:	bf00      	nop
 8005ba0:	9004      	str	r0, [sp, #16]
 8005ba2:	9b04      	ldr	r3, [sp, #16]
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	d1d3      	bne.n	8005b50 <_svfiprintf_r+0x170>
 8005ba8:	89bb      	ldrh	r3, [r7, #12]
 8005baa:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005bac:	065b      	lsls	r3, r3, #25
 8005bae:	d400      	bmi.n	8005bb2 <_svfiprintf_r+0x1d2>
 8005bb0:	e72d      	b.n	8005a0e <_svfiprintf_r+0x2e>
 8005bb2:	2001      	movs	r0, #1
 8005bb4:	4240      	negs	r0, r0
 8005bb6:	e72a      	b.n	8005a0e <_svfiprintf_r+0x2e>
 8005bb8:	ab07      	add	r3, sp, #28
 8005bba:	9300      	str	r3, [sp, #0]
 8005bbc:	003a      	movs	r2, r7
 8005bbe:	0021      	movs	r1, r4
 8005bc0:	4b06      	ldr	r3, [pc, #24]	; (8005bdc <_svfiprintf_r+0x1fc>)
 8005bc2:	9803      	ldr	r0, [sp, #12]
 8005bc4:	f000 fbb8 	bl	8006338 <_printf_i>
 8005bc8:	e7ea      	b.n	8005ba0 <_svfiprintf_r+0x1c0>
 8005bca:	46c0      	nop			; (mov r8, r8)
 8005bcc:	080076a0 	.word	0x080076a0
 8005bd0:	080076a6 	.word	0x080076a6
 8005bd4:	080076aa 	.word	0x080076aa
 8005bd8:	00000000 	.word	0x00000000
 8005bdc:	0800591d 	.word	0x0800591d

08005be0 <_sungetc_r>:
 8005be0:	b570      	push	{r4, r5, r6, lr}
 8005be2:	0014      	movs	r4, r2
 8005be4:	1c4b      	adds	r3, r1, #1
 8005be6:	d103      	bne.n	8005bf0 <_sungetc_r+0x10>
 8005be8:	2501      	movs	r5, #1
 8005bea:	426d      	negs	r5, r5
 8005bec:	0028      	movs	r0, r5
 8005bee:	bd70      	pop	{r4, r5, r6, pc}
 8005bf0:	8993      	ldrh	r3, [r2, #12]
 8005bf2:	2220      	movs	r2, #32
 8005bf4:	4393      	bics	r3, r2
 8005bf6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005bf8:	81a3      	strh	r3, [r4, #12]
 8005bfa:	b2ce      	uxtb	r6, r1
 8005bfc:	6863      	ldr	r3, [r4, #4]
 8005bfe:	b2cd      	uxtb	r5, r1
 8005c00:	2a00      	cmp	r2, #0
 8005c02:	d010      	beq.n	8005c26 <_sungetc_r+0x46>
 8005c04:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005c06:	429a      	cmp	r2, r3
 8005c08:	dd07      	ble.n	8005c1a <_sungetc_r+0x3a>
 8005c0a:	6823      	ldr	r3, [r4, #0]
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	6023      	str	r3, [r4, #0]
 8005c10:	701e      	strb	r6, [r3, #0]
 8005c12:	6863      	ldr	r3, [r4, #4]
 8005c14:	3301      	adds	r3, #1
 8005c16:	6063      	str	r3, [r4, #4]
 8005c18:	e7e8      	b.n	8005bec <_sungetc_r+0xc>
 8005c1a:	0021      	movs	r1, r4
 8005c1c:	f000 ff82 	bl	8006b24 <__submore>
 8005c20:	2800      	cmp	r0, #0
 8005c22:	d0f2      	beq.n	8005c0a <_sungetc_r+0x2a>
 8005c24:	e7e0      	b.n	8005be8 <_sungetc_r+0x8>
 8005c26:	6921      	ldr	r1, [r4, #16]
 8005c28:	6822      	ldr	r2, [r4, #0]
 8005c2a:	2900      	cmp	r1, #0
 8005c2c:	d007      	beq.n	8005c3e <_sungetc_r+0x5e>
 8005c2e:	4291      	cmp	r1, r2
 8005c30:	d205      	bcs.n	8005c3e <_sungetc_r+0x5e>
 8005c32:	1e51      	subs	r1, r2, #1
 8005c34:	7808      	ldrb	r0, [r1, #0]
 8005c36:	42a8      	cmp	r0, r5
 8005c38:	d101      	bne.n	8005c3e <_sungetc_r+0x5e>
 8005c3a:	6021      	str	r1, [r4, #0]
 8005c3c:	e7ea      	b.n	8005c14 <_sungetc_r+0x34>
 8005c3e:	6423      	str	r3, [r4, #64]	; 0x40
 8005c40:	0023      	movs	r3, r4
 8005c42:	3344      	adds	r3, #68	; 0x44
 8005c44:	6363      	str	r3, [r4, #52]	; 0x34
 8005c46:	2303      	movs	r3, #3
 8005c48:	63a3      	str	r3, [r4, #56]	; 0x38
 8005c4a:	0023      	movs	r3, r4
 8005c4c:	3346      	adds	r3, #70	; 0x46
 8005c4e:	63e2      	str	r2, [r4, #60]	; 0x3c
 8005c50:	701e      	strb	r6, [r3, #0]
 8005c52:	6023      	str	r3, [r4, #0]
 8005c54:	2301      	movs	r3, #1
 8005c56:	e7de      	b.n	8005c16 <_sungetc_r+0x36>

08005c58 <__ssrefill_r>:
 8005c58:	b510      	push	{r4, lr}
 8005c5a:	000c      	movs	r4, r1
 8005c5c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005c5e:	2900      	cmp	r1, #0
 8005c60:	d00e      	beq.n	8005c80 <__ssrefill_r+0x28>
 8005c62:	0023      	movs	r3, r4
 8005c64:	3344      	adds	r3, #68	; 0x44
 8005c66:	4299      	cmp	r1, r3
 8005c68:	d001      	beq.n	8005c6e <__ssrefill_r+0x16>
 8005c6a:	f7ff fd75 	bl	8005758 <_free_r>
 8005c6e:	2000      	movs	r0, #0
 8005c70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c72:	6360      	str	r0, [r4, #52]	; 0x34
 8005c74:	6063      	str	r3, [r4, #4]
 8005c76:	4283      	cmp	r3, r0
 8005c78:	d002      	beq.n	8005c80 <__ssrefill_r+0x28>
 8005c7a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005c7c:	6023      	str	r3, [r4, #0]
 8005c7e:	bd10      	pop	{r4, pc}
 8005c80:	6923      	ldr	r3, [r4, #16]
 8005c82:	2001      	movs	r0, #1
 8005c84:	6023      	str	r3, [r4, #0]
 8005c86:	2300      	movs	r3, #0
 8005c88:	89a2      	ldrh	r2, [r4, #12]
 8005c8a:	6063      	str	r3, [r4, #4]
 8005c8c:	3320      	adds	r3, #32
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	81a3      	strh	r3, [r4, #12]
 8005c92:	4240      	negs	r0, r0
 8005c94:	e7f3      	b.n	8005c7e <__ssrefill_r+0x26>
	...

08005c98 <__ssvfiscanf_r>:
 8005c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c9a:	4cb8      	ldr	r4, [pc, #736]	; (8005f7c <__ssvfiscanf_r+0x2e4>)
 8005c9c:	0006      	movs	r6, r0
 8005c9e:	44a5      	add	sp, r4
 8005ca0:	000c      	movs	r4, r1
 8005ca2:	2100      	movs	r1, #0
 8005ca4:	9146      	str	r1, [sp, #280]	; 0x118
 8005ca6:	9147      	str	r1, [sp, #284]	; 0x11c
 8005ca8:	a903      	add	r1, sp, #12
 8005caa:	9148      	str	r1, [sp, #288]	; 0x120
 8005cac:	21be      	movs	r1, #190	; 0xbe
 8005cae:	48b4      	ldr	r0, [pc, #720]	; (8005f80 <__ssvfiscanf_r+0x2e8>)
 8005cb0:	0049      	lsls	r1, r1, #1
 8005cb2:	ad43      	add	r5, sp, #268	; 0x10c
 8005cb4:	5068      	str	r0, [r5, r1]
 8005cb6:	25c0      	movs	r5, #192	; 0xc0
 8005cb8:	49b2      	ldr	r1, [pc, #712]	; (8005f84 <__ssvfiscanf_r+0x2ec>)
 8005cba:	006d      	lsls	r5, r5, #1
 8005cbc:	a843      	add	r0, sp, #268	; 0x10c
 8005cbe:	5141      	str	r1, [r0, r5]
 8005cc0:	9302      	str	r3, [sp, #8]
 8005cc2:	7813      	ldrb	r3, [r2, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d100      	bne.n	8005cca <__ssvfiscanf_r+0x32>
 8005cc8:	e155      	b.n	8005f76 <__ssvfiscanf_r+0x2de>
 8005cca:	49af      	ldr	r1, [pc, #700]	; (8005f88 <__ssvfiscanf_r+0x2f0>)
 8005ccc:	2508      	movs	r5, #8
 8005cce:	5cc8      	ldrb	r0, [r1, r3]
 8005cd0:	2108      	movs	r1, #8
 8005cd2:	1c57      	adds	r7, r2, #1
 8005cd4:	4001      	ands	r1, r0
 8005cd6:	4228      	tst	r0, r5
 8005cd8:	d020      	beq.n	8005d1c <__ssvfiscanf_r+0x84>
 8005cda:	6863      	ldr	r3, [r4, #4]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	dd12      	ble.n	8005d06 <__ssvfiscanf_r+0x6e>
 8005ce0:	6823      	ldr	r3, [r4, #0]
 8005ce2:	49a9      	ldr	r1, [pc, #676]	; (8005f88 <__ssvfiscanf_r+0x2f0>)
 8005ce4:	781a      	ldrb	r2, [r3, #0]
 8005ce6:	5c8a      	ldrb	r2, [r1, r2]
 8005ce8:	2108      	movs	r1, #8
 8005cea:	420a      	tst	r2, r1
 8005cec:	d101      	bne.n	8005cf2 <__ssvfiscanf_r+0x5a>
 8005cee:	003a      	movs	r2, r7
 8005cf0:	e7e7      	b.n	8005cc2 <__ssvfiscanf_r+0x2a>
 8005cf2:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	9200      	str	r2, [sp, #0]
 8005cf8:	3201      	adds	r2, #1
 8005cfa:	9247      	str	r2, [sp, #284]	; 0x11c
 8005cfc:	6862      	ldr	r2, [r4, #4]
 8005cfe:	6023      	str	r3, [r4, #0]
 8005d00:	3a01      	subs	r2, #1
 8005d02:	6062      	str	r2, [r4, #4]
 8005d04:	e7e9      	b.n	8005cda <__ssvfiscanf_r+0x42>
 8005d06:	22c0      	movs	r2, #192	; 0xc0
 8005d08:	ab43      	add	r3, sp, #268	; 0x10c
 8005d0a:	0052      	lsls	r2, r2, #1
 8005d0c:	589b      	ldr	r3, [r3, r2]
 8005d0e:	0021      	movs	r1, r4
 8005d10:	0030      	movs	r0, r6
 8005d12:	9300      	str	r3, [sp, #0]
 8005d14:	4798      	blx	r3
 8005d16:	2800      	cmp	r0, #0
 8005d18:	d0e2      	beq.n	8005ce0 <__ssvfiscanf_r+0x48>
 8005d1a:	e7e8      	b.n	8005cee <__ssvfiscanf_r+0x56>
 8005d1c:	001d      	movs	r5, r3
 8005d1e:	2b25      	cmp	r3, #37	; 0x25
 8005d20:	d164      	bne.n	8005dec <__ssvfiscanf_r+0x154>
 8005d22:	9145      	str	r1, [sp, #276]	; 0x114
 8005d24:	9143      	str	r1, [sp, #268]	; 0x10c
 8005d26:	7853      	ldrb	r3, [r2, #1]
 8005d28:	2b2a      	cmp	r3, #42	; 0x2a
 8005d2a:	d102      	bne.n	8005d32 <__ssvfiscanf_r+0x9a>
 8005d2c:	3b1a      	subs	r3, #26
 8005d2e:	9343      	str	r3, [sp, #268]	; 0x10c
 8005d30:	1c97      	adds	r7, r2, #2
 8005d32:	003d      	movs	r5, r7
 8005d34:	220a      	movs	r2, #10
 8005d36:	7829      	ldrb	r1, [r5, #0]
 8005d38:	1c6b      	adds	r3, r5, #1
 8005d3a:	9300      	str	r3, [sp, #0]
 8005d3c:	000b      	movs	r3, r1
 8005d3e:	3b30      	subs	r3, #48	; 0x30
 8005d40:	2b09      	cmp	r3, #9
 8005d42:	d91f      	bls.n	8005d84 <__ssvfiscanf_r+0xec>
 8005d44:	4f91      	ldr	r7, [pc, #580]	; (8005f8c <__ssvfiscanf_r+0x2f4>)
 8005d46:	2203      	movs	r2, #3
 8005d48:	0038      	movs	r0, r7
 8005d4a:	f001 fa3d 	bl	80071c8 <memchr>
 8005d4e:	2800      	cmp	r0, #0
 8005d50:	d007      	beq.n	8005d62 <__ssvfiscanf_r+0xca>
 8005d52:	2301      	movs	r3, #1
 8005d54:	1bc0      	subs	r0, r0, r7
 8005d56:	4083      	lsls	r3, r0
 8005d58:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8005d5a:	9d00      	ldr	r5, [sp, #0]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	9201      	str	r2, [sp, #4]
 8005d60:	9343      	str	r3, [sp, #268]	; 0x10c
 8005d62:	1c6f      	adds	r7, r5, #1
 8005d64:	782d      	ldrb	r5, [r5, #0]
 8005d66:	2d78      	cmp	r5, #120	; 0x78
 8005d68:	d807      	bhi.n	8005d7a <__ssvfiscanf_r+0xe2>
 8005d6a:	2d57      	cmp	r5, #87	; 0x57
 8005d6c:	d812      	bhi.n	8005d94 <__ssvfiscanf_r+0xfc>
 8005d6e:	2d25      	cmp	r5, #37	; 0x25
 8005d70:	d03c      	beq.n	8005dec <__ssvfiscanf_r+0x154>
 8005d72:	d836      	bhi.n	8005de2 <__ssvfiscanf_r+0x14a>
 8005d74:	2d00      	cmp	r5, #0
 8005d76:	d100      	bne.n	8005d7a <__ssvfiscanf_r+0xe2>
 8005d78:	e0fa      	b.n	8005f70 <__ssvfiscanf_r+0x2d8>
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	9349      	str	r3, [sp, #292]	; 0x124
 8005d7e:	3307      	adds	r3, #7
 8005d80:	9344      	str	r3, [sp, #272]	; 0x110
 8005d82:	e06d      	b.n	8005e60 <__ssvfiscanf_r+0x1c8>
 8005d84:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8005d86:	9d00      	ldr	r5, [sp, #0]
 8005d88:	9301      	str	r3, [sp, #4]
 8005d8a:	4353      	muls	r3, r2
 8005d8c:	3b30      	subs	r3, #48	; 0x30
 8005d8e:	185b      	adds	r3, r3, r1
 8005d90:	9345      	str	r3, [sp, #276]	; 0x114
 8005d92:	e7d0      	b.n	8005d36 <__ssvfiscanf_r+0x9e>
 8005d94:	0028      	movs	r0, r5
 8005d96:	3858      	subs	r0, #88	; 0x58
 8005d98:	2820      	cmp	r0, #32
 8005d9a:	d8ee      	bhi.n	8005d7a <__ssvfiscanf_r+0xe2>
 8005d9c:	f7fa f9ba 	bl	8000114 <__gnu_thumb1_case_shi>
 8005da0:	ffed0051 	.word	0xffed0051
 8005da4:	0087ffed 	.word	0x0087ffed
 8005da8:	ffedffed 	.word	0xffedffed
 8005dac:	ffedffed 	.word	0xffedffed
 8005db0:	ffedffed 	.word	0xffedffed
 8005db4:	0095ffed 	.word	0x0095ffed
 8005db8:	0024007d 	.word	0x0024007d
 8005dbc:	00240024 	.word	0x00240024
 8005dc0:	007fffed 	.word	0x007fffed
 8005dc4:	ffedffed 	.word	0xffedffed
 8005dc8:	ffedffed 	.word	0xffedffed
 8005dcc:	0083009f 	.word	0x0083009f
 8005dd0:	ffed004b 	.word	0xffed004b
 8005dd4:	009dffed 	.word	0x009dffed
 8005dd8:	007dffed 	.word	0x007dffed
 8005ddc:	ffedffed 	.word	0xffedffed
 8005de0:	0051      	.short	0x0051
 8005de2:	3d45      	subs	r5, #69	; 0x45
 8005de4:	2d02      	cmp	r5, #2
 8005de6:	d8c8      	bhi.n	8005d7a <__ssvfiscanf_r+0xe2>
 8005de8:	2305      	movs	r3, #5
 8005dea:	e06c      	b.n	8005ec6 <__ssvfiscanf_r+0x22e>
 8005dec:	6863      	ldr	r3, [r4, #4]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	dd0e      	ble.n	8005e10 <__ssvfiscanf_r+0x178>
 8005df2:	6823      	ldr	r3, [r4, #0]
 8005df4:	781a      	ldrb	r2, [r3, #0]
 8005df6:	42aa      	cmp	r2, r5
 8005df8:	d000      	beq.n	8005dfc <__ssvfiscanf_r+0x164>
 8005dfa:	e0bc      	b.n	8005f76 <__ssvfiscanf_r+0x2de>
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	6862      	ldr	r2, [r4, #4]
 8005e00:	6023      	str	r3, [r4, #0]
 8005e02:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005e04:	3a01      	subs	r2, #1
 8005e06:	9300      	str	r3, [sp, #0]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	6062      	str	r2, [r4, #4]
 8005e0c:	9347      	str	r3, [sp, #284]	; 0x11c
 8005e0e:	e76e      	b.n	8005cee <__ssvfiscanf_r+0x56>
 8005e10:	22c0      	movs	r2, #192	; 0xc0
 8005e12:	ab43      	add	r3, sp, #268	; 0x10c
 8005e14:	0052      	lsls	r2, r2, #1
 8005e16:	589b      	ldr	r3, [r3, r2]
 8005e18:	0021      	movs	r1, r4
 8005e1a:	0030      	movs	r0, r6
 8005e1c:	9300      	str	r3, [sp, #0]
 8005e1e:	4798      	blx	r3
 8005e20:	2800      	cmp	r0, #0
 8005e22:	d0e6      	beq.n	8005df2 <__ssvfiscanf_r+0x15a>
 8005e24:	9846      	ldr	r0, [sp, #280]	; 0x118
 8005e26:	2800      	cmp	r0, #0
 8005e28:	d000      	beq.n	8005e2c <__ssvfiscanf_r+0x194>
 8005e2a:	e09d      	b.n	8005f68 <__ssvfiscanf_r+0x2d0>
 8005e2c:	3801      	subs	r0, #1
 8005e2e:	23a5      	movs	r3, #165	; 0xa5
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	449d      	add	sp, r3
 8005e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e36:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	2320      	movs	r3, #32
 8005e3c:	9a00      	ldr	r2, [sp, #0]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	9343      	str	r3, [sp, #268]	; 0x10c
 8005e42:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005e44:	9300      	str	r3, [sp, #0]
 8005e46:	2380      	movs	r3, #128	; 0x80
 8005e48:	9a00      	ldr	r2, [sp, #0]
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	9343      	str	r3, [sp, #268]	; 0x10c
 8005e50:	2310      	movs	r3, #16
 8005e52:	9344      	str	r3, [sp, #272]	; 0x110
 8005e54:	236e      	movs	r3, #110	; 0x6e
 8005e56:	42ab      	cmp	r3, r5
 8005e58:	41ad      	sbcs	r5, r5
 8005e5a:	426d      	negs	r5, r5
 8005e5c:	3503      	adds	r5, #3
 8005e5e:	9549      	str	r5, [sp, #292]	; 0x124
 8005e60:	6863      	ldr	r3, [r4, #4]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	dd4a      	ble.n	8005efc <__ssvfiscanf_r+0x264>
 8005e66:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005e68:	9300      	str	r3, [sp, #0]
 8005e6a:	065b      	lsls	r3, r3, #25
 8005e6c:	d406      	bmi.n	8005e7c <__ssvfiscanf_r+0x1e4>
 8005e6e:	6823      	ldr	r3, [r4, #0]
 8005e70:	4945      	ldr	r1, [pc, #276]	; (8005f88 <__ssvfiscanf_r+0x2f0>)
 8005e72:	781a      	ldrb	r2, [r3, #0]
 8005e74:	5c8a      	ldrb	r2, [r1, r2]
 8005e76:	2108      	movs	r1, #8
 8005e78:	420a      	tst	r2, r1
 8005e7a:	d14a      	bne.n	8005f12 <__ssvfiscanf_r+0x27a>
 8005e7c:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	dc5e      	bgt.n	8005f40 <__ssvfiscanf_r+0x2a8>
 8005e82:	0022      	movs	r2, r4
 8005e84:	0030      	movs	r0, r6
 8005e86:	ab02      	add	r3, sp, #8
 8005e88:	a943      	add	r1, sp, #268	; 0x10c
 8005e8a:	f000 fb67 	bl	800655c <_scanf_chars>
 8005e8e:	2801      	cmp	r0, #1
 8005e90:	d071      	beq.n	8005f76 <__ssvfiscanf_r+0x2de>
 8005e92:	2802      	cmp	r0, #2
 8005e94:	d000      	beq.n	8005e98 <__ssvfiscanf_r+0x200>
 8005e96:	e72a      	b.n	8005cee <__ssvfiscanf_r+0x56>
 8005e98:	e7c4      	b.n	8005e24 <__ssvfiscanf_r+0x18c>
 8005e9a:	230a      	movs	r3, #10
 8005e9c:	e7d9      	b.n	8005e52 <__ssvfiscanf_r+0x1ba>
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	2503      	movs	r5, #3
 8005ea2:	9344      	str	r3, [sp, #272]	; 0x110
 8005ea4:	e7db      	b.n	8005e5e <__ssvfiscanf_r+0x1c6>
 8005ea6:	2308      	movs	r3, #8
 8005ea8:	2504      	movs	r5, #4
 8005eaa:	9344      	str	r3, [sp, #272]	; 0x110
 8005eac:	e7d7      	b.n	8005e5e <__ssvfiscanf_r+0x1c6>
 8005eae:	0039      	movs	r1, r7
 8005eb0:	a803      	add	r0, sp, #12
 8005eb2:	f000 fcdb 	bl	800686c <__sccl>
 8005eb6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005eb8:	0007      	movs	r7, r0
 8005eba:	9300      	str	r3, [sp, #0]
 8005ebc:	2340      	movs	r3, #64	; 0x40
 8005ebe:	9a00      	ldr	r2, [sp, #0]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	9343      	str	r3, [sp, #268]	; 0x10c
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	9349      	str	r3, [sp, #292]	; 0x124
 8005ec8:	e7ca      	b.n	8005e60 <__ssvfiscanf_r+0x1c8>
 8005eca:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005ecc:	9300      	str	r3, [sp, #0]
 8005ece:	2340      	movs	r3, #64	; 0x40
 8005ed0:	9a00      	ldr	r2, [sp, #0]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	9343      	str	r3, [sp, #268]	; 0x10c
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	e7f5      	b.n	8005ec6 <__ssvfiscanf_r+0x22e>
 8005eda:	2302      	movs	r3, #2
 8005edc:	e7f3      	b.n	8005ec6 <__ssvfiscanf_r+0x22e>
 8005ede:	9843      	ldr	r0, [sp, #268]	; 0x10c
 8005ee0:	06c3      	lsls	r3, r0, #27
 8005ee2:	d500      	bpl.n	8005ee6 <__ssvfiscanf_r+0x24e>
 8005ee4:	e703      	b.n	8005cee <__ssvfiscanf_r+0x56>
 8005ee6:	9b02      	ldr	r3, [sp, #8]
 8005ee8:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8005eea:	1d19      	adds	r1, r3, #4
 8005eec:	9102      	str	r1, [sp, #8]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	07c5      	lsls	r5, r0, #31
 8005ef2:	d501      	bpl.n	8005ef8 <__ssvfiscanf_r+0x260>
 8005ef4:	801a      	strh	r2, [r3, #0]
 8005ef6:	e6fa      	b.n	8005cee <__ssvfiscanf_r+0x56>
 8005ef8:	601a      	str	r2, [r3, #0]
 8005efa:	e6f8      	b.n	8005cee <__ssvfiscanf_r+0x56>
 8005efc:	22c0      	movs	r2, #192	; 0xc0
 8005efe:	ab43      	add	r3, sp, #268	; 0x10c
 8005f00:	0052      	lsls	r2, r2, #1
 8005f02:	589b      	ldr	r3, [r3, r2]
 8005f04:	0021      	movs	r1, r4
 8005f06:	0030      	movs	r0, r6
 8005f08:	9300      	str	r3, [sp, #0]
 8005f0a:	4798      	blx	r3
 8005f0c:	2800      	cmp	r0, #0
 8005f0e:	d0aa      	beq.n	8005e66 <__ssvfiscanf_r+0x1ce>
 8005f10:	e788      	b.n	8005e24 <__ssvfiscanf_r+0x18c>
 8005f12:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8005f14:	9200      	str	r2, [sp, #0]
 8005f16:	3201      	adds	r2, #1
 8005f18:	9247      	str	r2, [sp, #284]	; 0x11c
 8005f1a:	6862      	ldr	r2, [r4, #4]
 8005f1c:	3a01      	subs	r2, #1
 8005f1e:	6062      	str	r2, [r4, #4]
 8005f20:	2a00      	cmp	r2, #0
 8005f22:	dd02      	ble.n	8005f2a <__ssvfiscanf_r+0x292>
 8005f24:	3301      	adds	r3, #1
 8005f26:	6023      	str	r3, [r4, #0]
 8005f28:	e7a1      	b.n	8005e6e <__ssvfiscanf_r+0x1d6>
 8005f2a:	22c0      	movs	r2, #192	; 0xc0
 8005f2c:	ab43      	add	r3, sp, #268	; 0x10c
 8005f2e:	0052      	lsls	r2, r2, #1
 8005f30:	589b      	ldr	r3, [r3, r2]
 8005f32:	0021      	movs	r1, r4
 8005f34:	0030      	movs	r0, r6
 8005f36:	9300      	str	r3, [sp, #0]
 8005f38:	4798      	blx	r3
 8005f3a:	2800      	cmp	r0, #0
 8005f3c:	d097      	beq.n	8005e6e <__ssvfiscanf_r+0x1d6>
 8005f3e:	e771      	b.n	8005e24 <__ssvfiscanf_r+0x18c>
 8005f40:	2b04      	cmp	r3, #4
 8005f42:	dc06      	bgt.n	8005f52 <__ssvfiscanf_r+0x2ba>
 8005f44:	0022      	movs	r2, r4
 8005f46:	0030      	movs	r0, r6
 8005f48:	ab02      	add	r3, sp, #8
 8005f4a:	a943      	add	r1, sp, #268	; 0x10c
 8005f4c:	f000 fb64 	bl	8006618 <_scanf_i>
 8005f50:	e79d      	b.n	8005e8e <__ssvfiscanf_r+0x1f6>
 8005f52:	4b0f      	ldr	r3, [pc, #60]	; (8005f90 <__ssvfiscanf_r+0x2f8>)
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d100      	bne.n	8005f5a <__ssvfiscanf_r+0x2c2>
 8005f58:	e6c9      	b.n	8005cee <__ssvfiscanf_r+0x56>
 8005f5a:	0022      	movs	r2, r4
 8005f5c:	0030      	movs	r0, r6
 8005f5e:	ab02      	add	r3, sp, #8
 8005f60:	a943      	add	r1, sp, #268	; 0x10c
 8005f62:	e000      	b.n	8005f66 <__ssvfiscanf_r+0x2ce>
 8005f64:	bf00      	nop
 8005f66:	e792      	b.n	8005e8e <__ssvfiscanf_r+0x1f6>
 8005f68:	89a3      	ldrh	r3, [r4, #12]
 8005f6a:	065b      	lsls	r3, r3, #25
 8005f6c:	d400      	bmi.n	8005f70 <__ssvfiscanf_r+0x2d8>
 8005f6e:	e75e      	b.n	8005e2e <__ssvfiscanf_r+0x196>
 8005f70:	2001      	movs	r0, #1
 8005f72:	4240      	negs	r0, r0
 8005f74:	e75b      	b.n	8005e2e <__ssvfiscanf_r+0x196>
 8005f76:	9846      	ldr	r0, [sp, #280]	; 0x118
 8005f78:	e759      	b.n	8005e2e <__ssvfiscanf_r+0x196>
 8005f7a:	46c0      	nop			; (mov r8, r8)
 8005f7c:	fffffd6c 	.word	0xfffffd6c
 8005f80:	08005be1 	.word	0x08005be1
 8005f84:	08005c59 	.word	0x08005c59
 8005f88:	080076ef 	.word	0x080076ef
 8005f8c:	080076a6 	.word	0x080076a6
 8005f90:	00000000 	.word	0x00000000

08005f94 <__sfputc_r>:
 8005f94:	6893      	ldr	r3, [r2, #8]
 8005f96:	b510      	push	{r4, lr}
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	6093      	str	r3, [r2, #8]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	da04      	bge.n	8005faa <__sfputc_r+0x16>
 8005fa0:	6994      	ldr	r4, [r2, #24]
 8005fa2:	42a3      	cmp	r3, r4
 8005fa4:	db07      	blt.n	8005fb6 <__sfputc_r+0x22>
 8005fa6:	290a      	cmp	r1, #10
 8005fa8:	d005      	beq.n	8005fb6 <__sfputc_r+0x22>
 8005faa:	6813      	ldr	r3, [r2, #0]
 8005fac:	1c58      	adds	r0, r3, #1
 8005fae:	6010      	str	r0, [r2, #0]
 8005fb0:	7019      	strb	r1, [r3, #0]
 8005fb2:	0008      	movs	r0, r1
 8005fb4:	bd10      	pop	{r4, pc}
 8005fb6:	f000 fdf3 	bl	8006ba0 <__swbuf_r>
 8005fba:	0001      	movs	r1, r0
 8005fbc:	e7f9      	b.n	8005fb2 <__sfputc_r+0x1e>

08005fbe <__sfputs_r>:
 8005fbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fc0:	0006      	movs	r6, r0
 8005fc2:	000f      	movs	r7, r1
 8005fc4:	0014      	movs	r4, r2
 8005fc6:	18d5      	adds	r5, r2, r3
 8005fc8:	42ac      	cmp	r4, r5
 8005fca:	d101      	bne.n	8005fd0 <__sfputs_r+0x12>
 8005fcc:	2000      	movs	r0, #0
 8005fce:	e007      	b.n	8005fe0 <__sfputs_r+0x22>
 8005fd0:	7821      	ldrb	r1, [r4, #0]
 8005fd2:	003a      	movs	r2, r7
 8005fd4:	0030      	movs	r0, r6
 8005fd6:	f7ff ffdd 	bl	8005f94 <__sfputc_r>
 8005fda:	3401      	adds	r4, #1
 8005fdc:	1c43      	adds	r3, r0, #1
 8005fde:	d1f3      	bne.n	8005fc8 <__sfputs_r+0xa>
 8005fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005fe4 <_vfiprintf_r>:
 8005fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fe6:	b0a1      	sub	sp, #132	; 0x84
 8005fe8:	0006      	movs	r6, r0
 8005fea:	000c      	movs	r4, r1
 8005fec:	001f      	movs	r7, r3
 8005fee:	9203      	str	r2, [sp, #12]
 8005ff0:	2800      	cmp	r0, #0
 8005ff2:	d004      	beq.n	8005ffe <_vfiprintf_r+0x1a>
 8005ff4:	6983      	ldr	r3, [r0, #24]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d101      	bne.n	8005ffe <_vfiprintf_r+0x1a>
 8005ffa:	f000 ffd5 	bl	8006fa8 <__sinit>
 8005ffe:	4b8e      	ldr	r3, [pc, #568]	; (8006238 <_vfiprintf_r+0x254>)
 8006000:	429c      	cmp	r4, r3
 8006002:	d11c      	bne.n	800603e <_vfiprintf_r+0x5a>
 8006004:	6874      	ldr	r4, [r6, #4]
 8006006:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006008:	07db      	lsls	r3, r3, #31
 800600a:	d405      	bmi.n	8006018 <_vfiprintf_r+0x34>
 800600c:	89a3      	ldrh	r3, [r4, #12]
 800600e:	059b      	lsls	r3, r3, #22
 8006010:	d402      	bmi.n	8006018 <_vfiprintf_r+0x34>
 8006012:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006014:	f001 f869 	bl	80070ea <__retarget_lock_acquire_recursive>
 8006018:	89a3      	ldrh	r3, [r4, #12]
 800601a:	071b      	lsls	r3, r3, #28
 800601c:	d502      	bpl.n	8006024 <_vfiprintf_r+0x40>
 800601e:	6923      	ldr	r3, [r4, #16]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d11d      	bne.n	8006060 <_vfiprintf_r+0x7c>
 8006024:	0021      	movs	r1, r4
 8006026:	0030      	movs	r0, r6
 8006028:	f000 fe10 	bl	8006c4c <__swsetup_r>
 800602c:	2800      	cmp	r0, #0
 800602e:	d017      	beq.n	8006060 <_vfiprintf_r+0x7c>
 8006030:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006032:	07db      	lsls	r3, r3, #31
 8006034:	d50d      	bpl.n	8006052 <_vfiprintf_r+0x6e>
 8006036:	2001      	movs	r0, #1
 8006038:	4240      	negs	r0, r0
 800603a:	b021      	add	sp, #132	; 0x84
 800603c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800603e:	4b7f      	ldr	r3, [pc, #508]	; (800623c <_vfiprintf_r+0x258>)
 8006040:	429c      	cmp	r4, r3
 8006042:	d101      	bne.n	8006048 <_vfiprintf_r+0x64>
 8006044:	68b4      	ldr	r4, [r6, #8]
 8006046:	e7de      	b.n	8006006 <_vfiprintf_r+0x22>
 8006048:	4b7d      	ldr	r3, [pc, #500]	; (8006240 <_vfiprintf_r+0x25c>)
 800604a:	429c      	cmp	r4, r3
 800604c:	d1db      	bne.n	8006006 <_vfiprintf_r+0x22>
 800604e:	68f4      	ldr	r4, [r6, #12]
 8006050:	e7d9      	b.n	8006006 <_vfiprintf_r+0x22>
 8006052:	89a3      	ldrh	r3, [r4, #12]
 8006054:	059b      	lsls	r3, r3, #22
 8006056:	d4ee      	bmi.n	8006036 <_vfiprintf_r+0x52>
 8006058:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800605a:	f001 f847 	bl	80070ec <__retarget_lock_release_recursive>
 800605e:	e7ea      	b.n	8006036 <_vfiprintf_r+0x52>
 8006060:	2300      	movs	r3, #0
 8006062:	ad08      	add	r5, sp, #32
 8006064:	616b      	str	r3, [r5, #20]
 8006066:	3320      	adds	r3, #32
 8006068:	766b      	strb	r3, [r5, #25]
 800606a:	3310      	adds	r3, #16
 800606c:	76ab      	strb	r3, [r5, #26]
 800606e:	9707      	str	r7, [sp, #28]
 8006070:	9f03      	ldr	r7, [sp, #12]
 8006072:	783b      	ldrb	r3, [r7, #0]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d001      	beq.n	800607c <_vfiprintf_r+0x98>
 8006078:	2b25      	cmp	r3, #37	; 0x25
 800607a:	d14e      	bne.n	800611a <_vfiprintf_r+0x136>
 800607c:	9b03      	ldr	r3, [sp, #12]
 800607e:	1afb      	subs	r3, r7, r3
 8006080:	9305      	str	r3, [sp, #20]
 8006082:	9b03      	ldr	r3, [sp, #12]
 8006084:	429f      	cmp	r7, r3
 8006086:	d00d      	beq.n	80060a4 <_vfiprintf_r+0xc0>
 8006088:	9b05      	ldr	r3, [sp, #20]
 800608a:	0021      	movs	r1, r4
 800608c:	0030      	movs	r0, r6
 800608e:	9a03      	ldr	r2, [sp, #12]
 8006090:	f7ff ff95 	bl	8005fbe <__sfputs_r>
 8006094:	1c43      	adds	r3, r0, #1
 8006096:	d100      	bne.n	800609a <_vfiprintf_r+0xb6>
 8006098:	e0b5      	b.n	8006206 <_vfiprintf_r+0x222>
 800609a:	696a      	ldr	r2, [r5, #20]
 800609c:	9b05      	ldr	r3, [sp, #20]
 800609e:	4694      	mov	ip, r2
 80060a0:	4463      	add	r3, ip
 80060a2:	616b      	str	r3, [r5, #20]
 80060a4:	783b      	ldrb	r3, [r7, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d100      	bne.n	80060ac <_vfiprintf_r+0xc8>
 80060aa:	e0ac      	b.n	8006206 <_vfiprintf_r+0x222>
 80060ac:	2201      	movs	r2, #1
 80060ae:	1c7b      	adds	r3, r7, #1
 80060b0:	9303      	str	r3, [sp, #12]
 80060b2:	2300      	movs	r3, #0
 80060b4:	4252      	negs	r2, r2
 80060b6:	606a      	str	r2, [r5, #4]
 80060b8:	a904      	add	r1, sp, #16
 80060ba:	3254      	adds	r2, #84	; 0x54
 80060bc:	1852      	adds	r2, r2, r1
 80060be:	602b      	str	r3, [r5, #0]
 80060c0:	60eb      	str	r3, [r5, #12]
 80060c2:	60ab      	str	r3, [r5, #8]
 80060c4:	7013      	strb	r3, [r2, #0]
 80060c6:	65ab      	str	r3, [r5, #88]	; 0x58
 80060c8:	9b03      	ldr	r3, [sp, #12]
 80060ca:	2205      	movs	r2, #5
 80060cc:	7819      	ldrb	r1, [r3, #0]
 80060ce:	485d      	ldr	r0, [pc, #372]	; (8006244 <_vfiprintf_r+0x260>)
 80060d0:	f001 f87a 	bl	80071c8 <memchr>
 80060d4:	9b03      	ldr	r3, [sp, #12]
 80060d6:	1c5f      	adds	r7, r3, #1
 80060d8:	2800      	cmp	r0, #0
 80060da:	d120      	bne.n	800611e <_vfiprintf_r+0x13a>
 80060dc:	682a      	ldr	r2, [r5, #0]
 80060de:	06d3      	lsls	r3, r2, #27
 80060e0:	d504      	bpl.n	80060ec <_vfiprintf_r+0x108>
 80060e2:	2353      	movs	r3, #83	; 0x53
 80060e4:	a904      	add	r1, sp, #16
 80060e6:	185b      	adds	r3, r3, r1
 80060e8:	2120      	movs	r1, #32
 80060ea:	7019      	strb	r1, [r3, #0]
 80060ec:	0713      	lsls	r3, r2, #28
 80060ee:	d504      	bpl.n	80060fa <_vfiprintf_r+0x116>
 80060f0:	2353      	movs	r3, #83	; 0x53
 80060f2:	a904      	add	r1, sp, #16
 80060f4:	185b      	adds	r3, r3, r1
 80060f6:	212b      	movs	r1, #43	; 0x2b
 80060f8:	7019      	strb	r1, [r3, #0]
 80060fa:	9b03      	ldr	r3, [sp, #12]
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	2b2a      	cmp	r3, #42	; 0x2a
 8006100:	d016      	beq.n	8006130 <_vfiprintf_r+0x14c>
 8006102:	2100      	movs	r1, #0
 8006104:	68eb      	ldr	r3, [r5, #12]
 8006106:	9f03      	ldr	r7, [sp, #12]
 8006108:	783a      	ldrb	r2, [r7, #0]
 800610a:	1c78      	adds	r0, r7, #1
 800610c:	3a30      	subs	r2, #48	; 0x30
 800610e:	4684      	mov	ip, r0
 8006110:	2a09      	cmp	r2, #9
 8006112:	d94f      	bls.n	80061b4 <_vfiprintf_r+0x1d0>
 8006114:	2900      	cmp	r1, #0
 8006116:	d111      	bne.n	800613c <_vfiprintf_r+0x158>
 8006118:	e017      	b.n	800614a <_vfiprintf_r+0x166>
 800611a:	3701      	adds	r7, #1
 800611c:	e7a9      	b.n	8006072 <_vfiprintf_r+0x8e>
 800611e:	4b49      	ldr	r3, [pc, #292]	; (8006244 <_vfiprintf_r+0x260>)
 8006120:	682a      	ldr	r2, [r5, #0]
 8006122:	1ac0      	subs	r0, r0, r3
 8006124:	2301      	movs	r3, #1
 8006126:	4083      	lsls	r3, r0
 8006128:	4313      	orrs	r3, r2
 800612a:	602b      	str	r3, [r5, #0]
 800612c:	9703      	str	r7, [sp, #12]
 800612e:	e7cb      	b.n	80060c8 <_vfiprintf_r+0xe4>
 8006130:	9b07      	ldr	r3, [sp, #28]
 8006132:	1d19      	adds	r1, r3, #4
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	9107      	str	r1, [sp, #28]
 8006138:	2b00      	cmp	r3, #0
 800613a:	db01      	blt.n	8006140 <_vfiprintf_r+0x15c>
 800613c:	930b      	str	r3, [sp, #44]	; 0x2c
 800613e:	e004      	b.n	800614a <_vfiprintf_r+0x166>
 8006140:	425b      	negs	r3, r3
 8006142:	60eb      	str	r3, [r5, #12]
 8006144:	2302      	movs	r3, #2
 8006146:	4313      	orrs	r3, r2
 8006148:	602b      	str	r3, [r5, #0]
 800614a:	783b      	ldrb	r3, [r7, #0]
 800614c:	2b2e      	cmp	r3, #46	; 0x2e
 800614e:	d10a      	bne.n	8006166 <_vfiprintf_r+0x182>
 8006150:	787b      	ldrb	r3, [r7, #1]
 8006152:	2b2a      	cmp	r3, #42	; 0x2a
 8006154:	d137      	bne.n	80061c6 <_vfiprintf_r+0x1e2>
 8006156:	9b07      	ldr	r3, [sp, #28]
 8006158:	3702      	adds	r7, #2
 800615a:	1d1a      	adds	r2, r3, #4
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	9207      	str	r2, [sp, #28]
 8006160:	2b00      	cmp	r3, #0
 8006162:	db2d      	blt.n	80061c0 <_vfiprintf_r+0x1dc>
 8006164:	9309      	str	r3, [sp, #36]	; 0x24
 8006166:	2203      	movs	r2, #3
 8006168:	7839      	ldrb	r1, [r7, #0]
 800616a:	4837      	ldr	r0, [pc, #220]	; (8006248 <_vfiprintf_r+0x264>)
 800616c:	f001 f82c 	bl	80071c8 <memchr>
 8006170:	2800      	cmp	r0, #0
 8006172:	d007      	beq.n	8006184 <_vfiprintf_r+0x1a0>
 8006174:	4b34      	ldr	r3, [pc, #208]	; (8006248 <_vfiprintf_r+0x264>)
 8006176:	682a      	ldr	r2, [r5, #0]
 8006178:	1ac0      	subs	r0, r0, r3
 800617a:	2340      	movs	r3, #64	; 0x40
 800617c:	4083      	lsls	r3, r0
 800617e:	4313      	orrs	r3, r2
 8006180:	3701      	adds	r7, #1
 8006182:	602b      	str	r3, [r5, #0]
 8006184:	7839      	ldrb	r1, [r7, #0]
 8006186:	1c7b      	adds	r3, r7, #1
 8006188:	2206      	movs	r2, #6
 800618a:	4830      	ldr	r0, [pc, #192]	; (800624c <_vfiprintf_r+0x268>)
 800618c:	9303      	str	r3, [sp, #12]
 800618e:	7629      	strb	r1, [r5, #24]
 8006190:	f001 f81a 	bl	80071c8 <memchr>
 8006194:	2800      	cmp	r0, #0
 8006196:	d045      	beq.n	8006224 <_vfiprintf_r+0x240>
 8006198:	4b2d      	ldr	r3, [pc, #180]	; (8006250 <_vfiprintf_r+0x26c>)
 800619a:	2b00      	cmp	r3, #0
 800619c:	d127      	bne.n	80061ee <_vfiprintf_r+0x20a>
 800619e:	2207      	movs	r2, #7
 80061a0:	9b07      	ldr	r3, [sp, #28]
 80061a2:	3307      	adds	r3, #7
 80061a4:	4393      	bics	r3, r2
 80061a6:	3308      	adds	r3, #8
 80061a8:	9307      	str	r3, [sp, #28]
 80061aa:	696b      	ldr	r3, [r5, #20]
 80061ac:	9a04      	ldr	r2, [sp, #16]
 80061ae:	189b      	adds	r3, r3, r2
 80061b0:	616b      	str	r3, [r5, #20]
 80061b2:	e75d      	b.n	8006070 <_vfiprintf_r+0x8c>
 80061b4:	210a      	movs	r1, #10
 80061b6:	434b      	muls	r3, r1
 80061b8:	4667      	mov	r7, ip
 80061ba:	189b      	adds	r3, r3, r2
 80061bc:	3909      	subs	r1, #9
 80061be:	e7a3      	b.n	8006108 <_vfiprintf_r+0x124>
 80061c0:	2301      	movs	r3, #1
 80061c2:	425b      	negs	r3, r3
 80061c4:	e7ce      	b.n	8006164 <_vfiprintf_r+0x180>
 80061c6:	2300      	movs	r3, #0
 80061c8:	001a      	movs	r2, r3
 80061ca:	3701      	adds	r7, #1
 80061cc:	606b      	str	r3, [r5, #4]
 80061ce:	7839      	ldrb	r1, [r7, #0]
 80061d0:	1c78      	adds	r0, r7, #1
 80061d2:	3930      	subs	r1, #48	; 0x30
 80061d4:	4684      	mov	ip, r0
 80061d6:	2909      	cmp	r1, #9
 80061d8:	d903      	bls.n	80061e2 <_vfiprintf_r+0x1fe>
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d0c3      	beq.n	8006166 <_vfiprintf_r+0x182>
 80061de:	9209      	str	r2, [sp, #36]	; 0x24
 80061e0:	e7c1      	b.n	8006166 <_vfiprintf_r+0x182>
 80061e2:	230a      	movs	r3, #10
 80061e4:	435a      	muls	r2, r3
 80061e6:	4667      	mov	r7, ip
 80061e8:	1852      	adds	r2, r2, r1
 80061ea:	3b09      	subs	r3, #9
 80061ec:	e7ef      	b.n	80061ce <_vfiprintf_r+0x1ea>
 80061ee:	ab07      	add	r3, sp, #28
 80061f0:	9300      	str	r3, [sp, #0]
 80061f2:	0022      	movs	r2, r4
 80061f4:	0029      	movs	r1, r5
 80061f6:	0030      	movs	r0, r6
 80061f8:	4b16      	ldr	r3, [pc, #88]	; (8006254 <_vfiprintf_r+0x270>)
 80061fa:	e000      	b.n	80061fe <_vfiprintf_r+0x21a>
 80061fc:	bf00      	nop
 80061fe:	9004      	str	r0, [sp, #16]
 8006200:	9b04      	ldr	r3, [sp, #16]
 8006202:	3301      	adds	r3, #1
 8006204:	d1d1      	bne.n	80061aa <_vfiprintf_r+0x1c6>
 8006206:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006208:	07db      	lsls	r3, r3, #31
 800620a:	d405      	bmi.n	8006218 <_vfiprintf_r+0x234>
 800620c:	89a3      	ldrh	r3, [r4, #12]
 800620e:	059b      	lsls	r3, r3, #22
 8006210:	d402      	bmi.n	8006218 <_vfiprintf_r+0x234>
 8006212:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006214:	f000 ff6a 	bl	80070ec <__retarget_lock_release_recursive>
 8006218:	89a3      	ldrh	r3, [r4, #12]
 800621a:	065b      	lsls	r3, r3, #25
 800621c:	d500      	bpl.n	8006220 <_vfiprintf_r+0x23c>
 800621e:	e70a      	b.n	8006036 <_vfiprintf_r+0x52>
 8006220:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006222:	e70a      	b.n	800603a <_vfiprintf_r+0x56>
 8006224:	ab07      	add	r3, sp, #28
 8006226:	9300      	str	r3, [sp, #0]
 8006228:	0022      	movs	r2, r4
 800622a:	0029      	movs	r1, r5
 800622c:	0030      	movs	r0, r6
 800622e:	4b09      	ldr	r3, [pc, #36]	; (8006254 <_vfiprintf_r+0x270>)
 8006230:	f000 f882 	bl	8006338 <_printf_i>
 8006234:	e7e3      	b.n	80061fe <_vfiprintf_r+0x21a>
 8006236:	46c0      	nop			; (mov r8, r8)
 8006238:	08007810 	.word	0x08007810
 800623c:	08007830 	.word	0x08007830
 8006240:	080077f0 	.word	0x080077f0
 8006244:	080076a0 	.word	0x080076a0
 8006248:	080076a6 	.word	0x080076a6
 800624c:	080076aa 	.word	0x080076aa
 8006250:	00000000 	.word	0x00000000
 8006254:	08005fbf 	.word	0x08005fbf

08006258 <_printf_common>:
 8006258:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800625a:	0015      	movs	r5, r2
 800625c:	9301      	str	r3, [sp, #4]
 800625e:	688a      	ldr	r2, [r1, #8]
 8006260:	690b      	ldr	r3, [r1, #16]
 8006262:	000c      	movs	r4, r1
 8006264:	9000      	str	r0, [sp, #0]
 8006266:	4293      	cmp	r3, r2
 8006268:	da00      	bge.n	800626c <_printf_common+0x14>
 800626a:	0013      	movs	r3, r2
 800626c:	0022      	movs	r2, r4
 800626e:	602b      	str	r3, [r5, #0]
 8006270:	3243      	adds	r2, #67	; 0x43
 8006272:	7812      	ldrb	r2, [r2, #0]
 8006274:	2a00      	cmp	r2, #0
 8006276:	d001      	beq.n	800627c <_printf_common+0x24>
 8006278:	3301      	adds	r3, #1
 800627a:	602b      	str	r3, [r5, #0]
 800627c:	6823      	ldr	r3, [r4, #0]
 800627e:	069b      	lsls	r3, r3, #26
 8006280:	d502      	bpl.n	8006288 <_printf_common+0x30>
 8006282:	682b      	ldr	r3, [r5, #0]
 8006284:	3302      	adds	r3, #2
 8006286:	602b      	str	r3, [r5, #0]
 8006288:	6822      	ldr	r2, [r4, #0]
 800628a:	2306      	movs	r3, #6
 800628c:	0017      	movs	r7, r2
 800628e:	401f      	ands	r7, r3
 8006290:	421a      	tst	r2, r3
 8006292:	d027      	beq.n	80062e4 <_printf_common+0x8c>
 8006294:	0023      	movs	r3, r4
 8006296:	3343      	adds	r3, #67	; 0x43
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	1e5a      	subs	r2, r3, #1
 800629c:	4193      	sbcs	r3, r2
 800629e:	6822      	ldr	r2, [r4, #0]
 80062a0:	0692      	lsls	r2, r2, #26
 80062a2:	d430      	bmi.n	8006306 <_printf_common+0xae>
 80062a4:	0022      	movs	r2, r4
 80062a6:	9901      	ldr	r1, [sp, #4]
 80062a8:	9800      	ldr	r0, [sp, #0]
 80062aa:	9e08      	ldr	r6, [sp, #32]
 80062ac:	3243      	adds	r2, #67	; 0x43
 80062ae:	47b0      	blx	r6
 80062b0:	1c43      	adds	r3, r0, #1
 80062b2:	d025      	beq.n	8006300 <_printf_common+0xa8>
 80062b4:	2306      	movs	r3, #6
 80062b6:	6820      	ldr	r0, [r4, #0]
 80062b8:	682a      	ldr	r2, [r5, #0]
 80062ba:	68e1      	ldr	r1, [r4, #12]
 80062bc:	2500      	movs	r5, #0
 80062be:	4003      	ands	r3, r0
 80062c0:	2b04      	cmp	r3, #4
 80062c2:	d103      	bne.n	80062cc <_printf_common+0x74>
 80062c4:	1a8d      	subs	r5, r1, r2
 80062c6:	43eb      	mvns	r3, r5
 80062c8:	17db      	asrs	r3, r3, #31
 80062ca:	401d      	ands	r5, r3
 80062cc:	68a3      	ldr	r3, [r4, #8]
 80062ce:	6922      	ldr	r2, [r4, #16]
 80062d0:	4293      	cmp	r3, r2
 80062d2:	dd01      	ble.n	80062d8 <_printf_common+0x80>
 80062d4:	1a9b      	subs	r3, r3, r2
 80062d6:	18ed      	adds	r5, r5, r3
 80062d8:	2700      	movs	r7, #0
 80062da:	42bd      	cmp	r5, r7
 80062dc:	d120      	bne.n	8006320 <_printf_common+0xc8>
 80062de:	2000      	movs	r0, #0
 80062e0:	e010      	b.n	8006304 <_printf_common+0xac>
 80062e2:	3701      	adds	r7, #1
 80062e4:	68e3      	ldr	r3, [r4, #12]
 80062e6:	682a      	ldr	r2, [r5, #0]
 80062e8:	1a9b      	subs	r3, r3, r2
 80062ea:	42bb      	cmp	r3, r7
 80062ec:	ddd2      	ble.n	8006294 <_printf_common+0x3c>
 80062ee:	0022      	movs	r2, r4
 80062f0:	2301      	movs	r3, #1
 80062f2:	9901      	ldr	r1, [sp, #4]
 80062f4:	9800      	ldr	r0, [sp, #0]
 80062f6:	9e08      	ldr	r6, [sp, #32]
 80062f8:	3219      	adds	r2, #25
 80062fa:	47b0      	blx	r6
 80062fc:	1c43      	adds	r3, r0, #1
 80062fe:	d1f0      	bne.n	80062e2 <_printf_common+0x8a>
 8006300:	2001      	movs	r0, #1
 8006302:	4240      	negs	r0, r0
 8006304:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006306:	2030      	movs	r0, #48	; 0x30
 8006308:	18e1      	adds	r1, r4, r3
 800630a:	3143      	adds	r1, #67	; 0x43
 800630c:	7008      	strb	r0, [r1, #0]
 800630e:	0021      	movs	r1, r4
 8006310:	1c5a      	adds	r2, r3, #1
 8006312:	3145      	adds	r1, #69	; 0x45
 8006314:	7809      	ldrb	r1, [r1, #0]
 8006316:	18a2      	adds	r2, r4, r2
 8006318:	3243      	adds	r2, #67	; 0x43
 800631a:	3302      	adds	r3, #2
 800631c:	7011      	strb	r1, [r2, #0]
 800631e:	e7c1      	b.n	80062a4 <_printf_common+0x4c>
 8006320:	0022      	movs	r2, r4
 8006322:	2301      	movs	r3, #1
 8006324:	9901      	ldr	r1, [sp, #4]
 8006326:	9800      	ldr	r0, [sp, #0]
 8006328:	9e08      	ldr	r6, [sp, #32]
 800632a:	321a      	adds	r2, #26
 800632c:	47b0      	blx	r6
 800632e:	1c43      	adds	r3, r0, #1
 8006330:	d0e6      	beq.n	8006300 <_printf_common+0xa8>
 8006332:	3701      	adds	r7, #1
 8006334:	e7d1      	b.n	80062da <_printf_common+0x82>
	...

08006338 <_printf_i>:
 8006338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800633a:	b08b      	sub	sp, #44	; 0x2c
 800633c:	9206      	str	r2, [sp, #24]
 800633e:	000a      	movs	r2, r1
 8006340:	3243      	adds	r2, #67	; 0x43
 8006342:	9307      	str	r3, [sp, #28]
 8006344:	9005      	str	r0, [sp, #20]
 8006346:	9204      	str	r2, [sp, #16]
 8006348:	7e0a      	ldrb	r2, [r1, #24]
 800634a:	000c      	movs	r4, r1
 800634c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800634e:	2a78      	cmp	r2, #120	; 0x78
 8006350:	d807      	bhi.n	8006362 <_printf_i+0x2a>
 8006352:	2a62      	cmp	r2, #98	; 0x62
 8006354:	d809      	bhi.n	800636a <_printf_i+0x32>
 8006356:	2a00      	cmp	r2, #0
 8006358:	d100      	bne.n	800635c <_printf_i+0x24>
 800635a:	e0c1      	b.n	80064e0 <_printf_i+0x1a8>
 800635c:	2a58      	cmp	r2, #88	; 0x58
 800635e:	d100      	bne.n	8006362 <_printf_i+0x2a>
 8006360:	e08c      	b.n	800647c <_printf_i+0x144>
 8006362:	0026      	movs	r6, r4
 8006364:	3642      	adds	r6, #66	; 0x42
 8006366:	7032      	strb	r2, [r6, #0]
 8006368:	e022      	b.n	80063b0 <_printf_i+0x78>
 800636a:	0010      	movs	r0, r2
 800636c:	3863      	subs	r0, #99	; 0x63
 800636e:	2815      	cmp	r0, #21
 8006370:	d8f7      	bhi.n	8006362 <_printf_i+0x2a>
 8006372:	f7f9 fecf 	bl	8000114 <__gnu_thumb1_case_shi>
 8006376:	0016      	.short	0x0016
 8006378:	fff6001f 	.word	0xfff6001f
 800637c:	fff6fff6 	.word	0xfff6fff6
 8006380:	001ffff6 	.word	0x001ffff6
 8006384:	fff6fff6 	.word	0xfff6fff6
 8006388:	fff6fff6 	.word	0xfff6fff6
 800638c:	003600a8 	.word	0x003600a8
 8006390:	fff6009a 	.word	0xfff6009a
 8006394:	00b9fff6 	.word	0x00b9fff6
 8006398:	0036fff6 	.word	0x0036fff6
 800639c:	fff6fff6 	.word	0xfff6fff6
 80063a0:	009e      	.short	0x009e
 80063a2:	0026      	movs	r6, r4
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	3642      	adds	r6, #66	; 0x42
 80063a8:	1d11      	adds	r1, r2, #4
 80063aa:	6019      	str	r1, [r3, #0]
 80063ac:	6813      	ldr	r3, [r2, #0]
 80063ae:	7033      	strb	r3, [r6, #0]
 80063b0:	2301      	movs	r3, #1
 80063b2:	e0a7      	b.n	8006504 <_printf_i+0x1cc>
 80063b4:	6808      	ldr	r0, [r1, #0]
 80063b6:	6819      	ldr	r1, [r3, #0]
 80063b8:	1d0a      	adds	r2, r1, #4
 80063ba:	0605      	lsls	r5, r0, #24
 80063bc:	d50b      	bpl.n	80063d6 <_printf_i+0x9e>
 80063be:	680d      	ldr	r5, [r1, #0]
 80063c0:	601a      	str	r2, [r3, #0]
 80063c2:	2d00      	cmp	r5, #0
 80063c4:	da03      	bge.n	80063ce <_printf_i+0x96>
 80063c6:	232d      	movs	r3, #45	; 0x2d
 80063c8:	9a04      	ldr	r2, [sp, #16]
 80063ca:	426d      	negs	r5, r5
 80063cc:	7013      	strb	r3, [r2, #0]
 80063ce:	4b61      	ldr	r3, [pc, #388]	; (8006554 <_printf_i+0x21c>)
 80063d0:	270a      	movs	r7, #10
 80063d2:	9303      	str	r3, [sp, #12]
 80063d4:	e01b      	b.n	800640e <_printf_i+0xd6>
 80063d6:	680d      	ldr	r5, [r1, #0]
 80063d8:	601a      	str	r2, [r3, #0]
 80063da:	0641      	lsls	r1, r0, #25
 80063dc:	d5f1      	bpl.n	80063c2 <_printf_i+0x8a>
 80063de:	b22d      	sxth	r5, r5
 80063e0:	e7ef      	b.n	80063c2 <_printf_i+0x8a>
 80063e2:	680d      	ldr	r5, [r1, #0]
 80063e4:	6819      	ldr	r1, [r3, #0]
 80063e6:	1d08      	adds	r0, r1, #4
 80063e8:	6018      	str	r0, [r3, #0]
 80063ea:	062e      	lsls	r6, r5, #24
 80063ec:	d501      	bpl.n	80063f2 <_printf_i+0xba>
 80063ee:	680d      	ldr	r5, [r1, #0]
 80063f0:	e003      	b.n	80063fa <_printf_i+0xc2>
 80063f2:	066d      	lsls	r5, r5, #25
 80063f4:	d5fb      	bpl.n	80063ee <_printf_i+0xb6>
 80063f6:	680d      	ldr	r5, [r1, #0]
 80063f8:	b2ad      	uxth	r5, r5
 80063fa:	4b56      	ldr	r3, [pc, #344]	; (8006554 <_printf_i+0x21c>)
 80063fc:	2708      	movs	r7, #8
 80063fe:	9303      	str	r3, [sp, #12]
 8006400:	2a6f      	cmp	r2, #111	; 0x6f
 8006402:	d000      	beq.n	8006406 <_printf_i+0xce>
 8006404:	3702      	adds	r7, #2
 8006406:	0023      	movs	r3, r4
 8006408:	2200      	movs	r2, #0
 800640a:	3343      	adds	r3, #67	; 0x43
 800640c:	701a      	strb	r2, [r3, #0]
 800640e:	6863      	ldr	r3, [r4, #4]
 8006410:	60a3      	str	r3, [r4, #8]
 8006412:	2b00      	cmp	r3, #0
 8006414:	db03      	blt.n	800641e <_printf_i+0xe6>
 8006416:	2204      	movs	r2, #4
 8006418:	6821      	ldr	r1, [r4, #0]
 800641a:	4391      	bics	r1, r2
 800641c:	6021      	str	r1, [r4, #0]
 800641e:	2d00      	cmp	r5, #0
 8006420:	d102      	bne.n	8006428 <_printf_i+0xf0>
 8006422:	9e04      	ldr	r6, [sp, #16]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d00c      	beq.n	8006442 <_printf_i+0x10a>
 8006428:	9e04      	ldr	r6, [sp, #16]
 800642a:	0028      	movs	r0, r5
 800642c:	0039      	movs	r1, r7
 800642e:	f7f9 ff01 	bl	8000234 <__aeabi_uidivmod>
 8006432:	9b03      	ldr	r3, [sp, #12]
 8006434:	3e01      	subs	r6, #1
 8006436:	5c5b      	ldrb	r3, [r3, r1]
 8006438:	7033      	strb	r3, [r6, #0]
 800643a:	002b      	movs	r3, r5
 800643c:	0005      	movs	r5, r0
 800643e:	429f      	cmp	r7, r3
 8006440:	d9f3      	bls.n	800642a <_printf_i+0xf2>
 8006442:	2f08      	cmp	r7, #8
 8006444:	d109      	bne.n	800645a <_printf_i+0x122>
 8006446:	6823      	ldr	r3, [r4, #0]
 8006448:	07db      	lsls	r3, r3, #31
 800644a:	d506      	bpl.n	800645a <_printf_i+0x122>
 800644c:	6863      	ldr	r3, [r4, #4]
 800644e:	6922      	ldr	r2, [r4, #16]
 8006450:	4293      	cmp	r3, r2
 8006452:	dc02      	bgt.n	800645a <_printf_i+0x122>
 8006454:	2330      	movs	r3, #48	; 0x30
 8006456:	3e01      	subs	r6, #1
 8006458:	7033      	strb	r3, [r6, #0]
 800645a:	9b04      	ldr	r3, [sp, #16]
 800645c:	1b9b      	subs	r3, r3, r6
 800645e:	6123      	str	r3, [r4, #16]
 8006460:	9b07      	ldr	r3, [sp, #28]
 8006462:	0021      	movs	r1, r4
 8006464:	9300      	str	r3, [sp, #0]
 8006466:	9805      	ldr	r0, [sp, #20]
 8006468:	9b06      	ldr	r3, [sp, #24]
 800646a:	aa09      	add	r2, sp, #36	; 0x24
 800646c:	f7ff fef4 	bl	8006258 <_printf_common>
 8006470:	1c43      	adds	r3, r0, #1
 8006472:	d14c      	bne.n	800650e <_printf_i+0x1d6>
 8006474:	2001      	movs	r0, #1
 8006476:	4240      	negs	r0, r0
 8006478:	b00b      	add	sp, #44	; 0x2c
 800647a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800647c:	3145      	adds	r1, #69	; 0x45
 800647e:	700a      	strb	r2, [r1, #0]
 8006480:	4a34      	ldr	r2, [pc, #208]	; (8006554 <_printf_i+0x21c>)
 8006482:	9203      	str	r2, [sp, #12]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	6821      	ldr	r1, [r4, #0]
 8006488:	ca20      	ldmia	r2!, {r5}
 800648a:	601a      	str	r2, [r3, #0]
 800648c:	0608      	lsls	r0, r1, #24
 800648e:	d516      	bpl.n	80064be <_printf_i+0x186>
 8006490:	07cb      	lsls	r3, r1, #31
 8006492:	d502      	bpl.n	800649a <_printf_i+0x162>
 8006494:	2320      	movs	r3, #32
 8006496:	4319      	orrs	r1, r3
 8006498:	6021      	str	r1, [r4, #0]
 800649a:	2710      	movs	r7, #16
 800649c:	2d00      	cmp	r5, #0
 800649e:	d1b2      	bne.n	8006406 <_printf_i+0xce>
 80064a0:	2320      	movs	r3, #32
 80064a2:	6822      	ldr	r2, [r4, #0]
 80064a4:	439a      	bics	r2, r3
 80064a6:	6022      	str	r2, [r4, #0]
 80064a8:	e7ad      	b.n	8006406 <_printf_i+0xce>
 80064aa:	2220      	movs	r2, #32
 80064ac:	6809      	ldr	r1, [r1, #0]
 80064ae:	430a      	orrs	r2, r1
 80064b0:	6022      	str	r2, [r4, #0]
 80064b2:	0022      	movs	r2, r4
 80064b4:	2178      	movs	r1, #120	; 0x78
 80064b6:	3245      	adds	r2, #69	; 0x45
 80064b8:	7011      	strb	r1, [r2, #0]
 80064ba:	4a27      	ldr	r2, [pc, #156]	; (8006558 <_printf_i+0x220>)
 80064bc:	e7e1      	b.n	8006482 <_printf_i+0x14a>
 80064be:	0648      	lsls	r0, r1, #25
 80064c0:	d5e6      	bpl.n	8006490 <_printf_i+0x158>
 80064c2:	b2ad      	uxth	r5, r5
 80064c4:	e7e4      	b.n	8006490 <_printf_i+0x158>
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	680d      	ldr	r5, [r1, #0]
 80064ca:	1d10      	adds	r0, r2, #4
 80064cc:	6949      	ldr	r1, [r1, #20]
 80064ce:	6018      	str	r0, [r3, #0]
 80064d0:	6813      	ldr	r3, [r2, #0]
 80064d2:	062e      	lsls	r6, r5, #24
 80064d4:	d501      	bpl.n	80064da <_printf_i+0x1a2>
 80064d6:	6019      	str	r1, [r3, #0]
 80064d8:	e002      	b.n	80064e0 <_printf_i+0x1a8>
 80064da:	066d      	lsls	r5, r5, #25
 80064dc:	d5fb      	bpl.n	80064d6 <_printf_i+0x19e>
 80064de:	8019      	strh	r1, [r3, #0]
 80064e0:	2300      	movs	r3, #0
 80064e2:	9e04      	ldr	r6, [sp, #16]
 80064e4:	6123      	str	r3, [r4, #16]
 80064e6:	e7bb      	b.n	8006460 <_printf_i+0x128>
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	1d11      	adds	r1, r2, #4
 80064ec:	6019      	str	r1, [r3, #0]
 80064ee:	6816      	ldr	r6, [r2, #0]
 80064f0:	2100      	movs	r1, #0
 80064f2:	0030      	movs	r0, r6
 80064f4:	6862      	ldr	r2, [r4, #4]
 80064f6:	f000 fe67 	bl	80071c8 <memchr>
 80064fa:	2800      	cmp	r0, #0
 80064fc:	d001      	beq.n	8006502 <_printf_i+0x1ca>
 80064fe:	1b80      	subs	r0, r0, r6
 8006500:	6060      	str	r0, [r4, #4]
 8006502:	6863      	ldr	r3, [r4, #4]
 8006504:	6123      	str	r3, [r4, #16]
 8006506:	2300      	movs	r3, #0
 8006508:	9a04      	ldr	r2, [sp, #16]
 800650a:	7013      	strb	r3, [r2, #0]
 800650c:	e7a8      	b.n	8006460 <_printf_i+0x128>
 800650e:	6923      	ldr	r3, [r4, #16]
 8006510:	0032      	movs	r2, r6
 8006512:	9906      	ldr	r1, [sp, #24]
 8006514:	9805      	ldr	r0, [sp, #20]
 8006516:	9d07      	ldr	r5, [sp, #28]
 8006518:	47a8      	blx	r5
 800651a:	1c43      	adds	r3, r0, #1
 800651c:	d0aa      	beq.n	8006474 <_printf_i+0x13c>
 800651e:	6823      	ldr	r3, [r4, #0]
 8006520:	079b      	lsls	r3, r3, #30
 8006522:	d415      	bmi.n	8006550 <_printf_i+0x218>
 8006524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006526:	68e0      	ldr	r0, [r4, #12]
 8006528:	4298      	cmp	r0, r3
 800652a:	daa5      	bge.n	8006478 <_printf_i+0x140>
 800652c:	0018      	movs	r0, r3
 800652e:	e7a3      	b.n	8006478 <_printf_i+0x140>
 8006530:	0022      	movs	r2, r4
 8006532:	2301      	movs	r3, #1
 8006534:	9906      	ldr	r1, [sp, #24]
 8006536:	9805      	ldr	r0, [sp, #20]
 8006538:	9e07      	ldr	r6, [sp, #28]
 800653a:	3219      	adds	r2, #25
 800653c:	47b0      	blx	r6
 800653e:	1c43      	adds	r3, r0, #1
 8006540:	d098      	beq.n	8006474 <_printf_i+0x13c>
 8006542:	3501      	adds	r5, #1
 8006544:	68e3      	ldr	r3, [r4, #12]
 8006546:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006548:	1a9b      	subs	r3, r3, r2
 800654a:	42ab      	cmp	r3, r5
 800654c:	dcf0      	bgt.n	8006530 <_printf_i+0x1f8>
 800654e:	e7e9      	b.n	8006524 <_printf_i+0x1ec>
 8006550:	2500      	movs	r5, #0
 8006552:	e7f7      	b.n	8006544 <_printf_i+0x20c>
 8006554:	080076b1 	.word	0x080076b1
 8006558:	080076c2 	.word	0x080076c2

0800655c <_scanf_chars>:
 800655c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800655e:	0015      	movs	r5, r2
 8006560:	688a      	ldr	r2, [r1, #8]
 8006562:	000c      	movs	r4, r1
 8006564:	9001      	str	r0, [sp, #4]
 8006566:	2a00      	cmp	r2, #0
 8006568:	d105      	bne.n	8006576 <_scanf_chars+0x1a>
 800656a:	6989      	ldr	r1, [r1, #24]
 800656c:	3201      	adds	r2, #1
 800656e:	2900      	cmp	r1, #0
 8006570:	d000      	beq.n	8006574 <_scanf_chars+0x18>
 8006572:	3a02      	subs	r2, #2
 8006574:	60a2      	str	r2, [r4, #8]
 8006576:	6822      	ldr	r2, [r4, #0]
 8006578:	06d2      	lsls	r2, r2, #27
 800657a:	d403      	bmi.n	8006584 <_scanf_chars+0x28>
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	1d11      	adds	r1, r2, #4
 8006580:	6019      	str	r1, [r3, #0]
 8006582:	6817      	ldr	r7, [r2, #0]
 8006584:	2600      	movs	r6, #0
 8006586:	69a0      	ldr	r0, [r4, #24]
 8006588:	2800      	cmp	r0, #0
 800658a:	d013      	beq.n	80065b4 <_scanf_chars+0x58>
 800658c:	2801      	cmp	r0, #1
 800658e:	d108      	bne.n	80065a2 <_scanf_chars+0x46>
 8006590:	682b      	ldr	r3, [r5, #0]
 8006592:	6962      	ldr	r2, [r4, #20]
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	5cd3      	ldrb	r3, [r2, r3]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d10b      	bne.n	80065b4 <_scanf_chars+0x58>
 800659c:	2e00      	cmp	r6, #0
 800659e:	d038      	beq.n	8006612 <_scanf_chars+0xb6>
 80065a0:	e026      	b.n	80065f0 <_scanf_chars+0x94>
 80065a2:	2802      	cmp	r0, #2
 80065a4:	d124      	bne.n	80065f0 <_scanf_chars+0x94>
 80065a6:	682b      	ldr	r3, [r5, #0]
 80065a8:	4a1a      	ldr	r2, [pc, #104]	; (8006614 <_scanf_chars+0xb8>)
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	5cd3      	ldrb	r3, [r2, r3]
 80065ae:	2208      	movs	r2, #8
 80065b0:	4213      	tst	r3, r2
 80065b2:	d11d      	bne.n	80065f0 <_scanf_chars+0x94>
 80065b4:	2210      	movs	r2, #16
 80065b6:	6823      	ldr	r3, [r4, #0]
 80065b8:	3601      	adds	r6, #1
 80065ba:	4213      	tst	r3, r2
 80065bc:	d103      	bne.n	80065c6 <_scanf_chars+0x6a>
 80065be:	682b      	ldr	r3, [r5, #0]
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	703b      	strb	r3, [r7, #0]
 80065c4:	3701      	adds	r7, #1
 80065c6:	682a      	ldr	r2, [r5, #0]
 80065c8:	686b      	ldr	r3, [r5, #4]
 80065ca:	3201      	adds	r2, #1
 80065cc:	602a      	str	r2, [r5, #0]
 80065ce:	68a2      	ldr	r2, [r4, #8]
 80065d0:	3b01      	subs	r3, #1
 80065d2:	3a01      	subs	r2, #1
 80065d4:	606b      	str	r3, [r5, #4]
 80065d6:	60a2      	str	r2, [r4, #8]
 80065d8:	2a00      	cmp	r2, #0
 80065da:	d009      	beq.n	80065f0 <_scanf_chars+0x94>
 80065dc:	2b00      	cmp	r3, #0
 80065de:	dcd2      	bgt.n	8006586 <_scanf_chars+0x2a>
 80065e0:	23c0      	movs	r3, #192	; 0xc0
 80065e2:	005b      	lsls	r3, r3, #1
 80065e4:	0029      	movs	r1, r5
 80065e6:	58e3      	ldr	r3, [r4, r3]
 80065e8:	9801      	ldr	r0, [sp, #4]
 80065ea:	4798      	blx	r3
 80065ec:	2800      	cmp	r0, #0
 80065ee:	d0ca      	beq.n	8006586 <_scanf_chars+0x2a>
 80065f0:	6822      	ldr	r2, [r4, #0]
 80065f2:	2310      	movs	r3, #16
 80065f4:	0011      	movs	r1, r2
 80065f6:	4019      	ands	r1, r3
 80065f8:	421a      	tst	r2, r3
 80065fa:	d106      	bne.n	800660a <_scanf_chars+0xae>
 80065fc:	68e3      	ldr	r3, [r4, #12]
 80065fe:	3301      	adds	r3, #1
 8006600:	60e3      	str	r3, [r4, #12]
 8006602:	69a3      	ldr	r3, [r4, #24]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d000      	beq.n	800660a <_scanf_chars+0xae>
 8006608:	7039      	strb	r1, [r7, #0]
 800660a:	2000      	movs	r0, #0
 800660c:	6923      	ldr	r3, [r4, #16]
 800660e:	199e      	adds	r6, r3, r6
 8006610:	6126      	str	r6, [r4, #16]
 8006612:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006614:	080076ef 	.word	0x080076ef

08006618 <_scanf_i>:
 8006618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800661a:	000c      	movs	r4, r1
 800661c:	b08d      	sub	sp, #52	; 0x34
 800661e:	9302      	str	r3, [sp, #8]
 8006620:	4b79      	ldr	r3, [pc, #484]	; (8006808 <_scanf_i+0x1f0>)
 8006622:	0016      	movs	r6, r2
 8006624:	9005      	str	r0, [sp, #20]
 8006626:	aa09      	add	r2, sp, #36	; 0x24
 8006628:	cb23      	ldmia	r3!, {r0, r1, r5}
 800662a:	c223      	stmia	r2!, {r0, r1, r5}
 800662c:	4b77      	ldr	r3, [pc, #476]	; (800680c <_scanf_i+0x1f4>)
 800662e:	9306      	str	r3, [sp, #24]
 8006630:	69a3      	ldr	r3, [r4, #24]
 8006632:	2b03      	cmp	r3, #3
 8006634:	d001      	beq.n	800663a <_scanf_i+0x22>
 8006636:	4b76      	ldr	r3, [pc, #472]	; (8006810 <_scanf_i+0x1f8>)
 8006638:	9306      	str	r3, [sp, #24]
 800663a:	22ae      	movs	r2, #174	; 0xae
 800663c:	2000      	movs	r0, #0
 800663e:	68a3      	ldr	r3, [r4, #8]
 8006640:	0052      	lsls	r2, r2, #1
 8006642:	1e59      	subs	r1, r3, #1
 8006644:	9004      	str	r0, [sp, #16]
 8006646:	4291      	cmp	r1, r2
 8006648:	d905      	bls.n	8006656 <_scanf_i+0x3e>
 800664a:	3b5e      	subs	r3, #94	; 0x5e
 800664c:	3bff      	subs	r3, #255	; 0xff
 800664e:	9304      	str	r3, [sp, #16]
 8006650:	235e      	movs	r3, #94	; 0x5e
 8006652:	33ff      	adds	r3, #255	; 0xff
 8006654:	60a3      	str	r3, [r4, #8]
 8006656:	0023      	movs	r3, r4
 8006658:	331c      	adds	r3, #28
 800665a:	9301      	str	r3, [sp, #4]
 800665c:	23d0      	movs	r3, #208	; 0xd0
 800665e:	2700      	movs	r7, #0
 8006660:	6822      	ldr	r2, [r4, #0]
 8006662:	011b      	lsls	r3, r3, #4
 8006664:	4313      	orrs	r3, r2
 8006666:	6023      	str	r3, [r4, #0]
 8006668:	9b01      	ldr	r3, [sp, #4]
 800666a:	9303      	str	r3, [sp, #12]
 800666c:	6833      	ldr	r3, [r6, #0]
 800666e:	a809      	add	r0, sp, #36	; 0x24
 8006670:	7819      	ldrb	r1, [r3, #0]
 8006672:	00bb      	lsls	r3, r7, #2
 8006674:	2202      	movs	r2, #2
 8006676:	5818      	ldr	r0, [r3, r0]
 8006678:	f000 fda6 	bl	80071c8 <memchr>
 800667c:	2800      	cmp	r0, #0
 800667e:	d02b      	beq.n	80066d8 <_scanf_i+0xc0>
 8006680:	2f01      	cmp	r7, #1
 8006682:	d162      	bne.n	800674a <_scanf_i+0x132>
 8006684:	6863      	ldr	r3, [r4, #4]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d106      	bne.n	8006698 <_scanf_i+0x80>
 800668a:	3308      	adds	r3, #8
 800668c:	6822      	ldr	r2, [r4, #0]
 800668e:	6063      	str	r3, [r4, #4]
 8006690:	33f9      	adds	r3, #249	; 0xf9
 8006692:	33ff      	adds	r3, #255	; 0xff
 8006694:	4313      	orrs	r3, r2
 8006696:	6023      	str	r3, [r4, #0]
 8006698:	4b5e      	ldr	r3, [pc, #376]	; (8006814 <_scanf_i+0x1fc>)
 800669a:	6822      	ldr	r2, [r4, #0]
 800669c:	4013      	ands	r3, r2
 800669e:	6023      	str	r3, [r4, #0]
 80066a0:	68a3      	ldr	r3, [r4, #8]
 80066a2:	1e5a      	subs	r2, r3, #1
 80066a4:	60a2      	str	r2, [r4, #8]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d016      	beq.n	80066d8 <_scanf_i+0xc0>
 80066aa:	6833      	ldr	r3, [r6, #0]
 80066ac:	1c5a      	adds	r2, r3, #1
 80066ae:	6032      	str	r2, [r6, #0]
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	9a03      	ldr	r2, [sp, #12]
 80066b4:	7013      	strb	r3, [r2, #0]
 80066b6:	6873      	ldr	r3, [r6, #4]
 80066b8:	1c55      	adds	r5, r2, #1
 80066ba:	3b01      	subs	r3, #1
 80066bc:	6073      	str	r3, [r6, #4]
 80066be:	9503      	str	r5, [sp, #12]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	dc09      	bgt.n	80066d8 <_scanf_i+0xc0>
 80066c4:	23c0      	movs	r3, #192	; 0xc0
 80066c6:	005b      	lsls	r3, r3, #1
 80066c8:	58e3      	ldr	r3, [r4, r3]
 80066ca:	0031      	movs	r1, r6
 80066cc:	9805      	ldr	r0, [sp, #20]
 80066ce:	9307      	str	r3, [sp, #28]
 80066d0:	4798      	blx	r3
 80066d2:	2800      	cmp	r0, #0
 80066d4:	d000      	beq.n	80066d8 <_scanf_i+0xc0>
 80066d6:	e081      	b.n	80067dc <_scanf_i+0x1c4>
 80066d8:	3701      	adds	r7, #1
 80066da:	2f03      	cmp	r7, #3
 80066dc:	d1c6      	bne.n	800666c <_scanf_i+0x54>
 80066de:	6863      	ldr	r3, [r4, #4]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d101      	bne.n	80066e8 <_scanf_i+0xd0>
 80066e4:	330a      	adds	r3, #10
 80066e6:	6063      	str	r3, [r4, #4]
 80066e8:	2110      	movs	r1, #16
 80066ea:	2700      	movs	r7, #0
 80066ec:	6863      	ldr	r3, [r4, #4]
 80066ee:	6960      	ldr	r0, [r4, #20]
 80066f0:	1ac9      	subs	r1, r1, r3
 80066f2:	4b49      	ldr	r3, [pc, #292]	; (8006818 <_scanf_i+0x200>)
 80066f4:	18c9      	adds	r1, r1, r3
 80066f6:	f000 f8b9 	bl	800686c <__sccl>
 80066fa:	9d03      	ldr	r5, [sp, #12]
 80066fc:	68a3      	ldr	r3, [r4, #8]
 80066fe:	6822      	ldr	r2, [r4, #0]
 8006700:	9303      	str	r3, [sp, #12]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d041      	beq.n	800678a <_scanf_i+0x172>
 8006706:	6831      	ldr	r1, [r6, #0]
 8006708:	6963      	ldr	r3, [r4, #20]
 800670a:	7808      	ldrb	r0, [r1, #0]
 800670c:	5c1b      	ldrb	r3, [r3, r0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d03b      	beq.n	800678a <_scanf_i+0x172>
 8006712:	2830      	cmp	r0, #48	; 0x30
 8006714:	d129      	bne.n	800676a <_scanf_i+0x152>
 8006716:	2380      	movs	r3, #128	; 0x80
 8006718:	011b      	lsls	r3, r3, #4
 800671a:	421a      	tst	r2, r3
 800671c:	d025      	beq.n	800676a <_scanf_i+0x152>
 800671e:	9b04      	ldr	r3, [sp, #16]
 8006720:	3701      	adds	r7, #1
 8006722:	2b00      	cmp	r3, #0
 8006724:	d005      	beq.n	8006732 <_scanf_i+0x11a>
 8006726:	001a      	movs	r2, r3
 8006728:	9b03      	ldr	r3, [sp, #12]
 800672a:	3a01      	subs	r2, #1
 800672c:	3301      	adds	r3, #1
 800672e:	9204      	str	r2, [sp, #16]
 8006730:	60a3      	str	r3, [r4, #8]
 8006732:	6873      	ldr	r3, [r6, #4]
 8006734:	3b01      	subs	r3, #1
 8006736:	6073      	str	r3, [r6, #4]
 8006738:	2b00      	cmp	r3, #0
 800673a:	dd1d      	ble.n	8006778 <_scanf_i+0x160>
 800673c:	6833      	ldr	r3, [r6, #0]
 800673e:	3301      	adds	r3, #1
 8006740:	6033      	str	r3, [r6, #0]
 8006742:	68a3      	ldr	r3, [r4, #8]
 8006744:	3b01      	subs	r3, #1
 8006746:	60a3      	str	r3, [r4, #8]
 8006748:	e7d8      	b.n	80066fc <_scanf_i+0xe4>
 800674a:	2f02      	cmp	r7, #2
 800674c:	d1a8      	bne.n	80066a0 <_scanf_i+0x88>
 800674e:	21c0      	movs	r1, #192	; 0xc0
 8006750:	2380      	movs	r3, #128	; 0x80
 8006752:	6822      	ldr	r2, [r4, #0]
 8006754:	00c9      	lsls	r1, r1, #3
 8006756:	4011      	ands	r1, r2
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	4299      	cmp	r1, r3
 800675c:	d1bf      	bne.n	80066de <_scanf_i+0xc6>
 800675e:	3bf1      	subs	r3, #241	; 0xf1
 8006760:	3bff      	subs	r3, #255	; 0xff
 8006762:	6063      	str	r3, [r4, #4]
 8006764:	33f0      	adds	r3, #240	; 0xf0
 8006766:	4313      	orrs	r3, r2
 8006768:	e799      	b.n	800669e <_scanf_i+0x86>
 800676a:	4b2c      	ldr	r3, [pc, #176]	; (800681c <_scanf_i+0x204>)
 800676c:	4013      	ands	r3, r2
 800676e:	6023      	str	r3, [r4, #0]
 8006770:	780b      	ldrb	r3, [r1, #0]
 8006772:	702b      	strb	r3, [r5, #0]
 8006774:	3501      	adds	r5, #1
 8006776:	e7dc      	b.n	8006732 <_scanf_i+0x11a>
 8006778:	23c0      	movs	r3, #192	; 0xc0
 800677a:	005b      	lsls	r3, r3, #1
 800677c:	58e3      	ldr	r3, [r4, r3]
 800677e:	0031      	movs	r1, r6
 8006780:	9805      	ldr	r0, [sp, #20]
 8006782:	9303      	str	r3, [sp, #12]
 8006784:	4798      	blx	r3
 8006786:	2800      	cmp	r0, #0
 8006788:	d0db      	beq.n	8006742 <_scanf_i+0x12a>
 800678a:	6823      	ldr	r3, [r4, #0]
 800678c:	05db      	lsls	r3, r3, #23
 800678e:	d50e      	bpl.n	80067ae <_scanf_i+0x196>
 8006790:	9b01      	ldr	r3, [sp, #4]
 8006792:	429d      	cmp	r5, r3
 8006794:	d907      	bls.n	80067a6 <_scanf_i+0x18e>
 8006796:	23be      	movs	r3, #190	; 0xbe
 8006798:	3d01      	subs	r5, #1
 800679a:	005b      	lsls	r3, r3, #1
 800679c:	0032      	movs	r2, r6
 800679e:	7829      	ldrb	r1, [r5, #0]
 80067a0:	58e3      	ldr	r3, [r4, r3]
 80067a2:	9805      	ldr	r0, [sp, #20]
 80067a4:	4798      	blx	r3
 80067a6:	9b01      	ldr	r3, [sp, #4]
 80067a8:	2001      	movs	r0, #1
 80067aa:	429d      	cmp	r5, r3
 80067ac:	d029      	beq.n	8006802 <_scanf_i+0x1ea>
 80067ae:	6821      	ldr	r1, [r4, #0]
 80067b0:	2310      	movs	r3, #16
 80067b2:	000a      	movs	r2, r1
 80067b4:	401a      	ands	r2, r3
 80067b6:	4219      	tst	r1, r3
 80067b8:	d11c      	bne.n	80067f4 <_scanf_i+0x1dc>
 80067ba:	702a      	strb	r2, [r5, #0]
 80067bc:	6863      	ldr	r3, [r4, #4]
 80067be:	9901      	ldr	r1, [sp, #4]
 80067c0:	9805      	ldr	r0, [sp, #20]
 80067c2:	9e06      	ldr	r6, [sp, #24]
 80067c4:	47b0      	blx	r6
 80067c6:	9b02      	ldr	r3, [sp, #8]
 80067c8:	6821      	ldr	r1, [r4, #0]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	068a      	lsls	r2, r1, #26
 80067ce:	d507      	bpl.n	80067e0 <_scanf_i+0x1c8>
 80067d0:	1d1a      	adds	r2, r3, #4
 80067d2:	9902      	ldr	r1, [sp, #8]
 80067d4:	600a      	str	r2, [r1, #0]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	6018      	str	r0, [r3, #0]
 80067da:	e008      	b.n	80067ee <_scanf_i+0x1d6>
 80067dc:	2700      	movs	r7, #0
 80067de:	e7d4      	b.n	800678a <_scanf_i+0x172>
 80067e0:	1d1a      	adds	r2, r3, #4
 80067e2:	07ce      	lsls	r6, r1, #31
 80067e4:	d5f5      	bpl.n	80067d2 <_scanf_i+0x1ba>
 80067e6:	9902      	ldr	r1, [sp, #8]
 80067e8:	600a      	str	r2, [r1, #0]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	8018      	strh	r0, [r3, #0]
 80067ee:	68e3      	ldr	r3, [r4, #12]
 80067f0:	3301      	adds	r3, #1
 80067f2:	60e3      	str	r3, [r4, #12]
 80067f4:	2000      	movs	r0, #0
 80067f6:	9b01      	ldr	r3, [sp, #4]
 80067f8:	1aed      	subs	r5, r5, r3
 80067fa:	6923      	ldr	r3, [r4, #16]
 80067fc:	19ef      	adds	r7, r5, r7
 80067fe:	19df      	adds	r7, r3, r7
 8006800:	6127      	str	r7, [r4, #16]
 8006802:	b00d      	add	sp, #52	; 0x34
 8006804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006806:	46c0      	nop			; (mov r8, r8)
 8006808:	08007558 	.word	0x08007558
 800680c:	08006a01 	.word	0x08006a01
 8006810:	08006b1d 	.word	0x08006b1d
 8006814:	fffffaff 	.word	0xfffffaff
 8006818:	080076dc 	.word	0x080076dc
 800681c:	fffff6ff 	.word	0xfffff6ff

08006820 <_read_r>:
 8006820:	b570      	push	{r4, r5, r6, lr}
 8006822:	0004      	movs	r4, r0
 8006824:	0008      	movs	r0, r1
 8006826:	0011      	movs	r1, r2
 8006828:	001a      	movs	r2, r3
 800682a:	2300      	movs	r3, #0
 800682c:	4d05      	ldr	r5, [pc, #20]	; (8006844 <_read_r+0x24>)
 800682e:	602b      	str	r3, [r5, #0]
 8006830:	f7fa fd7a 	bl	8001328 <_read>
 8006834:	1c43      	adds	r3, r0, #1
 8006836:	d103      	bne.n	8006840 <_read_r+0x20>
 8006838:	682b      	ldr	r3, [r5, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d000      	beq.n	8006840 <_read_r+0x20>
 800683e:	6023      	str	r3, [r4, #0]
 8006840:	bd70      	pop	{r4, r5, r6, pc}
 8006842:	46c0      	nop			; (mov r8, r8)
 8006844:	20000534 	.word	0x20000534

08006848 <_sbrk_r>:
 8006848:	2300      	movs	r3, #0
 800684a:	b570      	push	{r4, r5, r6, lr}
 800684c:	4d06      	ldr	r5, [pc, #24]	; (8006868 <_sbrk_r+0x20>)
 800684e:	0004      	movs	r4, r0
 8006850:	0008      	movs	r0, r1
 8006852:	602b      	str	r3, [r5, #0]
 8006854:	f7fa fdce 	bl	80013f4 <_sbrk>
 8006858:	1c43      	adds	r3, r0, #1
 800685a:	d103      	bne.n	8006864 <_sbrk_r+0x1c>
 800685c:	682b      	ldr	r3, [r5, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d000      	beq.n	8006864 <_sbrk_r+0x1c>
 8006862:	6023      	str	r3, [r4, #0]
 8006864:	bd70      	pop	{r4, r5, r6, pc}
 8006866:	46c0      	nop			; (mov r8, r8)
 8006868:	20000534 	.word	0x20000534

0800686c <__sccl>:
 800686c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800686e:	780b      	ldrb	r3, [r1, #0]
 8006870:	0004      	movs	r4, r0
 8006872:	2b5e      	cmp	r3, #94	; 0x5e
 8006874:	d00c      	beq.n	8006890 <__sccl+0x24>
 8006876:	1c48      	adds	r0, r1, #1
 8006878:	2100      	movs	r1, #0
 800687a:	0022      	movs	r2, r4
 800687c:	1c65      	adds	r5, r4, #1
 800687e:	35ff      	adds	r5, #255	; 0xff
 8006880:	7011      	strb	r1, [r2, #0]
 8006882:	3201      	adds	r2, #1
 8006884:	42aa      	cmp	r2, r5
 8006886:	d1fb      	bne.n	8006880 <__sccl+0x14>
 8006888:	2b00      	cmp	r3, #0
 800688a:	d105      	bne.n	8006898 <__sccl+0x2c>
 800688c:	3801      	subs	r0, #1
 800688e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006890:	784b      	ldrb	r3, [r1, #1]
 8006892:	1c88      	adds	r0, r1, #2
 8006894:	2101      	movs	r1, #1
 8006896:	e7f0      	b.n	800687a <__sccl+0xe>
 8006898:	2201      	movs	r2, #1
 800689a:	262d      	movs	r6, #45	; 0x2d
 800689c:	4051      	eors	r1, r2
 800689e:	0002      	movs	r2, r0
 80068a0:	54e1      	strb	r1, [r4, r3]
 80068a2:	7815      	ldrb	r5, [r2, #0]
 80068a4:	1c50      	adds	r0, r2, #1
 80068a6:	2d2d      	cmp	r5, #45	; 0x2d
 80068a8:	d009      	beq.n	80068be <__sccl+0x52>
 80068aa:	2d5d      	cmp	r5, #93	; 0x5d
 80068ac:	d0ef      	beq.n	800688e <__sccl+0x22>
 80068ae:	2d00      	cmp	r5, #0
 80068b0:	d101      	bne.n	80068b6 <__sccl+0x4a>
 80068b2:	0010      	movs	r0, r2
 80068b4:	e7eb      	b.n	800688e <__sccl+0x22>
 80068b6:	002b      	movs	r3, r5
 80068b8:	e7f1      	b.n	800689e <__sccl+0x32>
 80068ba:	0033      	movs	r3, r6
 80068bc:	e7ef      	b.n	800689e <__sccl+0x32>
 80068be:	7855      	ldrb	r5, [r2, #1]
 80068c0:	2d5d      	cmp	r5, #93	; 0x5d
 80068c2:	d0fa      	beq.n	80068ba <__sccl+0x4e>
 80068c4:	42ab      	cmp	r3, r5
 80068c6:	dcf8      	bgt.n	80068ba <__sccl+0x4e>
 80068c8:	0018      	movs	r0, r3
 80068ca:	3202      	adds	r2, #2
 80068cc:	3001      	adds	r0, #1
 80068ce:	5421      	strb	r1, [r4, r0]
 80068d0:	4285      	cmp	r5, r0
 80068d2:	dcfb      	bgt.n	80068cc <__sccl+0x60>
 80068d4:	2000      	movs	r0, #0
 80068d6:	1c5f      	adds	r7, r3, #1
 80068d8:	42ab      	cmp	r3, r5
 80068da:	da01      	bge.n	80068e0 <__sccl+0x74>
 80068dc:	1ae8      	subs	r0, r5, r3
 80068de:	3801      	subs	r0, #1
 80068e0:	183b      	adds	r3, r7, r0
 80068e2:	e7de      	b.n	80068a2 <__sccl+0x36>

080068e4 <_strtol_l.constprop.0>:
 80068e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068e6:	b087      	sub	sp, #28
 80068e8:	001e      	movs	r6, r3
 80068ea:	9005      	str	r0, [sp, #20]
 80068ec:	9101      	str	r1, [sp, #4]
 80068ee:	9202      	str	r2, [sp, #8]
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d045      	beq.n	8006980 <_strtol_l.constprop.0+0x9c>
 80068f4:	000b      	movs	r3, r1
 80068f6:	2e24      	cmp	r6, #36	; 0x24
 80068f8:	d842      	bhi.n	8006980 <_strtol_l.constprop.0+0x9c>
 80068fa:	4a3f      	ldr	r2, [pc, #252]	; (80069f8 <_strtol_l.constprop.0+0x114>)
 80068fc:	2108      	movs	r1, #8
 80068fe:	4694      	mov	ip, r2
 8006900:	001a      	movs	r2, r3
 8006902:	4660      	mov	r0, ip
 8006904:	7814      	ldrb	r4, [r2, #0]
 8006906:	3301      	adds	r3, #1
 8006908:	5d00      	ldrb	r0, [r0, r4]
 800690a:	001d      	movs	r5, r3
 800690c:	0007      	movs	r7, r0
 800690e:	400f      	ands	r7, r1
 8006910:	4208      	tst	r0, r1
 8006912:	d1f5      	bne.n	8006900 <_strtol_l.constprop.0+0x1c>
 8006914:	2c2d      	cmp	r4, #45	; 0x2d
 8006916:	d13a      	bne.n	800698e <_strtol_l.constprop.0+0xaa>
 8006918:	2701      	movs	r7, #1
 800691a:	781c      	ldrb	r4, [r3, #0]
 800691c:	1c95      	adds	r5, r2, #2
 800691e:	2e00      	cmp	r6, #0
 8006920:	d065      	beq.n	80069ee <_strtol_l.constprop.0+0x10a>
 8006922:	2e10      	cmp	r6, #16
 8006924:	d109      	bne.n	800693a <_strtol_l.constprop.0+0x56>
 8006926:	2c30      	cmp	r4, #48	; 0x30
 8006928:	d107      	bne.n	800693a <_strtol_l.constprop.0+0x56>
 800692a:	2220      	movs	r2, #32
 800692c:	782b      	ldrb	r3, [r5, #0]
 800692e:	4393      	bics	r3, r2
 8006930:	2b58      	cmp	r3, #88	; 0x58
 8006932:	d157      	bne.n	80069e4 <_strtol_l.constprop.0+0x100>
 8006934:	2610      	movs	r6, #16
 8006936:	786c      	ldrb	r4, [r5, #1]
 8006938:	3502      	adds	r5, #2
 800693a:	4b30      	ldr	r3, [pc, #192]	; (80069fc <_strtol_l.constprop.0+0x118>)
 800693c:	0031      	movs	r1, r6
 800693e:	18fb      	adds	r3, r7, r3
 8006940:	0018      	movs	r0, r3
 8006942:	9303      	str	r3, [sp, #12]
 8006944:	f7f9 fc76 	bl	8000234 <__aeabi_uidivmod>
 8006948:	2300      	movs	r3, #0
 800694a:	2201      	movs	r2, #1
 800694c:	4684      	mov	ip, r0
 800694e:	0018      	movs	r0, r3
 8006950:	9104      	str	r1, [sp, #16]
 8006952:	4252      	negs	r2, r2
 8006954:	0021      	movs	r1, r4
 8006956:	3930      	subs	r1, #48	; 0x30
 8006958:	2909      	cmp	r1, #9
 800695a:	d81d      	bhi.n	8006998 <_strtol_l.constprop.0+0xb4>
 800695c:	000c      	movs	r4, r1
 800695e:	42a6      	cmp	r6, r4
 8006960:	dd28      	ble.n	80069b4 <_strtol_l.constprop.0+0xd0>
 8006962:	2b00      	cmp	r3, #0
 8006964:	db24      	blt.n	80069b0 <_strtol_l.constprop.0+0xcc>
 8006966:	0013      	movs	r3, r2
 8006968:	4584      	cmp	ip, r0
 800696a:	d306      	bcc.n	800697a <_strtol_l.constprop.0+0x96>
 800696c:	d102      	bne.n	8006974 <_strtol_l.constprop.0+0x90>
 800696e:	9904      	ldr	r1, [sp, #16]
 8006970:	42a1      	cmp	r1, r4
 8006972:	db02      	blt.n	800697a <_strtol_l.constprop.0+0x96>
 8006974:	2301      	movs	r3, #1
 8006976:	4370      	muls	r0, r6
 8006978:	1820      	adds	r0, r4, r0
 800697a:	782c      	ldrb	r4, [r5, #0]
 800697c:	3501      	adds	r5, #1
 800697e:	e7e9      	b.n	8006954 <_strtol_l.constprop.0+0x70>
 8006980:	f7fe fd06 	bl	8005390 <__errno>
 8006984:	2316      	movs	r3, #22
 8006986:	6003      	str	r3, [r0, #0]
 8006988:	2000      	movs	r0, #0
 800698a:	b007      	add	sp, #28
 800698c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800698e:	2c2b      	cmp	r4, #43	; 0x2b
 8006990:	d1c5      	bne.n	800691e <_strtol_l.constprop.0+0x3a>
 8006992:	781c      	ldrb	r4, [r3, #0]
 8006994:	1c95      	adds	r5, r2, #2
 8006996:	e7c2      	b.n	800691e <_strtol_l.constprop.0+0x3a>
 8006998:	0021      	movs	r1, r4
 800699a:	3941      	subs	r1, #65	; 0x41
 800699c:	2919      	cmp	r1, #25
 800699e:	d801      	bhi.n	80069a4 <_strtol_l.constprop.0+0xc0>
 80069a0:	3c37      	subs	r4, #55	; 0x37
 80069a2:	e7dc      	b.n	800695e <_strtol_l.constprop.0+0x7a>
 80069a4:	0021      	movs	r1, r4
 80069a6:	3961      	subs	r1, #97	; 0x61
 80069a8:	2919      	cmp	r1, #25
 80069aa:	d803      	bhi.n	80069b4 <_strtol_l.constprop.0+0xd0>
 80069ac:	3c57      	subs	r4, #87	; 0x57
 80069ae:	e7d6      	b.n	800695e <_strtol_l.constprop.0+0x7a>
 80069b0:	0013      	movs	r3, r2
 80069b2:	e7e2      	b.n	800697a <_strtol_l.constprop.0+0x96>
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	da09      	bge.n	80069cc <_strtol_l.constprop.0+0xe8>
 80069b8:	2322      	movs	r3, #34	; 0x22
 80069ba:	9a05      	ldr	r2, [sp, #20]
 80069bc:	9803      	ldr	r0, [sp, #12]
 80069be:	6013      	str	r3, [r2, #0]
 80069c0:	9b02      	ldr	r3, [sp, #8]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d0e1      	beq.n	800698a <_strtol_l.constprop.0+0xa6>
 80069c6:	1e6b      	subs	r3, r5, #1
 80069c8:	9301      	str	r3, [sp, #4]
 80069ca:	e007      	b.n	80069dc <_strtol_l.constprop.0+0xf8>
 80069cc:	2f00      	cmp	r7, #0
 80069ce:	d000      	beq.n	80069d2 <_strtol_l.constprop.0+0xee>
 80069d0:	4240      	negs	r0, r0
 80069d2:	9a02      	ldr	r2, [sp, #8]
 80069d4:	2a00      	cmp	r2, #0
 80069d6:	d0d8      	beq.n	800698a <_strtol_l.constprop.0+0xa6>
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d1f4      	bne.n	80069c6 <_strtol_l.constprop.0+0xe2>
 80069dc:	9b02      	ldr	r3, [sp, #8]
 80069de:	9a01      	ldr	r2, [sp, #4]
 80069e0:	601a      	str	r2, [r3, #0]
 80069e2:	e7d2      	b.n	800698a <_strtol_l.constprop.0+0xa6>
 80069e4:	2430      	movs	r4, #48	; 0x30
 80069e6:	2e00      	cmp	r6, #0
 80069e8:	d1a7      	bne.n	800693a <_strtol_l.constprop.0+0x56>
 80069ea:	3608      	adds	r6, #8
 80069ec:	e7a5      	b.n	800693a <_strtol_l.constprop.0+0x56>
 80069ee:	2c30      	cmp	r4, #48	; 0x30
 80069f0:	d09b      	beq.n	800692a <_strtol_l.constprop.0+0x46>
 80069f2:	260a      	movs	r6, #10
 80069f4:	e7a1      	b.n	800693a <_strtol_l.constprop.0+0x56>
 80069f6:	46c0      	nop			; (mov r8, r8)
 80069f8:	080076ef 	.word	0x080076ef
 80069fc:	7fffffff 	.word	0x7fffffff

08006a00 <_strtol_r>:
 8006a00:	b510      	push	{r4, lr}
 8006a02:	f7ff ff6f 	bl	80068e4 <_strtol_l.constprop.0>
 8006a06:	bd10      	pop	{r4, pc}

08006a08 <_strtoul_l.constprop.0>:
 8006a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a0a:	b087      	sub	sp, #28
 8006a0c:	9202      	str	r2, [sp, #8]
 8006a0e:	4a42      	ldr	r2, [pc, #264]	; (8006b18 <_strtoul_l.constprop.0+0x110>)
 8006a10:	001e      	movs	r6, r3
 8006a12:	9101      	str	r1, [sp, #4]
 8006a14:	000b      	movs	r3, r1
 8006a16:	4694      	mov	ip, r2
 8006a18:	2108      	movs	r1, #8
 8006a1a:	9005      	str	r0, [sp, #20]
 8006a1c:	001a      	movs	r2, r3
 8006a1e:	4660      	mov	r0, ip
 8006a20:	7814      	ldrb	r4, [r2, #0]
 8006a22:	3301      	adds	r3, #1
 8006a24:	5d00      	ldrb	r0, [r0, r4]
 8006a26:	001d      	movs	r5, r3
 8006a28:	0007      	movs	r7, r0
 8006a2a:	400f      	ands	r7, r1
 8006a2c:	4208      	tst	r0, r1
 8006a2e:	d1f5      	bne.n	8006a1c <_strtoul_l.constprop.0+0x14>
 8006a30:	2c2d      	cmp	r4, #45	; 0x2d
 8006a32:	d13a      	bne.n	8006aaa <_strtoul_l.constprop.0+0xa2>
 8006a34:	2701      	movs	r7, #1
 8006a36:	781c      	ldrb	r4, [r3, #0]
 8006a38:	1c95      	adds	r5, r2, #2
 8006a3a:	2e00      	cmp	r6, #0
 8006a3c:	d067      	beq.n	8006b0e <_strtoul_l.constprop.0+0x106>
 8006a3e:	2e10      	cmp	r6, #16
 8006a40:	d109      	bne.n	8006a56 <_strtoul_l.constprop.0+0x4e>
 8006a42:	2c30      	cmp	r4, #48	; 0x30
 8006a44:	d107      	bne.n	8006a56 <_strtoul_l.constprop.0+0x4e>
 8006a46:	2220      	movs	r2, #32
 8006a48:	782b      	ldrb	r3, [r5, #0]
 8006a4a:	4393      	bics	r3, r2
 8006a4c:	2b58      	cmp	r3, #88	; 0x58
 8006a4e:	d159      	bne.n	8006b04 <_strtoul_l.constprop.0+0xfc>
 8006a50:	2610      	movs	r6, #16
 8006a52:	786c      	ldrb	r4, [r5, #1]
 8006a54:	3502      	adds	r5, #2
 8006a56:	2001      	movs	r0, #1
 8006a58:	0031      	movs	r1, r6
 8006a5a:	4240      	negs	r0, r0
 8006a5c:	f7f9 fb64 	bl	8000128 <__udivsi3>
 8006a60:	9003      	str	r0, [sp, #12]
 8006a62:	2001      	movs	r0, #1
 8006a64:	0031      	movs	r1, r6
 8006a66:	4240      	negs	r0, r0
 8006a68:	f7f9 fbe4 	bl	8000234 <__aeabi_uidivmod>
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	9104      	str	r1, [sp, #16]
 8006a70:	2101      	movs	r1, #1
 8006a72:	2201      	movs	r2, #1
 8006a74:	0018      	movs	r0, r3
 8006a76:	468c      	mov	ip, r1
 8006a78:	4252      	negs	r2, r2
 8006a7a:	0021      	movs	r1, r4
 8006a7c:	3930      	subs	r1, #48	; 0x30
 8006a7e:	2909      	cmp	r1, #9
 8006a80:	d818      	bhi.n	8006ab4 <_strtoul_l.constprop.0+0xac>
 8006a82:	000c      	movs	r4, r1
 8006a84:	42a6      	cmp	r6, r4
 8006a86:	dd23      	ble.n	8006ad0 <_strtoul_l.constprop.0+0xc8>
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	db1f      	blt.n	8006acc <_strtoul_l.constprop.0+0xc4>
 8006a8c:	9903      	ldr	r1, [sp, #12]
 8006a8e:	0013      	movs	r3, r2
 8006a90:	4281      	cmp	r1, r0
 8006a92:	d307      	bcc.n	8006aa4 <_strtoul_l.constprop.0+0x9c>
 8006a94:	d103      	bne.n	8006a9e <_strtoul_l.constprop.0+0x96>
 8006a96:	9904      	ldr	r1, [sp, #16]
 8006a98:	0013      	movs	r3, r2
 8006a9a:	42a1      	cmp	r1, r4
 8006a9c:	db02      	blt.n	8006aa4 <_strtoul_l.constprop.0+0x9c>
 8006a9e:	4663      	mov	r3, ip
 8006aa0:	4370      	muls	r0, r6
 8006aa2:	1820      	adds	r0, r4, r0
 8006aa4:	782c      	ldrb	r4, [r5, #0]
 8006aa6:	3501      	adds	r5, #1
 8006aa8:	e7e7      	b.n	8006a7a <_strtoul_l.constprop.0+0x72>
 8006aaa:	2c2b      	cmp	r4, #43	; 0x2b
 8006aac:	d1c5      	bne.n	8006a3a <_strtoul_l.constprop.0+0x32>
 8006aae:	781c      	ldrb	r4, [r3, #0]
 8006ab0:	1c95      	adds	r5, r2, #2
 8006ab2:	e7c2      	b.n	8006a3a <_strtoul_l.constprop.0+0x32>
 8006ab4:	0021      	movs	r1, r4
 8006ab6:	3941      	subs	r1, #65	; 0x41
 8006ab8:	2919      	cmp	r1, #25
 8006aba:	d801      	bhi.n	8006ac0 <_strtoul_l.constprop.0+0xb8>
 8006abc:	3c37      	subs	r4, #55	; 0x37
 8006abe:	e7e1      	b.n	8006a84 <_strtoul_l.constprop.0+0x7c>
 8006ac0:	0021      	movs	r1, r4
 8006ac2:	3961      	subs	r1, #97	; 0x61
 8006ac4:	2919      	cmp	r1, #25
 8006ac6:	d803      	bhi.n	8006ad0 <_strtoul_l.constprop.0+0xc8>
 8006ac8:	3c57      	subs	r4, #87	; 0x57
 8006aca:	e7db      	b.n	8006a84 <_strtoul_l.constprop.0+0x7c>
 8006acc:	0013      	movs	r3, r2
 8006ace:	e7e9      	b.n	8006aa4 <_strtoul_l.constprop.0+0x9c>
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	da09      	bge.n	8006ae8 <_strtoul_l.constprop.0+0xe0>
 8006ad4:	2322      	movs	r3, #34	; 0x22
 8006ad6:	2001      	movs	r0, #1
 8006ad8:	9a05      	ldr	r2, [sp, #20]
 8006ada:	4240      	negs	r0, r0
 8006adc:	6013      	str	r3, [r2, #0]
 8006ade:	9b02      	ldr	r3, [sp, #8]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d109      	bne.n	8006af8 <_strtoul_l.constprop.0+0xf0>
 8006ae4:	b007      	add	sp, #28
 8006ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ae8:	2f00      	cmp	r7, #0
 8006aea:	d000      	beq.n	8006aee <_strtoul_l.constprop.0+0xe6>
 8006aec:	4240      	negs	r0, r0
 8006aee:	9a02      	ldr	r2, [sp, #8]
 8006af0:	2a00      	cmp	r2, #0
 8006af2:	d0f7      	beq.n	8006ae4 <_strtoul_l.constprop.0+0xdc>
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d001      	beq.n	8006afc <_strtoul_l.constprop.0+0xf4>
 8006af8:	1e6b      	subs	r3, r5, #1
 8006afa:	9301      	str	r3, [sp, #4]
 8006afc:	9b02      	ldr	r3, [sp, #8]
 8006afe:	9a01      	ldr	r2, [sp, #4]
 8006b00:	601a      	str	r2, [r3, #0]
 8006b02:	e7ef      	b.n	8006ae4 <_strtoul_l.constprop.0+0xdc>
 8006b04:	2430      	movs	r4, #48	; 0x30
 8006b06:	2e00      	cmp	r6, #0
 8006b08:	d1a5      	bne.n	8006a56 <_strtoul_l.constprop.0+0x4e>
 8006b0a:	3608      	adds	r6, #8
 8006b0c:	e7a3      	b.n	8006a56 <_strtoul_l.constprop.0+0x4e>
 8006b0e:	2c30      	cmp	r4, #48	; 0x30
 8006b10:	d099      	beq.n	8006a46 <_strtoul_l.constprop.0+0x3e>
 8006b12:	260a      	movs	r6, #10
 8006b14:	e79f      	b.n	8006a56 <_strtoul_l.constprop.0+0x4e>
 8006b16:	46c0      	nop			; (mov r8, r8)
 8006b18:	080076ef 	.word	0x080076ef

08006b1c <_strtoul_r>:
 8006b1c:	b510      	push	{r4, lr}
 8006b1e:	f7ff ff73 	bl	8006a08 <_strtoul_l.constprop.0>
 8006b22:	bd10      	pop	{r4, pc}

08006b24 <__submore>:
 8006b24:	000b      	movs	r3, r1
 8006b26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b28:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8006b2a:	3344      	adds	r3, #68	; 0x44
 8006b2c:	000c      	movs	r4, r1
 8006b2e:	429d      	cmp	r5, r3
 8006b30:	d11c      	bne.n	8006b6c <__submore+0x48>
 8006b32:	2680      	movs	r6, #128	; 0x80
 8006b34:	00f6      	lsls	r6, r6, #3
 8006b36:	0031      	movs	r1, r6
 8006b38:	f7fe fe7a 	bl	8005830 <_malloc_r>
 8006b3c:	2800      	cmp	r0, #0
 8006b3e:	d102      	bne.n	8006b46 <__submore+0x22>
 8006b40:	2001      	movs	r0, #1
 8006b42:	4240      	negs	r0, r0
 8006b44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006b46:	0023      	movs	r3, r4
 8006b48:	6360      	str	r0, [r4, #52]	; 0x34
 8006b4a:	63a6      	str	r6, [r4, #56]	; 0x38
 8006b4c:	3346      	adds	r3, #70	; 0x46
 8006b4e:	781a      	ldrb	r2, [r3, #0]
 8006b50:	4b10      	ldr	r3, [pc, #64]	; (8006b94 <__submore+0x70>)
 8006b52:	54c2      	strb	r2, [r0, r3]
 8006b54:	0023      	movs	r3, r4
 8006b56:	3345      	adds	r3, #69	; 0x45
 8006b58:	781a      	ldrb	r2, [r3, #0]
 8006b5a:	4b0f      	ldr	r3, [pc, #60]	; (8006b98 <__submore+0x74>)
 8006b5c:	54c2      	strb	r2, [r0, r3]
 8006b5e:	782a      	ldrb	r2, [r5, #0]
 8006b60:	4b0e      	ldr	r3, [pc, #56]	; (8006b9c <__submore+0x78>)
 8006b62:	54c2      	strb	r2, [r0, r3]
 8006b64:	18c0      	adds	r0, r0, r3
 8006b66:	6020      	str	r0, [r4, #0]
 8006b68:	2000      	movs	r0, #0
 8006b6a:	e7eb      	b.n	8006b44 <__submore+0x20>
 8006b6c:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 8006b6e:	0029      	movs	r1, r5
 8006b70:	0073      	lsls	r3, r6, #1
 8006b72:	001a      	movs	r2, r3
 8006b74:	9301      	str	r3, [sp, #4]
 8006b76:	f000 fb5f 	bl	8007238 <_realloc_r>
 8006b7a:	1e05      	subs	r5, r0, #0
 8006b7c:	d0e0      	beq.n	8006b40 <__submore+0x1c>
 8006b7e:	1987      	adds	r7, r0, r6
 8006b80:	0001      	movs	r1, r0
 8006b82:	0032      	movs	r2, r6
 8006b84:	0038      	movs	r0, r7
 8006b86:	f000 fb2a 	bl	80071de <memcpy>
 8006b8a:	9b01      	ldr	r3, [sp, #4]
 8006b8c:	6027      	str	r7, [r4, #0]
 8006b8e:	6365      	str	r5, [r4, #52]	; 0x34
 8006b90:	63a3      	str	r3, [r4, #56]	; 0x38
 8006b92:	e7e9      	b.n	8006b68 <__submore+0x44>
 8006b94:	000003ff 	.word	0x000003ff
 8006b98:	000003fe 	.word	0x000003fe
 8006b9c:	000003fd 	.word	0x000003fd

08006ba0 <__swbuf_r>:
 8006ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ba2:	0005      	movs	r5, r0
 8006ba4:	000e      	movs	r6, r1
 8006ba6:	0014      	movs	r4, r2
 8006ba8:	2800      	cmp	r0, #0
 8006baa:	d004      	beq.n	8006bb6 <__swbuf_r+0x16>
 8006bac:	6983      	ldr	r3, [r0, #24]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d101      	bne.n	8006bb6 <__swbuf_r+0x16>
 8006bb2:	f000 f9f9 	bl	8006fa8 <__sinit>
 8006bb6:	4b22      	ldr	r3, [pc, #136]	; (8006c40 <__swbuf_r+0xa0>)
 8006bb8:	429c      	cmp	r4, r3
 8006bba:	d12e      	bne.n	8006c1a <__swbuf_r+0x7a>
 8006bbc:	686c      	ldr	r4, [r5, #4]
 8006bbe:	69a3      	ldr	r3, [r4, #24]
 8006bc0:	60a3      	str	r3, [r4, #8]
 8006bc2:	89a3      	ldrh	r3, [r4, #12]
 8006bc4:	071b      	lsls	r3, r3, #28
 8006bc6:	d532      	bpl.n	8006c2e <__swbuf_r+0x8e>
 8006bc8:	6923      	ldr	r3, [r4, #16]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d02f      	beq.n	8006c2e <__swbuf_r+0x8e>
 8006bce:	6823      	ldr	r3, [r4, #0]
 8006bd0:	6922      	ldr	r2, [r4, #16]
 8006bd2:	b2f7      	uxtb	r7, r6
 8006bd4:	1a98      	subs	r0, r3, r2
 8006bd6:	6963      	ldr	r3, [r4, #20]
 8006bd8:	b2f6      	uxtb	r6, r6
 8006bda:	4283      	cmp	r3, r0
 8006bdc:	dc05      	bgt.n	8006bea <__swbuf_r+0x4a>
 8006bde:	0021      	movs	r1, r4
 8006be0:	0028      	movs	r0, r5
 8006be2:	f000 f93f 	bl	8006e64 <_fflush_r>
 8006be6:	2800      	cmp	r0, #0
 8006be8:	d127      	bne.n	8006c3a <__swbuf_r+0x9a>
 8006bea:	68a3      	ldr	r3, [r4, #8]
 8006bec:	3001      	adds	r0, #1
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	60a3      	str	r3, [r4, #8]
 8006bf2:	6823      	ldr	r3, [r4, #0]
 8006bf4:	1c5a      	adds	r2, r3, #1
 8006bf6:	6022      	str	r2, [r4, #0]
 8006bf8:	701f      	strb	r7, [r3, #0]
 8006bfa:	6963      	ldr	r3, [r4, #20]
 8006bfc:	4283      	cmp	r3, r0
 8006bfe:	d004      	beq.n	8006c0a <__swbuf_r+0x6a>
 8006c00:	89a3      	ldrh	r3, [r4, #12]
 8006c02:	07db      	lsls	r3, r3, #31
 8006c04:	d507      	bpl.n	8006c16 <__swbuf_r+0x76>
 8006c06:	2e0a      	cmp	r6, #10
 8006c08:	d105      	bne.n	8006c16 <__swbuf_r+0x76>
 8006c0a:	0021      	movs	r1, r4
 8006c0c:	0028      	movs	r0, r5
 8006c0e:	f000 f929 	bl	8006e64 <_fflush_r>
 8006c12:	2800      	cmp	r0, #0
 8006c14:	d111      	bne.n	8006c3a <__swbuf_r+0x9a>
 8006c16:	0030      	movs	r0, r6
 8006c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c1a:	4b0a      	ldr	r3, [pc, #40]	; (8006c44 <__swbuf_r+0xa4>)
 8006c1c:	429c      	cmp	r4, r3
 8006c1e:	d101      	bne.n	8006c24 <__swbuf_r+0x84>
 8006c20:	68ac      	ldr	r4, [r5, #8]
 8006c22:	e7cc      	b.n	8006bbe <__swbuf_r+0x1e>
 8006c24:	4b08      	ldr	r3, [pc, #32]	; (8006c48 <__swbuf_r+0xa8>)
 8006c26:	429c      	cmp	r4, r3
 8006c28:	d1c9      	bne.n	8006bbe <__swbuf_r+0x1e>
 8006c2a:	68ec      	ldr	r4, [r5, #12]
 8006c2c:	e7c7      	b.n	8006bbe <__swbuf_r+0x1e>
 8006c2e:	0021      	movs	r1, r4
 8006c30:	0028      	movs	r0, r5
 8006c32:	f000 f80b 	bl	8006c4c <__swsetup_r>
 8006c36:	2800      	cmp	r0, #0
 8006c38:	d0c9      	beq.n	8006bce <__swbuf_r+0x2e>
 8006c3a:	2601      	movs	r6, #1
 8006c3c:	4276      	negs	r6, r6
 8006c3e:	e7ea      	b.n	8006c16 <__swbuf_r+0x76>
 8006c40:	08007810 	.word	0x08007810
 8006c44:	08007830 	.word	0x08007830
 8006c48:	080077f0 	.word	0x080077f0

08006c4c <__swsetup_r>:
 8006c4c:	4b37      	ldr	r3, [pc, #220]	; (8006d2c <__swsetup_r+0xe0>)
 8006c4e:	b570      	push	{r4, r5, r6, lr}
 8006c50:	681d      	ldr	r5, [r3, #0]
 8006c52:	0006      	movs	r6, r0
 8006c54:	000c      	movs	r4, r1
 8006c56:	2d00      	cmp	r5, #0
 8006c58:	d005      	beq.n	8006c66 <__swsetup_r+0x1a>
 8006c5a:	69ab      	ldr	r3, [r5, #24]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d102      	bne.n	8006c66 <__swsetup_r+0x1a>
 8006c60:	0028      	movs	r0, r5
 8006c62:	f000 f9a1 	bl	8006fa8 <__sinit>
 8006c66:	4b32      	ldr	r3, [pc, #200]	; (8006d30 <__swsetup_r+0xe4>)
 8006c68:	429c      	cmp	r4, r3
 8006c6a:	d10f      	bne.n	8006c8c <__swsetup_r+0x40>
 8006c6c:	686c      	ldr	r4, [r5, #4]
 8006c6e:	230c      	movs	r3, #12
 8006c70:	5ee2      	ldrsh	r2, [r4, r3]
 8006c72:	b293      	uxth	r3, r2
 8006c74:	0711      	lsls	r1, r2, #28
 8006c76:	d42d      	bmi.n	8006cd4 <__swsetup_r+0x88>
 8006c78:	06d9      	lsls	r1, r3, #27
 8006c7a:	d411      	bmi.n	8006ca0 <__swsetup_r+0x54>
 8006c7c:	2309      	movs	r3, #9
 8006c7e:	2001      	movs	r0, #1
 8006c80:	6033      	str	r3, [r6, #0]
 8006c82:	3337      	adds	r3, #55	; 0x37
 8006c84:	4313      	orrs	r3, r2
 8006c86:	81a3      	strh	r3, [r4, #12]
 8006c88:	4240      	negs	r0, r0
 8006c8a:	bd70      	pop	{r4, r5, r6, pc}
 8006c8c:	4b29      	ldr	r3, [pc, #164]	; (8006d34 <__swsetup_r+0xe8>)
 8006c8e:	429c      	cmp	r4, r3
 8006c90:	d101      	bne.n	8006c96 <__swsetup_r+0x4a>
 8006c92:	68ac      	ldr	r4, [r5, #8]
 8006c94:	e7eb      	b.n	8006c6e <__swsetup_r+0x22>
 8006c96:	4b28      	ldr	r3, [pc, #160]	; (8006d38 <__swsetup_r+0xec>)
 8006c98:	429c      	cmp	r4, r3
 8006c9a:	d1e8      	bne.n	8006c6e <__swsetup_r+0x22>
 8006c9c:	68ec      	ldr	r4, [r5, #12]
 8006c9e:	e7e6      	b.n	8006c6e <__swsetup_r+0x22>
 8006ca0:	075b      	lsls	r3, r3, #29
 8006ca2:	d513      	bpl.n	8006ccc <__swsetup_r+0x80>
 8006ca4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ca6:	2900      	cmp	r1, #0
 8006ca8:	d008      	beq.n	8006cbc <__swsetup_r+0x70>
 8006caa:	0023      	movs	r3, r4
 8006cac:	3344      	adds	r3, #68	; 0x44
 8006cae:	4299      	cmp	r1, r3
 8006cb0:	d002      	beq.n	8006cb8 <__swsetup_r+0x6c>
 8006cb2:	0030      	movs	r0, r6
 8006cb4:	f7fe fd50 	bl	8005758 <_free_r>
 8006cb8:	2300      	movs	r3, #0
 8006cba:	6363      	str	r3, [r4, #52]	; 0x34
 8006cbc:	2224      	movs	r2, #36	; 0x24
 8006cbe:	89a3      	ldrh	r3, [r4, #12]
 8006cc0:	4393      	bics	r3, r2
 8006cc2:	81a3      	strh	r3, [r4, #12]
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	6063      	str	r3, [r4, #4]
 8006cc8:	6923      	ldr	r3, [r4, #16]
 8006cca:	6023      	str	r3, [r4, #0]
 8006ccc:	2308      	movs	r3, #8
 8006cce:	89a2      	ldrh	r2, [r4, #12]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	81a3      	strh	r3, [r4, #12]
 8006cd4:	6923      	ldr	r3, [r4, #16]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d10b      	bne.n	8006cf2 <__swsetup_r+0xa6>
 8006cda:	21a0      	movs	r1, #160	; 0xa0
 8006cdc:	2280      	movs	r2, #128	; 0x80
 8006cde:	89a3      	ldrh	r3, [r4, #12]
 8006ce0:	0089      	lsls	r1, r1, #2
 8006ce2:	0092      	lsls	r2, r2, #2
 8006ce4:	400b      	ands	r3, r1
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d003      	beq.n	8006cf2 <__swsetup_r+0xa6>
 8006cea:	0021      	movs	r1, r4
 8006cec:	0030      	movs	r0, r6
 8006cee:	f000 fa27 	bl	8007140 <__smakebuf_r>
 8006cf2:	220c      	movs	r2, #12
 8006cf4:	5ea3      	ldrsh	r3, [r4, r2]
 8006cf6:	2001      	movs	r0, #1
 8006cf8:	001a      	movs	r2, r3
 8006cfa:	b299      	uxth	r1, r3
 8006cfc:	4002      	ands	r2, r0
 8006cfe:	4203      	tst	r3, r0
 8006d00:	d00f      	beq.n	8006d22 <__swsetup_r+0xd6>
 8006d02:	2200      	movs	r2, #0
 8006d04:	60a2      	str	r2, [r4, #8]
 8006d06:	6962      	ldr	r2, [r4, #20]
 8006d08:	4252      	negs	r2, r2
 8006d0a:	61a2      	str	r2, [r4, #24]
 8006d0c:	2000      	movs	r0, #0
 8006d0e:	6922      	ldr	r2, [r4, #16]
 8006d10:	4282      	cmp	r2, r0
 8006d12:	d1ba      	bne.n	8006c8a <__swsetup_r+0x3e>
 8006d14:	060a      	lsls	r2, r1, #24
 8006d16:	d5b8      	bpl.n	8006c8a <__swsetup_r+0x3e>
 8006d18:	2240      	movs	r2, #64	; 0x40
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	81a3      	strh	r3, [r4, #12]
 8006d1e:	3801      	subs	r0, #1
 8006d20:	e7b3      	b.n	8006c8a <__swsetup_r+0x3e>
 8006d22:	0788      	lsls	r0, r1, #30
 8006d24:	d400      	bmi.n	8006d28 <__swsetup_r+0xdc>
 8006d26:	6962      	ldr	r2, [r4, #20]
 8006d28:	60a2      	str	r2, [r4, #8]
 8006d2a:	e7ef      	b.n	8006d0c <__swsetup_r+0xc0>
 8006d2c:	20000098 	.word	0x20000098
 8006d30:	08007810 	.word	0x08007810
 8006d34:	08007830 	.word	0x08007830
 8006d38:	080077f0 	.word	0x080077f0

08006d3c <abort>:
 8006d3c:	2006      	movs	r0, #6
 8006d3e:	b510      	push	{r4, lr}
 8006d40:	f000 fad4 	bl	80072ec <raise>
 8006d44:	2001      	movs	r0, #1
 8006d46:	f7fa fae3 	bl	8001310 <_exit>
	...

08006d4c <__sflush_r>:
 8006d4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d4e:	898b      	ldrh	r3, [r1, #12]
 8006d50:	0005      	movs	r5, r0
 8006d52:	000c      	movs	r4, r1
 8006d54:	071a      	lsls	r2, r3, #28
 8006d56:	d45f      	bmi.n	8006e18 <__sflush_r+0xcc>
 8006d58:	684a      	ldr	r2, [r1, #4]
 8006d5a:	2a00      	cmp	r2, #0
 8006d5c:	dc04      	bgt.n	8006d68 <__sflush_r+0x1c>
 8006d5e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8006d60:	2a00      	cmp	r2, #0
 8006d62:	dc01      	bgt.n	8006d68 <__sflush_r+0x1c>
 8006d64:	2000      	movs	r0, #0
 8006d66:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006d68:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006d6a:	2f00      	cmp	r7, #0
 8006d6c:	d0fa      	beq.n	8006d64 <__sflush_r+0x18>
 8006d6e:	2200      	movs	r2, #0
 8006d70:	2180      	movs	r1, #128	; 0x80
 8006d72:	682e      	ldr	r6, [r5, #0]
 8006d74:	602a      	str	r2, [r5, #0]
 8006d76:	001a      	movs	r2, r3
 8006d78:	0149      	lsls	r1, r1, #5
 8006d7a:	400a      	ands	r2, r1
 8006d7c:	420b      	tst	r3, r1
 8006d7e:	d034      	beq.n	8006dea <__sflush_r+0x9e>
 8006d80:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d82:	89a3      	ldrh	r3, [r4, #12]
 8006d84:	075b      	lsls	r3, r3, #29
 8006d86:	d506      	bpl.n	8006d96 <__sflush_r+0x4a>
 8006d88:	6863      	ldr	r3, [r4, #4]
 8006d8a:	1ac0      	subs	r0, r0, r3
 8006d8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d001      	beq.n	8006d96 <__sflush_r+0x4a>
 8006d92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d94:	1ac0      	subs	r0, r0, r3
 8006d96:	0002      	movs	r2, r0
 8006d98:	6a21      	ldr	r1, [r4, #32]
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	0028      	movs	r0, r5
 8006d9e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006da0:	47b8      	blx	r7
 8006da2:	89a1      	ldrh	r1, [r4, #12]
 8006da4:	1c43      	adds	r3, r0, #1
 8006da6:	d106      	bne.n	8006db6 <__sflush_r+0x6a>
 8006da8:	682b      	ldr	r3, [r5, #0]
 8006daa:	2b1d      	cmp	r3, #29
 8006dac:	d831      	bhi.n	8006e12 <__sflush_r+0xc6>
 8006dae:	4a2c      	ldr	r2, [pc, #176]	; (8006e60 <__sflush_r+0x114>)
 8006db0:	40da      	lsrs	r2, r3
 8006db2:	07d3      	lsls	r3, r2, #31
 8006db4:	d52d      	bpl.n	8006e12 <__sflush_r+0xc6>
 8006db6:	2300      	movs	r3, #0
 8006db8:	6063      	str	r3, [r4, #4]
 8006dba:	6923      	ldr	r3, [r4, #16]
 8006dbc:	6023      	str	r3, [r4, #0]
 8006dbe:	04cb      	lsls	r3, r1, #19
 8006dc0:	d505      	bpl.n	8006dce <__sflush_r+0x82>
 8006dc2:	1c43      	adds	r3, r0, #1
 8006dc4:	d102      	bne.n	8006dcc <__sflush_r+0x80>
 8006dc6:	682b      	ldr	r3, [r5, #0]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d100      	bne.n	8006dce <__sflush_r+0x82>
 8006dcc:	6560      	str	r0, [r4, #84]	; 0x54
 8006dce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006dd0:	602e      	str	r6, [r5, #0]
 8006dd2:	2900      	cmp	r1, #0
 8006dd4:	d0c6      	beq.n	8006d64 <__sflush_r+0x18>
 8006dd6:	0023      	movs	r3, r4
 8006dd8:	3344      	adds	r3, #68	; 0x44
 8006dda:	4299      	cmp	r1, r3
 8006ddc:	d002      	beq.n	8006de4 <__sflush_r+0x98>
 8006dde:	0028      	movs	r0, r5
 8006de0:	f7fe fcba 	bl	8005758 <_free_r>
 8006de4:	2000      	movs	r0, #0
 8006de6:	6360      	str	r0, [r4, #52]	; 0x34
 8006de8:	e7bd      	b.n	8006d66 <__sflush_r+0x1a>
 8006dea:	2301      	movs	r3, #1
 8006dec:	0028      	movs	r0, r5
 8006dee:	6a21      	ldr	r1, [r4, #32]
 8006df0:	47b8      	blx	r7
 8006df2:	1c43      	adds	r3, r0, #1
 8006df4:	d1c5      	bne.n	8006d82 <__sflush_r+0x36>
 8006df6:	682b      	ldr	r3, [r5, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d0c2      	beq.n	8006d82 <__sflush_r+0x36>
 8006dfc:	2b1d      	cmp	r3, #29
 8006dfe:	d001      	beq.n	8006e04 <__sflush_r+0xb8>
 8006e00:	2b16      	cmp	r3, #22
 8006e02:	d101      	bne.n	8006e08 <__sflush_r+0xbc>
 8006e04:	602e      	str	r6, [r5, #0]
 8006e06:	e7ad      	b.n	8006d64 <__sflush_r+0x18>
 8006e08:	2340      	movs	r3, #64	; 0x40
 8006e0a:	89a2      	ldrh	r2, [r4, #12]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	81a3      	strh	r3, [r4, #12]
 8006e10:	e7a9      	b.n	8006d66 <__sflush_r+0x1a>
 8006e12:	2340      	movs	r3, #64	; 0x40
 8006e14:	430b      	orrs	r3, r1
 8006e16:	e7fa      	b.n	8006e0e <__sflush_r+0xc2>
 8006e18:	690f      	ldr	r7, [r1, #16]
 8006e1a:	2f00      	cmp	r7, #0
 8006e1c:	d0a2      	beq.n	8006d64 <__sflush_r+0x18>
 8006e1e:	680a      	ldr	r2, [r1, #0]
 8006e20:	600f      	str	r7, [r1, #0]
 8006e22:	1bd2      	subs	r2, r2, r7
 8006e24:	9201      	str	r2, [sp, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	079b      	lsls	r3, r3, #30
 8006e2a:	d100      	bne.n	8006e2e <__sflush_r+0xe2>
 8006e2c:	694a      	ldr	r2, [r1, #20]
 8006e2e:	60a2      	str	r2, [r4, #8]
 8006e30:	9b01      	ldr	r3, [sp, #4]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	dc00      	bgt.n	8006e38 <__sflush_r+0xec>
 8006e36:	e795      	b.n	8006d64 <__sflush_r+0x18>
 8006e38:	003a      	movs	r2, r7
 8006e3a:	0028      	movs	r0, r5
 8006e3c:	9b01      	ldr	r3, [sp, #4]
 8006e3e:	6a21      	ldr	r1, [r4, #32]
 8006e40:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006e42:	47b0      	blx	r6
 8006e44:	2800      	cmp	r0, #0
 8006e46:	dc06      	bgt.n	8006e56 <__sflush_r+0x10a>
 8006e48:	2340      	movs	r3, #64	; 0x40
 8006e4a:	2001      	movs	r0, #1
 8006e4c:	89a2      	ldrh	r2, [r4, #12]
 8006e4e:	4240      	negs	r0, r0
 8006e50:	4313      	orrs	r3, r2
 8006e52:	81a3      	strh	r3, [r4, #12]
 8006e54:	e787      	b.n	8006d66 <__sflush_r+0x1a>
 8006e56:	9b01      	ldr	r3, [sp, #4]
 8006e58:	183f      	adds	r7, r7, r0
 8006e5a:	1a1b      	subs	r3, r3, r0
 8006e5c:	9301      	str	r3, [sp, #4]
 8006e5e:	e7e7      	b.n	8006e30 <__sflush_r+0xe4>
 8006e60:	20400001 	.word	0x20400001

08006e64 <_fflush_r>:
 8006e64:	690b      	ldr	r3, [r1, #16]
 8006e66:	b570      	push	{r4, r5, r6, lr}
 8006e68:	0005      	movs	r5, r0
 8006e6a:	000c      	movs	r4, r1
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d102      	bne.n	8006e76 <_fflush_r+0x12>
 8006e70:	2500      	movs	r5, #0
 8006e72:	0028      	movs	r0, r5
 8006e74:	bd70      	pop	{r4, r5, r6, pc}
 8006e76:	2800      	cmp	r0, #0
 8006e78:	d004      	beq.n	8006e84 <_fflush_r+0x20>
 8006e7a:	6983      	ldr	r3, [r0, #24]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d101      	bne.n	8006e84 <_fflush_r+0x20>
 8006e80:	f000 f892 	bl	8006fa8 <__sinit>
 8006e84:	4b14      	ldr	r3, [pc, #80]	; (8006ed8 <_fflush_r+0x74>)
 8006e86:	429c      	cmp	r4, r3
 8006e88:	d11b      	bne.n	8006ec2 <_fflush_r+0x5e>
 8006e8a:	686c      	ldr	r4, [r5, #4]
 8006e8c:	220c      	movs	r2, #12
 8006e8e:	5ea3      	ldrsh	r3, [r4, r2]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d0ed      	beq.n	8006e70 <_fflush_r+0xc>
 8006e94:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e96:	07d2      	lsls	r2, r2, #31
 8006e98:	d404      	bmi.n	8006ea4 <_fflush_r+0x40>
 8006e9a:	059b      	lsls	r3, r3, #22
 8006e9c:	d402      	bmi.n	8006ea4 <_fflush_r+0x40>
 8006e9e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ea0:	f000 f923 	bl	80070ea <__retarget_lock_acquire_recursive>
 8006ea4:	0028      	movs	r0, r5
 8006ea6:	0021      	movs	r1, r4
 8006ea8:	f7ff ff50 	bl	8006d4c <__sflush_r>
 8006eac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006eae:	0005      	movs	r5, r0
 8006eb0:	07db      	lsls	r3, r3, #31
 8006eb2:	d4de      	bmi.n	8006e72 <_fflush_r+0xe>
 8006eb4:	89a3      	ldrh	r3, [r4, #12]
 8006eb6:	059b      	lsls	r3, r3, #22
 8006eb8:	d4db      	bmi.n	8006e72 <_fflush_r+0xe>
 8006eba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ebc:	f000 f916 	bl	80070ec <__retarget_lock_release_recursive>
 8006ec0:	e7d7      	b.n	8006e72 <_fflush_r+0xe>
 8006ec2:	4b06      	ldr	r3, [pc, #24]	; (8006edc <_fflush_r+0x78>)
 8006ec4:	429c      	cmp	r4, r3
 8006ec6:	d101      	bne.n	8006ecc <_fflush_r+0x68>
 8006ec8:	68ac      	ldr	r4, [r5, #8]
 8006eca:	e7df      	b.n	8006e8c <_fflush_r+0x28>
 8006ecc:	4b04      	ldr	r3, [pc, #16]	; (8006ee0 <_fflush_r+0x7c>)
 8006ece:	429c      	cmp	r4, r3
 8006ed0:	d1dc      	bne.n	8006e8c <_fflush_r+0x28>
 8006ed2:	68ec      	ldr	r4, [r5, #12]
 8006ed4:	e7da      	b.n	8006e8c <_fflush_r+0x28>
 8006ed6:	46c0      	nop			; (mov r8, r8)
 8006ed8:	08007810 	.word	0x08007810
 8006edc:	08007830 	.word	0x08007830
 8006ee0:	080077f0 	.word	0x080077f0

08006ee4 <std>:
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	b510      	push	{r4, lr}
 8006ee8:	0004      	movs	r4, r0
 8006eea:	6003      	str	r3, [r0, #0]
 8006eec:	6043      	str	r3, [r0, #4]
 8006eee:	6083      	str	r3, [r0, #8]
 8006ef0:	8181      	strh	r1, [r0, #12]
 8006ef2:	6643      	str	r3, [r0, #100]	; 0x64
 8006ef4:	0019      	movs	r1, r3
 8006ef6:	81c2      	strh	r2, [r0, #14]
 8006ef8:	6103      	str	r3, [r0, #16]
 8006efa:	6143      	str	r3, [r0, #20]
 8006efc:	6183      	str	r3, [r0, #24]
 8006efe:	2208      	movs	r2, #8
 8006f00:	305c      	adds	r0, #92	; 0x5c
 8006f02:	f7fe fa6f 	bl	80053e4 <memset>
 8006f06:	4b05      	ldr	r3, [pc, #20]	; (8006f1c <std+0x38>)
 8006f08:	6224      	str	r4, [r4, #32]
 8006f0a:	6263      	str	r3, [r4, #36]	; 0x24
 8006f0c:	4b04      	ldr	r3, [pc, #16]	; (8006f20 <std+0x3c>)
 8006f0e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f10:	4b04      	ldr	r3, [pc, #16]	; (8006f24 <std+0x40>)
 8006f12:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006f14:	4b04      	ldr	r3, [pc, #16]	; (8006f28 <std+0x44>)
 8006f16:	6323      	str	r3, [r4, #48]	; 0x30
 8006f18:	bd10      	pop	{r4, pc}
 8006f1a:	46c0      	nop			; (mov r8, r8)
 8006f1c:	080054ed 	.word	0x080054ed
 8006f20:	08005519 	.word	0x08005519
 8006f24:	08005551 	.word	0x08005551
 8006f28:	0800557d 	.word	0x0800557d

08006f2c <_cleanup_r>:
 8006f2c:	b510      	push	{r4, lr}
 8006f2e:	4902      	ldr	r1, [pc, #8]	; (8006f38 <_cleanup_r+0xc>)
 8006f30:	f000 f8ba 	bl	80070a8 <_fwalk_reent>
 8006f34:	bd10      	pop	{r4, pc}
 8006f36:	46c0      	nop			; (mov r8, r8)
 8006f38:	08006e65 	.word	0x08006e65

08006f3c <__sfmoreglue>:
 8006f3c:	b570      	push	{r4, r5, r6, lr}
 8006f3e:	2568      	movs	r5, #104	; 0x68
 8006f40:	1e4a      	subs	r2, r1, #1
 8006f42:	4355      	muls	r5, r2
 8006f44:	000e      	movs	r6, r1
 8006f46:	0029      	movs	r1, r5
 8006f48:	3174      	adds	r1, #116	; 0x74
 8006f4a:	f7fe fc71 	bl	8005830 <_malloc_r>
 8006f4e:	1e04      	subs	r4, r0, #0
 8006f50:	d008      	beq.n	8006f64 <__sfmoreglue+0x28>
 8006f52:	2100      	movs	r1, #0
 8006f54:	002a      	movs	r2, r5
 8006f56:	6001      	str	r1, [r0, #0]
 8006f58:	6046      	str	r6, [r0, #4]
 8006f5a:	300c      	adds	r0, #12
 8006f5c:	60a0      	str	r0, [r4, #8]
 8006f5e:	3268      	adds	r2, #104	; 0x68
 8006f60:	f7fe fa40 	bl	80053e4 <memset>
 8006f64:	0020      	movs	r0, r4
 8006f66:	bd70      	pop	{r4, r5, r6, pc}

08006f68 <__sfp_lock_acquire>:
 8006f68:	b510      	push	{r4, lr}
 8006f6a:	4802      	ldr	r0, [pc, #8]	; (8006f74 <__sfp_lock_acquire+0xc>)
 8006f6c:	f000 f8bd 	bl	80070ea <__retarget_lock_acquire_recursive>
 8006f70:	bd10      	pop	{r4, pc}
 8006f72:	46c0      	nop			; (mov r8, r8)
 8006f74:	20000539 	.word	0x20000539

08006f78 <__sfp_lock_release>:
 8006f78:	b510      	push	{r4, lr}
 8006f7a:	4802      	ldr	r0, [pc, #8]	; (8006f84 <__sfp_lock_release+0xc>)
 8006f7c:	f000 f8b6 	bl	80070ec <__retarget_lock_release_recursive>
 8006f80:	bd10      	pop	{r4, pc}
 8006f82:	46c0      	nop			; (mov r8, r8)
 8006f84:	20000539 	.word	0x20000539

08006f88 <__sinit_lock_acquire>:
 8006f88:	b510      	push	{r4, lr}
 8006f8a:	4802      	ldr	r0, [pc, #8]	; (8006f94 <__sinit_lock_acquire+0xc>)
 8006f8c:	f000 f8ad 	bl	80070ea <__retarget_lock_acquire_recursive>
 8006f90:	bd10      	pop	{r4, pc}
 8006f92:	46c0      	nop			; (mov r8, r8)
 8006f94:	2000053a 	.word	0x2000053a

08006f98 <__sinit_lock_release>:
 8006f98:	b510      	push	{r4, lr}
 8006f9a:	4802      	ldr	r0, [pc, #8]	; (8006fa4 <__sinit_lock_release+0xc>)
 8006f9c:	f000 f8a6 	bl	80070ec <__retarget_lock_release_recursive>
 8006fa0:	bd10      	pop	{r4, pc}
 8006fa2:	46c0      	nop			; (mov r8, r8)
 8006fa4:	2000053a 	.word	0x2000053a

08006fa8 <__sinit>:
 8006fa8:	b513      	push	{r0, r1, r4, lr}
 8006faa:	0004      	movs	r4, r0
 8006fac:	f7ff ffec 	bl	8006f88 <__sinit_lock_acquire>
 8006fb0:	69a3      	ldr	r3, [r4, #24]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d002      	beq.n	8006fbc <__sinit+0x14>
 8006fb6:	f7ff ffef 	bl	8006f98 <__sinit_lock_release>
 8006fba:	bd13      	pop	{r0, r1, r4, pc}
 8006fbc:	64a3      	str	r3, [r4, #72]	; 0x48
 8006fbe:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006fc0:	6523      	str	r3, [r4, #80]	; 0x50
 8006fc2:	4b13      	ldr	r3, [pc, #76]	; (8007010 <__sinit+0x68>)
 8006fc4:	4a13      	ldr	r2, [pc, #76]	; (8007014 <__sinit+0x6c>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	62a2      	str	r2, [r4, #40]	; 0x28
 8006fca:	9301      	str	r3, [sp, #4]
 8006fcc:	42a3      	cmp	r3, r4
 8006fce:	d101      	bne.n	8006fd4 <__sinit+0x2c>
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	61a3      	str	r3, [r4, #24]
 8006fd4:	0020      	movs	r0, r4
 8006fd6:	f000 f81f 	bl	8007018 <__sfp>
 8006fda:	6060      	str	r0, [r4, #4]
 8006fdc:	0020      	movs	r0, r4
 8006fde:	f000 f81b 	bl	8007018 <__sfp>
 8006fe2:	60a0      	str	r0, [r4, #8]
 8006fe4:	0020      	movs	r0, r4
 8006fe6:	f000 f817 	bl	8007018 <__sfp>
 8006fea:	2200      	movs	r2, #0
 8006fec:	2104      	movs	r1, #4
 8006fee:	60e0      	str	r0, [r4, #12]
 8006ff0:	6860      	ldr	r0, [r4, #4]
 8006ff2:	f7ff ff77 	bl	8006ee4 <std>
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	2109      	movs	r1, #9
 8006ffa:	68a0      	ldr	r0, [r4, #8]
 8006ffc:	f7ff ff72 	bl	8006ee4 <std>
 8007000:	2202      	movs	r2, #2
 8007002:	2112      	movs	r1, #18
 8007004:	68e0      	ldr	r0, [r4, #12]
 8007006:	f7ff ff6d 	bl	8006ee4 <std>
 800700a:	2301      	movs	r3, #1
 800700c:	61a3      	str	r3, [r4, #24]
 800700e:	e7d2      	b.n	8006fb6 <__sinit+0xe>
 8007010:	080075ec 	.word	0x080075ec
 8007014:	08006f2d 	.word	0x08006f2d

08007018 <__sfp>:
 8007018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800701a:	0007      	movs	r7, r0
 800701c:	f7ff ffa4 	bl	8006f68 <__sfp_lock_acquire>
 8007020:	4b1f      	ldr	r3, [pc, #124]	; (80070a0 <__sfp+0x88>)
 8007022:	681e      	ldr	r6, [r3, #0]
 8007024:	69b3      	ldr	r3, [r6, #24]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d102      	bne.n	8007030 <__sfp+0x18>
 800702a:	0030      	movs	r0, r6
 800702c:	f7ff ffbc 	bl	8006fa8 <__sinit>
 8007030:	3648      	adds	r6, #72	; 0x48
 8007032:	68b4      	ldr	r4, [r6, #8]
 8007034:	6873      	ldr	r3, [r6, #4]
 8007036:	3b01      	subs	r3, #1
 8007038:	d504      	bpl.n	8007044 <__sfp+0x2c>
 800703a:	6833      	ldr	r3, [r6, #0]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d022      	beq.n	8007086 <__sfp+0x6e>
 8007040:	6836      	ldr	r6, [r6, #0]
 8007042:	e7f6      	b.n	8007032 <__sfp+0x1a>
 8007044:	220c      	movs	r2, #12
 8007046:	5ea5      	ldrsh	r5, [r4, r2]
 8007048:	2d00      	cmp	r5, #0
 800704a:	d11a      	bne.n	8007082 <__sfp+0x6a>
 800704c:	0020      	movs	r0, r4
 800704e:	4b15      	ldr	r3, [pc, #84]	; (80070a4 <__sfp+0x8c>)
 8007050:	3058      	adds	r0, #88	; 0x58
 8007052:	60e3      	str	r3, [r4, #12]
 8007054:	6665      	str	r5, [r4, #100]	; 0x64
 8007056:	f000 f847 	bl	80070e8 <__retarget_lock_init_recursive>
 800705a:	f7ff ff8d 	bl	8006f78 <__sfp_lock_release>
 800705e:	0020      	movs	r0, r4
 8007060:	2208      	movs	r2, #8
 8007062:	0029      	movs	r1, r5
 8007064:	6025      	str	r5, [r4, #0]
 8007066:	60a5      	str	r5, [r4, #8]
 8007068:	6065      	str	r5, [r4, #4]
 800706a:	6125      	str	r5, [r4, #16]
 800706c:	6165      	str	r5, [r4, #20]
 800706e:	61a5      	str	r5, [r4, #24]
 8007070:	305c      	adds	r0, #92	; 0x5c
 8007072:	f7fe f9b7 	bl	80053e4 <memset>
 8007076:	6365      	str	r5, [r4, #52]	; 0x34
 8007078:	63a5      	str	r5, [r4, #56]	; 0x38
 800707a:	64a5      	str	r5, [r4, #72]	; 0x48
 800707c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800707e:	0020      	movs	r0, r4
 8007080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007082:	3468      	adds	r4, #104	; 0x68
 8007084:	e7d7      	b.n	8007036 <__sfp+0x1e>
 8007086:	2104      	movs	r1, #4
 8007088:	0038      	movs	r0, r7
 800708a:	f7ff ff57 	bl	8006f3c <__sfmoreglue>
 800708e:	1e04      	subs	r4, r0, #0
 8007090:	6030      	str	r0, [r6, #0]
 8007092:	d1d5      	bne.n	8007040 <__sfp+0x28>
 8007094:	f7ff ff70 	bl	8006f78 <__sfp_lock_release>
 8007098:	230c      	movs	r3, #12
 800709a:	603b      	str	r3, [r7, #0]
 800709c:	e7ef      	b.n	800707e <__sfp+0x66>
 800709e:	46c0      	nop			; (mov r8, r8)
 80070a0:	080075ec 	.word	0x080075ec
 80070a4:	ffff0001 	.word	0xffff0001

080070a8 <_fwalk_reent>:
 80070a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070aa:	0004      	movs	r4, r0
 80070ac:	0006      	movs	r6, r0
 80070ae:	2700      	movs	r7, #0
 80070b0:	9101      	str	r1, [sp, #4]
 80070b2:	3448      	adds	r4, #72	; 0x48
 80070b4:	6863      	ldr	r3, [r4, #4]
 80070b6:	68a5      	ldr	r5, [r4, #8]
 80070b8:	9300      	str	r3, [sp, #0]
 80070ba:	9b00      	ldr	r3, [sp, #0]
 80070bc:	3b01      	subs	r3, #1
 80070be:	9300      	str	r3, [sp, #0]
 80070c0:	d504      	bpl.n	80070cc <_fwalk_reent+0x24>
 80070c2:	6824      	ldr	r4, [r4, #0]
 80070c4:	2c00      	cmp	r4, #0
 80070c6:	d1f5      	bne.n	80070b4 <_fwalk_reent+0xc>
 80070c8:	0038      	movs	r0, r7
 80070ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80070cc:	89ab      	ldrh	r3, [r5, #12]
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d908      	bls.n	80070e4 <_fwalk_reent+0x3c>
 80070d2:	220e      	movs	r2, #14
 80070d4:	5eab      	ldrsh	r3, [r5, r2]
 80070d6:	3301      	adds	r3, #1
 80070d8:	d004      	beq.n	80070e4 <_fwalk_reent+0x3c>
 80070da:	0029      	movs	r1, r5
 80070dc:	0030      	movs	r0, r6
 80070de:	9b01      	ldr	r3, [sp, #4]
 80070e0:	4798      	blx	r3
 80070e2:	4307      	orrs	r7, r0
 80070e4:	3568      	adds	r5, #104	; 0x68
 80070e6:	e7e8      	b.n	80070ba <_fwalk_reent+0x12>

080070e8 <__retarget_lock_init_recursive>:
 80070e8:	4770      	bx	lr

080070ea <__retarget_lock_acquire_recursive>:
 80070ea:	4770      	bx	lr

080070ec <__retarget_lock_release_recursive>:
 80070ec:	4770      	bx	lr
	...

080070f0 <__swhatbuf_r>:
 80070f0:	b570      	push	{r4, r5, r6, lr}
 80070f2:	000e      	movs	r6, r1
 80070f4:	001d      	movs	r5, r3
 80070f6:	230e      	movs	r3, #14
 80070f8:	5ec9      	ldrsh	r1, [r1, r3]
 80070fa:	0014      	movs	r4, r2
 80070fc:	b096      	sub	sp, #88	; 0x58
 80070fe:	2900      	cmp	r1, #0
 8007100:	da08      	bge.n	8007114 <__swhatbuf_r+0x24>
 8007102:	220c      	movs	r2, #12
 8007104:	5eb3      	ldrsh	r3, [r6, r2]
 8007106:	2200      	movs	r2, #0
 8007108:	602a      	str	r2, [r5, #0]
 800710a:	061b      	lsls	r3, r3, #24
 800710c:	d411      	bmi.n	8007132 <__swhatbuf_r+0x42>
 800710e:	2380      	movs	r3, #128	; 0x80
 8007110:	00db      	lsls	r3, r3, #3
 8007112:	e00f      	b.n	8007134 <__swhatbuf_r+0x44>
 8007114:	466a      	mov	r2, sp
 8007116:	f000 f909 	bl	800732c <_fstat_r>
 800711a:	2800      	cmp	r0, #0
 800711c:	dbf1      	blt.n	8007102 <__swhatbuf_r+0x12>
 800711e:	23f0      	movs	r3, #240	; 0xf0
 8007120:	9901      	ldr	r1, [sp, #4]
 8007122:	021b      	lsls	r3, r3, #8
 8007124:	4019      	ands	r1, r3
 8007126:	4b05      	ldr	r3, [pc, #20]	; (800713c <__swhatbuf_r+0x4c>)
 8007128:	18c9      	adds	r1, r1, r3
 800712a:	424b      	negs	r3, r1
 800712c:	4159      	adcs	r1, r3
 800712e:	6029      	str	r1, [r5, #0]
 8007130:	e7ed      	b.n	800710e <__swhatbuf_r+0x1e>
 8007132:	2340      	movs	r3, #64	; 0x40
 8007134:	2000      	movs	r0, #0
 8007136:	6023      	str	r3, [r4, #0]
 8007138:	b016      	add	sp, #88	; 0x58
 800713a:	bd70      	pop	{r4, r5, r6, pc}
 800713c:	ffffe000 	.word	0xffffe000

08007140 <__smakebuf_r>:
 8007140:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007142:	2602      	movs	r6, #2
 8007144:	898b      	ldrh	r3, [r1, #12]
 8007146:	0005      	movs	r5, r0
 8007148:	000c      	movs	r4, r1
 800714a:	4233      	tst	r3, r6
 800714c:	d006      	beq.n	800715c <__smakebuf_r+0x1c>
 800714e:	0023      	movs	r3, r4
 8007150:	3347      	adds	r3, #71	; 0x47
 8007152:	6023      	str	r3, [r4, #0]
 8007154:	6123      	str	r3, [r4, #16]
 8007156:	2301      	movs	r3, #1
 8007158:	6163      	str	r3, [r4, #20]
 800715a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800715c:	466a      	mov	r2, sp
 800715e:	ab01      	add	r3, sp, #4
 8007160:	f7ff ffc6 	bl	80070f0 <__swhatbuf_r>
 8007164:	9900      	ldr	r1, [sp, #0]
 8007166:	0007      	movs	r7, r0
 8007168:	0028      	movs	r0, r5
 800716a:	f7fe fb61 	bl	8005830 <_malloc_r>
 800716e:	2800      	cmp	r0, #0
 8007170:	d108      	bne.n	8007184 <__smakebuf_r+0x44>
 8007172:	220c      	movs	r2, #12
 8007174:	5ea3      	ldrsh	r3, [r4, r2]
 8007176:	059a      	lsls	r2, r3, #22
 8007178:	d4ef      	bmi.n	800715a <__smakebuf_r+0x1a>
 800717a:	2203      	movs	r2, #3
 800717c:	4393      	bics	r3, r2
 800717e:	431e      	orrs	r6, r3
 8007180:	81a6      	strh	r6, [r4, #12]
 8007182:	e7e4      	b.n	800714e <__smakebuf_r+0xe>
 8007184:	4b0f      	ldr	r3, [pc, #60]	; (80071c4 <__smakebuf_r+0x84>)
 8007186:	62ab      	str	r3, [r5, #40]	; 0x28
 8007188:	2380      	movs	r3, #128	; 0x80
 800718a:	89a2      	ldrh	r2, [r4, #12]
 800718c:	6020      	str	r0, [r4, #0]
 800718e:	4313      	orrs	r3, r2
 8007190:	81a3      	strh	r3, [r4, #12]
 8007192:	9b00      	ldr	r3, [sp, #0]
 8007194:	6120      	str	r0, [r4, #16]
 8007196:	6163      	str	r3, [r4, #20]
 8007198:	9b01      	ldr	r3, [sp, #4]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00d      	beq.n	80071ba <__smakebuf_r+0x7a>
 800719e:	0028      	movs	r0, r5
 80071a0:	230e      	movs	r3, #14
 80071a2:	5ee1      	ldrsh	r1, [r4, r3]
 80071a4:	f000 f8d4 	bl	8007350 <_isatty_r>
 80071a8:	2800      	cmp	r0, #0
 80071aa:	d006      	beq.n	80071ba <__smakebuf_r+0x7a>
 80071ac:	2203      	movs	r2, #3
 80071ae:	89a3      	ldrh	r3, [r4, #12]
 80071b0:	4393      	bics	r3, r2
 80071b2:	001a      	movs	r2, r3
 80071b4:	2301      	movs	r3, #1
 80071b6:	4313      	orrs	r3, r2
 80071b8:	81a3      	strh	r3, [r4, #12]
 80071ba:	89a0      	ldrh	r0, [r4, #12]
 80071bc:	4307      	orrs	r7, r0
 80071be:	81a7      	strh	r7, [r4, #12]
 80071c0:	e7cb      	b.n	800715a <__smakebuf_r+0x1a>
 80071c2:	46c0      	nop			; (mov r8, r8)
 80071c4:	08006f2d 	.word	0x08006f2d

080071c8 <memchr>:
 80071c8:	b2c9      	uxtb	r1, r1
 80071ca:	1882      	adds	r2, r0, r2
 80071cc:	4290      	cmp	r0, r2
 80071ce:	d101      	bne.n	80071d4 <memchr+0xc>
 80071d0:	2000      	movs	r0, #0
 80071d2:	4770      	bx	lr
 80071d4:	7803      	ldrb	r3, [r0, #0]
 80071d6:	428b      	cmp	r3, r1
 80071d8:	d0fb      	beq.n	80071d2 <memchr+0xa>
 80071da:	3001      	adds	r0, #1
 80071dc:	e7f6      	b.n	80071cc <memchr+0x4>

080071de <memcpy>:
 80071de:	2300      	movs	r3, #0
 80071e0:	b510      	push	{r4, lr}
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d100      	bne.n	80071e8 <memcpy+0xa>
 80071e6:	bd10      	pop	{r4, pc}
 80071e8:	5ccc      	ldrb	r4, [r1, r3]
 80071ea:	54c4      	strb	r4, [r0, r3]
 80071ec:	3301      	adds	r3, #1
 80071ee:	e7f8      	b.n	80071e2 <memcpy+0x4>

080071f0 <memmove>:
 80071f0:	b510      	push	{r4, lr}
 80071f2:	4288      	cmp	r0, r1
 80071f4:	d902      	bls.n	80071fc <memmove+0xc>
 80071f6:	188b      	adds	r3, r1, r2
 80071f8:	4298      	cmp	r0, r3
 80071fa:	d303      	bcc.n	8007204 <memmove+0x14>
 80071fc:	2300      	movs	r3, #0
 80071fe:	e007      	b.n	8007210 <memmove+0x20>
 8007200:	5c8b      	ldrb	r3, [r1, r2]
 8007202:	5483      	strb	r3, [r0, r2]
 8007204:	3a01      	subs	r2, #1
 8007206:	d2fb      	bcs.n	8007200 <memmove+0x10>
 8007208:	bd10      	pop	{r4, pc}
 800720a:	5ccc      	ldrb	r4, [r1, r3]
 800720c:	54c4      	strb	r4, [r0, r3]
 800720e:	3301      	adds	r3, #1
 8007210:	429a      	cmp	r2, r3
 8007212:	d1fa      	bne.n	800720a <memmove+0x1a>
 8007214:	e7f8      	b.n	8007208 <memmove+0x18>
	...

08007218 <__malloc_lock>:
 8007218:	b510      	push	{r4, lr}
 800721a:	4802      	ldr	r0, [pc, #8]	; (8007224 <__malloc_lock+0xc>)
 800721c:	f7ff ff65 	bl	80070ea <__retarget_lock_acquire_recursive>
 8007220:	bd10      	pop	{r4, pc}
 8007222:	46c0      	nop			; (mov r8, r8)
 8007224:	20000538 	.word	0x20000538

08007228 <__malloc_unlock>:
 8007228:	b510      	push	{r4, lr}
 800722a:	4802      	ldr	r0, [pc, #8]	; (8007234 <__malloc_unlock+0xc>)
 800722c:	f7ff ff5e 	bl	80070ec <__retarget_lock_release_recursive>
 8007230:	bd10      	pop	{r4, pc}
 8007232:	46c0      	nop			; (mov r8, r8)
 8007234:	20000538 	.word	0x20000538

08007238 <_realloc_r>:
 8007238:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800723a:	0007      	movs	r7, r0
 800723c:	000e      	movs	r6, r1
 800723e:	0014      	movs	r4, r2
 8007240:	2900      	cmp	r1, #0
 8007242:	d105      	bne.n	8007250 <_realloc_r+0x18>
 8007244:	0011      	movs	r1, r2
 8007246:	f7fe faf3 	bl	8005830 <_malloc_r>
 800724a:	0005      	movs	r5, r0
 800724c:	0028      	movs	r0, r5
 800724e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007250:	2a00      	cmp	r2, #0
 8007252:	d103      	bne.n	800725c <_realloc_r+0x24>
 8007254:	f7fe fa80 	bl	8005758 <_free_r>
 8007258:	0025      	movs	r5, r4
 800725a:	e7f7      	b.n	800724c <_realloc_r+0x14>
 800725c:	f000 f88a 	bl	8007374 <_malloc_usable_size_r>
 8007260:	9001      	str	r0, [sp, #4]
 8007262:	4284      	cmp	r4, r0
 8007264:	d803      	bhi.n	800726e <_realloc_r+0x36>
 8007266:	0035      	movs	r5, r6
 8007268:	0843      	lsrs	r3, r0, #1
 800726a:	42a3      	cmp	r3, r4
 800726c:	d3ee      	bcc.n	800724c <_realloc_r+0x14>
 800726e:	0021      	movs	r1, r4
 8007270:	0038      	movs	r0, r7
 8007272:	f7fe fadd 	bl	8005830 <_malloc_r>
 8007276:	1e05      	subs	r5, r0, #0
 8007278:	d0e8      	beq.n	800724c <_realloc_r+0x14>
 800727a:	9b01      	ldr	r3, [sp, #4]
 800727c:	0022      	movs	r2, r4
 800727e:	429c      	cmp	r4, r3
 8007280:	d900      	bls.n	8007284 <_realloc_r+0x4c>
 8007282:	001a      	movs	r2, r3
 8007284:	0031      	movs	r1, r6
 8007286:	0028      	movs	r0, r5
 8007288:	f7ff ffa9 	bl	80071de <memcpy>
 800728c:	0031      	movs	r1, r6
 800728e:	0038      	movs	r0, r7
 8007290:	f7fe fa62 	bl	8005758 <_free_r>
 8007294:	e7da      	b.n	800724c <_realloc_r+0x14>

08007296 <_raise_r>:
 8007296:	b570      	push	{r4, r5, r6, lr}
 8007298:	0004      	movs	r4, r0
 800729a:	000d      	movs	r5, r1
 800729c:	291f      	cmp	r1, #31
 800729e:	d904      	bls.n	80072aa <_raise_r+0x14>
 80072a0:	2316      	movs	r3, #22
 80072a2:	6003      	str	r3, [r0, #0]
 80072a4:	2001      	movs	r0, #1
 80072a6:	4240      	negs	r0, r0
 80072a8:	bd70      	pop	{r4, r5, r6, pc}
 80072aa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d004      	beq.n	80072ba <_raise_r+0x24>
 80072b0:	008a      	lsls	r2, r1, #2
 80072b2:	189b      	adds	r3, r3, r2
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	2a00      	cmp	r2, #0
 80072b8:	d108      	bne.n	80072cc <_raise_r+0x36>
 80072ba:	0020      	movs	r0, r4
 80072bc:	f000 f832 	bl	8007324 <_getpid_r>
 80072c0:	002a      	movs	r2, r5
 80072c2:	0001      	movs	r1, r0
 80072c4:	0020      	movs	r0, r4
 80072c6:	f000 f81b 	bl	8007300 <_kill_r>
 80072ca:	e7ed      	b.n	80072a8 <_raise_r+0x12>
 80072cc:	2000      	movs	r0, #0
 80072ce:	2a01      	cmp	r2, #1
 80072d0:	d0ea      	beq.n	80072a8 <_raise_r+0x12>
 80072d2:	1c51      	adds	r1, r2, #1
 80072d4:	d103      	bne.n	80072de <_raise_r+0x48>
 80072d6:	2316      	movs	r3, #22
 80072d8:	3001      	adds	r0, #1
 80072da:	6023      	str	r3, [r4, #0]
 80072dc:	e7e4      	b.n	80072a8 <_raise_r+0x12>
 80072de:	2400      	movs	r4, #0
 80072e0:	0028      	movs	r0, r5
 80072e2:	601c      	str	r4, [r3, #0]
 80072e4:	4790      	blx	r2
 80072e6:	0020      	movs	r0, r4
 80072e8:	e7de      	b.n	80072a8 <_raise_r+0x12>
	...

080072ec <raise>:
 80072ec:	b510      	push	{r4, lr}
 80072ee:	4b03      	ldr	r3, [pc, #12]	; (80072fc <raise+0x10>)
 80072f0:	0001      	movs	r1, r0
 80072f2:	6818      	ldr	r0, [r3, #0]
 80072f4:	f7ff ffcf 	bl	8007296 <_raise_r>
 80072f8:	bd10      	pop	{r4, pc}
 80072fa:	46c0      	nop			; (mov r8, r8)
 80072fc:	20000098 	.word	0x20000098

08007300 <_kill_r>:
 8007300:	2300      	movs	r3, #0
 8007302:	b570      	push	{r4, r5, r6, lr}
 8007304:	4d06      	ldr	r5, [pc, #24]	; (8007320 <_kill_r+0x20>)
 8007306:	0004      	movs	r4, r0
 8007308:	0008      	movs	r0, r1
 800730a:	0011      	movs	r1, r2
 800730c:	602b      	str	r3, [r5, #0]
 800730e:	f7f9 ffef 	bl	80012f0 <_kill>
 8007312:	1c43      	adds	r3, r0, #1
 8007314:	d103      	bne.n	800731e <_kill_r+0x1e>
 8007316:	682b      	ldr	r3, [r5, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d000      	beq.n	800731e <_kill_r+0x1e>
 800731c:	6023      	str	r3, [r4, #0]
 800731e:	bd70      	pop	{r4, r5, r6, pc}
 8007320:	20000534 	.word	0x20000534

08007324 <_getpid_r>:
 8007324:	b510      	push	{r4, lr}
 8007326:	f7f9 ffdd 	bl	80012e4 <_getpid>
 800732a:	bd10      	pop	{r4, pc}

0800732c <_fstat_r>:
 800732c:	2300      	movs	r3, #0
 800732e:	b570      	push	{r4, r5, r6, lr}
 8007330:	4d06      	ldr	r5, [pc, #24]	; (800734c <_fstat_r+0x20>)
 8007332:	0004      	movs	r4, r0
 8007334:	0008      	movs	r0, r1
 8007336:	0011      	movs	r1, r2
 8007338:	602b      	str	r3, [r5, #0]
 800733a:	f7fa f838 	bl	80013ae <_fstat>
 800733e:	1c43      	adds	r3, r0, #1
 8007340:	d103      	bne.n	800734a <_fstat_r+0x1e>
 8007342:	682b      	ldr	r3, [r5, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d000      	beq.n	800734a <_fstat_r+0x1e>
 8007348:	6023      	str	r3, [r4, #0]
 800734a:	bd70      	pop	{r4, r5, r6, pc}
 800734c:	20000534 	.word	0x20000534

08007350 <_isatty_r>:
 8007350:	2300      	movs	r3, #0
 8007352:	b570      	push	{r4, r5, r6, lr}
 8007354:	4d06      	ldr	r5, [pc, #24]	; (8007370 <_isatty_r+0x20>)
 8007356:	0004      	movs	r4, r0
 8007358:	0008      	movs	r0, r1
 800735a:	602b      	str	r3, [r5, #0]
 800735c:	f7fa f835 	bl	80013ca <_isatty>
 8007360:	1c43      	adds	r3, r0, #1
 8007362:	d103      	bne.n	800736c <_isatty_r+0x1c>
 8007364:	682b      	ldr	r3, [r5, #0]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d000      	beq.n	800736c <_isatty_r+0x1c>
 800736a:	6023      	str	r3, [r4, #0]
 800736c:	bd70      	pop	{r4, r5, r6, pc}
 800736e:	46c0      	nop			; (mov r8, r8)
 8007370:	20000534 	.word	0x20000534

08007374 <_malloc_usable_size_r>:
 8007374:	1f0b      	subs	r3, r1, #4
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	1f18      	subs	r0, r3, #4
 800737a:	2b00      	cmp	r3, #0
 800737c:	da01      	bge.n	8007382 <_malloc_usable_size_r+0xe>
 800737e:	580b      	ldr	r3, [r1, r0]
 8007380:	18c0      	adds	r0, r0, r3
 8007382:	4770      	bx	lr

08007384 <_init>:
 8007384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007386:	46c0      	nop			; (mov r8, r8)
 8007388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800738a:	bc08      	pop	{r3}
 800738c:	469e      	mov	lr, r3
 800738e:	4770      	bx	lr

08007390 <_fini>:
 8007390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007392:	46c0      	nop			; (mov r8, r8)
 8007394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007396:	bc08      	pop	{r3}
 8007398:	469e      	mov	lr, r3
 800739a:	4770      	bx	lr
